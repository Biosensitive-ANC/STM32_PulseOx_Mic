
STM32_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e254  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800e3e8  0800e3e8  0000f3e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eae0  0800eae0  000102d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800eae0  0800eae0  0000fae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eae8  0800eae8  000102d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eae8  0800eae8  0000fae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eaec  0800eaec  0000faec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  0800eaf0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102d8  2**0
                  CONTENTS
 10 .bss          00002084  200002d8  200002d8  000102d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000235c  2000235c  000102d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019ccd  00000000  00000000  00010308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000437e  00000000  00000000  00029fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  0002e358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010e5  00000000  00000000  0002f968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261cd  00000000  00000000  00030a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f0af  00000000  00000000  00056c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cffd4  00000000  00000000  00075cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145c9d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006da0  00000000  00000000  00145ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  0014ca80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e3cc 	.word	0x0800e3cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	0800e3cc 	.word	0x0800e3cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <dcRemoval>:

#include "filter.h"


DC_FILTER_T dcRemoval(float x, float prev_w, float alpha)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b08b      	sub	sp, #44	@ 0x2c
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000f42:	edc7 0a04 	vstr	s1, [r7, #16]
 8000f46:	ed87 1a03 	vstr	s2, [r7, #12]
  DC_FILTER_T filtered;
  filtered.w = x + alpha * prev_w;
 8000f4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f56:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f5e:	edc7 7a06 	vstr	s15, [r7, #24]
  filtered.result = filtered.w - prev_w;
 8000f62:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f66:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f6e:	edc7 7a07 	vstr	s15, [r7, #28]

  return filtered;
 8000f72:	f107 0320 	add.w	r3, r7, #32
 8000f76:	f107 0218 	add.w	r2, r7, #24
 8000f7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000f82:	6a3a      	ldr	r2, [r7, #32]
 8000f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f86:	ee07 2a10 	vmov	s14, r2
 8000f8a:	ee07 3a90 	vmov	s15, r3
}
 8000f8e:	eeb0 0a47 	vmov.f32	s0, s14
 8000f92:	eef0 0a67 	vmov.f32	s1, s15
 8000f96:	372c      	adds	r7, #44	@ 0x2c
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <lowPassButterworthFilter>:

//Low pass butterworth filter order=1 alpha1=0.1
void lowPassButterworthFilter(float x, BUTTERWORTH_FILTER_T * filterResult)
{
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000faa:	6038      	str	r0, [r7, #0]
	filterResult->v[0] = filterResult->v[1];
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	601a      	str	r2, [r3, #0]

    //Fs = 100Hz and Fc = 10Hz
    filterResult->v[1] = (2.452372752527856026e-1 * x) + (0.50952544949442879485 * filterResult->v[0]);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff fac7 	bl	8000548 <__aeabi_f2d>
 8000fba:	a319      	add	r3, pc, #100	@ (adr r3, 8001020 <lowPassButterworthFilter+0x80>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff fb1a 	bl	80005f8 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4614      	mov	r4, r2
 8000fca:	461d      	mov	r5, r3
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fab9 	bl	8000548 <__aeabi_f2d>
 8000fd6:	a314      	add	r3, pc, #80	@ (adr r3, 8001028 <lowPassButterworthFilter+0x88>)
 8000fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fdc:	f7ff fb0c 	bl	80005f8 <__aeabi_dmul>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	4629      	mov	r1, r5
 8000fe8:	f7ff f950 	bl	800028c <__adddf3>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fdd8 	bl	8000ba8 <__aeabi_d2f>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	605a      	str	r2, [r3, #4]

    //Fs = 100Hz and Fc = 4Hz
    //filterResult->v[1] = (1.367287359973195227e-1 * x) + (0.72654252800536101020 * filterResult->v[0]); //Very precise butterworth filter

    filterResult->result = filterResult->v[0] + filterResult->v[1];
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	ed93 7a00 	vldr	s14, [r3]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	edd3 7a01 	vldr	s15, [r3, #4]
 800100a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bdb0      	pop	{r4, r5, r7, pc}
 800101c:	f3af 8000 	nop.w
 8001020:	5e7c4548 	.word	0x5e7c4548
 8001024:	3fcf63ef 	.word	0x3fcf63ef
 8001028:	50c1dd5c 	.word	0x50c1dd5c
 800102c:	3fe04e08 	.word	0x3fe04e08

08001030 <meanDiff>:

float meanDiff(float M, MEAN_DIFF_FILTER_T* filterValues)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	ed87 0a01 	vstr	s0, [r7, #4]
 800103a:	6038      	str	r0, [r7, #0]
  float avg = 0;
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]

  filterValues->sum -= filterValues->values[filterValues->index];
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	edd3 7a00 	vldr	s15, [r3]
 8001058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
  filterValues->values[filterValues->index] = M;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	601a      	str	r2, [r3, #0]
  filterValues->sum += filterValues->values[filterValues->index];
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	edd3 7a00 	vldr	s15, [r3]
 8001088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

  filterValues->index++;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001098:	3301      	adds	r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  filterValues->index = filterValues->index % MEAN_FILTER_SIZE;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 80010a8:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <meanDiff+0xe0>)
 80010aa:	fba3 1302 	umull	r1, r3, r3, r2
 80010ae:	08d9      	lsrs	r1, r3, #3
 80010b0:	460b      	mov	r3, r1
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	1a5b      	subs	r3, r3, r1
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(filterValues->count < MEAN_FILTER_SIZE)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80010c6:	2b0e      	cmp	r3, #14
 80010c8:	d807      	bhi.n	80010da <meanDiff+0xaa>
    filterValues->count++;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80010d0:	3301      	adds	r3, #1
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  avg = filterValues->sum / filterValues->count;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010f2:	edc7 7a03 	vstr	s15, [r7, #12]
  return avg - M;
 80010f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80010fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80010fe:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001102:	eeb0 0a67 	vmov.f32	s0, s15
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	88888889 	.word	0x88888889

08001114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001114:	b5b0      	push	{r4, r5, r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111a:	f001 fadf 	bl	80026dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111e:	f000 f87b 	bl	8001218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001122:	f000 f9a1 	bl	8001468 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001126:	f000 f8e1 	bl	80012ec <MX_I2C1_Init>
  MX_I2S3_Init();
 800112a:	f000 f90d 	bl	8001348 <MX_I2S3_Init>
  MX_SPI1_Init();
 800112e:	f000 f93b 	bl	80013a8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001132:	f000 f96f 	bl	8001414 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001136:	f009 faf9 	bl	800a72c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	//uint8_t message[] = "Hello PC! STM32 is sending data...\r\n";

	OLED_Init();                // Initialize the OLED display
 800113a:	f000 fef5 	bl	8001f28 <OLED_Init>
	OLED_Clear();               // Clear the OLED screen
 800113e:	f000 ff66 	bl	800200e <OLED_Clear>
	HAL_Delay(100);
 8001142:	2064      	movs	r0, #100	@ 0x64
 8001144:	f001 fb3c 	bl	80027c0 <HAL_Delay>

    if (MAX30102_Init() != HAL_OK) {
 8001148:	f000 fafc 	bl	8001744 <MAX30102_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d005      	beq.n	800115e <main+0x4a>
        OLED_ShowString(0, 0, "MAX30102 OK");
 8001152:	4a2b      	ldr	r2, [pc, #172]	@ (8001200 <main+0xec>)
 8001154:	2100      	movs	r1, #0
 8001156:	2000      	movs	r0, #0
 8001158:	f000 ffce 	bl	80020f8 <OLED_ShowString>
 800115c:	e004      	b.n	8001168 <main+0x54>
    } else {
        OLED_ShowString(0, 0, "MAX30102 ERROR");
 800115e:	4a29      	ldr	r2, [pc, #164]	@ (8001204 <main+0xf0>)
 8001160:	2100      	movs	r1, #0
 8001162:	2000      	movs	r0, #0
 8001164:	f000 ffc8 	bl	80020f8 <OLED_ShowString>
    }

	long currentMillis = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
	long lastMillis = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]

	currentMillis = millis();
 8001170:	f001 fa70 	bl	8002654 <millis>
 8001174:	4603      	mov	r3, r0
 8001176:	60bb      	str	r3, [r7, #8]

		while(!pulseOximiterIntFlag) {}
			*/


		if( pulseOximiterIntFlag )
 8001178:	4b23      	ldr	r3, [pc, #140]	@ (8001208 <main+0xf4>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <main+0x82>
		{
			if (MAX30102_DumpFifo() == HAL_OK) {
 8001182:	f000 fb57 	bl	8001834 <MAX30102_DumpFifo>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d104      	bne.n	8001196 <main+0x82>

				pulseOximiterIntFlag = 0;
 800118c:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <main+0xf4>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]

				MAX30102_ProcessData();
 8001192:	f000 fb61 	bl	8001858 <MAX30102_ProcessData>
		}



		// Display the data over the built in USB every second
		currentMillis = millis();
 8001196:	f001 fa5d 	bl	8002654 <millis>
 800119a:	4603      	mov	r3, r0
 800119c:	60bb      	str	r3, [r7, #8]
		if( currentMillis - lastMillis > 5000 )
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011a8:	4293      	cmp	r3, r2
 80011aa:	dde5      	ble.n	8001178 <main+0x64>
		{
			//MAX30102_DumpFifo();
			//MAX30102_ProcessData();


			float bpm = MAX30102_getBPM();
 80011ac:	f000 fe84 	bl	8001eb8 <MAX30102_getBPM>
 80011b0:	ed87 0a01 	vstr	s0, [r7, #4]
			float spo2 = MAX30102_getSPO2();
 80011b4:	f000 fe8e 	bl	8001ed4 <MAX30102_getSPO2>
 80011b8:	ed87 0a00 	vstr	s0, [r7]
			//sprintf(message, "HR: %.2f   SPO2: %.2f \n", bpm, spo2);
			//CDC_Transmit_FS((uint8_t *)message, strlen(message));

			HAL_GPIO_TogglePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin);		//LED blinking
 80011bc:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80011c0:	4812      	ldr	r0, [pc, #72]	@ (800120c <main+0xf8>)
 80011c2:	f001 fde8 	bl	8002d96 <HAL_GPIO_TogglePin>

			OLED_Clear();
 80011c6:	f000 ff22 	bl	800200e <OLED_Clear>
			sprintf(message, "%.2f   %.2f", bpm, spo2);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff f9bc 	bl	8000548 <__aeabi_f2d>
 80011d0:	4604      	mov	r4, r0
 80011d2:	460d      	mov	r5, r1
 80011d4:	6838      	ldr	r0, [r7, #0]
 80011d6:	f7ff f9b7 	bl	8000548 <__aeabi_f2d>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	e9cd 2300 	strd	r2, r3, [sp]
 80011e2:	4622      	mov	r2, r4
 80011e4:	462b      	mov	r3, r5
 80011e6:	490a      	ldr	r1, [pc, #40]	@ (8001210 <main+0xfc>)
 80011e8:	480a      	ldr	r0, [pc, #40]	@ (8001214 <main+0x100>)
 80011ea:	f00a fcbb 	bl	800bb64 <siprintf>
			//sprintf(message, "%.2f", );
			OLED_ShowString(0, 0, message);
 80011ee:	4a09      	ldr	r2, [pc, #36]	@ (8001214 <main+0x100>)
 80011f0:	2100      	movs	r1, #0
 80011f2:	2000      	movs	r0, #0
 80011f4:	f000 ff80 	bl	80020f8 <OLED_ShowString>
			//MAX30102_readTemperature();


			lastMillis = currentMillis;
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	60fb      	str	r3, [r7, #12]
		if( pulseOximiterIntFlag )
 80011fc:	e7bc      	b.n	8001178 <main+0x64>
 80011fe:	bf00      	nop
 8001200:	0800e3e8 	.word	0x0800e3e8
 8001204:	0800e3f4 	.word	0x0800e3f4
 8001208:	20000470 	.word	0x20000470
 800120c:	40020c00 	.word	0x40020c00
 8001210:	0800e404 	.word	0x0800e404
 8001214:	20000430 	.word	0x20000430

08001218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b094      	sub	sp, #80	@ 0x50
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 0320 	add.w	r3, r7, #32
 8001222:	2230      	movs	r2, #48	@ 0x30
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f00a fcff 	bl	800bc2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	4b28      	ldr	r3, [pc, #160]	@ (80012e4 <SystemClock_Config+0xcc>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	4a27      	ldr	r2, [pc, #156]	@ (80012e4 <SystemClock_Config+0xcc>)
 8001246:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124a:	6413      	str	r3, [r2, #64]	@ 0x40
 800124c:	4b25      	ldr	r3, [pc, #148]	@ (80012e4 <SystemClock_Config+0xcc>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	4b22      	ldr	r3, [pc, #136]	@ (80012e8 <SystemClock_Config+0xd0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a21      	ldr	r2, [pc, #132]	@ (80012e8 <SystemClock_Config+0xd0>)
 8001262:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b1f      	ldr	r3, [pc, #124]	@ (80012e8 <SystemClock_Config+0xd0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001274:	2301      	movs	r3, #1
 8001276:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001278:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800127c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127e:	2302      	movs	r3, #2
 8001280:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001282:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001286:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001288:	2308      	movs	r3, #8
 800128a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800128c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001290:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001292:	2302      	movs	r3, #2
 8001294:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001296:	2307      	movs	r3, #7
 8001298:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129a:	f107 0320 	add.w	r3, r7, #32
 800129e:	4618      	mov	r0, r3
 80012a0:	f004 fe42 	bl	8005f28 <HAL_RCC_OscConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012aa:	f000 f9f5 	bl	8001698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ae:	230f      	movs	r3, #15
 80012b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b2:	2302      	movs	r3, #2
 80012b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012ba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	2105      	movs	r1, #5
 80012cc:	4618      	mov	r0, r3
 80012ce:	f005 f8a3 	bl	8006418 <HAL_RCC_ClockConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012d8:	f000 f9de 	bl	8001698 <Error_Handler>
  }
}
 80012dc:	bf00      	nop
 80012de:	3750      	adds	r7, #80	@ 0x50
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40007000 	.word	0x40007000

080012ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <MX_I2C1_Init+0x50>)
 80012f2:	4a13      	ldr	r2, [pc, #76]	@ (8001340 <MX_I2C1_Init+0x54>)
 80012f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012f6:	4b11      	ldr	r3, [pc, #68]	@ (800133c <MX_I2C1_Init+0x50>)
 80012f8:	4a12      	ldr	r2, [pc, #72]	@ (8001344 <MX_I2C1_Init+0x58>)
 80012fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <MX_I2C1_Init+0x50>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001302:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <MX_I2C1_Init+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001308:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <MX_I2C1_Init+0x50>)
 800130a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800130e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001310:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <MX_I2C1_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <MX_I2C1_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800131c:	4b07      	ldr	r3, [pc, #28]	@ (800133c <MX_I2C1_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <MX_I2C1_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	@ (800133c <MX_I2C1_Init+0x50>)
 800132a:	f001 fd67 	bl	8002dfc <HAL_I2C_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001334:	f000 f9b0 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200002f4 	.word	0x200002f4
 8001340:	40005400 	.word	0x40005400
 8001344:	000186a0 	.word	0x000186a0

08001348 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800134c:	4b13      	ldr	r3, [pc, #76]	@ (800139c <MX_I2S3_Init+0x54>)
 800134e:	4a14      	ldr	r2, [pc, #80]	@ (80013a0 <MX_I2S3_Init+0x58>)
 8001350:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001352:	4b12      	ldr	r3, [pc, #72]	@ (800139c <MX_I2S3_Init+0x54>)
 8001354:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001358:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800135a:	4b10      	ldr	r3, [pc, #64]	@ (800139c <MX_I2S3_Init+0x54>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001360:	4b0e      	ldr	r3, [pc, #56]	@ (800139c <MX_I2S3_Init+0x54>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001366:	4b0d      	ldr	r3, [pc, #52]	@ (800139c <MX_I2S3_Init+0x54>)
 8001368:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800136c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800136e:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <MX_I2S3_Init+0x54>)
 8001370:	4a0c      	ldr	r2, [pc, #48]	@ (80013a4 <MX_I2S3_Init+0x5c>)
 8001372:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001374:	4b09      	ldr	r3, [pc, #36]	@ (800139c <MX_I2S3_Init+0x54>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800137a:	4b08      	ldr	r3, [pc, #32]	@ (800139c <MX_I2S3_Init+0x54>)
 800137c:	2200      	movs	r2, #0
 800137e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001380:	4b06      	ldr	r3, [pc, #24]	@ (800139c <MX_I2S3_Init+0x54>)
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	@ (800139c <MX_I2S3_Init+0x54>)
 8001388:	f002 fedc 	bl	8004144 <HAL_I2S_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001392:	f000 f981 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000348 	.word	0x20000348
 80013a0:	40003c00 	.word	0x40003c00
 80013a4:	00017700 	.word	0x00017700

080013a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013ac:	4b17      	ldr	r3, [pc, #92]	@ (800140c <MX_SPI1_Init+0x64>)
 80013ae:	4a18      	ldr	r2, [pc, #96]	@ (8001410 <MX_SPI1_Init+0x68>)
 80013b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013b2:	4b16      	ldr	r3, [pc, #88]	@ (800140c <MX_SPI1_Init+0x64>)
 80013b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ba:	4b14      	ldr	r3, [pc, #80]	@ (800140c <MX_SPI1_Init+0x64>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013c0:	4b12      	ldr	r3, [pc, #72]	@ (800140c <MX_SPI1_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013c6:	4b11      	ldr	r3, [pc, #68]	@ (800140c <MX_SPI1_Init+0x64>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <MX_SPI1_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <MX_SPI1_Init+0x64>)
 80013d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <MX_SPI1_Init+0x64>)
 80013dc:	2200      	movs	r2, #0
 80013de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013e0:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <MX_SPI1_Init+0x64>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013e6:	4b09      	ldr	r3, [pc, #36]	@ (800140c <MX_SPI1_Init+0x64>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ec:	4b07      	ldr	r3, [pc, #28]	@ (800140c <MX_SPI1_Init+0x64>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013f2:	4b06      	ldr	r3, [pc, #24]	@ (800140c <MX_SPI1_Init+0x64>)
 80013f4:	220a      	movs	r2, #10
 80013f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013f8:	4804      	ldr	r0, [pc, #16]	@ (800140c <MX_SPI1_Init+0x64>)
 80013fa:	f005 fb6f 	bl	8006adc <HAL_SPI_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001404:	f000 f948 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000390 	.word	0x20000390
 8001410:	40013000 	.word	0x40013000

08001414 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001418:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <MX_USART2_UART_Init+0x4c>)
 800141a:	4a12      	ldr	r2, [pc, #72]	@ (8001464 <MX_USART2_UART_Init+0x50>)
 800141c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800141e:	4b10      	ldr	r3, [pc, #64]	@ (8001460 <MX_USART2_UART_Init+0x4c>)
 8001420:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <MX_USART2_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800142c:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <MX_USART2_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001432:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <MX_USART2_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001438:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <MX_USART2_UART_Init+0x4c>)
 800143a:	220c      	movs	r2, #12
 800143c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143e:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <MX_USART2_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001444:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <MX_USART2_UART_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800144a:	4805      	ldr	r0, [pc, #20]	@ (8001460 <MX_USART2_UART_Init+0x4c>)
 800144c:	f005 fbcf 	bl	8006bee <HAL_UART_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001456:	f000 f91f 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200003e8 	.word	0x200003e8
 8001464:	40004400 	.word	0x40004400

08001468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08c      	sub	sp, #48	@ 0x30
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	4b76      	ldr	r3, [pc, #472]	@ (800165c <MX_GPIO_Init+0x1f4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a75      	ldr	r2, [pc, #468]	@ (800165c <MX_GPIO_Init+0x1f4>)
 8001488:	f043 0310 	orr.w	r3, r3, #16
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b73      	ldr	r3, [pc, #460]	@ (800165c <MX_GPIO_Init+0x1f4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f003 0310 	and.w	r3, r3, #16
 8001496:	61bb      	str	r3, [r7, #24]
 8001498:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	4b6f      	ldr	r3, [pc, #444]	@ (800165c <MX_GPIO_Init+0x1f4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a6e      	ldr	r2, [pc, #440]	@ (800165c <MX_GPIO_Init+0x1f4>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b6c      	ldr	r3, [pc, #432]	@ (800165c <MX_GPIO_Init+0x1f4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b68      	ldr	r3, [pc, #416]	@ (800165c <MX_GPIO_Init+0x1f4>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	4a67      	ldr	r2, [pc, #412]	@ (800165c <MX_GPIO_Init+0x1f4>)
 80014c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c6:	4b65      	ldr	r3, [pc, #404]	@ (800165c <MX_GPIO_Init+0x1f4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b61      	ldr	r3, [pc, #388]	@ (800165c <MX_GPIO_Init+0x1f4>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	4a60      	ldr	r2, [pc, #384]	@ (800165c <MX_GPIO_Init+0x1f4>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e2:	4b5e      	ldr	r3, [pc, #376]	@ (800165c <MX_GPIO_Init+0x1f4>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	4b5a      	ldr	r3, [pc, #360]	@ (800165c <MX_GPIO_Init+0x1f4>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	4a59      	ldr	r2, [pc, #356]	@ (800165c <MX_GPIO_Init+0x1f4>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fe:	4b57      	ldr	r3, [pc, #348]	@ (800165c <MX_GPIO_Init+0x1f4>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b53      	ldr	r3, [pc, #332]	@ (800165c <MX_GPIO_Init+0x1f4>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a52      	ldr	r2, [pc, #328]	@ (800165c <MX_GPIO_Init+0x1f4>)
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b50      	ldr	r3, [pc, #320]	@ (800165c <MX_GPIO_Init+0x1f4>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2108      	movs	r1, #8
 800152a:	484d      	ldr	r0, [pc, #308]	@ (8001660 <MX_GPIO_Init+0x1f8>)
 800152c:	f001 fc1a 	bl	8002d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001530:	2201      	movs	r2, #1
 8001532:	2101      	movs	r1, #1
 8001534:	484b      	ldr	r0, [pc, #300]	@ (8001664 <MX_GPIO_Init+0x1fc>)
 8001536:	f001 fc15 	bl	8002d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800153a:	2200      	movs	r2, #0
 800153c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001540:	4849      	ldr	r0, [pc, #292]	@ (8001668 <MX_GPIO_Init+0x200>)
 8001542:	f001 fc0f 	bl	8002d64 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001546:	2308      	movs	r3, #8
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154a:	2301      	movs	r3, #1
 800154c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001556:	f107 031c 	add.w	r3, r7, #28
 800155a:	4619      	mov	r1, r3
 800155c:	4840      	ldr	r0, [pc, #256]	@ (8001660 <MX_GPIO_Init+0x1f8>)
 800155e:	f001 fa65 	bl	8002a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001562:	2301      	movs	r3, #1
 8001564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	2301      	movs	r3, #1
 8001568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4619      	mov	r1, r3
 8001578:	483a      	ldr	r0, [pc, #232]	@ (8001664 <MX_GPIO_Init+0x1fc>)
 800157a:	f001 fa57 	bl	8002a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800157e:	2308      	movs	r3, #8
 8001580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800158e:	2305      	movs	r3, #5
 8001590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	4619      	mov	r1, r3
 8001598:	4832      	ldr	r0, [pc, #200]	@ (8001664 <MX_GPIO_Init+0x1fc>)
 800159a:	f001 fa47 	bl	8002a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : Pulse_Oximeter_Int_Pin */
  GPIO_InitStruct.Pin = Pulse_Oximeter_Int_Pin;
 800159e:	2301      	movs	r3, #1
 80015a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015a2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Pulse_Oximeter_Int_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	4619      	mov	r1, r3
 80015b2:	482e      	ldr	r0, [pc, #184]	@ (800166c <MX_GPIO_Init+0x204>)
 80015b4:	f001 fa3a 	bl	8002a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80015b8:	2304      	movs	r3, #4
 80015ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	4828      	ldr	r0, [pc, #160]	@ (800166c <MX_GPIO_Init+0x204>)
 80015cc:	f001 fa2e 	bl	8002a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80015d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015e2:	2305      	movs	r3, #5
 80015e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	4619      	mov	r1, r3
 80015ec:	481f      	ldr	r0, [pc, #124]	@ (800166c <MX_GPIO_Init+0x204>)
 80015ee:	f001 fa1d 	bl	8002a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015f2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80015f6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	4619      	mov	r1, r3
 800160a:	4817      	ldr	r0, [pc, #92]	@ (8001668 <MX_GPIO_Init+0x200>)
 800160c:	f001 fa0e 	bl	8002a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001610:	2320      	movs	r3, #32
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	4619      	mov	r1, r3
 8001622:	4811      	ldr	r0, [pc, #68]	@ (8001668 <MX_GPIO_Init+0x200>)
 8001624:	f001 fa02 	bl	8002a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001628:	2302      	movs	r3, #2
 800162a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800162c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	4619      	mov	r1, r3
 800163c:	4808      	ldr	r0, [pc, #32]	@ (8001660 <MX_GPIO_Init+0x1f8>)
 800163e:	f001 f9f5 	bl	8002a2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2006      	movs	r0, #6
 8001648:	f001 f9b9 	bl	80029be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800164c:	2006      	movs	r0, #6
 800164e:	f001 f9d2 	bl	80029f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001652:	bf00      	nop
 8001654:	3730      	adds	r7, #48	@ 0x30
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800
 8001660:	40021000 	.word	0x40021000
 8001664:	40020800 	.word	0x40020800
 8001668:	40020c00 	.word	0x40020c00
 800166c:	40020400 	.word	0x40020400

08001670 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Pulse_Oximeter_Int_Pin)
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d102      	bne.n	8001686 <HAL_GPIO_EXTI_Callback+0x16>
	{
		pulseOximiterIntFlag = 1;
 8001680:	4b04      	ldr	r3, [pc, #16]	@ (8001694 <HAL_GPIO_EXTI_Callback+0x24>)
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
	}
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000470 	.word	0x20000470

08001698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800169c:	b672      	cpsid	i
}
 800169e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <Error_Handler+0x8>

080016a4 <MAX30102_WriteRegister>:
uint8_t max30102_sensor_data[6 * MAX30102_SAMPLES_PER_BURST] = {0};


/* USER CODE BEGIN 0 */
// I2C write to register
HAL_StatusTypeDef MAX30102_WriteRegister(uint8_t reg, uint8_t value) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af04      	add	r7, sp, #16
 80016aa:	4603      	mov	r3, r0
 80016ac:	460a      	mov	r2, r1
 80016ae:	71fb      	strb	r3, [r7, #7]
 80016b0:	4613      	mov	r3, r2
 80016b2:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(&hi2c1, (MAX30102_ADDRESS << 1), reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 100);
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	2364      	movs	r3, #100	@ 0x64
 80016ba:	9302      	str	r3, [sp, #8]
 80016bc:	2301      	movs	r3, #1
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	1dbb      	adds	r3, r7, #6
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2301      	movs	r3, #1
 80016c6:	21ae      	movs	r1, #174	@ 0xae
 80016c8:	4803      	ldr	r0, [pc, #12]	@ (80016d8 <MAX30102_WriteRegister+0x34>)
 80016ca:	f001 fdd9 	bl	8003280 <HAL_I2C_Mem_Write>
 80016ce:	4603      	mov	r3, r0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200002f4 	.word	0x200002f4

080016dc <MAX30102_ReadRegister>:

// I2C read from register
HAL_StatusTypeDef MAX30102_ReadRegister(uint8_t reg, uint8_t *value) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af04      	add	r7, sp, #16
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Read(&hi2c1, (MAX30102_ADDRESS << 1), reg, I2C_MEMADD_SIZE_8BIT, value, 1, 100);
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	2364      	movs	r3, #100	@ 0x64
 80016ee:	9302      	str	r3, [sp, #8]
 80016f0:	2301      	movs	r3, #1
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2301      	movs	r3, #1
 80016fa:	21ae      	movs	r1, #174	@ 0xae
 80016fc:	4803      	ldr	r0, [pc, #12]	@ (800170c <MAX30102_ReadRegister+0x30>)
 80016fe:	f001 feb9 	bl	8003474 <HAL_I2C_Mem_Read>
 8001702:	4603      	mov	r3, r0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200002f4 	.word	0x200002f4

08001710 <MAX30102_ReadFIFO>:

// Read FIFO data
uint8_t MAX30102_ReadFIFO(uint8_t *buffer, uint8_t length) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af04      	add	r7, sp, #16
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Read(&hi2c1, (MAX30102_ADDRESS << 1), REG_FIFO_DATA, I2C_MEMADD_SIZE_8BIT, buffer, length, 100);
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	b29b      	uxth	r3, r3
 8001720:	2264      	movs	r2, #100	@ 0x64
 8001722:	9202      	str	r2, [sp, #8]
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	2301      	movs	r3, #1
 800172c:	2207      	movs	r2, #7
 800172e:	21ae      	movs	r1, #174	@ 0xae
 8001730:	4803      	ldr	r0, [pc, #12]	@ (8001740 <MAX30102_ReadFIFO+0x30>)
 8001732:	f001 fe9f 	bl	8003474 <HAL_I2C_Mem_Read>
 8001736:	4603      	mov	r3, r0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200002f4 	.word	0x200002f4

08001744 <MAX30102_Init>:

// MAX30102 initialization
uint8_t MAX30102_Init(void) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
    uint8_t part_id = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	71bb      	strb	r3, [r7, #6]

    // Read MAX30102 ID to verify device presence
    if (MAX30102_ReadRegister(REG_PART_ID, &part_id) != HAL_OK || part_id != 0x15) {
 800174e:	1dbb      	adds	r3, r7, #6
 8001750:	4619      	mov	r1, r3
 8001752:	20ff      	movs	r0, #255	@ 0xff
 8001754:	f7ff ffc2 	bl	80016dc <MAX30102_ReadRegister>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <MAX30102_Init+0x20>
 800175e:	79bb      	ldrb	r3, [r7, #6]
 8001760:	2b15      	cmp	r3, #21
 8001762:	d001      	beq.n	8001768 <MAX30102_Init+0x24>
        return 0;  // Device not found
 8001764:	2300      	movs	r3, #0
 8001766:	e02b      	b.n	80017c0 <MAX30102_Init+0x7c>
    }

    // Reset MAX30102
    MAX30102_WriteRegister(REG_MODE_CONFIG, (1 << 6));  // Reset MAX30102  (bit 6)
 8001768:	2140      	movs	r1, #64	@ 0x40
 800176a:	2009      	movs	r0, #9
 800176c:	f7ff ff9a 	bl	80016a4 <MAX30102_WriteRegister>
    HAL_Delay(10);
 8001770:	200a      	movs	r0, #10
 8001772:	f001 f825 	bl	80027c0 <HAL_Delay>

    // Configure SPO2 mode
    MAX30102_WriteRegister(REG_MODE_CONFIG, 0b011 << BIT_MODE);  // Use heart rate mode only (or 0x07 to enable SPO2)
 8001776:	2103      	movs	r1, #3
 8001778:	2009      	movs	r0, #9
 800177a:	f7ff ff93 	bl	80016a4 <MAX30102_WriteRegister>
    uint8_t spo2_bits = (0b01 << BIT_SPO2_ADC_RGE) |  (0b000 << BIT_SPO2_SR) | (0b01 << BIT_LED_PW); //pw of 11 browns out supply
 800177e:	2321      	movs	r3, #33	@ 0x21
 8001780:	71fb      	strb	r3, [r7, #7]
    MAX30102_WriteRegister(REG_SPO2_CONFIG, spo2_bits);  // Set ADC range and sampling rate
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	4619      	mov	r1, r3
 8001786:	200a      	movs	r0, #10
 8001788:	f7ff ff8c 	bl	80016a4 <MAX30102_WriteRegister>

    // Set LED brightness (0x24 represents medium brightness, adjustable)
    redLEDCurrent = 50;
 800178c:	4b0e      	ldr	r3, [pc, #56]	@ (80017c8 <MAX30102_Init+0x84>)
 800178e:	2232      	movs	r2, #50	@ 0x32
 8001790:	701a      	strb	r2, [r3, #0]
    MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8001792:	4b0d      	ldr	r3, [pc, #52]	@ (80017c8 <MAX30102_Init+0x84>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	4619      	mov	r1, r3
 8001798:	2001      	movs	r0, #1
 800179a:	f000 f825 	bl	80017e8 <MAX30102_setLedCurrent>
    MAX30102_setLedCurrent(IR_LED, redLEDCurrent);
 800179e:	4b0a      	ldr	r3, [pc, #40]	@ (80017c8 <MAX30102_Init+0x84>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	4619      	mov	r1, r3
 80017a4:	2002      	movs	r0, #2
 80017a6:	f000 f81f 	bl	80017e8 <MAX30102_setLedCurrent>
    //MAX30102_WriteRegister(REG_LED1_PA, 0x24);  // LED1 (Red)
    //MAX30102_WriteRegister(REG_LED2_PA, 0x24);  // LED2 (Infrared)

    // interrupts
    MAX30102_WriteRegister(REG_FIFO_CONFIG, ((32 - MAX30102_SAMPLES_PER_BURST) << BIT_FIFO_A_FULL_VAL)); // max value is 15 min is 0
 80017aa:	2100      	movs	r1, #0
 80017ac:	2008      	movs	r0, #8
 80017ae:	f7ff ff79 	bl	80016a4 <MAX30102_WriteRegister>
    MAX30102_WriteRegister(REG_INT1_EN, 1 << BIT_EN_A_FULL_INT);
 80017b2:	2180      	movs	r1, #128	@ 0x80
 80017b4:	2002      	movs	r0, #2
 80017b6:	f7ff ff75 	bl	80016a4 <MAX30102_WriteRegister>

    MAX30102_ClearInterrupt();
 80017ba:	f000 f807 	bl	80017cc <MAX30102_ClearInterrupt>

    return 1;  // Initialization successful
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000548 	.word	0x20000548

080017cc <MAX30102_ClearInterrupt>:

void MAX30102_ClearInterrupt(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
	uint8_t reset = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	71fb      	strb	r3, [r7, #7]
	MAX30102_ReadRegister(REG_STATUS, &reset); // clears initial interrupt
 80017d6:	1dfb      	adds	r3, r7, #7
 80017d8:	4619      	mov	r1, r3
 80017da:	2000      	movs	r0, #0
 80017dc:	f7ff ff7e 	bl	80016dc <MAX30102_ReadRegister>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <MAX30102_setLedCurrent>:
	return 1;
}


uint8_t MAX30102_setLedCurrent(uint8_t led, uint8_t currentLevel)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	460a      	mov	r2, r1
 80017f2:	71fb      	strb	r3, [r7, #7]
 80017f4:	4613      	mov	r3, r2
 80017f6:	71bb      	strb	r3, [r7, #6]
	uint8_t ledRegister = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]

	switch(led){
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d002      	beq.n	8001808 <MAX30102_setLedCurrent+0x20>
 8001802:	2b02      	cmp	r3, #2
 8001804:	d003      	beq.n	800180e <MAX30102_setLedCurrent+0x26>
 8001806:	e005      	b.n	8001814 <MAX30102_setLedCurrent+0x2c>
	case RED_LED: 	ledRegister = REG_LED1_PA; break;
 8001808:	230c      	movs	r3, #12
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	e002      	b.n	8001814 <MAX30102_setLedCurrent+0x2c>
	case IR_LED:	ledRegister = REG_LED2_PA; break;
 800180e:	230d      	movs	r3, #13
 8001810:	73fb      	strb	r3, [r7, #15]
 8001812:	bf00      	nop
	}

	if( MAX30102_WriteRegister(ledRegister, currentLevel) != HAL_OK){
 8001814:	79ba      	ldrb	r2, [r7, #6]
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	4611      	mov	r1, r2
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff42 	bl	80016a4 <MAX30102_WriteRegister>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MAX30102_setLedCurrent+0x42>
		return 0;
 8001826:	2300      	movs	r3, #0
 8001828:	e000      	b.n	800182c <MAX30102_setLedCurrent+0x44>
	}
	return 1;
 800182a:	2301      	movs	r3, #1
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <MAX30102_DumpFifo>:

uint8_t MAX30102_DumpFifo() {
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
	uint8_t retval = MAX30102_ReadFIFO(max30102_sensor_data, 6 * MAX30102_SAMPLES_PER_BURST);
 800183a:	21c0      	movs	r1, #192	@ 0xc0
 800183c:	4805      	ldr	r0, [pc, #20]	@ (8001854 <MAX30102_DumpFifo+0x20>)
 800183e:	f7ff ff67 	bl	8001710 <MAX30102_ReadFIFO>
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
	MAX30102_ClearInterrupt();
 8001846:	f7ff ffc1 	bl	80017cc <MAX30102_ClearInterrupt>
	return retval;
 800184a:	79fb      	ldrb	r3, [r7, #7]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000554 	.word	0x20000554

08001858 <MAX30102_ProcessData>:

void MAX30102_ProcessData() {
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b08e      	sub	sp, #56	@ 0x38
 800185c:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < MAX30102_SAMPLES_PER_BURST; i++) {
 800185e:	2300      	movs	r3, #0
 8001860:	637b      	str	r3, [r7, #52]	@ 0x34
 8001862:	e048      	b.n	80018f6 <MAX30102_ProcessData+0x9e>
		// heart rate mode only needs red, so only save red data initially long term
		FIFO_LED_DATA rawData = {0};
 8001864:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
		uint8_t n = i*6;
 800186e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001870:	b2db      	uxtb	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	0052      	lsls	r2, r2, #1
 8001876:	4413      	add	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		rawData.redLedRaw = ((max30102_sensor_data[n+0] << 16)) | (max30102_sensor_data[n+1] << 8) | max30102_sensor_data[n+2];
 800187e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001882:	4a21      	ldr	r2, [pc, #132]	@ (8001908 <MAX30102_ProcessData+0xb0>)
 8001884:	5cd3      	ldrb	r3, [r2, r3]
 8001886:	041a      	lsls	r2, r3, #16
 8001888:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800188c:	3301      	adds	r3, #1
 800188e:	491e      	ldr	r1, [pc, #120]	@ (8001908 <MAX30102_ProcessData+0xb0>)
 8001890:	5ccb      	ldrb	r3, [r1, r3]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	4313      	orrs	r3, r2
 8001896:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800189a:	3202      	adds	r2, #2
 800189c:	491a      	ldr	r1, [pc, #104]	@ (8001908 <MAX30102_ProcessData+0xb0>)
 800189e:	5c8a      	ldrb	r2, [r1, r2]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	62bb      	str	r3, [r7, #40]	@ 0x28
		rawData.irLedRaw = 	((max30102_sensor_data[n+3] << 16)) | (max30102_sensor_data[n+4] << 8) | max30102_sensor_data[n+5];
 80018a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80018a8:	3303      	adds	r3, #3
 80018aa:	4a17      	ldr	r2, [pc, #92]	@ (8001908 <MAX30102_ProcessData+0xb0>)
 80018ac:	5cd3      	ldrb	r3, [r2, r3]
 80018ae:	041a      	lsls	r2, r3, #16
 80018b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80018b4:	3304      	adds	r3, #4
 80018b6:	4914      	ldr	r1, [pc, #80]	@ (8001908 <MAX30102_ProcessData+0xb0>)
 80018b8:	5ccb      	ldrb	r3, [r1, r3]
 80018ba:	021b      	lsls	r3, r3, #8
 80018bc:	4313      	orrs	r3, r2
 80018be:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80018c2:	3205      	adds	r2, #5
 80018c4:	4910      	ldr	r1, [pc, #64]	@ (8001908 <MAX30102_ProcessData+0xb0>)
 80018c6:	5c8a      	ldrb	r2, [r1, r2]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

		pulseOximeter = pulseOximeter_update(rawData);
 80018cc:	4c0f      	ldr	r4, [pc, #60]	@ (800190c <MAX30102_ProcessData+0xb4>)
 80018ce:	4638      	mov	r0, r7
 80018d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018d4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80018d8:	f000 f982 	bl	8001be0 <pulseOximeter_update>
 80018dc:	4625      	mov	r5, r4
 80018de:	463c      	mov	r4, r7
 80018e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018ec:	e885 0003 	stmia.w	r5, {r0, r1}
	for (int i = 0 ; i < MAX30102_SAMPLES_PER_BURST; i++) {
 80018f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018f2:	3301      	adds	r3, #1
 80018f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80018f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018f8:	2b1f      	cmp	r3, #31
 80018fa:	ddb3      	ble.n	8001864 <MAX30102_ProcessData+0xc>

	}
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3738      	adds	r7, #56	@ 0x38
 8001902:	46bd      	mov	sp, r7
 8001904:	bdb0      	pop	{r4, r5, r7, pc}
 8001906:	bf00      	nop
 8001908:	20000554 	.word	0x20000554
 800190c:	20000474 	.word	0x20000474

08001910 <detectPulse>:
	currentTemperature = temperature;
}


bool detectPulse(float sensor_value)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	ed87 0a01 	vstr	s0, [r7, #4]
  static float prev_sensor_value = 0;
  static uint8_t values_went_down = 0;
  static uint32_t currentBeat = 0;
  static uint32_t lastBeat = 0;

  if(sensor_value > PULSE_MAX_THRESHOLD)
 800191a:	edd7 7a01 	vldr	s15, [r7, #4]
 800191e:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8001aec <detectPulse+0x1dc>
 8001922:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192a:	dd14      	ble.n	8001956 <detectPulse+0x46>
  {
    currentPulseDetectorState = PULSE_IDLE;
 800192c:	4b70      	ldr	r3, [pc, #448]	@ (8001af0 <detectPulse+0x1e0>)
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
    prev_sensor_value = 0;
 8001932:	4b70      	ldr	r3, [pc, #448]	@ (8001af4 <detectPulse+0x1e4>)
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
    lastBeat = 0;
 800193a:	4b6f      	ldr	r3, [pc, #444]	@ (8001af8 <detectPulse+0x1e8>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
    currentBeat = 0;
 8001940:	4b6e      	ldr	r3, [pc, #440]	@ (8001afc <detectPulse+0x1ec>)
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
    values_went_down = 0;
 8001946:	4b6e      	ldr	r3, [pc, #440]	@ (8001b00 <detectPulse+0x1f0>)
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
    lastBeatThreshold = 0;
 800194c:	4b6d      	ldr	r3, [pc, #436]	@ (8001b04 <detectPulse+0x1f4>)
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
    return false;
 8001952:	2300      	movs	r3, #0
 8001954:	e0c5      	b.n	8001ae2 <detectPulse+0x1d2>
  }

  switch(currentPulseDetectorState)
 8001956:	4b66      	ldr	r3, [pc, #408]	@ (8001af0 <detectPulse+0x1e0>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b02      	cmp	r3, #2
 800195c:	f000 809f 	beq.w	8001a9e <detectPulse+0x18e>
 8001960:	2b02      	cmp	r3, #2
 8001962:	f300 80ba 	bgt.w	8001ada <detectPulse+0x1ca>
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <detectPulse+0x60>
 800196a:	2b01      	cmp	r3, #1
 800196c:	d011      	beq.n	8001992 <detectPulse+0x82>
 800196e:	e0b4      	b.n	8001ada <detectPulse+0x1ca>
  {
    case PULSE_IDLE:
      if(sensor_value >= PULSE_MIN_THRESHOLD) {
 8001970:	edd7 7a01 	vldr	s15, [r7, #4]
 8001974:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8001b08 <detectPulse+0x1f8>
 8001978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800197c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001980:	da00      	bge.n	8001984 <detectPulse+0x74>
        currentPulseDetectorState = PULSE_TRACE_UP;
        values_went_down = 0;
      }
      break;
 8001982:	e0aa      	b.n	8001ada <detectPulse+0x1ca>
        currentPulseDetectorState = PULSE_TRACE_UP;
 8001984:	4b5a      	ldr	r3, [pc, #360]	@ (8001af0 <detectPulse+0x1e0>)
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]
        values_went_down = 0;
 800198a:	4b5d      	ldr	r3, [pc, #372]	@ (8001b00 <detectPulse+0x1f0>)
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
      break;
 8001990:	e0a3      	b.n	8001ada <detectPulse+0x1ca>

    case PULSE_TRACE_UP:
      if(sensor_value > prev_sensor_value)
 8001992:	4b58      	ldr	r3, [pc, #352]	@ (8001af4 <detectPulse+0x1e4>)
 8001994:	edd3 7a00 	vldr	s15, [r3]
 8001998:	ed97 7a01 	vldr	s14, [r7, #4]
 800199c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a4:	dd0d      	ble.n	80019c2 <detectPulse+0xb2>
      {
        currentBeat = millis();
 80019a6:	f000 fe55 	bl	8002654 <millis>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4a53      	ldr	r2, [pc, #332]	@ (8001afc <detectPulse+0x1ec>)
 80019ae:	6013      	str	r3, [r2, #0]
        lastBeatThreshold = sensor_value;
 80019b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80019b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019b8:	ee17 2a90 	vmov	r2, s15
 80019bc:	4b51      	ldr	r3, [pc, #324]	@ (8001b04 <detectPulse+0x1f4>)
 80019be:	601a      	str	r2, [r3, #0]

        currentPulseDetectorState = PULSE_TRACE_DOWN;

        return true;
      }
      break;
 80019c0:	e08b      	b.n	8001ada <detectPulse+0x1ca>
    	uint32_t beatDuration = currentBeat - lastBeat;
 80019c2:	4b4e      	ldr	r3, [pc, #312]	@ (8001afc <detectPulse+0x1ec>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4b4c      	ldr	r3, [pc, #304]	@ (8001af8 <detectPulse+0x1e8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	60fb      	str	r3, [r7, #12]
        lastBeat = currentBeat;
 80019ce:	4b4b      	ldr	r3, [pc, #300]	@ (8001afc <detectPulse+0x1ec>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a49      	ldr	r2, [pc, #292]	@ (8001af8 <detectPulse+0x1e8>)
 80019d4:	6013      	str	r3, [r2, #0]
        float rawBPM = 0;
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
        if(beatDuration > 0)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00a      	beq.n	80019f8 <detectPulse+0xe8>
          rawBPM = 60000.0 / (float)beatDuration;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019ec:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8001b0c <detectPulse+0x1fc>
 80019f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f4:	edc7 7a05 	vstr	s15, [r7, #20]
        valuesBPM[bpmIndex] = rawBPM;
 80019f8:	4b45      	ldr	r3, [pc, #276]	@ (8001b10 <detectPulse+0x200>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4a45      	ldr	r2, [pc, #276]	@ (8001b14 <detectPulse+0x204>)
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	601a      	str	r2, [r3, #0]
        valuesBPMSum = 0;
 8001a06:	4b44      	ldr	r3, [pc, #272]	@ (8001b18 <detectPulse+0x208>)
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
        for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	e010      	b.n	8001a36 <detectPulse+0x126>
          valuesBPMSum += valuesBPM[i];
 8001a14:	4a3f      	ldr	r2, [pc, #252]	@ (8001b14 <detectPulse+0x204>)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	ed93 7a00 	vldr	s14, [r3]
 8001a20:	4b3d      	ldr	r3, [pc, #244]	@ (8001b18 <detectPulse+0x208>)
 8001a22:	edd3 7a00 	vldr	s15, [r3]
 8001a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b18 <detectPulse+0x208>)
 8001a2c:	edc3 7a00 	vstr	s15, [r3]
        for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	3301      	adds	r3, #1
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2b09      	cmp	r3, #9
 8001a3a:	ddeb      	ble.n	8001a14 <detectPulse+0x104>
        bpmIndex++;
 8001a3c:	4b34      	ldr	r3, [pc, #208]	@ (8001b10 <detectPulse+0x200>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b32      	ldr	r3, [pc, #200]	@ (8001b10 <detectPulse+0x200>)
 8001a46:	701a      	strb	r2, [r3, #0]
        bpmIndex = bpmIndex % PULSE_BPM_SAMPLE_SIZE;
 8001a48:	4b31      	ldr	r3, [pc, #196]	@ (8001b10 <detectPulse+0x200>)
 8001a4a:	781a      	ldrb	r2, [r3, #0]
 8001a4c:	4b33      	ldr	r3, [pc, #204]	@ (8001b1c <detectPulse+0x20c>)
 8001a4e:	fba3 1302 	umull	r1, r3, r3, r2
 8001a52:	08d9      	lsrs	r1, r3, #3
 8001a54:	460b      	mov	r3, r1
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	4b2b      	ldr	r3, [pc, #172]	@ (8001b10 <detectPulse+0x200>)
 8001a62:	701a      	strb	r2, [r3, #0]
        if(valuesBPMCount < PULSE_BPM_SAMPLE_SIZE)
 8001a64:	4b2e      	ldr	r3, [pc, #184]	@ (8001b20 <detectPulse+0x210>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b09      	cmp	r3, #9
 8001a6a:	d805      	bhi.n	8001a78 <detectPulse+0x168>
          valuesBPMCount++;
 8001a6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001b20 <detectPulse+0x210>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	3301      	adds	r3, #1
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b2a      	ldr	r3, [pc, #168]	@ (8001b20 <detectPulse+0x210>)
 8001a76:	701a      	strb	r2, [r3, #0]
        currentBPM = valuesBPMSum / valuesBPMCount;
 8001a78:	4b27      	ldr	r3, [pc, #156]	@ (8001b18 <detectPulse+0x208>)
 8001a7a:	edd3 6a00 	vldr	s13, [r3]
 8001a7e:	4b28      	ldr	r3, [pc, #160]	@ (8001b20 <detectPulse+0x210>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	ee07 3a90 	vmov	s15, r3
 8001a86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a8e:	4b25      	ldr	r3, [pc, #148]	@ (8001b24 <detectPulse+0x214>)
 8001a90:	edc3 7a00 	vstr	s15, [r3]
        currentPulseDetectorState = PULSE_TRACE_DOWN;
 8001a94:	4b16      	ldr	r3, [pc, #88]	@ (8001af0 <detectPulse+0x1e0>)
 8001a96:	2202      	movs	r2, #2
 8001a98:	701a      	strb	r2, [r3, #0]
        return true;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e021      	b.n	8001ae2 <detectPulse+0x1d2>

    case PULSE_TRACE_DOWN:
      if(sensor_value < prev_sensor_value)
 8001a9e:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <detectPulse+0x1e4>)
 8001aa0:	edd3 7a00 	vldr	s15, [r3]
 8001aa4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001aa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab0:	d505      	bpl.n	8001abe <detectPulse+0x1ae>
      {
        values_went_down++;
 8001ab2:	4b13      	ldr	r3, [pc, #76]	@ (8001b00 <detectPulse+0x1f0>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <detectPulse+0x1f0>)
 8001abc:	701a      	strb	r2, [r3, #0]
      }


      if(sensor_value < PULSE_MIN_THRESHOLD)
 8001abe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ac2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001b08 <detectPulse+0x1f8>
 8001ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ace:	d400      	bmi.n	8001ad2 <detectPulse+0x1c2>
      {
        currentPulseDetectorState = PULSE_IDLE;
      }
      break;
 8001ad0:	e002      	b.n	8001ad8 <detectPulse+0x1c8>
        currentPulseDetectorState = PULSE_IDLE;
 8001ad2:	4b07      	ldr	r3, [pc, #28]	@ (8001af0 <detectPulse+0x1e0>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
      break;
 8001ad8:	bf00      	nop
  }

  prev_sensor_value = sensor_value;
 8001ada:	4a06      	ldr	r2, [pc, #24]	@ (8001af4 <detectPulse+0x1e4>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6013      	str	r3, [r2, #0]
  return false;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	44fa0000 	.word	0x44fa0000
 8001af0:	20000550 	.word	0x20000550
 8001af4:	20000614 	.word	0x20000614
 8001af8:	20000618 	.word	0x20000618
 8001afc:	2000061c 	.word	0x2000061c
 8001b00:	20000620 	.word	0x20000620
 8001b04:	20000534 	.word	0x20000534
 8001b08:	42c80000 	.word	0x42c80000
 8001b0c:	476a6000 	.word	0x476a6000
 8001b10:	20000531 	.word	0x20000531
 8001b14:	20000504 	.word	0x20000504
 8001b18:	2000052c 	.word	0x2000052c
 8001b1c:	cccccccd 	.word	0xcccccccd
 8001b20:	20000530 	.word	0x20000530
 8001b24:	20000500 	.word	0x20000500

08001b28 <balanceIntesities>:

void balanceIntesities( float redLedDC, float IRLedDC )
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b32:	edc7 0a00 	vstr	s1, [r7]
	uint32_t currentTime = millis();
 8001b36:	f000 fd8d 	bl	8002654 <millis>
 8001b3a:	60f8      	str	r0, [r7, #12]
  if( currentTime - lastREDLedCurrentCheck >= RED_LED_CURRENT_ADJUSTMENT_MS)
 8001b3c:	4b25      	ldr	r3, [pc, #148]	@ (8001bd4 <balanceIntesities+0xac>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1a9b      	subs	r3, r3, r2
 8001b46:	2b63      	cmp	r3, #99	@ 0x63
 8001b48:	d940      	bls.n	8001bcc <balanceIntesities+0xa4>
  {
	if( IRLedDC - redLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent < 51)
 8001b4a:	ed97 7a00 	vldr	s14, [r7]
 8001b4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b56:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001bd8 <balanceIntesities+0xb0>
 8001b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b62:	dd10      	ble.n	8001b86 <balanceIntesities+0x5e>
 8001b64:	4b1d      	ldr	r3, [pc, #116]	@ (8001bdc <balanceIntesities+0xb4>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b32      	cmp	r3, #50	@ 0x32
 8001b6a:	d80c      	bhi.n	8001b86 <balanceIntesities+0x5e>
    {
		redLEDCurrent++;
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bdc <balanceIntesities+0xb4>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	3301      	adds	r3, #1
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <balanceIntesities+0xb4>)
 8001b76:	701a      	strb	r2, [r3, #0]
		MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8001b78:	4b18      	ldr	r3, [pc, #96]	@ (8001bdc <balanceIntesities+0xb4>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	2001      	movs	r0, #1
 8001b80:	f7ff fe32 	bl	80017e8 <MAX30102_setLedCurrent>
 8001b84:	e01c      	b.n	8001bc0 <balanceIntesities+0x98>
    }
    else if(redLedDC - IRLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent > 0)
 8001b86:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b8a:	edd7 7a00 	vldr	s15, [r7]
 8001b8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b92:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001bd8 <balanceIntesities+0xb0>
 8001b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9e:	dd0f      	ble.n	8001bc0 <balanceIntesities+0x98>
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <balanceIntesities+0xb4>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00b      	beq.n	8001bc0 <balanceIntesities+0x98>
    {
    	redLEDCurrent--;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <balanceIntesities+0xb4>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <balanceIntesities+0xb4>)
 8001bb2:	701a      	strb	r2, [r3, #0]
    	MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8001bb4:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <balanceIntesities+0xb4>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f7ff fe14 	bl	80017e8 <MAX30102_setLedCurrent>
    }

    lastREDLedCurrentCheck = millis();
 8001bc0:	f000 fd48 	bl	8002654 <millis>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b02      	ldr	r3, [pc, #8]	@ (8001bd4 <balanceIntesities+0xac>)
 8001bca:	601a      	str	r2, [r3, #0]
  }
}
 8001bcc:	bf00      	nop
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	2000054c 	.word	0x2000054c
 8001bd8:	461c4000 	.word	0x461c4000
 8001bdc:	20000548 	.word	0x20000548

08001be0 <pulseOximeter_update>:

MAX30102 pulseOximeter_update(FIFO_LED_DATA m_fifoData)
	{
 8001be0:	b5b0      	push	{r4, r5, r7, lr}
 8001be2:	b090      	sub	sp, #64	@ 0x40
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	e883 0006 	stmia.w	r3, {r1, r2}
		MAX30102 result = {
 8001bee:	2300      	movs	r3, #0
 8001bf0:	743b      	strb	r3, [r7, #16]
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	61fb      	str	r3, [r7, #28]
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
 8001c0a:	4b9c      	ldr	r3, [pc, #624]	@ (8001e7c <pulseOximeter_update+0x29c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c10:	2300      	movs	r3, #0
 8001c12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c20:	4b97      	ldr	r3, [pc, #604]	@ (8001e80 <pulseOximeter_update+0x2a0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	637b      	str	r3, [r7, #52]	@ 0x34
		/*float dcFilteredIR*/ 0.0,
		/*float dcFilteredRed*/ 0.0,
		/*float temperature;*/ currentTemperature
	};

	dcFilterIR = dcRemoval( (float)m_fifoData.irLedRaw, dcFilterIR.w, ALPHA );
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	ee07 3a90 	vmov	s15, r3
 8001c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c30:	4b94      	ldr	r3, [pc, #592]	@ (8001e84 <pulseOximeter_update+0x2a4>)
 8001c32:	ed93 7a00 	vldr	s14, [r3]
 8001c36:	ed9f 1a94 	vldr	s2, [pc, #592]	@ 8001e88 <pulseOximeter_update+0x2a8>
 8001c3a:	eef0 0a47 	vmov.f32	s1, s14
 8001c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c42:	f7ff f979 	bl	8000f38 <dcRemoval>
 8001c46:	eeb0 7a40 	vmov.f32	s14, s0
 8001c4a:	eef0 7a60 	vmov.f32	s15, s1
 8001c4e:	4b8d      	ldr	r3, [pc, #564]	@ (8001e84 <pulseOximeter_update+0x2a4>)
 8001c50:	ed83 7a00 	vstr	s14, [r3]
 8001c54:	edc3 7a01 	vstr	s15, [r3, #4]
	dcFilterRed = dcRemoval( (float)m_fifoData.redLedRaw, dcFilterRed.w, ALPHA );
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	ee07 3a90 	vmov	s15, r3
 8001c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c62:	4b8a      	ldr	r3, [pc, #552]	@ (8001e8c <pulseOximeter_update+0x2ac>)
 8001c64:	ed93 7a00 	vldr	s14, [r3]
 8001c68:	ed9f 1a87 	vldr	s2, [pc, #540]	@ 8001e88 <pulseOximeter_update+0x2a8>
 8001c6c:	eef0 0a47 	vmov.f32	s1, s14
 8001c70:	eeb0 0a67 	vmov.f32	s0, s15
 8001c74:	f7ff f960 	bl	8000f38 <dcRemoval>
 8001c78:	eeb0 7a40 	vmov.f32	s14, s0
 8001c7c:	eef0 7a60 	vmov.f32	s15, s1
 8001c80:	4b82      	ldr	r3, [pc, #520]	@ (8001e8c <pulseOximeter_update+0x2ac>)
 8001c82:	ed83 7a00 	vstr	s14, [r3]
 8001c86:	edc3 7a01 	vstr	s15, [r3, #4]

	float meanDiffResIR = meanDiff( dcFilterIR.result, &meanDiffIR);
 8001c8a:	4b7e      	ldr	r3, [pc, #504]	@ (8001e84 <pulseOximeter_update+0x2a4>)
 8001c8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c90:	487f      	ldr	r0, [pc, #508]	@ (8001e90 <pulseOximeter_update+0x2b0>)
 8001c92:	eeb0 0a67 	vmov.f32	s0, s15
 8001c96:	f7ff f9cb 	bl	8001030 <meanDiff>
 8001c9a:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
	lowPassButterworthFilter( meanDiffResIR/*-dcFilterIR.result*/, &lpbFilterIR );
 8001c9e:	487d      	ldr	r0, [pc, #500]	@ (8001e94 <pulseOximeter_update+0x2b4>)
 8001ca0:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8001ca4:	f7ff f97c 	bl	8000fa0 <lowPassButterworthFilter>

	irACValueSqSum += dcFilterIR.result * dcFilterIR.result;
 8001ca8:	4b76      	ldr	r3, [pc, #472]	@ (8001e84 <pulseOximeter_update+0x2a4>)
 8001caa:	ed93 7a01 	vldr	s14, [r3, #4]
 8001cae:	4b75      	ldr	r3, [pc, #468]	@ (8001e84 <pulseOximeter_update+0x2a4>)
 8001cb0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb8:	4b77      	ldr	r3, [pc, #476]	@ (8001e98 <pulseOximeter_update+0x2b8>)
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc2:	4b75      	ldr	r3, [pc, #468]	@ (8001e98 <pulseOximeter_update+0x2b8>)
 8001cc4:	edc3 7a00 	vstr	s15, [r3]
	redACValueSqSum += dcFilterRed.result * dcFilterRed.result;
 8001cc8:	4b70      	ldr	r3, [pc, #448]	@ (8001e8c <pulseOximeter_update+0x2ac>)
 8001cca:	ed93 7a01 	vldr	s14, [r3, #4]
 8001cce:	4b6f      	ldr	r3, [pc, #444]	@ (8001e8c <pulseOximeter_update+0x2ac>)
 8001cd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd8:	4b70      	ldr	r3, [pc, #448]	@ (8001e9c <pulseOximeter_update+0x2bc>)
 8001cda:	edd3 7a00 	vldr	s15, [r3]
 8001cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce2:	4b6e      	ldr	r3, [pc, #440]	@ (8001e9c <pulseOximeter_update+0x2bc>)
 8001ce4:	edc3 7a00 	vstr	s15, [r3]
	samplesRecorded++;
 8001ce8:	4b6d      	ldr	r3, [pc, #436]	@ (8001ea0 <pulseOximeter_update+0x2c0>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	3301      	adds	r3, #1
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	4b6b      	ldr	r3, [pc, #428]	@ (8001ea0 <pulseOximeter_update+0x2c0>)
 8001cf2:	801a      	strh	r2, [r3, #0]

	if( detectPulse( lpbFilterIR.result ) &&  samplesRecorded > 0 )
 8001cf4:	4b67      	ldr	r3, [pc, #412]	@ (8001e94 <pulseOximeter_update+0x2b4>)
 8001cf6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8001cfe:	f7ff fe07 	bl	8001910 <detectPulse>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 8088 	beq.w	8001e1a <pulseOximeter_update+0x23a>
 8001d0a:	4b65      	ldr	r3, [pc, #404]	@ (8001ea0 <pulseOximeter_update+0x2c0>)
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8083 	beq.w	8001e1a <pulseOximeter_update+0x23a>
	{
		result.pulseDetected=true;
 8001d14:	2301      	movs	r3, #1
 8001d16:	743b      	strb	r3, [r7, #16]
		pulsesDetected++;
 8001d18:	4b62      	ldr	r3, [pc, #392]	@ (8001ea4 <pulseOximeter_update+0x2c4>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	4b60      	ldr	r3, [pc, #384]	@ (8001ea4 <pulseOximeter_update+0x2c4>)
 8001d22:	801a      	strh	r2, [r3, #0]

		if( (pulsesDetected % RESET_SPO2_EVERY_N_PULSES == 0) )
 8001d24:	4b5f      	ldr	r3, [pc, #380]	@ (8001ea4 <pulseOximeter_update+0x2c4>)
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d173      	bne.n	8001e1a <pulseOximeter_update+0x23a>
		{
			float ratioRMS = log( sqrt(redACValueSqSum/samplesRecorded) ) / log( sqrt(irACValueSqSum/samplesRecorded) );
 8001d32:	4b5a      	ldr	r3, [pc, #360]	@ (8001e9c <pulseOximeter_update+0x2bc>)
 8001d34:	ed93 7a00 	vldr	s14, [r3]
 8001d38:	4b59      	ldr	r3, [pc, #356]	@ (8001ea0 <pulseOximeter_update+0x2c0>)
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	ee07 3a90 	vmov	s15, r3
 8001d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d44:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d48:	ee16 0a90 	vmov	r0, s13
 8001d4c:	f7fe fbfc 	bl	8000548 <__aeabi_f2d>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	ec43 2b10 	vmov	d0, r2, r3
 8001d58:	f00c f870 	bl	800de3c <sqrt>
 8001d5c:	eeb0 7a40 	vmov.f32	s14, s0
 8001d60:	eef0 7a60 	vmov.f32	s15, s1
 8001d64:	eeb0 0a47 	vmov.f32	s0, s14
 8001d68:	eef0 0a67 	vmov.f32	s1, s15
 8001d6c:	f00c f828 	bl	800ddc0 <log>
 8001d70:	ec55 4b10 	vmov	r4, r5, d0
 8001d74:	4b48      	ldr	r3, [pc, #288]	@ (8001e98 <pulseOximeter_update+0x2b8>)
 8001d76:	ed93 7a00 	vldr	s14, [r3]
 8001d7a:	4b49      	ldr	r3, [pc, #292]	@ (8001ea0 <pulseOximeter_update+0x2c0>)
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	ee07 3a90 	vmov	s15, r3
 8001d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d86:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d8a:	ee16 0a90 	vmov	r0, s13
 8001d8e:	f7fe fbdb 	bl	8000548 <__aeabi_f2d>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	ec43 2b10 	vmov	d0, r2, r3
 8001d9a:	f00c f84f 	bl	800de3c <sqrt>
 8001d9e:	eeb0 7a40 	vmov.f32	s14, s0
 8001da2:	eef0 7a60 	vmov.f32	s15, s1
 8001da6:	eeb0 0a47 	vmov.f32	s0, s14
 8001daa:	eef0 0a67 	vmov.f32	s1, s15
 8001dae:	f00c f807 	bl	800ddc0 <log>
 8001db2:	ec53 2b10 	vmov	r2, r3, d0
 8001db6:	4620      	mov	r0, r4
 8001db8:	4629      	mov	r1, r5
 8001dba:	f7fe fd47 	bl	800084c <__aeabi_ddiv>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f7fe feef 	bl	8000ba8 <__aeabi_d2f>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
			currentSpO2Value = 114.0 - 18.0 * ratioRMS;
 8001dce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001dd0:	f7fe fbba 	bl	8000548 <__aeabi_f2d>
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	4b33      	ldr	r3, [pc, #204]	@ (8001ea8 <pulseOximeter_update+0x2c8>)
 8001dda:	f7fe fc0d 	bl	80005f8 <__aeabi_dmul>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	f04f 0000 	mov.w	r0, #0
 8001de6:	4931      	ldr	r1, [pc, #196]	@ (8001eac <pulseOximeter_update+0x2cc>)
 8001de8:	f7fe fa4e 	bl	8000288 <__aeabi_dsub>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4610      	mov	r0, r2
 8001df2:	4619      	mov	r1, r3
 8001df4:	f7fe fed8 	bl	8000ba8 <__aeabi_d2f>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4a20      	ldr	r2, [pc, #128]	@ (8001e7c <pulseOximeter_update+0x29c>)
 8001dfc:	6013      	str	r3, [r2, #0]

			//uint8_t ratio =  ((redACValueSqSum/samplesRecorded) * 100) / (irACValueSqSum/samplesRecorded);
			//if (ratio > 183) ratio = 183;
			//currentSpO2Value = uch_spo2_table[ratio];

			result.SpO2 = currentSpO2Value;
 8001dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8001e7c <pulseOximeter_update+0x29c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24

			irACValueSqSum = 0;
 8001e04:	4b24      	ldr	r3, [pc, #144]	@ (8001e98 <pulseOximeter_update+0x2b8>)
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
			redACValueSqSum = 0;
 8001e0c:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <pulseOximeter_update+0x2bc>)
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
			samplesRecorded = 0;
 8001e14:	4b22      	ldr	r3, [pc, #136]	@ (8001ea0 <pulseOximeter_update+0x2c0>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	801a      	strh	r2, [r3, #0]
		}
	}

	balanceIntesities( dcFilterRed.w, dcFilterIR.w );
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e8c <pulseOximeter_update+0x2ac>)
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <pulseOximeter_update+0x2a4>)
 8001e22:	ed93 7a00 	vldr	s14, [r3]
 8001e26:	eef0 0a47 	vmov.f32	s1, s14
 8001e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e2e:	f7ff fe7b 	bl	8001b28 <balanceIntesities>

	result.heartBPM = currentBPM;
 8001e32:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb0 <pulseOximeter_update+0x2d0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	617b      	str	r3, [r7, #20]
	result.irCardiogram = lpbFilterIR.result;
 8001e38:	4b16      	ldr	r3, [pc, #88]	@ (8001e94 <pulseOximeter_update+0x2b4>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	61bb      	str	r3, [r7, #24]
	result.irDcValue = dcFilterIR.w;
 8001e3e:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <pulseOximeter_update+0x2a4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	61fb      	str	r3, [r7, #28]
	result.redDcValue = dcFilterRed.w;
 8001e44:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <pulseOximeter_update+0x2ac>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	623b      	str	r3, [r7, #32]
	result.lastBeatThreshold = lastBeatThreshold;
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb4 <pulseOximeter_update+0x2d4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	result.dcFilteredIR = dcFilterIR.result;
 8001e50:	4b0c      	ldr	r3, [pc, #48]	@ (8001e84 <pulseOximeter_update+0x2a4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
	result.dcFilteredRed = dcFilterRed.result;
 8001e56:	4b0d      	ldr	r3, [pc, #52]	@ (8001e8c <pulseOximeter_update+0x2ac>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	633b      	str	r3, [r7, #48]	@ 0x30

	return result;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	461d      	mov	r5, r3
 8001e60:	f107 0410 	add.w	r4, r7, #16
 8001e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e70:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	3740      	adds	r7, #64	@ 0x40
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e7c:	20000544 	.word	0x20000544
 8001e80:	20000000 	.word	0x20000000
 8001e84:	2000049c 	.word	0x2000049c
 8001e88:	3f733333 	.word	0x3f733333
 8001e8c:	200004a4 	.word	0x200004a4
 8001e90:	200004ac 	.word	0x200004ac
 8001e94:	200004f4 	.word	0x200004f4
 8001e98:	20000538 	.word	0x20000538
 8001e9c:	2000053c 	.word	0x2000053c
 8001ea0:	20000540 	.word	0x20000540
 8001ea4:	20000542 	.word	0x20000542
 8001ea8:	40320000 	.word	0x40320000
 8001eac:	405c8000 	.word	0x405c8000
 8001eb0:	20000500 	.word	0x20000500
 8001eb4:	20000534 	.word	0x20000534

08001eb8 <MAX30102_getBPM>:

float MAX30102_getBPM(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
	return pulseOximeter.heartBPM;
 8001ebc:	4b04      	ldr	r3, [pc, #16]	@ (8001ed0 <MAX30102_getBPM+0x18>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	ee07 3a90 	vmov	s15, r3
}
 8001ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	20000474 	.word	0x20000474

08001ed4 <MAX30102_getSPO2>:
float MAX30102_getSPO2(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
	return pulseOximeter.SpO2;
 8001ed8:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <MAX30102_getSPO2+0x18>)
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	ee07 3a90 	vmov	s15, r3
}
 8001ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	20000474 	.word	0x20000474

08001ef0 <OLED_Write>:
/**
 * @brief Send a command or data to the OLED
 * @param mode OLED_CMD indicates command mode, OLED_DATA indicates data mode
 * @param data The byte to be sent
 */
void OLED_Write(uint8_t mode, uint8_t data) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	460a      	mov	r2, r1
 8001efa:	71fb      	strb	r3, [r7, #7]
 8001efc:	4613      	mov	r3, r2
 8001efe:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2];
    buffer[0] = mode;  // Control byte
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	733b      	strb	r3, [r7, #12]
    buffer[1] = data;  // Data
 8001f04:	79bb      	ldrb	r3, [r7, #6]
 8001f06:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8001f08:	f107 020c 	add.w	r2, r7, #12
 8001f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2302      	movs	r3, #2
 8001f14:	2178      	movs	r1, #120	@ 0x78
 8001f16:	4803      	ldr	r0, [pc, #12]	@ (8001f24 <OLED_Write+0x34>)
 8001f18:	f001 f8b4 	bl	8003084 <HAL_I2C_Master_Transmit>
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200002f4 	.word	0x200002f4

08001f28 <OLED_Init>:

/**
 * @brief Initialize the OLED
 */
void OLED_Init(void) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
    HAL_Delay(100); // Wait for the screen to power up and stabilize
 8001f2c:	2064      	movs	r0, #100	@ 0x64
 8001f2e:	f000 fc47 	bl	80027c0 <HAL_Delay>

    // Initialization commands (based on the SSD1306 datasheet)
    OLED_Write(OLED_CMD, 0xAE); // Turn off display
 8001f32:	21ae      	movs	r1, #174	@ 0xae
 8001f34:	2000      	movs	r0, #0
 8001f36:	f7ff ffdb 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0x20); // Set memory addressing mode
 8001f3a:	2120      	movs	r1, #32
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f7ff ffd7 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0x10); // Use horizontal addressing mode
 8001f42:	2110      	movs	r1, #16
 8001f44:	2000      	movs	r0, #0
 8001f46:	f7ff ffd3 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0xB0); // Set page start address
 8001f4a:	21b0      	movs	r1, #176	@ 0xb0
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff ffcf 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0xC8); // Set COM output scan direction (from top to bottom)
 8001f52:	21c8      	movs	r1, #200	@ 0xc8
 8001f54:	2000      	movs	r0, #0
 8001f56:	f7ff ffcb 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0x00); // Set lower column address
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f7ff ffc7 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0x10); // Set higher column address
 8001f62:	2110      	movs	r1, #16
 8001f64:	2000      	movs	r0, #0
 8001f66:	f7ff ffc3 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0x40); // Set display start line
 8001f6a:	2140      	movs	r1, #64	@ 0x40
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7ff ffbf 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0x81); // Set contrast control
 8001f72:	2181      	movs	r1, #129	@ 0x81
 8001f74:	2000      	movs	r0, #0
 8001f76:	f7ff ffbb 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0xFF); // Maximum contrast
 8001f7a:	21ff      	movs	r1, #255	@ 0xff
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7ff ffb7 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0xA1); // Set segment re-map (left to right)
 8001f82:	21a1      	movs	r1, #161	@ 0xa1
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7ff ffb3 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0xA6); // Set normal display mode
 8001f8a:	21a6      	movs	r1, #166	@ 0xa6
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f7ff ffaf 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0xA8); // Set multiplex ratio
 8001f92:	21a8      	movs	r1, #168	@ 0xa8
 8001f94:	2000      	movs	r0, #0
 8001f96:	f7ff ffab 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0x3F); // 1/64 duty cycle
 8001f9a:	213f      	movs	r1, #63	@ 0x3f
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7ff ffa7 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0xD3); // Set display offset
 8001fa2:	21d3      	movs	r1, #211	@ 0xd3
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7ff ffa3 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0x00); // No offset
 8001faa:	2100      	movs	r1, #0
 8001fac:	2000      	movs	r0, #0
 8001fae:	f7ff ff9f 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0xD5); // Set display clock divide ratio
 8001fb2:	21d5      	movs	r1, #213	@ 0xd5
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f7ff ff9b 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0xF0); // Set to default value
 8001fba:	21f0      	movs	r1, #240	@ 0xf0
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f7ff ff97 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0xD9); // Set pre-charge period
 8001fc2:	21d9      	movs	r1, #217	@ 0xd9
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f7ff ff93 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0x22); //
 8001fca:	2122      	movs	r1, #34	@ 0x22
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7ff ff8f 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0xDA); // Set COM hardware configuration
 8001fd2:	21da      	movs	r1, #218	@ 0xda
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f7ff ff8b 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0x12); //
 8001fda:	2112      	movs	r1, #18
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f7ff ff87 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0xDB); // Set VCOMH deselect level
 8001fe2:	21db      	movs	r1, #219	@ 0xdb
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f7ff ff83 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0x20); // ~0.77×VCC
 8001fea:	2120      	movs	r1, #32
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7ff ff7f 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0x8D); // Set charge pump
 8001ff2:	218d      	movs	r1, #141	@ 0x8d
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f7ff ff7b 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0x14); // Enable charge pump
 8001ffa:	2114      	movs	r1, #20
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f7ff ff77 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0xAF); // Turn on display
 8002002:	21af      	movs	r1, #175	@ 0xaf
 8002004:	2000      	movs	r0, #0
 8002006:	f7ff ff73 	bl	8001ef0 <OLED_Write>
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}

0800200e <OLED_Clear>:

/**
 * @brief Clear the OLED display
 */
void OLED_Clear(void) {
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++) {
 8002014:	2300      	movs	r3, #0
 8002016:	71fb      	strb	r3, [r7, #7]
 8002018:	e01f      	b.n	800205a <OLED_Clear+0x4c>
        OLED_Write(OLED_CMD, 0xB0 + page); // Set page address
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	3b50      	subs	r3, #80	@ 0x50
 800201e:	b2db      	uxtb	r3, r3
 8002020:	4619      	mov	r1, r3
 8002022:	2000      	movs	r0, #0
 8002024:	f7ff ff64 	bl	8001ef0 <OLED_Write>
        OLED_Write(OLED_CMD, 0x00);        // Set lower column address
 8002028:	2100      	movs	r1, #0
 800202a:	2000      	movs	r0, #0
 800202c:	f7ff ff60 	bl	8001ef0 <OLED_Write>
        OLED_Write(OLED_CMD, 0x10);        // Set higher column address
 8002030:	2110      	movs	r1, #16
 8002032:	2000      	movs	r0, #0
 8002034:	f7ff ff5c 	bl	8001ef0 <OLED_Write>
        for (uint8_t col = 0; col < 128; col++) {
 8002038:	2300      	movs	r3, #0
 800203a:	71bb      	strb	r3, [r7, #6]
 800203c:	e006      	b.n	800204c <OLED_Clear+0x3e>
            OLED_Write(OLED_DATA, 0x00); // Clear display
 800203e:	2100      	movs	r1, #0
 8002040:	2040      	movs	r0, #64	@ 0x40
 8002042:	f7ff ff55 	bl	8001ef0 <OLED_Write>
        for (uint8_t col = 0; col < 128; col++) {
 8002046:	79bb      	ldrb	r3, [r7, #6]
 8002048:	3301      	adds	r3, #1
 800204a:	71bb      	strb	r3, [r7, #6]
 800204c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002050:	2b00      	cmp	r3, #0
 8002052:	daf4      	bge.n	800203e <OLED_Clear+0x30>
    for (uint8_t page = 0; page < 8; page++) {
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	3301      	adds	r3, #1
 8002058:	71fb      	strb	r3, [r7, #7]
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	2b07      	cmp	r3, #7
 800205e:	d9dc      	bls.n	800201a <OLED_Clear+0xc>
        }
    }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <OLED_ShowChar>:
 * @brief Display a character at a specified position
 * @param x X-coordinate (column address, 0~127)
 * @param y Page address (row number, 0~7)
 * @param ch Character to display
 */
void OLED_ShowChar(uint8_t x, uint8_t y, char ch) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
 8002076:	460b      	mov	r3, r1
 8002078:	71bb      	strb	r3, [r7, #6]
 800207a:	4613      	mov	r3, r2
 800207c:	717b      	strb	r3, [r7, #5]
    if (ch < 32 || ch > 127) return; // Character out of range
 800207e:	797b      	ldrb	r3, [r7, #5]
 8002080:	2b1f      	cmp	r3, #31
 8002082:	d933      	bls.n	80020ec <OLED_ShowChar+0x80>
 8002084:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002088:	2b00      	cmp	r3, #0
 800208a:	db2f      	blt.n	80020ec <OLED_ShowChar+0x80>

    OLED_Write(OLED_CMD, 0xB0 + y);         // Set page address
 800208c:	79bb      	ldrb	r3, [r7, #6]
 800208e:	3b50      	subs	r3, #80	@ 0x50
 8002090:	b2db      	uxtb	r3, r3
 8002092:	4619      	mov	r1, r3
 8002094:	2000      	movs	r0, #0
 8002096:	f7ff ff2b 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0x00 + (x & 0x0F)); // Set lower column address
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	4619      	mov	r1, r3
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7ff ff23 	bl	8001ef0 <OLED_Write>
    OLED_Write(OLED_CMD, 0x10 + ((x >> 4) & 0x0F)); // Set higher column address
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	091b      	lsrs	r3, r3, #4
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	3310      	adds	r3, #16
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	4619      	mov	r1, r3
 80020b6:	2000      	movs	r0, #0
 80020b8:	f7ff ff1a 	bl	8001ef0 <OLED_Write>

    const uint8_t *font_data = Font8x8[ch - 32]; // Get character dot matrix data
 80020bc:	797b      	ldrb	r3, [r7, #5]
 80020be:	3b20      	subs	r3, #32
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4a0c      	ldr	r2, [pc, #48]	@ (80020f4 <OLED_ShowChar+0x88>)
 80020c4:	4413      	add	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < 8; i++) {
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	e00a      	b.n	80020e4 <OLED_ShowChar+0x78>
        OLED_Write(OLED_DATA, font_data[i]); // Write character dot matrix data
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	4413      	add	r3, r2
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	4619      	mov	r1, r3
 80020d8:	2040      	movs	r0, #64	@ 0x40
 80020da:	f7ff ff09 	bl	8001ef0 <OLED_Write>
    for (int i = 0; i < 8; i++) {
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	3301      	adds	r3, #1
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2b07      	cmp	r3, #7
 80020e8:	ddf1      	ble.n	80020ce <OLED_ShowChar+0x62>
 80020ea:	e000      	b.n	80020ee <OLED_ShowChar+0x82>
    if (ch < 32 || ch > 127) return; // Character out of range
 80020ec:	bf00      	nop
    }
}
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	0800e458 	.word	0x0800e458

080020f8 <OLED_ShowString>:
 * @brief Display a string at a specified position
 * @param x Starting X-coordinate (column address)
 * @param y Starting page address (row number)
 * @param str String to display
 */
void OLED_ShowString(uint8_t x, uint8_t y, char* str) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	603a      	str	r2, [r7, #0]
 8002102:	71fb      	strb	r3, [r7, #7]
 8002104:	460b      	mov	r3, r1
 8002106:	71bb      	strb	r3, [r7, #6]
    while (*str) {
 8002108:	e014      	b.n	8002134 <OLED_ShowString+0x3c>
        OLED_ShowChar(x, y, *str); // Display individual character
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	781a      	ldrb	r2, [r3, #0]
 800210e:	79b9      	ldrb	r1, [r7, #6]
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff ffaa 	bl	800206c <OLED_ShowChar>
        x += 8;                    // Each character occupies 8 columns
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	3308      	adds	r3, #8
 800211c:	71fb      	strb	r3, [r7, #7]
        if (x > 120) {             // Wrap to the next line if exceeding screen width
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	2b78      	cmp	r3, #120	@ 0x78
 8002122:	d904      	bls.n	800212e <OLED_ShowString+0x36>
            x = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	71fb      	strb	r3, [r7, #7]
            y++;
 8002128:	79bb      	ldrb	r3, [r7, #6]
 800212a:	3301      	adds	r3, #1
 800212c:	71bb      	strb	r3, [r7, #6]
        }
        str++;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	3301      	adds	r3, #1
 8002132:	603b      	str	r3, [r7, #0]
    while (*str) {
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1e6      	bne.n	800210a <OLED_ShowString+0x12>
    }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	4b10      	ldr	r3, [pc, #64]	@ (8002194 <HAL_MspInit+0x4c>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	4a0f      	ldr	r2, [pc, #60]	@ (8002194 <HAL_MspInit+0x4c>)
 8002158:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800215c:	6453      	str	r3, [r2, #68]	@ 0x44
 800215e:	4b0d      	ldr	r3, [pc, #52]	@ (8002194 <HAL_MspInit+0x4c>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	4b09      	ldr	r3, [pc, #36]	@ (8002194 <HAL_MspInit+0x4c>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	4a08      	ldr	r2, [pc, #32]	@ (8002194 <HAL_MspInit+0x4c>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002178:	6413      	str	r3, [r2, #64]	@ 0x40
 800217a:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_MspInit+0x4c>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002186:	2007      	movs	r0, #7
 8002188:	f000 fc0e 	bl	80029a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40023800 	.word	0x40023800

08002198 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	@ 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a19      	ldr	r2, [pc, #100]	@ (800221c <HAL_I2C_MspInit+0x84>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d12c      	bne.n	8002214 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	4b18      	ldr	r3, [pc, #96]	@ (8002220 <HAL_I2C_MspInit+0x88>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	4a17      	ldr	r2, [pc, #92]	@ (8002220 <HAL_I2C_MspInit+0x88>)
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ca:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <HAL_I2C_MspInit+0x88>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80021d6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80021da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021dc:	2312      	movs	r3, #18
 80021de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e0:	2301      	movs	r3, #1
 80021e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021e8:	2304      	movs	r3, #4
 80021ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	4619      	mov	r1, r3
 80021f2:	480c      	ldr	r0, [pc, #48]	@ (8002224 <HAL_I2C_MspInit+0x8c>)
 80021f4:	f000 fc1a 	bl	8002a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	4b08      	ldr	r3, [pc, #32]	@ (8002220 <HAL_I2C_MspInit+0x88>)
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	4a07      	ldr	r2, [pc, #28]	@ (8002220 <HAL_I2C_MspInit+0x88>)
 8002202:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002206:	6413      	str	r3, [r2, #64]	@ 0x40
 8002208:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <HAL_I2C_MspInit+0x88>)
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002214:	bf00      	nop
 8002216:	3728      	adds	r7, #40	@ 0x28
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40005400 	.word	0x40005400
 8002220:	40023800 	.word	0x40023800
 8002224:	40020400 	.word	0x40020400

08002228 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08e      	sub	sp, #56	@ 0x38
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a31      	ldr	r2, [pc, #196]	@ (8002318 <HAL_I2S_MspInit+0xf0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d15a      	bne.n	800230e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002258:	2301      	movs	r3, #1
 800225a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800225c:	23c0      	movs	r3, #192	@ 0xc0
 800225e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002260:	2302      	movs	r3, #2
 8002262:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4618      	mov	r0, r3
 800226a:	f004 faf5 	bl	8006858 <HAL_RCCEx_PeriphCLKConfig>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002274:	f7ff fa10 	bl	8001698 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	4b27      	ldr	r3, [pc, #156]	@ (800231c <HAL_I2S_MspInit+0xf4>)
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	4a26      	ldr	r2, [pc, #152]	@ (800231c <HAL_I2S_MspInit+0xf4>)
 8002282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002286:	6413      	str	r3, [r2, #64]	@ 0x40
 8002288:	4b24      	ldr	r3, [pc, #144]	@ (800231c <HAL_I2S_MspInit+0xf4>)
 800228a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	4b20      	ldr	r3, [pc, #128]	@ (800231c <HAL_I2S_MspInit+0xf4>)
 800229a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229c:	4a1f      	ldr	r2, [pc, #124]	@ (800231c <HAL_I2S_MspInit+0xf4>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a4:	4b1d      	ldr	r3, [pc, #116]	@ (800231c <HAL_I2S_MspInit+0xf4>)
 80022a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b0:	2300      	movs	r3, #0
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	4b19      	ldr	r3, [pc, #100]	@ (800231c <HAL_I2S_MspInit+0xf4>)
 80022b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b8:	4a18      	ldr	r2, [pc, #96]	@ (800231c <HAL_I2S_MspInit+0xf4>)
 80022ba:	f043 0304 	orr.w	r3, r3, #4
 80022be:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c0:	4b16      	ldr	r3, [pc, #88]	@ (800231c <HAL_I2S_MspInit+0xf4>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80022cc:	2310      	movs	r3, #16
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022dc:	2306      	movs	r3, #6
 80022de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80022e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022e4:	4619      	mov	r1, r3
 80022e6:	480e      	ldr	r0, [pc, #56]	@ (8002320 <HAL_I2S_MspInit+0xf8>)
 80022e8:	f000 fba0 	bl	8002a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80022ec:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80022f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fa:	2300      	movs	r3, #0
 80022fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022fe:	2306      	movs	r3, #6
 8002300:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002306:	4619      	mov	r1, r3
 8002308:	4806      	ldr	r0, [pc, #24]	@ (8002324 <HAL_I2S_MspInit+0xfc>)
 800230a:	f000 fb8f 	bl	8002a2c <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800230e:	bf00      	nop
 8002310:	3738      	adds	r7, #56	@ 0x38
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40003c00 	.word	0x40003c00
 800231c:	40023800 	.word	0x40023800
 8002320:	40020000 	.word	0x40020000
 8002324:	40020800 	.word	0x40020800

08002328 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	@ 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a19      	ldr	r2, [pc, #100]	@ (80023ac <HAL_SPI_MspInit+0x84>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d12b      	bne.n	80023a2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	4b18      	ldr	r3, [pc, #96]	@ (80023b0 <HAL_SPI_MspInit+0x88>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002352:	4a17      	ldr	r2, [pc, #92]	@ (80023b0 <HAL_SPI_MspInit+0x88>)
 8002354:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002358:	6453      	str	r3, [r2, #68]	@ 0x44
 800235a:	4b15      	ldr	r3, [pc, #84]	@ (80023b0 <HAL_SPI_MspInit+0x88>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b11      	ldr	r3, [pc, #68]	@ (80023b0 <HAL_SPI_MspInit+0x88>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	4a10      	ldr	r2, [pc, #64]	@ (80023b0 <HAL_SPI_MspInit+0x88>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6313      	str	r3, [r2, #48]	@ 0x30
 8002376:	4b0e      	ldr	r3, [pc, #56]	@ (80023b0 <HAL_SPI_MspInit+0x88>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002382:	23e0      	movs	r3, #224	@ 0xe0
 8002384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002392:	2305      	movs	r3, #5
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	4619      	mov	r1, r3
 800239c:	4805      	ldr	r0, [pc, #20]	@ (80023b4 <HAL_SPI_MspInit+0x8c>)
 800239e:	f000 fb45 	bl	8002a2c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80023a2:	bf00      	nop
 80023a4:	3728      	adds	r7, #40	@ 0x28
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40013000 	.word	0x40013000
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40020000 	.word	0x40020000

080023b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	@ 0x28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a19      	ldr	r2, [pc, #100]	@ (800243c <HAL_UART_MspInit+0x84>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d12b      	bne.n	8002432 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	4b18      	ldr	r3, [pc, #96]	@ (8002440 <HAL_UART_MspInit+0x88>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	4a17      	ldr	r2, [pc, #92]	@ (8002440 <HAL_UART_MspInit+0x88>)
 80023e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ea:	4b15      	ldr	r3, [pc, #84]	@ (8002440 <HAL_UART_MspInit+0x88>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <HAL_UART_MspInit+0x88>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	4a10      	ldr	r2, [pc, #64]	@ (8002440 <HAL_UART_MspInit+0x88>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6313      	str	r3, [r2, #48]	@ 0x30
 8002406:	4b0e      	ldr	r3, [pc, #56]	@ (8002440 <HAL_UART_MspInit+0x88>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002412:	230c      	movs	r3, #12
 8002414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002416:	2302      	movs	r3, #2
 8002418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241e:	2303      	movs	r3, #3
 8002420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002422:	2307      	movs	r3, #7
 8002424:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	4619      	mov	r1, r3
 800242c:	4805      	ldr	r0, [pc, #20]	@ (8002444 <HAL_UART_MspInit+0x8c>)
 800242e:	f000 fafd 	bl	8002a2c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002432:	bf00      	nop
 8002434:	3728      	adds	r7, #40	@ 0x28
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40004400 	.word	0x40004400
 8002440:	40023800 	.word	0x40023800
 8002444:	40020000 	.word	0x40020000

08002448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <NMI_Handler+0x4>

08002450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <HardFault_Handler+0x4>

08002458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <MemManage_Handler+0x4>

08002460 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <BusFault_Handler+0x4>

08002468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800246c:	bf00      	nop
 800246e:	e7fd      	b.n	800246c <UsageFault_Handler+0x4>

08002470 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800249e:	f000 f96f 	bl	8002780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pulse_Oximeter_Int_Pin);
 80024aa:	2001      	movs	r0, #1
 80024ac:	f000 fc8e 	bl	8002dcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80024b8:	4802      	ldr	r0, [pc, #8]	@ (80024c4 <OTG_FS_IRQHandler+0x10>)
 80024ba:	f002 fc27 	bl	8004d0c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20001b0c 	.word	0x20001b0c

080024c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return 1;
 80024cc:	2301      	movs	r3, #1
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <_kill>:

int _kill(int pid, int sig)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024e2:	f009 fbf5 	bl	800bcd0 <__errno>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2216      	movs	r2, #22
 80024ea:	601a      	str	r2, [r3, #0]
  return -1;
 80024ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <_exit>:

void _exit (int status)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002500:	f04f 31ff 	mov.w	r1, #4294967295
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff ffe7 	bl	80024d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800250a:	bf00      	nop
 800250c:	e7fd      	b.n	800250a <_exit+0x12>

0800250e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b086      	sub	sp, #24
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	e00a      	b.n	8002536 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002520:	f3af 8000 	nop.w
 8002524:	4601      	mov	r1, r0
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	60ba      	str	r2, [r7, #8]
 800252c:	b2ca      	uxtb	r2, r1
 800252e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	3301      	adds	r3, #1
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	429a      	cmp	r2, r3
 800253c:	dbf0      	blt.n	8002520 <_read+0x12>
  }

  return len;
 800253e:	687b      	ldr	r3, [r7, #4]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	e009      	b.n	800256e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	60ba      	str	r2, [r7, #8]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3301      	adds	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	429a      	cmp	r2, r3
 8002574:	dbf1      	blt.n	800255a <_write+0x12>
  }
  return len;
 8002576:	687b      	ldr	r3, [r7, #4]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <_close>:

int _close(int file)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002588:	f04f 33ff 	mov.w	r3, #4294967295
}
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025a8:	605a      	str	r2, [r3, #4]
  return 0;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <_isatty>:

int _isatty(int file)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025c0:	2301      	movs	r3, #1
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b085      	sub	sp, #20
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f0:	4a14      	ldr	r2, [pc, #80]	@ (8002644 <_sbrk+0x5c>)
 80025f2:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <_sbrk+0x60>)
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025fc:	4b13      	ldr	r3, [pc, #76]	@ (800264c <_sbrk+0x64>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002604:	4b11      	ldr	r3, [pc, #68]	@ (800264c <_sbrk+0x64>)
 8002606:	4a12      	ldr	r2, [pc, #72]	@ (8002650 <_sbrk+0x68>)
 8002608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800260a:	4b10      	ldr	r3, [pc, #64]	@ (800264c <_sbrk+0x64>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	429a      	cmp	r2, r3
 8002616:	d207      	bcs.n	8002628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002618:	f009 fb5a 	bl	800bcd0 <__errno>
 800261c:	4603      	mov	r3, r0
 800261e:	220c      	movs	r2, #12
 8002620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002622:	f04f 33ff 	mov.w	r3, #4294967295
 8002626:	e009      	b.n	800263c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002628:	4b08      	ldr	r3, [pc, #32]	@ (800264c <_sbrk+0x64>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800262e:	4b07      	ldr	r3, [pc, #28]	@ (800264c <_sbrk+0x64>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	4a05      	ldr	r2, [pc, #20]	@ (800264c <_sbrk+0x64>)
 8002638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800263a:	68fb      	ldr	r3, [r7, #12]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20020000 	.word	0x20020000
 8002648:	00000400 	.word	0x00000400
 800264c:	20000624 	.word	0x20000624
 8002650:	20002360 	.word	0x20002360

08002654 <millis>:
  }
}

// Get number of elapsed milliseconds
uint32_t millis(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002658:	f000 f8a6 	bl	80027a8 <HAL_GetTick>
 800265c:	4603      	mov	r3, r0
}
 800265e:	4618      	mov	r0, r3
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002668:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <SystemInit+0x20>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266e:	4a05      	ldr	r2, [pc, #20]	@ (8002684 <SystemInit+0x20>)
 8002670:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002674:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002688:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800268c:	f7ff ffea 	bl	8002664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002690:	480c      	ldr	r0, [pc, #48]	@ (80026c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002692:	490d      	ldr	r1, [pc, #52]	@ (80026c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002694:	4a0d      	ldr	r2, [pc, #52]	@ (80026cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002698:	e002      	b.n	80026a0 <LoopCopyDataInit>

0800269a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800269a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800269c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800269e:	3304      	adds	r3, #4

080026a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a4:	d3f9      	bcc.n	800269a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026a6:	4a0a      	ldr	r2, [pc, #40]	@ (80026d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026a8:	4c0a      	ldr	r4, [pc, #40]	@ (80026d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026ac:	e001      	b.n	80026b2 <LoopFillZerobss>

080026ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b0:	3204      	adds	r2, #4

080026b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b4:	d3fb      	bcc.n	80026ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026b6:	f009 fb11 	bl	800bcdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ba:	f7fe fd2b 	bl	8001114 <main>
  bx  lr    
 80026be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026c8:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 80026cc:	0800eaf0 	.word	0x0800eaf0
  ldr r2, =_sbss
 80026d0:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 80026d4:	2000235c 	.word	0x2000235c

080026d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026d8:	e7fe      	b.n	80026d8 <ADC_IRQHandler>
	...

080026dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026e0:	4b0e      	ldr	r3, [pc, #56]	@ (800271c <HAL_Init+0x40>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a0d      	ldr	r2, [pc, #52]	@ (800271c <HAL_Init+0x40>)
 80026e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026ec:	4b0b      	ldr	r3, [pc, #44]	@ (800271c <HAL_Init+0x40>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a0a      	ldr	r2, [pc, #40]	@ (800271c <HAL_Init+0x40>)
 80026f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026f8:	4b08      	ldr	r3, [pc, #32]	@ (800271c <HAL_Init+0x40>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a07      	ldr	r2, [pc, #28]	@ (800271c <HAL_Init+0x40>)
 80026fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002704:	2003      	movs	r0, #3
 8002706:	f000 f94f 	bl	80029a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800270a:	2000      	movs	r0, #0
 800270c:	f000 f808 	bl	8002720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002710:	f7ff fd1a 	bl	8002148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023c00 	.word	0x40023c00

08002720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002728:	4b12      	ldr	r3, [pc, #72]	@ (8002774 <HAL_InitTick+0x54>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b12      	ldr	r3, [pc, #72]	@ (8002778 <HAL_InitTick+0x58>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	4619      	mov	r1, r3
 8002732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002736:	fbb3 f3f1 	udiv	r3, r3, r1
 800273a:	fbb2 f3f3 	udiv	r3, r2, r3
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f967 	bl	8002a12 <HAL_SYSTICK_Config>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e00e      	b.n	800276c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b0f      	cmp	r3, #15
 8002752:	d80a      	bhi.n	800276a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002754:	2200      	movs	r2, #0
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	f04f 30ff 	mov.w	r0, #4294967295
 800275c:	f000 f92f 	bl	80029be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002760:	4a06      	ldr	r2, [pc, #24]	@ (800277c <HAL_InitTick+0x5c>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	e000      	b.n	800276c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20000004 	.word	0x20000004
 8002778:	2000000c 	.word	0x2000000c
 800277c:	20000008 	.word	0x20000008

08002780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002784:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <HAL_IncTick+0x20>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <HAL_IncTick+0x24>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4413      	add	r3, r2
 8002790:	4a04      	ldr	r2, [pc, #16]	@ (80027a4 <HAL_IncTick+0x24>)
 8002792:	6013      	str	r3, [r2, #0]
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	2000000c 	.word	0x2000000c
 80027a4:	20000628 	.word	0x20000628

080027a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return uwTick;
 80027ac:	4b03      	ldr	r3, [pc, #12]	@ (80027bc <HAL_GetTick+0x14>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	20000628 	.word	0x20000628

080027c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c8:	f7ff ffee 	bl	80027a8 <HAL_GetTick>
 80027cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d8:	d005      	beq.n	80027e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027da:	4b0a      	ldr	r3, [pc, #40]	@ (8002804 <HAL_Delay+0x44>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4413      	add	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027e6:	bf00      	nop
 80027e8:	f7ff ffde 	bl	80027a8 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d8f7      	bhi.n	80027e8 <HAL_Delay+0x28>
  {
  }
}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	2000000c 	.word	0x2000000c

08002808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002818:	4b0c      	ldr	r3, [pc, #48]	@ (800284c <__NVIC_SetPriorityGrouping+0x44>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002824:	4013      	ands	r3, r2
 8002826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002830:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283a:	4a04      	ldr	r2, [pc, #16]	@ (800284c <__NVIC_SetPriorityGrouping+0x44>)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	60d3      	str	r3, [r2, #12]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002854:	4b04      	ldr	r3, [pc, #16]	@ (8002868 <__NVIC_GetPriorityGrouping+0x18>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	0a1b      	lsrs	r3, r3, #8
 800285a:	f003 0307 	and.w	r3, r3, #7
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	2b00      	cmp	r3, #0
 800287c:	db0b      	blt.n	8002896 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	f003 021f 	and.w	r2, r3, #31
 8002884:	4907      	ldr	r1, [pc, #28]	@ (80028a4 <__NVIC_EnableIRQ+0x38>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2001      	movs	r0, #1
 800288e:	fa00 f202 	lsl.w	r2, r0, r2
 8002892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000e100 	.word	0xe000e100

080028a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	6039      	str	r1, [r7, #0]
 80028b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	db0a      	blt.n	80028d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	490c      	ldr	r1, [pc, #48]	@ (80028f4 <__NVIC_SetPriority+0x4c>)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	0112      	lsls	r2, r2, #4
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	440b      	add	r3, r1
 80028cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d0:	e00a      	b.n	80028e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4908      	ldr	r1, [pc, #32]	@ (80028f8 <__NVIC_SetPriority+0x50>)
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	3b04      	subs	r3, #4
 80028e0:	0112      	lsls	r2, r2, #4
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	440b      	add	r3, r1
 80028e6:	761a      	strb	r2, [r3, #24]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000e100 	.word	0xe000e100
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	@ 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f1c3 0307 	rsb	r3, r3, #7
 8002916:	2b04      	cmp	r3, #4
 8002918:	bf28      	it	cs
 800291a:	2304      	movcs	r3, #4
 800291c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3304      	adds	r3, #4
 8002922:	2b06      	cmp	r3, #6
 8002924:	d902      	bls.n	800292c <NVIC_EncodePriority+0x30>
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3b03      	subs	r3, #3
 800292a:	e000      	b.n	800292e <NVIC_EncodePriority+0x32>
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	f04f 32ff 	mov.w	r2, #4294967295
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	401a      	ands	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	43d9      	mvns	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	4313      	orrs	r3, r2
         );
}
 8002956:	4618      	mov	r0, r3
 8002958:	3724      	adds	r7, #36	@ 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002974:	d301      	bcc.n	800297a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002976:	2301      	movs	r3, #1
 8002978:	e00f      	b.n	800299a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800297a:	4a0a      	ldr	r2, [pc, #40]	@ (80029a4 <SysTick_Config+0x40>)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002982:	210f      	movs	r1, #15
 8002984:	f04f 30ff 	mov.w	r0, #4294967295
 8002988:	f7ff ff8e 	bl	80028a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800298c:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <SysTick_Config+0x40>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002992:	4b04      	ldr	r3, [pc, #16]	@ (80029a4 <SysTick_Config+0x40>)
 8002994:	2207      	movs	r2, #7
 8002996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	e000e010 	.word	0xe000e010

080029a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff ff29 	bl	8002808 <__NVIC_SetPriorityGrouping>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029be:	b580      	push	{r7, lr}
 80029c0:	b086      	sub	sp, #24
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d0:	f7ff ff3e 	bl	8002850 <__NVIC_GetPriorityGrouping>
 80029d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	6978      	ldr	r0, [r7, #20]
 80029dc:	f7ff ff8e 	bl	80028fc <NVIC_EncodePriority>
 80029e0:	4602      	mov	r2, r0
 80029e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff ff5d 	bl	80028a8 <__NVIC_SetPriority>
}
 80029ee:	bf00      	nop
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	4603      	mov	r3, r0
 80029fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff31 	bl	800286c <__NVIC_EnableIRQ>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff ffa2 	bl	8002964 <SysTick_Config>
 8002a20:	4603      	mov	r3, r0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b089      	sub	sp, #36	@ 0x24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	e16b      	b.n	8002d20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a48:	2201      	movs	r2, #1
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	f040 815a 	bne.w	8002d1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d005      	beq.n	8002a7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d130      	bne.n	8002ae0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	2203      	movs	r2, #3
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f003 0201 	and.w	r2, r3, #1
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d017      	beq.n	8002b1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	2203      	movs	r2, #3
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d123      	bne.n	8002b70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	08da      	lsrs	r2, r3, #3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3208      	adds	r2, #8
 8002b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	220f      	movs	r2, #15
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	691a      	ldr	r2, [r3, #16]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	08da      	lsrs	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3208      	adds	r2, #8
 8002b6a:	69b9      	ldr	r1, [r7, #24]
 8002b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0203 	and.w	r2, r3, #3
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80b4 	beq.w	8002d1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	4b60      	ldr	r3, [pc, #384]	@ (8002d38 <HAL_GPIO_Init+0x30c>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bba:	4a5f      	ldr	r2, [pc, #380]	@ (8002d38 <HAL_GPIO_Init+0x30c>)
 8002bbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bc2:	4b5d      	ldr	r3, [pc, #372]	@ (8002d38 <HAL_GPIO_Init+0x30c>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bce:	4a5b      	ldr	r2, [pc, #364]	@ (8002d3c <HAL_GPIO_Init+0x310>)
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	089b      	lsrs	r3, r3, #2
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	220f      	movs	r2, #15
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43db      	mvns	r3, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a52      	ldr	r2, [pc, #328]	@ (8002d40 <HAL_GPIO_Init+0x314>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d02b      	beq.n	8002c52 <HAL_GPIO_Init+0x226>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a51      	ldr	r2, [pc, #324]	@ (8002d44 <HAL_GPIO_Init+0x318>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d025      	beq.n	8002c4e <HAL_GPIO_Init+0x222>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a50      	ldr	r2, [pc, #320]	@ (8002d48 <HAL_GPIO_Init+0x31c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01f      	beq.n	8002c4a <HAL_GPIO_Init+0x21e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a4f      	ldr	r2, [pc, #316]	@ (8002d4c <HAL_GPIO_Init+0x320>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d019      	beq.n	8002c46 <HAL_GPIO_Init+0x21a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a4e      	ldr	r2, [pc, #312]	@ (8002d50 <HAL_GPIO_Init+0x324>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d013      	beq.n	8002c42 <HAL_GPIO_Init+0x216>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a4d      	ldr	r2, [pc, #308]	@ (8002d54 <HAL_GPIO_Init+0x328>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00d      	beq.n	8002c3e <HAL_GPIO_Init+0x212>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a4c      	ldr	r2, [pc, #304]	@ (8002d58 <HAL_GPIO_Init+0x32c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <HAL_GPIO_Init+0x20e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a4b      	ldr	r2, [pc, #300]	@ (8002d5c <HAL_GPIO_Init+0x330>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d101      	bne.n	8002c36 <HAL_GPIO_Init+0x20a>
 8002c32:	2307      	movs	r3, #7
 8002c34:	e00e      	b.n	8002c54 <HAL_GPIO_Init+0x228>
 8002c36:	2308      	movs	r3, #8
 8002c38:	e00c      	b.n	8002c54 <HAL_GPIO_Init+0x228>
 8002c3a:	2306      	movs	r3, #6
 8002c3c:	e00a      	b.n	8002c54 <HAL_GPIO_Init+0x228>
 8002c3e:	2305      	movs	r3, #5
 8002c40:	e008      	b.n	8002c54 <HAL_GPIO_Init+0x228>
 8002c42:	2304      	movs	r3, #4
 8002c44:	e006      	b.n	8002c54 <HAL_GPIO_Init+0x228>
 8002c46:	2303      	movs	r3, #3
 8002c48:	e004      	b.n	8002c54 <HAL_GPIO_Init+0x228>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e002      	b.n	8002c54 <HAL_GPIO_Init+0x228>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_GPIO_Init+0x228>
 8002c52:	2300      	movs	r3, #0
 8002c54:	69fa      	ldr	r2, [r7, #28]
 8002c56:	f002 0203 	and.w	r2, r2, #3
 8002c5a:	0092      	lsls	r2, r2, #2
 8002c5c:	4093      	lsls	r3, r2
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c64:	4935      	ldr	r1, [pc, #212]	@ (8002d3c <HAL_GPIO_Init+0x310>)
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	089b      	lsrs	r3, r3, #2
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c72:	4b3b      	ldr	r3, [pc, #236]	@ (8002d60 <HAL_GPIO_Init+0x334>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c96:	4a32      	ldr	r2, [pc, #200]	@ (8002d60 <HAL_GPIO_Init+0x334>)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c9c:	4b30      	ldr	r3, [pc, #192]	@ (8002d60 <HAL_GPIO_Init+0x334>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cc0:	4a27      	ldr	r2, [pc, #156]	@ (8002d60 <HAL_GPIO_Init+0x334>)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cc6:	4b26      	ldr	r3, [pc, #152]	@ (8002d60 <HAL_GPIO_Init+0x334>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cea:	4a1d      	ldr	r2, [pc, #116]	@ (8002d60 <HAL_GPIO_Init+0x334>)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d60 <HAL_GPIO_Init+0x334>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d14:	4a12      	ldr	r2, [pc, #72]	@ (8002d60 <HAL_GPIO_Init+0x334>)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	2b0f      	cmp	r3, #15
 8002d24:	f67f ae90 	bls.w	8002a48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	3724      	adds	r7, #36	@ 0x24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40013800 	.word	0x40013800
 8002d40:	40020000 	.word	0x40020000
 8002d44:	40020400 	.word	0x40020400
 8002d48:	40020800 	.word	0x40020800
 8002d4c:	40020c00 	.word	0x40020c00
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40021400 	.word	0x40021400
 8002d58:	40021800 	.word	0x40021800
 8002d5c:	40021c00 	.word	0x40021c00
 8002d60:	40013c00 	.word	0x40013c00

08002d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	807b      	strh	r3, [r7, #2]
 8002d70:	4613      	mov	r3, r2
 8002d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d74:	787b      	ldrb	r3, [r7, #1]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d7a:	887a      	ldrh	r2, [r7, #2]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d80:	e003      	b.n	8002d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d82:	887b      	ldrh	r3, [r7, #2]
 8002d84:	041a      	lsls	r2, r3, #16
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	619a      	str	r2, [r3, #24]
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b085      	sub	sp, #20
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002da8:	887a      	ldrh	r2, [r7, #2]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4013      	ands	r3, r2
 8002dae:	041a      	lsls	r2, r3, #16
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	43d9      	mvns	r1, r3
 8002db4:	887b      	ldrh	r3, [r7, #2]
 8002db6:	400b      	ands	r3, r1
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	619a      	str	r2, [r3, #24]
}
 8002dbe:	bf00      	nop
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002dd6:	4b08      	ldr	r3, [pc, #32]	@ (8002df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d006      	beq.n	8002df0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002de2:	4a05      	ldr	r2, [pc, #20]	@ (8002df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fc40 	bl	8001670 <HAL_GPIO_EXTI_Callback>
  }
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40013c00 	.word	0x40013c00

08002dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e12b      	b.n	8003066 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff f9b8 	bl	8002198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2224      	movs	r2, #36	@ 0x24
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e60:	f003 fcd2 	bl	8006808 <HAL_RCC_GetPCLK1Freq>
 8002e64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4a81      	ldr	r2, [pc, #516]	@ (8003070 <HAL_I2C_Init+0x274>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d807      	bhi.n	8002e80 <HAL_I2C_Init+0x84>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4a80      	ldr	r2, [pc, #512]	@ (8003074 <HAL_I2C_Init+0x278>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	bf94      	ite	ls
 8002e78:	2301      	movls	r3, #1
 8002e7a:	2300      	movhi	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	e006      	b.n	8002e8e <HAL_I2C_Init+0x92>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4a7d      	ldr	r2, [pc, #500]	@ (8003078 <HAL_I2C_Init+0x27c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	bf94      	ite	ls
 8002e88:	2301      	movls	r3, #1
 8002e8a:	2300      	movhi	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e0e7      	b.n	8003066 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4a78      	ldr	r2, [pc, #480]	@ (800307c <HAL_I2C_Init+0x280>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	0c9b      	lsrs	r3, r3, #18
 8002ea0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4a6a      	ldr	r2, [pc, #424]	@ (8003070 <HAL_I2C_Init+0x274>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d802      	bhi.n	8002ed0 <HAL_I2C_Init+0xd4>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	e009      	b.n	8002ee4 <HAL_I2C_Init+0xe8>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ed6:	fb02 f303 	mul.w	r3, r2, r3
 8002eda:	4a69      	ldr	r2, [pc, #420]	@ (8003080 <HAL_I2C_Init+0x284>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ef6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	495c      	ldr	r1, [pc, #368]	@ (8003070 <HAL_I2C_Init+0x274>)
 8002f00:	428b      	cmp	r3, r1
 8002f02:	d819      	bhi.n	8002f38 <HAL_I2C_Init+0x13c>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1e59      	subs	r1, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f12:	1c59      	adds	r1, r3, #1
 8002f14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f18:	400b      	ands	r3, r1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_I2C_Init+0x138>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1e59      	subs	r1, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f32:	e051      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f34:	2304      	movs	r3, #4
 8002f36:	e04f      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d111      	bne.n	8002f64 <HAL_I2C_Init+0x168>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1e58      	subs	r0, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	440b      	add	r3, r1
 8002f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f52:	3301      	adds	r3, #1
 8002f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	e012      	b.n	8002f8a <HAL_I2C_Init+0x18e>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	1e58      	subs	r0, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	0099      	lsls	r1, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Init+0x196>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e022      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10e      	bne.n	8002fb8 <HAL_I2C_Init+0x1bc>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1e58      	subs	r0, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	440b      	add	r3, r1
 8002fa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fac:	3301      	adds	r3, #1
 8002fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fb6:	e00f      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1e58      	subs	r0, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	0099      	lsls	r1, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	6809      	ldr	r1, [r1, #0]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69da      	ldr	r2, [r3, #28]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003006:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6911      	ldr	r1, [r2, #16]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68d2      	ldr	r2, [r2, #12]
 8003012:	4311      	orrs	r1, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	430b      	orrs	r3, r1
 800301a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	000186a0 	.word	0x000186a0
 8003074:	001e847f 	.word	0x001e847f
 8003078:	003d08ff 	.word	0x003d08ff
 800307c:	431bde83 	.word	0x431bde83
 8003080:	10624dd3 	.word	0x10624dd3

08003084 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	461a      	mov	r2, r3
 8003090:	460b      	mov	r3, r1
 8003092:	817b      	strh	r3, [r7, #10]
 8003094:	4613      	mov	r3, r2
 8003096:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003098:	f7ff fb86 	bl	80027a8 <HAL_GetTick>
 800309c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	f040 80e0 	bne.w	800326c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2319      	movs	r3, #25
 80030b2:	2201      	movs	r2, #1
 80030b4:	4970      	ldr	r1, [pc, #448]	@ (8003278 <HAL_I2C_Master_Transmit+0x1f4>)
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 fe0e 	bl	8003cd8 <I2C_WaitOnFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030c2:	2302      	movs	r3, #2
 80030c4:	e0d3      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_I2C_Master_Transmit+0x50>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e0cc      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d007      	beq.n	80030fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003108:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2221      	movs	r2, #33	@ 0x21
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2210      	movs	r2, #16
 8003116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	893a      	ldrh	r2, [r7, #8]
 800312a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4a50      	ldr	r2, [pc, #320]	@ (800327c <HAL_I2C_Master_Transmit+0x1f8>)
 800313a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800313c:	8979      	ldrh	r1, [r7, #10]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	6a3a      	ldr	r2, [r7, #32]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 fbc8 	bl	80038d8 <I2C_MasterRequestWrite>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e08d      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003168:	e066      	b.n	8003238 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	6a39      	ldr	r1, [r7, #32]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 fecc 	bl	8003f0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00d      	beq.n	8003196 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	2b04      	cmp	r3, #4
 8003180:	d107      	bne.n	8003192 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003190:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e06b      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319a:	781a      	ldrb	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d11b      	bne.n	800320c <HAL_I2C_Master_Transmit+0x188>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d017      	beq.n	800320c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	781a      	ldrb	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	6a39      	ldr	r1, [r7, #32]
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 fec3 	bl	8003f9c <I2C_WaitOnBTFFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00d      	beq.n	8003238 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	2b04      	cmp	r3, #4
 8003222:	d107      	bne.n	8003234 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003232:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e01a      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323c:	2b00      	cmp	r3, #0
 800323e:	d194      	bne.n	800316a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800324e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	e000      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800326c:	2302      	movs	r3, #2
  }
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	00100002 	.word	0x00100002
 800327c:	ffff0000 	.word	0xffff0000

08003280 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	4608      	mov	r0, r1
 800328a:	4611      	mov	r1, r2
 800328c:	461a      	mov	r2, r3
 800328e:	4603      	mov	r3, r0
 8003290:	817b      	strh	r3, [r7, #10]
 8003292:	460b      	mov	r3, r1
 8003294:	813b      	strh	r3, [r7, #8]
 8003296:	4613      	mov	r3, r2
 8003298:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800329a:	f7ff fa85 	bl	80027a8 <HAL_GetTick>
 800329e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	f040 80d9 	bne.w	8003460 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	2319      	movs	r3, #25
 80032b4:	2201      	movs	r2, #1
 80032b6:	496d      	ldr	r1, [pc, #436]	@ (800346c <HAL_I2C_Mem_Write+0x1ec>)
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 fd0d 	bl	8003cd8 <I2C_WaitOnFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80032c4:	2302      	movs	r3, #2
 80032c6:	e0cc      	b.n	8003462 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_I2C_Mem_Write+0x56>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e0c5      	b.n	8003462 <HAL_I2C_Mem_Write+0x1e2>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d007      	beq.n	80032fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800330a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2221      	movs	r2, #33	@ 0x21
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2240      	movs	r2, #64	@ 0x40
 8003318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a3a      	ldr	r2, [r7, #32]
 8003326:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800332c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a4d      	ldr	r2, [pc, #308]	@ (8003470 <HAL_I2C_Mem_Write+0x1f0>)
 800333c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800333e:	88f8      	ldrh	r0, [r7, #6]
 8003340:	893a      	ldrh	r2, [r7, #8]
 8003342:	8979      	ldrh	r1, [r7, #10]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	9301      	str	r3, [sp, #4]
 8003348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	4603      	mov	r3, r0
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 fb44 	bl	80039dc <I2C_RequestMemoryWrite>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d052      	beq.n	8003400 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e081      	b.n	8003462 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 fdd2 	bl	8003f0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00d      	beq.n	800338a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	2b04      	cmp	r3, #4
 8003374:	d107      	bne.n	8003386 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003384:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e06b      	b.n	8003462 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	781a      	ldrb	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d11b      	bne.n	8003400 <HAL_I2C_Mem_Write+0x180>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d017      	beq.n	8003400 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1aa      	bne.n	800335e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 fdc5 	bl	8003f9c <I2C_WaitOnBTFFlagUntilTimeout>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00d      	beq.n	8003434 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	2b04      	cmp	r3, #4
 800341e:	d107      	bne.n	8003430 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800342e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e016      	b.n	8003462 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e000      	b.n	8003462 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003460:	2302      	movs	r3, #2
  }
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	00100002 	.word	0x00100002
 8003470:	ffff0000 	.word	0xffff0000

08003474 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08c      	sub	sp, #48	@ 0x30
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	4608      	mov	r0, r1
 800347e:	4611      	mov	r1, r2
 8003480:	461a      	mov	r2, r3
 8003482:	4603      	mov	r3, r0
 8003484:	817b      	strh	r3, [r7, #10]
 8003486:	460b      	mov	r3, r1
 8003488:	813b      	strh	r3, [r7, #8]
 800348a:	4613      	mov	r3, r2
 800348c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800348e:	f7ff f98b 	bl	80027a8 <HAL_GetTick>
 8003492:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b20      	cmp	r3, #32
 800349e:	f040 8214 	bne.w	80038ca <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	2319      	movs	r3, #25
 80034a8:	2201      	movs	r2, #1
 80034aa:	497b      	ldr	r1, [pc, #492]	@ (8003698 <HAL_I2C_Mem_Read+0x224>)
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 fc13 	bl	8003cd8 <I2C_WaitOnFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80034b8:	2302      	movs	r3, #2
 80034ba:	e207      	b.n	80038cc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_I2C_Mem_Read+0x56>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e200      	b.n	80038cc <HAL_I2C_Mem_Read+0x458>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d007      	beq.n	80034f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2222      	movs	r2, #34	@ 0x22
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2240      	movs	r2, #64	@ 0x40
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800351a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003520:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4a5b      	ldr	r2, [pc, #364]	@ (800369c <HAL_I2C_Mem_Read+0x228>)
 8003530:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003532:	88f8      	ldrh	r0, [r7, #6]
 8003534:	893a      	ldrh	r2, [r7, #8]
 8003536:	8979      	ldrh	r1, [r7, #10]
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	9301      	str	r3, [sp, #4]
 800353c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	4603      	mov	r3, r0
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 fae0 	bl	8003b08 <I2C_RequestMemoryRead>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e1bc      	b.n	80038cc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003556:	2b00      	cmp	r3, #0
 8003558:	d113      	bne.n	8003582 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800355a:	2300      	movs	r3, #0
 800355c:	623b      	str	r3, [r7, #32]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	623b      	str	r3, [r7, #32]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	623b      	str	r3, [r7, #32]
 800356e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	e190      	b.n	80038a4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003586:	2b01      	cmp	r3, #1
 8003588:	d11b      	bne.n	80035c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003598:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	61fb      	str	r3, [r7, #28]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	e170      	b.n	80038a4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d11b      	bne.n	8003602 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ea:	2300      	movs	r3, #0
 80035ec:	61bb      	str	r3, [r7, #24]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	e150      	b.n	80038a4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003618:	e144      	b.n	80038a4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800361e:	2b03      	cmp	r3, #3
 8003620:	f200 80f1 	bhi.w	8003806 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003628:	2b01      	cmp	r3, #1
 800362a:	d123      	bne.n	8003674 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800362c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 fcfb 	bl	800402c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e145      	b.n	80038cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003672:	e117      	b.n	80038a4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003678:	2b02      	cmp	r3, #2
 800367a:	d14e      	bne.n	800371a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003682:	2200      	movs	r2, #0
 8003684:	4906      	ldr	r1, [pc, #24]	@ (80036a0 <HAL_I2C_Mem_Read+0x22c>)
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 fb26 	bl	8003cd8 <I2C_WaitOnFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d008      	beq.n	80036a4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e11a      	b.n	80038cc <HAL_I2C_Mem_Read+0x458>
 8003696:	bf00      	nop
 8003698:	00100002 	.word	0x00100002
 800369c:	ffff0000 	.word	0xffff0000
 80036a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003718:	e0c4      	b.n	80038a4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003720:	2200      	movs	r2, #0
 8003722:	496c      	ldr	r1, [pc, #432]	@ (80038d4 <HAL_I2C_Mem_Read+0x460>)
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 fad7 	bl	8003cd8 <I2C_WaitOnFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0cb      	b.n	80038cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003742:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800377c:	2200      	movs	r2, #0
 800377e:	4955      	ldr	r1, [pc, #340]	@ (80038d4 <HAL_I2C_Mem_Read+0x460>)
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 faa9 	bl	8003cd8 <I2C_WaitOnFlagUntilTimeout>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e09d      	b.n	80038cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800379e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003804:	e04e      	b.n	80038a4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003808:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 fc0e 	bl	800402c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e058      	b.n	80038cc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003842:	b29b      	uxth	r3, r3
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	2b04      	cmp	r3, #4
 8003858:	d124      	bne.n	80038a4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385e:	2b03      	cmp	r3, #3
 8003860:	d107      	bne.n	8003872 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003870:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f47f aeb6 	bne.w	800361a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	e000      	b.n	80038cc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80038ca:	2302      	movs	r3, #2
  }
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3728      	adds	r7, #40	@ 0x28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	00010004 	.word	0x00010004

080038d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	607a      	str	r2, [r7, #4]
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	460b      	mov	r3, r1
 80038e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d006      	beq.n	8003902 <I2C_MasterRequestWrite+0x2a>
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d003      	beq.n	8003902 <I2C_MasterRequestWrite+0x2a>
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003900:	d108      	bne.n	8003914 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	e00b      	b.n	800392c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003918:	2b12      	cmp	r3, #18
 800391a:	d107      	bne.n	800392c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800392a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f9cd 	bl	8003cd8 <I2C_WaitOnFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00d      	beq.n	8003960 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800394e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003952:	d103      	bne.n	800395c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800395a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e035      	b.n	80039cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003968:	d108      	bne.n	800397c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800396a:	897b      	ldrh	r3, [r7, #10]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	461a      	mov	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003978:	611a      	str	r2, [r3, #16]
 800397a:	e01b      	b.n	80039b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800397c:	897b      	ldrh	r3, [r7, #10]
 800397e:	11db      	asrs	r3, r3, #7
 8003980:	b2db      	uxtb	r3, r3
 8003982:	f003 0306 	and.w	r3, r3, #6
 8003986:	b2db      	uxtb	r3, r3
 8003988:	f063 030f 	orn	r3, r3, #15
 800398c:	b2da      	uxtb	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	490e      	ldr	r1, [pc, #56]	@ (80039d4 <I2C_MasterRequestWrite+0xfc>)
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 fa16 	bl	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e010      	b.n	80039cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039aa:	897b      	ldrh	r3, [r7, #10]
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	4907      	ldr	r1, [pc, #28]	@ (80039d8 <I2C_MasterRequestWrite+0x100>)
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fa06 	bl	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	00010008 	.word	0x00010008
 80039d8:	00010002 	.word	0x00010002

080039dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	4608      	mov	r0, r1
 80039e6:	4611      	mov	r1, r2
 80039e8:	461a      	mov	r2, r3
 80039ea:	4603      	mov	r3, r0
 80039ec:	817b      	strh	r3, [r7, #10]
 80039ee:	460b      	mov	r3, r1
 80039f0:	813b      	strh	r3, [r7, #8]
 80039f2:	4613      	mov	r3, r2
 80039f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 f960 	bl	8003cd8 <I2C_WaitOnFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a2c:	d103      	bne.n	8003a36 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a34:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e05f      	b.n	8003afa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a3a:	897b      	ldrh	r3, [r7, #10]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	6a3a      	ldr	r2, [r7, #32]
 8003a4e:	492d      	ldr	r1, [pc, #180]	@ (8003b04 <I2C_RequestMemoryWrite+0x128>)
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f9bb 	bl	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e04c      	b.n	8003afa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a78:	6a39      	ldr	r1, [r7, #32]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 fa46 	bl	8003f0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00d      	beq.n	8003aa2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d107      	bne.n	8003a9e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e02b      	b.n	8003afa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003aa2:	88fb      	ldrh	r3, [r7, #6]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d105      	bne.n	8003ab4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003aa8:	893b      	ldrh	r3, [r7, #8]
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	611a      	str	r2, [r3, #16]
 8003ab2:	e021      	b.n	8003af8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ab4:	893b      	ldrh	r3, [r7, #8]
 8003ab6:	0a1b      	lsrs	r3, r3, #8
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac4:	6a39      	ldr	r1, [r7, #32]
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 fa20 	bl	8003f0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00d      	beq.n	8003aee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d107      	bne.n	8003aea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ae8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e005      	b.n	8003afa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003aee:	893b      	ldrh	r3, [r7, #8]
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	00010002 	.word	0x00010002

08003b08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	4608      	mov	r0, r1
 8003b12:	4611      	mov	r1, r2
 8003b14:	461a      	mov	r2, r3
 8003b16:	4603      	mov	r3, r0
 8003b18:	817b      	strh	r3, [r7, #10]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	813b      	strh	r3, [r7, #8]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b30:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f8c2 	bl	8003cd8 <I2C_WaitOnFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00d      	beq.n	8003b76 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b68:	d103      	bne.n	8003b72 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e0aa      	b.n	8003ccc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b76:	897b      	ldrh	r3, [r7, #10]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	6a3a      	ldr	r2, [r7, #32]
 8003b8a:	4952      	ldr	r1, [pc, #328]	@ (8003cd4 <I2C_RequestMemoryRead+0x1cc>)
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f91d 	bl	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e097      	b.n	8003ccc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bb4:	6a39      	ldr	r1, [r7, #32]
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 f9a8 	bl	8003f0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00d      	beq.n	8003bde <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d107      	bne.n	8003bda <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e076      	b.n	8003ccc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bde:	88fb      	ldrh	r3, [r7, #6]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d105      	bne.n	8003bf0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003be4:	893b      	ldrh	r3, [r7, #8]
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	611a      	str	r2, [r3, #16]
 8003bee:	e021      	b.n	8003c34 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bf0:	893b      	ldrh	r3, [r7, #8]
 8003bf2:	0a1b      	lsrs	r3, r3, #8
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c00:	6a39      	ldr	r1, [r7, #32]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f982 	bl	8003f0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00d      	beq.n	8003c2a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d107      	bne.n	8003c26 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e050      	b.n	8003ccc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c2a:	893b      	ldrh	r3, [r7, #8]
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c36:	6a39      	ldr	r1, [r7, #32]
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f967 	bl	8003f0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00d      	beq.n	8003c60 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d107      	bne.n	8003c5c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e035      	b.n	8003ccc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 f82b 	bl	8003cd8 <I2C_WaitOnFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00d      	beq.n	8003ca4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c96:	d103      	bne.n	8003ca0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e013      	b.n	8003ccc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ca4:	897b      	ldrh	r3, [r7, #10]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb6:	6a3a      	ldr	r2, [r7, #32]
 8003cb8:	4906      	ldr	r1, [pc, #24]	@ (8003cd4 <I2C_RequestMemoryRead+0x1cc>)
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 f886 	bl	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	00010002 	.word	0x00010002

08003cd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	603b      	str	r3, [r7, #0]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ce8:	e048      	b.n	8003d7c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf0:	d044      	beq.n	8003d7c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf2:	f7fe fd59 	bl	80027a8 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d302      	bcc.n	8003d08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d139      	bne.n	8003d7c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	0c1b      	lsrs	r3, r3, #16
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d10d      	bne.n	8003d2e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	43da      	mvns	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bf0c      	ite	eq
 8003d24:	2301      	moveq	r3, #1
 8003d26:	2300      	movne	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	e00c      	b.n	8003d48 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	43da      	mvns	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	461a      	mov	r2, r3
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d116      	bne.n	8003d7c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	f043 0220 	orr.w	r2, r3, #32
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e023      	b.n	8003dc4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	0c1b      	lsrs	r3, r3, #16
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d10d      	bne.n	8003da2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	43da      	mvns	r2, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	4013      	ands	r3, r2
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	bf0c      	ite	eq
 8003d98:	2301      	moveq	r3, #1
 8003d9a:	2300      	movne	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	e00c      	b.n	8003dbc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	43da      	mvns	r2, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	4013      	ands	r3, r2
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	bf0c      	ite	eq
 8003db4:	2301      	moveq	r3, #1
 8003db6:	2300      	movne	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	461a      	mov	r2, r3
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d093      	beq.n	8003cea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dda:	e071      	b.n	8003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dea:	d123      	bne.n	8003e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dfa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e20:	f043 0204 	orr.w	r2, r3, #4
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e067      	b.n	8003f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3a:	d041      	beq.n	8003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e3c:	f7fe fcb4 	bl	80027a8 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d302      	bcc.n	8003e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d136      	bne.n	8003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	0c1b      	lsrs	r3, r3, #16
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d10c      	bne.n	8003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	43da      	mvns	r2, r3
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4013      	ands	r3, r2
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bf14      	ite	ne
 8003e6e:	2301      	movne	r3, #1
 8003e70:	2300      	moveq	r3, #0
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	e00b      	b.n	8003e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	43da      	mvns	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	4013      	ands	r3, r2
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	bf14      	ite	ne
 8003e88:	2301      	movne	r3, #1
 8003e8a:	2300      	moveq	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d016      	beq.n	8003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eac:	f043 0220 	orr.w	r2, r3, #32
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e021      	b.n	8003f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	0c1b      	lsrs	r3, r3, #16
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d10c      	bne.n	8003ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	43da      	mvns	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bf14      	ite	ne
 8003edc:	2301      	movne	r3, #1
 8003ede:	2300      	moveq	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	e00b      	b.n	8003efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	43da      	mvns	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	bf14      	ite	ne
 8003ef6:	2301      	movne	r3, #1
 8003ef8:	2300      	moveq	r3, #0
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f47f af6d 	bne.w	8003ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f18:	e034      	b.n	8003f84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f8e3 	bl	80040e6 <I2C_IsAcknowledgeFailed>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e034      	b.n	8003f94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f30:	d028      	beq.n	8003f84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f32:	f7fe fc39 	bl	80027a8 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d302      	bcc.n	8003f48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d11d      	bne.n	8003f84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f52:	2b80      	cmp	r3, #128	@ 0x80
 8003f54:	d016      	beq.n	8003f84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f70:	f043 0220 	orr.w	r2, r3, #32
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e007      	b.n	8003f94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f8e:	2b80      	cmp	r3, #128	@ 0x80
 8003f90:	d1c3      	bne.n	8003f1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fa8:	e034      	b.n	8004014 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 f89b 	bl	80040e6 <I2C_IsAcknowledgeFailed>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e034      	b.n	8004024 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc0:	d028      	beq.n	8004014 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc2:	f7fe fbf1 	bl	80027a8 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d302      	bcc.n	8003fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d11d      	bne.n	8004014 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d016      	beq.n	8004014 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004000:	f043 0220 	orr.w	r2, r3, #32
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e007      	b.n	8004024 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b04      	cmp	r3, #4
 8004020:	d1c3      	bne.n	8003faa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004038:	e049      	b.n	80040ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	f003 0310 	and.w	r3, r3, #16
 8004044:	2b10      	cmp	r3, #16
 8004046:	d119      	bne.n	800407c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0210 	mvn.w	r2, #16
 8004050:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e030      	b.n	80040de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800407c:	f7fe fb94 	bl	80027a8 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	429a      	cmp	r2, r3
 800408a:	d302      	bcc.n	8004092 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d11d      	bne.n	80040ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800409c:	2b40      	cmp	r3, #64	@ 0x40
 800409e:	d016      	beq.n	80040ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ba:	f043 0220 	orr.w	r2, r3, #32
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e007      	b.n	80040de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d8:	2b40      	cmp	r3, #64	@ 0x40
 80040da:	d1ae      	bne.n	800403a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040fc:	d11b      	bne.n	8004136 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004106:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	f043 0204 	orr.w	r2, r3, #4
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e128      	b.n	80043a8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d109      	bne.n	8004176 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a90      	ldr	r2, [pc, #576]	@ (80043b0 <HAL_I2S_Init+0x26c>)
 800416e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7fe f859 	bl	8002228 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2202      	movs	r2, #2
 800417a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800418c:	f023 030f 	bic.w	r3, r3, #15
 8004190:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2202      	movs	r2, #2
 8004198:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d060      	beq.n	8004264 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d102      	bne.n	80041b0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80041aa:	2310      	movs	r3, #16
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	e001      	b.n	80041b4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80041b0:	2320      	movs	r3, #32
 80041b2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d802      	bhi.n	80041c2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80041c2:	2001      	movs	r0, #1
 80041c4:	f002 fc2a 	bl	8006a1c <HAL_RCCEx_GetPeriphCLKFreq>
 80041c8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041d2:	d125      	bne.n	8004220 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d010      	beq.n	80041fe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80041e6:	4613      	mov	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	461a      	mov	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f8:	3305      	adds	r3, #5
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	e01f      	b.n	800423e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	fbb2 f2f3 	udiv	r2, r2, r3
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	461a      	mov	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	fbb2 f3f3 	udiv	r3, r2, r3
 800421a:	3305      	adds	r3, #5
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	e00e      	b.n	800423e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	fbb2 f2f3 	udiv	r2, r2, r3
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	461a      	mov	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	fbb2 f3f3 	udiv	r3, r2, r3
 800423a:	3305      	adds	r3, #5
 800423c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4a5c      	ldr	r2, [pc, #368]	@ (80043b4 <HAL_I2S_Init+0x270>)
 8004242:	fba2 2303 	umull	r2, r3, r2, r3
 8004246:	08db      	lsrs	r3, r3, #3
 8004248:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	085b      	lsrs	r3, r3, #1
 800425a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	021b      	lsls	r3, r3, #8
 8004260:	61bb      	str	r3, [r7, #24]
 8004262:	e003      	b.n	800426c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004264:	2302      	movs	r3, #2
 8004266:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d902      	bls.n	8004278 <HAL_I2S_Init+0x134>
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	2bff      	cmp	r3, #255	@ 0xff
 8004276:	d907      	bls.n	8004288 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427c:	f043 0210 	orr.w	r2, r3, #16
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e08f      	b.n	80043a8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	ea42 0103 	orr.w	r1, r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	430a      	orrs	r2, r1
 800429a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80042a6:	f023 030f 	bic.w	r3, r3, #15
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6851      	ldr	r1, [r2, #4]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6892      	ldr	r2, [r2, #8]
 80042b2:	4311      	orrs	r1, r2
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	68d2      	ldr	r2, [r2, #12]
 80042b8:	4311      	orrs	r1, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6992      	ldr	r2, [r2, #24]
 80042be:	430a      	orrs	r2, r1
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042ca:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d161      	bne.n	8004398 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a38      	ldr	r2, [pc, #224]	@ (80043b8 <HAL_I2S_Init+0x274>)
 80042d8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a37      	ldr	r2, [pc, #220]	@ (80043bc <HAL_I2S_Init+0x278>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d101      	bne.n	80042e8 <HAL_I2S_Init+0x1a4>
 80042e4:	4b36      	ldr	r3, [pc, #216]	@ (80043c0 <HAL_I2S_Init+0x27c>)
 80042e6:	e001      	b.n	80042ec <HAL_I2S_Init+0x1a8>
 80042e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6812      	ldr	r2, [r2, #0]
 80042f2:	4932      	ldr	r1, [pc, #200]	@ (80043bc <HAL_I2S_Init+0x278>)
 80042f4:	428a      	cmp	r2, r1
 80042f6:	d101      	bne.n	80042fc <HAL_I2S_Init+0x1b8>
 80042f8:	4a31      	ldr	r2, [pc, #196]	@ (80043c0 <HAL_I2S_Init+0x27c>)
 80042fa:	e001      	b.n	8004300 <HAL_I2S_Init+0x1bc>
 80042fc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004300:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004304:	f023 030f 	bic.w	r3, r3, #15
 8004308:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a2b      	ldr	r2, [pc, #172]	@ (80043bc <HAL_I2S_Init+0x278>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d101      	bne.n	8004318 <HAL_I2S_Init+0x1d4>
 8004314:	4b2a      	ldr	r3, [pc, #168]	@ (80043c0 <HAL_I2S_Init+0x27c>)
 8004316:	e001      	b.n	800431c <HAL_I2S_Init+0x1d8>
 8004318:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800431c:	2202      	movs	r2, #2
 800431e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a25      	ldr	r2, [pc, #148]	@ (80043bc <HAL_I2S_Init+0x278>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d101      	bne.n	800432e <HAL_I2S_Init+0x1ea>
 800432a:	4b25      	ldr	r3, [pc, #148]	@ (80043c0 <HAL_I2S_Init+0x27c>)
 800432c:	e001      	b.n	8004332 <HAL_I2S_Init+0x1ee>
 800432e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800433e:	d003      	beq.n	8004348 <HAL_I2S_Init+0x204>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d103      	bne.n	8004350 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004348:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	e001      	b.n	8004354 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004350:	2300      	movs	r3, #0
 8004352:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800435e:	4313      	orrs	r3, r2
 8004360:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004368:	4313      	orrs	r3, r2
 800436a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004372:	4313      	orrs	r3, r2
 8004374:	b29a      	uxth	r2, r3
 8004376:	897b      	ldrh	r3, [r7, #10]
 8004378:	4313      	orrs	r3, r2
 800437a:	b29b      	uxth	r3, r3
 800437c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004380:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a0d      	ldr	r2, [pc, #52]	@ (80043bc <HAL_I2S_Init+0x278>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d101      	bne.n	8004390 <HAL_I2S_Init+0x24c>
 800438c:	4b0c      	ldr	r3, [pc, #48]	@ (80043c0 <HAL_I2S_Init+0x27c>)
 800438e:	e001      	b.n	8004394 <HAL_I2S_Init+0x250>
 8004390:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004394:	897a      	ldrh	r2, [r7, #10]
 8004396:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	080044bb 	.word	0x080044bb
 80043b4:	cccccccd 	.word	0xcccccccd
 80043b8:	080045d1 	.word	0x080045d1
 80043bc:	40003800 	.word	0x40003800
 80043c0:	40003400 	.word	0x40003400

080043c4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440c:	881a      	ldrh	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004418:	1c9a      	adds	r2, r3, #2
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10e      	bne.n	8004454 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004444:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff ffb8 	bl	80043c4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004454:	bf00      	nop
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446e:	b292      	uxth	r2, r2
 8004470:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004476:	1c9a      	adds	r2, r3, #2
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800448e:	b29b      	uxth	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10e      	bne.n	80044b2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80044a2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff ff93 	bl	80043d8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80044b2:	bf00      	nop
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b086      	sub	sp, #24
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d13a      	bne.n	800454c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d109      	bne.n	80044f4 <I2S_IRQHandler+0x3a>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ea:	2b40      	cmp	r3, #64	@ 0x40
 80044ec:	d102      	bne.n	80044f4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff ffb4 	bl	800445c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044fa:	2b40      	cmp	r3, #64	@ 0x40
 80044fc:	d126      	bne.n	800454c <I2S_IRQHandler+0x92>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b20      	cmp	r3, #32
 800450a:	d11f      	bne.n	800454c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800451a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800451c:	2300      	movs	r3, #0
 800451e:	613b      	str	r3, [r7, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453e:	f043 0202 	orr.w	r2, r3, #2
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7ff ff50 	bl	80043ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b03      	cmp	r3, #3
 8004556:	d136      	bne.n	80045c6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b02      	cmp	r3, #2
 8004560:	d109      	bne.n	8004576 <I2S_IRQHandler+0xbc>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800456c:	2b80      	cmp	r3, #128	@ 0x80
 800456e:	d102      	bne.n	8004576 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff ff45 	bl	8004400 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	2b08      	cmp	r3, #8
 800457e:	d122      	bne.n	80045c6 <I2S_IRQHandler+0x10c>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b20      	cmp	r3, #32
 800458c:	d11b      	bne.n	80045c6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800459c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b8:	f043 0204 	orr.w	r2, r3, #4
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7ff ff13 	bl	80043ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045c6:	bf00      	nop
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a92      	ldr	r2, [pc, #584]	@ (8004830 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d101      	bne.n	80045ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80045ea:	4b92      	ldr	r3, [pc, #584]	@ (8004834 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045ec:	e001      	b.n	80045f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80045ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a8b      	ldr	r2, [pc, #556]	@ (8004830 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d101      	bne.n	800460c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004608:	4b8a      	ldr	r3, [pc, #552]	@ (8004834 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800460a:	e001      	b.n	8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800460c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800461c:	d004      	beq.n	8004628 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f040 8099 	bne.w	800475a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b02      	cmp	r3, #2
 8004630:	d107      	bne.n	8004642 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f925 	bl	800488c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b01      	cmp	r3, #1
 800464a:	d107      	bne.n	800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f9c8 	bl	80049ec <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004662:	2b40      	cmp	r3, #64	@ 0x40
 8004664:	d13a      	bne.n	80046dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b00      	cmp	r3, #0
 800466e:	d035      	beq.n	80046dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a6e      	ldr	r2, [pc, #440]	@ (8004830 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d101      	bne.n	800467e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800467a:	4b6e      	ldr	r3, [pc, #440]	@ (8004834 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800467c:	e001      	b.n	8004682 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800467e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4969      	ldr	r1, [pc, #420]	@ (8004830 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800468a:	428b      	cmp	r3, r1
 800468c:	d101      	bne.n	8004692 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800468e:	4b69      	ldr	r3, [pc, #420]	@ (8004834 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004690:	e001      	b.n	8004696 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004692:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004696:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800469a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80046aa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046ac:	2300      	movs	r3, #0
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ce:	f043 0202 	orr.w	r2, r3, #2
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff fe88 	bl	80043ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f003 0308 	and.w	r3, r3, #8
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	f040 80c3 	bne.w	800486e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f003 0320 	and.w	r3, r3, #32
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 80bd 	beq.w	800486e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004702:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a49      	ldr	r2, [pc, #292]	@ (8004830 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d101      	bne.n	8004712 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800470e:	4b49      	ldr	r3, [pc, #292]	@ (8004834 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004710:	e001      	b.n	8004716 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004712:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4944      	ldr	r1, [pc, #272]	@ (8004830 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800471e:	428b      	cmp	r3, r1
 8004720:	d101      	bne.n	8004726 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004722:	4b44      	ldr	r3, [pc, #272]	@ (8004834 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004724:	e001      	b.n	800472a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004726:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800472a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800472e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004730:	2300      	movs	r3, #0
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	60bb      	str	r3, [r7, #8]
 800473c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474a:	f043 0204 	orr.w	r2, r3, #4
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff fe4a 	bl	80043ec <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004758:	e089      	b.n	800486e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b02      	cmp	r3, #2
 8004762:	d107      	bne.n	8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f8be 	bl	80048f0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b01      	cmp	r3, #1
 800477c:	d107      	bne.n	800478e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f8fd 	bl	8004988 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004794:	2b40      	cmp	r3, #64	@ 0x40
 8004796:	d12f      	bne.n	80047f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d02a      	beq.n	80047f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047b0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004830 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d101      	bne.n	80047c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80047bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004834 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047be:	e001      	b.n	80047c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80047c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4919      	ldr	r1, [pc, #100]	@ (8004830 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047cc:	428b      	cmp	r3, r1
 80047ce:	d101      	bne.n	80047d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80047d0:	4b18      	ldr	r3, [pc, #96]	@ (8004834 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047d2:	e001      	b.n	80047d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80047d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ea:	f043 0202 	orr.w	r2, r3, #2
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7ff fdfa 	bl	80043ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d136      	bne.n	8004870 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f003 0320 	and.w	r3, r3, #32
 8004808:	2b00      	cmp	r3, #0
 800480a:	d031      	beq.n	8004870 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a07      	ldr	r2, [pc, #28]	@ (8004830 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d101      	bne.n	800481a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004816:	4b07      	ldr	r3, [pc, #28]	@ (8004834 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004818:	e001      	b.n	800481e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800481a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4902      	ldr	r1, [pc, #8]	@ (8004830 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004826:	428b      	cmp	r3, r1
 8004828:	d106      	bne.n	8004838 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800482a:	4b02      	ldr	r3, [pc, #8]	@ (8004834 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800482c:	e006      	b.n	800483c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800482e:	bf00      	nop
 8004830:	40003800 	.word	0x40003800
 8004834:	40003400 	.word	0x40003400
 8004838:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800483c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004840:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004850:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485e:	f043 0204 	orr.w	r2, r3, #4
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff fdc0 	bl	80043ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800486c:	e000      	b.n	8004870 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800486e:	bf00      	nop
}
 8004870:	bf00      	nop
 8004872:	3720      	adds	r7, #32
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004898:	1c99      	adds	r1, r3, #2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6251      	str	r1, [r2, #36]	@ 0x24
 800489e:	881a      	ldrh	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d113      	bne.n	80048e6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d106      	bne.n	80048e6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7ff ffc9 	bl	8004878 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048e6:	bf00      	nop
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fc:	1c99      	adds	r1, r3, #2
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6251      	str	r1, [r2, #36]	@ 0x24
 8004902:	8819      	ldrh	r1, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a1d      	ldr	r2, [pc, #116]	@ (8004980 <I2SEx_TxISR_I2SExt+0x90>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d101      	bne.n	8004912 <I2SEx_TxISR_I2SExt+0x22>
 800490e:	4b1d      	ldr	r3, [pc, #116]	@ (8004984 <I2SEx_TxISR_I2SExt+0x94>)
 8004910:	e001      	b.n	8004916 <I2SEx_TxISR_I2SExt+0x26>
 8004912:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004916:	460a      	mov	r2, r1
 8004918:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d121      	bne.n	8004976 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a12      	ldr	r2, [pc, #72]	@ (8004980 <I2SEx_TxISR_I2SExt+0x90>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d101      	bne.n	8004940 <I2SEx_TxISR_I2SExt+0x50>
 800493c:	4b11      	ldr	r3, [pc, #68]	@ (8004984 <I2SEx_TxISR_I2SExt+0x94>)
 800493e:	e001      	b.n	8004944 <I2SEx_TxISR_I2SExt+0x54>
 8004940:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	490d      	ldr	r1, [pc, #52]	@ (8004980 <I2SEx_TxISR_I2SExt+0x90>)
 800494c:	428b      	cmp	r3, r1
 800494e:	d101      	bne.n	8004954 <I2SEx_TxISR_I2SExt+0x64>
 8004950:	4b0c      	ldr	r3, [pc, #48]	@ (8004984 <I2SEx_TxISR_I2SExt+0x94>)
 8004952:	e001      	b.n	8004958 <I2SEx_TxISR_I2SExt+0x68>
 8004954:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004958:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800495c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d106      	bne.n	8004976 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff ff81 	bl	8004878 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004976:	bf00      	nop
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40003800 	.word	0x40003800
 8004984:	40003400 	.word	0x40003400

08004988 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68d8      	ldr	r0, [r3, #12]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499a:	1c99      	adds	r1, r3, #2
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80049a0:	b282      	uxth	r2, r0
 80049a2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d113      	bne.n	80049e4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80049ca:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff ff4a 	bl	8004878 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049e4:	bf00      	nop
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a20      	ldr	r2, [pc, #128]	@ (8004a7c <I2SEx_RxISR_I2SExt+0x90>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d101      	bne.n	8004a02 <I2SEx_RxISR_I2SExt+0x16>
 80049fe:	4b20      	ldr	r3, [pc, #128]	@ (8004a80 <I2SEx_RxISR_I2SExt+0x94>)
 8004a00:	e001      	b.n	8004a06 <I2SEx_RxISR_I2SExt+0x1a>
 8004a02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a06:	68d8      	ldr	r0, [r3, #12]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0c:	1c99      	adds	r1, r3, #2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004a12:	b282      	uxth	r2, r0
 8004a14:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d121      	bne.n	8004a72 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a12      	ldr	r2, [pc, #72]	@ (8004a7c <I2SEx_RxISR_I2SExt+0x90>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d101      	bne.n	8004a3c <I2SEx_RxISR_I2SExt+0x50>
 8004a38:	4b11      	ldr	r3, [pc, #68]	@ (8004a80 <I2SEx_RxISR_I2SExt+0x94>)
 8004a3a:	e001      	b.n	8004a40 <I2SEx_RxISR_I2SExt+0x54>
 8004a3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	490d      	ldr	r1, [pc, #52]	@ (8004a7c <I2SEx_RxISR_I2SExt+0x90>)
 8004a48:	428b      	cmp	r3, r1
 8004a4a:	d101      	bne.n	8004a50 <I2SEx_RxISR_I2SExt+0x64>
 8004a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a80 <I2SEx_RxISR_I2SExt+0x94>)
 8004a4e:	e001      	b.n	8004a54 <I2SEx_RxISR_I2SExt+0x68>
 8004a50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a54:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a58:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d106      	bne.n	8004a72 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff ff03 	bl	8004878 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a72:	bf00      	nop
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40003800 	.word	0x40003800
 8004a80:	40003400 	.word	0x40003400

08004a84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e101      	b.n	8004c9a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d106      	bne.n	8004ab6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f006 f81b 	bl	800aaec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2203      	movs	r2, #3
 8004aba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ac4:	d102      	bne.n	8004acc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f002 fc68 	bl	80073a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6818      	ldr	r0, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	7c1a      	ldrb	r2, [r3, #16]
 8004ade:	f88d 2000 	strb.w	r2, [sp]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ae6:	f002 fb47 	bl	8007178 <USB_CoreInit>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d005      	beq.n	8004afc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0ce      	b.n	8004c9a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2100      	movs	r1, #0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f002 fc60 	bl	80073c8 <USB_SetCurrentMode>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2202      	movs	r2, #2
 8004b12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e0bf      	b.n	8004c9a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	73fb      	strb	r3, [r7, #15]
 8004b1e:	e04a      	b.n	8004bb6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b20:	7bfa      	ldrb	r2, [r7, #15]
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	4413      	add	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	3315      	adds	r3, #21
 8004b30:	2201      	movs	r2, #1
 8004b32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b34:	7bfa      	ldrb	r2, [r7, #15]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	3314      	adds	r3, #20
 8004b44:	7bfa      	ldrb	r2, [r7, #15]
 8004b46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b48:	7bfa      	ldrb	r2, [r7, #15]
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	b298      	uxth	r0, r3
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	332e      	adds	r3, #46	@ 0x2e
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b60:	7bfa      	ldrb	r2, [r7, #15]
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	4613      	mov	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	3318      	adds	r3, #24
 8004b70:	2200      	movs	r2, #0
 8004b72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b74:	7bfa      	ldrb	r2, [r7, #15]
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	331c      	adds	r3, #28
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b88:	7bfa      	ldrb	r2, [r7, #15]
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	4413      	add	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	3320      	adds	r3, #32
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b9c:	7bfa      	ldrb	r2, [r7, #15]
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	3324      	adds	r3, #36	@ 0x24
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	791b      	ldrb	r3, [r3, #4]
 8004bba:	7bfa      	ldrb	r2, [r7, #15]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d3af      	bcc.n	8004b20 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	73fb      	strb	r3, [r7, #15]
 8004bc4:	e044      	b.n	8004c50 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004bc6:	7bfa      	ldrb	r2, [r7, #15]
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	4413      	add	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004bd8:	2200      	movs	r2, #0
 8004bda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004bdc:	7bfa      	ldrb	r2, [r7, #15]
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004bee:	7bfa      	ldrb	r2, [r7, #15]
 8004bf0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004bf2:	7bfa      	ldrb	r2, [r7, #15]
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	440b      	add	r3, r1
 8004c00:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004c04:	2200      	movs	r2, #0
 8004c06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c08:	7bfa      	ldrb	r2, [r7, #15]
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c1e:	7bfa      	ldrb	r2, [r7, #15]
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	4613      	mov	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c34:	7bfa      	ldrb	r2, [r7, #15]
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	791b      	ldrb	r3, [r3, #4]
 8004c54:	7bfa      	ldrb	r2, [r7, #15]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d3b5      	bcc.n	8004bc6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6818      	ldr	r0, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	7c1a      	ldrb	r2, [r3, #16]
 8004c62:	f88d 2000 	strb.w	r2, [sp]
 8004c66:	3304      	adds	r3, #4
 8004c68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c6a:	f002 fbf9 	bl	8007460 <USB_DevInit>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e00c      	b.n	8004c9a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f003 fc43 	bl	800851e <USB_DevDisconnect>

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <HAL_PCD_Start+0x1c>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e022      	b.n	8004d04 <HAL_PCD_Start+0x62>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d105      	bne.n	8004ce6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cde:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f002 fb4a 	bl	8007384 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f003 fbf1 	bl	80084dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004d0c:	b590      	push	{r4, r7, lr}
 8004d0e:	b08d      	sub	sp, #52	@ 0x34
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f003 fcaf 	bl	8008686 <USB_GetMode>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f040 848c 	bne.w	8005648 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f003 fc13 	bl	8008560 <USB_ReadInterrupts>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 8482 	beq.w	8005646 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	0a1b      	lsrs	r3, r3, #8
 8004d4c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f003 fc00 	bl	8008560 <USB_ReadInterrupts>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d107      	bne.n	8004d7a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695a      	ldr	r2, [r3, #20]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f002 0202 	and.w	r2, r2, #2
 8004d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f003 fbee 	bl	8008560 <USB_ReadInterrupts>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f003 0310 	and.w	r3, r3, #16
 8004d8a:	2b10      	cmp	r3, #16
 8004d8c:	d161      	bne.n	8004e52 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	699a      	ldr	r2, [r3, #24]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0210 	bic.w	r2, r2, #16
 8004d9c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	f003 020f 	and.w	r2, r3, #15
 8004daa:	4613      	mov	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	4413      	add	r3, r2
 8004dba:	3304      	adds	r3, #4
 8004dbc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	0c5b      	lsrs	r3, r3, #17
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d124      	bne.n	8004e14 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d035      	beq.n	8004e42 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	091b      	lsrs	r3, r3, #4
 8004dde:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004de0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	461a      	mov	r2, r3
 8004de8:	6a38      	ldr	r0, [r7, #32]
 8004dea:	f003 fa25 	bl	8008238 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	091b      	lsrs	r3, r3, #4
 8004df6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dfa:	441a      	add	r2, r3
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	695a      	ldr	r2, [r3, #20]
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	091b      	lsrs	r3, r3, #4
 8004e08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e0c:	441a      	add	r2, r3
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	615a      	str	r2, [r3, #20]
 8004e12:	e016      	b.n	8004e42 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	0c5b      	lsrs	r3, r3, #17
 8004e18:	f003 030f 	and.w	r3, r3, #15
 8004e1c:	2b06      	cmp	r3, #6
 8004e1e:	d110      	bne.n	8004e42 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e26:	2208      	movs	r2, #8
 8004e28:	4619      	mov	r1, r3
 8004e2a:	6a38      	ldr	r0, [r7, #32]
 8004e2c:	f003 fa04 	bl	8008238 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	695a      	ldr	r2, [r3, #20]
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	091b      	lsrs	r3, r3, #4
 8004e38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e3c:	441a      	add	r2, r3
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699a      	ldr	r2, [r3, #24]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 0210 	orr.w	r2, r2, #16
 8004e50:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f003 fb82 	bl	8008560 <USB_ReadInterrupts>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e62:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e66:	f040 80a7 	bne.w	8004fb8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f003 fb87 	bl	8008586 <USB_ReadDevAllOutEpInterrupt>
 8004e78:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004e7a:	e099      	b.n	8004fb0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 808e 	beq.w	8004fa4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	4611      	mov	r1, r2
 8004e92:	4618      	mov	r0, r3
 8004e94:	f003 fbab 	bl	80085ee <USB_ReadDevOutEPInterrupt>
 8004e98:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00c      	beq.n	8004ebe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004eb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 fea3 	bl	8005c04 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f003 0308 	and.w	r3, r3, #8
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00c      	beq.n	8004ee2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	2308      	movs	r3, #8
 8004ed8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004eda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 ff79 	bl	8005dd4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d008      	beq.n	8004efe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef8:	461a      	mov	r2, r3
 8004efa:	2310      	movs	r3, #16
 8004efc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d030      	beq.n	8004f6a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f10:	2b80      	cmp	r3, #128	@ 0x80
 8004f12:	d109      	bne.n	8004f28 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f26:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004f28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	4413      	add	r3, r2
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	78db      	ldrb	r3, [r3, #3]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d108      	bne.n	8004f58 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	4619      	mov	r1, r3
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f005 fede 	bl	800ad14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f64:	461a      	mov	r2, r3
 8004f66:	2302      	movs	r3, #2
 8004f68:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f003 0320 	and.w	r3, r3, #32
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d008      	beq.n	8004f86 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f80:	461a      	mov	r2, r3
 8004f82:	2320      	movs	r3, #32
 8004f84:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d009      	beq.n	8004fa4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004fa2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fac:	085b      	lsrs	r3, r3, #1
 8004fae:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f47f af62 	bne.w	8004e7c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f003 facf 	bl	8008560 <USB_ReadInterrupts>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fcc:	f040 80db 	bne.w	8005186 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f003 faf0 	bl	80085ba <USB_ReadDevAllInEpInterrupt>
 8004fda:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004fe0:	e0cd      	b.n	800517e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 80c2 	beq.w	8005172 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f003 fb16 	bl	800862a <USB_ReadDevInEPInterrupt>
 8004ffe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d057      	beq.n	80050ba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	2201      	movs	r2, #1
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800501e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	43db      	mvns	r3, r3
 8005024:	69f9      	ldr	r1, [r7, #28]
 8005026:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800502a:	4013      	ands	r3, r2
 800502c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800503a:	461a      	mov	r2, r3
 800503c:	2301      	movs	r3, #1
 800503e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	799b      	ldrb	r3, [r3, #6]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d132      	bne.n	80050ae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800504c:	4613      	mov	r3, r2
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	4413      	add	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	440b      	add	r3, r1
 8005056:	3320      	adds	r3, #32
 8005058:	6819      	ldr	r1, [r3, #0]
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800505e:	4613      	mov	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4403      	add	r3, r0
 8005068:	331c      	adds	r3, #28
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4419      	add	r1, r3
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005072:	4613      	mov	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	4413      	add	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4403      	add	r3, r0
 800507c:	3320      	adds	r3, #32
 800507e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005082:	2b00      	cmp	r3, #0
 8005084:	d113      	bne.n	80050ae <HAL_PCD_IRQHandler+0x3a2>
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800508a:	4613      	mov	r3, r2
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	4413      	add	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	440b      	add	r3, r1
 8005094:	3324      	adds	r3, #36	@ 0x24
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d108      	bne.n	80050ae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80050a6:	461a      	mov	r2, r3
 80050a8:	2101      	movs	r1, #1
 80050aa:	f003 fb1d 	bl	80086e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	4619      	mov	r1, r3
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f005 fda8 	bl	800ac0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f003 0308 	and.w	r3, r3, #8
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d008      	beq.n	80050d6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80050c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d0:	461a      	mov	r2, r3
 80050d2:	2308      	movs	r3, #8
 80050d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d008      	beq.n	80050f2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80050e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ec:	461a      	mov	r2, r3
 80050ee:	2310      	movs	r3, #16
 80050f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d008      	beq.n	800510e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80050fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005108:	461a      	mov	r2, r3
 800510a:	2340      	movs	r3, #64	@ 0x40
 800510c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d023      	beq.n	8005160 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005118:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800511a:	6a38      	ldr	r0, [r7, #32]
 800511c:	f002 fb04 	bl	8007728 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005122:	4613      	mov	r3, r2
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	4413      	add	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	3310      	adds	r3, #16
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	4413      	add	r3, r2
 8005130:	3304      	adds	r3, #4
 8005132:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	78db      	ldrb	r3, [r3, #3]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d108      	bne.n	800514e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2200      	movs	r2, #0
 8005140:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005144:	b2db      	uxtb	r3, r3
 8005146:	4619      	mov	r1, r3
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f005 fdf5 	bl	800ad38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800515a:	461a      	mov	r2, r3
 800515c:	2302      	movs	r3, #2
 800515e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800516a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fcbd 	bl	8005aec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	3301      	adds	r3, #1
 8005176:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517a:	085b      	lsrs	r3, r3, #1
 800517c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800517e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005180:	2b00      	cmp	r3, #0
 8005182:	f47f af2e 	bne.w	8004fe2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4618      	mov	r0, r3
 800518c:	f003 f9e8 	bl	8008560 <USB_ReadInterrupts>
 8005190:	4603      	mov	r3, r0
 8005192:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005196:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800519a:	d122      	bne.n	80051e2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	69fa      	ldr	r2, [r7, #28]
 80051a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051aa:	f023 0301 	bic.w	r3, r3, #1
 80051ae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d108      	bne.n	80051cc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80051c2:	2100      	movs	r1, #0
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fea3 	bl	8005f10 <HAL_PCDEx_LPM_Callback>
 80051ca:	e002      	b.n	80051d2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f005 fd93 	bl	800acf8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695a      	ldr	r2, [r3, #20]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80051e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f003 f9ba 	bl	8008560 <USB_ReadInterrupts>
 80051ec:	4603      	mov	r3, r0
 80051ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051f6:	d112      	bne.n	800521e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b01      	cmp	r3, #1
 8005206:	d102      	bne.n	800520e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f005 fd4f 	bl	800acac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695a      	ldr	r2, [r3, #20]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800521c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f003 f99c 	bl	8008560 <USB_ReadInterrupts>
 8005228:	4603      	mov	r3, r0
 800522a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800522e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005232:	f040 80b7 	bne.w	80053a4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2110      	movs	r1, #16
 8005250:	4618      	mov	r0, r3
 8005252:	f002 fa69 	bl	8007728 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005256:	2300      	movs	r3, #0
 8005258:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800525a:	e046      	b.n	80052ea <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800525c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005268:	461a      	mov	r2, r3
 800526a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800526e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005280:	0151      	lsls	r1, r2, #5
 8005282:	69fa      	ldr	r2, [r7, #28]
 8005284:	440a      	add	r2, r1
 8005286:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800528a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800528e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800529c:	461a      	mov	r2, r3
 800529e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80052a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052b4:	0151      	lsls	r1, r2, #5
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	440a      	add	r2, r1
 80052ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80052c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052d4:	0151      	lsls	r1, r2, #5
 80052d6:	69fa      	ldr	r2, [r7, #28]
 80052d8:	440a      	add	r2, r1
 80052da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80052e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052e6:	3301      	adds	r3, #1
 80052e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	791b      	ldrb	r3, [r3, #4]
 80052ee:	461a      	mov	r2, r3
 80052f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d3b2      	bcc.n	800525c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	69fa      	ldr	r2, [r7, #28]
 8005300:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005304:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005308:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	7bdb      	ldrb	r3, [r3, #15]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d016      	beq.n	8005340 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005318:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800531c:	69fa      	ldr	r2, [r7, #28]
 800531e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005322:	f043 030b 	orr.w	r3, r3, #11
 8005326:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005332:	69fa      	ldr	r2, [r7, #28]
 8005334:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005338:	f043 030b 	orr.w	r3, r3, #11
 800533c:	6453      	str	r3, [r2, #68]	@ 0x44
 800533e:	e015      	b.n	800536c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	69fa      	ldr	r2, [r7, #28]
 800534a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800534e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005352:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005356:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005366:	f043 030b 	orr.w	r3, r3, #11
 800536a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	69fa      	ldr	r2, [r7, #28]
 8005376:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800537a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800537e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6818      	ldr	r0, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800538e:	461a      	mov	r2, r3
 8005390:	f003 f9aa 	bl	80086e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695a      	ldr	r2, [r3, #20]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80053a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f003 f8d9 	bl	8008560 <USB_ReadInterrupts>
 80053ae:	4603      	mov	r3, r0
 80053b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053b8:	d123      	bne.n	8005402 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f003 f96f 	bl	80086a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f002 fa26 	bl	800781a <USB_GetDevSpeed>
 80053ce:	4603      	mov	r3, r0
 80053d0:	461a      	mov	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681c      	ldr	r4, [r3, #0]
 80053da:	f001 fa09 	bl	80067f0 <HAL_RCC_GetHCLKFreq>
 80053de:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053e4:	461a      	mov	r2, r3
 80053e6:	4620      	mov	r0, r4
 80053e8:	f001 ff2a 	bl	8007240 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f005 fc34 	bl	800ac5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695a      	ldr	r2, [r3, #20]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005400:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f003 f8aa 	bl	8008560 <USB_ReadInterrupts>
 800540c:	4603      	mov	r3, r0
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b08      	cmp	r3, #8
 8005414:	d10a      	bne.n	800542c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f005 fc11 	bl	800ac3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695a      	ldr	r2, [r3, #20]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f002 0208 	and.w	r2, r2, #8
 800542a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	f003 f895 	bl	8008560 <USB_ReadInterrupts>
 8005436:	4603      	mov	r3, r0
 8005438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800543c:	2b80      	cmp	r3, #128	@ 0x80
 800543e:	d123      	bne.n	8005488 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800544c:	2301      	movs	r3, #1
 800544e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005450:	e014      	b.n	800547c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005456:	4613      	mov	r3, r2
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	4413      	add	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d105      	bne.n	8005476 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800546a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546c:	b2db      	uxtb	r3, r3
 800546e:	4619      	mov	r1, r3
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fb0a 	bl	8005a8a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	3301      	adds	r3, #1
 800547a:	627b      	str	r3, [r7, #36]	@ 0x24
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	791b      	ldrb	r3, [r3, #4]
 8005480:	461a      	mov	r2, r3
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	4293      	cmp	r3, r2
 8005486:	d3e4      	bcc.n	8005452 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f003 f867 	bl	8008560 <USB_ReadInterrupts>
 8005492:	4603      	mov	r3, r0
 8005494:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005498:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800549c:	d13c      	bne.n	8005518 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800549e:	2301      	movs	r3, #1
 80054a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80054a2:	e02b      	b.n	80054fc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80054a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b8:	4613      	mov	r3, r2
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	4413      	add	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	440b      	add	r3, r1
 80054c2:	3318      	adds	r3, #24
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d115      	bne.n	80054f6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80054ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	da12      	bge.n	80054f6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054d4:	4613      	mov	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	3317      	adds	r3, #23
 80054e0:	2201      	movs	r2, #1
 80054e2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80054e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	4619      	mov	r1, r3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 faca 	bl	8005a8a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f8:	3301      	adds	r3, #1
 80054fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	791b      	ldrb	r3, [r3, #4]
 8005500:	461a      	mov	r2, r3
 8005502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005504:	4293      	cmp	r3, r2
 8005506:	d3cd      	bcc.n	80054a4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695a      	ldr	r2, [r3, #20]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005516:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4618      	mov	r0, r3
 800551e:	f003 f81f 	bl	8008560 <USB_ReadInterrupts>
 8005522:	4603      	mov	r3, r0
 8005524:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005528:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800552c:	d156      	bne.n	80055dc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800552e:	2301      	movs	r3, #1
 8005530:	627b      	str	r3, [r7, #36]	@ 0x24
 8005532:	e045      	b.n	80055c0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005544:	6879      	ldr	r1, [r7, #4]
 8005546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005548:	4613      	mov	r3, r2
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	4413      	add	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	440b      	add	r3, r1
 8005552:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d12e      	bne.n	80055ba <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800555c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800555e:	2b00      	cmp	r3, #0
 8005560:	da2b      	bge.n	80055ba <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800556e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005572:	429a      	cmp	r2, r3
 8005574:	d121      	bne.n	80055ba <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800557a:	4613      	mov	r3, r2
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	4413      	add	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	440b      	add	r3, r1
 8005584:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005588:	2201      	movs	r2, #1
 800558a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10a      	bne.n	80055ba <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	69fa      	ldr	r2, [r7, #28]
 80055ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80055b6:	6053      	str	r3, [r2, #4]
            break;
 80055b8:	e008      	b.n	80055cc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	3301      	adds	r3, #1
 80055be:	627b      	str	r3, [r7, #36]	@ 0x24
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	791b      	ldrb	r3, [r3, #4]
 80055c4:	461a      	mov	r2, r3
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d3b3      	bcc.n	8005534 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695a      	ldr	r2, [r3, #20]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80055da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f002 ffbd 	bl	8008560 <USB_ReadInterrupts>
 80055e6:	4603      	mov	r3, r0
 80055e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80055ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f0:	d10a      	bne.n	8005608 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f005 fbb2 	bl	800ad5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695a      	ldr	r2, [r3, #20]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005606:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4618      	mov	r0, r3
 800560e:	f002 ffa7 	bl	8008560 <USB_ReadInterrupts>
 8005612:	4603      	mov	r3, r0
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b04      	cmp	r3, #4
 800561a:	d115      	bne.n	8005648 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	f003 0304 	and.w	r3, r3, #4
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f005 fba2 	bl	800ad78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6859      	ldr	r1, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	430a      	orrs	r2, r1
 8005642:	605a      	str	r2, [r3, #4]
 8005644:	e000      	b.n	8005648 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005646:	bf00      	nop
    }
  }
}
 8005648:	3734      	adds	r7, #52	@ 0x34
 800564a:	46bd      	mov	sp, r7
 800564c:	bd90      	pop	{r4, r7, pc}

0800564e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	460b      	mov	r3, r1
 8005658:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_PCD_SetAddress+0x1a>
 8005664:	2302      	movs	r3, #2
 8005666:	e012      	b.n	800568e <HAL_PCD_SetAddress+0x40>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	78fa      	ldrb	r2, [r7, #3]
 8005674:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	78fa      	ldrb	r2, [r7, #3]
 800567c:	4611      	mov	r1, r2
 800567e:	4618      	mov	r0, r3
 8005680:	f002 ff06 	bl	8008490 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b084      	sub	sp, #16
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	4608      	mov	r0, r1
 80056a0:	4611      	mov	r1, r2
 80056a2:	461a      	mov	r2, r3
 80056a4:	4603      	mov	r3, r0
 80056a6:	70fb      	strb	r3, [r7, #3]
 80056a8:	460b      	mov	r3, r1
 80056aa:	803b      	strh	r3, [r7, #0]
 80056ac:	4613      	mov	r3, r2
 80056ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80056b0:	2300      	movs	r3, #0
 80056b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	da0f      	bge.n	80056dc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	f003 020f 	and.w	r2, r3, #15
 80056c2:	4613      	mov	r3, r2
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	4413      	add	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	3310      	adds	r3, #16
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	4413      	add	r3, r2
 80056d0:	3304      	adds	r3, #4
 80056d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2201      	movs	r2, #1
 80056d8:	705a      	strb	r2, [r3, #1]
 80056da:	e00f      	b.n	80056fc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	f003 020f 	and.w	r2, r3, #15
 80056e2:	4613      	mov	r3, r2
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	4413      	add	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	4413      	add	r3, r2
 80056f2:	3304      	adds	r3, #4
 80056f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80056fc:	78fb      	ldrb	r3, [r7, #3]
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	b2da      	uxtb	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005708:	883b      	ldrh	r3, [r7, #0]
 800570a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	78ba      	ldrb	r2, [r7, #2]
 8005716:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	785b      	ldrb	r3, [r3, #1]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d004      	beq.n	800572a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	461a      	mov	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800572a:	78bb      	ldrb	r3, [r7, #2]
 800572c:	2b02      	cmp	r3, #2
 800572e:	d102      	bne.n	8005736 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_PCD_EP_Open+0xae>
 8005740:	2302      	movs	r3, #2
 8005742:	e00e      	b.n	8005762 <HAL_PCD_EP_Open+0xcc>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68f9      	ldr	r1, [r7, #12]
 8005752:	4618      	mov	r0, r3
 8005754:	f002 f886 	bl	8007864 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005760:	7afb      	ldrb	r3, [r7, #11]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b084      	sub	sp, #16
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	460b      	mov	r3, r1
 8005774:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005776:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800577a:	2b00      	cmp	r3, #0
 800577c:	da0f      	bge.n	800579e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800577e:	78fb      	ldrb	r3, [r7, #3]
 8005780:	f003 020f 	and.w	r2, r3, #15
 8005784:	4613      	mov	r3, r2
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	3310      	adds	r3, #16
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	4413      	add	r3, r2
 8005792:	3304      	adds	r3, #4
 8005794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	705a      	strb	r2, [r3, #1]
 800579c:	e00f      	b.n	80057be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800579e:	78fb      	ldrb	r3, [r7, #3]
 80057a0:	f003 020f 	and.w	r2, r3, #15
 80057a4:	4613      	mov	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	4413      	add	r3, r2
 80057b4:	3304      	adds	r3, #4
 80057b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80057be:	78fb      	ldrb	r3, [r7, #3]
 80057c0:	f003 030f 	and.w	r3, r3, #15
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_PCD_EP_Close+0x6e>
 80057d4:	2302      	movs	r3, #2
 80057d6:	e00e      	b.n	80057f6 <HAL_PCD_EP_Close+0x8c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68f9      	ldr	r1, [r7, #12]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f002 f8c4 	bl	8007974 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b086      	sub	sp, #24
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
 800580a:	460b      	mov	r3, r1
 800580c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800580e:	7afb      	ldrb	r3, [r7, #11]
 8005810:	f003 020f 	and.w	r2, r3, #15
 8005814:	4613      	mov	r3, r2
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	3304      	adds	r3, #4
 8005826:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2200      	movs	r2, #0
 8005838:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2200      	movs	r2, #0
 800583e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005840:	7afb      	ldrb	r3, [r7, #11]
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	b2da      	uxtb	r2, r3
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	799b      	ldrb	r3, [r3, #6]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d102      	bne.n	800585a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6818      	ldr	r0, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	799b      	ldrb	r3, [r3, #6]
 8005862:	461a      	mov	r2, r3
 8005864:	6979      	ldr	r1, [r7, #20]
 8005866:	f002 f961 	bl	8007b2c <USB_EPStartXfer>

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	460b      	mov	r3, r1
 800587e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	f003 020f 	and.w	r2, r3, #15
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	4613      	mov	r3, r2
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005896:	681b      	ldr	r3, [r3, #0]
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	607a      	str	r2, [r7, #4]
 80058ae:	603b      	str	r3, [r7, #0]
 80058b0:	460b      	mov	r3, r1
 80058b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058b4:	7afb      	ldrb	r3, [r7, #11]
 80058b6:	f003 020f 	and.w	r2, r3, #15
 80058ba:	4613      	mov	r3, r2
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	3310      	adds	r3, #16
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4413      	add	r3, r2
 80058c8:	3304      	adds	r3, #4
 80058ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2200      	movs	r2, #0
 80058dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2201      	movs	r2, #1
 80058e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058e4:	7afb      	ldrb	r3, [r7, #11]
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	799b      	ldrb	r3, [r3, #6]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d102      	bne.n	80058fe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	799b      	ldrb	r3, [r3, #6]
 8005906:	461a      	mov	r2, r3
 8005908:	6979      	ldr	r1, [r7, #20]
 800590a:	f002 f90f 	bl	8007b2c <USB_EPStartXfer>

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	7912      	ldrb	r2, [r2, #4]
 800592e:	4293      	cmp	r3, r2
 8005930:	d901      	bls.n	8005936 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e04f      	b.n	80059d6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005936:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800593a:	2b00      	cmp	r3, #0
 800593c:	da0f      	bge.n	800595e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800593e:	78fb      	ldrb	r3, [r7, #3]
 8005940:	f003 020f 	and.w	r2, r3, #15
 8005944:	4613      	mov	r3, r2
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	4413      	add	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	3310      	adds	r3, #16
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	4413      	add	r3, r2
 8005952:	3304      	adds	r3, #4
 8005954:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	705a      	strb	r2, [r3, #1]
 800595c:	e00d      	b.n	800597a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800595e:	78fa      	ldrb	r2, [r7, #3]
 8005960:	4613      	mov	r3, r2
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	4413      	add	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	4413      	add	r3, r2
 8005970:	3304      	adds	r3, #4
 8005972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	b2da      	uxtb	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005992:	2b01      	cmp	r3, #1
 8005994:	d101      	bne.n	800599a <HAL_PCD_EP_SetStall+0x82>
 8005996:	2302      	movs	r3, #2
 8005998:	e01d      	b.n	80059d6 <HAL_PCD_EP_SetStall+0xbe>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68f9      	ldr	r1, [r7, #12]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f002 fc9d 	bl	80082e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059ae:	78fb      	ldrb	r3, [r7, #3]
 80059b0:	f003 030f 	and.w	r3, r3, #15
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d109      	bne.n	80059cc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6818      	ldr	r0, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	7999      	ldrb	r1, [r3, #6]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80059c6:	461a      	mov	r2, r3
 80059c8:	f002 fe8e 	bl	80086e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	460b      	mov	r3, r1
 80059e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80059ea:	78fb      	ldrb	r3, [r7, #3]
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	7912      	ldrb	r2, [r2, #4]
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d901      	bls.n	80059fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e042      	b.n	8005a82 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	da0f      	bge.n	8005a24 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	f003 020f 	and.w	r2, r3, #15
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	4413      	add	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	3310      	adds	r3, #16
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	4413      	add	r3, r2
 8005a18:	3304      	adds	r3, #4
 8005a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	705a      	strb	r2, [r3, #1]
 8005a22:	e00f      	b.n	8005a44 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a24:	78fb      	ldrb	r3, [r7, #3]
 8005a26:	f003 020f 	and.w	r2, r3, #15
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	4413      	add	r3, r2
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a4a:	78fb      	ldrb	r3, [r7, #3]
 8005a4c:	f003 030f 	and.w	r3, r3, #15
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_PCD_EP_ClrStall+0x86>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e00e      	b.n	8005a82 <HAL_PCD_EP_ClrStall+0xa4>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68f9      	ldr	r1, [r7, #12]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f002 fca6 	bl	80083c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	460b      	mov	r3, r1
 8005a94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005a96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	da0c      	bge.n	8005ab8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	f003 020f 	and.w	r2, r3, #15
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	4413      	add	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	3310      	adds	r3, #16
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	e00c      	b.n	8005ad2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ab8:	78fb      	ldrb	r3, [r7, #3]
 8005aba:	f003 020f 	and.w	r2, r3, #15
 8005abe:	4613      	mov	r3, r2
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	4413      	add	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	4413      	add	r3, r2
 8005ace:	3304      	adds	r3, #4
 8005ad0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68f9      	ldr	r1, [r7, #12]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f002 fac5 	bl	8008068 <USB_EPStopXfer>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005ae2:	7afb      	ldrb	r3, [r7, #11]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08a      	sub	sp, #40	@ 0x28
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	4613      	mov	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	3310      	adds	r3, #16
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	4413      	add	r3, r2
 8005b10:	3304      	adds	r3, #4
 8005b12:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	695a      	ldr	r2, [r3, #20]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d901      	bls.n	8005b24 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e06b      	b.n	8005bfc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	69fa      	ldr	r2, [r7, #28]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d902      	bls.n	8005b40 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	3303      	adds	r3, #3
 8005b44:	089b      	lsrs	r3, r3, #2
 8005b46:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b48:	e02a      	b.n	8005ba0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	691a      	ldr	r2, [r3, #16]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	69fa      	ldr	r2, [r7, #28]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d902      	bls.n	8005b66 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	3303      	adds	r3, #3
 8005b6a:	089b      	lsrs	r3, r3, #2
 8005b6c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	68d9      	ldr	r1, [r3, #12]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	4603      	mov	r3, r0
 8005b82:	6978      	ldr	r0, [r7, #20]
 8005b84:	f002 fb1a 	bl	80081bc <USB_WritePacket>

    ep->xfer_buff  += len;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	441a      	add	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	695a      	ldr	r2, [r3, #20]
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	441a      	add	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d809      	bhi.n	8005bca <PCD_WriteEmptyTxFifo+0xde>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	695a      	ldr	r2, [r3, #20]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d203      	bcs.n	8005bca <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1bf      	bne.n	8005b4a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	691a      	ldr	r2, [r3, #16]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d811      	bhi.n	8005bfa <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	f003 030f 	and.w	r3, r3, #15
 8005bdc:	2201      	movs	r2, #1
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	43db      	mvns	r3, r3
 8005bf0:	6939      	ldr	r1, [r7, #16]
 8005bf2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3720      	adds	r7, #32
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b088      	sub	sp, #32
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	333c      	adds	r3, #60	@ 0x3c
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	799b      	ldrb	r3, [r3, #6]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d17b      	bne.n	8005d32 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f003 0308 	and.w	r3, r3, #8
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d015      	beq.n	8005c70 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	4a61      	ldr	r2, [pc, #388]	@ (8005dcc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	f240 80b9 	bls.w	8005dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 80b3 	beq.w	8005dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c66:	461a      	mov	r2, r3
 8005c68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c6c:	6093      	str	r3, [r2, #8]
 8005c6e:	e0a7      	b.n	8005dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d009      	beq.n	8005c8e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c86:	461a      	mov	r2, r3
 8005c88:	2320      	movs	r3, #32
 8005c8a:	6093      	str	r3, [r2, #8]
 8005c8c:	e098      	b.n	8005dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f040 8093 	bne.w	8005dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	4a4b      	ldr	r2, [pc, #300]	@ (8005dcc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d90f      	bls.n	8005cc2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00a      	beq.n	8005cc2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb8:	461a      	mov	r2, r3
 8005cba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cbe:	6093      	str	r3, [r2, #8]
 8005cc0:	e07e      	b.n	8005dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	4413      	add	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6a1a      	ldr	r2, [r3, #32]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	0159      	lsls	r1, r3, #5
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	440b      	add	r3, r1
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cee:	1ad2      	subs	r2, r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d114      	bne.n	8005d24 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d109      	bne.n	8005d16 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6818      	ldr	r0, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2101      	movs	r1, #1
 8005d10:	f002 fcea 	bl	80086e8 <USB_EP0_OutStart>
 8005d14:	e006      	b.n	8005d24 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	441a      	add	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	4619      	mov	r1, r3
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f004 ff52 	bl	800abd4 <HAL_PCD_DataOutStageCallback>
 8005d30:	e046      	b.n	8005dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	4a26      	ldr	r2, [pc, #152]	@ (8005dd0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d124      	bne.n	8005d84 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00a      	beq.n	8005d5a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d50:	461a      	mov	r2, r3
 8005d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d56:	6093      	str	r3, [r2, #8]
 8005d58:	e032      	b.n	8005dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f003 0320 	and.w	r3, r3, #32
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d008      	beq.n	8005d76 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d70:	461a      	mov	r2, r3
 8005d72:	2320      	movs	r3, #32
 8005d74:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f004 ff29 	bl	800abd4 <HAL_PCD_DataOutStageCallback>
 8005d82:	e01d      	b.n	8005dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d114      	bne.n	8005db4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	4413      	add	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	440b      	add	r3, r1
 8005d98:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d108      	bne.n	8005db4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005dac:	461a      	mov	r2, r3
 8005dae:	2100      	movs	r1, #0
 8005db0:	f002 fc9a 	bl	80086e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f004 ff0a 	bl	800abd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3720      	adds	r7, #32
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	4f54300a 	.word	0x4f54300a
 8005dd0:	4f54310a 	.word	0x4f54310a

08005dd4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	333c      	adds	r3, #60	@ 0x3c
 8005dec:	3304      	adds	r3, #4
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4a15      	ldr	r2, [pc, #84]	@ (8005e5c <PCD_EP_OutSetupPacket_int+0x88>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d90e      	bls.n	8005e28 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d009      	beq.n	8005e28 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e20:	461a      	mov	r2, r3
 8005e22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e26:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f004 fec1 	bl	800abb0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4a0a      	ldr	r2, [pc, #40]	@ (8005e5c <PCD_EP_OutSetupPacket_int+0x88>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d90c      	bls.n	8005e50 <PCD_EP_OutSetupPacket_int+0x7c>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	799b      	ldrb	r3, [r3, #6]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d108      	bne.n	8005e50 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6818      	ldr	r0, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e48:	461a      	mov	r2, r3
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	f002 fc4c 	bl	80086e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	4f54300a 	.word	0x4f54300a

08005e60 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	70fb      	strb	r3, [r7, #3]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e76:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005e78:	78fb      	ldrb	r3, [r7, #3]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d107      	bne.n	8005e8e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005e7e:	883b      	ldrh	r3, [r7, #0]
 8005e80:	0419      	lsls	r1, r3, #16
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e8c:	e028      	b.n	8005ee0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e94:	0c1b      	lsrs	r3, r3, #16
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	4413      	add	r3, r2
 8005e9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	73fb      	strb	r3, [r7, #15]
 8005ea0:	e00d      	b.n	8005ebe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	3340      	adds	r3, #64	@ 0x40
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	0c1b      	lsrs	r3, r3, #16
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	73fb      	strb	r3, [r7, #15]
 8005ebe:	7bfa      	ldrb	r2, [r7, #15]
 8005ec0:	78fb      	ldrb	r3, [r7, #3]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d3ec      	bcc.n	8005ea2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005ec8:	883b      	ldrh	r3, [r7, #0]
 8005eca:	0418      	lsls	r0, r3, #16
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6819      	ldr	r1, [r3, #0]
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	4302      	orrs	r2, r0
 8005ed8:	3340      	adds	r3, #64	@ 0x40
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	440b      	add	r3, r1
 8005ede:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	887a      	ldrh	r2, [r7, #2]
 8005f00:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e267      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d075      	beq.n	8006032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f46:	4b88      	ldr	r3, [pc, #544]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 030c 	and.w	r3, r3, #12
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d00c      	beq.n	8005f6c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f52:	4b85      	ldr	r3, [pc, #532]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d112      	bne.n	8005f84 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f5e:	4b82      	ldr	r3, [pc, #520]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f6a:	d10b      	bne.n	8005f84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f6c:	4b7e      	ldr	r3, [pc, #504]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d05b      	beq.n	8006030 <HAL_RCC_OscConfig+0x108>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d157      	bne.n	8006030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e242      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f8c:	d106      	bne.n	8005f9c <HAL_RCC_OscConfig+0x74>
 8005f8e:	4b76      	ldr	r3, [pc, #472]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a75      	ldr	r2, [pc, #468]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 8005f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f98:	6013      	str	r3, [r2, #0]
 8005f9a:	e01d      	b.n	8005fd8 <HAL_RCC_OscConfig+0xb0>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fa4:	d10c      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x98>
 8005fa6:	4b70      	ldr	r3, [pc, #448]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a6f      	ldr	r2, [pc, #444]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 8005fac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	4b6d      	ldr	r3, [pc, #436]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a6c      	ldr	r2, [pc, #432]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 8005fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fbc:	6013      	str	r3, [r2, #0]
 8005fbe:	e00b      	b.n	8005fd8 <HAL_RCC_OscConfig+0xb0>
 8005fc0:	4b69      	ldr	r3, [pc, #420]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a68      	ldr	r2, [pc, #416]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 8005fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	4b66      	ldr	r3, [pc, #408]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a65      	ldr	r2, [pc, #404]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 8005fd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d013      	beq.n	8006008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe0:	f7fc fbe2 	bl	80027a8 <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fe8:	f7fc fbde 	bl	80027a8 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b64      	cmp	r3, #100	@ 0x64
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e207      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0f0      	beq.n	8005fe8 <HAL_RCC_OscConfig+0xc0>
 8006006:	e014      	b.n	8006032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006008:	f7fc fbce 	bl	80027a8 <HAL_GetTick>
 800600c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800600e:	e008      	b.n	8006022 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006010:	f7fc fbca 	bl	80027a8 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	2b64      	cmp	r3, #100	@ 0x64
 800601c:	d901      	bls.n	8006022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e1f3      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006022:	4b51      	ldr	r3, [pc, #324]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1f0      	bne.n	8006010 <HAL_RCC_OscConfig+0xe8>
 800602e:	e000      	b.n	8006032 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d063      	beq.n	8006106 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800603e:	4b4a      	ldr	r3, [pc, #296]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f003 030c 	and.w	r3, r3, #12
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00b      	beq.n	8006062 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800604a:	4b47      	ldr	r3, [pc, #284]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006052:	2b08      	cmp	r3, #8
 8006054:	d11c      	bne.n	8006090 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006056:	4b44      	ldr	r3, [pc, #272]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d116      	bne.n	8006090 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006062:	4b41      	ldr	r3, [pc, #260]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d005      	beq.n	800607a <HAL_RCC_OscConfig+0x152>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d001      	beq.n	800607a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e1c7      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800607a:	4b3b      	ldr	r3, [pc, #236]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	4937      	ldr	r1, [pc, #220]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 800608a:	4313      	orrs	r3, r2
 800608c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800608e:	e03a      	b.n	8006106 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d020      	beq.n	80060da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006098:	4b34      	ldr	r3, [pc, #208]	@ (800616c <HAL_RCC_OscConfig+0x244>)
 800609a:	2201      	movs	r2, #1
 800609c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609e:	f7fc fb83 	bl	80027a8 <HAL_GetTick>
 80060a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060a4:	e008      	b.n	80060b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060a6:	f7fc fb7f 	bl	80027a8 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e1a8      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060b8:	4b2b      	ldr	r3, [pc, #172]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d0f0      	beq.n	80060a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c4:	4b28      	ldr	r3, [pc, #160]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	4925      	ldr	r1, [pc, #148]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	600b      	str	r3, [r1, #0]
 80060d8:	e015      	b.n	8006106 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060da:	4b24      	ldr	r3, [pc, #144]	@ (800616c <HAL_RCC_OscConfig+0x244>)
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e0:	f7fc fb62 	bl	80027a8 <HAL_GetTick>
 80060e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060e8:	f7fc fb5e 	bl	80027a8 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e187      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060fa:	4b1b      	ldr	r3, [pc, #108]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1f0      	bne.n	80060e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0308 	and.w	r3, r3, #8
 800610e:	2b00      	cmp	r3, #0
 8006110:	d036      	beq.n	8006180 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d016      	beq.n	8006148 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800611a:	4b15      	ldr	r3, [pc, #84]	@ (8006170 <HAL_RCC_OscConfig+0x248>)
 800611c:	2201      	movs	r2, #1
 800611e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006120:	f7fc fb42 	bl	80027a8 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006128:	f7fc fb3e 	bl	80027a8 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e167      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800613a:	4b0b      	ldr	r3, [pc, #44]	@ (8006168 <HAL_RCC_OscConfig+0x240>)
 800613c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0f0      	beq.n	8006128 <HAL_RCC_OscConfig+0x200>
 8006146:	e01b      	b.n	8006180 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006148:	4b09      	ldr	r3, [pc, #36]	@ (8006170 <HAL_RCC_OscConfig+0x248>)
 800614a:	2200      	movs	r2, #0
 800614c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800614e:	f7fc fb2b 	bl	80027a8 <HAL_GetTick>
 8006152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006154:	e00e      	b.n	8006174 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006156:	f7fc fb27 	bl	80027a8 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b02      	cmp	r3, #2
 8006162:	d907      	bls.n	8006174 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e150      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
 8006168:	40023800 	.word	0x40023800
 800616c:	42470000 	.word	0x42470000
 8006170:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006174:	4b88      	ldr	r3, [pc, #544]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 8006176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1ea      	bne.n	8006156 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 8097 	beq.w	80062bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800618e:	2300      	movs	r3, #0
 8006190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006192:	4b81      	ldr	r3, [pc, #516]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 8006194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10f      	bne.n	80061be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800619e:	2300      	movs	r3, #0
 80061a0:	60bb      	str	r3, [r7, #8]
 80061a2:	4b7d      	ldr	r3, [pc, #500]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 80061a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a6:	4a7c      	ldr	r2, [pc, #496]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 80061a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80061ae:	4b7a      	ldr	r3, [pc, #488]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 80061b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061b6:	60bb      	str	r3, [r7, #8]
 80061b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061ba:	2301      	movs	r3, #1
 80061bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061be:	4b77      	ldr	r3, [pc, #476]	@ (800639c <HAL_RCC_OscConfig+0x474>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d118      	bne.n	80061fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061ca:	4b74      	ldr	r3, [pc, #464]	@ (800639c <HAL_RCC_OscConfig+0x474>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a73      	ldr	r2, [pc, #460]	@ (800639c <HAL_RCC_OscConfig+0x474>)
 80061d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061d6:	f7fc fae7 	bl	80027a8 <HAL_GetTick>
 80061da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061dc:	e008      	b.n	80061f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061de:	f7fc fae3 	bl	80027a8 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e10c      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061f0:	4b6a      	ldr	r3, [pc, #424]	@ (800639c <HAL_RCC_OscConfig+0x474>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0f0      	beq.n	80061de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d106      	bne.n	8006212 <HAL_RCC_OscConfig+0x2ea>
 8006204:	4b64      	ldr	r3, [pc, #400]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 8006206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006208:	4a63      	ldr	r2, [pc, #396]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 800620a:	f043 0301 	orr.w	r3, r3, #1
 800620e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006210:	e01c      	b.n	800624c <HAL_RCC_OscConfig+0x324>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	2b05      	cmp	r3, #5
 8006218:	d10c      	bne.n	8006234 <HAL_RCC_OscConfig+0x30c>
 800621a:	4b5f      	ldr	r3, [pc, #380]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 800621c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800621e:	4a5e      	ldr	r2, [pc, #376]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 8006220:	f043 0304 	orr.w	r3, r3, #4
 8006224:	6713      	str	r3, [r2, #112]	@ 0x70
 8006226:	4b5c      	ldr	r3, [pc, #368]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 8006228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800622a:	4a5b      	ldr	r2, [pc, #364]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 800622c:	f043 0301 	orr.w	r3, r3, #1
 8006230:	6713      	str	r3, [r2, #112]	@ 0x70
 8006232:	e00b      	b.n	800624c <HAL_RCC_OscConfig+0x324>
 8006234:	4b58      	ldr	r3, [pc, #352]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 8006236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006238:	4a57      	ldr	r2, [pc, #348]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 800623a:	f023 0301 	bic.w	r3, r3, #1
 800623e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006240:	4b55      	ldr	r3, [pc, #340]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 8006242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006244:	4a54      	ldr	r2, [pc, #336]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 8006246:	f023 0304 	bic.w	r3, r3, #4
 800624a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d015      	beq.n	8006280 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006254:	f7fc faa8 	bl	80027a8 <HAL_GetTick>
 8006258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800625a:	e00a      	b.n	8006272 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800625c:	f7fc faa4 	bl	80027a8 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800626a:	4293      	cmp	r3, r2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e0cb      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006272:	4b49      	ldr	r3, [pc, #292]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 8006274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0ee      	beq.n	800625c <HAL_RCC_OscConfig+0x334>
 800627e:	e014      	b.n	80062aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006280:	f7fc fa92 	bl	80027a8 <HAL_GetTick>
 8006284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006286:	e00a      	b.n	800629e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006288:	f7fc fa8e 	bl	80027a8 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006296:	4293      	cmp	r3, r2
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e0b5      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800629e:	4b3e      	ldr	r3, [pc, #248]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 80062a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1ee      	bne.n	8006288 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80062aa:	7dfb      	ldrb	r3, [r7, #23]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d105      	bne.n	80062bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062b0:	4b39      	ldr	r3, [pc, #228]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 80062b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b4:	4a38      	ldr	r2, [pc, #224]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 80062b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 80a1 	beq.w	8006408 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062c6:	4b34      	ldr	r3, [pc, #208]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 030c 	and.w	r3, r3, #12
 80062ce:	2b08      	cmp	r3, #8
 80062d0:	d05c      	beq.n	800638c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d141      	bne.n	800635e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062da:	4b31      	ldr	r3, [pc, #196]	@ (80063a0 <HAL_RCC_OscConfig+0x478>)
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e0:	f7fc fa62 	bl	80027a8 <HAL_GetTick>
 80062e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062e6:	e008      	b.n	80062fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062e8:	f7fc fa5e 	bl	80027a8 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e087      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062fa:	4b27      	ldr	r3, [pc, #156]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1f0      	bne.n	80062e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69da      	ldr	r2, [r3, #28]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006314:	019b      	lsls	r3, r3, #6
 8006316:	431a      	orrs	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800631c:	085b      	lsrs	r3, r3, #1
 800631e:	3b01      	subs	r3, #1
 8006320:	041b      	lsls	r3, r3, #16
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006328:	061b      	lsls	r3, r3, #24
 800632a:	491b      	ldr	r1, [pc, #108]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 800632c:	4313      	orrs	r3, r2
 800632e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006330:	4b1b      	ldr	r3, [pc, #108]	@ (80063a0 <HAL_RCC_OscConfig+0x478>)
 8006332:	2201      	movs	r2, #1
 8006334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006336:	f7fc fa37 	bl	80027a8 <HAL_GetTick>
 800633a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800633c:	e008      	b.n	8006350 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800633e:	f7fc fa33 	bl	80027a8 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e05c      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006350:	4b11      	ldr	r3, [pc, #68]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d0f0      	beq.n	800633e <HAL_RCC_OscConfig+0x416>
 800635c:	e054      	b.n	8006408 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800635e:	4b10      	ldr	r3, [pc, #64]	@ (80063a0 <HAL_RCC_OscConfig+0x478>)
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006364:	f7fc fa20 	bl	80027a8 <HAL_GetTick>
 8006368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800636c:	f7fc fa1c 	bl	80027a8 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e045      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800637e:	4b06      	ldr	r3, [pc, #24]	@ (8006398 <HAL_RCC_OscConfig+0x470>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1f0      	bne.n	800636c <HAL_RCC_OscConfig+0x444>
 800638a:	e03d      	b.n	8006408 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d107      	bne.n	80063a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e038      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
 8006398:	40023800 	.word	0x40023800
 800639c:	40007000 	.word	0x40007000
 80063a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006414 <HAL_RCC_OscConfig+0x4ec>)
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d028      	beq.n	8006404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063bc:	429a      	cmp	r2, r3
 80063be:	d121      	bne.n	8006404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d11a      	bne.n	8006404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80063d4:	4013      	ands	r3, r2
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80063da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063dc:	4293      	cmp	r3, r2
 80063de:	d111      	bne.n	8006404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ea:	085b      	lsrs	r3, r3, #1
 80063ec:	3b01      	subs	r3, #1
 80063ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d107      	bne.n	8006404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006400:	429a      	cmp	r2, r3
 8006402:	d001      	beq.n	8006408 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e000      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	40023800 	.word	0x40023800

08006418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e0cc      	b.n	80065c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800642c:	4b68      	ldr	r3, [pc, #416]	@ (80065d0 <HAL_RCC_ClockConfig+0x1b8>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0307 	and.w	r3, r3, #7
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d90c      	bls.n	8006454 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800643a:	4b65      	ldr	r3, [pc, #404]	@ (80065d0 <HAL_RCC_ClockConfig+0x1b8>)
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006442:	4b63      	ldr	r3, [pc, #396]	@ (80065d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	429a      	cmp	r2, r3
 800644e:	d001      	beq.n	8006454 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e0b8      	b.n	80065c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d020      	beq.n	80064a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b00      	cmp	r3, #0
 800646a:	d005      	beq.n	8006478 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800646c:	4b59      	ldr	r3, [pc, #356]	@ (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	4a58      	ldr	r2, [pc, #352]	@ (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006472:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006476:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0308 	and.w	r3, r3, #8
 8006480:	2b00      	cmp	r3, #0
 8006482:	d005      	beq.n	8006490 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006484:	4b53      	ldr	r3, [pc, #332]	@ (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	4a52      	ldr	r2, [pc, #328]	@ (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 800648a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800648e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006490:	4b50      	ldr	r3, [pc, #320]	@ (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	494d      	ldr	r1, [pc, #308]	@ (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d044      	beq.n	8006538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d107      	bne.n	80064c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064b6:	4b47      	ldr	r3, [pc, #284]	@ (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d119      	bne.n	80064f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e07f      	b.n	80065c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d003      	beq.n	80064d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d107      	bne.n	80064e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064d6:	4b3f      	ldr	r3, [pc, #252]	@ (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d109      	bne.n	80064f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e06f      	b.n	80065c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064e6:	4b3b      	ldr	r3, [pc, #236]	@ (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e067      	b.n	80065c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064f6:	4b37      	ldr	r3, [pc, #220]	@ (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f023 0203 	bic.w	r2, r3, #3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	4934      	ldr	r1, [pc, #208]	@ (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006504:	4313      	orrs	r3, r2
 8006506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006508:	f7fc f94e 	bl	80027a8 <HAL_GetTick>
 800650c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800650e:	e00a      	b.n	8006526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006510:	f7fc f94a 	bl	80027a8 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800651e:	4293      	cmp	r3, r2
 8006520:	d901      	bls.n	8006526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e04f      	b.n	80065c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006526:	4b2b      	ldr	r3, [pc, #172]	@ (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f003 020c 	and.w	r2, r3, #12
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	429a      	cmp	r2, r3
 8006536:	d1eb      	bne.n	8006510 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006538:	4b25      	ldr	r3, [pc, #148]	@ (80065d0 <HAL_RCC_ClockConfig+0x1b8>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0307 	and.w	r3, r3, #7
 8006540:	683a      	ldr	r2, [r7, #0]
 8006542:	429a      	cmp	r2, r3
 8006544:	d20c      	bcs.n	8006560 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006546:	4b22      	ldr	r3, [pc, #136]	@ (80065d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	b2d2      	uxtb	r2, r2
 800654c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800654e:	4b20      	ldr	r3, [pc, #128]	@ (80065d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	429a      	cmp	r2, r3
 800655a:	d001      	beq.n	8006560 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e032      	b.n	80065c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	d008      	beq.n	800657e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800656c:	4b19      	ldr	r3, [pc, #100]	@ (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	4916      	ldr	r1, [pc, #88]	@ (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 800657a:	4313      	orrs	r3, r2
 800657c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0308 	and.w	r3, r3, #8
 8006586:	2b00      	cmp	r3, #0
 8006588:	d009      	beq.n	800659e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800658a:	4b12      	ldr	r3, [pc, #72]	@ (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	490e      	ldr	r1, [pc, #56]	@ (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 800659a:	4313      	orrs	r3, r2
 800659c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800659e:	f000 f821 	bl	80065e4 <HAL_RCC_GetSysClockFreq>
 80065a2:	4602      	mov	r2, r0
 80065a4:	4b0b      	ldr	r3, [pc, #44]	@ (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	091b      	lsrs	r3, r3, #4
 80065aa:	f003 030f 	and.w	r3, r3, #15
 80065ae:	490a      	ldr	r1, [pc, #40]	@ (80065d8 <HAL_RCC_ClockConfig+0x1c0>)
 80065b0:	5ccb      	ldrb	r3, [r1, r3]
 80065b2:	fa22 f303 	lsr.w	r3, r2, r3
 80065b6:	4a09      	ldr	r2, [pc, #36]	@ (80065dc <HAL_RCC_ClockConfig+0x1c4>)
 80065b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80065ba:	4b09      	ldr	r3, [pc, #36]	@ (80065e0 <HAL_RCC_ClockConfig+0x1c8>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fc f8ae 	bl	8002720 <HAL_InitTick>

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	40023c00 	.word	0x40023c00
 80065d4:	40023800 	.word	0x40023800
 80065d8:	0800e758 	.word	0x0800e758
 80065dc:	20000004 	.word	0x20000004
 80065e0:	20000008 	.word	0x20000008

080065e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065e8:	b094      	sub	sp, #80	@ 0x50
 80065ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065fc:	4b79      	ldr	r3, [pc, #484]	@ (80067e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f003 030c 	and.w	r3, r3, #12
 8006604:	2b08      	cmp	r3, #8
 8006606:	d00d      	beq.n	8006624 <HAL_RCC_GetSysClockFreq+0x40>
 8006608:	2b08      	cmp	r3, #8
 800660a:	f200 80e1 	bhi.w	80067d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <HAL_RCC_GetSysClockFreq+0x34>
 8006612:	2b04      	cmp	r3, #4
 8006614:	d003      	beq.n	800661e <HAL_RCC_GetSysClockFreq+0x3a>
 8006616:	e0db      	b.n	80067d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006618:	4b73      	ldr	r3, [pc, #460]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800661a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800661c:	e0db      	b.n	80067d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800661e:	4b73      	ldr	r3, [pc, #460]	@ (80067ec <HAL_RCC_GetSysClockFreq+0x208>)
 8006620:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006622:	e0d8      	b.n	80067d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006624:	4b6f      	ldr	r3, [pc, #444]	@ (80067e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800662c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800662e:	4b6d      	ldr	r3, [pc, #436]	@ (80067e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d063      	beq.n	8006702 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800663a:	4b6a      	ldr	r3, [pc, #424]	@ (80067e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	099b      	lsrs	r3, r3, #6
 8006640:	2200      	movs	r2, #0
 8006642:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006644:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800664c:	633b      	str	r3, [r7, #48]	@ 0x30
 800664e:	2300      	movs	r3, #0
 8006650:	637b      	str	r3, [r7, #52]	@ 0x34
 8006652:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006656:	4622      	mov	r2, r4
 8006658:	462b      	mov	r3, r5
 800665a:	f04f 0000 	mov.w	r0, #0
 800665e:	f04f 0100 	mov.w	r1, #0
 8006662:	0159      	lsls	r1, r3, #5
 8006664:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006668:	0150      	lsls	r0, r2, #5
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	4621      	mov	r1, r4
 8006670:	1a51      	subs	r1, r2, r1
 8006672:	6139      	str	r1, [r7, #16]
 8006674:	4629      	mov	r1, r5
 8006676:	eb63 0301 	sbc.w	r3, r3, r1
 800667a:	617b      	str	r3, [r7, #20]
 800667c:	f04f 0200 	mov.w	r2, #0
 8006680:	f04f 0300 	mov.w	r3, #0
 8006684:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006688:	4659      	mov	r1, fp
 800668a:	018b      	lsls	r3, r1, #6
 800668c:	4651      	mov	r1, sl
 800668e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006692:	4651      	mov	r1, sl
 8006694:	018a      	lsls	r2, r1, #6
 8006696:	4651      	mov	r1, sl
 8006698:	ebb2 0801 	subs.w	r8, r2, r1
 800669c:	4659      	mov	r1, fp
 800669e:	eb63 0901 	sbc.w	r9, r3, r1
 80066a2:	f04f 0200 	mov.w	r2, #0
 80066a6:	f04f 0300 	mov.w	r3, #0
 80066aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066b6:	4690      	mov	r8, r2
 80066b8:	4699      	mov	r9, r3
 80066ba:	4623      	mov	r3, r4
 80066bc:	eb18 0303 	adds.w	r3, r8, r3
 80066c0:	60bb      	str	r3, [r7, #8]
 80066c2:	462b      	mov	r3, r5
 80066c4:	eb49 0303 	adc.w	r3, r9, r3
 80066c8:	60fb      	str	r3, [r7, #12]
 80066ca:	f04f 0200 	mov.w	r2, #0
 80066ce:	f04f 0300 	mov.w	r3, #0
 80066d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80066d6:	4629      	mov	r1, r5
 80066d8:	024b      	lsls	r3, r1, #9
 80066da:	4621      	mov	r1, r4
 80066dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80066e0:	4621      	mov	r1, r4
 80066e2:	024a      	lsls	r2, r1, #9
 80066e4:	4610      	mov	r0, r2
 80066e6:	4619      	mov	r1, r3
 80066e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ea:	2200      	movs	r2, #0
 80066ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066f4:	f7fa faa8 	bl	8000c48 <__aeabi_uldivmod>
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	4613      	mov	r3, r2
 80066fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006700:	e058      	b.n	80067b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006702:	4b38      	ldr	r3, [pc, #224]	@ (80067e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	099b      	lsrs	r3, r3, #6
 8006708:	2200      	movs	r2, #0
 800670a:	4618      	mov	r0, r3
 800670c:	4611      	mov	r1, r2
 800670e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006712:	623b      	str	r3, [r7, #32]
 8006714:	2300      	movs	r3, #0
 8006716:	627b      	str	r3, [r7, #36]	@ 0x24
 8006718:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800671c:	4642      	mov	r2, r8
 800671e:	464b      	mov	r3, r9
 8006720:	f04f 0000 	mov.w	r0, #0
 8006724:	f04f 0100 	mov.w	r1, #0
 8006728:	0159      	lsls	r1, r3, #5
 800672a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800672e:	0150      	lsls	r0, r2, #5
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4641      	mov	r1, r8
 8006736:	ebb2 0a01 	subs.w	sl, r2, r1
 800673a:	4649      	mov	r1, r9
 800673c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006740:	f04f 0200 	mov.w	r2, #0
 8006744:	f04f 0300 	mov.w	r3, #0
 8006748:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800674c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006750:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006754:	ebb2 040a 	subs.w	r4, r2, sl
 8006758:	eb63 050b 	sbc.w	r5, r3, fp
 800675c:	f04f 0200 	mov.w	r2, #0
 8006760:	f04f 0300 	mov.w	r3, #0
 8006764:	00eb      	lsls	r3, r5, #3
 8006766:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800676a:	00e2      	lsls	r2, r4, #3
 800676c:	4614      	mov	r4, r2
 800676e:	461d      	mov	r5, r3
 8006770:	4643      	mov	r3, r8
 8006772:	18e3      	adds	r3, r4, r3
 8006774:	603b      	str	r3, [r7, #0]
 8006776:	464b      	mov	r3, r9
 8006778:	eb45 0303 	adc.w	r3, r5, r3
 800677c:	607b      	str	r3, [r7, #4]
 800677e:	f04f 0200 	mov.w	r2, #0
 8006782:	f04f 0300 	mov.w	r3, #0
 8006786:	e9d7 4500 	ldrd	r4, r5, [r7]
 800678a:	4629      	mov	r1, r5
 800678c:	028b      	lsls	r3, r1, #10
 800678e:	4621      	mov	r1, r4
 8006790:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006794:	4621      	mov	r1, r4
 8006796:	028a      	lsls	r2, r1, #10
 8006798:	4610      	mov	r0, r2
 800679a:	4619      	mov	r1, r3
 800679c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800679e:	2200      	movs	r2, #0
 80067a0:	61bb      	str	r3, [r7, #24]
 80067a2:	61fa      	str	r2, [r7, #28]
 80067a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067a8:	f7fa fa4e 	bl	8000c48 <__aeabi_uldivmod>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4613      	mov	r3, r2
 80067b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80067b4:	4b0b      	ldr	r3, [pc, #44]	@ (80067e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	0c1b      	lsrs	r3, r3, #16
 80067ba:	f003 0303 	and.w	r3, r3, #3
 80067be:	3301      	adds	r3, #1
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80067c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067ce:	e002      	b.n	80067d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067d0:	4b05      	ldr	r3, [pc, #20]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80067d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3750      	adds	r7, #80	@ 0x50
 80067dc:	46bd      	mov	sp, r7
 80067de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067e2:	bf00      	nop
 80067e4:	40023800 	.word	0x40023800
 80067e8:	00f42400 	.word	0x00f42400
 80067ec:	007a1200 	.word	0x007a1200

080067f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067f0:	b480      	push	{r7}
 80067f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067f4:	4b03      	ldr	r3, [pc, #12]	@ (8006804 <HAL_RCC_GetHCLKFreq+0x14>)
 80067f6:	681b      	ldr	r3, [r3, #0]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	20000004 	.word	0x20000004

08006808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800680c:	f7ff fff0 	bl	80067f0 <HAL_RCC_GetHCLKFreq>
 8006810:	4602      	mov	r2, r0
 8006812:	4b05      	ldr	r3, [pc, #20]	@ (8006828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	0a9b      	lsrs	r3, r3, #10
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	4903      	ldr	r1, [pc, #12]	@ (800682c <HAL_RCC_GetPCLK1Freq+0x24>)
 800681e:	5ccb      	ldrb	r3, [r1, r3]
 8006820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006824:	4618      	mov	r0, r3
 8006826:	bd80      	pop	{r7, pc}
 8006828:	40023800 	.word	0x40023800
 800682c:	0800e768 	.word	0x0800e768

08006830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006834:	f7ff ffdc 	bl	80067f0 <HAL_RCC_GetHCLKFreq>
 8006838:	4602      	mov	r2, r0
 800683a:	4b05      	ldr	r3, [pc, #20]	@ (8006850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	0b5b      	lsrs	r3, r3, #13
 8006840:	f003 0307 	and.w	r3, r3, #7
 8006844:	4903      	ldr	r1, [pc, #12]	@ (8006854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006846:	5ccb      	ldrb	r3, [r1, r3]
 8006848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800684c:	4618      	mov	r0, r3
 800684e:	bd80      	pop	{r7, pc}
 8006850:	40023800 	.word	0x40023800
 8006854:	0800e768 	.word	0x0800e768

08006858 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006860:	2300      	movs	r3, #0
 8006862:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006864:	2300      	movs	r3, #0
 8006866:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d105      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800687c:	2b00      	cmp	r3, #0
 800687e:	d035      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006880:	4b62      	ldr	r3, [pc, #392]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006886:	f7fb ff8f 	bl	80027a8 <HAL_GetTick>
 800688a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800688c:	e008      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800688e:	f7fb ff8b 	bl	80027a8 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b02      	cmp	r3, #2
 800689a:	d901      	bls.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e0b0      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068a0:	4b5b      	ldr	r3, [pc, #364]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1f0      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	019a      	lsls	r2, r3, #6
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	071b      	lsls	r3, r3, #28
 80068b8:	4955      	ldr	r1, [pc, #340]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80068c0:	4b52      	ldr	r3, [pc, #328]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80068c2:	2201      	movs	r2, #1
 80068c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068c6:	f7fb ff6f 	bl	80027a8 <HAL_GetTick>
 80068ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068cc:	e008      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80068ce:	f7fb ff6b 	bl	80027a8 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d901      	bls.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e090      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068e0:	4b4b      	ldr	r3, [pc, #300]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d0f0      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 8083 	beq.w	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	4b44      	ldr	r3, [pc, #272]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006902:	4a43      	ldr	r2, [pc, #268]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006908:	6413      	str	r3, [r2, #64]	@ 0x40
 800690a:	4b41      	ldr	r3, [pc, #260]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800690c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006916:	4b3f      	ldr	r3, [pc, #252]	@ (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a3e      	ldr	r2, [pc, #248]	@ (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800691c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006920:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006922:	f7fb ff41 	bl	80027a8 <HAL_GetTick>
 8006926:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006928:	e008      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800692a:	f7fb ff3d 	bl	80027a8 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	2b02      	cmp	r3, #2
 8006936:	d901      	bls.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e062      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800693c:	4b35      	ldr	r3, [pc, #212]	@ (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0f0      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006948:	4b31      	ldr	r3, [pc, #196]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800694a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800694c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006950:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d02f      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	429a      	cmp	r2, r3
 8006964:	d028      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006966:	4b2a      	ldr	r3, [pc, #168]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800696a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800696e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006970:	4b29      	ldr	r3, [pc, #164]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006972:	2201      	movs	r2, #1
 8006974:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006976:	4b28      	ldr	r3, [pc, #160]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800697c:	4a24      	ldr	r2, [pc, #144]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006982:	4b23      	ldr	r3, [pc, #140]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b01      	cmp	r3, #1
 800698c:	d114      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800698e:	f7fb ff0b 	bl	80027a8 <HAL_GetTick>
 8006992:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006994:	e00a      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006996:	f7fb ff07 	bl	80027a8 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d901      	bls.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e02a      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069ac:	4b18      	ldr	r3, [pc, #96]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d0ee      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069c4:	d10d      	bne.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80069c6:	4b12      	ldr	r3, [pc, #72]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80069d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069da:	490d      	ldr	r1, [pc, #52]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	608b      	str	r3, [r1, #8]
 80069e0:	e005      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x196>
 80069e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069e8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80069ec:	6093      	str	r3, [r2, #8]
 80069ee:	4b08      	ldr	r3, [pc, #32]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069f0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069fa:	4905      	ldr	r1, [pc, #20]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3718      	adds	r7, #24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	42470068 	.word	0x42470068
 8006a10:	40023800 	.word	0x40023800
 8006a14:	40007000 	.word	0x40007000
 8006a18:	42470e40 	.word	0x42470e40

08006a1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d13f      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006a3a:	4b24      	ldr	r3, [pc, #144]	@ (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d006      	beq.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a50:	d12f      	bne.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006a52:	4b1f      	ldr	r3, [pc, #124]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006a54:	617b      	str	r3, [r7, #20]
          break;
 8006a56:	e02f      	b.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006a58:	4b1c      	ldr	r3, [pc, #112]	@ (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a64:	d108      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a66:	4b19      	ldr	r3, [pc, #100]	@ (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a6e:	4a19      	ldr	r2, [pc, #100]	@ (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a74:	613b      	str	r3, [r7, #16]
 8006a76:	e007      	b.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a78:	4b14      	ldr	r3, [pc, #80]	@ (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a80:	4a15      	ldr	r2, [pc, #84]	@ (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a86:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006a88:	4b10      	ldr	r3, [pc, #64]	@ (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a8e:	099b      	lsrs	r3, r3, #6
 8006a90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	fb02 f303 	mul.w	r3, r2, r3
 8006a9a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006aa2:	0f1b      	lsrs	r3, r3, #28
 8006aa4:	f003 0307 	and.w	r3, r3, #7
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aae:	617b      	str	r3, [r7, #20]
          break;
 8006ab0:	e002      	b.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	617b      	str	r3, [r7, #20]
          break;
 8006ab6:	bf00      	nop
        }
      }
      break;
 8006ab8:	e000      	b.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006aba:	bf00      	nop
    }
  }
  return frequency;
 8006abc:	697b      	ldr	r3, [r7, #20]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	40023800 	.word	0x40023800
 8006ad0:	00bb8000 	.word	0x00bb8000
 8006ad4:	007a1200 	.word	0x007a1200
 8006ad8:	00f42400 	.word	0x00f42400

08006adc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e07b      	b.n	8006be6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d108      	bne.n	8006b08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006afe:	d009      	beq.n	8006b14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	61da      	str	r2, [r3, #28]
 8006b06:	e005      	b.n	8006b14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d106      	bne.n	8006b34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7fb fbfa 	bl	8002328 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2202      	movs	r2, #2
 8006b38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b66:	431a      	orrs	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	431a      	orrs	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b84:	431a      	orrs	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b98:	ea42 0103 	orr.w	r1, r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	0c1b      	lsrs	r3, r3, #16
 8006bb2:	f003 0104 	and.w	r1, r3, #4
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bba:	f003 0210 	and.w	r2, r3, #16
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	69da      	ldr	r2, [r3, #28]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b082      	sub	sp, #8
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e042      	b.n	8006c86 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d106      	bne.n	8006c1a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7fb fbcf 	bl	80023b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2224      	movs	r2, #36	@ 0x24
 8006c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c30:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f82c 	bl	8006c90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	691a      	ldr	r2, [r3, #16]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c46:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	695a      	ldr	r2, [r3, #20]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c56:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68da      	ldr	r2, [r3, #12]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c66:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
	...

08006c90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c94:	b0c0      	sub	sp, #256	@ 0x100
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cac:	68d9      	ldr	r1, [r3, #12]
 8006cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	ea40 0301 	orr.w	r3, r0, r1
 8006cb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cbe:	689a      	ldr	r2, [r3, #8]
 8006cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ce8:	f021 010c 	bic.w	r1, r1, #12
 8006cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006cf6:	430b      	orrs	r3, r1
 8006cf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d0a:	6999      	ldr	r1, [r3, #24]
 8006d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	ea40 0301 	orr.w	r3, r0, r1
 8006d16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	4b8f      	ldr	r3, [pc, #572]	@ (8006f5c <UART_SetConfig+0x2cc>)
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d005      	beq.n	8006d30 <UART_SetConfig+0xa0>
 8006d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	4b8d      	ldr	r3, [pc, #564]	@ (8006f60 <UART_SetConfig+0x2d0>)
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d104      	bne.n	8006d3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d30:	f7ff fd7e 	bl	8006830 <HAL_RCC_GetPCLK2Freq>
 8006d34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006d38:	e003      	b.n	8006d42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d3a:	f7ff fd65 	bl	8006808 <HAL_RCC_GetPCLK1Freq>
 8006d3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d4c:	f040 810c 	bne.w	8006f68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d54:	2200      	movs	r2, #0
 8006d56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006d5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006d62:	4622      	mov	r2, r4
 8006d64:	462b      	mov	r3, r5
 8006d66:	1891      	adds	r1, r2, r2
 8006d68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006d6a:	415b      	adcs	r3, r3
 8006d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006d72:	4621      	mov	r1, r4
 8006d74:	eb12 0801 	adds.w	r8, r2, r1
 8006d78:	4629      	mov	r1, r5
 8006d7a:	eb43 0901 	adc.w	r9, r3, r1
 8006d7e:	f04f 0200 	mov.w	r2, #0
 8006d82:	f04f 0300 	mov.w	r3, #0
 8006d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d92:	4690      	mov	r8, r2
 8006d94:	4699      	mov	r9, r3
 8006d96:	4623      	mov	r3, r4
 8006d98:	eb18 0303 	adds.w	r3, r8, r3
 8006d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006da0:	462b      	mov	r3, r5
 8006da2:	eb49 0303 	adc.w	r3, r9, r3
 8006da6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006db6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006dba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	18db      	adds	r3, r3, r3
 8006dc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	eb42 0303 	adc.w	r3, r2, r3
 8006dca:	657b      	str	r3, [r7, #84]	@ 0x54
 8006dcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006dd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006dd4:	f7f9 ff38 	bl	8000c48 <__aeabi_uldivmod>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	4b61      	ldr	r3, [pc, #388]	@ (8006f64 <UART_SetConfig+0x2d4>)
 8006dde:	fba3 2302 	umull	r2, r3, r3, r2
 8006de2:	095b      	lsrs	r3, r3, #5
 8006de4:	011c      	lsls	r4, r3, #4
 8006de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006df0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006df4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006df8:	4642      	mov	r2, r8
 8006dfa:	464b      	mov	r3, r9
 8006dfc:	1891      	adds	r1, r2, r2
 8006dfe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006e00:	415b      	adcs	r3, r3
 8006e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006e08:	4641      	mov	r1, r8
 8006e0a:	eb12 0a01 	adds.w	sl, r2, r1
 8006e0e:	4649      	mov	r1, r9
 8006e10:	eb43 0b01 	adc.w	fp, r3, r1
 8006e14:	f04f 0200 	mov.w	r2, #0
 8006e18:	f04f 0300 	mov.w	r3, #0
 8006e1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e28:	4692      	mov	sl, r2
 8006e2a:	469b      	mov	fp, r3
 8006e2c:	4643      	mov	r3, r8
 8006e2e:	eb1a 0303 	adds.w	r3, sl, r3
 8006e32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e36:	464b      	mov	r3, r9
 8006e38:	eb4b 0303 	adc.w	r3, fp, r3
 8006e3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006e50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e54:	460b      	mov	r3, r1
 8006e56:	18db      	adds	r3, r3, r3
 8006e58:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	eb42 0303 	adc.w	r3, r2, r3
 8006e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006e66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006e6a:	f7f9 feed 	bl	8000c48 <__aeabi_uldivmod>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	4611      	mov	r1, r2
 8006e74:	4b3b      	ldr	r3, [pc, #236]	@ (8006f64 <UART_SetConfig+0x2d4>)
 8006e76:	fba3 2301 	umull	r2, r3, r3, r1
 8006e7a:	095b      	lsrs	r3, r3, #5
 8006e7c:	2264      	movs	r2, #100	@ 0x64
 8006e7e:	fb02 f303 	mul.w	r3, r2, r3
 8006e82:	1acb      	subs	r3, r1, r3
 8006e84:	00db      	lsls	r3, r3, #3
 8006e86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006e8a:	4b36      	ldr	r3, [pc, #216]	@ (8006f64 <UART_SetConfig+0x2d4>)
 8006e8c:	fba3 2302 	umull	r2, r3, r3, r2
 8006e90:	095b      	lsrs	r3, r3, #5
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006e98:	441c      	add	r4, r3
 8006e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ea4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006ea8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006eac:	4642      	mov	r2, r8
 8006eae:	464b      	mov	r3, r9
 8006eb0:	1891      	adds	r1, r2, r2
 8006eb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006eb4:	415b      	adcs	r3, r3
 8006eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006ebc:	4641      	mov	r1, r8
 8006ebe:	1851      	adds	r1, r2, r1
 8006ec0:	6339      	str	r1, [r7, #48]	@ 0x30
 8006ec2:	4649      	mov	r1, r9
 8006ec4:	414b      	adcs	r3, r1
 8006ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ec8:	f04f 0200 	mov.w	r2, #0
 8006ecc:	f04f 0300 	mov.w	r3, #0
 8006ed0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006ed4:	4659      	mov	r1, fp
 8006ed6:	00cb      	lsls	r3, r1, #3
 8006ed8:	4651      	mov	r1, sl
 8006eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ede:	4651      	mov	r1, sl
 8006ee0:	00ca      	lsls	r2, r1, #3
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	4642      	mov	r2, r8
 8006eea:	189b      	adds	r3, r3, r2
 8006eec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ef0:	464b      	mov	r3, r9
 8006ef2:	460a      	mov	r2, r1
 8006ef4:	eb42 0303 	adc.w	r3, r2, r3
 8006ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006f0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006f10:	460b      	mov	r3, r1
 8006f12:	18db      	adds	r3, r3, r3
 8006f14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f16:	4613      	mov	r3, r2
 8006f18:	eb42 0303 	adc.w	r3, r2, r3
 8006f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006f26:	f7f9 fe8f 	bl	8000c48 <__aeabi_uldivmod>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f64 <UART_SetConfig+0x2d4>)
 8006f30:	fba3 1302 	umull	r1, r3, r3, r2
 8006f34:	095b      	lsrs	r3, r3, #5
 8006f36:	2164      	movs	r1, #100	@ 0x64
 8006f38:	fb01 f303 	mul.w	r3, r1, r3
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	00db      	lsls	r3, r3, #3
 8006f40:	3332      	adds	r3, #50	@ 0x32
 8006f42:	4a08      	ldr	r2, [pc, #32]	@ (8006f64 <UART_SetConfig+0x2d4>)
 8006f44:	fba2 2303 	umull	r2, r3, r2, r3
 8006f48:	095b      	lsrs	r3, r3, #5
 8006f4a:	f003 0207 	and.w	r2, r3, #7
 8006f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4422      	add	r2, r4
 8006f56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f58:	e106      	b.n	8007168 <UART_SetConfig+0x4d8>
 8006f5a:	bf00      	nop
 8006f5c:	40011000 	.word	0x40011000
 8006f60:	40011400 	.word	0x40011400
 8006f64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006f72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006f76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006f7a:	4642      	mov	r2, r8
 8006f7c:	464b      	mov	r3, r9
 8006f7e:	1891      	adds	r1, r2, r2
 8006f80:	6239      	str	r1, [r7, #32]
 8006f82:	415b      	adcs	r3, r3
 8006f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f8a:	4641      	mov	r1, r8
 8006f8c:	1854      	adds	r4, r2, r1
 8006f8e:	4649      	mov	r1, r9
 8006f90:	eb43 0501 	adc.w	r5, r3, r1
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	00eb      	lsls	r3, r5, #3
 8006f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fa2:	00e2      	lsls	r2, r4, #3
 8006fa4:	4614      	mov	r4, r2
 8006fa6:	461d      	mov	r5, r3
 8006fa8:	4643      	mov	r3, r8
 8006faa:	18e3      	adds	r3, r4, r3
 8006fac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006fb0:	464b      	mov	r3, r9
 8006fb2:	eb45 0303 	adc.w	r3, r5, r3
 8006fb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006fc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006fca:	f04f 0200 	mov.w	r2, #0
 8006fce:	f04f 0300 	mov.w	r3, #0
 8006fd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	008b      	lsls	r3, r1, #2
 8006fda:	4621      	mov	r1, r4
 8006fdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fe0:	4621      	mov	r1, r4
 8006fe2:	008a      	lsls	r2, r1, #2
 8006fe4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006fe8:	f7f9 fe2e 	bl	8000c48 <__aeabi_uldivmod>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4b60      	ldr	r3, [pc, #384]	@ (8007174 <UART_SetConfig+0x4e4>)
 8006ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ff6:	095b      	lsrs	r3, r3, #5
 8006ff8:	011c      	lsls	r4, r3, #4
 8006ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ffe:	2200      	movs	r2, #0
 8007000:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007004:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007008:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800700c:	4642      	mov	r2, r8
 800700e:	464b      	mov	r3, r9
 8007010:	1891      	adds	r1, r2, r2
 8007012:	61b9      	str	r1, [r7, #24]
 8007014:	415b      	adcs	r3, r3
 8007016:	61fb      	str	r3, [r7, #28]
 8007018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800701c:	4641      	mov	r1, r8
 800701e:	1851      	adds	r1, r2, r1
 8007020:	6139      	str	r1, [r7, #16]
 8007022:	4649      	mov	r1, r9
 8007024:	414b      	adcs	r3, r1
 8007026:	617b      	str	r3, [r7, #20]
 8007028:	f04f 0200 	mov.w	r2, #0
 800702c:	f04f 0300 	mov.w	r3, #0
 8007030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007034:	4659      	mov	r1, fp
 8007036:	00cb      	lsls	r3, r1, #3
 8007038:	4651      	mov	r1, sl
 800703a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800703e:	4651      	mov	r1, sl
 8007040:	00ca      	lsls	r2, r1, #3
 8007042:	4610      	mov	r0, r2
 8007044:	4619      	mov	r1, r3
 8007046:	4603      	mov	r3, r0
 8007048:	4642      	mov	r2, r8
 800704a:	189b      	adds	r3, r3, r2
 800704c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007050:	464b      	mov	r3, r9
 8007052:	460a      	mov	r2, r1
 8007054:	eb42 0303 	adc.w	r3, r2, r3
 8007058:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800705c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007066:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007068:	f04f 0200 	mov.w	r2, #0
 800706c:	f04f 0300 	mov.w	r3, #0
 8007070:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007074:	4649      	mov	r1, r9
 8007076:	008b      	lsls	r3, r1, #2
 8007078:	4641      	mov	r1, r8
 800707a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800707e:	4641      	mov	r1, r8
 8007080:	008a      	lsls	r2, r1, #2
 8007082:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007086:	f7f9 fddf 	bl	8000c48 <__aeabi_uldivmod>
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	4611      	mov	r1, r2
 8007090:	4b38      	ldr	r3, [pc, #224]	@ (8007174 <UART_SetConfig+0x4e4>)
 8007092:	fba3 2301 	umull	r2, r3, r3, r1
 8007096:	095b      	lsrs	r3, r3, #5
 8007098:	2264      	movs	r2, #100	@ 0x64
 800709a:	fb02 f303 	mul.w	r3, r2, r3
 800709e:	1acb      	subs	r3, r1, r3
 80070a0:	011b      	lsls	r3, r3, #4
 80070a2:	3332      	adds	r3, #50	@ 0x32
 80070a4:	4a33      	ldr	r2, [pc, #204]	@ (8007174 <UART_SetConfig+0x4e4>)
 80070a6:	fba2 2303 	umull	r2, r3, r2, r3
 80070aa:	095b      	lsrs	r3, r3, #5
 80070ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070b0:	441c      	add	r4, r3
 80070b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070b6:	2200      	movs	r2, #0
 80070b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80070ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80070bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80070c0:	4642      	mov	r2, r8
 80070c2:	464b      	mov	r3, r9
 80070c4:	1891      	adds	r1, r2, r2
 80070c6:	60b9      	str	r1, [r7, #8]
 80070c8:	415b      	adcs	r3, r3
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070d0:	4641      	mov	r1, r8
 80070d2:	1851      	adds	r1, r2, r1
 80070d4:	6039      	str	r1, [r7, #0]
 80070d6:	4649      	mov	r1, r9
 80070d8:	414b      	adcs	r3, r1
 80070da:	607b      	str	r3, [r7, #4]
 80070dc:	f04f 0200 	mov.w	r2, #0
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070e8:	4659      	mov	r1, fp
 80070ea:	00cb      	lsls	r3, r1, #3
 80070ec:	4651      	mov	r1, sl
 80070ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070f2:	4651      	mov	r1, sl
 80070f4:	00ca      	lsls	r2, r1, #3
 80070f6:	4610      	mov	r0, r2
 80070f8:	4619      	mov	r1, r3
 80070fa:	4603      	mov	r3, r0
 80070fc:	4642      	mov	r2, r8
 80070fe:	189b      	adds	r3, r3, r2
 8007100:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007102:	464b      	mov	r3, r9
 8007104:	460a      	mov	r2, r1
 8007106:	eb42 0303 	adc.w	r3, r2, r3
 800710a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800710c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	663b      	str	r3, [r7, #96]	@ 0x60
 8007116:	667a      	str	r2, [r7, #100]	@ 0x64
 8007118:	f04f 0200 	mov.w	r2, #0
 800711c:	f04f 0300 	mov.w	r3, #0
 8007120:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007124:	4649      	mov	r1, r9
 8007126:	008b      	lsls	r3, r1, #2
 8007128:	4641      	mov	r1, r8
 800712a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800712e:	4641      	mov	r1, r8
 8007130:	008a      	lsls	r2, r1, #2
 8007132:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007136:	f7f9 fd87 	bl	8000c48 <__aeabi_uldivmod>
 800713a:	4602      	mov	r2, r0
 800713c:	460b      	mov	r3, r1
 800713e:	4b0d      	ldr	r3, [pc, #52]	@ (8007174 <UART_SetConfig+0x4e4>)
 8007140:	fba3 1302 	umull	r1, r3, r3, r2
 8007144:	095b      	lsrs	r3, r3, #5
 8007146:	2164      	movs	r1, #100	@ 0x64
 8007148:	fb01 f303 	mul.w	r3, r1, r3
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	011b      	lsls	r3, r3, #4
 8007150:	3332      	adds	r3, #50	@ 0x32
 8007152:	4a08      	ldr	r2, [pc, #32]	@ (8007174 <UART_SetConfig+0x4e4>)
 8007154:	fba2 2303 	umull	r2, r3, r2, r3
 8007158:	095b      	lsrs	r3, r3, #5
 800715a:	f003 020f 	and.w	r2, r3, #15
 800715e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4422      	add	r2, r4
 8007166:	609a      	str	r2, [r3, #8]
}
 8007168:	bf00      	nop
 800716a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800716e:	46bd      	mov	sp, r7
 8007170:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007174:	51eb851f 	.word	0x51eb851f

08007178 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007178:	b084      	sub	sp, #16
 800717a:	b580      	push	{r7, lr}
 800717c:	b084      	sub	sp, #16
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	f107 001c 	add.w	r0, r7, #28
 8007186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800718a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800718e:	2b01      	cmp	r3, #1
 8007190:	d123      	bne.n	80071da <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007196:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80071a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80071ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d105      	bne.n	80071ce <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f001 fae8 	bl	80087a4 <USB_CoreReset>
 80071d4:	4603      	mov	r3, r0
 80071d6:	73fb      	strb	r3, [r7, #15]
 80071d8:	e01b      	b.n	8007212 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f001 fadc 	bl	80087a4 <USB_CoreReset>
 80071ec:	4603      	mov	r3, r0
 80071ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80071f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d106      	bne.n	8007206 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	639a      	str	r2, [r3, #56]	@ 0x38
 8007204:	e005      	b.n	8007212 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800720a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007212:	7fbb      	ldrb	r3, [r7, #30]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d10b      	bne.n	8007230 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f043 0206 	orr.w	r2, r3, #6
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f043 0220 	orr.w	r2, r3, #32
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007230:	7bfb      	ldrb	r3, [r7, #15]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800723c:	b004      	add	sp, #16
 800723e:	4770      	bx	lr

08007240 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007240:	b480      	push	{r7}
 8007242:	b087      	sub	sp, #28
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	4613      	mov	r3, r2
 800724c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800724e:	79fb      	ldrb	r3, [r7, #7]
 8007250:	2b02      	cmp	r3, #2
 8007252:	d165      	bne.n	8007320 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	4a41      	ldr	r2, [pc, #260]	@ (800735c <USB_SetTurnaroundTime+0x11c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d906      	bls.n	800726a <USB_SetTurnaroundTime+0x2a>
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	4a40      	ldr	r2, [pc, #256]	@ (8007360 <USB_SetTurnaroundTime+0x120>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d202      	bcs.n	800726a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007264:	230f      	movs	r3, #15
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	e062      	b.n	8007330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	4a3c      	ldr	r2, [pc, #240]	@ (8007360 <USB_SetTurnaroundTime+0x120>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d306      	bcc.n	8007280 <USB_SetTurnaroundTime+0x40>
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	4a3b      	ldr	r2, [pc, #236]	@ (8007364 <USB_SetTurnaroundTime+0x124>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d202      	bcs.n	8007280 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800727a:	230e      	movs	r3, #14
 800727c:	617b      	str	r3, [r7, #20]
 800727e:	e057      	b.n	8007330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	4a38      	ldr	r2, [pc, #224]	@ (8007364 <USB_SetTurnaroundTime+0x124>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d306      	bcc.n	8007296 <USB_SetTurnaroundTime+0x56>
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	4a37      	ldr	r2, [pc, #220]	@ (8007368 <USB_SetTurnaroundTime+0x128>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d202      	bcs.n	8007296 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007290:	230d      	movs	r3, #13
 8007292:	617b      	str	r3, [r7, #20]
 8007294:	e04c      	b.n	8007330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	4a33      	ldr	r2, [pc, #204]	@ (8007368 <USB_SetTurnaroundTime+0x128>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d306      	bcc.n	80072ac <USB_SetTurnaroundTime+0x6c>
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	4a32      	ldr	r2, [pc, #200]	@ (800736c <USB_SetTurnaroundTime+0x12c>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d802      	bhi.n	80072ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80072a6:	230c      	movs	r3, #12
 80072a8:	617b      	str	r3, [r7, #20]
 80072aa:	e041      	b.n	8007330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	4a2f      	ldr	r2, [pc, #188]	@ (800736c <USB_SetTurnaroundTime+0x12c>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d906      	bls.n	80072c2 <USB_SetTurnaroundTime+0x82>
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	4a2e      	ldr	r2, [pc, #184]	@ (8007370 <USB_SetTurnaroundTime+0x130>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d802      	bhi.n	80072c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80072bc:	230b      	movs	r3, #11
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	e036      	b.n	8007330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	4a2a      	ldr	r2, [pc, #168]	@ (8007370 <USB_SetTurnaroundTime+0x130>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d906      	bls.n	80072d8 <USB_SetTurnaroundTime+0x98>
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	4a29      	ldr	r2, [pc, #164]	@ (8007374 <USB_SetTurnaroundTime+0x134>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d802      	bhi.n	80072d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80072d2:	230a      	movs	r3, #10
 80072d4:	617b      	str	r3, [r7, #20]
 80072d6:	e02b      	b.n	8007330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	4a26      	ldr	r2, [pc, #152]	@ (8007374 <USB_SetTurnaroundTime+0x134>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d906      	bls.n	80072ee <USB_SetTurnaroundTime+0xae>
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	4a25      	ldr	r2, [pc, #148]	@ (8007378 <USB_SetTurnaroundTime+0x138>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d202      	bcs.n	80072ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80072e8:	2309      	movs	r3, #9
 80072ea:	617b      	str	r3, [r7, #20]
 80072ec:	e020      	b.n	8007330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	4a21      	ldr	r2, [pc, #132]	@ (8007378 <USB_SetTurnaroundTime+0x138>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d306      	bcc.n	8007304 <USB_SetTurnaroundTime+0xc4>
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	4a20      	ldr	r2, [pc, #128]	@ (800737c <USB_SetTurnaroundTime+0x13c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d802      	bhi.n	8007304 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80072fe:	2308      	movs	r3, #8
 8007300:	617b      	str	r3, [r7, #20]
 8007302:	e015      	b.n	8007330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	4a1d      	ldr	r2, [pc, #116]	@ (800737c <USB_SetTurnaroundTime+0x13c>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d906      	bls.n	800731a <USB_SetTurnaroundTime+0xda>
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	4a1c      	ldr	r2, [pc, #112]	@ (8007380 <USB_SetTurnaroundTime+0x140>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d202      	bcs.n	800731a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007314:	2307      	movs	r3, #7
 8007316:	617b      	str	r3, [r7, #20]
 8007318:	e00a      	b.n	8007330 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800731a:	2306      	movs	r3, #6
 800731c:	617b      	str	r3, [r7, #20]
 800731e:	e007      	b.n	8007330 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007320:	79fb      	ldrb	r3, [r7, #7]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d102      	bne.n	800732c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007326:	2309      	movs	r3, #9
 8007328:	617b      	str	r3, [r7, #20]
 800732a:	e001      	b.n	8007330 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800732c:	2309      	movs	r3, #9
 800732e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	68da      	ldr	r2, [r3, #12]
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	029b      	lsls	r3, r3, #10
 8007344:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007348:	431a      	orrs	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	371c      	adds	r7, #28
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	00d8acbf 	.word	0x00d8acbf
 8007360:	00e4e1c0 	.word	0x00e4e1c0
 8007364:	00f42400 	.word	0x00f42400
 8007368:	01067380 	.word	0x01067380
 800736c:	011a499f 	.word	0x011a499f
 8007370:	01312cff 	.word	0x01312cff
 8007374:	014ca43f 	.word	0x014ca43f
 8007378:	016e3600 	.word	0x016e3600
 800737c:	01a6ab1f 	.word	0x01a6ab1f
 8007380:	01e84800 	.word	0x01e84800

08007384 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f043 0201 	orr.w	r2, r3, #1
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b083      	sub	sp, #12
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f023 0201 	bic.w	r2, r3, #1
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	460b      	mov	r3, r1
 80073d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80073e4:	78fb      	ldrb	r3, [r7, #3]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d115      	bne.n	8007416 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80073f6:	200a      	movs	r0, #10
 80073f8:	f7fb f9e2 	bl	80027c0 <HAL_Delay>
      ms += 10U;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	330a      	adds	r3, #10
 8007400:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f001 f93f 	bl	8008686 <USB_GetMode>
 8007408:	4603      	mov	r3, r0
 800740a:	2b01      	cmp	r3, #1
 800740c:	d01e      	beq.n	800744c <USB_SetCurrentMode+0x84>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2bc7      	cmp	r3, #199	@ 0xc7
 8007412:	d9f0      	bls.n	80073f6 <USB_SetCurrentMode+0x2e>
 8007414:	e01a      	b.n	800744c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007416:	78fb      	ldrb	r3, [r7, #3]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d115      	bne.n	8007448 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007428:	200a      	movs	r0, #10
 800742a:	f7fb f9c9 	bl	80027c0 <HAL_Delay>
      ms += 10U;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	330a      	adds	r3, #10
 8007432:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f001 f926 	bl	8008686 <USB_GetMode>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d005      	beq.n	800744c <USB_SetCurrentMode+0x84>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2bc7      	cmp	r3, #199	@ 0xc7
 8007444:	d9f0      	bls.n	8007428 <USB_SetCurrentMode+0x60>
 8007446:	e001      	b.n	800744c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e005      	b.n	8007458 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2bc8      	cmp	r3, #200	@ 0xc8
 8007450:	d101      	bne.n	8007456 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e000      	b.n	8007458 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007460:	b084      	sub	sp, #16
 8007462:	b580      	push	{r7, lr}
 8007464:	b086      	sub	sp, #24
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800746e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800747a:	2300      	movs	r3, #0
 800747c:	613b      	str	r3, [r7, #16]
 800747e:	e009      	b.n	8007494 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	3340      	adds	r3, #64	@ 0x40
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	2200      	movs	r2, #0
 800748c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	3301      	adds	r3, #1
 8007492:	613b      	str	r3, [r7, #16]
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	2b0e      	cmp	r3, #14
 8007498:	d9f2      	bls.n	8007480 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800749a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d11c      	bne.n	80074dc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074b0:	f043 0302 	orr.w	r3, r3, #2
 80074b4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80074da:	e00b      	b.n	80074f4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ec:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80074fa:	461a      	mov	r2, r3
 80074fc:	2300      	movs	r3, #0
 80074fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007500:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007504:	2b01      	cmp	r3, #1
 8007506:	d10d      	bne.n	8007524 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800750c:	2b00      	cmp	r3, #0
 800750e:	d104      	bne.n	800751a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007510:	2100      	movs	r1, #0
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f968 	bl	80077e8 <USB_SetDevSpeed>
 8007518:	e008      	b.n	800752c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800751a:	2101      	movs	r1, #1
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f963 	bl	80077e8 <USB_SetDevSpeed>
 8007522:	e003      	b.n	800752c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007524:	2103      	movs	r1, #3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f95e 	bl	80077e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800752c:	2110      	movs	r1, #16
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f8fa 	bl	8007728 <USB_FlushTxFifo>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f924 	bl	800778c <USB_FlushRxFifo>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007554:	461a      	mov	r2, r3
 8007556:	2300      	movs	r3, #0
 8007558:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007560:	461a      	mov	r2, r3
 8007562:	2300      	movs	r3, #0
 8007564:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800756c:	461a      	mov	r2, r3
 800756e:	2300      	movs	r3, #0
 8007570:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007572:	2300      	movs	r3, #0
 8007574:	613b      	str	r3, [r7, #16]
 8007576:	e043      	b.n	8007600 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800758a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800758e:	d118      	bne.n	80075c2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10a      	bne.n	80075ac <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075a2:	461a      	mov	r2, r3
 80075a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	e013      	b.n	80075d4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075b8:	461a      	mov	r2, r3
 80075ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80075be:	6013      	str	r3, [r2, #0]
 80075c0:	e008      	b.n	80075d4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ce:	461a      	mov	r2, r3
 80075d0:	2300      	movs	r3, #0
 80075d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075e0:	461a      	mov	r2, r3
 80075e2:	2300      	movs	r3, #0
 80075e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075f2:	461a      	mov	r2, r3
 80075f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80075f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	3301      	adds	r3, #1
 80075fe:	613b      	str	r3, [r7, #16]
 8007600:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007604:	461a      	mov	r2, r3
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	4293      	cmp	r3, r2
 800760a:	d3b5      	bcc.n	8007578 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800760c:	2300      	movs	r3, #0
 800760e:	613b      	str	r3, [r7, #16]
 8007610:	e043      	b.n	800769a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007624:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007628:	d118      	bne.n	800765c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4413      	add	r3, r2
 8007638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800763c:	461a      	mov	r2, r3
 800763e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007642:	6013      	str	r3, [r2, #0]
 8007644:	e013      	b.n	800766e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007652:	461a      	mov	r2, r3
 8007654:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007658:	6013      	str	r3, [r2, #0]
 800765a:	e008      	b.n	800766e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4413      	add	r3, r2
 8007664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007668:	461a      	mov	r2, r3
 800766a:	2300      	movs	r3, #0
 800766c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800767a:	461a      	mov	r2, r3
 800767c:	2300      	movs	r3, #0
 800767e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800768c:	461a      	mov	r2, r3
 800768e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007692:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	3301      	adds	r3, #1
 8007698:	613b      	str	r3, [r7, #16]
 800769a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800769e:	461a      	mov	r2, r3
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d3b5      	bcc.n	8007612 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80076c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80076c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d105      	bne.n	80076dc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	f043 0210 	orr.w	r2, r3, #16
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	699a      	ldr	r2, [r3, #24]
 80076e0:	4b10      	ldr	r3, [pc, #64]	@ (8007724 <USB_DevInit+0x2c4>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80076e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d005      	beq.n	80076fc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	f043 0208 	orr.w	r2, r3, #8
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80076fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007700:	2b01      	cmp	r3, #1
 8007702:	d107      	bne.n	8007714 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800770c:	f043 0304 	orr.w	r3, r3, #4
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007714:	7dfb      	ldrb	r3, [r7, #23]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007720:	b004      	add	sp, #16
 8007722:	4770      	bx	lr
 8007724:	803c3800 	.word	0x803c3800

08007728 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	3301      	adds	r3, #1
 800773a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007742:	d901      	bls.n	8007748 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e01b      	b.n	8007780 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	daf2      	bge.n	8007736 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007750:	2300      	movs	r3, #0
 8007752:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	019b      	lsls	r3, r3, #6
 8007758:	f043 0220 	orr.w	r2, r3, #32
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	3301      	adds	r3, #1
 8007764:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800776c:	d901      	bls.n	8007772 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800776e:	2303      	movs	r3, #3
 8007770:	e006      	b.n	8007780 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	f003 0320 	and.w	r3, r3, #32
 800777a:	2b20      	cmp	r3, #32
 800777c:	d0f0      	beq.n	8007760 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	3301      	adds	r3, #1
 800779c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077a4:	d901      	bls.n	80077aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e018      	b.n	80077dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	daf2      	bge.n	8007798 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80077b2:	2300      	movs	r3, #0
 80077b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2210      	movs	r2, #16
 80077ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	3301      	adds	r3, #1
 80077c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077c8:	d901      	bls.n	80077ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e006      	b.n	80077dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	f003 0310 	and.w	r3, r3, #16
 80077d6:	2b10      	cmp	r3, #16
 80077d8:	d0f0      	beq.n	80077bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	78fb      	ldrb	r3, [r7, #3]
 8007802:	68f9      	ldr	r1, [r7, #12]
 8007804:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007808:	4313      	orrs	r3, r2
 800780a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800781a:	b480      	push	{r7}
 800781c:	b087      	sub	sp, #28
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f003 0306 	and.w	r3, r3, #6
 8007832:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d102      	bne.n	8007840 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800783a:	2300      	movs	r3, #0
 800783c:	75fb      	strb	r3, [r7, #23]
 800783e:	e00a      	b.n	8007856 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b02      	cmp	r3, #2
 8007844:	d002      	beq.n	800784c <USB_GetDevSpeed+0x32>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2b06      	cmp	r3, #6
 800784a:	d102      	bne.n	8007852 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800784c:	2302      	movs	r3, #2
 800784e:	75fb      	strb	r3, [r7, #23]
 8007850:	e001      	b.n	8007856 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007852:	230f      	movs	r3, #15
 8007854:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007856:	7dfb      	ldrb	r3, [r7, #23]
}
 8007858:	4618      	mov	r0, r3
 800785a:	371c      	adds	r7, #28
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	785b      	ldrb	r3, [r3, #1]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d13a      	bne.n	80078f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007886:	69da      	ldr	r2, [r3, #28]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	f003 030f 	and.w	r3, r3, #15
 8007890:	2101      	movs	r1, #1
 8007892:	fa01 f303 	lsl.w	r3, r1, r3
 8007896:	b29b      	uxth	r3, r3
 8007898:	68f9      	ldr	r1, [r7, #12]
 800789a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800789e:	4313      	orrs	r3, r2
 80078a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	015a      	lsls	r2, r3, #5
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d155      	bne.n	8007964 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	791b      	ldrb	r3, [r3, #4]
 80078d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	059b      	lsls	r3, r3, #22
 80078da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078dc:	4313      	orrs	r3, r2
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	0151      	lsls	r1, r2, #5
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	440a      	add	r2, r1
 80078e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	e036      	b.n	8007964 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078fc:	69da      	ldr	r2, [r3, #28]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	f003 030f 	and.w	r3, r3, #15
 8007906:	2101      	movs	r1, #1
 8007908:	fa01 f303 	lsl.w	r3, r1, r3
 800790c:	041b      	lsls	r3, r3, #16
 800790e:	68f9      	ldr	r1, [r7, #12]
 8007910:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007914:	4313      	orrs	r3, r2
 8007916:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d11a      	bne.n	8007964 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	015a      	lsls	r2, r3, #5
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	4413      	add	r3, r2
 8007936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	791b      	ldrb	r3, [r3, #4]
 8007948:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800794a:	430b      	orrs	r3, r1
 800794c:	4313      	orrs	r3, r2
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	0151      	lsls	r1, r2, #5
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	440a      	add	r2, r1
 8007956:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800795a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800795e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007962:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
	...

08007974 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	785b      	ldrb	r3, [r3, #1]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d161      	bne.n	8007a54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	015a      	lsls	r2, r3, #5
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	4413      	add	r3, r2
 8007998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079a6:	d11f      	bne.n	80079e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	015a      	lsls	r2, r3, #5
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	0151      	lsls	r1, r2, #5
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	440a      	add	r2, r1
 80079be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80079c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	0151      	lsls	r1, r2, #5
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	440a      	add	r2, r1
 80079de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	f003 030f 	and.w	r3, r3, #15
 80079f8:	2101      	movs	r1, #1
 80079fa:	fa01 f303 	lsl.w	r3, r1, r3
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	43db      	mvns	r3, r3
 8007a02:	68f9      	ldr	r1, [r7, #12]
 8007a04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a08:	4013      	ands	r3, r2
 8007a0a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a12:	69da      	ldr	r2, [r3, #28]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	f003 030f 	and.w	r3, r3, #15
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	43db      	mvns	r3, r3
 8007a26:	68f9      	ldr	r1, [r7, #12]
 8007a28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	0159      	lsls	r1, r3, #5
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	440b      	add	r3, r1
 8007a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	4b35      	ldr	r3, [pc, #212]	@ (8007b24 <USB_DeactivateEndpoint+0x1b0>)
 8007a4e:	4013      	ands	r3, r2
 8007a50:	600b      	str	r3, [r1, #0]
 8007a52:	e060      	b.n	8007b16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a6a:	d11f      	bne.n	8007aac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	015a      	lsls	r2, r3, #5
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	0151      	lsls	r1, r2, #5
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	440a      	add	r2, r1
 8007a82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	0151      	lsls	r1, r2, #5
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	440a      	add	r2, r1
 8007aa2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007aa6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007aaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ab2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	f003 030f 	and.w	r3, r3, #15
 8007abc:	2101      	movs	r1, #1
 8007abe:	fa01 f303 	lsl.w	r3, r1, r3
 8007ac2:	041b      	lsls	r3, r3, #16
 8007ac4:	43db      	mvns	r3, r3
 8007ac6:	68f9      	ldr	r1, [r7, #12]
 8007ac8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007acc:	4013      	ands	r3, r2
 8007ace:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ad6:	69da      	ldr	r2, [r3, #28]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	f003 030f 	and.w	r3, r3, #15
 8007ae0:	2101      	movs	r1, #1
 8007ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ae6:	041b      	lsls	r3, r3, #16
 8007ae8:	43db      	mvns	r3, r3
 8007aea:	68f9      	ldr	r1, [r7, #12]
 8007aec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007af0:	4013      	ands	r3, r2
 8007af2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	0159      	lsls	r1, r3, #5
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	440b      	add	r3, r1
 8007b0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b0e:	4619      	mov	r1, r3
 8007b10:	4b05      	ldr	r3, [pc, #20]	@ (8007b28 <USB_DeactivateEndpoint+0x1b4>)
 8007b12:	4013      	ands	r3, r2
 8007b14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	ec337800 	.word	0xec337800
 8007b28:	eff37800 	.word	0xeff37800

08007b2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08a      	sub	sp, #40	@ 0x28
 8007b30:	af02      	add	r7, sp, #8
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	4613      	mov	r3, r2
 8007b38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	785b      	ldrb	r3, [r3, #1]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	f040 817f 	bne.w	8007e4c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d132      	bne.n	8007bbc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	0151      	lsls	r1, r2, #5
 8007b68:	69fa      	ldr	r2, [r7, #28]
 8007b6a:	440a      	add	r2, r1
 8007b6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b70:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007b74:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007b78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	69ba      	ldr	r2, [r7, #24]
 8007b8a:	0151      	lsls	r1, r2, #5
 8007b8c:	69fa      	ldr	r2, [r7, #28]
 8007b8e:	440a      	add	r2, r1
 8007b90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	69ba      	ldr	r2, [r7, #24]
 8007baa:	0151      	lsls	r1, r2, #5
 8007bac:	69fa      	ldr	r2, [r7, #28]
 8007bae:	440a      	add	r2, r1
 8007bb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bb4:	0cdb      	lsrs	r3, r3, #19
 8007bb6:	04db      	lsls	r3, r3, #19
 8007bb8:	6113      	str	r3, [r2, #16]
 8007bba:	e097      	b.n	8007cec <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	0151      	lsls	r1, r2, #5
 8007bce:	69fa      	ldr	r2, [r7, #28]
 8007bd0:	440a      	add	r2, r1
 8007bd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bd6:	0cdb      	lsrs	r3, r3, #19
 8007bd8:	04db      	lsls	r3, r3, #19
 8007bda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	015a      	lsls	r2, r3, #5
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	4413      	add	r3, r2
 8007be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	0151      	lsls	r1, r2, #5
 8007bee:	69fa      	ldr	r2, [r7, #28]
 8007bf0:	440a      	add	r2, r1
 8007bf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bf6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007bfa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007bfe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d11a      	bne.n	8007c3c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	691a      	ldr	r2, [r3, #16]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d903      	bls.n	8007c1a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	689a      	ldr	r2, [r3, #8]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	015a      	lsls	r2, r3, #5
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	4413      	add	r3, r2
 8007c22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	0151      	lsls	r1, r2, #5
 8007c2c:	69fa      	ldr	r2, [r7, #28]
 8007c2e:	440a      	add	r2, r1
 8007c30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c38:	6113      	str	r3, [r2, #16]
 8007c3a:	e044      	b.n	8007cc6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	691a      	ldr	r2, [r3, #16]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	4413      	add	r3, r2
 8007c46:	1e5a      	subs	r2, r3, #1
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c50:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	015a      	lsls	r2, r3, #5
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c5e:	691a      	ldr	r2, [r3, #16]
 8007c60:	8afb      	ldrh	r3, [r7, #22]
 8007c62:	04d9      	lsls	r1, r3, #19
 8007c64:	4ba4      	ldr	r3, [pc, #656]	@ (8007ef8 <USB_EPStartXfer+0x3cc>)
 8007c66:	400b      	ands	r3, r1
 8007c68:	69b9      	ldr	r1, [r7, #24]
 8007c6a:	0148      	lsls	r0, r1, #5
 8007c6c:	69f9      	ldr	r1, [r7, #28]
 8007c6e:	4401      	add	r1, r0
 8007c70:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007c74:	4313      	orrs	r3, r2
 8007c76:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	791b      	ldrb	r3, [r3, #4]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d122      	bne.n	8007cc6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	0151      	lsls	r1, r2, #5
 8007c92:	69fa      	ldr	r2, [r7, #28]
 8007c94:	440a      	add	r2, r1
 8007c96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c9a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007c9e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cac:	691a      	ldr	r2, [r3, #16]
 8007cae:	8afb      	ldrh	r3, [r7, #22]
 8007cb0:	075b      	lsls	r3, r3, #29
 8007cb2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007cb6:	69b9      	ldr	r1, [r7, #24]
 8007cb8:	0148      	lsls	r0, r1, #5
 8007cba:	69f9      	ldr	r1, [r7, #28]
 8007cbc:	4401      	add	r1, r0
 8007cbe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	015a      	lsls	r2, r3, #5
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	4413      	add	r3, r2
 8007cce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cd2:	691a      	ldr	r2, [r3, #16]
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cdc:	69b9      	ldr	r1, [r7, #24]
 8007cde:	0148      	lsls	r0, r1, #5
 8007ce0:	69f9      	ldr	r1, [r7, #28]
 8007ce2:	4401      	add	r1, r0
 8007ce4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007cec:	79fb      	ldrb	r3, [r7, #7]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d14b      	bne.n	8007d8a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d009      	beq.n	8007d0e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d06:	461a      	mov	r2, r3
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	791b      	ldrb	r3, [r3, #4]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d128      	bne.n	8007d68 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d110      	bne.n	8007d48 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	015a      	lsls	r2, r3, #5
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	0151      	lsls	r1, r2, #5
 8007d38:	69fa      	ldr	r2, [r7, #28]
 8007d3a:	440a      	add	r2, r1
 8007d3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	e00f      	b.n	8007d68 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	69ba      	ldr	r2, [r7, #24]
 8007d58:	0151      	lsls	r1, r2, #5
 8007d5a:	69fa      	ldr	r2, [r7, #28]
 8007d5c:	440a      	add	r2, r1
 8007d5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d66:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	69ba      	ldr	r2, [r7, #24]
 8007d78:	0151      	lsls	r1, r2, #5
 8007d7a:	69fa      	ldr	r2, [r7, #28]
 8007d7c:	440a      	add	r2, r1
 8007d7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d82:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007d86:	6013      	str	r3, [r2, #0]
 8007d88:	e166      	b.n	8008058 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	0151      	lsls	r1, r2, #5
 8007d9c:	69fa      	ldr	r2, [r7, #28]
 8007d9e:	440a      	add	r2, r1
 8007da0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007da4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007da8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	791b      	ldrb	r3, [r3, #4]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d015      	beq.n	8007dde <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 814e 	beq.w	8008058 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	f003 030f 	and.w	r3, r3, #15
 8007dcc:	2101      	movs	r1, #1
 8007dce:	fa01 f303 	lsl.w	r3, r1, r3
 8007dd2:	69f9      	ldr	r1, [r7, #28]
 8007dd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	634b      	str	r3, [r1, #52]	@ 0x34
 8007ddc:	e13c      	b.n	8008058 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d110      	bne.n	8007e10 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	0151      	lsls	r1, r2, #5
 8007e00:	69fa      	ldr	r2, [r7, #28]
 8007e02:	440a      	add	r2, r1
 8007e04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e0c:	6013      	str	r3, [r2, #0]
 8007e0e:	e00f      	b.n	8007e30 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	015a      	lsls	r2, r3, #5
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	0151      	lsls	r1, r2, #5
 8007e22:	69fa      	ldr	r2, [r7, #28]
 8007e24:	440a      	add	r2, r1
 8007e26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e2e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	68d9      	ldr	r1, [r3, #12]
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	781a      	ldrb	r2, [r3, #0]
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	b298      	uxth	r0, r3
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	4603      	mov	r3, r0
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 f9b9 	bl	80081bc <USB_WritePacket>
 8007e4a:	e105      	b.n	8008058 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	015a      	lsls	r2, r3, #5
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	0151      	lsls	r1, r2, #5
 8007e5e:	69fa      	ldr	r2, [r7, #28]
 8007e60:	440a      	add	r2, r1
 8007e62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e66:	0cdb      	lsrs	r3, r3, #19
 8007e68:	04db      	lsls	r3, r3, #19
 8007e6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	015a      	lsls	r2, r3, #5
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	0151      	lsls	r1, r2, #5
 8007e7e:	69fa      	ldr	r2, [r7, #28]
 8007e80:	440a      	add	r2, r1
 8007e82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e86:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007e8a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007e8e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d132      	bne.n	8007efc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d003      	beq.n	8007ea6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	689a      	ldr	r2, [r3, #8]
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	689a      	ldr	r2, [r3, #8]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eba:	691a      	ldr	r2, [r3, #16]
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ec4:	69b9      	ldr	r1, [r7, #24]
 8007ec6:	0148      	lsls	r0, r1, #5
 8007ec8:	69f9      	ldr	r1, [r7, #28]
 8007eca:	4401      	add	r1, r0
 8007ecc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	015a      	lsls	r2, r3, #5
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	69ba      	ldr	r2, [r7, #24]
 8007ee4:	0151      	lsls	r1, r2, #5
 8007ee6:	69fa      	ldr	r2, [r7, #28]
 8007ee8:	440a      	add	r2, r1
 8007eea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007eee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ef2:	6113      	str	r3, [r2, #16]
 8007ef4:	e062      	b.n	8007fbc <USB_EPStartXfer+0x490>
 8007ef6:	bf00      	nop
 8007ef8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d123      	bne.n	8007f4c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f10:	691a      	ldr	r2, [r3, #16]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f1a:	69b9      	ldr	r1, [r7, #24]
 8007f1c:	0148      	lsls	r0, r1, #5
 8007f1e:	69f9      	ldr	r1, [r7, #28]
 8007f20:	4401      	add	r1, r0
 8007f22:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007f26:	4313      	orrs	r3, r2
 8007f28:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	0151      	lsls	r1, r2, #5
 8007f3c:	69fa      	ldr	r2, [r7, #28]
 8007f3e:	440a      	add	r2, r1
 8007f40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f48:	6113      	str	r3, [r2, #16]
 8007f4a:	e037      	b.n	8007fbc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	691a      	ldr	r2, [r3, #16]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	4413      	add	r3, r2
 8007f56:	1e5a      	subs	r2, r3, #1
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f60:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	8afa      	ldrh	r2, [r7, #22]
 8007f68:	fb03 f202 	mul.w	r2, r3, r2
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f7c:	691a      	ldr	r2, [r3, #16]
 8007f7e:	8afb      	ldrh	r3, [r7, #22]
 8007f80:	04d9      	lsls	r1, r3, #19
 8007f82:	4b38      	ldr	r3, [pc, #224]	@ (8008064 <USB_EPStartXfer+0x538>)
 8007f84:	400b      	ands	r3, r1
 8007f86:	69b9      	ldr	r1, [r7, #24]
 8007f88:	0148      	lsls	r0, r1, #5
 8007f8a:	69f9      	ldr	r1, [r7, #28]
 8007f8c:	4401      	add	r1, r0
 8007f8e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007f92:	4313      	orrs	r3, r2
 8007f94:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	015a      	lsls	r2, r3, #5
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fa2:	691a      	ldr	r2, [r3, #16]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fac:	69b9      	ldr	r1, [r7, #24]
 8007fae:	0148      	lsls	r0, r1, #5
 8007fb0:	69f9      	ldr	r1, [r7, #28]
 8007fb2:	4401      	add	r1, r0
 8007fb4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007fbc:	79fb      	ldrb	r3, [r7, #7]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d10d      	bne.n	8007fde <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d009      	beq.n	8007fde <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	68d9      	ldr	r1, [r3, #12]
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fda:	460a      	mov	r2, r1
 8007fdc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	791b      	ldrb	r3, [r3, #4]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d128      	bne.n	8008038 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d110      	bne.n	8008018 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	0151      	lsls	r1, r2, #5
 8008008:	69fa      	ldr	r2, [r7, #28]
 800800a:	440a      	add	r2, r1
 800800c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008010:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	e00f      	b.n	8008038 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	69fa      	ldr	r2, [r7, #28]
 800802c:	440a      	add	r2, r1
 800802e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008036:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	4413      	add	r3, r2
 8008040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	0151      	lsls	r1, r2, #5
 800804a:	69fa      	ldr	r2, [r7, #28]
 800804c:	440a      	add	r2, r1
 800804e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008052:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008056:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3720      	adds	r7, #32
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	1ff80000 	.word	0x1ff80000

08008068 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008072:	2300      	movs	r3, #0
 8008074:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	785b      	ldrb	r3, [r3, #1]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d14a      	bne.n	800811c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	015a      	lsls	r2, r3, #5
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	4413      	add	r3, r2
 8008090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800809a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800809e:	f040 8086 	bne.w	80081ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	015a      	lsls	r2, r3, #5
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	7812      	ldrb	r2, [r2, #0]
 80080b6:	0151      	lsls	r1, r2, #5
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	440a      	add	r2, r1
 80080bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80080c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	015a      	lsls	r2, r3, #5
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	7812      	ldrb	r2, [r2, #0]
 80080da:	0151      	lsls	r1, r2, #5
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	440a      	add	r2, r1
 80080e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3301      	adds	r3, #1
 80080ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d902      	bls.n	8008100 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	75fb      	strb	r3, [r7, #23]
          break;
 80080fe:	e056      	b.n	80081ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	4413      	add	r3, r2
 800810a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008114:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008118:	d0e7      	beq.n	80080ea <USB_EPStopXfer+0x82>
 800811a:	e048      	b.n	80081ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	015a      	lsls	r2, r3, #5
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	4413      	add	r3, r2
 8008126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008130:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008134:	d13b      	bne.n	80081ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	015a      	lsls	r2, r3, #5
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	4413      	add	r3, r2
 8008140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	7812      	ldrb	r2, [r2, #0]
 800814a:	0151      	lsls	r1, r2, #5
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	440a      	add	r2, r1
 8008150:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008154:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008158:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	4413      	add	r3, r2
 8008164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	7812      	ldrb	r2, [r2, #0]
 800816e:	0151      	lsls	r1, r2, #5
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	440a      	add	r2, r1
 8008174:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008178:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800817c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3301      	adds	r3, #1
 8008182:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f242 7210 	movw	r2, #10000	@ 0x2710
 800818a:	4293      	cmp	r3, r2
 800818c:	d902      	bls.n	8008194 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	75fb      	strb	r3, [r7, #23]
          break;
 8008192:	e00c      	b.n	80081ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	015a      	lsls	r2, r3, #5
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	4413      	add	r3, r2
 800819e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081ac:	d0e7      	beq.n	800817e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	371c      	adds	r7, #28
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80081bc:	b480      	push	{r7}
 80081be:	b089      	sub	sp, #36	@ 0x24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	4611      	mov	r1, r2
 80081c8:	461a      	mov	r2, r3
 80081ca:	460b      	mov	r3, r1
 80081cc:	71fb      	strb	r3, [r7, #7]
 80081ce:	4613      	mov	r3, r2
 80081d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80081da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d123      	bne.n	800822a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80081e2:	88bb      	ldrh	r3, [r7, #4]
 80081e4:	3303      	adds	r3, #3
 80081e6:	089b      	lsrs	r3, r3, #2
 80081e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80081ea:	2300      	movs	r3, #0
 80081ec:	61bb      	str	r3, [r7, #24]
 80081ee:	e018      	b.n	8008222 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80081f0:	79fb      	ldrb	r3, [r7, #7]
 80081f2:	031a      	lsls	r2, r3, #12
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081fc:	461a      	mov	r2, r3
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	3301      	adds	r3, #1
 8008208:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	3301      	adds	r3, #1
 800820e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	3301      	adds	r3, #1
 8008214:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	3301      	adds	r3, #1
 800821a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	3301      	adds	r3, #1
 8008220:	61bb      	str	r3, [r7, #24]
 8008222:	69ba      	ldr	r2, [r7, #24]
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	429a      	cmp	r2, r3
 8008228:	d3e2      	bcc.n	80081f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3724      	adds	r7, #36	@ 0x24
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008238:	b480      	push	{r7}
 800823a:	b08b      	sub	sp, #44	@ 0x2c
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	4613      	mov	r3, r2
 8008244:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800824e:	88fb      	ldrh	r3, [r7, #6]
 8008250:	089b      	lsrs	r3, r3, #2
 8008252:	b29b      	uxth	r3, r3
 8008254:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008256:	88fb      	ldrh	r3, [r7, #6]
 8008258:	f003 0303 	and.w	r3, r3, #3
 800825c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800825e:	2300      	movs	r3, #0
 8008260:	623b      	str	r3, [r7, #32]
 8008262:	e014      	b.n	800828e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008272:	3301      	adds	r3, #1
 8008274:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008278:	3301      	adds	r3, #1
 800827a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800827c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827e:	3301      	adds	r3, #1
 8008280:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008284:	3301      	adds	r3, #1
 8008286:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008288:	6a3b      	ldr	r3, [r7, #32]
 800828a:	3301      	adds	r3, #1
 800828c:	623b      	str	r3, [r7, #32]
 800828e:	6a3a      	ldr	r2, [r7, #32]
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	429a      	cmp	r2, r3
 8008294:	d3e6      	bcc.n	8008264 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008296:	8bfb      	ldrh	r3, [r7, #30]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d01e      	beq.n	80082da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082a6:	461a      	mov	r2, r3
 80082a8:	f107 0310 	add.w	r3, r7, #16
 80082ac:	6812      	ldr	r2, [r2, #0]
 80082ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80082b0:	693a      	ldr	r2, [r7, #16]
 80082b2:	6a3b      	ldr	r3, [r7, #32]
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	fa22 f303 	lsr.w	r3, r2, r3
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c0:	701a      	strb	r2, [r3, #0]
      i++;
 80082c2:	6a3b      	ldr	r3, [r7, #32]
 80082c4:	3301      	adds	r3, #1
 80082c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80082c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ca:	3301      	adds	r3, #1
 80082cc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80082ce:	8bfb      	ldrh	r3, [r7, #30]
 80082d0:	3b01      	subs	r3, #1
 80082d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80082d4:	8bfb      	ldrh	r3, [r7, #30]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1ea      	bne.n	80082b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80082da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80082dc:	4618      	mov	r0, r3
 80082de:	372c      	adds	r7, #44	@ 0x2c
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	785b      	ldrb	r3, [r3, #1]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d12c      	bne.n	800835e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	015a      	lsls	r2, r3, #5
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	4413      	add	r3, r2
 800830c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	db12      	blt.n	800833c <USB_EPSetStall+0x54>
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00f      	beq.n	800833c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	015a      	lsls	r2, r3, #5
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	4413      	add	r3, r2
 8008324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	0151      	lsls	r1, r2, #5
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	440a      	add	r2, r1
 8008332:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008336:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800833a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	4413      	add	r3, r2
 8008344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	0151      	lsls	r1, r2, #5
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	440a      	add	r2, r1
 8008352:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008356:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800835a:	6013      	str	r3, [r2, #0]
 800835c:	e02b      	b.n	80083b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	015a      	lsls	r2, r3, #5
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	4413      	add	r3, r2
 8008366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	db12      	blt.n	8008396 <USB_EPSetStall+0xae>
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00f      	beq.n	8008396 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	015a      	lsls	r2, r3, #5
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4413      	add	r3, r2
 800837e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	0151      	lsls	r1, r2, #5
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	440a      	add	r2, r1
 800838c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008390:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008394:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	015a      	lsls	r2, r3, #5
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	4413      	add	r3, r2
 800839e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	0151      	lsls	r1, r2, #5
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	440a      	add	r2, r1
 80083ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80083b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	785b      	ldrb	r3, [r3, #1]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d128      	bne.n	8008432 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	0151      	lsls	r1, r2, #5
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	440a      	add	r2, r1
 80083f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80083fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	791b      	ldrb	r3, [r3, #4]
 8008404:	2b03      	cmp	r3, #3
 8008406:	d003      	beq.n	8008410 <USB_EPClearStall+0x4c>
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	791b      	ldrb	r3, [r3, #4]
 800840c:	2b02      	cmp	r3, #2
 800840e:	d138      	bne.n	8008482 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	4413      	add	r3, r2
 8008418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	0151      	lsls	r1, r2, #5
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	440a      	add	r2, r1
 8008426:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800842a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	e027      	b.n	8008482 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	4413      	add	r3, r2
 800843a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	0151      	lsls	r1, r2, #5
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	440a      	add	r2, r1
 8008448:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800844c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008450:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	791b      	ldrb	r3, [r3, #4]
 8008456:	2b03      	cmp	r3, #3
 8008458:	d003      	beq.n	8008462 <USB_EPClearStall+0x9e>
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	791b      	ldrb	r3, [r3, #4]
 800845e:	2b02      	cmp	r3, #2
 8008460:	d10f      	bne.n	8008482 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	015a      	lsls	r2, r3, #5
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	4413      	add	r3, r2
 800846a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	0151      	lsls	r1, r2, #5
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	440a      	add	r2, r1
 8008478:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800847c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008480:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	460b      	mov	r3, r1
 800849a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084ae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80084b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	78fb      	ldrb	r3, [r7, #3]
 80084be:	011b      	lsls	r3, r3, #4
 80084c0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80084c4:	68f9      	ldr	r1, [r7, #12]
 80084c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80084ca:	4313      	orrs	r3, r2
 80084cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80084f6:	f023 0303 	bic.w	r3, r3, #3
 80084fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800850a:	f023 0302 	bic.w	r3, r3, #2
 800850e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3714      	adds	r7, #20
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800851e:	b480      	push	{r7}
 8008520:	b085      	sub	sp, #20
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008538:	f023 0303 	bic.w	r3, r3, #3
 800853c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800854c:	f043 0302 	orr.w	r3, r3, #2
 8008550:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	695b      	ldr	r3, [r3, #20]
 800856c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	4013      	ands	r3, r2
 8008576:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008578:	68fb      	ldr	r3, [r7, #12]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008586:	b480      	push	{r7}
 8008588:	b085      	sub	sp, #20
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085a2:	69db      	ldr	r3, [r3, #28]
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	4013      	ands	r3, r2
 80085a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	0c1b      	lsrs	r3, r3, #16
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b085      	sub	sp, #20
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085d6:	69db      	ldr	r3, [r3, #28]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	4013      	ands	r3, r2
 80085dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	b29b      	uxth	r3, r3
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b085      	sub	sp, #20
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	460b      	mov	r3, r1
 80085f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80085fe:	78fb      	ldrb	r3, [r7, #3]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	4413      	add	r3, r2
 8008606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008614:	695b      	ldr	r3, [r3, #20]
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	4013      	ands	r3, r2
 800861a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800861c:	68bb      	ldr	r3, [r7, #8]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800862a:	b480      	push	{r7}
 800862c:	b087      	sub	sp, #28
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	460b      	mov	r3, r1
 8008634:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800864a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800864c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800864e:	78fb      	ldrb	r3, [r7, #3]
 8008650:	f003 030f 	and.w	r3, r3, #15
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	fa22 f303 	lsr.w	r3, r2, r3
 800865a:	01db      	lsls	r3, r3, #7
 800865c:	b2db      	uxtb	r3, r3
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	4313      	orrs	r3, r2
 8008662:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008664:	78fb      	ldrb	r3, [r7, #3]
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	4413      	add	r3, r2
 800866c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	4013      	ands	r3, r2
 8008676:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008678:	68bb      	ldr	r3, [r7, #8]
}
 800867a:	4618      	mov	r0, r3
 800867c:	371c      	adds	r7, #28
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008686:	b480      	push	{r7}
 8008688:	b083      	sub	sp, #12
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	f003 0301 	and.w	r3, r3, #1
}
 8008696:	4618      	mov	r0, r3
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80086a2:	b480      	push	{r7}
 80086a4:	b085      	sub	sp, #20
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80086c0:	f023 0307 	bic.w	r3, r3, #7
 80086c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80086d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3714      	adds	r7, #20
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b087      	sub	sp, #28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	460b      	mov	r3, r1
 80086f2:	607a      	str	r2, [r7, #4]
 80086f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	333c      	adds	r3, #60	@ 0x3c
 80086fe:	3304      	adds	r3, #4
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	4a26      	ldr	r2, [pc, #152]	@ (80087a0 <USB_EP0_OutStart+0xb8>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d90a      	bls.n	8008722 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008718:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800871c:	d101      	bne.n	8008722 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	e037      	b.n	8008792 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008728:	461a      	mov	r2, r3
 800872a:	2300      	movs	r3, #0
 800872c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800873c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008740:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008750:	f043 0318 	orr.w	r3, r3, #24
 8008754:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	697a      	ldr	r2, [r7, #20]
 8008760:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008764:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008768:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800876a:	7afb      	ldrb	r3, [r7, #11]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d10f      	bne.n	8008790 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008776:	461a      	mov	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	697a      	ldr	r2, [r7, #20]
 8008786:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800878a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800878e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	371c      	adds	r7, #28
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	4f54300a 	.word	0x4f54300a

080087a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	3301      	adds	r3, #1
 80087b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087bc:	d901      	bls.n	80087c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80087be:	2303      	movs	r3, #3
 80087c0:	e01b      	b.n	80087fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	daf2      	bge.n	80087b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80087ca:	2300      	movs	r3, #0
 80087cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	f043 0201 	orr.w	r2, r3, #1
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	3301      	adds	r3, #1
 80087de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087e6:	d901      	bls.n	80087ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e006      	b.n	80087fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	f003 0301 	and.w	r3, r3, #1
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d0f0      	beq.n	80087da <USB_CoreReset+0x36>

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
	...

08008808 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	460b      	mov	r3, r1
 8008812:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008814:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008818:	f002 fc46 	bl	800b0a8 <USBD_static_malloc>
 800881c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d109      	bne.n	8008838 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	32b0      	adds	r2, #176	@ 0xb0
 800882e:	2100      	movs	r1, #0
 8008830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008834:	2302      	movs	r3, #2
 8008836:	e0d4      	b.n	80089e2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008838:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800883c:	2100      	movs	r1, #0
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f003 f9f3 	bl	800bc2a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	32b0      	adds	r2, #176	@ 0xb0
 800884e:	68f9      	ldr	r1, [r7, #12]
 8008850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	32b0      	adds	r2, #176	@ 0xb0
 800885e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	7c1b      	ldrb	r3, [r3, #16]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d138      	bne.n	80088e2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008870:	4b5e      	ldr	r3, [pc, #376]	@ (80089ec <USBD_CDC_Init+0x1e4>)
 8008872:	7819      	ldrb	r1, [r3, #0]
 8008874:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008878:	2202      	movs	r2, #2
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f002 faf1 	bl	800ae62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008880:	4b5a      	ldr	r3, [pc, #360]	@ (80089ec <USBD_CDC_Init+0x1e4>)
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	f003 020f 	and.w	r2, r3, #15
 8008888:	6879      	ldr	r1, [r7, #4]
 800888a:	4613      	mov	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	4413      	add	r3, r2
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	440b      	add	r3, r1
 8008894:	3324      	adds	r3, #36	@ 0x24
 8008896:	2201      	movs	r2, #1
 8008898:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800889a:	4b55      	ldr	r3, [pc, #340]	@ (80089f0 <USBD_CDC_Init+0x1e8>)
 800889c:	7819      	ldrb	r1, [r3, #0]
 800889e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088a2:	2202      	movs	r2, #2
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f002 fadc 	bl	800ae62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80088aa:	4b51      	ldr	r3, [pc, #324]	@ (80089f0 <USBD_CDC_Init+0x1e8>)
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	f003 020f 	and.w	r2, r3, #15
 80088b2:	6879      	ldr	r1, [r7, #4]
 80088b4:	4613      	mov	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	440b      	add	r3, r1
 80088be:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80088c2:	2201      	movs	r2, #1
 80088c4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80088c6:	4b4b      	ldr	r3, [pc, #300]	@ (80089f4 <USBD_CDC_Init+0x1ec>)
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	f003 020f 	and.w	r2, r3, #15
 80088ce:	6879      	ldr	r1, [r7, #4]
 80088d0:	4613      	mov	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	440b      	add	r3, r1
 80088da:	3326      	adds	r3, #38	@ 0x26
 80088dc:	2210      	movs	r2, #16
 80088de:	801a      	strh	r2, [r3, #0]
 80088e0:	e035      	b.n	800894e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80088e2:	4b42      	ldr	r3, [pc, #264]	@ (80089ec <USBD_CDC_Init+0x1e4>)
 80088e4:	7819      	ldrb	r1, [r3, #0]
 80088e6:	2340      	movs	r3, #64	@ 0x40
 80088e8:	2202      	movs	r2, #2
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f002 fab9 	bl	800ae62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80088f0:	4b3e      	ldr	r3, [pc, #248]	@ (80089ec <USBD_CDC_Init+0x1e4>)
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	f003 020f 	and.w	r2, r3, #15
 80088f8:	6879      	ldr	r1, [r7, #4]
 80088fa:	4613      	mov	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4413      	add	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	440b      	add	r3, r1
 8008904:	3324      	adds	r3, #36	@ 0x24
 8008906:	2201      	movs	r2, #1
 8008908:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800890a:	4b39      	ldr	r3, [pc, #228]	@ (80089f0 <USBD_CDC_Init+0x1e8>)
 800890c:	7819      	ldrb	r1, [r3, #0]
 800890e:	2340      	movs	r3, #64	@ 0x40
 8008910:	2202      	movs	r2, #2
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f002 faa5 	bl	800ae62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008918:	4b35      	ldr	r3, [pc, #212]	@ (80089f0 <USBD_CDC_Init+0x1e8>)
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	f003 020f 	and.w	r2, r3, #15
 8008920:	6879      	ldr	r1, [r7, #4]
 8008922:	4613      	mov	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	440b      	add	r3, r1
 800892c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008930:	2201      	movs	r2, #1
 8008932:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008934:	4b2f      	ldr	r3, [pc, #188]	@ (80089f4 <USBD_CDC_Init+0x1ec>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	f003 020f 	and.w	r2, r3, #15
 800893c:	6879      	ldr	r1, [r7, #4]
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	440b      	add	r3, r1
 8008948:	3326      	adds	r3, #38	@ 0x26
 800894a:	2210      	movs	r2, #16
 800894c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800894e:	4b29      	ldr	r3, [pc, #164]	@ (80089f4 <USBD_CDC_Init+0x1ec>)
 8008950:	7819      	ldrb	r1, [r3, #0]
 8008952:	2308      	movs	r3, #8
 8008954:	2203      	movs	r2, #3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f002 fa83 	bl	800ae62 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800895c:	4b25      	ldr	r3, [pc, #148]	@ (80089f4 <USBD_CDC_Init+0x1ec>)
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	f003 020f 	and.w	r2, r3, #15
 8008964:	6879      	ldr	r1, [r7, #4]
 8008966:	4613      	mov	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	440b      	add	r3, r1
 8008970:	3324      	adds	r3, #36	@ 0x24
 8008972:	2201      	movs	r2, #1
 8008974:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	33b0      	adds	r3, #176	@ 0xb0
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80089ac:	2302      	movs	r3, #2
 80089ae:	e018      	b.n	80089e2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	7c1b      	ldrb	r3, [r3, #16]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10a      	bne.n	80089ce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80089b8:	4b0d      	ldr	r3, [pc, #52]	@ (80089f0 <USBD_CDC_Init+0x1e8>)
 80089ba:	7819      	ldrb	r1, [r3, #0]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80089c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f002 fb3a 	bl	800b040 <USBD_LL_PrepareReceive>
 80089cc:	e008      	b.n	80089e0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80089ce:	4b08      	ldr	r3, [pc, #32]	@ (80089f0 <USBD_CDC_Init+0x1e8>)
 80089d0:	7819      	ldrb	r1, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80089d8:	2340      	movs	r3, #64	@ 0x40
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f002 fb30 	bl	800b040 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	20000097 	.word	0x20000097
 80089f0:	20000098 	.word	0x20000098
 80089f4:	20000099 	.word	0x20000099

080089f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	460b      	mov	r3, r1
 8008a02:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008a04:	4b3a      	ldr	r3, [pc, #232]	@ (8008af0 <USBD_CDC_DeInit+0xf8>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	4619      	mov	r1, r3
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f002 fa4f 	bl	800aeae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008a10:	4b37      	ldr	r3, [pc, #220]	@ (8008af0 <USBD_CDC_DeInit+0xf8>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	f003 020f 	and.w	r2, r3, #15
 8008a18:	6879      	ldr	r1, [r7, #4]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	440b      	add	r3, r1
 8008a24:	3324      	adds	r3, #36	@ 0x24
 8008a26:	2200      	movs	r2, #0
 8008a28:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008a2a:	4b32      	ldr	r3, [pc, #200]	@ (8008af4 <USBD_CDC_DeInit+0xfc>)
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f002 fa3c 	bl	800aeae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008a36:	4b2f      	ldr	r3, [pc, #188]	@ (8008af4 <USBD_CDC_DeInit+0xfc>)
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	f003 020f 	and.w	r2, r3, #15
 8008a3e:	6879      	ldr	r1, [r7, #4]
 8008a40:	4613      	mov	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	440b      	add	r3, r1
 8008a4a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a4e:	2200      	movs	r2, #0
 8008a50:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008a52:	4b29      	ldr	r3, [pc, #164]	@ (8008af8 <USBD_CDC_DeInit+0x100>)
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f002 fa28 	bl	800aeae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008a5e:	4b26      	ldr	r3, [pc, #152]	@ (8008af8 <USBD_CDC_DeInit+0x100>)
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	f003 020f 	and.w	r2, r3, #15
 8008a66:	6879      	ldr	r1, [r7, #4]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	440b      	add	r3, r1
 8008a72:	3324      	adds	r3, #36	@ 0x24
 8008a74:	2200      	movs	r2, #0
 8008a76:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008a78:	4b1f      	ldr	r3, [pc, #124]	@ (8008af8 <USBD_CDC_DeInit+0x100>)
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	f003 020f 	and.w	r2, r3, #15
 8008a80:	6879      	ldr	r1, [r7, #4]
 8008a82:	4613      	mov	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	440b      	add	r3, r1
 8008a8c:	3326      	adds	r3, #38	@ 0x26
 8008a8e:	2200      	movs	r2, #0
 8008a90:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	32b0      	adds	r2, #176	@ 0xb0
 8008a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d01f      	beq.n	8008ae4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	33b0      	adds	r3, #176	@ 0xb0
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	32b0      	adds	r2, #176	@ 0xb0
 8008ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f002 fafc 	bl	800b0c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	32b0      	adds	r2, #176	@ 0xb0
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	20000097 	.word	0x20000097
 8008af4:	20000098 	.word	0x20000098
 8008af8:	20000099 	.word	0x20000099

08008afc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	32b0      	adds	r2, #176	@ 0xb0
 8008b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b14:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e0bf      	b.n	8008cac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d050      	beq.n	8008bda <USBD_CDC_Setup+0xde>
 8008b38:	2b20      	cmp	r3, #32
 8008b3a:	f040 80af 	bne.w	8008c9c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	88db      	ldrh	r3, [r3, #6]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d03a      	beq.n	8008bbc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	b25b      	sxtb	r3, r3
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	da1b      	bge.n	8008b88 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	33b0      	adds	r3, #176	@ 0xb0
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4413      	add	r3, r2
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008b66:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	88d2      	ldrh	r2, [r2, #6]
 8008b6c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	88db      	ldrh	r3, [r3, #6]
 8008b72:	2b07      	cmp	r3, #7
 8008b74:	bf28      	it	cs
 8008b76:	2307      	movcs	r3, #7
 8008b78:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	89fa      	ldrh	r2, [r7, #14]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f001 fd53 	bl	800a62c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008b86:	e090      	b.n	8008caa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	785a      	ldrb	r2, [r3, #1]
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	88db      	ldrh	r3, [r3, #6]
 8008b96:	2b3f      	cmp	r3, #63	@ 0x3f
 8008b98:	d803      	bhi.n	8008ba2 <USBD_CDC_Setup+0xa6>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	88db      	ldrh	r3, [r3, #6]
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	e000      	b.n	8008ba4 <USBD_CDC_Setup+0xa8>
 8008ba2:	2240      	movs	r2, #64	@ 0x40
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008baa:	6939      	ldr	r1, [r7, #16]
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f001 fd65 	bl	800a684 <USBD_CtlPrepareRx>
      break;
 8008bba:	e076      	b.n	8008caa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	33b0      	adds	r3, #176	@ 0xb0
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	683a      	ldr	r2, [r7, #0]
 8008bd0:	7850      	ldrb	r0, [r2, #1]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	6839      	ldr	r1, [r7, #0]
 8008bd6:	4798      	blx	r3
      break;
 8008bd8:	e067      	b.n	8008caa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	785b      	ldrb	r3, [r3, #1]
 8008bde:	2b0b      	cmp	r3, #11
 8008be0:	d851      	bhi.n	8008c86 <USBD_CDC_Setup+0x18a>
 8008be2:	a201      	add	r2, pc, #4	@ (adr r2, 8008be8 <USBD_CDC_Setup+0xec>)
 8008be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be8:	08008c19 	.word	0x08008c19
 8008bec:	08008c95 	.word	0x08008c95
 8008bf0:	08008c87 	.word	0x08008c87
 8008bf4:	08008c87 	.word	0x08008c87
 8008bf8:	08008c87 	.word	0x08008c87
 8008bfc:	08008c87 	.word	0x08008c87
 8008c00:	08008c87 	.word	0x08008c87
 8008c04:	08008c87 	.word	0x08008c87
 8008c08:	08008c87 	.word	0x08008c87
 8008c0c:	08008c87 	.word	0x08008c87
 8008c10:	08008c43 	.word	0x08008c43
 8008c14:	08008c6d 	.word	0x08008c6d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d107      	bne.n	8008c34 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008c24:	f107 030a 	add.w	r3, r7, #10
 8008c28:	2202      	movs	r2, #2
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f001 fcfd 	bl	800a62c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c32:	e032      	b.n	8008c9a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f001 fc7b 	bl	800a532 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	75fb      	strb	r3, [r7, #23]
          break;
 8008c40:	e02b      	b.n	8008c9a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b03      	cmp	r3, #3
 8008c4c:	d107      	bne.n	8008c5e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008c4e:	f107 030d 	add.w	r3, r7, #13
 8008c52:	2201      	movs	r2, #1
 8008c54:	4619      	mov	r1, r3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f001 fce8 	bl	800a62c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c5c:	e01d      	b.n	8008c9a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f001 fc66 	bl	800a532 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c66:	2303      	movs	r3, #3
 8008c68:	75fb      	strb	r3, [r7, #23]
          break;
 8008c6a:	e016      	b.n	8008c9a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	d00f      	beq.n	8008c98 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f001 fc59 	bl	800a532 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c80:	2303      	movs	r3, #3
 8008c82:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008c84:	e008      	b.n	8008c98 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008c86:	6839      	ldr	r1, [r7, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f001 fc52 	bl	800a532 <USBD_CtlError>
          ret = USBD_FAIL;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	75fb      	strb	r3, [r7, #23]
          break;
 8008c92:	e002      	b.n	8008c9a <USBD_CDC_Setup+0x19e>
          break;
 8008c94:	bf00      	nop
 8008c96:	e008      	b.n	8008caa <USBD_CDC_Setup+0x1ae>
          break;
 8008c98:	bf00      	nop
      }
      break;
 8008c9a:	e006      	b.n	8008caa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f001 fc47 	bl	800a532 <USBD_CtlError>
      ret = USBD_FAIL;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ca8:	bf00      	nop
  }

  return (uint8_t)ret;
 8008caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3718      	adds	r7, #24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008cc6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	32b0      	adds	r2, #176	@ 0xb0
 8008cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d101      	bne.n	8008cde <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e065      	b.n	8008daa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	32b0      	adds	r2, #176	@ 0xb0
 8008ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008cee:	78fb      	ldrb	r3, [r7, #3]
 8008cf0:	f003 020f 	and.w	r2, r3, #15
 8008cf4:	6879      	ldr	r1, [r7, #4]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	4413      	add	r3, r2
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	440b      	add	r3, r1
 8008d00:	3318      	adds	r3, #24
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d02f      	beq.n	8008d68 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008d08:	78fb      	ldrb	r3, [r7, #3]
 8008d0a:	f003 020f 	and.w	r2, r3, #15
 8008d0e:	6879      	ldr	r1, [r7, #4]
 8008d10:	4613      	mov	r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4413      	add	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	440b      	add	r3, r1
 8008d1a:	3318      	adds	r3, #24
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	78fb      	ldrb	r3, [r7, #3]
 8008d20:	f003 010f 	and.w	r1, r3, #15
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	460b      	mov	r3, r1
 8008d28:	00db      	lsls	r3, r3, #3
 8008d2a:	440b      	add	r3, r1
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4403      	add	r3, r0
 8008d30:	331c      	adds	r3, #28
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	fbb2 f1f3 	udiv	r1, r2, r3
 8008d38:	fb01 f303 	mul.w	r3, r1, r3
 8008d3c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d112      	bne.n	8008d68 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008d42:	78fb      	ldrb	r3, [r7, #3]
 8008d44:	f003 020f 	and.w	r2, r3, #15
 8008d48:	6879      	ldr	r1, [r7, #4]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	440b      	add	r3, r1
 8008d54:	3318      	adds	r3, #24
 8008d56:	2200      	movs	r2, #0
 8008d58:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d5a:	78f9      	ldrb	r1, [r7, #3]
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	2200      	movs	r2, #0
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f002 f94c 	bl	800affe <USBD_LL_Transmit>
 8008d66:	e01f      	b.n	8008da8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	33b0      	adds	r3, #176	@ 0xb0
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	4413      	add	r3, r2
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	691b      	ldr	r3, [r3, #16]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d010      	beq.n	8008da8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	33b0      	adds	r3, #176	@ 0xb0
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008da4:	78fa      	ldrb	r2, [r7, #3]
 8008da6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	460b      	mov	r3, r1
 8008dbc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	32b0      	adds	r2, #176	@ 0xb0
 8008dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dcc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	32b0      	adds	r2, #176	@ 0xb0
 8008dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d101      	bne.n	8008de4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008de0:	2303      	movs	r3, #3
 8008de2:	e01a      	b.n	8008e1a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008de4:	78fb      	ldrb	r3, [r7, #3]
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f002 f94a 	bl	800b082 <USBD_LL_GetRxDataSize>
 8008dee:	4602      	mov	r2, r0
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	33b0      	adds	r3, #176	@ 0xb0
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008e14:	4611      	mov	r1, r2
 8008e16:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b084      	sub	sp, #16
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	32b0      	adds	r2, #176	@ 0xb0
 8008e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e38:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e024      	b.n	8008e8e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	33b0      	adds	r3, #176	@ 0xb0
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	4413      	add	r3, r2
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d019      	beq.n	8008e8c <USBD_CDC_EP0_RxReady+0x6a>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008e5e:	2bff      	cmp	r3, #255	@ 0xff
 8008e60:	d014      	beq.n	8008e8c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	33b0      	adds	r3, #176	@ 0xb0
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008e7a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008e82:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	22ff      	movs	r2, #255	@ 0xff
 8008e88:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
	...

08008e98 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ea0:	2182      	movs	r1, #130	@ 0x82
 8008ea2:	4818      	ldr	r0, [pc, #96]	@ (8008f04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ea4:	f000 fd0f 	bl	80098c6 <USBD_GetEpDesc>
 8008ea8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008eaa:	2101      	movs	r1, #1
 8008eac:	4815      	ldr	r0, [pc, #84]	@ (8008f04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008eae:	f000 fd0a 	bl	80098c6 <USBD_GetEpDesc>
 8008eb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008eb4:	2181      	movs	r1, #129	@ 0x81
 8008eb6:	4813      	ldr	r0, [pc, #76]	@ (8008f04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008eb8:	f000 fd05 	bl	80098c6 <USBD_GetEpDesc>
 8008ebc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d002      	beq.n	8008eca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	2210      	movs	r2, #16
 8008ec8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d006      	beq.n	8008ede <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ed8:	711a      	strb	r2, [r3, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d006      	beq.n	8008ef2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008eec:	711a      	strb	r2, [r3, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2243      	movs	r2, #67	@ 0x43
 8008ef6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ef8:	4b02      	ldr	r3, [pc, #8]	@ (8008f04 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3718      	adds	r7, #24
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	20000054 	.word	0x20000054

08008f08 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f10:	2182      	movs	r1, #130	@ 0x82
 8008f12:	4818      	ldr	r0, [pc, #96]	@ (8008f74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f14:	f000 fcd7 	bl	80098c6 <USBD_GetEpDesc>
 8008f18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f1a:	2101      	movs	r1, #1
 8008f1c:	4815      	ldr	r0, [pc, #84]	@ (8008f74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f1e:	f000 fcd2 	bl	80098c6 <USBD_GetEpDesc>
 8008f22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f24:	2181      	movs	r1, #129	@ 0x81
 8008f26:	4813      	ldr	r0, [pc, #76]	@ (8008f74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f28:	f000 fccd 	bl	80098c6 <USBD_GetEpDesc>
 8008f2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d002      	beq.n	8008f3a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	2210      	movs	r2, #16
 8008f38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d006      	beq.n	8008f4e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	2200      	movs	r2, #0
 8008f44:	711a      	strb	r2, [r3, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f042 0202 	orr.w	r2, r2, #2
 8008f4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d006      	beq.n	8008f62 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	711a      	strb	r2, [r3, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f042 0202 	orr.w	r2, r2, #2
 8008f60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2243      	movs	r2, #67	@ 0x43
 8008f66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f68:	4b02      	ldr	r3, [pc, #8]	@ (8008f74 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3718      	adds	r7, #24
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	20000054 	.word	0x20000054

08008f78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f80:	2182      	movs	r1, #130	@ 0x82
 8008f82:	4818      	ldr	r0, [pc, #96]	@ (8008fe4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f84:	f000 fc9f 	bl	80098c6 <USBD_GetEpDesc>
 8008f88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f8a:	2101      	movs	r1, #1
 8008f8c:	4815      	ldr	r0, [pc, #84]	@ (8008fe4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f8e:	f000 fc9a 	bl	80098c6 <USBD_GetEpDesc>
 8008f92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f94:	2181      	movs	r1, #129	@ 0x81
 8008f96:	4813      	ldr	r0, [pc, #76]	@ (8008fe4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f98:	f000 fc95 	bl	80098c6 <USBD_GetEpDesc>
 8008f9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d002      	beq.n	8008faa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	2210      	movs	r2, #16
 8008fa8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d006      	beq.n	8008fbe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fb8:	711a      	strb	r2, [r3, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d006      	beq.n	8008fd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fcc:	711a      	strb	r2, [r3, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2243      	movs	r2, #67	@ 0x43
 8008fd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008fd8:	4b02      	ldr	r3, [pc, #8]	@ (8008fe4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20000054 	.word	0x20000054

08008fe8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	220a      	movs	r2, #10
 8008ff4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008ff6:	4b03      	ldr	r3, [pc, #12]	@ (8009004 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	20000010 	.word	0x20000010

08009008 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d101      	bne.n	800901c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009018:	2303      	movs	r3, #3
 800901a:	e009      	b.n	8009030 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	33b0      	adds	r3, #176	@ 0xb0
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800903c:	b480      	push	{r7}
 800903e:	b087      	sub	sp, #28
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	32b0      	adds	r2, #176	@ 0xb0
 8009052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009056:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d101      	bne.n	8009062 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800905e:	2303      	movs	r3, #3
 8009060:	e008      	b.n	8009074 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	371c      	adds	r7, #28
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	32b0      	adds	r2, #176	@ 0xb0
 8009094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009098:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d101      	bne.n	80090a4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80090a0:	2303      	movs	r3, #3
 80090a2:	e004      	b.n	80090ae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3714      	adds	r7, #20
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
	...

080090bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	32b0      	adds	r2, #176	@ 0xb0
 80090ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	32b0      	adds	r2, #176	@ 0xb0
 80090de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e018      	b.n	800911c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	7c1b      	ldrb	r3, [r3, #16]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10a      	bne.n	8009108 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80090f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009124 <USBD_CDC_ReceivePacket+0x68>)
 80090f4:	7819      	ldrb	r1, [r3, #0]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80090fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 ff9d 	bl	800b040 <USBD_LL_PrepareReceive>
 8009106:	e008      	b.n	800911a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009108:	4b06      	ldr	r3, [pc, #24]	@ (8009124 <USBD_CDC_ReceivePacket+0x68>)
 800910a:	7819      	ldrb	r1, [r3, #0]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009112:	2340      	movs	r3, #64	@ 0x40
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f001 ff93 	bl	800b040 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	20000098 	.word	0x20000098

08009128 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	4613      	mov	r3, r2
 8009134:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d101      	bne.n	8009140 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800913c:	2303      	movs	r3, #3
 800913e:	e01f      	b.n	8009180 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2200      	movs	r2, #0
 8009154:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d003      	beq.n	8009166 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2201      	movs	r2, #1
 800916a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	79fa      	ldrb	r2, [r7, #7]
 8009172:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f001 fe0d 	bl	800ad94 <USBD_LL_Init>
 800917a:	4603      	mov	r3, r0
 800917c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800917e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3718      	adds	r7, #24
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009192:	2300      	movs	r3, #0
 8009194:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d101      	bne.n	80091a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800919c:	2303      	movs	r3, #3
 800919e:	e025      	b.n	80091ec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	32ae      	adds	r2, #174	@ 0xae
 80091b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00f      	beq.n	80091dc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	32ae      	adds	r2, #174	@ 0xae
 80091c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091cc:	f107 020e 	add.w	r2, r7, #14
 80091d0:	4610      	mov	r0, r2
 80091d2:	4798      	blx	r3
 80091d4:	4602      	mov	r2, r0
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80091e2:	1c5a      	adds	r2, r3, #1
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f001 fe15 	bl	800ae2c <USBD_LL_Start>
 8009202:	4603      	mov	r3, r0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009214:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009216:	4618      	mov	r0, r3
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	460b      	mov	r3, r1
 800922c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009238:	2b00      	cmp	r3, #0
 800923a:	d009      	beq.n	8009250 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	78fa      	ldrb	r2, [r7, #3]
 8009246:	4611      	mov	r1, r2
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	4798      	blx	r3
 800924c:	4603      	mov	r3, r0
 800924e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009250:	7bfb      	ldrb	r3, [r7, #15]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b084      	sub	sp, #16
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	460b      	mov	r3, r1
 8009264:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009266:	2300      	movs	r3, #0
 8009268:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	78fa      	ldrb	r2, [r7, #3]
 8009274:	4611      	mov	r1, r2
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	4798      	blx	r3
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d001      	beq.n	8009284 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009280:	2303      	movs	r3, #3
 8009282:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009284:	7bfb      	ldrb	r3, [r7, #15]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b084      	sub	sp, #16
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
 8009296:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800929e:	6839      	ldr	r1, [r7, #0]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f001 f90c 	bl	800a4be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2201      	movs	r2, #1
 80092aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80092b4:	461a      	mov	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80092c2:	f003 031f 	and.w	r3, r3, #31
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d01a      	beq.n	8009300 <USBD_LL_SetupStage+0x72>
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d822      	bhi.n	8009314 <USBD_LL_SetupStage+0x86>
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d002      	beq.n	80092d8 <USBD_LL_SetupStage+0x4a>
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d00a      	beq.n	80092ec <USBD_LL_SetupStage+0x5e>
 80092d6:	e01d      	b.n	8009314 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 fb63 	bl	80099ac <USBD_StdDevReq>
 80092e6:	4603      	mov	r3, r0
 80092e8:	73fb      	strb	r3, [r7, #15]
      break;
 80092ea:	e020      	b.n	800932e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 fbcb 	bl	8009a90 <USBD_StdItfReq>
 80092fa:	4603      	mov	r3, r0
 80092fc:	73fb      	strb	r3, [r7, #15]
      break;
 80092fe:	e016      	b.n	800932e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 fc2d 	bl	8009b68 <USBD_StdEPReq>
 800930e:	4603      	mov	r3, r0
 8009310:	73fb      	strb	r3, [r7, #15]
      break;
 8009312:	e00c      	b.n	800932e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800931a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800931e:	b2db      	uxtb	r3, r3
 8009320:	4619      	mov	r1, r3
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f001 fde2 	bl	800aeec <USBD_LL_StallEP>
 8009328:	4603      	mov	r3, r0
 800932a:	73fb      	strb	r3, [r7, #15]
      break;
 800932c:	bf00      	nop
  }

  return ret;
 800932e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	460b      	mov	r3, r1
 8009342:	607a      	str	r2, [r7, #4]
 8009344:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800934a:	7afb      	ldrb	r3, [r7, #11]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d16e      	bne.n	800942e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009356:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800935e:	2b03      	cmp	r3, #3
 8009360:	f040 8098 	bne.w	8009494 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	689a      	ldr	r2, [r3, #8]
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	429a      	cmp	r2, r3
 800936e:	d913      	bls.n	8009398 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	689a      	ldr	r2, [r3, #8]
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	1ad2      	subs	r2, r2, r3
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	68da      	ldr	r2, [r3, #12]
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	4293      	cmp	r3, r2
 8009388:	bf28      	it	cs
 800938a:	4613      	movcs	r3, r2
 800938c:	461a      	mov	r2, r3
 800938e:	6879      	ldr	r1, [r7, #4]
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f001 f994 	bl	800a6be <USBD_CtlContinueRx>
 8009396:	e07d      	b.n	8009494 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800939e:	f003 031f 	and.w	r3, r3, #31
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d014      	beq.n	80093d0 <USBD_LL_DataOutStage+0x98>
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d81d      	bhi.n	80093e6 <USBD_LL_DataOutStage+0xae>
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d002      	beq.n	80093b4 <USBD_LL_DataOutStage+0x7c>
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d003      	beq.n	80093ba <USBD_LL_DataOutStage+0x82>
 80093b2:	e018      	b.n	80093e6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80093b4:	2300      	movs	r3, #0
 80093b6:	75bb      	strb	r3, [r7, #22]
            break;
 80093b8:	e018      	b.n	80093ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	4619      	mov	r1, r3
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f000 fa64 	bl	8009892 <USBD_CoreFindIF>
 80093ca:	4603      	mov	r3, r0
 80093cc:	75bb      	strb	r3, [r7, #22]
            break;
 80093ce:	e00d      	b.n	80093ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	4619      	mov	r1, r3
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f000 fa66 	bl	80098ac <USBD_CoreFindEP>
 80093e0:	4603      	mov	r3, r0
 80093e2:	75bb      	strb	r3, [r7, #22]
            break;
 80093e4:	e002      	b.n	80093ec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80093e6:	2300      	movs	r3, #0
 80093e8:	75bb      	strb	r3, [r7, #22]
            break;
 80093ea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80093ec:	7dbb      	ldrb	r3, [r7, #22]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d119      	bne.n	8009426 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	d113      	bne.n	8009426 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80093fe:	7dba      	ldrb	r2, [r7, #22]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	32ae      	adds	r2, #174	@ 0xae
 8009404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00b      	beq.n	8009426 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800940e:	7dba      	ldrb	r2, [r7, #22]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009416:	7dba      	ldrb	r2, [r7, #22]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	32ae      	adds	r2, #174	@ 0xae
 800941c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f001 f95a 	bl	800a6e0 <USBD_CtlSendStatus>
 800942c:	e032      	b.n	8009494 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800942e:	7afb      	ldrb	r3, [r7, #11]
 8009430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009434:	b2db      	uxtb	r3, r3
 8009436:	4619      	mov	r1, r3
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 fa37 	bl	80098ac <USBD_CoreFindEP>
 800943e:	4603      	mov	r3, r0
 8009440:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009442:	7dbb      	ldrb	r3, [r7, #22]
 8009444:	2bff      	cmp	r3, #255	@ 0xff
 8009446:	d025      	beq.n	8009494 <USBD_LL_DataOutStage+0x15c>
 8009448:	7dbb      	ldrb	r3, [r7, #22]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d122      	bne.n	8009494 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b03      	cmp	r3, #3
 8009458:	d117      	bne.n	800948a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800945a:	7dba      	ldrb	r2, [r7, #22]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	32ae      	adds	r2, #174	@ 0xae
 8009460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00f      	beq.n	800948a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800946a:	7dba      	ldrb	r2, [r7, #22]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009472:	7dba      	ldrb	r2, [r7, #22]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	32ae      	adds	r2, #174	@ 0xae
 8009478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	7afa      	ldrb	r2, [r7, #11]
 8009480:	4611      	mov	r1, r2
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	4798      	blx	r3
 8009486:	4603      	mov	r3, r0
 8009488:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800948a:	7dfb      	ldrb	r3, [r7, #23]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d001      	beq.n	8009494 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009490:	7dfb      	ldrb	r3, [r7, #23]
 8009492:	e000      	b.n	8009496 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3718      	adds	r7, #24
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b086      	sub	sp, #24
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	60f8      	str	r0, [r7, #12]
 80094a6:	460b      	mov	r3, r1
 80094a8:	607a      	str	r2, [r7, #4]
 80094aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80094ac:	7afb      	ldrb	r3, [r7, #11]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d16f      	bne.n	8009592 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3314      	adds	r3, #20
 80094b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d15a      	bne.n	8009578 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	689a      	ldr	r2, [r3, #8]
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d914      	bls.n	80094f8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	689a      	ldr	r2, [r3, #8]
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	1ad2      	subs	r2, r2, r3
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	461a      	mov	r2, r3
 80094e2:	6879      	ldr	r1, [r7, #4]
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f001 f8bc 	bl	800a662 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094ea:	2300      	movs	r3, #0
 80094ec:	2200      	movs	r2, #0
 80094ee:	2100      	movs	r1, #0
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f001 fda5 	bl	800b040 <USBD_LL_PrepareReceive>
 80094f6:	e03f      	b.n	8009578 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	68da      	ldr	r2, [r3, #12]
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	429a      	cmp	r2, r3
 8009502:	d11c      	bne.n	800953e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	685a      	ldr	r2, [r3, #4]
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800950c:	429a      	cmp	r2, r3
 800950e:	d316      	bcc.n	800953e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	685a      	ldr	r2, [r3, #4]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800951a:	429a      	cmp	r2, r3
 800951c:	d20f      	bcs.n	800953e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800951e:	2200      	movs	r2, #0
 8009520:	2100      	movs	r1, #0
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f001 f89d 	bl	800a662 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2200      	movs	r2, #0
 800952c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009530:	2300      	movs	r3, #0
 8009532:	2200      	movs	r2, #0
 8009534:	2100      	movs	r1, #0
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f001 fd82 	bl	800b040 <USBD_LL_PrepareReceive>
 800953c:	e01c      	b.n	8009578 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b03      	cmp	r3, #3
 8009548:	d10f      	bne.n	800956a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d009      	beq.n	800956a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800956a:	2180      	movs	r1, #128	@ 0x80
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f001 fcbd 	bl	800aeec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f001 f8c7 	bl	800a706 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d03a      	beq.n	80095f8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	f7ff fe42 	bl	800920c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009590:	e032      	b.n	80095f8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009592:	7afb      	ldrb	r3, [r7, #11]
 8009594:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009598:	b2db      	uxtb	r3, r3
 800959a:	4619      	mov	r1, r3
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 f985 	bl	80098ac <USBD_CoreFindEP>
 80095a2:	4603      	mov	r3, r0
 80095a4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095a6:	7dfb      	ldrb	r3, [r7, #23]
 80095a8:	2bff      	cmp	r3, #255	@ 0xff
 80095aa:	d025      	beq.n	80095f8 <USBD_LL_DataInStage+0x15a>
 80095ac:	7dfb      	ldrb	r3, [r7, #23]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d122      	bne.n	80095f8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b03      	cmp	r3, #3
 80095bc:	d11c      	bne.n	80095f8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80095be:	7dfa      	ldrb	r2, [r7, #23]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	32ae      	adds	r2, #174	@ 0xae
 80095c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d014      	beq.n	80095f8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80095ce:	7dfa      	ldrb	r2, [r7, #23]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80095d6:	7dfa      	ldrb	r2, [r7, #23]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	32ae      	adds	r2, #174	@ 0xae
 80095dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e0:	695b      	ldr	r3, [r3, #20]
 80095e2:	7afa      	ldrb	r2, [r7, #11]
 80095e4:	4611      	mov	r1, r2
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	4798      	blx	r3
 80095ea:	4603      	mov	r3, r0
 80095ec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80095ee:	7dbb      	ldrb	r3, [r7, #22]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d001      	beq.n	80095f8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80095f4:	7dbb      	ldrb	r3, [r7, #22]
 80095f6:	e000      	b.n	80095fa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3718      	adds	r7, #24
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b084      	sub	sp, #16
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800960a:	2300      	movs	r3, #0
 800960c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2201      	movs	r2, #1
 8009612:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800963a:	2b00      	cmp	r3, #0
 800963c:	d014      	beq.n	8009668 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00e      	beq.n	8009668 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	6852      	ldr	r2, [r2, #4]
 8009656:	b2d2      	uxtb	r2, r2
 8009658:	4611      	mov	r1, r2
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	4798      	blx	r3
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009664:	2303      	movs	r3, #3
 8009666:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009668:	2340      	movs	r3, #64	@ 0x40
 800966a:	2200      	movs	r2, #0
 800966c:	2100      	movs	r1, #0
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f001 fbf7 	bl	800ae62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2240      	movs	r2, #64	@ 0x40
 8009680:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009684:	2340      	movs	r3, #64	@ 0x40
 8009686:	2200      	movs	r2, #0
 8009688:	2180      	movs	r1, #128	@ 0x80
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f001 fbe9 	bl	800ae62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2240      	movs	r2, #64	@ 0x40
 800969a:	621a      	str	r2, [r3, #32]

  return ret;
 800969c:	7bfb      	ldrb	r3, [r7, #15]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80096a6:	b480      	push	{r7}
 80096a8:	b083      	sub	sp, #12
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	460b      	mov	r3, r1
 80096b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	78fa      	ldrb	r2, [r7, #3]
 80096b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	370c      	adds	r7, #12
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80096c6:	b480      	push	{r7}
 80096c8:	b083      	sub	sp, #12
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b04      	cmp	r3, #4
 80096d8:	d006      	beq.n	80096e8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2204      	movs	r2, #4
 80096ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80096fe:	b480      	push	{r7}
 8009700:	b083      	sub	sp, #12
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800970c:	b2db      	uxtb	r3, r3
 800970e:	2b04      	cmp	r3, #4
 8009710:	d106      	bne.n	8009720 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009718:	b2da      	uxtb	r2, r3
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	370c      	adds	r7, #12
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr

0800972e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b082      	sub	sp, #8
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800973c:	b2db      	uxtb	r3, r3
 800973e:	2b03      	cmp	r3, #3
 8009740:	d110      	bne.n	8009764 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00b      	beq.n	8009764 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009752:	69db      	ldr	r3, [r3, #28]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d005      	beq.n	8009764 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800975e:	69db      	ldr	r3, [r3, #28]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b082      	sub	sp, #8
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	460b      	mov	r3, r1
 8009778:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	32ae      	adds	r2, #174	@ 0xae
 8009784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d101      	bne.n	8009790 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800978c:	2303      	movs	r3, #3
 800978e:	e01c      	b.n	80097ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009796:	b2db      	uxtb	r3, r3
 8009798:	2b03      	cmp	r3, #3
 800979a:	d115      	bne.n	80097c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	32ae      	adds	r2, #174	@ 0xae
 80097a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097aa:	6a1b      	ldr	r3, [r3, #32]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00b      	beq.n	80097c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	32ae      	adds	r2, #174	@ 0xae
 80097ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097be:	6a1b      	ldr	r3, [r3, #32]
 80097c0:	78fa      	ldrb	r2, [r7, #3]
 80097c2:	4611      	mov	r1, r2
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b082      	sub	sp, #8
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	460b      	mov	r3, r1
 80097dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	32ae      	adds	r2, #174	@ 0xae
 80097e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d101      	bne.n	80097f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80097f0:	2303      	movs	r3, #3
 80097f2:	e01c      	b.n	800982e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	2b03      	cmp	r3, #3
 80097fe:	d115      	bne.n	800982c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	32ae      	adds	r2, #174	@ 0xae
 800980a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800980e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00b      	beq.n	800982c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	32ae      	adds	r2, #174	@ 0xae
 800981e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009824:	78fa      	ldrb	r2, [r7, #3]
 8009826:	4611      	mov	r1, r2
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009836:	b480      	push	{r7}
 8009838:	b083      	sub	sp, #12
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00e      	beq.n	8009888 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	6852      	ldr	r2, [r2, #4]
 8009876:	b2d2      	uxtb	r2, r2
 8009878:	4611      	mov	r1, r2
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	4798      	blx	r3
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d001      	beq.n	8009888 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009884:	2303      	movs	r3, #3
 8009886:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009888:	7bfb      	ldrb	r3, [r7, #15]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009892:	b480      	push	{r7}
 8009894:	b083      	sub	sp, #12
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	460b      	mov	r3, r1
 800989c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800989e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	460b      	mov	r3, r1
 80098b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80098b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	370c      	adds	r7, #12
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr

080098c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b086      	sub	sp, #24
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	460b      	mov	r3, r1
 80098d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80098da:	2300      	movs	r3, #0
 80098dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	885b      	ldrh	r3, [r3, #2]
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	7812      	ldrb	r2, [r2, #0]
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d91f      	bls.n	800992c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80098f2:	e013      	b.n	800991c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80098f4:	f107 030a 	add.w	r3, r7, #10
 80098f8:	4619      	mov	r1, r3
 80098fa:	6978      	ldr	r0, [r7, #20]
 80098fc:	f000 f81b 	bl	8009936 <USBD_GetNextDesc>
 8009900:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	785b      	ldrb	r3, [r3, #1]
 8009906:	2b05      	cmp	r3, #5
 8009908:	d108      	bne.n	800991c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	789b      	ldrb	r3, [r3, #2]
 8009912:	78fa      	ldrb	r2, [r7, #3]
 8009914:	429a      	cmp	r2, r3
 8009916:	d008      	beq.n	800992a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009918:	2300      	movs	r3, #0
 800991a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	885b      	ldrh	r3, [r3, #2]
 8009920:	b29a      	uxth	r2, r3
 8009922:	897b      	ldrh	r3, [r7, #10]
 8009924:	429a      	cmp	r2, r3
 8009926:	d8e5      	bhi.n	80098f4 <USBD_GetEpDesc+0x2e>
 8009928:	e000      	b.n	800992c <USBD_GetEpDesc+0x66>
          break;
 800992a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800992c:	693b      	ldr	r3, [r7, #16]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3718      	adds	r7, #24
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009936:	b480      	push	{r7}
 8009938:	b085      	sub	sp, #20
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	7812      	ldrb	r2, [r2, #0]
 800994c:	4413      	add	r3, r2
 800994e:	b29a      	uxth	r2, r3
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	461a      	mov	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4413      	add	r3, r2
 800995e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009960:	68fb      	ldr	r3, [r7, #12]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr

0800996e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800996e:	b480      	push	{r7}
 8009970:	b087      	sub	sp, #28
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	3301      	adds	r3, #1
 8009984:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800998c:	8a3b      	ldrh	r3, [r7, #16]
 800998e:	021b      	lsls	r3, r3, #8
 8009990:	b21a      	sxth	r2, r3
 8009992:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009996:	4313      	orrs	r3, r2
 8009998:	b21b      	sxth	r3, r3
 800999a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800999c:	89fb      	ldrh	r3, [r7, #14]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	371c      	adds	r7, #28
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
	...

080099ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099b6:	2300      	movs	r3, #0
 80099b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80099c2:	2b40      	cmp	r3, #64	@ 0x40
 80099c4:	d005      	beq.n	80099d2 <USBD_StdDevReq+0x26>
 80099c6:	2b40      	cmp	r3, #64	@ 0x40
 80099c8:	d857      	bhi.n	8009a7a <USBD_StdDevReq+0xce>
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00f      	beq.n	80099ee <USBD_StdDevReq+0x42>
 80099ce:	2b20      	cmp	r3, #32
 80099d0:	d153      	bne.n	8009a7a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	32ae      	adds	r2, #174	@ 0xae
 80099dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	6839      	ldr	r1, [r7, #0]
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	4798      	blx	r3
 80099e8:	4603      	mov	r3, r0
 80099ea:	73fb      	strb	r3, [r7, #15]
      break;
 80099ec:	e04a      	b.n	8009a84 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	785b      	ldrb	r3, [r3, #1]
 80099f2:	2b09      	cmp	r3, #9
 80099f4:	d83b      	bhi.n	8009a6e <USBD_StdDevReq+0xc2>
 80099f6:	a201      	add	r2, pc, #4	@ (adr r2, 80099fc <USBD_StdDevReq+0x50>)
 80099f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fc:	08009a51 	.word	0x08009a51
 8009a00:	08009a65 	.word	0x08009a65
 8009a04:	08009a6f 	.word	0x08009a6f
 8009a08:	08009a5b 	.word	0x08009a5b
 8009a0c:	08009a6f 	.word	0x08009a6f
 8009a10:	08009a2f 	.word	0x08009a2f
 8009a14:	08009a25 	.word	0x08009a25
 8009a18:	08009a6f 	.word	0x08009a6f
 8009a1c:	08009a47 	.word	0x08009a47
 8009a20:	08009a39 	.word	0x08009a39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fa3c 	bl	8009ea4 <USBD_GetDescriptor>
          break;
 8009a2c:	e024      	b.n	8009a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fba1 	bl	800a178 <USBD_SetAddress>
          break;
 8009a36:	e01f      	b.n	8009a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fbe0 	bl	800a200 <USBD_SetConfig>
 8009a40:	4603      	mov	r3, r0
 8009a42:	73fb      	strb	r3, [r7, #15]
          break;
 8009a44:	e018      	b.n	8009a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fc83 	bl	800a354 <USBD_GetConfig>
          break;
 8009a4e:	e013      	b.n	8009a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a50:	6839      	ldr	r1, [r7, #0]
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fcb4 	bl	800a3c0 <USBD_GetStatus>
          break;
 8009a58:	e00e      	b.n	8009a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fce3 	bl	800a428 <USBD_SetFeature>
          break;
 8009a62:	e009      	b.n	8009a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fd07 	bl	800a47a <USBD_ClrFeature>
          break;
 8009a6c:	e004      	b.n	8009a78 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fd5e 	bl	800a532 <USBD_CtlError>
          break;
 8009a76:	bf00      	nop
      }
      break;
 8009a78:	e004      	b.n	8009a84 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009a7a:	6839      	ldr	r1, [r7, #0]
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 fd58 	bl	800a532 <USBD_CtlError>
      break;
 8009a82:	bf00      	nop
  }

  return ret;
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop

08009a90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009aa6:	2b40      	cmp	r3, #64	@ 0x40
 8009aa8:	d005      	beq.n	8009ab6 <USBD_StdItfReq+0x26>
 8009aaa:	2b40      	cmp	r3, #64	@ 0x40
 8009aac:	d852      	bhi.n	8009b54 <USBD_StdItfReq+0xc4>
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d001      	beq.n	8009ab6 <USBD_StdItfReq+0x26>
 8009ab2:	2b20      	cmp	r3, #32
 8009ab4:	d14e      	bne.n	8009b54 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d840      	bhi.n	8009b46 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	889b      	ldrh	r3, [r3, #4]
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d836      	bhi.n	8009b3c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	889b      	ldrh	r3, [r3, #4]
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7ff fedb 	bl	8009892 <USBD_CoreFindIF>
 8009adc:	4603      	mov	r3, r0
 8009ade:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ae0:	7bbb      	ldrb	r3, [r7, #14]
 8009ae2:	2bff      	cmp	r3, #255	@ 0xff
 8009ae4:	d01d      	beq.n	8009b22 <USBD_StdItfReq+0x92>
 8009ae6:	7bbb      	ldrb	r3, [r7, #14]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d11a      	bne.n	8009b22 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009aec:	7bba      	ldrb	r2, [r7, #14]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	32ae      	adds	r2, #174	@ 0xae
 8009af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00f      	beq.n	8009b1c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009afc:	7bba      	ldrb	r2, [r7, #14]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b04:	7bba      	ldrb	r2, [r7, #14]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	32ae      	adds	r2, #174	@ 0xae
 8009b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	6839      	ldr	r1, [r7, #0]
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	4798      	blx	r3
 8009b16:	4603      	mov	r3, r0
 8009b18:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b1a:	e004      	b.n	8009b26 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b20:	e001      	b.n	8009b26 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009b22:	2303      	movs	r3, #3
 8009b24:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	88db      	ldrh	r3, [r3, #6]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d110      	bne.n	8009b50 <USBD_StdItfReq+0xc0>
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d10d      	bne.n	8009b50 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fdd3 	bl	800a6e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009b3a:	e009      	b.n	8009b50 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fcf7 	bl	800a532 <USBD_CtlError>
          break;
 8009b44:	e004      	b.n	8009b50 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009b46:	6839      	ldr	r1, [r7, #0]
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 fcf2 	bl	800a532 <USBD_CtlError>
          break;
 8009b4e:	e000      	b.n	8009b52 <USBD_StdItfReq+0xc2>
          break;
 8009b50:	bf00      	nop
      }
      break;
 8009b52:	e004      	b.n	8009b5e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fceb 	bl	800a532 <USBD_CtlError>
      break;
 8009b5c:	bf00      	nop
  }

  return ret;
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b72:	2300      	movs	r3, #0
 8009b74:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	889b      	ldrh	r3, [r3, #4]
 8009b7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b84:	2b40      	cmp	r3, #64	@ 0x40
 8009b86:	d007      	beq.n	8009b98 <USBD_StdEPReq+0x30>
 8009b88:	2b40      	cmp	r3, #64	@ 0x40
 8009b8a:	f200 817f 	bhi.w	8009e8c <USBD_StdEPReq+0x324>
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d02a      	beq.n	8009be8 <USBD_StdEPReq+0x80>
 8009b92:	2b20      	cmp	r3, #32
 8009b94:	f040 817a 	bne.w	8009e8c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009b98:	7bbb      	ldrb	r3, [r7, #14]
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7ff fe85 	bl	80098ac <USBD_CoreFindEP>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ba6:	7b7b      	ldrb	r3, [r7, #13]
 8009ba8:	2bff      	cmp	r3, #255	@ 0xff
 8009baa:	f000 8174 	beq.w	8009e96 <USBD_StdEPReq+0x32e>
 8009bae:	7b7b      	ldrb	r3, [r7, #13]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f040 8170 	bne.w	8009e96 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009bb6:	7b7a      	ldrb	r2, [r7, #13]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009bbe:	7b7a      	ldrb	r2, [r7, #13]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	32ae      	adds	r2, #174	@ 0xae
 8009bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	f000 8163 	beq.w	8009e96 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009bd0:	7b7a      	ldrb	r2, [r7, #13]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	32ae      	adds	r2, #174	@ 0xae
 8009bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	4798      	blx	r3
 8009be2:	4603      	mov	r3, r0
 8009be4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009be6:	e156      	b.n	8009e96 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	785b      	ldrb	r3, [r3, #1]
 8009bec:	2b03      	cmp	r3, #3
 8009bee:	d008      	beq.n	8009c02 <USBD_StdEPReq+0x9a>
 8009bf0:	2b03      	cmp	r3, #3
 8009bf2:	f300 8145 	bgt.w	8009e80 <USBD_StdEPReq+0x318>
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f000 809b 	beq.w	8009d32 <USBD_StdEPReq+0x1ca>
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d03c      	beq.n	8009c7a <USBD_StdEPReq+0x112>
 8009c00:	e13e      	b.n	8009e80 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d002      	beq.n	8009c14 <USBD_StdEPReq+0xac>
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	d016      	beq.n	8009c40 <USBD_StdEPReq+0xd8>
 8009c12:	e02c      	b.n	8009c6e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c14:	7bbb      	ldrb	r3, [r7, #14]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00d      	beq.n	8009c36 <USBD_StdEPReq+0xce>
 8009c1a:	7bbb      	ldrb	r3, [r7, #14]
 8009c1c:	2b80      	cmp	r3, #128	@ 0x80
 8009c1e:	d00a      	beq.n	8009c36 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c20:	7bbb      	ldrb	r3, [r7, #14]
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f001 f961 	bl	800aeec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c2a:	2180      	movs	r1, #128	@ 0x80
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f001 f95d 	bl	800aeec <USBD_LL_StallEP>
 8009c32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c34:	e020      	b.n	8009c78 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fc7a 	bl	800a532 <USBD_CtlError>
              break;
 8009c3e:	e01b      	b.n	8009c78 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	885b      	ldrh	r3, [r3, #2]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d10e      	bne.n	8009c66 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009c48:	7bbb      	ldrb	r3, [r7, #14]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00b      	beq.n	8009c66 <USBD_StdEPReq+0xfe>
 8009c4e:	7bbb      	ldrb	r3, [r7, #14]
 8009c50:	2b80      	cmp	r3, #128	@ 0x80
 8009c52:	d008      	beq.n	8009c66 <USBD_StdEPReq+0xfe>
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	88db      	ldrh	r3, [r3, #6]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d104      	bne.n	8009c66 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c5c:	7bbb      	ldrb	r3, [r7, #14]
 8009c5e:	4619      	mov	r1, r3
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f001 f943 	bl	800aeec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fd3a 	bl	800a6e0 <USBD_CtlSendStatus>

              break;
 8009c6c:	e004      	b.n	8009c78 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fc5e 	bl	800a532 <USBD_CtlError>
              break;
 8009c76:	bf00      	nop
          }
          break;
 8009c78:	e107      	b.n	8009e8a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	2b02      	cmp	r3, #2
 8009c84:	d002      	beq.n	8009c8c <USBD_StdEPReq+0x124>
 8009c86:	2b03      	cmp	r3, #3
 8009c88:	d016      	beq.n	8009cb8 <USBD_StdEPReq+0x150>
 8009c8a:	e04b      	b.n	8009d24 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c8c:	7bbb      	ldrb	r3, [r7, #14]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00d      	beq.n	8009cae <USBD_StdEPReq+0x146>
 8009c92:	7bbb      	ldrb	r3, [r7, #14]
 8009c94:	2b80      	cmp	r3, #128	@ 0x80
 8009c96:	d00a      	beq.n	8009cae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c98:	7bbb      	ldrb	r3, [r7, #14]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f001 f925 	bl	800aeec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ca2:	2180      	movs	r1, #128	@ 0x80
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f001 f921 	bl	800aeec <USBD_LL_StallEP>
 8009caa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009cac:	e040      	b.n	8009d30 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fc3e 	bl	800a532 <USBD_CtlError>
              break;
 8009cb6:	e03b      	b.n	8009d30 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	885b      	ldrh	r3, [r3, #2]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d136      	bne.n	8009d2e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009cc0:	7bbb      	ldrb	r3, [r7, #14]
 8009cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d004      	beq.n	8009cd4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009cca:	7bbb      	ldrb	r3, [r7, #14]
 8009ccc:	4619      	mov	r1, r3
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f001 f92b 	bl	800af2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 fd03 	bl	800a6e0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009cda:	7bbb      	ldrb	r3, [r7, #14]
 8009cdc:	4619      	mov	r1, r3
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7ff fde4 	bl	80098ac <USBD_CoreFindEP>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ce8:	7b7b      	ldrb	r3, [r7, #13]
 8009cea:	2bff      	cmp	r3, #255	@ 0xff
 8009cec:	d01f      	beq.n	8009d2e <USBD_StdEPReq+0x1c6>
 8009cee:	7b7b      	ldrb	r3, [r7, #13]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d11c      	bne.n	8009d2e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009cf4:	7b7a      	ldrb	r2, [r7, #13]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009cfc:	7b7a      	ldrb	r2, [r7, #13]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	32ae      	adds	r2, #174	@ 0xae
 8009d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d010      	beq.n	8009d2e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d0c:	7b7a      	ldrb	r2, [r7, #13]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	32ae      	adds	r2, #174	@ 0xae
 8009d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	6839      	ldr	r1, [r7, #0]
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	4798      	blx	r3
 8009d1e:	4603      	mov	r3, r0
 8009d20:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009d22:	e004      	b.n	8009d2e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fc03 	bl	800a532 <USBD_CtlError>
              break;
 8009d2c:	e000      	b.n	8009d30 <USBD_StdEPReq+0x1c8>
              break;
 8009d2e:	bf00      	nop
          }
          break;
 8009d30:	e0ab      	b.n	8009e8a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	2b02      	cmp	r3, #2
 8009d3c:	d002      	beq.n	8009d44 <USBD_StdEPReq+0x1dc>
 8009d3e:	2b03      	cmp	r3, #3
 8009d40:	d032      	beq.n	8009da8 <USBD_StdEPReq+0x240>
 8009d42:	e097      	b.n	8009e74 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d007      	beq.n	8009d5a <USBD_StdEPReq+0x1f2>
 8009d4a:	7bbb      	ldrb	r3, [r7, #14]
 8009d4c:	2b80      	cmp	r3, #128	@ 0x80
 8009d4e:	d004      	beq.n	8009d5a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 fbed 	bl	800a532 <USBD_CtlError>
                break;
 8009d58:	e091      	b.n	8009e7e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	da0b      	bge.n	8009d7a <USBD_StdEPReq+0x212>
 8009d62:	7bbb      	ldrb	r3, [r7, #14]
 8009d64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d68:	4613      	mov	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4413      	add	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	3310      	adds	r3, #16
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	4413      	add	r3, r2
 8009d76:	3304      	adds	r3, #4
 8009d78:	e00b      	b.n	8009d92 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d7a:	7bbb      	ldrb	r3, [r7, #14]
 8009d7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d80:	4613      	mov	r3, r2
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	4413      	add	r3, r2
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	4413      	add	r3, r2
 8009d90:	3304      	adds	r3, #4
 8009d92:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	2200      	movs	r2, #0
 8009d98:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	2202      	movs	r2, #2
 8009d9e:	4619      	mov	r1, r3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fc43 	bl	800a62c <USBD_CtlSendData>
              break;
 8009da6:	e06a      	b.n	8009e7e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009da8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	da11      	bge.n	8009dd4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009db0:	7bbb      	ldrb	r3, [r7, #14]
 8009db2:	f003 020f 	and.w	r2, r3, #15
 8009db6:	6879      	ldr	r1, [r7, #4]
 8009db8:	4613      	mov	r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	440b      	add	r3, r1
 8009dc2:	3324      	adds	r3, #36	@ 0x24
 8009dc4:	881b      	ldrh	r3, [r3, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d117      	bne.n	8009dfa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fbb0 	bl	800a532 <USBD_CtlError>
                  break;
 8009dd2:	e054      	b.n	8009e7e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009dd4:	7bbb      	ldrb	r3, [r7, #14]
 8009dd6:	f003 020f 	and.w	r2, r3, #15
 8009dda:	6879      	ldr	r1, [r7, #4]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	440b      	add	r3, r1
 8009de6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009dea:	881b      	ldrh	r3, [r3, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d104      	bne.n	8009dfa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009df0:	6839      	ldr	r1, [r7, #0]
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 fb9d 	bl	800a532 <USBD_CtlError>
                  break;
 8009df8:	e041      	b.n	8009e7e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009dfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	da0b      	bge.n	8009e1a <USBD_StdEPReq+0x2b2>
 8009e02:	7bbb      	ldrb	r3, [r7, #14]
 8009e04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e08:	4613      	mov	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	4413      	add	r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	3310      	adds	r3, #16
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	4413      	add	r3, r2
 8009e16:	3304      	adds	r3, #4
 8009e18:	e00b      	b.n	8009e32 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e1a:	7bbb      	ldrb	r3, [r7, #14]
 8009e1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e20:	4613      	mov	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	4413      	add	r3, r2
 8009e30:	3304      	adds	r3, #4
 8009e32:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009e34:	7bbb      	ldrb	r3, [r7, #14]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d002      	beq.n	8009e40 <USBD_StdEPReq+0x2d8>
 8009e3a:	7bbb      	ldrb	r3, [r7, #14]
 8009e3c:	2b80      	cmp	r3, #128	@ 0x80
 8009e3e:	d103      	bne.n	8009e48 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	2200      	movs	r2, #0
 8009e44:	601a      	str	r2, [r3, #0]
 8009e46:	e00e      	b.n	8009e66 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009e48:	7bbb      	ldrb	r3, [r7, #14]
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f001 f88b 	bl	800af68 <USBD_LL_IsStallEP>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d003      	beq.n	8009e60 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	e002      	b.n	8009e66 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	2200      	movs	r2, #0
 8009e64:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	2202      	movs	r2, #2
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 fbdd 	bl	800a62c <USBD_CtlSendData>
              break;
 8009e72:	e004      	b.n	8009e7e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fb5b 	bl	800a532 <USBD_CtlError>
              break;
 8009e7c:	bf00      	nop
          }
          break;
 8009e7e:	e004      	b.n	8009e8a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009e80:	6839      	ldr	r1, [r7, #0]
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fb55 	bl	800a532 <USBD_CtlError>
          break;
 8009e88:	bf00      	nop
      }
      break;
 8009e8a:	e005      	b.n	8009e98 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 fb4f 	bl	800a532 <USBD_CtlError>
      break;
 8009e94:	e000      	b.n	8009e98 <USBD_StdEPReq+0x330>
      break;
 8009e96:	bf00      	nop
  }

  return ret;
 8009e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
	...

08009ea4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	885b      	ldrh	r3, [r3, #2]
 8009ebe:	0a1b      	lsrs	r3, r3, #8
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	2b06      	cmp	r3, #6
 8009ec6:	f200 8128 	bhi.w	800a11a <USBD_GetDescriptor+0x276>
 8009eca:	a201      	add	r2, pc, #4	@ (adr r2, 8009ed0 <USBD_GetDescriptor+0x2c>)
 8009ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed0:	08009eed 	.word	0x08009eed
 8009ed4:	08009f05 	.word	0x08009f05
 8009ed8:	08009f45 	.word	0x08009f45
 8009edc:	0800a11b 	.word	0x0800a11b
 8009ee0:	0800a11b 	.word	0x0800a11b
 8009ee4:	0800a0bb 	.word	0x0800a0bb
 8009ee8:	0800a0e7 	.word	0x0800a0e7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	7c12      	ldrb	r2, [r2, #16]
 8009ef8:	f107 0108 	add.w	r1, r7, #8
 8009efc:	4610      	mov	r0, r2
 8009efe:	4798      	blx	r3
 8009f00:	60f8      	str	r0, [r7, #12]
      break;
 8009f02:	e112      	b.n	800a12a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	7c1b      	ldrb	r3, [r3, #16]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10d      	bne.n	8009f28 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f14:	f107 0208 	add.w	r2, r7, #8
 8009f18:	4610      	mov	r0, r2
 8009f1a:	4798      	blx	r3
 8009f1c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	3301      	adds	r3, #1
 8009f22:	2202      	movs	r2, #2
 8009f24:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009f26:	e100      	b.n	800a12a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f30:	f107 0208 	add.w	r2, r7, #8
 8009f34:	4610      	mov	r0, r2
 8009f36:	4798      	blx	r3
 8009f38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	2202      	movs	r2, #2
 8009f40:	701a      	strb	r2, [r3, #0]
      break;
 8009f42:	e0f2      	b.n	800a12a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	885b      	ldrh	r3, [r3, #2]
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b05      	cmp	r3, #5
 8009f4c:	f200 80ac 	bhi.w	800a0a8 <USBD_GetDescriptor+0x204>
 8009f50:	a201      	add	r2, pc, #4	@ (adr r2, 8009f58 <USBD_GetDescriptor+0xb4>)
 8009f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f56:	bf00      	nop
 8009f58:	08009f71 	.word	0x08009f71
 8009f5c:	08009fa5 	.word	0x08009fa5
 8009f60:	08009fd9 	.word	0x08009fd9
 8009f64:	0800a00d 	.word	0x0800a00d
 8009f68:	0800a041 	.word	0x0800a041
 8009f6c:	0800a075 	.word	0x0800a075
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00b      	beq.n	8009f94 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	7c12      	ldrb	r2, [r2, #16]
 8009f88:	f107 0108 	add.w	r1, r7, #8
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	4798      	blx	r3
 8009f90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f92:	e091      	b.n	800a0b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 facb 	bl	800a532 <USBD_CtlError>
            err++;
 8009f9c:	7afb      	ldrb	r3, [r7, #11]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	72fb      	strb	r3, [r7, #11]
          break;
 8009fa2:	e089      	b.n	800a0b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00b      	beq.n	8009fc8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	7c12      	ldrb	r2, [r2, #16]
 8009fbc:	f107 0108 	add.w	r1, r7, #8
 8009fc0:	4610      	mov	r0, r2
 8009fc2:	4798      	blx	r3
 8009fc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fc6:	e077      	b.n	800a0b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fc8:	6839      	ldr	r1, [r7, #0]
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 fab1 	bl	800a532 <USBD_CtlError>
            err++;
 8009fd0:	7afb      	ldrb	r3, [r7, #11]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	72fb      	strb	r3, [r7, #11]
          break;
 8009fd6:	e06f      	b.n	800a0b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d00b      	beq.n	8009ffc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	7c12      	ldrb	r2, [r2, #16]
 8009ff0:	f107 0108 	add.w	r1, r7, #8
 8009ff4:	4610      	mov	r0, r2
 8009ff6:	4798      	blx	r3
 8009ff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ffa:	e05d      	b.n	800a0b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ffc:	6839      	ldr	r1, [r7, #0]
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 fa97 	bl	800a532 <USBD_CtlError>
            err++;
 800a004:	7afb      	ldrb	r3, [r7, #11]
 800a006:	3301      	adds	r3, #1
 800a008:	72fb      	strb	r3, [r7, #11]
          break;
 800a00a:	e055      	b.n	800a0b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00b      	beq.n	800a030 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a01e:	691b      	ldr	r3, [r3, #16]
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	7c12      	ldrb	r2, [r2, #16]
 800a024:	f107 0108 	add.w	r1, r7, #8
 800a028:	4610      	mov	r0, r2
 800a02a:	4798      	blx	r3
 800a02c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a02e:	e043      	b.n	800a0b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a030:	6839      	ldr	r1, [r7, #0]
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 fa7d 	bl	800a532 <USBD_CtlError>
            err++;
 800a038:	7afb      	ldrb	r3, [r7, #11]
 800a03a:	3301      	adds	r3, #1
 800a03c:	72fb      	strb	r3, [r7, #11]
          break;
 800a03e:	e03b      	b.n	800a0b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a046:	695b      	ldr	r3, [r3, #20]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00b      	beq.n	800a064 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a052:	695b      	ldr	r3, [r3, #20]
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	7c12      	ldrb	r2, [r2, #16]
 800a058:	f107 0108 	add.w	r1, r7, #8
 800a05c:	4610      	mov	r0, r2
 800a05e:	4798      	blx	r3
 800a060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a062:	e029      	b.n	800a0b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a064:	6839      	ldr	r1, [r7, #0]
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 fa63 	bl	800a532 <USBD_CtlError>
            err++;
 800a06c:	7afb      	ldrb	r3, [r7, #11]
 800a06e:	3301      	adds	r3, #1
 800a070:	72fb      	strb	r3, [r7, #11]
          break;
 800a072:	e021      	b.n	800a0b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a07a:	699b      	ldr	r3, [r3, #24]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d00b      	beq.n	800a098 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	7c12      	ldrb	r2, [r2, #16]
 800a08c:	f107 0108 	add.w	r1, r7, #8
 800a090:	4610      	mov	r0, r2
 800a092:	4798      	blx	r3
 800a094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a096:	e00f      	b.n	800a0b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a098:	6839      	ldr	r1, [r7, #0]
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fa49 	bl	800a532 <USBD_CtlError>
            err++;
 800a0a0:	7afb      	ldrb	r3, [r7, #11]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0a6:	e007      	b.n	800a0b8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a0a8:	6839      	ldr	r1, [r7, #0]
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 fa41 	bl	800a532 <USBD_CtlError>
          err++;
 800a0b0:	7afb      	ldrb	r3, [r7, #11]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a0b6:	bf00      	nop
      }
      break;
 800a0b8:	e037      	b.n	800a12a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	7c1b      	ldrb	r3, [r3, #16]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d109      	bne.n	800a0d6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0ca:	f107 0208 	add.w	r2, r7, #8
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	4798      	blx	r3
 800a0d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0d4:	e029      	b.n	800a12a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a0d6:	6839      	ldr	r1, [r7, #0]
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 fa2a 	bl	800a532 <USBD_CtlError>
        err++;
 800a0de:	7afb      	ldrb	r3, [r7, #11]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	72fb      	strb	r3, [r7, #11]
      break;
 800a0e4:	e021      	b.n	800a12a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	7c1b      	ldrb	r3, [r3, #16]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d10d      	bne.n	800a10a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0f6:	f107 0208 	add.w	r2, r7, #8
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	4798      	blx	r3
 800a0fe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	3301      	adds	r3, #1
 800a104:	2207      	movs	r2, #7
 800a106:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a108:	e00f      	b.n	800a12a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a10a:	6839      	ldr	r1, [r7, #0]
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 fa10 	bl	800a532 <USBD_CtlError>
        err++;
 800a112:	7afb      	ldrb	r3, [r7, #11]
 800a114:	3301      	adds	r3, #1
 800a116:	72fb      	strb	r3, [r7, #11]
      break;
 800a118:	e007      	b.n	800a12a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a11a:	6839      	ldr	r1, [r7, #0]
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 fa08 	bl	800a532 <USBD_CtlError>
      err++;
 800a122:	7afb      	ldrb	r3, [r7, #11]
 800a124:	3301      	adds	r3, #1
 800a126:	72fb      	strb	r3, [r7, #11]
      break;
 800a128:	bf00      	nop
  }

  if (err != 0U)
 800a12a:	7afb      	ldrb	r3, [r7, #11]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d11e      	bne.n	800a16e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	88db      	ldrh	r3, [r3, #6]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d016      	beq.n	800a166 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a138:	893b      	ldrh	r3, [r7, #8]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00e      	beq.n	800a15c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	88da      	ldrh	r2, [r3, #6]
 800a142:	893b      	ldrh	r3, [r7, #8]
 800a144:	4293      	cmp	r3, r2
 800a146:	bf28      	it	cs
 800a148:	4613      	movcs	r3, r2
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a14e:	893b      	ldrh	r3, [r7, #8]
 800a150:	461a      	mov	r2, r3
 800a152:	68f9      	ldr	r1, [r7, #12]
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 fa69 	bl	800a62c <USBD_CtlSendData>
 800a15a:	e009      	b.n	800a170 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a15c:	6839      	ldr	r1, [r7, #0]
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 f9e7 	bl	800a532 <USBD_CtlError>
 800a164:	e004      	b.n	800a170 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 faba 	bl	800a6e0 <USBD_CtlSendStatus>
 800a16c:	e000      	b.n	800a170 <USBD_GetDescriptor+0x2cc>
    return;
 800a16e:	bf00      	nop
  }
}
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop

0800a178 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	889b      	ldrh	r3, [r3, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d131      	bne.n	800a1ee <USBD_SetAddress+0x76>
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	88db      	ldrh	r3, [r3, #6]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d12d      	bne.n	800a1ee <USBD_SetAddress+0x76>
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	885b      	ldrh	r3, [r3, #2]
 800a196:	2b7f      	cmp	r3, #127	@ 0x7f
 800a198:	d829      	bhi.n	800a1ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	885b      	ldrh	r3, [r3, #2]
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	2b03      	cmp	r3, #3
 800a1b0:	d104      	bne.n	800a1bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a1b2:	6839      	ldr	r1, [r7, #0]
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 f9bc 	bl	800a532 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ba:	e01d      	b.n	800a1f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	7bfa      	ldrb	r2, [r7, #15]
 800a1c0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fef9 	bl	800afc0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fa86 	bl	800a6e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a1d4:	7bfb      	ldrb	r3, [r7, #15]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d004      	beq.n	800a1e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2202      	movs	r2, #2
 800a1de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1e2:	e009      	b.n	800a1f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ec:	e004      	b.n	800a1f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a1ee:	6839      	ldr	r1, [r7, #0]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f99e 	bl	800a532 <USBD_CtlError>
  }
}
 800a1f6:	bf00      	nop
 800a1f8:	bf00      	nop
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a20a:	2300      	movs	r3, #0
 800a20c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	885b      	ldrh	r3, [r3, #2]
 800a212:	b2da      	uxtb	r2, r3
 800a214:	4b4e      	ldr	r3, [pc, #312]	@ (800a350 <USBD_SetConfig+0x150>)
 800a216:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a218:	4b4d      	ldr	r3, [pc, #308]	@ (800a350 <USBD_SetConfig+0x150>)
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d905      	bls.n	800a22c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f985 	bl	800a532 <USBD_CtlError>
    return USBD_FAIL;
 800a228:	2303      	movs	r3, #3
 800a22a:	e08c      	b.n	800a346 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a232:	b2db      	uxtb	r3, r3
 800a234:	2b02      	cmp	r3, #2
 800a236:	d002      	beq.n	800a23e <USBD_SetConfig+0x3e>
 800a238:	2b03      	cmp	r3, #3
 800a23a:	d029      	beq.n	800a290 <USBD_SetConfig+0x90>
 800a23c:	e075      	b.n	800a32a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a23e:	4b44      	ldr	r3, [pc, #272]	@ (800a350 <USBD_SetConfig+0x150>)
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d020      	beq.n	800a288 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a246:	4b42      	ldr	r3, [pc, #264]	@ (800a350 <USBD_SetConfig+0x150>)
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	461a      	mov	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a250:	4b3f      	ldr	r3, [pc, #252]	@ (800a350 <USBD_SetConfig+0x150>)
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	4619      	mov	r1, r3
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f7fe ffe3 	bl	8009222 <USBD_SetClassConfig>
 800a25c:	4603      	mov	r3, r0
 800a25e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a260:	7bfb      	ldrb	r3, [r7, #15]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d008      	beq.n	800a278 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a266:	6839      	ldr	r1, [r7, #0]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 f962 	bl	800a532 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2202      	movs	r2, #2
 800a272:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a276:	e065      	b.n	800a344 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fa31 	bl	800a6e0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2203      	movs	r2, #3
 800a282:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a286:	e05d      	b.n	800a344 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 fa29 	bl	800a6e0 <USBD_CtlSendStatus>
      break;
 800a28e:	e059      	b.n	800a344 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a290:	4b2f      	ldr	r3, [pc, #188]	@ (800a350 <USBD_SetConfig+0x150>)
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d112      	bne.n	800a2be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2202      	movs	r2, #2
 800a29c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a2a0:	4b2b      	ldr	r3, [pc, #172]	@ (800a350 <USBD_SetConfig+0x150>)
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a2aa:	4b29      	ldr	r3, [pc, #164]	@ (800a350 <USBD_SetConfig+0x150>)
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f7fe ffd2 	bl	800925a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fa12 	bl	800a6e0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a2bc:	e042      	b.n	800a344 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a2be:	4b24      	ldr	r3, [pc, #144]	@ (800a350 <USBD_SetConfig+0x150>)
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d02a      	beq.n	800a322 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f7fe ffc0 	bl	800925a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a2da:	4b1d      	ldr	r3, [pc, #116]	@ (800a350 <USBD_SetConfig+0x150>)
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a2e4:	4b1a      	ldr	r3, [pc, #104]	@ (800a350 <USBD_SetConfig+0x150>)
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7fe ff99 	bl	8009222 <USBD_SetClassConfig>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a2f4:	7bfb      	ldrb	r3, [r7, #15]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00f      	beq.n	800a31a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a2fa:	6839      	ldr	r1, [r7, #0]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 f918 	bl	800a532 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	b2db      	uxtb	r3, r3
 800a308:	4619      	mov	r1, r3
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7fe ffa5 	bl	800925a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2202      	movs	r2, #2
 800a314:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a318:	e014      	b.n	800a344 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f9e0 	bl	800a6e0 <USBD_CtlSendStatus>
      break;
 800a320:	e010      	b.n	800a344 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f9dc 	bl	800a6e0 <USBD_CtlSendStatus>
      break;
 800a328:	e00c      	b.n	800a344 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 f900 	bl	800a532 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a332:	4b07      	ldr	r3, [pc, #28]	@ (800a350 <USBD_SetConfig+0x150>)
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	4619      	mov	r1, r3
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f7fe ff8e 	bl	800925a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a33e:	2303      	movs	r3, #3
 800a340:	73fb      	strb	r3, [r7, #15]
      break;
 800a342:	bf00      	nop
  }

  return ret;
 800a344:	7bfb      	ldrb	r3, [r7, #15]
}
 800a346:	4618      	mov	r0, r3
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	2000062c 	.word	0x2000062c

0800a354 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	88db      	ldrh	r3, [r3, #6]
 800a362:	2b01      	cmp	r3, #1
 800a364:	d004      	beq.n	800a370 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a366:	6839      	ldr	r1, [r7, #0]
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 f8e2 	bl	800a532 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a36e:	e023      	b.n	800a3b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a376:	b2db      	uxtb	r3, r3
 800a378:	2b02      	cmp	r3, #2
 800a37a:	dc02      	bgt.n	800a382 <USBD_GetConfig+0x2e>
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	dc03      	bgt.n	800a388 <USBD_GetConfig+0x34>
 800a380:	e015      	b.n	800a3ae <USBD_GetConfig+0x5a>
 800a382:	2b03      	cmp	r3, #3
 800a384:	d00b      	beq.n	800a39e <USBD_GetConfig+0x4a>
 800a386:	e012      	b.n	800a3ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	3308      	adds	r3, #8
 800a392:	2201      	movs	r2, #1
 800a394:	4619      	mov	r1, r3
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 f948 	bl	800a62c <USBD_CtlSendData>
        break;
 800a39c:	e00c      	b.n	800a3b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	3304      	adds	r3, #4
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 f940 	bl	800a62c <USBD_CtlSendData>
        break;
 800a3ac:	e004      	b.n	800a3b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a3ae:	6839      	ldr	r1, [r7, #0]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f8be 	bl	800a532 <USBD_CtlError>
        break;
 800a3b6:	bf00      	nop
}
 800a3b8:	bf00      	nop
 800a3ba:	3708      	adds	r7, #8
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d81e      	bhi.n	800a416 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	88db      	ldrh	r3, [r3, #6]
 800a3dc:	2b02      	cmp	r3, #2
 800a3de:	d004      	beq.n	800a3ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a3e0:	6839      	ldr	r1, [r7, #0]
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f8a5 	bl	800a532 <USBD_CtlError>
        break;
 800a3e8:	e01a      	b.n	800a420 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d005      	beq.n	800a406 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	f043 0202 	orr.w	r2, r3, #2
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	330c      	adds	r3, #12
 800a40a:	2202      	movs	r2, #2
 800a40c:	4619      	mov	r1, r3
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 f90c 	bl	800a62c <USBD_CtlSendData>
      break;
 800a414:	e004      	b.n	800a420 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a416:	6839      	ldr	r1, [r7, #0]
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 f88a 	bl	800a532 <USBD_CtlError>
      break;
 800a41e:	bf00      	nop
  }
}
 800a420:	bf00      	nop
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	885b      	ldrh	r3, [r3, #2]
 800a436:	2b01      	cmp	r3, #1
 800a438:	d107      	bne.n	800a44a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2201      	movs	r2, #1
 800a43e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 f94c 	bl	800a6e0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a448:	e013      	b.n	800a472 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	885b      	ldrh	r3, [r3, #2]
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d10b      	bne.n	800a46a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	889b      	ldrh	r3, [r3, #4]
 800a456:	0a1b      	lsrs	r3, r3, #8
 800a458:	b29b      	uxth	r3, r3
 800a45a:	b2da      	uxtb	r2, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 f93c 	bl	800a6e0 <USBD_CtlSendStatus>
}
 800a468:	e003      	b.n	800a472 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a46a:	6839      	ldr	r1, [r7, #0]
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 f860 	bl	800a532 <USBD_CtlError>
}
 800a472:	bf00      	nop
 800a474:	3708      	adds	r7, #8
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b082      	sub	sp, #8
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	3b01      	subs	r3, #1
 800a48e:	2b02      	cmp	r3, #2
 800a490:	d80b      	bhi.n	800a4aa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	885b      	ldrh	r3, [r3, #2]
 800a496:	2b01      	cmp	r3, #1
 800a498:	d10c      	bne.n	800a4b4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f91c 	bl	800a6e0 <USBD_CtlSendStatus>
      }
      break;
 800a4a8:	e004      	b.n	800a4b4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a4aa:	6839      	ldr	r1, [r7, #0]
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 f840 	bl	800a532 <USBD_CtlError>
      break;
 800a4b2:	e000      	b.n	800a4b6 <USBD_ClrFeature+0x3c>
      break;
 800a4b4:	bf00      	nop
  }
}
 800a4b6:	bf00      	nop
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b084      	sub	sp, #16
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
 800a4c6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	781a      	ldrb	r2, [r3, #0]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	781a      	ldrb	r2, [r3, #0]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f7ff fa40 	bl	800996e <SWAPBYTE>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	3301      	adds	r3, #1
 800a500:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f7ff fa33 	bl	800996e <SWAPBYTE>
 800a508:	4603      	mov	r3, r0
 800a50a:	461a      	mov	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	3301      	adds	r3, #1
 800a514:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	3301      	adds	r3, #1
 800a51a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f7ff fa26 	bl	800996e <SWAPBYTE>
 800a522:	4603      	mov	r3, r0
 800a524:	461a      	mov	r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	80da      	strh	r2, [r3, #6]
}
 800a52a:	bf00      	nop
 800a52c:	3710      	adds	r7, #16
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b082      	sub	sp, #8
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
 800a53a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a53c:	2180      	movs	r1, #128	@ 0x80
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 fcd4 	bl	800aeec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a544:	2100      	movs	r1, #0
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 fcd0 	bl	800aeec <USBD_LL_StallEP>
}
 800a54c:	bf00      	nop
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b086      	sub	sp, #24
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a560:	2300      	movs	r3, #0
 800a562:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d042      	beq.n	800a5f0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a56e:	6938      	ldr	r0, [r7, #16]
 800a570:	f000 f842 	bl	800a5f8 <USBD_GetLen>
 800a574:	4603      	mov	r3, r0
 800a576:	3301      	adds	r3, #1
 800a578:	005b      	lsls	r3, r3, #1
 800a57a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a57e:	d808      	bhi.n	800a592 <USBD_GetString+0x3e>
 800a580:	6938      	ldr	r0, [r7, #16]
 800a582:	f000 f839 	bl	800a5f8 <USBD_GetLen>
 800a586:	4603      	mov	r3, r0
 800a588:	3301      	adds	r3, #1
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	005b      	lsls	r3, r3, #1
 800a58e:	b29a      	uxth	r2, r3
 800a590:	e001      	b.n	800a596 <USBD_GetString+0x42>
 800a592:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a59a:	7dfb      	ldrb	r3, [r7, #23]
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	4413      	add	r3, r2
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	7812      	ldrb	r2, [r2, #0]
 800a5a4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a5a6:	7dfb      	ldrb	r3, [r7, #23]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a5ac:	7dfb      	ldrb	r3, [r7, #23]
 800a5ae:	68ba      	ldr	r2, [r7, #8]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	2203      	movs	r2, #3
 800a5b4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a5b6:	7dfb      	ldrb	r3, [r7, #23]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a5bc:	e013      	b.n	800a5e6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a5be:	7dfb      	ldrb	r3, [r7, #23]
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	7812      	ldrb	r2, [r2, #0]
 800a5c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	613b      	str	r3, [r7, #16]
    idx++;
 800a5d0:	7dfb      	ldrb	r3, [r7, #23]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a5d6:	7dfb      	ldrb	r3, [r7, #23]
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	4413      	add	r3, r2
 800a5dc:	2200      	movs	r2, #0
 800a5de:	701a      	strb	r2, [r3, #0]
    idx++;
 800a5e0:	7dfb      	ldrb	r3, [r7, #23]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1e7      	bne.n	800a5be <USBD_GetString+0x6a>
 800a5ee:	e000      	b.n	800a5f2 <USBD_GetString+0x9e>
    return;
 800a5f0:	bf00      	nop
  }
}
 800a5f2:	3718      	adds	r7, #24
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a600:	2300      	movs	r3, #0
 800a602:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a608:	e005      	b.n	800a616 <USBD_GetLen+0x1e>
  {
    len++;
 800a60a:	7bfb      	ldrb	r3, [r7, #15]
 800a60c:	3301      	adds	r3, #1
 800a60e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	3301      	adds	r3, #1
 800a614:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d1f5      	bne.n	800a60a <USBD_GetLen+0x12>
  }

  return len;
 800a61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3714      	adds	r7, #20
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2202      	movs	r2, #2
 800a63c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	68ba      	ldr	r2, [r7, #8]
 800a650:	2100      	movs	r1, #0
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f000 fcd3 	bl	800affe <USBD_LL_Transmit>

  return USBD_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b084      	sub	sp, #16
 800a666:	af00      	add	r7, sp, #0
 800a668:	60f8      	str	r0, [r7, #12]
 800a66a:	60b9      	str	r1, [r7, #8]
 800a66c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	68ba      	ldr	r2, [r7, #8]
 800a672:	2100      	movs	r1, #0
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f000 fcc2 	bl	800affe <USBD_LL_Transmit>

  return USBD_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2203      	movs	r2, #3
 800a694:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	68f8      	ldr	r0, [r7, #12]
 800a6b0:	f000 fcc6 	bl	800b040 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3710      	adds	r7, #16
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b084      	sub	sp, #16
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	60f8      	str	r0, [r7, #12]
 800a6c6:	60b9      	str	r1, [r7, #8]
 800a6c8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	2100      	movs	r1, #0
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f000 fcb5 	bl	800b040 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3710      	adds	r7, #16
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2204      	movs	r2, #4
 800a6ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 fc81 	bl	800affe <USBD_LL_Transmit>

  return USBD_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3708      	adds	r7, #8
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b082      	sub	sp, #8
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2205      	movs	r2, #5
 800a712:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a716:	2300      	movs	r3, #0
 800a718:	2200      	movs	r2, #0
 800a71a:	2100      	movs	r1, #0
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 fc8f 	bl	800b040 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3708      	adds	r7, #8
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a730:	2200      	movs	r2, #0
 800a732:	4912      	ldr	r1, [pc, #72]	@ (800a77c <MX_USB_DEVICE_Init+0x50>)
 800a734:	4812      	ldr	r0, [pc, #72]	@ (800a780 <MX_USB_DEVICE_Init+0x54>)
 800a736:	f7fe fcf7 	bl	8009128 <USBD_Init>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d001      	beq.n	800a744 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a740:	f7f6 ffaa 	bl	8001698 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a744:	490f      	ldr	r1, [pc, #60]	@ (800a784 <MX_USB_DEVICE_Init+0x58>)
 800a746:	480e      	ldr	r0, [pc, #56]	@ (800a780 <MX_USB_DEVICE_Init+0x54>)
 800a748:	f7fe fd1e 	bl	8009188 <USBD_RegisterClass>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d001      	beq.n	800a756 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a752:	f7f6 ffa1 	bl	8001698 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a756:	490c      	ldr	r1, [pc, #48]	@ (800a788 <MX_USB_DEVICE_Init+0x5c>)
 800a758:	4809      	ldr	r0, [pc, #36]	@ (800a780 <MX_USB_DEVICE_Init+0x54>)
 800a75a:	f7fe fc55 	bl	8009008 <USBD_CDC_RegisterInterface>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d001      	beq.n	800a768 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a764:	f7f6 ff98 	bl	8001698 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a768:	4805      	ldr	r0, [pc, #20]	@ (800a780 <MX_USB_DEVICE_Init+0x54>)
 800a76a:	f7fe fd43 	bl	80091f4 <USBD_Start>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d001      	beq.n	800a778 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a774:	f7f6 ff90 	bl	8001698 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a778:	bf00      	nop
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	200000b0 	.word	0x200000b0
 800a780:	20000630 	.word	0x20000630
 800a784:	2000001c 	.word	0x2000001c
 800a788:	2000009c 	.word	0x2000009c

0800a78c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a790:	2200      	movs	r2, #0
 800a792:	4905      	ldr	r1, [pc, #20]	@ (800a7a8 <CDC_Init_FS+0x1c>)
 800a794:	4805      	ldr	r0, [pc, #20]	@ (800a7ac <CDC_Init_FS+0x20>)
 800a796:	f7fe fc51 	bl	800903c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a79a:	4905      	ldr	r1, [pc, #20]	@ (800a7b0 <CDC_Init_FS+0x24>)
 800a79c:	4803      	ldr	r0, [pc, #12]	@ (800a7ac <CDC_Init_FS+0x20>)
 800a79e:	f7fe fc6f 	bl	8009080 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a7a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	2000110c 	.word	0x2000110c
 800a7ac:	20000630 	.word	0x20000630
 800a7b0:	2000090c 	.word	0x2000090c

0800a7b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a7b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	6039      	str	r1, [r7, #0]
 800a7ce:	71fb      	strb	r3, [r7, #7]
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a7d4:	79fb      	ldrb	r3, [r7, #7]
 800a7d6:	2b23      	cmp	r3, #35	@ 0x23
 800a7d8:	d84a      	bhi.n	800a870 <CDC_Control_FS+0xac>
 800a7da:	a201      	add	r2, pc, #4	@ (adr r2, 800a7e0 <CDC_Control_FS+0x1c>)
 800a7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e0:	0800a871 	.word	0x0800a871
 800a7e4:	0800a871 	.word	0x0800a871
 800a7e8:	0800a871 	.word	0x0800a871
 800a7ec:	0800a871 	.word	0x0800a871
 800a7f0:	0800a871 	.word	0x0800a871
 800a7f4:	0800a871 	.word	0x0800a871
 800a7f8:	0800a871 	.word	0x0800a871
 800a7fc:	0800a871 	.word	0x0800a871
 800a800:	0800a871 	.word	0x0800a871
 800a804:	0800a871 	.word	0x0800a871
 800a808:	0800a871 	.word	0x0800a871
 800a80c:	0800a871 	.word	0x0800a871
 800a810:	0800a871 	.word	0x0800a871
 800a814:	0800a871 	.word	0x0800a871
 800a818:	0800a871 	.word	0x0800a871
 800a81c:	0800a871 	.word	0x0800a871
 800a820:	0800a871 	.word	0x0800a871
 800a824:	0800a871 	.word	0x0800a871
 800a828:	0800a871 	.word	0x0800a871
 800a82c:	0800a871 	.word	0x0800a871
 800a830:	0800a871 	.word	0x0800a871
 800a834:	0800a871 	.word	0x0800a871
 800a838:	0800a871 	.word	0x0800a871
 800a83c:	0800a871 	.word	0x0800a871
 800a840:	0800a871 	.word	0x0800a871
 800a844:	0800a871 	.word	0x0800a871
 800a848:	0800a871 	.word	0x0800a871
 800a84c:	0800a871 	.word	0x0800a871
 800a850:	0800a871 	.word	0x0800a871
 800a854:	0800a871 	.word	0x0800a871
 800a858:	0800a871 	.word	0x0800a871
 800a85c:	0800a871 	.word	0x0800a871
 800a860:	0800a871 	.word	0x0800a871
 800a864:	0800a871 	.word	0x0800a871
 800a868:	0800a871 	.word	0x0800a871
 800a86c:	0800a871 	.word	0x0800a871
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a870:	bf00      	nop
  }

  return (USBD_OK);
 800a872:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a874:	4618      	mov	r0, r3
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a88a:	6879      	ldr	r1, [r7, #4]
 800a88c:	4805      	ldr	r0, [pc, #20]	@ (800a8a4 <CDC_Receive_FS+0x24>)
 800a88e:	f7fe fbf7 	bl	8009080 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a892:	4804      	ldr	r0, [pc, #16]	@ (800a8a4 <CDC_Receive_FS+0x24>)
 800a894:	f7fe fc12 	bl	80090bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a898:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3708      	adds	r7, #8
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	20000630 	.word	0x20000630

0800a8a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b087      	sub	sp, #28
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a8ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	371c      	adds	r7, #28
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
	...

0800a8cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	6039      	str	r1, [r7, #0]
 800a8d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	2212      	movs	r2, #18
 800a8dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a8de:	4b03      	ldr	r3, [pc, #12]	@ (800a8ec <USBD_FS_DeviceDescriptor+0x20>)
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr
 800a8ec:	200000cc 	.word	0x200000cc

0800a8f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	6039      	str	r1, [r7, #0]
 800a8fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	2204      	movs	r2, #4
 800a900:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a902:	4b03      	ldr	r3, [pc, #12]	@ (800a910 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a904:	4618      	mov	r0, r3
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr
 800a910:	200000e0 	.word	0x200000e0

0800a914 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	4603      	mov	r3, r0
 800a91c:	6039      	str	r1, [r7, #0]
 800a91e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a920:	79fb      	ldrb	r3, [r7, #7]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d105      	bne.n	800a932 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a926:	683a      	ldr	r2, [r7, #0]
 800a928:	4907      	ldr	r1, [pc, #28]	@ (800a948 <USBD_FS_ProductStrDescriptor+0x34>)
 800a92a:	4808      	ldr	r0, [pc, #32]	@ (800a94c <USBD_FS_ProductStrDescriptor+0x38>)
 800a92c:	f7ff fe12 	bl	800a554 <USBD_GetString>
 800a930:	e004      	b.n	800a93c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a932:	683a      	ldr	r2, [r7, #0]
 800a934:	4904      	ldr	r1, [pc, #16]	@ (800a948 <USBD_FS_ProductStrDescriptor+0x34>)
 800a936:	4805      	ldr	r0, [pc, #20]	@ (800a94c <USBD_FS_ProductStrDescriptor+0x38>)
 800a938:	f7ff fe0c 	bl	800a554 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a93c:	4b02      	ldr	r3, [pc, #8]	@ (800a948 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3708      	adds	r7, #8
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	2000190c 	.word	0x2000190c
 800a94c:	0800e410 	.word	0x0800e410

0800a950 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	4603      	mov	r3, r0
 800a958:	6039      	str	r1, [r7, #0]
 800a95a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a95c:	683a      	ldr	r2, [r7, #0]
 800a95e:	4904      	ldr	r1, [pc, #16]	@ (800a970 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a960:	4804      	ldr	r0, [pc, #16]	@ (800a974 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a962:	f7ff fdf7 	bl	800a554 <USBD_GetString>
  return USBD_StrDesc;
 800a966:	4b02      	ldr	r3, [pc, #8]	@ (800a970 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3708      	adds	r7, #8
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	2000190c 	.word	0x2000190c
 800a974:	0800e428 	.word	0x0800e428

0800a978 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	4603      	mov	r3, r0
 800a980:	6039      	str	r1, [r7, #0]
 800a982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	221a      	movs	r2, #26
 800a988:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a98a:	f000 f843 	bl	800aa14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a98e:	4b02      	ldr	r3, [pc, #8]	@ (800a998 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a990:	4618      	mov	r0, r3
 800a992:	3708      	adds	r7, #8
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	200000e4 	.word	0x200000e4

0800a99c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	6039      	str	r1, [r7, #0]
 800a9a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a9a8:	79fb      	ldrb	r3, [r7, #7]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d105      	bne.n	800a9ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	4907      	ldr	r1, [pc, #28]	@ (800a9d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9b2:	4808      	ldr	r0, [pc, #32]	@ (800a9d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9b4:	f7ff fdce 	bl	800a554 <USBD_GetString>
 800a9b8:	e004      	b.n	800a9c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	4904      	ldr	r1, [pc, #16]	@ (800a9d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9be:	4805      	ldr	r0, [pc, #20]	@ (800a9d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9c0:	f7ff fdc8 	bl	800a554 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9c4:	4b02      	ldr	r3, [pc, #8]	@ (800a9d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3708      	adds	r7, #8
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	2000190c 	.word	0x2000190c
 800a9d4:	0800e43c 	.word	0x0800e43c

0800a9d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	4603      	mov	r3, r0
 800a9e0:	6039      	str	r1, [r7, #0]
 800a9e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9e4:	79fb      	ldrb	r3, [r7, #7]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d105      	bne.n	800a9f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	4907      	ldr	r1, [pc, #28]	@ (800aa0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9ee:	4808      	ldr	r0, [pc, #32]	@ (800aa10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9f0:	f7ff fdb0 	bl	800a554 <USBD_GetString>
 800a9f4:	e004      	b.n	800aa00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9f6:	683a      	ldr	r2, [r7, #0]
 800a9f8:	4904      	ldr	r1, [pc, #16]	@ (800aa0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9fa:	4805      	ldr	r0, [pc, #20]	@ (800aa10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9fc:	f7ff fdaa 	bl	800a554 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa00:	4b02      	ldr	r3, [pc, #8]	@ (800aa0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3708      	adds	r7, #8
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	2000190c 	.word	0x2000190c
 800aa10:	0800e448 	.word	0x0800e448

0800aa14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aa1a:	4b0f      	ldr	r3, [pc, #60]	@ (800aa58 <Get_SerialNum+0x44>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aa20:	4b0e      	ldr	r3, [pc, #56]	@ (800aa5c <Get_SerialNum+0x48>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aa26:	4b0e      	ldr	r3, [pc, #56]	@ (800aa60 <Get_SerialNum+0x4c>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4413      	add	r3, r2
 800aa32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d009      	beq.n	800aa4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aa3a:	2208      	movs	r2, #8
 800aa3c:	4909      	ldr	r1, [pc, #36]	@ (800aa64 <Get_SerialNum+0x50>)
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f000 f814 	bl	800aa6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aa44:	2204      	movs	r2, #4
 800aa46:	4908      	ldr	r1, [pc, #32]	@ (800aa68 <Get_SerialNum+0x54>)
 800aa48:	68b8      	ldr	r0, [r7, #8]
 800aa4a:	f000 f80f 	bl	800aa6c <IntToUnicode>
  }
}
 800aa4e:	bf00      	nop
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	1fff7a10 	.word	0x1fff7a10
 800aa5c:	1fff7a14 	.word	0x1fff7a14
 800aa60:	1fff7a18 	.word	0x1fff7a18
 800aa64:	200000e6 	.word	0x200000e6
 800aa68:	200000f6 	.word	0x200000f6

0800aa6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b087      	sub	sp, #28
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	4613      	mov	r3, r2
 800aa78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aa7e:	2300      	movs	r3, #0
 800aa80:	75fb      	strb	r3, [r7, #23]
 800aa82:	e027      	b.n	800aad4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	0f1b      	lsrs	r3, r3, #28
 800aa88:	2b09      	cmp	r3, #9
 800aa8a:	d80b      	bhi.n	800aaa4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	0f1b      	lsrs	r3, r3, #28
 800aa90:	b2da      	uxtb	r2, r3
 800aa92:	7dfb      	ldrb	r3, [r7, #23]
 800aa94:	005b      	lsls	r3, r3, #1
 800aa96:	4619      	mov	r1, r3
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	440b      	add	r3, r1
 800aa9c:	3230      	adds	r2, #48	@ 0x30
 800aa9e:	b2d2      	uxtb	r2, r2
 800aaa0:	701a      	strb	r2, [r3, #0]
 800aaa2:	e00a      	b.n	800aaba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	0f1b      	lsrs	r3, r3, #28
 800aaa8:	b2da      	uxtb	r2, r3
 800aaaa:	7dfb      	ldrb	r3, [r7, #23]
 800aaac:	005b      	lsls	r3, r3, #1
 800aaae:	4619      	mov	r1, r3
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	440b      	add	r3, r1
 800aab4:	3237      	adds	r2, #55	@ 0x37
 800aab6:	b2d2      	uxtb	r2, r2
 800aab8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	011b      	lsls	r3, r3, #4
 800aabe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aac0:	7dfb      	ldrb	r3, [r7, #23]
 800aac2:	005b      	lsls	r3, r3, #1
 800aac4:	3301      	adds	r3, #1
 800aac6:	68ba      	ldr	r2, [r7, #8]
 800aac8:	4413      	add	r3, r2
 800aaca:	2200      	movs	r2, #0
 800aacc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aace:	7dfb      	ldrb	r3, [r7, #23]
 800aad0:	3301      	adds	r3, #1
 800aad2:	75fb      	strb	r3, [r7, #23]
 800aad4:	7dfa      	ldrb	r2, [r7, #23]
 800aad6:	79fb      	ldrb	r3, [r7, #7]
 800aad8:	429a      	cmp	r2, r3
 800aada:	d3d3      	bcc.n	800aa84 <IntToUnicode+0x18>
  }
}
 800aadc:	bf00      	nop
 800aade:	bf00      	nop
 800aae0:	371c      	adds	r7, #28
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr
	...

0800aaec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b08a      	sub	sp, #40	@ 0x28
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aaf4:	f107 0314 	add.w	r3, r7, #20
 800aaf8:	2200      	movs	r2, #0
 800aafa:	601a      	str	r2, [r3, #0]
 800aafc:	605a      	str	r2, [r3, #4]
 800aafe:	609a      	str	r2, [r3, #8]
 800ab00:	60da      	str	r2, [r3, #12]
 800ab02:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab0c:	d147      	bne.n	800ab9e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab0e:	2300      	movs	r3, #0
 800ab10:	613b      	str	r3, [r7, #16]
 800ab12:	4b25      	ldr	r3, [pc, #148]	@ (800aba8 <HAL_PCD_MspInit+0xbc>)
 800ab14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab16:	4a24      	ldr	r2, [pc, #144]	@ (800aba8 <HAL_PCD_MspInit+0xbc>)
 800ab18:	f043 0301 	orr.w	r3, r3, #1
 800ab1c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ab1e:	4b22      	ldr	r3, [pc, #136]	@ (800aba8 <HAL_PCD_MspInit+0xbc>)
 800ab20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab22:	f003 0301 	and.w	r3, r3, #1
 800ab26:	613b      	str	r3, [r7, #16]
 800ab28:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ab2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ab30:	2300      	movs	r3, #0
 800ab32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab34:	2300      	movs	r3, #0
 800ab36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ab38:	f107 0314 	add.w	r3, r7, #20
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	481b      	ldr	r0, [pc, #108]	@ (800abac <HAL_PCD_MspInit+0xc0>)
 800ab40:	f7f7 ff74 	bl	8002a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ab44:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800ab48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab4a:	2302      	movs	r3, #2
 800ab4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab52:	2300      	movs	r3, #0
 800ab54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ab56:	230a      	movs	r3, #10
 800ab58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab5a:	f107 0314 	add.w	r3, r7, #20
 800ab5e:	4619      	mov	r1, r3
 800ab60:	4812      	ldr	r0, [pc, #72]	@ (800abac <HAL_PCD_MspInit+0xc0>)
 800ab62:	f7f7 ff63 	bl	8002a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ab66:	4b10      	ldr	r3, [pc, #64]	@ (800aba8 <HAL_PCD_MspInit+0xbc>)
 800ab68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab6a:	4a0f      	ldr	r2, [pc, #60]	@ (800aba8 <HAL_PCD_MspInit+0xbc>)
 800ab6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab70:	6353      	str	r3, [r2, #52]	@ 0x34
 800ab72:	2300      	movs	r3, #0
 800ab74:	60fb      	str	r3, [r7, #12]
 800ab76:	4b0c      	ldr	r3, [pc, #48]	@ (800aba8 <HAL_PCD_MspInit+0xbc>)
 800ab78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab7a:	4a0b      	ldr	r2, [pc, #44]	@ (800aba8 <HAL_PCD_MspInit+0xbc>)
 800ab7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ab80:	6453      	str	r3, [r2, #68]	@ 0x44
 800ab82:	4b09      	ldr	r3, [pc, #36]	@ (800aba8 <HAL_PCD_MspInit+0xbc>)
 800ab84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab8a:	60fb      	str	r3, [r7, #12]
 800ab8c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ab8e:	2200      	movs	r2, #0
 800ab90:	2100      	movs	r1, #0
 800ab92:	2043      	movs	r0, #67	@ 0x43
 800ab94:	f7f7 ff13 	bl	80029be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ab98:	2043      	movs	r0, #67	@ 0x43
 800ab9a:	f7f7 ff2c 	bl	80029f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ab9e:	bf00      	nop
 800aba0:	3728      	adds	r7, #40	@ 0x28
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	40023800 	.word	0x40023800
 800abac:	40020000 	.word	0x40020000

0800abb0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800abc4:	4619      	mov	r1, r3
 800abc6:	4610      	mov	r0, r2
 800abc8:	f7fe fb61 	bl	800928e <USBD_LL_SetupStage>
}
 800abcc:	bf00      	nop
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	460b      	mov	r3, r1
 800abde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800abe6:	78fa      	ldrb	r2, [r7, #3]
 800abe8:	6879      	ldr	r1, [r7, #4]
 800abea:	4613      	mov	r3, r2
 800abec:	00db      	lsls	r3, r3, #3
 800abee:	4413      	add	r3, r2
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	440b      	add	r3, r1
 800abf4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	78fb      	ldrb	r3, [r7, #3]
 800abfc:	4619      	mov	r1, r3
 800abfe:	f7fe fb9b 	bl	8009338 <USBD_LL_DataOutStage>
}
 800ac02:	bf00      	nop
 800ac04:	3708      	adds	r7, #8
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b082      	sub	sp, #8
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
 800ac12:	460b      	mov	r3, r1
 800ac14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ac1c:	78fa      	ldrb	r2, [r7, #3]
 800ac1e:	6879      	ldr	r1, [r7, #4]
 800ac20:	4613      	mov	r3, r2
 800ac22:	00db      	lsls	r3, r3, #3
 800ac24:	4413      	add	r3, r2
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	440b      	add	r3, r1
 800ac2a:	3320      	adds	r3, #32
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	78fb      	ldrb	r3, [r7, #3]
 800ac30:	4619      	mov	r1, r3
 800ac32:	f7fe fc34 	bl	800949e <USBD_LL_DataInStage>
}
 800ac36:	bf00      	nop
 800ac38:	3708      	adds	r7, #8
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b082      	sub	sp, #8
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7fe fd6e 	bl	800972e <USBD_LL_SOF>
}
 800ac52:	bf00      	nop
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b084      	sub	sp, #16
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ac62:	2301      	movs	r3, #1
 800ac64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	79db      	ldrb	r3, [r3, #7]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d102      	bne.n	800ac74 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	73fb      	strb	r3, [r7, #15]
 800ac72:	e008      	b.n	800ac86 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	79db      	ldrb	r3, [r3, #7]
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	d102      	bne.n	800ac82 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	73fb      	strb	r3, [r7, #15]
 800ac80:	e001      	b.n	800ac86 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ac82:	f7f6 fd09 	bl	8001698 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac8c:	7bfa      	ldrb	r2, [r7, #15]
 800ac8e:	4611      	mov	r1, r2
 800ac90:	4618      	mov	r0, r3
 800ac92:	f7fe fd08 	bl	80096a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7fe fcb0 	bl	8009602 <USBD_LL_Reset>
}
 800aca2:	bf00      	nop
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
	...

0800acac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800acba:	4618      	mov	r0, r3
 800acbc:	f7fe fd03 	bl	80096c6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	6812      	ldr	r2, [r2, #0]
 800acce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800acd2:	f043 0301 	orr.w	r3, r3, #1
 800acd6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	7adb      	ldrb	r3, [r3, #11]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d005      	beq.n	800acec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ace0:	4b04      	ldr	r3, [pc, #16]	@ (800acf4 <HAL_PCD_SuspendCallback+0x48>)
 800ace2:	691b      	ldr	r3, [r3, #16]
 800ace4:	4a03      	ldr	r2, [pc, #12]	@ (800acf4 <HAL_PCD_SuspendCallback+0x48>)
 800ace6:	f043 0306 	orr.w	r3, r3, #6
 800acea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800acec:	bf00      	nop
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	e000ed00 	.word	0xe000ed00

0800acf8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7fe fcf9 	bl	80096fe <USBD_LL_Resume>
}
 800ad0c:	bf00      	nop
 800ad0e:	3708      	adds	r7, #8
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad26:	78fa      	ldrb	r2, [r7, #3]
 800ad28:	4611      	mov	r1, r2
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7fe fd51 	bl	80097d2 <USBD_LL_IsoOUTIncomplete>
}
 800ad30:	bf00      	nop
 800ad32:	3708      	adds	r7, #8
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	460b      	mov	r3, r1
 800ad42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad4a:	78fa      	ldrb	r2, [r7, #3]
 800ad4c:	4611      	mov	r1, r2
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7fe fd0d 	bl	800976e <USBD_LL_IsoINIncomplete>
}
 800ad54:	bf00      	nop
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7fe fd63 	bl	8009836 <USBD_LL_DevConnected>
}
 800ad70:	bf00      	nop
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7fe fd60 	bl	800984c <USBD_LL_DevDisconnected>
}
 800ad8c:	bf00      	nop
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d13c      	bne.n	800ae1e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ada4:	4a20      	ldr	r2, [pc, #128]	@ (800ae28 <USBD_LL_Init+0x94>)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4a1e      	ldr	r2, [pc, #120]	@ (800ae28 <USBD_LL_Init+0x94>)
 800adb0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800adb4:	4b1c      	ldr	r3, [pc, #112]	@ (800ae28 <USBD_LL_Init+0x94>)
 800adb6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800adba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800adbc:	4b1a      	ldr	r3, [pc, #104]	@ (800ae28 <USBD_LL_Init+0x94>)
 800adbe:	2204      	movs	r2, #4
 800adc0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800adc2:	4b19      	ldr	r3, [pc, #100]	@ (800ae28 <USBD_LL_Init+0x94>)
 800adc4:	2202      	movs	r2, #2
 800adc6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800adc8:	4b17      	ldr	r3, [pc, #92]	@ (800ae28 <USBD_LL_Init+0x94>)
 800adca:	2200      	movs	r2, #0
 800adcc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800adce:	4b16      	ldr	r3, [pc, #88]	@ (800ae28 <USBD_LL_Init+0x94>)
 800add0:	2202      	movs	r2, #2
 800add2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800add4:	4b14      	ldr	r3, [pc, #80]	@ (800ae28 <USBD_LL_Init+0x94>)
 800add6:	2200      	movs	r2, #0
 800add8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800adda:	4b13      	ldr	r3, [pc, #76]	@ (800ae28 <USBD_LL_Init+0x94>)
 800addc:	2200      	movs	r2, #0
 800adde:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ade0:	4b11      	ldr	r3, [pc, #68]	@ (800ae28 <USBD_LL_Init+0x94>)
 800ade2:	2200      	movs	r2, #0
 800ade4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800ade6:	4b10      	ldr	r3, [pc, #64]	@ (800ae28 <USBD_LL_Init+0x94>)
 800ade8:	2201      	movs	r2, #1
 800adea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800adec:	4b0e      	ldr	r3, [pc, #56]	@ (800ae28 <USBD_LL_Init+0x94>)
 800adee:	2200      	movs	r2, #0
 800adf0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800adf2:	480d      	ldr	r0, [pc, #52]	@ (800ae28 <USBD_LL_Init+0x94>)
 800adf4:	f7f9 fe46 	bl	8004a84 <HAL_PCD_Init>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d001      	beq.n	800ae02 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800adfe:	f7f6 fc4b 	bl	8001698 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ae02:	2180      	movs	r1, #128	@ 0x80
 800ae04:	4808      	ldr	r0, [pc, #32]	@ (800ae28 <USBD_LL_Init+0x94>)
 800ae06:	f7fb f872 	bl	8005eee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ae0a:	2240      	movs	r2, #64	@ 0x40
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	4806      	ldr	r0, [pc, #24]	@ (800ae28 <USBD_LL_Init+0x94>)
 800ae10:	f7fb f826 	bl	8005e60 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ae14:	2280      	movs	r2, #128	@ 0x80
 800ae16:	2101      	movs	r1, #1
 800ae18:	4803      	ldr	r0, [pc, #12]	@ (800ae28 <USBD_LL_Init+0x94>)
 800ae1a:	f7fb f821 	bl	8005e60 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	20001b0c 	.word	0x20001b0c

0800ae2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae34:	2300      	movs	r3, #0
 800ae36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7f9 ff2d 	bl	8004ca2 <HAL_PCD_Start>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae4c:	7bfb      	ldrb	r3, [r7, #15]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 f942 	bl	800b0d8 <USBD_Get_USB_Status>
 800ae54:	4603      	mov	r3, r0
 800ae56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b084      	sub	sp, #16
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	4608      	mov	r0, r1
 800ae6c:	4611      	mov	r1, r2
 800ae6e:	461a      	mov	r2, r3
 800ae70:	4603      	mov	r3, r0
 800ae72:	70fb      	strb	r3, [r7, #3]
 800ae74:	460b      	mov	r3, r1
 800ae76:	70bb      	strb	r3, [r7, #2]
 800ae78:	4613      	mov	r3, r2
 800ae7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae80:	2300      	movs	r3, #0
 800ae82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ae8a:	78bb      	ldrb	r3, [r7, #2]
 800ae8c:	883a      	ldrh	r2, [r7, #0]
 800ae8e:	78f9      	ldrb	r1, [r7, #3]
 800ae90:	f7fa fc01 	bl	8005696 <HAL_PCD_EP_Open>
 800ae94:	4603      	mov	r3, r0
 800ae96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae98:	7bfb      	ldrb	r3, [r7, #15]
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f000 f91c 	bl	800b0d8 <USBD_Get_USB_Status>
 800aea0:	4603      	mov	r3, r0
 800aea2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aea4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b084      	sub	sp, #16
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeba:	2300      	movs	r3, #0
 800aebc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aebe:	2300      	movs	r3, #0
 800aec0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aec8:	78fa      	ldrb	r2, [r7, #3]
 800aeca:	4611      	mov	r1, r2
 800aecc:	4618      	mov	r0, r3
 800aece:	f7fa fc4c 	bl	800576a <HAL_PCD_EP_Close>
 800aed2:	4603      	mov	r3, r0
 800aed4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aed6:	7bfb      	ldrb	r3, [r7, #15]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f000 f8fd 	bl	800b0d8 <USBD_Get_USB_Status>
 800aede:	4603      	mov	r3, r0
 800aee0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aee2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	460b      	mov	r3, r1
 800aef6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aefc:	2300      	movs	r3, #0
 800aefe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af06:	78fa      	ldrb	r2, [r7, #3]
 800af08:	4611      	mov	r1, r2
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7fa fd04 	bl	8005918 <HAL_PCD_EP_SetStall>
 800af10:	4603      	mov	r3, r0
 800af12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af14:	7bfb      	ldrb	r3, [r7, #15]
 800af16:	4618      	mov	r0, r3
 800af18:	f000 f8de 	bl	800b0d8 <USBD_Get_USB_Status>
 800af1c:	4603      	mov	r3, r0
 800af1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af20:	7bbb      	ldrb	r3, [r7, #14]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b084      	sub	sp, #16
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
 800af32:	460b      	mov	r3, r1
 800af34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af36:	2300      	movs	r3, #0
 800af38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af3a:	2300      	movs	r3, #0
 800af3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af44:	78fa      	ldrb	r2, [r7, #3]
 800af46:	4611      	mov	r1, r2
 800af48:	4618      	mov	r0, r3
 800af4a:	f7fa fd48 	bl	80059de <HAL_PCD_EP_ClrStall>
 800af4e:	4603      	mov	r3, r0
 800af50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af52:	7bfb      	ldrb	r3, [r7, #15]
 800af54:	4618      	mov	r0, r3
 800af56:	f000 f8bf 	bl	800b0d8 <USBD_Get_USB_Status>
 800af5a:	4603      	mov	r3, r0
 800af5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800af60:	4618      	mov	r0, r3
 800af62:	3710      	adds	r7, #16
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	460b      	mov	r3, r1
 800af72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800af7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af80:	2b00      	cmp	r3, #0
 800af82:	da0b      	bge.n	800af9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af84:	78fb      	ldrb	r3, [r7, #3]
 800af86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af8a:	68f9      	ldr	r1, [r7, #12]
 800af8c:	4613      	mov	r3, r2
 800af8e:	00db      	lsls	r3, r3, #3
 800af90:	4413      	add	r3, r2
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	440b      	add	r3, r1
 800af96:	3316      	adds	r3, #22
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	e00b      	b.n	800afb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800af9c:	78fb      	ldrb	r3, [r7, #3]
 800af9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800afa2:	68f9      	ldr	r1, [r7, #12]
 800afa4:	4613      	mov	r3, r2
 800afa6:	00db      	lsls	r3, r3, #3
 800afa8:	4413      	add	r3, r2
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	440b      	add	r3, r1
 800afae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800afb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3714      	adds	r7, #20
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	460b      	mov	r3, r1
 800afca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afcc:	2300      	movs	r3, #0
 800afce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afd0:	2300      	movs	r3, #0
 800afd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800afda:	78fa      	ldrb	r2, [r7, #3]
 800afdc:	4611      	mov	r1, r2
 800afde:	4618      	mov	r0, r3
 800afe0:	f7fa fb35 	bl	800564e <HAL_PCD_SetAddress>
 800afe4:	4603      	mov	r3, r0
 800afe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afe8:	7bfb      	ldrb	r3, [r7, #15]
 800afea:	4618      	mov	r0, r3
 800afec:	f000 f874 	bl	800b0d8 <USBD_Get_USB_Status>
 800aff0:	4603      	mov	r3, r0
 800aff2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aff4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b086      	sub	sp, #24
 800b002:	af00      	add	r7, sp, #0
 800b004:	60f8      	str	r0, [r7, #12]
 800b006:	607a      	str	r2, [r7, #4]
 800b008:	603b      	str	r3, [r7, #0]
 800b00a:	460b      	mov	r3, r1
 800b00c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b00e:	2300      	movs	r3, #0
 800b010:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b012:	2300      	movs	r3, #0
 800b014:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b01c:	7af9      	ldrb	r1, [r7, #11]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	f7fa fc3f 	bl	80058a4 <HAL_PCD_EP_Transmit>
 800b026:	4603      	mov	r3, r0
 800b028:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b02a:	7dfb      	ldrb	r3, [r7, #23]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f000 f853 	bl	800b0d8 <USBD_Get_USB_Status>
 800b032:	4603      	mov	r3, r0
 800b034:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b036:	7dbb      	ldrb	r3, [r7, #22]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3718      	adds	r7, #24
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b086      	sub	sp, #24
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	607a      	str	r2, [r7, #4]
 800b04a:	603b      	str	r3, [r7, #0]
 800b04c:	460b      	mov	r3, r1
 800b04e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b050:	2300      	movs	r3, #0
 800b052:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b054:	2300      	movs	r3, #0
 800b056:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b05e:	7af9      	ldrb	r1, [r7, #11]
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	f7fa fbcb 	bl	80057fe <HAL_PCD_EP_Receive>
 800b068:	4603      	mov	r3, r0
 800b06a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b06c:	7dfb      	ldrb	r3, [r7, #23]
 800b06e:	4618      	mov	r0, r3
 800b070:	f000 f832 	bl	800b0d8 <USBD_Get_USB_Status>
 800b074:	4603      	mov	r3, r0
 800b076:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b078:	7dbb      	ldrb	r3, [r7, #22]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b082      	sub	sp, #8
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
 800b08a:	460b      	mov	r3, r1
 800b08c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b094:	78fa      	ldrb	r2, [r7, #3]
 800b096:	4611      	mov	r1, r2
 800b098:	4618      	mov	r0, r3
 800b09a:	f7fa fbeb 	bl	8005874 <HAL_PCD_EP_GetRxCount>
 800b09e:	4603      	mov	r3, r0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3708      	adds	r7, #8
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b0b0:	4b03      	ldr	r3, [pc, #12]	@ (800b0c0 <USBD_static_malloc+0x18>)
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	370c      	adds	r7, #12
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop
 800b0c0:	20001ff0 	.word	0x20001ff0

0800b0c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]

}
 800b0cc:	bf00      	nop
 800b0ce:	370c      	adds	r7, #12
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b085      	sub	sp, #20
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	4603      	mov	r3, r0
 800b0e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b0e6:	79fb      	ldrb	r3, [r7, #7]
 800b0e8:	2b03      	cmp	r3, #3
 800b0ea:	d817      	bhi.n	800b11c <USBD_Get_USB_Status+0x44>
 800b0ec:	a201      	add	r2, pc, #4	@ (adr r2, 800b0f4 <USBD_Get_USB_Status+0x1c>)
 800b0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f2:	bf00      	nop
 800b0f4:	0800b105 	.word	0x0800b105
 800b0f8:	0800b10b 	.word	0x0800b10b
 800b0fc:	0800b111 	.word	0x0800b111
 800b100:	0800b117 	.word	0x0800b117
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b104:	2300      	movs	r3, #0
 800b106:	73fb      	strb	r3, [r7, #15]
    break;
 800b108:	e00b      	b.n	800b122 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b10a:	2303      	movs	r3, #3
 800b10c:	73fb      	strb	r3, [r7, #15]
    break;
 800b10e:	e008      	b.n	800b122 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b110:	2301      	movs	r3, #1
 800b112:	73fb      	strb	r3, [r7, #15]
    break;
 800b114:	e005      	b.n	800b122 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b116:	2303      	movs	r3, #3
 800b118:	73fb      	strb	r3, [r7, #15]
    break;
 800b11a:	e002      	b.n	800b122 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b11c:	2303      	movs	r3, #3
 800b11e:	73fb      	strb	r3, [r7, #15]
    break;
 800b120:	bf00      	nop
  }
  return usb_status;
 800b122:	7bfb      	ldrb	r3, [r7, #15]
}
 800b124:	4618      	mov	r0, r3
 800b126:	3714      	adds	r7, #20
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <__cvt>:
 800b130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b134:	ec57 6b10 	vmov	r6, r7, d0
 800b138:	2f00      	cmp	r7, #0
 800b13a:	460c      	mov	r4, r1
 800b13c:	4619      	mov	r1, r3
 800b13e:	463b      	mov	r3, r7
 800b140:	bfbb      	ittet	lt
 800b142:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b146:	461f      	movlt	r7, r3
 800b148:	2300      	movge	r3, #0
 800b14a:	232d      	movlt	r3, #45	@ 0x2d
 800b14c:	700b      	strb	r3, [r1, #0]
 800b14e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b150:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b154:	4691      	mov	r9, r2
 800b156:	f023 0820 	bic.w	r8, r3, #32
 800b15a:	bfbc      	itt	lt
 800b15c:	4632      	movlt	r2, r6
 800b15e:	4616      	movlt	r6, r2
 800b160:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b164:	d005      	beq.n	800b172 <__cvt+0x42>
 800b166:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b16a:	d100      	bne.n	800b16e <__cvt+0x3e>
 800b16c:	3401      	adds	r4, #1
 800b16e:	2102      	movs	r1, #2
 800b170:	e000      	b.n	800b174 <__cvt+0x44>
 800b172:	2103      	movs	r1, #3
 800b174:	ab03      	add	r3, sp, #12
 800b176:	9301      	str	r3, [sp, #4]
 800b178:	ab02      	add	r3, sp, #8
 800b17a:	9300      	str	r3, [sp, #0]
 800b17c:	ec47 6b10 	vmov	d0, r6, r7
 800b180:	4653      	mov	r3, sl
 800b182:	4622      	mov	r2, r4
 800b184:	f000 fe5c 	bl	800be40 <_dtoa_r>
 800b188:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b18c:	4605      	mov	r5, r0
 800b18e:	d119      	bne.n	800b1c4 <__cvt+0x94>
 800b190:	f019 0f01 	tst.w	r9, #1
 800b194:	d00e      	beq.n	800b1b4 <__cvt+0x84>
 800b196:	eb00 0904 	add.w	r9, r0, r4
 800b19a:	2200      	movs	r2, #0
 800b19c:	2300      	movs	r3, #0
 800b19e:	4630      	mov	r0, r6
 800b1a0:	4639      	mov	r1, r7
 800b1a2:	f7f5 fc91 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1a6:	b108      	cbz	r0, 800b1ac <__cvt+0x7c>
 800b1a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b1ac:	2230      	movs	r2, #48	@ 0x30
 800b1ae:	9b03      	ldr	r3, [sp, #12]
 800b1b0:	454b      	cmp	r3, r9
 800b1b2:	d31e      	bcc.n	800b1f2 <__cvt+0xc2>
 800b1b4:	9b03      	ldr	r3, [sp, #12]
 800b1b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1b8:	1b5b      	subs	r3, r3, r5
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	6013      	str	r3, [r2, #0]
 800b1be:	b004      	add	sp, #16
 800b1c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b1c8:	eb00 0904 	add.w	r9, r0, r4
 800b1cc:	d1e5      	bne.n	800b19a <__cvt+0x6a>
 800b1ce:	7803      	ldrb	r3, [r0, #0]
 800b1d0:	2b30      	cmp	r3, #48	@ 0x30
 800b1d2:	d10a      	bne.n	800b1ea <__cvt+0xba>
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	4630      	mov	r0, r6
 800b1da:	4639      	mov	r1, r7
 800b1dc:	f7f5 fc74 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1e0:	b918      	cbnz	r0, 800b1ea <__cvt+0xba>
 800b1e2:	f1c4 0401 	rsb	r4, r4, #1
 800b1e6:	f8ca 4000 	str.w	r4, [sl]
 800b1ea:	f8da 3000 	ldr.w	r3, [sl]
 800b1ee:	4499      	add	r9, r3
 800b1f0:	e7d3      	b.n	800b19a <__cvt+0x6a>
 800b1f2:	1c59      	adds	r1, r3, #1
 800b1f4:	9103      	str	r1, [sp, #12]
 800b1f6:	701a      	strb	r2, [r3, #0]
 800b1f8:	e7d9      	b.n	800b1ae <__cvt+0x7e>

0800b1fa <__exponent>:
 800b1fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1fc:	2900      	cmp	r1, #0
 800b1fe:	bfba      	itte	lt
 800b200:	4249      	neglt	r1, r1
 800b202:	232d      	movlt	r3, #45	@ 0x2d
 800b204:	232b      	movge	r3, #43	@ 0x2b
 800b206:	2909      	cmp	r1, #9
 800b208:	7002      	strb	r2, [r0, #0]
 800b20a:	7043      	strb	r3, [r0, #1]
 800b20c:	dd29      	ble.n	800b262 <__exponent+0x68>
 800b20e:	f10d 0307 	add.w	r3, sp, #7
 800b212:	461d      	mov	r5, r3
 800b214:	270a      	movs	r7, #10
 800b216:	461a      	mov	r2, r3
 800b218:	fbb1 f6f7 	udiv	r6, r1, r7
 800b21c:	fb07 1416 	mls	r4, r7, r6, r1
 800b220:	3430      	adds	r4, #48	@ 0x30
 800b222:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b226:	460c      	mov	r4, r1
 800b228:	2c63      	cmp	r4, #99	@ 0x63
 800b22a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b22e:	4631      	mov	r1, r6
 800b230:	dcf1      	bgt.n	800b216 <__exponent+0x1c>
 800b232:	3130      	adds	r1, #48	@ 0x30
 800b234:	1e94      	subs	r4, r2, #2
 800b236:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b23a:	1c41      	adds	r1, r0, #1
 800b23c:	4623      	mov	r3, r4
 800b23e:	42ab      	cmp	r3, r5
 800b240:	d30a      	bcc.n	800b258 <__exponent+0x5e>
 800b242:	f10d 0309 	add.w	r3, sp, #9
 800b246:	1a9b      	subs	r3, r3, r2
 800b248:	42ac      	cmp	r4, r5
 800b24a:	bf88      	it	hi
 800b24c:	2300      	movhi	r3, #0
 800b24e:	3302      	adds	r3, #2
 800b250:	4403      	add	r3, r0
 800b252:	1a18      	subs	r0, r3, r0
 800b254:	b003      	add	sp, #12
 800b256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b258:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b25c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b260:	e7ed      	b.n	800b23e <__exponent+0x44>
 800b262:	2330      	movs	r3, #48	@ 0x30
 800b264:	3130      	adds	r1, #48	@ 0x30
 800b266:	7083      	strb	r3, [r0, #2]
 800b268:	70c1      	strb	r1, [r0, #3]
 800b26a:	1d03      	adds	r3, r0, #4
 800b26c:	e7f1      	b.n	800b252 <__exponent+0x58>
	...

0800b270 <_printf_float>:
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	b08d      	sub	sp, #52	@ 0x34
 800b276:	460c      	mov	r4, r1
 800b278:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b27c:	4616      	mov	r6, r2
 800b27e:	461f      	mov	r7, r3
 800b280:	4605      	mov	r5, r0
 800b282:	f000 fcdb 	bl	800bc3c <_localeconv_r>
 800b286:	6803      	ldr	r3, [r0, #0]
 800b288:	9304      	str	r3, [sp, #16]
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7f4 fff0 	bl	8000270 <strlen>
 800b290:	2300      	movs	r3, #0
 800b292:	930a      	str	r3, [sp, #40]	@ 0x28
 800b294:	f8d8 3000 	ldr.w	r3, [r8]
 800b298:	9005      	str	r0, [sp, #20]
 800b29a:	3307      	adds	r3, #7
 800b29c:	f023 0307 	bic.w	r3, r3, #7
 800b2a0:	f103 0208 	add.w	r2, r3, #8
 800b2a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b2a8:	f8d4 b000 	ldr.w	fp, [r4]
 800b2ac:	f8c8 2000 	str.w	r2, [r8]
 800b2b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b2b8:	9307      	str	r3, [sp, #28]
 800b2ba:	f8cd 8018 	str.w	r8, [sp, #24]
 800b2be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b2c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2c6:	4b9c      	ldr	r3, [pc, #624]	@ (800b538 <_printf_float+0x2c8>)
 800b2c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2cc:	f7f5 fc2e 	bl	8000b2c <__aeabi_dcmpun>
 800b2d0:	bb70      	cbnz	r0, 800b330 <_printf_float+0xc0>
 800b2d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2d6:	4b98      	ldr	r3, [pc, #608]	@ (800b538 <_printf_float+0x2c8>)
 800b2d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2dc:	f7f5 fc08 	bl	8000af0 <__aeabi_dcmple>
 800b2e0:	bb30      	cbnz	r0, 800b330 <_printf_float+0xc0>
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	4640      	mov	r0, r8
 800b2e8:	4649      	mov	r1, r9
 800b2ea:	f7f5 fbf7 	bl	8000adc <__aeabi_dcmplt>
 800b2ee:	b110      	cbz	r0, 800b2f6 <_printf_float+0x86>
 800b2f0:	232d      	movs	r3, #45	@ 0x2d
 800b2f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2f6:	4a91      	ldr	r2, [pc, #580]	@ (800b53c <_printf_float+0x2cc>)
 800b2f8:	4b91      	ldr	r3, [pc, #580]	@ (800b540 <_printf_float+0x2d0>)
 800b2fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b2fe:	bf94      	ite	ls
 800b300:	4690      	movls	r8, r2
 800b302:	4698      	movhi	r8, r3
 800b304:	2303      	movs	r3, #3
 800b306:	6123      	str	r3, [r4, #16]
 800b308:	f02b 0304 	bic.w	r3, fp, #4
 800b30c:	6023      	str	r3, [r4, #0]
 800b30e:	f04f 0900 	mov.w	r9, #0
 800b312:	9700      	str	r7, [sp, #0]
 800b314:	4633      	mov	r3, r6
 800b316:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b318:	4621      	mov	r1, r4
 800b31a:	4628      	mov	r0, r5
 800b31c:	f000 f9d2 	bl	800b6c4 <_printf_common>
 800b320:	3001      	adds	r0, #1
 800b322:	f040 808d 	bne.w	800b440 <_printf_float+0x1d0>
 800b326:	f04f 30ff 	mov.w	r0, #4294967295
 800b32a:	b00d      	add	sp, #52	@ 0x34
 800b32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b330:	4642      	mov	r2, r8
 800b332:	464b      	mov	r3, r9
 800b334:	4640      	mov	r0, r8
 800b336:	4649      	mov	r1, r9
 800b338:	f7f5 fbf8 	bl	8000b2c <__aeabi_dcmpun>
 800b33c:	b140      	cbz	r0, 800b350 <_printf_float+0xe0>
 800b33e:	464b      	mov	r3, r9
 800b340:	2b00      	cmp	r3, #0
 800b342:	bfbc      	itt	lt
 800b344:	232d      	movlt	r3, #45	@ 0x2d
 800b346:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b34a:	4a7e      	ldr	r2, [pc, #504]	@ (800b544 <_printf_float+0x2d4>)
 800b34c:	4b7e      	ldr	r3, [pc, #504]	@ (800b548 <_printf_float+0x2d8>)
 800b34e:	e7d4      	b.n	800b2fa <_printf_float+0x8a>
 800b350:	6863      	ldr	r3, [r4, #4]
 800b352:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b356:	9206      	str	r2, [sp, #24]
 800b358:	1c5a      	adds	r2, r3, #1
 800b35a:	d13b      	bne.n	800b3d4 <_printf_float+0x164>
 800b35c:	2306      	movs	r3, #6
 800b35e:	6063      	str	r3, [r4, #4]
 800b360:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b364:	2300      	movs	r3, #0
 800b366:	6022      	str	r2, [r4, #0]
 800b368:	9303      	str	r3, [sp, #12]
 800b36a:	ab0a      	add	r3, sp, #40	@ 0x28
 800b36c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b370:	ab09      	add	r3, sp, #36	@ 0x24
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	6861      	ldr	r1, [r4, #4]
 800b376:	ec49 8b10 	vmov	d0, r8, r9
 800b37a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b37e:	4628      	mov	r0, r5
 800b380:	f7ff fed6 	bl	800b130 <__cvt>
 800b384:	9b06      	ldr	r3, [sp, #24]
 800b386:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b388:	2b47      	cmp	r3, #71	@ 0x47
 800b38a:	4680      	mov	r8, r0
 800b38c:	d129      	bne.n	800b3e2 <_printf_float+0x172>
 800b38e:	1cc8      	adds	r0, r1, #3
 800b390:	db02      	blt.n	800b398 <_printf_float+0x128>
 800b392:	6863      	ldr	r3, [r4, #4]
 800b394:	4299      	cmp	r1, r3
 800b396:	dd41      	ble.n	800b41c <_printf_float+0x1ac>
 800b398:	f1aa 0a02 	sub.w	sl, sl, #2
 800b39c:	fa5f fa8a 	uxtb.w	sl, sl
 800b3a0:	3901      	subs	r1, #1
 800b3a2:	4652      	mov	r2, sl
 800b3a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b3a8:	9109      	str	r1, [sp, #36]	@ 0x24
 800b3aa:	f7ff ff26 	bl	800b1fa <__exponent>
 800b3ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3b0:	1813      	adds	r3, r2, r0
 800b3b2:	2a01      	cmp	r2, #1
 800b3b4:	4681      	mov	r9, r0
 800b3b6:	6123      	str	r3, [r4, #16]
 800b3b8:	dc02      	bgt.n	800b3c0 <_printf_float+0x150>
 800b3ba:	6822      	ldr	r2, [r4, #0]
 800b3bc:	07d2      	lsls	r2, r2, #31
 800b3be:	d501      	bpl.n	800b3c4 <_printf_float+0x154>
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	6123      	str	r3, [r4, #16]
 800b3c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d0a2      	beq.n	800b312 <_printf_float+0xa2>
 800b3cc:	232d      	movs	r3, #45	@ 0x2d
 800b3ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3d2:	e79e      	b.n	800b312 <_printf_float+0xa2>
 800b3d4:	9a06      	ldr	r2, [sp, #24]
 800b3d6:	2a47      	cmp	r2, #71	@ 0x47
 800b3d8:	d1c2      	bne.n	800b360 <_printf_float+0xf0>
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1c0      	bne.n	800b360 <_printf_float+0xf0>
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e7bd      	b.n	800b35e <_printf_float+0xee>
 800b3e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b3e6:	d9db      	bls.n	800b3a0 <_printf_float+0x130>
 800b3e8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b3ec:	d118      	bne.n	800b420 <_printf_float+0x1b0>
 800b3ee:	2900      	cmp	r1, #0
 800b3f0:	6863      	ldr	r3, [r4, #4]
 800b3f2:	dd0b      	ble.n	800b40c <_printf_float+0x19c>
 800b3f4:	6121      	str	r1, [r4, #16]
 800b3f6:	b913      	cbnz	r3, 800b3fe <_printf_float+0x18e>
 800b3f8:	6822      	ldr	r2, [r4, #0]
 800b3fa:	07d0      	lsls	r0, r2, #31
 800b3fc:	d502      	bpl.n	800b404 <_printf_float+0x194>
 800b3fe:	3301      	adds	r3, #1
 800b400:	440b      	add	r3, r1
 800b402:	6123      	str	r3, [r4, #16]
 800b404:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b406:	f04f 0900 	mov.w	r9, #0
 800b40a:	e7db      	b.n	800b3c4 <_printf_float+0x154>
 800b40c:	b913      	cbnz	r3, 800b414 <_printf_float+0x1a4>
 800b40e:	6822      	ldr	r2, [r4, #0]
 800b410:	07d2      	lsls	r2, r2, #31
 800b412:	d501      	bpl.n	800b418 <_printf_float+0x1a8>
 800b414:	3302      	adds	r3, #2
 800b416:	e7f4      	b.n	800b402 <_printf_float+0x192>
 800b418:	2301      	movs	r3, #1
 800b41a:	e7f2      	b.n	800b402 <_printf_float+0x192>
 800b41c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b422:	4299      	cmp	r1, r3
 800b424:	db05      	blt.n	800b432 <_printf_float+0x1c2>
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	6121      	str	r1, [r4, #16]
 800b42a:	07d8      	lsls	r0, r3, #31
 800b42c:	d5ea      	bpl.n	800b404 <_printf_float+0x194>
 800b42e:	1c4b      	adds	r3, r1, #1
 800b430:	e7e7      	b.n	800b402 <_printf_float+0x192>
 800b432:	2900      	cmp	r1, #0
 800b434:	bfd4      	ite	le
 800b436:	f1c1 0202 	rsble	r2, r1, #2
 800b43a:	2201      	movgt	r2, #1
 800b43c:	4413      	add	r3, r2
 800b43e:	e7e0      	b.n	800b402 <_printf_float+0x192>
 800b440:	6823      	ldr	r3, [r4, #0]
 800b442:	055a      	lsls	r2, r3, #21
 800b444:	d407      	bmi.n	800b456 <_printf_float+0x1e6>
 800b446:	6923      	ldr	r3, [r4, #16]
 800b448:	4642      	mov	r2, r8
 800b44a:	4631      	mov	r1, r6
 800b44c:	4628      	mov	r0, r5
 800b44e:	47b8      	blx	r7
 800b450:	3001      	adds	r0, #1
 800b452:	d12b      	bne.n	800b4ac <_printf_float+0x23c>
 800b454:	e767      	b.n	800b326 <_printf_float+0xb6>
 800b456:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b45a:	f240 80dd 	bls.w	800b618 <_printf_float+0x3a8>
 800b45e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b462:	2200      	movs	r2, #0
 800b464:	2300      	movs	r3, #0
 800b466:	f7f5 fb2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b46a:	2800      	cmp	r0, #0
 800b46c:	d033      	beq.n	800b4d6 <_printf_float+0x266>
 800b46e:	4a37      	ldr	r2, [pc, #220]	@ (800b54c <_printf_float+0x2dc>)
 800b470:	2301      	movs	r3, #1
 800b472:	4631      	mov	r1, r6
 800b474:	4628      	mov	r0, r5
 800b476:	47b8      	blx	r7
 800b478:	3001      	adds	r0, #1
 800b47a:	f43f af54 	beq.w	800b326 <_printf_float+0xb6>
 800b47e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b482:	4543      	cmp	r3, r8
 800b484:	db02      	blt.n	800b48c <_printf_float+0x21c>
 800b486:	6823      	ldr	r3, [r4, #0]
 800b488:	07d8      	lsls	r0, r3, #31
 800b48a:	d50f      	bpl.n	800b4ac <_printf_float+0x23c>
 800b48c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b490:	4631      	mov	r1, r6
 800b492:	4628      	mov	r0, r5
 800b494:	47b8      	blx	r7
 800b496:	3001      	adds	r0, #1
 800b498:	f43f af45 	beq.w	800b326 <_printf_float+0xb6>
 800b49c:	f04f 0900 	mov.w	r9, #0
 800b4a0:	f108 38ff 	add.w	r8, r8, #4294967295
 800b4a4:	f104 0a1a 	add.w	sl, r4, #26
 800b4a8:	45c8      	cmp	r8, r9
 800b4aa:	dc09      	bgt.n	800b4c0 <_printf_float+0x250>
 800b4ac:	6823      	ldr	r3, [r4, #0]
 800b4ae:	079b      	lsls	r3, r3, #30
 800b4b0:	f100 8103 	bmi.w	800b6ba <_printf_float+0x44a>
 800b4b4:	68e0      	ldr	r0, [r4, #12]
 800b4b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4b8:	4298      	cmp	r0, r3
 800b4ba:	bfb8      	it	lt
 800b4bc:	4618      	movlt	r0, r3
 800b4be:	e734      	b.n	800b32a <_printf_float+0xba>
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	4652      	mov	r2, sl
 800b4c4:	4631      	mov	r1, r6
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	47b8      	blx	r7
 800b4ca:	3001      	adds	r0, #1
 800b4cc:	f43f af2b 	beq.w	800b326 <_printf_float+0xb6>
 800b4d0:	f109 0901 	add.w	r9, r9, #1
 800b4d4:	e7e8      	b.n	800b4a8 <_printf_float+0x238>
 800b4d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	dc39      	bgt.n	800b550 <_printf_float+0x2e0>
 800b4dc:	4a1b      	ldr	r2, [pc, #108]	@ (800b54c <_printf_float+0x2dc>)
 800b4de:	2301      	movs	r3, #1
 800b4e0:	4631      	mov	r1, r6
 800b4e2:	4628      	mov	r0, r5
 800b4e4:	47b8      	blx	r7
 800b4e6:	3001      	adds	r0, #1
 800b4e8:	f43f af1d 	beq.w	800b326 <_printf_float+0xb6>
 800b4ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b4f0:	ea59 0303 	orrs.w	r3, r9, r3
 800b4f4:	d102      	bne.n	800b4fc <_printf_float+0x28c>
 800b4f6:	6823      	ldr	r3, [r4, #0]
 800b4f8:	07d9      	lsls	r1, r3, #31
 800b4fa:	d5d7      	bpl.n	800b4ac <_printf_float+0x23c>
 800b4fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b500:	4631      	mov	r1, r6
 800b502:	4628      	mov	r0, r5
 800b504:	47b8      	blx	r7
 800b506:	3001      	adds	r0, #1
 800b508:	f43f af0d 	beq.w	800b326 <_printf_float+0xb6>
 800b50c:	f04f 0a00 	mov.w	sl, #0
 800b510:	f104 0b1a 	add.w	fp, r4, #26
 800b514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b516:	425b      	negs	r3, r3
 800b518:	4553      	cmp	r3, sl
 800b51a:	dc01      	bgt.n	800b520 <_printf_float+0x2b0>
 800b51c:	464b      	mov	r3, r9
 800b51e:	e793      	b.n	800b448 <_printf_float+0x1d8>
 800b520:	2301      	movs	r3, #1
 800b522:	465a      	mov	r2, fp
 800b524:	4631      	mov	r1, r6
 800b526:	4628      	mov	r0, r5
 800b528:	47b8      	blx	r7
 800b52a:	3001      	adds	r0, #1
 800b52c:	f43f aefb 	beq.w	800b326 <_printf_float+0xb6>
 800b530:	f10a 0a01 	add.w	sl, sl, #1
 800b534:	e7ee      	b.n	800b514 <_printf_float+0x2a4>
 800b536:	bf00      	nop
 800b538:	7fefffff 	.word	0x7fefffff
 800b53c:	0800e770 	.word	0x0800e770
 800b540:	0800e774 	.word	0x0800e774
 800b544:	0800e778 	.word	0x0800e778
 800b548:	0800e77c 	.word	0x0800e77c
 800b54c:	0800e780 	.word	0x0800e780
 800b550:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b552:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b556:	4553      	cmp	r3, sl
 800b558:	bfa8      	it	ge
 800b55a:	4653      	movge	r3, sl
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	4699      	mov	r9, r3
 800b560:	dc36      	bgt.n	800b5d0 <_printf_float+0x360>
 800b562:	f04f 0b00 	mov.w	fp, #0
 800b566:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b56a:	f104 021a 	add.w	r2, r4, #26
 800b56e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b570:	9306      	str	r3, [sp, #24]
 800b572:	eba3 0309 	sub.w	r3, r3, r9
 800b576:	455b      	cmp	r3, fp
 800b578:	dc31      	bgt.n	800b5de <_printf_float+0x36e>
 800b57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b57c:	459a      	cmp	sl, r3
 800b57e:	dc3a      	bgt.n	800b5f6 <_printf_float+0x386>
 800b580:	6823      	ldr	r3, [r4, #0]
 800b582:	07da      	lsls	r2, r3, #31
 800b584:	d437      	bmi.n	800b5f6 <_printf_float+0x386>
 800b586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b588:	ebaa 0903 	sub.w	r9, sl, r3
 800b58c:	9b06      	ldr	r3, [sp, #24]
 800b58e:	ebaa 0303 	sub.w	r3, sl, r3
 800b592:	4599      	cmp	r9, r3
 800b594:	bfa8      	it	ge
 800b596:	4699      	movge	r9, r3
 800b598:	f1b9 0f00 	cmp.w	r9, #0
 800b59c:	dc33      	bgt.n	800b606 <_printf_float+0x396>
 800b59e:	f04f 0800 	mov.w	r8, #0
 800b5a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5a6:	f104 0b1a 	add.w	fp, r4, #26
 800b5aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ac:	ebaa 0303 	sub.w	r3, sl, r3
 800b5b0:	eba3 0309 	sub.w	r3, r3, r9
 800b5b4:	4543      	cmp	r3, r8
 800b5b6:	f77f af79 	ble.w	800b4ac <_printf_float+0x23c>
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	465a      	mov	r2, fp
 800b5be:	4631      	mov	r1, r6
 800b5c0:	4628      	mov	r0, r5
 800b5c2:	47b8      	blx	r7
 800b5c4:	3001      	adds	r0, #1
 800b5c6:	f43f aeae 	beq.w	800b326 <_printf_float+0xb6>
 800b5ca:	f108 0801 	add.w	r8, r8, #1
 800b5ce:	e7ec      	b.n	800b5aa <_printf_float+0x33a>
 800b5d0:	4642      	mov	r2, r8
 800b5d2:	4631      	mov	r1, r6
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	47b8      	blx	r7
 800b5d8:	3001      	adds	r0, #1
 800b5da:	d1c2      	bne.n	800b562 <_printf_float+0x2f2>
 800b5dc:	e6a3      	b.n	800b326 <_printf_float+0xb6>
 800b5de:	2301      	movs	r3, #1
 800b5e0:	4631      	mov	r1, r6
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	9206      	str	r2, [sp, #24]
 800b5e6:	47b8      	blx	r7
 800b5e8:	3001      	adds	r0, #1
 800b5ea:	f43f ae9c 	beq.w	800b326 <_printf_float+0xb6>
 800b5ee:	9a06      	ldr	r2, [sp, #24]
 800b5f0:	f10b 0b01 	add.w	fp, fp, #1
 800b5f4:	e7bb      	b.n	800b56e <_printf_float+0x2fe>
 800b5f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5fa:	4631      	mov	r1, r6
 800b5fc:	4628      	mov	r0, r5
 800b5fe:	47b8      	blx	r7
 800b600:	3001      	adds	r0, #1
 800b602:	d1c0      	bne.n	800b586 <_printf_float+0x316>
 800b604:	e68f      	b.n	800b326 <_printf_float+0xb6>
 800b606:	9a06      	ldr	r2, [sp, #24]
 800b608:	464b      	mov	r3, r9
 800b60a:	4442      	add	r2, r8
 800b60c:	4631      	mov	r1, r6
 800b60e:	4628      	mov	r0, r5
 800b610:	47b8      	blx	r7
 800b612:	3001      	adds	r0, #1
 800b614:	d1c3      	bne.n	800b59e <_printf_float+0x32e>
 800b616:	e686      	b.n	800b326 <_printf_float+0xb6>
 800b618:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b61c:	f1ba 0f01 	cmp.w	sl, #1
 800b620:	dc01      	bgt.n	800b626 <_printf_float+0x3b6>
 800b622:	07db      	lsls	r3, r3, #31
 800b624:	d536      	bpl.n	800b694 <_printf_float+0x424>
 800b626:	2301      	movs	r3, #1
 800b628:	4642      	mov	r2, r8
 800b62a:	4631      	mov	r1, r6
 800b62c:	4628      	mov	r0, r5
 800b62e:	47b8      	blx	r7
 800b630:	3001      	adds	r0, #1
 800b632:	f43f ae78 	beq.w	800b326 <_printf_float+0xb6>
 800b636:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b63a:	4631      	mov	r1, r6
 800b63c:	4628      	mov	r0, r5
 800b63e:	47b8      	blx	r7
 800b640:	3001      	adds	r0, #1
 800b642:	f43f ae70 	beq.w	800b326 <_printf_float+0xb6>
 800b646:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b64a:	2200      	movs	r2, #0
 800b64c:	2300      	movs	r3, #0
 800b64e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b652:	f7f5 fa39 	bl	8000ac8 <__aeabi_dcmpeq>
 800b656:	b9c0      	cbnz	r0, 800b68a <_printf_float+0x41a>
 800b658:	4653      	mov	r3, sl
 800b65a:	f108 0201 	add.w	r2, r8, #1
 800b65e:	4631      	mov	r1, r6
 800b660:	4628      	mov	r0, r5
 800b662:	47b8      	blx	r7
 800b664:	3001      	adds	r0, #1
 800b666:	d10c      	bne.n	800b682 <_printf_float+0x412>
 800b668:	e65d      	b.n	800b326 <_printf_float+0xb6>
 800b66a:	2301      	movs	r3, #1
 800b66c:	465a      	mov	r2, fp
 800b66e:	4631      	mov	r1, r6
 800b670:	4628      	mov	r0, r5
 800b672:	47b8      	blx	r7
 800b674:	3001      	adds	r0, #1
 800b676:	f43f ae56 	beq.w	800b326 <_printf_float+0xb6>
 800b67a:	f108 0801 	add.w	r8, r8, #1
 800b67e:	45d0      	cmp	r8, sl
 800b680:	dbf3      	blt.n	800b66a <_printf_float+0x3fa>
 800b682:	464b      	mov	r3, r9
 800b684:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b688:	e6df      	b.n	800b44a <_printf_float+0x1da>
 800b68a:	f04f 0800 	mov.w	r8, #0
 800b68e:	f104 0b1a 	add.w	fp, r4, #26
 800b692:	e7f4      	b.n	800b67e <_printf_float+0x40e>
 800b694:	2301      	movs	r3, #1
 800b696:	4642      	mov	r2, r8
 800b698:	e7e1      	b.n	800b65e <_printf_float+0x3ee>
 800b69a:	2301      	movs	r3, #1
 800b69c:	464a      	mov	r2, r9
 800b69e:	4631      	mov	r1, r6
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	47b8      	blx	r7
 800b6a4:	3001      	adds	r0, #1
 800b6a6:	f43f ae3e 	beq.w	800b326 <_printf_float+0xb6>
 800b6aa:	f108 0801 	add.w	r8, r8, #1
 800b6ae:	68e3      	ldr	r3, [r4, #12]
 800b6b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b6b2:	1a5b      	subs	r3, r3, r1
 800b6b4:	4543      	cmp	r3, r8
 800b6b6:	dcf0      	bgt.n	800b69a <_printf_float+0x42a>
 800b6b8:	e6fc      	b.n	800b4b4 <_printf_float+0x244>
 800b6ba:	f04f 0800 	mov.w	r8, #0
 800b6be:	f104 0919 	add.w	r9, r4, #25
 800b6c2:	e7f4      	b.n	800b6ae <_printf_float+0x43e>

0800b6c4 <_printf_common>:
 800b6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6c8:	4616      	mov	r6, r2
 800b6ca:	4698      	mov	r8, r3
 800b6cc:	688a      	ldr	r2, [r1, #8]
 800b6ce:	690b      	ldr	r3, [r1, #16]
 800b6d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	bfb8      	it	lt
 800b6d8:	4613      	movlt	r3, r2
 800b6da:	6033      	str	r3, [r6, #0]
 800b6dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b6e0:	4607      	mov	r7, r0
 800b6e2:	460c      	mov	r4, r1
 800b6e4:	b10a      	cbz	r2, 800b6ea <_printf_common+0x26>
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	6033      	str	r3, [r6, #0]
 800b6ea:	6823      	ldr	r3, [r4, #0]
 800b6ec:	0699      	lsls	r1, r3, #26
 800b6ee:	bf42      	ittt	mi
 800b6f0:	6833      	ldrmi	r3, [r6, #0]
 800b6f2:	3302      	addmi	r3, #2
 800b6f4:	6033      	strmi	r3, [r6, #0]
 800b6f6:	6825      	ldr	r5, [r4, #0]
 800b6f8:	f015 0506 	ands.w	r5, r5, #6
 800b6fc:	d106      	bne.n	800b70c <_printf_common+0x48>
 800b6fe:	f104 0a19 	add.w	sl, r4, #25
 800b702:	68e3      	ldr	r3, [r4, #12]
 800b704:	6832      	ldr	r2, [r6, #0]
 800b706:	1a9b      	subs	r3, r3, r2
 800b708:	42ab      	cmp	r3, r5
 800b70a:	dc26      	bgt.n	800b75a <_printf_common+0x96>
 800b70c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b710:	6822      	ldr	r2, [r4, #0]
 800b712:	3b00      	subs	r3, #0
 800b714:	bf18      	it	ne
 800b716:	2301      	movne	r3, #1
 800b718:	0692      	lsls	r2, r2, #26
 800b71a:	d42b      	bmi.n	800b774 <_printf_common+0xb0>
 800b71c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b720:	4641      	mov	r1, r8
 800b722:	4638      	mov	r0, r7
 800b724:	47c8      	blx	r9
 800b726:	3001      	adds	r0, #1
 800b728:	d01e      	beq.n	800b768 <_printf_common+0xa4>
 800b72a:	6823      	ldr	r3, [r4, #0]
 800b72c:	6922      	ldr	r2, [r4, #16]
 800b72e:	f003 0306 	and.w	r3, r3, #6
 800b732:	2b04      	cmp	r3, #4
 800b734:	bf02      	ittt	eq
 800b736:	68e5      	ldreq	r5, [r4, #12]
 800b738:	6833      	ldreq	r3, [r6, #0]
 800b73a:	1aed      	subeq	r5, r5, r3
 800b73c:	68a3      	ldr	r3, [r4, #8]
 800b73e:	bf0c      	ite	eq
 800b740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b744:	2500      	movne	r5, #0
 800b746:	4293      	cmp	r3, r2
 800b748:	bfc4      	itt	gt
 800b74a:	1a9b      	subgt	r3, r3, r2
 800b74c:	18ed      	addgt	r5, r5, r3
 800b74e:	2600      	movs	r6, #0
 800b750:	341a      	adds	r4, #26
 800b752:	42b5      	cmp	r5, r6
 800b754:	d11a      	bne.n	800b78c <_printf_common+0xc8>
 800b756:	2000      	movs	r0, #0
 800b758:	e008      	b.n	800b76c <_printf_common+0xa8>
 800b75a:	2301      	movs	r3, #1
 800b75c:	4652      	mov	r2, sl
 800b75e:	4641      	mov	r1, r8
 800b760:	4638      	mov	r0, r7
 800b762:	47c8      	blx	r9
 800b764:	3001      	adds	r0, #1
 800b766:	d103      	bne.n	800b770 <_printf_common+0xac>
 800b768:	f04f 30ff 	mov.w	r0, #4294967295
 800b76c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b770:	3501      	adds	r5, #1
 800b772:	e7c6      	b.n	800b702 <_printf_common+0x3e>
 800b774:	18e1      	adds	r1, r4, r3
 800b776:	1c5a      	adds	r2, r3, #1
 800b778:	2030      	movs	r0, #48	@ 0x30
 800b77a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b77e:	4422      	add	r2, r4
 800b780:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b784:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b788:	3302      	adds	r3, #2
 800b78a:	e7c7      	b.n	800b71c <_printf_common+0x58>
 800b78c:	2301      	movs	r3, #1
 800b78e:	4622      	mov	r2, r4
 800b790:	4641      	mov	r1, r8
 800b792:	4638      	mov	r0, r7
 800b794:	47c8      	blx	r9
 800b796:	3001      	adds	r0, #1
 800b798:	d0e6      	beq.n	800b768 <_printf_common+0xa4>
 800b79a:	3601      	adds	r6, #1
 800b79c:	e7d9      	b.n	800b752 <_printf_common+0x8e>
	...

0800b7a0 <_printf_i>:
 800b7a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a4:	7e0f      	ldrb	r7, [r1, #24]
 800b7a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b7a8:	2f78      	cmp	r7, #120	@ 0x78
 800b7aa:	4691      	mov	r9, r2
 800b7ac:	4680      	mov	r8, r0
 800b7ae:	460c      	mov	r4, r1
 800b7b0:	469a      	mov	sl, r3
 800b7b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b7b6:	d807      	bhi.n	800b7c8 <_printf_i+0x28>
 800b7b8:	2f62      	cmp	r7, #98	@ 0x62
 800b7ba:	d80a      	bhi.n	800b7d2 <_printf_i+0x32>
 800b7bc:	2f00      	cmp	r7, #0
 800b7be:	f000 80d2 	beq.w	800b966 <_printf_i+0x1c6>
 800b7c2:	2f58      	cmp	r7, #88	@ 0x58
 800b7c4:	f000 80b9 	beq.w	800b93a <_printf_i+0x19a>
 800b7c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b7d0:	e03a      	b.n	800b848 <_printf_i+0xa8>
 800b7d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b7d6:	2b15      	cmp	r3, #21
 800b7d8:	d8f6      	bhi.n	800b7c8 <_printf_i+0x28>
 800b7da:	a101      	add	r1, pc, #4	@ (adr r1, 800b7e0 <_printf_i+0x40>)
 800b7dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7e0:	0800b839 	.word	0x0800b839
 800b7e4:	0800b84d 	.word	0x0800b84d
 800b7e8:	0800b7c9 	.word	0x0800b7c9
 800b7ec:	0800b7c9 	.word	0x0800b7c9
 800b7f0:	0800b7c9 	.word	0x0800b7c9
 800b7f4:	0800b7c9 	.word	0x0800b7c9
 800b7f8:	0800b84d 	.word	0x0800b84d
 800b7fc:	0800b7c9 	.word	0x0800b7c9
 800b800:	0800b7c9 	.word	0x0800b7c9
 800b804:	0800b7c9 	.word	0x0800b7c9
 800b808:	0800b7c9 	.word	0x0800b7c9
 800b80c:	0800b94d 	.word	0x0800b94d
 800b810:	0800b877 	.word	0x0800b877
 800b814:	0800b907 	.word	0x0800b907
 800b818:	0800b7c9 	.word	0x0800b7c9
 800b81c:	0800b7c9 	.word	0x0800b7c9
 800b820:	0800b96f 	.word	0x0800b96f
 800b824:	0800b7c9 	.word	0x0800b7c9
 800b828:	0800b877 	.word	0x0800b877
 800b82c:	0800b7c9 	.word	0x0800b7c9
 800b830:	0800b7c9 	.word	0x0800b7c9
 800b834:	0800b90f 	.word	0x0800b90f
 800b838:	6833      	ldr	r3, [r6, #0]
 800b83a:	1d1a      	adds	r2, r3, #4
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	6032      	str	r2, [r6, #0]
 800b840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b844:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b848:	2301      	movs	r3, #1
 800b84a:	e09d      	b.n	800b988 <_printf_i+0x1e8>
 800b84c:	6833      	ldr	r3, [r6, #0]
 800b84e:	6820      	ldr	r0, [r4, #0]
 800b850:	1d19      	adds	r1, r3, #4
 800b852:	6031      	str	r1, [r6, #0]
 800b854:	0606      	lsls	r6, r0, #24
 800b856:	d501      	bpl.n	800b85c <_printf_i+0xbc>
 800b858:	681d      	ldr	r5, [r3, #0]
 800b85a:	e003      	b.n	800b864 <_printf_i+0xc4>
 800b85c:	0645      	lsls	r5, r0, #25
 800b85e:	d5fb      	bpl.n	800b858 <_printf_i+0xb8>
 800b860:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b864:	2d00      	cmp	r5, #0
 800b866:	da03      	bge.n	800b870 <_printf_i+0xd0>
 800b868:	232d      	movs	r3, #45	@ 0x2d
 800b86a:	426d      	negs	r5, r5
 800b86c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b870:	4859      	ldr	r0, [pc, #356]	@ (800b9d8 <_printf_i+0x238>)
 800b872:	230a      	movs	r3, #10
 800b874:	e011      	b.n	800b89a <_printf_i+0xfa>
 800b876:	6821      	ldr	r1, [r4, #0]
 800b878:	6833      	ldr	r3, [r6, #0]
 800b87a:	0608      	lsls	r0, r1, #24
 800b87c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b880:	d402      	bmi.n	800b888 <_printf_i+0xe8>
 800b882:	0649      	lsls	r1, r1, #25
 800b884:	bf48      	it	mi
 800b886:	b2ad      	uxthmi	r5, r5
 800b888:	2f6f      	cmp	r7, #111	@ 0x6f
 800b88a:	4853      	ldr	r0, [pc, #332]	@ (800b9d8 <_printf_i+0x238>)
 800b88c:	6033      	str	r3, [r6, #0]
 800b88e:	bf14      	ite	ne
 800b890:	230a      	movne	r3, #10
 800b892:	2308      	moveq	r3, #8
 800b894:	2100      	movs	r1, #0
 800b896:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b89a:	6866      	ldr	r6, [r4, #4]
 800b89c:	60a6      	str	r6, [r4, #8]
 800b89e:	2e00      	cmp	r6, #0
 800b8a0:	bfa2      	ittt	ge
 800b8a2:	6821      	ldrge	r1, [r4, #0]
 800b8a4:	f021 0104 	bicge.w	r1, r1, #4
 800b8a8:	6021      	strge	r1, [r4, #0]
 800b8aa:	b90d      	cbnz	r5, 800b8b0 <_printf_i+0x110>
 800b8ac:	2e00      	cmp	r6, #0
 800b8ae:	d04b      	beq.n	800b948 <_printf_i+0x1a8>
 800b8b0:	4616      	mov	r6, r2
 800b8b2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b8b6:	fb03 5711 	mls	r7, r3, r1, r5
 800b8ba:	5dc7      	ldrb	r7, [r0, r7]
 800b8bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b8c0:	462f      	mov	r7, r5
 800b8c2:	42bb      	cmp	r3, r7
 800b8c4:	460d      	mov	r5, r1
 800b8c6:	d9f4      	bls.n	800b8b2 <_printf_i+0x112>
 800b8c8:	2b08      	cmp	r3, #8
 800b8ca:	d10b      	bne.n	800b8e4 <_printf_i+0x144>
 800b8cc:	6823      	ldr	r3, [r4, #0]
 800b8ce:	07df      	lsls	r7, r3, #31
 800b8d0:	d508      	bpl.n	800b8e4 <_printf_i+0x144>
 800b8d2:	6923      	ldr	r3, [r4, #16]
 800b8d4:	6861      	ldr	r1, [r4, #4]
 800b8d6:	4299      	cmp	r1, r3
 800b8d8:	bfde      	ittt	le
 800b8da:	2330      	movle	r3, #48	@ 0x30
 800b8dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b8e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b8e4:	1b92      	subs	r2, r2, r6
 800b8e6:	6122      	str	r2, [r4, #16]
 800b8e8:	f8cd a000 	str.w	sl, [sp]
 800b8ec:	464b      	mov	r3, r9
 800b8ee:	aa03      	add	r2, sp, #12
 800b8f0:	4621      	mov	r1, r4
 800b8f2:	4640      	mov	r0, r8
 800b8f4:	f7ff fee6 	bl	800b6c4 <_printf_common>
 800b8f8:	3001      	adds	r0, #1
 800b8fa:	d14a      	bne.n	800b992 <_printf_i+0x1f2>
 800b8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b900:	b004      	add	sp, #16
 800b902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b906:	6823      	ldr	r3, [r4, #0]
 800b908:	f043 0320 	orr.w	r3, r3, #32
 800b90c:	6023      	str	r3, [r4, #0]
 800b90e:	4833      	ldr	r0, [pc, #204]	@ (800b9dc <_printf_i+0x23c>)
 800b910:	2778      	movs	r7, #120	@ 0x78
 800b912:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b916:	6823      	ldr	r3, [r4, #0]
 800b918:	6831      	ldr	r1, [r6, #0]
 800b91a:	061f      	lsls	r7, r3, #24
 800b91c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b920:	d402      	bmi.n	800b928 <_printf_i+0x188>
 800b922:	065f      	lsls	r7, r3, #25
 800b924:	bf48      	it	mi
 800b926:	b2ad      	uxthmi	r5, r5
 800b928:	6031      	str	r1, [r6, #0]
 800b92a:	07d9      	lsls	r1, r3, #31
 800b92c:	bf44      	itt	mi
 800b92e:	f043 0320 	orrmi.w	r3, r3, #32
 800b932:	6023      	strmi	r3, [r4, #0]
 800b934:	b11d      	cbz	r5, 800b93e <_printf_i+0x19e>
 800b936:	2310      	movs	r3, #16
 800b938:	e7ac      	b.n	800b894 <_printf_i+0xf4>
 800b93a:	4827      	ldr	r0, [pc, #156]	@ (800b9d8 <_printf_i+0x238>)
 800b93c:	e7e9      	b.n	800b912 <_printf_i+0x172>
 800b93e:	6823      	ldr	r3, [r4, #0]
 800b940:	f023 0320 	bic.w	r3, r3, #32
 800b944:	6023      	str	r3, [r4, #0]
 800b946:	e7f6      	b.n	800b936 <_printf_i+0x196>
 800b948:	4616      	mov	r6, r2
 800b94a:	e7bd      	b.n	800b8c8 <_printf_i+0x128>
 800b94c:	6833      	ldr	r3, [r6, #0]
 800b94e:	6825      	ldr	r5, [r4, #0]
 800b950:	6961      	ldr	r1, [r4, #20]
 800b952:	1d18      	adds	r0, r3, #4
 800b954:	6030      	str	r0, [r6, #0]
 800b956:	062e      	lsls	r6, r5, #24
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	d501      	bpl.n	800b960 <_printf_i+0x1c0>
 800b95c:	6019      	str	r1, [r3, #0]
 800b95e:	e002      	b.n	800b966 <_printf_i+0x1c6>
 800b960:	0668      	lsls	r0, r5, #25
 800b962:	d5fb      	bpl.n	800b95c <_printf_i+0x1bc>
 800b964:	8019      	strh	r1, [r3, #0]
 800b966:	2300      	movs	r3, #0
 800b968:	6123      	str	r3, [r4, #16]
 800b96a:	4616      	mov	r6, r2
 800b96c:	e7bc      	b.n	800b8e8 <_printf_i+0x148>
 800b96e:	6833      	ldr	r3, [r6, #0]
 800b970:	1d1a      	adds	r2, r3, #4
 800b972:	6032      	str	r2, [r6, #0]
 800b974:	681e      	ldr	r6, [r3, #0]
 800b976:	6862      	ldr	r2, [r4, #4]
 800b978:	2100      	movs	r1, #0
 800b97a:	4630      	mov	r0, r6
 800b97c:	f7f4 fc28 	bl	80001d0 <memchr>
 800b980:	b108      	cbz	r0, 800b986 <_printf_i+0x1e6>
 800b982:	1b80      	subs	r0, r0, r6
 800b984:	6060      	str	r0, [r4, #4]
 800b986:	6863      	ldr	r3, [r4, #4]
 800b988:	6123      	str	r3, [r4, #16]
 800b98a:	2300      	movs	r3, #0
 800b98c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b990:	e7aa      	b.n	800b8e8 <_printf_i+0x148>
 800b992:	6923      	ldr	r3, [r4, #16]
 800b994:	4632      	mov	r2, r6
 800b996:	4649      	mov	r1, r9
 800b998:	4640      	mov	r0, r8
 800b99a:	47d0      	blx	sl
 800b99c:	3001      	adds	r0, #1
 800b99e:	d0ad      	beq.n	800b8fc <_printf_i+0x15c>
 800b9a0:	6823      	ldr	r3, [r4, #0]
 800b9a2:	079b      	lsls	r3, r3, #30
 800b9a4:	d413      	bmi.n	800b9ce <_printf_i+0x22e>
 800b9a6:	68e0      	ldr	r0, [r4, #12]
 800b9a8:	9b03      	ldr	r3, [sp, #12]
 800b9aa:	4298      	cmp	r0, r3
 800b9ac:	bfb8      	it	lt
 800b9ae:	4618      	movlt	r0, r3
 800b9b0:	e7a6      	b.n	800b900 <_printf_i+0x160>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	4632      	mov	r2, r6
 800b9b6:	4649      	mov	r1, r9
 800b9b8:	4640      	mov	r0, r8
 800b9ba:	47d0      	blx	sl
 800b9bc:	3001      	adds	r0, #1
 800b9be:	d09d      	beq.n	800b8fc <_printf_i+0x15c>
 800b9c0:	3501      	adds	r5, #1
 800b9c2:	68e3      	ldr	r3, [r4, #12]
 800b9c4:	9903      	ldr	r1, [sp, #12]
 800b9c6:	1a5b      	subs	r3, r3, r1
 800b9c8:	42ab      	cmp	r3, r5
 800b9ca:	dcf2      	bgt.n	800b9b2 <_printf_i+0x212>
 800b9cc:	e7eb      	b.n	800b9a6 <_printf_i+0x206>
 800b9ce:	2500      	movs	r5, #0
 800b9d0:	f104 0619 	add.w	r6, r4, #25
 800b9d4:	e7f5      	b.n	800b9c2 <_printf_i+0x222>
 800b9d6:	bf00      	nop
 800b9d8:	0800e782 	.word	0x0800e782
 800b9dc:	0800e793 	.word	0x0800e793

0800b9e0 <std>:
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	b510      	push	{r4, lr}
 800b9e4:	4604      	mov	r4, r0
 800b9e6:	e9c0 3300 	strd	r3, r3, [r0]
 800b9ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b9ee:	6083      	str	r3, [r0, #8]
 800b9f0:	8181      	strh	r1, [r0, #12]
 800b9f2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b9f4:	81c2      	strh	r2, [r0, #14]
 800b9f6:	6183      	str	r3, [r0, #24]
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	2208      	movs	r2, #8
 800b9fc:	305c      	adds	r0, #92	@ 0x5c
 800b9fe:	f000 f914 	bl	800bc2a <memset>
 800ba02:	4b0d      	ldr	r3, [pc, #52]	@ (800ba38 <std+0x58>)
 800ba04:	6263      	str	r3, [r4, #36]	@ 0x24
 800ba06:	4b0d      	ldr	r3, [pc, #52]	@ (800ba3c <std+0x5c>)
 800ba08:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ba0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ba40 <std+0x60>)
 800ba0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ba0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ba44 <std+0x64>)
 800ba10:	6323      	str	r3, [r4, #48]	@ 0x30
 800ba12:	4b0d      	ldr	r3, [pc, #52]	@ (800ba48 <std+0x68>)
 800ba14:	6224      	str	r4, [r4, #32]
 800ba16:	429c      	cmp	r4, r3
 800ba18:	d006      	beq.n	800ba28 <std+0x48>
 800ba1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ba1e:	4294      	cmp	r4, r2
 800ba20:	d002      	beq.n	800ba28 <std+0x48>
 800ba22:	33d0      	adds	r3, #208	@ 0xd0
 800ba24:	429c      	cmp	r4, r3
 800ba26:	d105      	bne.n	800ba34 <std+0x54>
 800ba28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ba2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba30:	f000 b978 	b.w	800bd24 <__retarget_lock_init_recursive>
 800ba34:	bd10      	pop	{r4, pc}
 800ba36:	bf00      	nop
 800ba38:	0800bba5 	.word	0x0800bba5
 800ba3c:	0800bbc7 	.word	0x0800bbc7
 800ba40:	0800bbff 	.word	0x0800bbff
 800ba44:	0800bc23 	.word	0x0800bc23
 800ba48:	20002210 	.word	0x20002210

0800ba4c <stdio_exit_handler>:
 800ba4c:	4a02      	ldr	r2, [pc, #8]	@ (800ba58 <stdio_exit_handler+0xc>)
 800ba4e:	4903      	ldr	r1, [pc, #12]	@ (800ba5c <stdio_exit_handler+0x10>)
 800ba50:	4803      	ldr	r0, [pc, #12]	@ (800ba60 <stdio_exit_handler+0x14>)
 800ba52:	f000 b869 	b.w	800bb28 <_fwalk_sglue>
 800ba56:	bf00      	nop
 800ba58:	20000100 	.word	0x20000100
 800ba5c:	0800d685 	.word	0x0800d685
 800ba60:	20000110 	.word	0x20000110

0800ba64 <cleanup_stdio>:
 800ba64:	6841      	ldr	r1, [r0, #4]
 800ba66:	4b0c      	ldr	r3, [pc, #48]	@ (800ba98 <cleanup_stdio+0x34>)
 800ba68:	4299      	cmp	r1, r3
 800ba6a:	b510      	push	{r4, lr}
 800ba6c:	4604      	mov	r4, r0
 800ba6e:	d001      	beq.n	800ba74 <cleanup_stdio+0x10>
 800ba70:	f001 fe08 	bl	800d684 <_fflush_r>
 800ba74:	68a1      	ldr	r1, [r4, #8]
 800ba76:	4b09      	ldr	r3, [pc, #36]	@ (800ba9c <cleanup_stdio+0x38>)
 800ba78:	4299      	cmp	r1, r3
 800ba7a:	d002      	beq.n	800ba82 <cleanup_stdio+0x1e>
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f001 fe01 	bl	800d684 <_fflush_r>
 800ba82:	68e1      	ldr	r1, [r4, #12]
 800ba84:	4b06      	ldr	r3, [pc, #24]	@ (800baa0 <cleanup_stdio+0x3c>)
 800ba86:	4299      	cmp	r1, r3
 800ba88:	d004      	beq.n	800ba94 <cleanup_stdio+0x30>
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba90:	f001 bdf8 	b.w	800d684 <_fflush_r>
 800ba94:	bd10      	pop	{r4, pc}
 800ba96:	bf00      	nop
 800ba98:	20002210 	.word	0x20002210
 800ba9c:	20002278 	.word	0x20002278
 800baa0:	200022e0 	.word	0x200022e0

0800baa4 <global_stdio_init.part.0>:
 800baa4:	b510      	push	{r4, lr}
 800baa6:	4b0b      	ldr	r3, [pc, #44]	@ (800bad4 <global_stdio_init.part.0+0x30>)
 800baa8:	4c0b      	ldr	r4, [pc, #44]	@ (800bad8 <global_stdio_init.part.0+0x34>)
 800baaa:	4a0c      	ldr	r2, [pc, #48]	@ (800badc <global_stdio_init.part.0+0x38>)
 800baac:	601a      	str	r2, [r3, #0]
 800baae:	4620      	mov	r0, r4
 800bab0:	2200      	movs	r2, #0
 800bab2:	2104      	movs	r1, #4
 800bab4:	f7ff ff94 	bl	800b9e0 <std>
 800bab8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800babc:	2201      	movs	r2, #1
 800babe:	2109      	movs	r1, #9
 800bac0:	f7ff ff8e 	bl	800b9e0 <std>
 800bac4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bac8:	2202      	movs	r2, #2
 800baca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bace:	2112      	movs	r1, #18
 800bad0:	f7ff bf86 	b.w	800b9e0 <std>
 800bad4:	20002348 	.word	0x20002348
 800bad8:	20002210 	.word	0x20002210
 800badc:	0800ba4d 	.word	0x0800ba4d

0800bae0 <__sfp_lock_acquire>:
 800bae0:	4801      	ldr	r0, [pc, #4]	@ (800bae8 <__sfp_lock_acquire+0x8>)
 800bae2:	f000 b920 	b.w	800bd26 <__retarget_lock_acquire_recursive>
 800bae6:	bf00      	nop
 800bae8:	20002351 	.word	0x20002351

0800baec <__sfp_lock_release>:
 800baec:	4801      	ldr	r0, [pc, #4]	@ (800baf4 <__sfp_lock_release+0x8>)
 800baee:	f000 b91b 	b.w	800bd28 <__retarget_lock_release_recursive>
 800baf2:	bf00      	nop
 800baf4:	20002351 	.word	0x20002351

0800baf8 <__sinit>:
 800baf8:	b510      	push	{r4, lr}
 800bafa:	4604      	mov	r4, r0
 800bafc:	f7ff fff0 	bl	800bae0 <__sfp_lock_acquire>
 800bb00:	6a23      	ldr	r3, [r4, #32]
 800bb02:	b11b      	cbz	r3, 800bb0c <__sinit+0x14>
 800bb04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb08:	f7ff bff0 	b.w	800baec <__sfp_lock_release>
 800bb0c:	4b04      	ldr	r3, [pc, #16]	@ (800bb20 <__sinit+0x28>)
 800bb0e:	6223      	str	r3, [r4, #32]
 800bb10:	4b04      	ldr	r3, [pc, #16]	@ (800bb24 <__sinit+0x2c>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d1f5      	bne.n	800bb04 <__sinit+0xc>
 800bb18:	f7ff ffc4 	bl	800baa4 <global_stdio_init.part.0>
 800bb1c:	e7f2      	b.n	800bb04 <__sinit+0xc>
 800bb1e:	bf00      	nop
 800bb20:	0800ba65 	.word	0x0800ba65
 800bb24:	20002348 	.word	0x20002348

0800bb28 <_fwalk_sglue>:
 800bb28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb2c:	4607      	mov	r7, r0
 800bb2e:	4688      	mov	r8, r1
 800bb30:	4614      	mov	r4, r2
 800bb32:	2600      	movs	r6, #0
 800bb34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb38:	f1b9 0901 	subs.w	r9, r9, #1
 800bb3c:	d505      	bpl.n	800bb4a <_fwalk_sglue+0x22>
 800bb3e:	6824      	ldr	r4, [r4, #0]
 800bb40:	2c00      	cmp	r4, #0
 800bb42:	d1f7      	bne.n	800bb34 <_fwalk_sglue+0xc>
 800bb44:	4630      	mov	r0, r6
 800bb46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb4a:	89ab      	ldrh	r3, [r5, #12]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d907      	bls.n	800bb60 <_fwalk_sglue+0x38>
 800bb50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb54:	3301      	adds	r3, #1
 800bb56:	d003      	beq.n	800bb60 <_fwalk_sglue+0x38>
 800bb58:	4629      	mov	r1, r5
 800bb5a:	4638      	mov	r0, r7
 800bb5c:	47c0      	blx	r8
 800bb5e:	4306      	orrs	r6, r0
 800bb60:	3568      	adds	r5, #104	@ 0x68
 800bb62:	e7e9      	b.n	800bb38 <_fwalk_sglue+0x10>

0800bb64 <siprintf>:
 800bb64:	b40e      	push	{r1, r2, r3}
 800bb66:	b500      	push	{lr}
 800bb68:	b09c      	sub	sp, #112	@ 0x70
 800bb6a:	ab1d      	add	r3, sp, #116	@ 0x74
 800bb6c:	9002      	str	r0, [sp, #8]
 800bb6e:	9006      	str	r0, [sp, #24]
 800bb70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bb74:	4809      	ldr	r0, [pc, #36]	@ (800bb9c <siprintf+0x38>)
 800bb76:	9107      	str	r1, [sp, #28]
 800bb78:	9104      	str	r1, [sp, #16]
 800bb7a:	4909      	ldr	r1, [pc, #36]	@ (800bba0 <siprintf+0x3c>)
 800bb7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb80:	9105      	str	r1, [sp, #20]
 800bb82:	6800      	ldr	r0, [r0, #0]
 800bb84:	9301      	str	r3, [sp, #4]
 800bb86:	a902      	add	r1, sp, #8
 800bb88:	f001 fbfc 	bl	800d384 <_svfiprintf_r>
 800bb8c:	9b02      	ldr	r3, [sp, #8]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	701a      	strb	r2, [r3, #0]
 800bb92:	b01c      	add	sp, #112	@ 0x70
 800bb94:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb98:	b003      	add	sp, #12
 800bb9a:	4770      	bx	lr
 800bb9c:	2000010c 	.word	0x2000010c
 800bba0:	ffff0208 	.word	0xffff0208

0800bba4 <__sread>:
 800bba4:	b510      	push	{r4, lr}
 800bba6:	460c      	mov	r4, r1
 800bba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbac:	f000 f86c 	bl	800bc88 <_read_r>
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	bfab      	itete	ge
 800bbb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bbb6:	89a3      	ldrhlt	r3, [r4, #12]
 800bbb8:	181b      	addge	r3, r3, r0
 800bbba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bbbe:	bfac      	ite	ge
 800bbc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bbc2:	81a3      	strhlt	r3, [r4, #12]
 800bbc4:	bd10      	pop	{r4, pc}

0800bbc6 <__swrite>:
 800bbc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbca:	461f      	mov	r7, r3
 800bbcc:	898b      	ldrh	r3, [r1, #12]
 800bbce:	05db      	lsls	r3, r3, #23
 800bbd0:	4605      	mov	r5, r0
 800bbd2:	460c      	mov	r4, r1
 800bbd4:	4616      	mov	r6, r2
 800bbd6:	d505      	bpl.n	800bbe4 <__swrite+0x1e>
 800bbd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbdc:	2302      	movs	r3, #2
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f000 f840 	bl	800bc64 <_lseek_r>
 800bbe4:	89a3      	ldrh	r3, [r4, #12]
 800bbe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bbee:	81a3      	strh	r3, [r4, #12]
 800bbf0:	4632      	mov	r2, r6
 800bbf2:	463b      	mov	r3, r7
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbfa:	f000 b857 	b.w	800bcac <_write_r>

0800bbfe <__sseek>:
 800bbfe:	b510      	push	{r4, lr}
 800bc00:	460c      	mov	r4, r1
 800bc02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc06:	f000 f82d 	bl	800bc64 <_lseek_r>
 800bc0a:	1c43      	adds	r3, r0, #1
 800bc0c:	89a3      	ldrh	r3, [r4, #12]
 800bc0e:	bf15      	itete	ne
 800bc10:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bc12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bc16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bc1a:	81a3      	strheq	r3, [r4, #12]
 800bc1c:	bf18      	it	ne
 800bc1e:	81a3      	strhne	r3, [r4, #12]
 800bc20:	bd10      	pop	{r4, pc}

0800bc22 <__sclose>:
 800bc22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc26:	f000 b80d 	b.w	800bc44 <_close_r>

0800bc2a <memset>:
 800bc2a:	4402      	add	r2, r0
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d100      	bne.n	800bc34 <memset+0xa>
 800bc32:	4770      	bx	lr
 800bc34:	f803 1b01 	strb.w	r1, [r3], #1
 800bc38:	e7f9      	b.n	800bc2e <memset+0x4>
	...

0800bc3c <_localeconv_r>:
 800bc3c:	4800      	ldr	r0, [pc, #0]	@ (800bc40 <_localeconv_r+0x4>)
 800bc3e:	4770      	bx	lr
 800bc40:	2000024c 	.word	0x2000024c

0800bc44 <_close_r>:
 800bc44:	b538      	push	{r3, r4, r5, lr}
 800bc46:	4d06      	ldr	r5, [pc, #24]	@ (800bc60 <_close_r+0x1c>)
 800bc48:	2300      	movs	r3, #0
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	4608      	mov	r0, r1
 800bc4e:	602b      	str	r3, [r5, #0]
 800bc50:	f7f6 fc96 	bl	8002580 <_close>
 800bc54:	1c43      	adds	r3, r0, #1
 800bc56:	d102      	bne.n	800bc5e <_close_r+0x1a>
 800bc58:	682b      	ldr	r3, [r5, #0]
 800bc5a:	b103      	cbz	r3, 800bc5e <_close_r+0x1a>
 800bc5c:	6023      	str	r3, [r4, #0]
 800bc5e:	bd38      	pop	{r3, r4, r5, pc}
 800bc60:	2000234c 	.word	0x2000234c

0800bc64 <_lseek_r>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	4d07      	ldr	r5, [pc, #28]	@ (800bc84 <_lseek_r+0x20>)
 800bc68:	4604      	mov	r4, r0
 800bc6a:	4608      	mov	r0, r1
 800bc6c:	4611      	mov	r1, r2
 800bc6e:	2200      	movs	r2, #0
 800bc70:	602a      	str	r2, [r5, #0]
 800bc72:	461a      	mov	r2, r3
 800bc74:	f7f6 fcab 	bl	80025ce <_lseek>
 800bc78:	1c43      	adds	r3, r0, #1
 800bc7a:	d102      	bne.n	800bc82 <_lseek_r+0x1e>
 800bc7c:	682b      	ldr	r3, [r5, #0]
 800bc7e:	b103      	cbz	r3, 800bc82 <_lseek_r+0x1e>
 800bc80:	6023      	str	r3, [r4, #0]
 800bc82:	bd38      	pop	{r3, r4, r5, pc}
 800bc84:	2000234c 	.word	0x2000234c

0800bc88 <_read_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4d07      	ldr	r5, [pc, #28]	@ (800bca8 <_read_r+0x20>)
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	4608      	mov	r0, r1
 800bc90:	4611      	mov	r1, r2
 800bc92:	2200      	movs	r2, #0
 800bc94:	602a      	str	r2, [r5, #0]
 800bc96:	461a      	mov	r2, r3
 800bc98:	f7f6 fc39 	bl	800250e <_read>
 800bc9c:	1c43      	adds	r3, r0, #1
 800bc9e:	d102      	bne.n	800bca6 <_read_r+0x1e>
 800bca0:	682b      	ldr	r3, [r5, #0]
 800bca2:	b103      	cbz	r3, 800bca6 <_read_r+0x1e>
 800bca4:	6023      	str	r3, [r4, #0]
 800bca6:	bd38      	pop	{r3, r4, r5, pc}
 800bca8:	2000234c 	.word	0x2000234c

0800bcac <_write_r>:
 800bcac:	b538      	push	{r3, r4, r5, lr}
 800bcae:	4d07      	ldr	r5, [pc, #28]	@ (800bccc <_write_r+0x20>)
 800bcb0:	4604      	mov	r4, r0
 800bcb2:	4608      	mov	r0, r1
 800bcb4:	4611      	mov	r1, r2
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	602a      	str	r2, [r5, #0]
 800bcba:	461a      	mov	r2, r3
 800bcbc:	f7f6 fc44 	bl	8002548 <_write>
 800bcc0:	1c43      	adds	r3, r0, #1
 800bcc2:	d102      	bne.n	800bcca <_write_r+0x1e>
 800bcc4:	682b      	ldr	r3, [r5, #0]
 800bcc6:	b103      	cbz	r3, 800bcca <_write_r+0x1e>
 800bcc8:	6023      	str	r3, [r4, #0]
 800bcca:	bd38      	pop	{r3, r4, r5, pc}
 800bccc:	2000234c 	.word	0x2000234c

0800bcd0 <__errno>:
 800bcd0:	4b01      	ldr	r3, [pc, #4]	@ (800bcd8 <__errno+0x8>)
 800bcd2:	6818      	ldr	r0, [r3, #0]
 800bcd4:	4770      	bx	lr
 800bcd6:	bf00      	nop
 800bcd8:	2000010c 	.word	0x2000010c

0800bcdc <__libc_init_array>:
 800bcdc:	b570      	push	{r4, r5, r6, lr}
 800bcde:	4d0d      	ldr	r5, [pc, #52]	@ (800bd14 <__libc_init_array+0x38>)
 800bce0:	4c0d      	ldr	r4, [pc, #52]	@ (800bd18 <__libc_init_array+0x3c>)
 800bce2:	1b64      	subs	r4, r4, r5
 800bce4:	10a4      	asrs	r4, r4, #2
 800bce6:	2600      	movs	r6, #0
 800bce8:	42a6      	cmp	r6, r4
 800bcea:	d109      	bne.n	800bd00 <__libc_init_array+0x24>
 800bcec:	4d0b      	ldr	r5, [pc, #44]	@ (800bd1c <__libc_init_array+0x40>)
 800bcee:	4c0c      	ldr	r4, [pc, #48]	@ (800bd20 <__libc_init_array+0x44>)
 800bcf0:	f002 fb6c 	bl	800e3cc <_init>
 800bcf4:	1b64      	subs	r4, r4, r5
 800bcf6:	10a4      	asrs	r4, r4, #2
 800bcf8:	2600      	movs	r6, #0
 800bcfa:	42a6      	cmp	r6, r4
 800bcfc:	d105      	bne.n	800bd0a <__libc_init_array+0x2e>
 800bcfe:	bd70      	pop	{r4, r5, r6, pc}
 800bd00:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd04:	4798      	blx	r3
 800bd06:	3601      	adds	r6, #1
 800bd08:	e7ee      	b.n	800bce8 <__libc_init_array+0xc>
 800bd0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd0e:	4798      	blx	r3
 800bd10:	3601      	adds	r6, #1
 800bd12:	e7f2      	b.n	800bcfa <__libc_init_array+0x1e>
 800bd14:	0800eae8 	.word	0x0800eae8
 800bd18:	0800eae8 	.word	0x0800eae8
 800bd1c:	0800eae8 	.word	0x0800eae8
 800bd20:	0800eaec 	.word	0x0800eaec

0800bd24 <__retarget_lock_init_recursive>:
 800bd24:	4770      	bx	lr

0800bd26 <__retarget_lock_acquire_recursive>:
 800bd26:	4770      	bx	lr

0800bd28 <__retarget_lock_release_recursive>:
 800bd28:	4770      	bx	lr

0800bd2a <quorem>:
 800bd2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd2e:	6903      	ldr	r3, [r0, #16]
 800bd30:	690c      	ldr	r4, [r1, #16]
 800bd32:	42a3      	cmp	r3, r4
 800bd34:	4607      	mov	r7, r0
 800bd36:	db7e      	blt.n	800be36 <quorem+0x10c>
 800bd38:	3c01      	subs	r4, #1
 800bd3a:	f101 0814 	add.w	r8, r1, #20
 800bd3e:	00a3      	lsls	r3, r4, #2
 800bd40:	f100 0514 	add.w	r5, r0, #20
 800bd44:	9300      	str	r3, [sp, #0]
 800bd46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd4a:	9301      	str	r3, [sp, #4]
 800bd4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd54:	3301      	adds	r3, #1
 800bd56:	429a      	cmp	r2, r3
 800bd58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd5c:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd60:	d32e      	bcc.n	800bdc0 <quorem+0x96>
 800bd62:	f04f 0a00 	mov.w	sl, #0
 800bd66:	46c4      	mov	ip, r8
 800bd68:	46ae      	mov	lr, r5
 800bd6a:	46d3      	mov	fp, sl
 800bd6c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd70:	b298      	uxth	r0, r3
 800bd72:	fb06 a000 	mla	r0, r6, r0, sl
 800bd76:	0c02      	lsrs	r2, r0, #16
 800bd78:	0c1b      	lsrs	r3, r3, #16
 800bd7a:	fb06 2303 	mla	r3, r6, r3, r2
 800bd7e:	f8de 2000 	ldr.w	r2, [lr]
 800bd82:	b280      	uxth	r0, r0
 800bd84:	b292      	uxth	r2, r2
 800bd86:	1a12      	subs	r2, r2, r0
 800bd88:	445a      	add	r2, fp
 800bd8a:	f8de 0000 	ldr.w	r0, [lr]
 800bd8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bd98:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bd9c:	b292      	uxth	r2, r2
 800bd9e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bda2:	45e1      	cmp	r9, ip
 800bda4:	f84e 2b04 	str.w	r2, [lr], #4
 800bda8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bdac:	d2de      	bcs.n	800bd6c <quorem+0x42>
 800bdae:	9b00      	ldr	r3, [sp, #0]
 800bdb0:	58eb      	ldr	r3, [r5, r3]
 800bdb2:	b92b      	cbnz	r3, 800bdc0 <quorem+0x96>
 800bdb4:	9b01      	ldr	r3, [sp, #4]
 800bdb6:	3b04      	subs	r3, #4
 800bdb8:	429d      	cmp	r5, r3
 800bdba:	461a      	mov	r2, r3
 800bdbc:	d32f      	bcc.n	800be1e <quorem+0xf4>
 800bdbe:	613c      	str	r4, [r7, #16]
 800bdc0:	4638      	mov	r0, r7
 800bdc2:	f001 f97b 	bl	800d0bc <__mcmp>
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	db25      	blt.n	800be16 <quorem+0xec>
 800bdca:	4629      	mov	r1, r5
 800bdcc:	2000      	movs	r0, #0
 800bdce:	f858 2b04 	ldr.w	r2, [r8], #4
 800bdd2:	f8d1 c000 	ldr.w	ip, [r1]
 800bdd6:	fa1f fe82 	uxth.w	lr, r2
 800bdda:	fa1f f38c 	uxth.w	r3, ip
 800bdde:	eba3 030e 	sub.w	r3, r3, lr
 800bde2:	4403      	add	r3, r0
 800bde4:	0c12      	lsrs	r2, r2, #16
 800bde6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bdea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdf4:	45c1      	cmp	r9, r8
 800bdf6:	f841 3b04 	str.w	r3, [r1], #4
 800bdfa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bdfe:	d2e6      	bcs.n	800bdce <quorem+0xa4>
 800be00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be08:	b922      	cbnz	r2, 800be14 <quorem+0xea>
 800be0a:	3b04      	subs	r3, #4
 800be0c:	429d      	cmp	r5, r3
 800be0e:	461a      	mov	r2, r3
 800be10:	d30b      	bcc.n	800be2a <quorem+0x100>
 800be12:	613c      	str	r4, [r7, #16]
 800be14:	3601      	adds	r6, #1
 800be16:	4630      	mov	r0, r6
 800be18:	b003      	add	sp, #12
 800be1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1e:	6812      	ldr	r2, [r2, #0]
 800be20:	3b04      	subs	r3, #4
 800be22:	2a00      	cmp	r2, #0
 800be24:	d1cb      	bne.n	800bdbe <quorem+0x94>
 800be26:	3c01      	subs	r4, #1
 800be28:	e7c6      	b.n	800bdb8 <quorem+0x8e>
 800be2a:	6812      	ldr	r2, [r2, #0]
 800be2c:	3b04      	subs	r3, #4
 800be2e:	2a00      	cmp	r2, #0
 800be30:	d1ef      	bne.n	800be12 <quorem+0xe8>
 800be32:	3c01      	subs	r4, #1
 800be34:	e7ea      	b.n	800be0c <quorem+0xe2>
 800be36:	2000      	movs	r0, #0
 800be38:	e7ee      	b.n	800be18 <quorem+0xee>
 800be3a:	0000      	movs	r0, r0
 800be3c:	0000      	movs	r0, r0
	...

0800be40 <_dtoa_r>:
 800be40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be44:	69c7      	ldr	r7, [r0, #28]
 800be46:	b099      	sub	sp, #100	@ 0x64
 800be48:	ed8d 0b02 	vstr	d0, [sp, #8]
 800be4c:	ec55 4b10 	vmov	r4, r5, d0
 800be50:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800be52:	9109      	str	r1, [sp, #36]	@ 0x24
 800be54:	4683      	mov	fp, r0
 800be56:	920e      	str	r2, [sp, #56]	@ 0x38
 800be58:	9313      	str	r3, [sp, #76]	@ 0x4c
 800be5a:	b97f      	cbnz	r7, 800be7c <_dtoa_r+0x3c>
 800be5c:	2010      	movs	r0, #16
 800be5e:	f000 fdfd 	bl	800ca5c <malloc>
 800be62:	4602      	mov	r2, r0
 800be64:	f8cb 001c 	str.w	r0, [fp, #28]
 800be68:	b920      	cbnz	r0, 800be74 <_dtoa_r+0x34>
 800be6a:	4ba7      	ldr	r3, [pc, #668]	@ (800c108 <_dtoa_r+0x2c8>)
 800be6c:	21ef      	movs	r1, #239	@ 0xef
 800be6e:	48a7      	ldr	r0, [pc, #668]	@ (800c10c <_dtoa_r+0x2cc>)
 800be70:	f001 fc68 	bl	800d744 <__assert_func>
 800be74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800be78:	6007      	str	r7, [r0, #0]
 800be7a:	60c7      	str	r7, [r0, #12]
 800be7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be80:	6819      	ldr	r1, [r3, #0]
 800be82:	b159      	cbz	r1, 800be9c <_dtoa_r+0x5c>
 800be84:	685a      	ldr	r2, [r3, #4]
 800be86:	604a      	str	r2, [r1, #4]
 800be88:	2301      	movs	r3, #1
 800be8a:	4093      	lsls	r3, r2
 800be8c:	608b      	str	r3, [r1, #8]
 800be8e:	4658      	mov	r0, fp
 800be90:	f000 feda 	bl	800cc48 <_Bfree>
 800be94:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be98:	2200      	movs	r2, #0
 800be9a:	601a      	str	r2, [r3, #0]
 800be9c:	1e2b      	subs	r3, r5, #0
 800be9e:	bfb9      	ittee	lt
 800bea0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bea4:	9303      	strlt	r3, [sp, #12]
 800bea6:	2300      	movge	r3, #0
 800bea8:	6033      	strge	r3, [r6, #0]
 800beaa:	9f03      	ldr	r7, [sp, #12]
 800beac:	4b98      	ldr	r3, [pc, #608]	@ (800c110 <_dtoa_r+0x2d0>)
 800beae:	bfbc      	itt	lt
 800beb0:	2201      	movlt	r2, #1
 800beb2:	6032      	strlt	r2, [r6, #0]
 800beb4:	43bb      	bics	r3, r7
 800beb6:	d112      	bne.n	800bede <_dtoa_r+0x9e>
 800beb8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800beba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bebe:	6013      	str	r3, [r2, #0]
 800bec0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bec4:	4323      	orrs	r3, r4
 800bec6:	f000 854d 	beq.w	800c964 <_dtoa_r+0xb24>
 800beca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800becc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c124 <_dtoa_r+0x2e4>
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	f000 854f 	beq.w	800c974 <_dtoa_r+0xb34>
 800bed6:	f10a 0303 	add.w	r3, sl, #3
 800beda:	f000 bd49 	b.w	800c970 <_dtoa_r+0xb30>
 800bede:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bee2:	2200      	movs	r2, #0
 800bee4:	ec51 0b17 	vmov	r0, r1, d7
 800bee8:	2300      	movs	r3, #0
 800beea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800beee:	f7f4 fdeb 	bl	8000ac8 <__aeabi_dcmpeq>
 800bef2:	4680      	mov	r8, r0
 800bef4:	b158      	cbz	r0, 800bf0e <_dtoa_r+0xce>
 800bef6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bef8:	2301      	movs	r3, #1
 800befa:	6013      	str	r3, [r2, #0]
 800befc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800befe:	b113      	cbz	r3, 800bf06 <_dtoa_r+0xc6>
 800bf00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bf02:	4b84      	ldr	r3, [pc, #528]	@ (800c114 <_dtoa_r+0x2d4>)
 800bf04:	6013      	str	r3, [r2, #0]
 800bf06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c128 <_dtoa_r+0x2e8>
 800bf0a:	f000 bd33 	b.w	800c974 <_dtoa_r+0xb34>
 800bf0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bf12:	aa16      	add	r2, sp, #88	@ 0x58
 800bf14:	a917      	add	r1, sp, #92	@ 0x5c
 800bf16:	4658      	mov	r0, fp
 800bf18:	f001 f980 	bl	800d21c <__d2b>
 800bf1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bf20:	4681      	mov	r9, r0
 800bf22:	2e00      	cmp	r6, #0
 800bf24:	d077      	beq.n	800c016 <_dtoa_r+0x1d6>
 800bf26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bf2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bf38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bf3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bf40:	4619      	mov	r1, r3
 800bf42:	2200      	movs	r2, #0
 800bf44:	4b74      	ldr	r3, [pc, #464]	@ (800c118 <_dtoa_r+0x2d8>)
 800bf46:	f7f4 f99f 	bl	8000288 <__aeabi_dsub>
 800bf4a:	a369      	add	r3, pc, #420	@ (adr r3, 800c0f0 <_dtoa_r+0x2b0>)
 800bf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf50:	f7f4 fb52 	bl	80005f8 <__aeabi_dmul>
 800bf54:	a368      	add	r3, pc, #416	@ (adr r3, 800c0f8 <_dtoa_r+0x2b8>)
 800bf56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5a:	f7f4 f997 	bl	800028c <__adddf3>
 800bf5e:	4604      	mov	r4, r0
 800bf60:	4630      	mov	r0, r6
 800bf62:	460d      	mov	r5, r1
 800bf64:	f7f4 fade 	bl	8000524 <__aeabi_i2d>
 800bf68:	a365      	add	r3, pc, #404	@ (adr r3, 800c100 <_dtoa_r+0x2c0>)
 800bf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6e:	f7f4 fb43 	bl	80005f8 <__aeabi_dmul>
 800bf72:	4602      	mov	r2, r0
 800bf74:	460b      	mov	r3, r1
 800bf76:	4620      	mov	r0, r4
 800bf78:	4629      	mov	r1, r5
 800bf7a:	f7f4 f987 	bl	800028c <__adddf3>
 800bf7e:	4604      	mov	r4, r0
 800bf80:	460d      	mov	r5, r1
 800bf82:	f7f4 fde9 	bl	8000b58 <__aeabi_d2iz>
 800bf86:	2200      	movs	r2, #0
 800bf88:	4607      	mov	r7, r0
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	4629      	mov	r1, r5
 800bf90:	f7f4 fda4 	bl	8000adc <__aeabi_dcmplt>
 800bf94:	b140      	cbz	r0, 800bfa8 <_dtoa_r+0x168>
 800bf96:	4638      	mov	r0, r7
 800bf98:	f7f4 fac4 	bl	8000524 <__aeabi_i2d>
 800bf9c:	4622      	mov	r2, r4
 800bf9e:	462b      	mov	r3, r5
 800bfa0:	f7f4 fd92 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfa4:	b900      	cbnz	r0, 800bfa8 <_dtoa_r+0x168>
 800bfa6:	3f01      	subs	r7, #1
 800bfa8:	2f16      	cmp	r7, #22
 800bfaa:	d851      	bhi.n	800c050 <_dtoa_r+0x210>
 800bfac:	4b5b      	ldr	r3, [pc, #364]	@ (800c11c <_dtoa_r+0x2dc>)
 800bfae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfba:	f7f4 fd8f 	bl	8000adc <__aeabi_dcmplt>
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	d048      	beq.n	800c054 <_dtoa_r+0x214>
 800bfc2:	3f01      	subs	r7, #1
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	9312      	str	r3, [sp, #72]	@ 0x48
 800bfc8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bfca:	1b9b      	subs	r3, r3, r6
 800bfcc:	1e5a      	subs	r2, r3, #1
 800bfce:	bf44      	itt	mi
 800bfd0:	f1c3 0801 	rsbmi	r8, r3, #1
 800bfd4:	2300      	movmi	r3, #0
 800bfd6:	9208      	str	r2, [sp, #32]
 800bfd8:	bf54      	ite	pl
 800bfda:	f04f 0800 	movpl.w	r8, #0
 800bfde:	9308      	strmi	r3, [sp, #32]
 800bfe0:	2f00      	cmp	r7, #0
 800bfe2:	db39      	blt.n	800c058 <_dtoa_r+0x218>
 800bfe4:	9b08      	ldr	r3, [sp, #32]
 800bfe6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bfe8:	443b      	add	r3, r7
 800bfea:	9308      	str	r3, [sp, #32]
 800bfec:	2300      	movs	r3, #0
 800bfee:	930a      	str	r3, [sp, #40]	@ 0x28
 800bff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bff2:	2b09      	cmp	r3, #9
 800bff4:	d864      	bhi.n	800c0c0 <_dtoa_r+0x280>
 800bff6:	2b05      	cmp	r3, #5
 800bff8:	bfc4      	itt	gt
 800bffa:	3b04      	subgt	r3, #4
 800bffc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c000:	f1a3 0302 	sub.w	r3, r3, #2
 800c004:	bfcc      	ite	gt
 800c006:	2400      	movgt	r4, #0
 800c008:	2401      	movle	r4, #1
 800c00a:	2b03      	cmp	r3, #3
 800c00c:	d863      	bhi.n	800c0d6 <_dtoa_r+0x296>
 800c00e:	e8df f003 	tbb	[pc, r3]
 800c012:	372a      	.short	0x372a
 800c014:	5535      	.short	0x5535
 800c016:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c01a:	441e      	add	r6, r3
 800c01c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c020:	2b20      	cmp	r3, #32
 800c022:	bfc1      	itttt	gt
 800c024:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c028:	409f      	lslgt	r7, r3
 800c02a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c02e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c032:	bfd6      	itet	le
 800c034:	f1c3 0320 	rsble	r3, r3, #32
 800c038:	ea47 0003 	orrgt.w	r0, r7, r3
 800c03c:	fa04 f003 	lslle.w	r0, r4, r3
 800c040:	f7f4 fa60 	bl	8000504 <__aeabi_ui2d>
 800c044:	2201      	movs	r2, #1
 800c046:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c04a:	3e01      	subs	r6, #1
 800c04c:	9214      	str	r2, [sp, #80]	@ 0x50
 800c04e:	e777      	b.n	800bf40 <_dtoa_r+0x100>
 800c050:	2301      	movs	r3, #1
 800c052:	e7b8      	b.n	800bfc6 <_dtoa_r+0x186>
 800c054:	9012      	str	r0, [sp, #72]	@ 0x48
 800c056:	e7b7      	b.n	800bfc8 <_dtoa_r+0x188>
 800c058:	427b      	negs	r3, r7
 800c05a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c05c:	2300      	movs	r3, #0
 800c05e:	eba8 0807 	sub.w	r8, r8, r7
 800c062:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c064:	e7c4      	b.n	800bff0 <_dtoa_r+0x1b0>
 800c066:	2300      	movs	r3, #0
 800c068:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c06a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	dc35      	bgt.n	800c0dc <_dtoa_r+0x29c>
 800c070:	2301      	movs	r3, #1
 800c072:	9300      	str	r3, [sp, #0]
 800c074:	9307      	str	r3, [sp, #28]
 800c076:	461a      	mov	r2, r3
 800c078:	920e      	str	r2, [sp, #56]	@ 0x38
 800c07a:	e00b      	b.n	800c094 <_dtoa_r+0x254>
 800c07c:	2301      	movs	r3, #1
 800c07e:	e7f3      	b.n	800c068 <_dtoa_r+0x228>
 800c080:	2300      	movs	r3, #0
 800c082:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c084:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c086:	18fb      	adds	r3, r7, r3
 800c088:	9300      	str	r3, [sp, #0]
 800c08a:	3301      	adds	r3, #1
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	9307      	str	r3, [sp, #28]
 800c090:	bfb8      	it	lt
 800c092:	2301      	movlt	r3, #1
 800c094:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c098:	2100      	movs	r1, #0
 800c09a:	2204      	movs	r2, #4
 800c09c:	f102 0514 	add.w	r5, r2, #20
 800c0a0:	429d      	cmp	r5, r3
 800c0a2:	d91f      	bls.n	800c0e4 <_dtoa_r+0x2a4>
 800c0a4:	6041      	str	r1, [r0, #4]
 800c0a6:	4658      	mov	r0, fp
 800c0a8:	f000 fd8e 	bl	800cbc8 <_Balloc>
 800c0ac:	4682      	mov	sl, r0
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	d13c      	bne.n	800c12c <_dtoa_r+0x2ec>
 800c0b2:	4b1b      	ldr	r3, [pc, #108]	@ (800c120 <_dtoa_r+0x2e0>)
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	f240 11af 	movw	r1, #431	@ 0x1af
 800c0ba:	e6d8      	b.n	800be6e <_dtoa_r+0x2e>
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e7e0      	b.n	800c082 <_dtoa_r+0x242>
 800c0c0:	2401      	movs	r4, #1
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c0c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c0cc:	9300      	str	r3, [sp, #0]
 800c0ce:	9307      	str	r3, [sp, #28]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	2312      	movs	r3, #18
 800c0d4:	e7d0      	b.n	800c078 <_dtoa_r+0x238>
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0da:	e7f5      	b.n	800c0c8 <_dtoa_r+0x288>
 800c0dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0de:	9300      	str	r3, [sp, #0]
 800c0e0:	9307      	str	r3, [sp, #28]
 800c0e2:	e7d7      	b.n	800c094 <_dtoa_r+0x254>
 800c0e4:	3101      	adds	r1, #1
 800c0e6:	0052      	lsls	r2, r2, #1
 800c0e8:	e7d8      	b.n	800c09c <_dtoa_r+0x25c>
 800c0ea:	bf00      	nop
 800c0ec:	f3af 8000 	nop.w
 800c0f0:	636f4361 	.word	0x636f4361
 800c0f4:	3fd287a7 	.word	0x3fd287a7
 800c0f8:	8b60c8b3 	.word	0x8b60c8b3
 800c0fc:	3fc68a28 	.word	0x3fc68a28
 800c100:	509f79fb 	.word	0x509f79fb
 800c104:	3fd34413 	.word	0x3fd34413
 800c108:	0800e7b1 	.word	0x0800e7b1
 800c10c:	0800e7c8 	.word	0x0800e7c8
 800c110:	7ff00000 	.word	0x7ff00000
 800c114:	0800e781 	.word	0x0800e781
 800c118:	3ff80000 	.word	0x3ff80000
 800c11c:	0800e8c0 	.word	0x0800e8c0
 800c120:	0800e820 	.word	0x0800e820
 800c124:	0800e7ad 	.word	0x0800e7ad
 800c128:	0800e780 	.word	0x0800e780
 800c12c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c130:	6018      	str	r0, [r3, #0]
 800c132:	9b07      	ldr	r3, [sp, #28]
 800c134:	2b0e      	cmp	r3, #14
 800c136:	f200 80a4 	bhi.w	800c282 <_dtoa_r+0x442>
 800c13a:	2c00      	cmp	r4, #0
 800c13c:	f000 80a1 	beq.w	800c282 <_dtoa_r+0x442>
 800c140:	2f00      	cmp	r7, #0
 800c142:	dd33      	ble.n	800c1ac <_dtoa_r+0x36c>
 800c144:	4bad      	ldr	r3, [pc, #692]	@ (800c3fc <_dtoa_r+0x5bc>)
 800c146:	f007 020f 	and.w	r2, r7, #15
 800c14a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c14e:	ed93 7b00 	vldr	d7, [r3]
 800c152:	05f8      	lsls	r0, r7, #23
 800c154:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c158:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c15c:	d516      	bpl.n	800c18c <_dtoa_r+0x34c>
 800c15e:	4ba8      	ldr	r3, [pc, #672]	@ (800c400 <_dtoa_r+0x5c0>)
 800c160:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c164:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c168:	f7f4 fb70 	bl	800084c <__aeabi_ddiv>
 800c16c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c170:	f004 040f 	and.w	r4, r4, #15
 800c174:	2603      	movs	r6, #3
 800c176:	4da2      	ldr	r5, [pc, #648]	@ (800c400 <_dtoa_r+0x5c0>)
 800c178:	b954      	cbnz	r4, 800c190 <_dtoa_r+0x350>
 800c17a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c17e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c182:	f7f4 fb63 	bl	800084c <__aeabi_ddiv>
 800c186:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c18a:	e028      	b.n	800c1de <_dtoa_r+0x39e>
 800c18c:	2602      	movs	r6, #2
 800c18e:	e7f2      	b.n	800c176 <_dtoa_r+0x336>
 800c190:	07e1      	lsls	r1, r4, #31
 800c192:	d508      	bpl.n	800c1a6 <_dtoa_r+0x366>
 800c194:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c198:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c19c:	f7f4 fa2c 	bl	80005f8 <__aeabi_dmul>
 800c1a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1a4:	3601      	adds	r6, #1
 800c1a6:	1064      	asrs	r4, r4, #1
 800c1a8:	3508      	adds	r5, #8
 800c1aa:	e7e5      	b.n	800c178 <_dtoa_r+0x338>
 800c1ac:	f000 80d2 	beq.w	800c354 <_dtoa_r+0x514>
 800c1b0:	427c      	negs	r4, r7
 800c1b2:	4b92      	ldr	r3, [pc, #584]	@ (800c3fc <_dtoa_r+0x5bc>)
 800c1b4:	4d92      	ldr	r5, [pc, #584]	@ (800c400 <_dtoa_r+0x5c0>)
 800c1b6:	f004 020f 	and.w	r2, r4, #15
 800c1ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1c6:	f7f4 fa17 	bl	80005f8 <__aeabi_dmul>
 800c1ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1ce:	1124      	asrs	r4, r4, #4
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	2602      	movs	r6, #2
 800c1d4:	2c00      	cmp	r4, #0
 800c1d6:	f040 80b2 	bne.w	800c33e <_dtoa_r+0x4fe>
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d1d3      	bne.n	800c186 <_dtoa_r+0x346>
 800c1de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c1e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	f000 80b7 	beq.w	800c358 <_dtoa_r+0x518>
 800c1ea:	4b86      	ldr	r3, [pc, #536]	@ (800c404 <_dtoa_r+0x5c4>)
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	4629      	mov	r1, r5
 800c1f2:	f7f4 fc73 	bl	8000adc <__aeabi_dcmplt>
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	f000 80ae 	beq.w	800c358 <_dtoa_r+0x518>
 800c1fc:	9b07      	ldr	r3, [sp, #28]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	f000 80aa 	beq.w	800c358 <_dtoa_r+0x518>
 800c204:	9b00      	ldr	r3, [sp, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	dd37      	ble.n	800c27a <_dtoa_r+0x43a>
 800c20a:	1e7b      	subs	r3, r7, #1
 800c20c:	9304      	str	r3, [sp, #16]
 800c20e:	4620      	mov	r0, r4
 800c210:	4b7d      	ldr	r3, [pc, #500]	@ (800c408 <_dtoa_r+0x5c8>)
 800c212:	2200      	movs	r2, #0
 800c214:	4629      	mov	r1, r5
 800c216:	f7f4 f9ef 	bl	80005f8 <__aeabi_dmul>
 800c21a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c21e:	9c00      	ldr	r4, [sp, #0]
 800c220:	3601      	adds	r6, #1
 800c222:	4630      	mov	r0, r6
 800c224:	f7f4 f97e 	bl	8000524 <__aeabi_i2d>
 800c228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c22c:	f7f4 f9e4 	bl	80005f8 <__aeabi_dmul>
 800c230:	4b76      	ldr	r3, [pc, #472]	@ (800c40c <_dtoa_r+0x5cc>)
 800c232:	2200      	movs	r2, #0
 800c234:	f7f4 f82a 	bl	800028c <__adddf3>
 800c238:	4605      	mov	r5, r0
 800c23a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c23e:	2c00      	cmp	r4, #0
 800c240:	f040 808d 	bne.w	800c35e <_dtoa_r+0x51e>
 800c244:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c248:	4b71      	ldr	r3, [pc, #452]	@ (800c410 <_dtoa_r+0x5d0>)
 800c24a:	2200      	movs	r2, #0
 800c24c:	f7f4 f81c 	bl	8000288 <__aeabi_dsub>
 800c250:	4602      	mov	r2, r0
 800c252:	460b      	mov	r3, r1
 800c254:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c258:	462a      	mov	r2, r5
 800c25a:	4633      	mov	r3, r6
 800c25c:	f7f4 fc5c 	bl	8000b18 <__aeabi_dcmpgt>
 800c260:	2800      	cmp	r0, #0
 800c262:	f040 828b 	bne.w	800c77c <_dtoa_r+0x93c>
 800c266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c26a:	462a      	mov	r2, r5
 800c26c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c270:	f7f4 fc34 	bl	8000adc <__aeabi_dcmplt>
 800c274:	2800      	cmp	r0, #0
 800c276:	f040 8128 	bne.w	800c4ca <_dtoa_r+0x68a>
 800c27a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c27e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c282:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c284:	2b00      	cmp	r3, #0
 800c286:	f2c0 815a 	blt.w	800c53e <_dtoa_r+0x6fe>
 800c28a:	2f0e      	cmp	r7, #14
 800c28c:	f300 8157 	bgt.w	800c53e <_dtoa_r+0x6fe>
 800c290:	4b5a      	ldr	r3, [pc, #360]	@ (800c3fc <_dtoa_r+0x5bc>)
 800c292:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c296:	ed93 7b00 	vldr	d7, [r3]
 800c29a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	ed8d 7b00 	vstr	d7, [sp]
 800c2a2:	da03      	bge.n	800c2ac <_dtoa_r+0x46c>
 800c2a4:	9b07      	ldr	r3, [sp, #28]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	f340 8101 	ble.w	800c4ae <_dtoa_r+0x66e>
 800c2ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c2b0:	4656      	mov	r6, sl
 800c2b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	4629      	mov	r1, r5
 800c2ba:	f7f4 fac7 	bl	800084c <__aeabi_ddiv>
 800c2be:	f7f4 fc4b 	bl	8000b58 <__aeabi_d2iz>
 800c2c2:	4680      	mov	r8, r0
 800c2c4:	f7f4 f92e 	bl	8000524 <__aeabi_i2d>
 800c2c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2cc:	f7f4 f994 	bl	80005f8 <__aeabi_dmul>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	4629      	mov	r1, r5
 800c2d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c2dc:	f7f3 ffd4 	bl	8000288 <__aeabi_dsub>
 800c2e0:	f806 4b01 	strb.w	r4, [r6], #1
 800c2e4:	9d07      	ldr	r5, [sp, #28]
 800c2e6:	eba6 040a 	sub.w	r4, r6, sl
 800c2ea:	42a5      	cmp	r5, r4
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	f040 8117 	bne.w	800c522 <_dtoa_r+0x6e2>
 800c2f4:	f7f3 ffca 	bl	800028c <__adddf3>
 800c2f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2fc:	4604      	mov	r4, r0
 800c2fe:	460d      	mov	r5, r1
 800c300:	f7f4 fc0a 	bl	8000b18 <__aeabi_dcmpgt>
 800c304:	2800      	cmp	r0, #0
 800c306:	f040 80f9 	bne.w	800c4fc <_dtoa_r+0x6bc>
 800c30a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c30e:	4620      	mov	r0, r4
 800c310:	4629      	mov	r1, r5
 800c312:	f7f4 fbd9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c316:	b118      	cbz	r0, 800c320 <_dtoa_r+0x4e0>
 800c318:	f018 0f01 	tst.w	r8, #1
 800c31c:	f040 80ee 	bne.w	800c4fc <_dtoa_r+0x6bc>
 800c320:	4649      	mov	r1, r9
 800c322:	4658      	mov	r0, fp
 800c324:	f000 fc90 	bl	800cc48 <_Bfree>
 800c328:	2300      	movs	r3, #0
 800c32a:	7033      	strb	r3, [r6, #0]
 800c32c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c32e:	3701      	adds	r7, #1
 800c330:	601f      	str	r7, [r3, #0]
 800c332:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c334:	2b00      	cmp	r3, #0
 800c336:	f000 831d 	beq.w	800c974 <_dtoa_r+0xb34>
 800c33a:	601e      	str	r6, [r3, #0]
 800c33c:	e31a      	b.n	800c974 <_dtoa_r+0xb34>
 800c33e:	07e2      	lsls	r2, r4, #31
 800c340:	d505      	bpl.n	800c34e <_dtoa_r+0x50e>
 800c342:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c346:	f7f4 f957 	bl	80005f8 <__aeabi_dmul>
 800c34a:	3601      	adds	r6, #1
 800c34c:	2301      	movs	r3, #1
 800c34e:	1064      	asrs	r4, r4, #1
 800c350:	3508      	adds	r5, #8
 800c352:	e73f      	b.n	800c1d4 <_dtoa_r+0x394>
 800c354:	2602      	movs	r6, #2
 800c356:	e742      	b.n	800c1de <_dtoa_r+0x39e>
 800c358:	9c07      	ldr	r4, [sp, #28]
 800c35a:	9704      	str	r7, [sp, #16]
 800c35c:	e761      	b.n	800c222 <_dtoa_r+0x3e2>
 800c35e:	4b27      	ldr	r3, [pc, #156]	@ (800c3fc <_dtoa_r+0x5bc>)
 800c360:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c362:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c366:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c36a:	4454      	add	r4, sl
 800c36c:	2900      	cmp	r1, #0
 800c36e:	d053      	beq.n	800c418 <_dtoa_r+0x5d8>
 800c370:	4928      	ldr	r1, [pc, #160]	@ (800c414 <_dtoa_r+0x5d4>)
 800c372:	2000      	movs	r0, #0
 800c374:	f7f4 fa6a 	bl	800084c <__aeabi_ddiv>
 800c378:	4633      	mov	r3, r6
 800c37a:	462a      	mov	r2, r5
 800c37c:	f7f3 ff84 	bl	8000288 <__aeabi_dsub>
 800c380:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c384:	4656      	mov	r6, sl
 800c386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c38a:	f7f4 fbe5 	bl	8000b58 <__aeabi_d2iz>
 800c38e:	4605      	mov	r5, r0
 800c390:	f7f4 f8c8 	bl	8000524 <__aeabi_i2d>
 800c394:	4602      	mov	r2, r0
 800c396:	460b      	mov	r3, r1
 800c398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c39c:	f7f3 ff74 	bl	8000288 <__aeabi_dsub>
 800c3a0:	3530      	adds	r5, #48	@ 0x30
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c3aa:	f806 5b01 	strb.w	r5, [r6], #1
 800c3ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c3b2:	f7f4 fb93 	bl	8000adc <__aeabi_dcmplt>
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	d171      	bne.n	800c49e <_dtoa_r+0x65e>
 800c3ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3be:	4911      	ldr	r1, [pc, #68]	@ (800c404 <_dtoa_r+0x5c4>)
 800c3c0:	2000      	movs	r0, #0
 800c3c2:	f7f3 ff61 	bl	8000288 <__aeabi_dsub>
 800c3c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c3ca:	f7f4 fb87 	bl	8000adc <__aeabi_dcmplt>
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	f040 8095 	bne.w	800c4fe <_dtoa_r+0x6be>
 800c3d4:	42a6      	cmp	r6, r4
 800c3d6:	f43f af50 	beq.w	800c27a <_dtoa_r+0x43a>
 800c3da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c3de:	4b0a      	ldr	r3, [pc, #40]	@ (800c408 <_dtoa_r+0x5c8>)
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f7f4 f909 	bl	80005f8 <__aeabi_dmul>
 800c3e6:	4b08      	ldr	r3, [pc, #32]	@ (800c408 <_dtoa_r+0x5c8>)
 800c3e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3f2:	f7f4 f901 	bl	80005f8 <__aeabi_dmul>
 800c3f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3fa:	e7c4      	b.n	800c386 <_dtoa_r+0x546>
 800c3fc:	0800e8c0 	.word	0x0800e8c0
 800c400:	0800e898 	.word	0x0800e898
 800c404:	3ff00000 	.word	0x3ff00000
 800c408:	40240000 	.word	0x40240000
 800c40c:	401c0000 	.word	0x401c0000
 800c410:	40140000 	.word	0x40140000
 800c414:	3fe00000 	.word	0x3fe00000
 800c418:	4631      	mov	r1, r6
 800c41a:	4628      	mov	r0, r5
 800c41c:	f7f4 f8ec 	bl	80005f8 <__aeabi_dmul>
 800c420:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c424:	9415      	str	r4, [sp, #84]	@ 0x54
 800c426:	4656      	mov	r6, sl
 800c428:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c42c:	f7f4 fb94 	bl	8000b58 <__aeabi_d2iz>
 800c430:	4605      	mov	r5, r0
 800c432:	f7f4 f877 	bl	8000524 <__aeabi_i2d>
 800c436:	4602      	mov	r2, r0
 800c438:	460b      	mov	r3, r1
 800c43a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c43e:	f7f3 ff23 	bl	8000288 <__aeabi_dsub>
 800c442:	3530      	adds	r5, #48	@ 0x30
 800c444:	f806 5b01 	strb.w	r5, [r6], #1
 800c448:	4602      	mov	r2, r0
 800c44a:	460b      	mov	r3, r1
 800c44c:	42a6      	cmp	r6, r4
 800c44e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c452:	f04f 0200 	mov.w	r2, #0
 800c456:	d124      	bne.n	800c4a2 <_dtoa_r+0x662>
 800c458:	4bac      	ldr	r3, [pc, #688]	@ (800c70c <_dtoa_r+0x8cc>)
 800c45a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c45e:	f7f3 ff15 	bl	800028c <__adddf3>
 800c462:	4602      	mov	r2, r0
 800c464:	460b      	mov	r3, r1
 800c466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c46a:	f7f4 fb55 	bl	8000b18 <__aeabi_dcmpgt>
 800c46e:	2800      	cmp	r0, #0
 800c470:	d145      	bne.n	800c4fe <_dtoa_r+0x6be>
 800c472:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c476:	49a5      	ldr	r1, [pc, #660]	@ (800c70c <_dtoa_r+0x8cc>)
 800c478:	2000      	movs	r0, #0
 800c47a:	f7f3 ff05 	bl	8000288 <__aeabi_dsub>
 800c47e:	4602      	mov	r2, r0
 800c480:	460b      	mov	r3, r1
 800c482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c486:	f7f4 fb29 	bl	8000adc <__aeabi_dcmplt>
 800c48a:	2800      	cmp	r0, #0
 800c48c:	f43f aef5 	beq.w	800c27a <_dtoa_r+0x43a>
 800c490:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c492:	1e73      	subs	r3, r6, #1
 800c494:	9315      	str	r3, [sp, #84]	@ 0x54
 800c496:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c49a:	2b30      	cmp	r3, #48	@ 0x30
 800c49c:	d0f8      	beq.n	800c490 <_dtoa_r+0x650>
 800c49e:	9f04      	ldr	r7, [sp, #16]
 800c4a0:	e73e      	b.n	800c320 <_dtoa_r+0x4e0>
 800c4a2:	4b9b      	ldr	r3, [pc, #620]	@ (800c710 <_dtoa_r+0x8d0>)
 800c4a4:	f7f4 f8a8 	bl	80005f8 <__aeabi_dmul>
 800c4a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4ac:	e7bc      	b.n	800c428 <_dtoa_r+0x5e8>
 800c4ae:	d10c      	bne.n	800c4ca <_dtoa_r+0x68a>
 800c4b0:	4b98      	ldr	r3, [pc, #608]	@ (800c714 <_dtoa_r+0x8d4>)
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4b8:	f7f4 f89e 	bl	80005f8 <__aeabi_dmul>
 800c4bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4c0:	f7f4 fb20 	bl	8000b04 <__aeabi_dcmpge>
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	f000 8157 	beq.w	800c778 <_dtoa_r+0x938>
 800c4ca:	2400      	movs	r4, #0
 800c4cc:	4625      	mov	r5, r4
 800c4ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4d0:	43db      	mvns	r3, r3
 800c4d2:	9304      	str	r3, [sp, #16]
 800c4d4:	4656      	mov	r6, sl
 800c4d6:	2700      	movs	r7, #0
 800c4d8:	4621      	mov	r1, r4
 800c4da:	4658      	mov	r0, fp
 800c4dc:	f000 fbb4 	bl	800cc48 <_Bfree>
 800c4e0:	2d00      	cmp	r5, #0
 800c4e2:	d0dc      	beq.n	800c49e <_dtoa_r+0x65e>
 800c4e4:	b12f      	cbz	r7, 800c4f2 <_dtoa_r+0x6b2>
 800c4e6:	42af      	cmp	r7, r5
 800c4e8:	d003      	beq.n	800c4f2 <_dtoa_r+0x6b2>
 800c4ea:	4639      	mov	r1, r7
 800c4ec:	4658      	mov	r0, fp
 800c4ee:	f000 fbab 	bl	800cc48 <_Bfree>
 800c4f2:	4629      	mov	r1, r5
 800c4f4:	4658      	mov	r0, fp
 800c4f6:	f000 fba7 	bl	800cc48 <_Bfree>
 800c4fa:	e7d0      	b.n	800c49e <_dtoa_r+0x65e>
 800c4fc:	9704      	str	r7, [sp, #16]
 800c4fe:	4633      	mov	r3, r6
 800c500:	461e      	mov	r6, r3
 800c502:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c506:	2a39      	cmp	r2, #57	@ 0x39
 800c508:	d107      	bne.n	800c51a <_dtoa_r+0x6da>
 800c50a:	459a      	cmp	sl, r3
 800c50c:	d1f8      	bne.n	800c500 <_dtoa_r+0x6c0>
 800c50e:	9a04      	ldr	r2, [sp, #16]
 800c510:	3201      	adds	r2, #1
 800c512:	9204      	str	r2, [sp, #16]
 800c514:	2230      	movs	r2, #48	@ 0x30
 800c516:	f88a 2000 	strb.w	r2, [sl]
 800c51a:	781a      	ldrb	r2, [r3, #0]
 800c51c:	3201      	adds	r2, #1
 800c51e:	701a      	strb	r2, [r3, #0]
 800c520:	e7bd      	b.n	800c49e <_dtoa_r+0x65e>
 800c522:	4b7b      	ldr	r3, [pc, #492]	@ (800c710 <_dtoa_r+0x8d0>)
 800c524:	2200      	movs	r2, #0
 800c526:	f7f4 f867 	bl	80005f8 <__aeabi_dmul>
 800c52a:	2200      	movs	r2, #0
 800c52c:	2300      	movs	r3, #0
 800c52e:	4604      	mov	r4, r0
 800c530:	460d      	mov	r5, r1
 800c532:	f7f4 fac9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c536:	2800      	cmp	r0, #0
 800c538:	f43f aebb 	beq.w	800c2b2 <_dtoa_r+0x472>
 800c53c:	e6f0      	b.n	800c320 <_dtoa_r+0x4e0>
 800c53e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c540:	2a00      	cmp	r2, #0
 800c542:	f000 80db 	beq.w	800c6fc <_dtoa_r+0x8bc>
 800c546:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c548:	2a01      	cmp	r2, #1
 800c54a:	f300 80bf 	bgt.w	800c6cc <_dtoa_r+0x88c>
 800c54e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c550:	2a00      	cmp	r2, #0
 800c552:	f000 80b7 	beq.w	800c6c4 <_dtoa_r+0x884>
 800c556:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c55a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c55c:	4646      	mov	r6, r8
 800c55e:	9a08      	ldr	r2, [sp, #32]
 800c560:	2101      	movs	r1, #1
 800c562:	441a      	add	r2, r3
 800c564:	4658      	mov	r0, fp
 800c566:	4498      	add	r8, r3
 800c568:	9208      	str	r2, [sp, #32]
 800c56a:	f000 fc21 	bl	800cdb0 <__i2b>
 800c56e:	4605      	mov	r5, r0
 800c570:	b15e      	cbz	r6, 800c58a <_dtoa_r+0x74a>
 800c572:	9b08      	ldr	r3, [sp, #32]
 800c574:	2b00      	cmp	r3, #0
 800c576:	dd08      	ble.n	800c58a <_dtoa_r+0x74a>
 800c578:	42b3      	cmp	r3, r6
 800c57a:	9a08      	ldr	r2, [sp, #32]
 800c57c:	bfa8      	it	ge
 800c57e:	4633      	movge	r3, r6
 800c580:	eba8 0803 	sub.w	r8, r8, r3
 800c584:	1af6      	subs	r6, r6, r3
 800c586:	1ad3      	subs	r3, r2, r3
 800c588:	9308      	str	r3, [sp, #32]
 800c58a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c58c:	b1f3      	cbz	r3, 800c5cc <_dtoa_r+0x78c>
 800c58e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c590:	2b00      	cmp	r3, #0
 800c592:	f000 80b7 	beq.w	800c704 <_dtoa_r+0x8c4>
 800c596:	b18c      	cbz	r4, 800c5bc <_dtoa_r+0x77c>
 800c598:	4629      	mov	r1, r5
 800c59a:	4622      	mov	r2, r4
 800c59c:	4658      	mov	r0, fp
 800c59e:	f000 fcc7 	bl	800cf30 <__pow5mult>
 800c5a2:	464a      	mov	r2, r9
 800c5a4:	4601      	mov	r1, r0
 800c5a6:	4605      	mov	r5, r0
 800c5a8:	4658      	mov	r0, fp
 800c5aa:	f000 fc17 	bl	800cddc <__multiply>
 800c5ae:	4649      	mov	r1, r9
 800c5b0:	9004      	str	r0, [sp, #16]
 800c5b2:	4658      	mov	r0, fp
 800c5b4:	f000 fb48 	bl	800cc48 <_Bfree>
 800c5b8:	9b04      	ldr	r3, [sp, #16]
 800c5ba:	4699      	mov	r9, r3
 800c5bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5be:	1b1a      	subs	r2, r3, r4
 800c5c0:	d004      	beq.n	800c5cc <_dtoa_r+0x78c>
 800c5c2:	4649      	mov	r1, r9
 800c5c4:	4658      	mov	r0, fp
 800c5c6:	f000 fcb3 	bl	800cf30 <__pow5mult>
 800c5ca:	4681      	mov	r9, r0
 800c5cc:	2101      	movs	r1, #1
 800c5ce:	4658      	mov	r0, fp
 800c5d0:	f000 fbee 	bl	800cdb0 <__i2b>
 800c5d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5d6:	4604      	mov	r4, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f000 81cf 	beq.w	800c97c <_dtoa_r+0xb3c>
 800c5de:	461a      	mov	r2, r3
 800c5e0:	4601      	mov	r1, r0
 800c5e2:	4658      	mov	r0, fp
 800c5e4:	f000 fca4 	bl	800cf30 <__pow5mult>
 800c5e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	4604      	mov	r4, r0
 800c5ee:	f300 8095 	bgt.w	800c71c <_dtoa_r+0x8dc>
 800c5f2:	9b02      	ldr	r3, [sp, #8]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	f040 8087 	bne.w	800c708 <_dtoa_r+0x8c8>
 800c5fa:	9b03      	ldr	r3, [sp, #12]
 800c5fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c600:	2b00      	cmp	r3, #0
 800c602:	f040 8089 	bne.w	800c718 <_dtoa_r+0x8d8>
 800c606:	9b03      	ldr	r3, [sp, #12]
 800c608:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c60c:	0d1b      	lsrs	r3, r3, #20
 800c60e:	051b      	lsls	r3, r3, #20
 800c610:	b12b      	cbz	r3, 800c61e <_dtoa_r+0x7de>
 800c612:	9b08      	ldr	r3, [sp, #32]
 800c614:	3301      	adds	r3, #1
 800c616:	9308      	str	r3, [sp, #32]
 800c618:	f108 0801 	add.w	r8, r8, #1
 800c61c:	2301      	movs	r3, #1
 800c61e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c622:	2b00      	cmp	r3, #0
 800c624:	f000 81b0 	beq.w	800c988 <_dtoa_r+0xb48>
 800c628:	6923      	ldr	r3, [r4, #16]
 800c62a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c62e:	6918      	ldr	r0, [r3, #16]
 800c630:	f000 fb72 	bl	800cd18 <__hi0bits>
 800c634:	f1c0 0020 	rsb	r0, r0, #32
 800c638:	9b08      	ldr	r3, [sp, #32]
 800c63a:	4418      	add	r0, r3
 800c63c:	f010 001f 	ands.w	r0, r0, #31
 800c640:	d077      	beq.n	800c732 <_dtoa_r+0x8f2>
 800c642:	f1c0 0320 	rsb	r3, r0, #32
 800c646:	2b04      	cmp	r3, #4
 800c648:	dd6b      	ble.n	800c722 <_dtoa_r+0x8e2>
 800c64a:	9b08      	ldr	r3, [sp, #32]
 800c64c:	f1c0 001c 	rsb	r0, r0, #28
 800c650:	4403      	add	r3, r0
 800c652:	4480      	add	r8, r0
 800c654:	4406      	add	r6, r0
 800c656:	9308      	str	r3, [sp, #32]
 800c658:	f1b8 0f00 	cmp.w	r8, #0
 800c65c:	dd05      	ble.n	800c66a <_dtoa_r+0x82a>
 800c65e:	4649      	mov	r1, r9
 800c660:	4642      	mov	r2, r8
 800c662:	4658      	mov	r0, fp
 800c664:	f000 fcbe 	bl	800cfe4 <__lshift>
 800c668:	4681      	mov	r9, r0
 800c66a:	9b08      	ldr	r3, [sp, #32]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	dd05      	ble.n	800c67c <_dtoa_r+0x83c>
 800c670:	4621      	mov	r1, r4
 800c672:	461a      	mov	r2, r3
 800c674:	4658      	mov	r0, fp
 800c676:	f000 fcb5 	bl	800cfe4 <__lshift>
 800c67a:	4604      	mov	r4, r0
 800c67c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d059      	beq.n	800c736 <_dtoa_r+0x8f6>
 800c682:	4621      	mov	r1, r4
 800c684:	4648      	mov	r0, r9
 800c686:	f000 fd19 	bl	800d0bc <__mcmp>
 800c68a:	2800      	cmp	r0, #0
 800c68c:	da53      	bge.n	800c736 <_dtoa_r+0x8f6>
 800c68e:	1e7b      	subs	r3, r7, #1
 800c690:	9304      	str	r3, [sp, #16]
 800c692:	4649      	mov	r1, r9
 800c694:	2300      	movs	r3, #0
 800c696:	220a      	movs	r2, #10
 800c698:	4658      	mov	r0, fp
 800c69a:	f000 faf7 	bl	800cc8c <__multadd>
 800c69e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6a0:	4681      	mov	r9, r0
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	f000 8172 	beq.w	800c98c <_dtoa_r+0xb4c>
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	4629      	mov	r1, r5
 800c6ac:	220a      	movs	r2, #10
 800c6ae:	4658      	mov	r0, fp
 800c6b0:	f000 faec 	bl	800cc8c <__multadd>
 800c6b4:	9b00      	ldr	r3, [sp, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	4605      	mov	r5, r0
 800c6ba:	dc67      	bgt.n	800c78c <_dtoa_r+0x94c>
 800c6bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6be:	2b02      	cmp	r3, #2
 800c6c0:	dc41      	bgt.n	800c746 <_dtoa_r+0x906>
 800c6c2:	e063      	b.n	800c78c <_dtoa_r+0x94c>
 800c6c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c6c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c6ca:	e746      	b.n	800c55a <_dtoa_r+0x71a>
 800c6cc:	9b07      	ldr	r3, [sp, #28]
 800c6ce:	1e5c      	subs	r4, r3, #1
 800c6d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6d2:	42a3      	cmp	r3, r4
 800c6d4:	bfbf      	itttt	lt
 800c6d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c6d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c6da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c6dc:	1ae3      	sublt	r3, r4, r3
 800c6de:	bfb4      	ite	lt
 800c6e0:	18d2      	addlt	r2, r2, r3
 800c6e2:	1b1c      	subge	r4, r3, r4
 800c6e4:	9b07      	ldr	r3, [sp, #28]
 800c6e6:	bfbc      	itt	lt
 800c6e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c6ea:	2400      	movlt	r4, #0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	bfb5      	itete	lt
 800c6f0:	eba8 0603 	sublt.w	r6, r8, r3
 800c6f4:	9b07      	ldrge	r3, [sp, #28]
 800c6f6:	2300      	movlt	r3, #0
 800c6f8:	4646      	movge	r6, r8
 800c6fa:	e730      	b.n	800c55e <_dtoa_r+0x71e>
 800c6fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c6fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c700:	4646      	mov	r6, r8
 800c702:	e735      	b.n	800c570 <_dtoa_r+0x730>
 800c704:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c706:	e75c      	b.n	800c5c2 <_dtoa_r+0x782>
 800c708:	2300      	movs	r3, #0
 800c70a:	e788      	b.n	800c61e <_dtoa_r+0x7de>
 800c70c:	3fe00000 	.word	0x3fe00000
 800c710:	40240000 	.word	0x40240000
 800c714:	40140000 	.word	0x40140000
 800c718:	9b02      	ldr	r3, [sp, #8]
 800c71a:	e780      	b.n	800c61e <_dtoa_r+0x7de>
 800c71c:	2300      	movs	r3, #0
 800c71e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c720:	e782      	b.n	800c628 <_dtoa_r+0x7e8>
 800c722:	d099      	beq.n	800c658 <_dtoa_r+0x818>
 800c724:	9a08      	ldr	r2, [sp, #32]
 800c726:	331c      	adds	r3, #28
 800c728:	441a      	add	r2, r3
 800c72a:	4498      	add	r8, r3
 800c72c:	441e      	add	r6, r3
 800c72e:	9208      	str	r2, [sp, #32]
 800c730:	e792      	b.n	800c658 <_dtoa_r+0x818>
 800c732:	4603      	mov	r3, r0
 800c734:	e7f6      	b.n	800c724 <_dtoa_r+0x8e4>
 800c736:	9b07      	ldr	r3, [sp, #28]
 800c738:	9704      	str	r7, [sp, #16]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	dc20      	bgt.n	800c780 <_dtoa_r+0x940>
 800c73e:	9300      	str	r3, [sp, #0]
 800c740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c742:	2b02      	cmp	r3, #2
 800c744:	dd1e      	ble.n	800c784 <_dtoa_r+0x944>
 800c746:	9b00      	ldr	r3, [sp, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	f47f aec0 	bne.w	800c4ce <_dtoa_r+0x68e>
 800c74e:	4621      	mov	r1, r4
 800c750:	2205      	movs	r2, #5
 800c752:	4658      	mov	r0, fp
 800c754:	f000 fa9a 	bl	800cc8c <__multadd>
 800c758:	4601      	mov	r1, r0
 800c75a:	4604      	mov	r4, r0
 800c75c:	4648      	mov	r0, r9
 800c75e:	f000 fcad 	bl	800d0bc <__mcmp>
 800c762:	2800      	cmp	r0, #0
 800c764:	f77f aeb3 	ble.w	800c4ce <_dtoa_r+0x68e>
 800c768:	4656      	mov	r6, sl
 800c76a:	2331      	movs	r3, #49	@ 0x31
 800c76c:	f806 3b01 	strb.w	r3, [r6], #1
 800c770:	9b04      	ldr	r3, [sp, #16]
 800c772:	3301      	adds	r3, #1
 800c774:	9304      	str	r3, [sp, #16]
 800c776:	e6ae      	b.n	800c4d6 <_dtoa_r+0x696>
 800c778:	9c07      	ldr	r4, [sp, #28]
 800c77a:	9704      	str	r7, [sp, #16]
 800c77c:	4625      	mov	r5, r4
 800c77e:	e7f3      	b.n	800c768 <_dtoa_r+0x928>
 800c780:	9b07      	ldr	r3, [sp, #28]
 800c782:	9300      	str	r3, [sp, #0]
 800c784:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c786:	2b00      	cmp	r3, #0
 800c788:	f000 8104 	beq.w	800c994 <_dtoa_r+0xb54>
 800c78c:	2e00      	cmp	r6, #0
 800c78e:	dd05      	ble.n	800c79c <_dtoa_r+0x95c>
 800c790:	4629      	mov	r1, r5
 800c792:	4632      	mov	r2, r6
 800c794:	4658      	mov	r0, fp
 800c796:	f000 fc25 	bl	800cfe4 <__lshift>
 800c79a:	4605      	mov	r5, r0
 800c79c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d05a      	beq.n	800c858 <_dtoa_r+0xa18>
 800c7a2:	6869      	ldr	r1, [r5, #4]
 800c7a4:	4658      	mov	r0, fp
 800c7a6:	f000 fa0f 	bl	800cbc8 <_Balloc>
 800c7aa:	4606      	mov	r6, r0
 800c7ac:	b928      	cbnz	r0, 800c7ba <_dtoa_r+0x97a>
 800c7ae:	4b84      	ldr	r3, [pc, #528]	@ (800c9c0 <_dtoa_r+0xb80>)
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c7b6:	f7ff bb5a 	b.w	800be6e <_dtoa_r+0x2e>
 800c7ba:	692a      	ldr	r2, [r5, #16]
 800c7bc:	3202      	adds	r2, #2
 800c7be:	0092      	lsls	r2, r2, #2
 800c7c0:	f105 010c 	add.w	r1, r5, #12
 800c7c4:	300c      	adds	r0, #12
 800c7c6:	f000 ffaf 	bl	800d728 <memcpy>
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	4631      	mov	r1, r6
 800c7ce:	4658      	mov	r0, fp
 800c7d0:	f000 fc08 	bl	800cfe4 <__lshift>
 800c7d4:	f10a 0301 	add.w	r3, sl, #1
 800c7d8:	9307      	str	r3, [sp, #28]
 800c7da:	9b00      	ldr	r3, [sp, #0]
 800c7dc:	4453      	add	r3, sl
 800c7de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7e0:	9b02      	ldr	r3, [sp, #8]
 800c7e2:	f003 0301 	and.w	r3, r3, #1
 800c7e6:	462f      	mov	r7, r5
 800c7e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7ea:	4605      	mov	r5, r0
 800c7ec:	9b07      	ldr	r3, [sp, #28]
 800c7ee:	4621      	mov	r1, r4
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	4648      	mov	r0, r9
 800c7f4:	9300      	str	r3, [sp, #0]
 800c7f6:	f7ff fa98 	bl	800bd2a <quorem>
 800c7fa:	4639      	mov	r1, r7
 800c7fc:	9002      	str	r0, [sp, #8]
 800c7fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c802:	4648      	mov	r0, r9
 800c804:	f000 fc5a 	bl	800d0bc <__mcmp>
 800c808:	462a      	mov	r2, r5
 800c80a:	9008      	str	r0, [sp, #32]
 800c80c:	4621      	mov	r1, r4
 800c80e:	4658      	mov	r0, fp
 800c810:	f000 fc70 	bl	800d0f4 <__mdiff>
 800c814:	68c2      	ldr	r2, [r0, #12]
 800c816:	4606      	mov	r6, r0
 800c818:	bb02      	cbnz	r2, 800c85c <_dtoa_r+0xa1c>
 800c81a:	4601      	mov	r1, r0
 800c81c:	4648      	mov	r0, r9
 800c81e:	f000 fc4d 	bl	800d0bc <__mcmp>
 800c822:	4602      	mov	r2, r0
 800c824:	4631      	mov	r1, r6
 800c826:	4658      	mov	r0, fp
 800c828:	920e      	str	r2, [sp, #56]	@ 0x38
 800c82a:	f000 fa0d 	bl	800cc48 <_Bfree>
 800c82e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c830:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c832:	9e07      	ldr	r6, [sp, #28]
 800c834:	ea43 0102 	orr.w	r1, r3, r2
 800c838:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c83a:	4319      	orrs	r1, r3
 800c83c:	d110      	bne.n	800c860 <_dtoa_r+0xa20>
 800c83e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c842:	d029      	beq.n	800c898 <_dtoa_r+0xa58>
 800c844:	9b08      	ldr	r3, [sp, #32]
 800c846:	2b00      	cmp	r3, #0
 800c848:	dd02      	ble.n	800c850 <_dtoa_r+0xa10>
 800c84a:	9b02      	ldr	r3, [sp, #8]
 800c84c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c850:	9b00      	ldr	r3, [sp, #0]
 800c852:	f883 8000 	strb.w	r8, [r3]
 800c856:	e63f      	b.n	800c4d8 <_dtoa_r+0x698>
 800c858:	4628      	mov	r0, r5
 800c85a:	e7bb      	b.n	800c7d4 <_dtoa_r+0x994>
 800c85c:	2201      	movs	r2, #1
 800c85e:	e7e1      	b.n	800c824 <_dtoa_r+0x9e4>
 800c860:	9b08      	ldr	r3, [sp, #32]
 800c862:	2b00      	cmp	r3, #0
 800c864:	db04      	blt.n	800c870 <_dtoa_r+0xa30>
 800c866:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c868:	430b      	orrs	r3, r1
 800c86a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c86c:	430b      	orrs	r3, r1
 800c86e:	d120      	bne.n	800c8b2 <_dtoa_r+0xa72>
 800c870:	2a00      	cmp	r2, #0
 800c872:	dded      	ble.n	800c850 <_dtoa_r+0xa10>
 800c874:	4649      	mov	r1, r9
 800c876:	2201      	movs	r2, #1
 800c878:	4658      	mov	r0, fp
 800c87a:	f000 fbb3 	bl	800cfe4 <__lshift>
 800c87e:	4621      	mov	r1, r4
 800c880:	4681      	mov	r9, r0
 800c882:	f000 fc1b 	bl	800d0bc <__mcmp>
 800c886:	2800      	cmp	r0, #0
 800c888:	dc03      	bgt.n	800c892 <_dtoa_r+0xa52>
 800c88a:	d1e1      	bne.n	800c850 <_dtoa_r+0xa10>
 800c88c:	f018 0f01 	tst.w	r8, #1
 800c890:	d0de      	beq.n	800c850 <_dtoa_r+0xa10>
 800c892:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c896:	d1d8      	bne.n	800c84a <_dtoa_r+0xa0a>
 800c898:	9a00      	ldr	r2, [sp, #0]
 800c89a:	2339      	movs	r3, #57	@ 0x39
 800c89c:	7013      	strb	r3, [r2, #0]
 800c89e:	4633      	mov	r3, r6
 800c8a0:	461e      	mov	r6, r3
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c8a8:	2a39      	cmp	r2, #57	@ 0x39
 800c8aa:	d052      	beq.n	800c952 <_dtoa_r+0xb12>
 800c8ac:	3201      	adds	r2, #1
 800c8ae:	701a      	strb	r2, [r3, #0]
 800c8b0:	e612      	b.n	800c4d8 <_dtoa_r+0x698>
 800c8b2:	2a00      	cmp	r2, #0
 800c8b4:	dd07      	ble.n	800c8c6 <_dtoa_r+0xa86>
 800c8b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c8ba:	d0ed      	beq.n	800c898 <_dtoa_r+0xa58>
 800c8bc:	9a00      	ldr	r2, [sp, #0]
 800c8be:	f108 0301 	add.w	r3, r8, #1
 800c8c2:	7013      	strb	r3, [r2, #0]
 800c8c4:	e608      	b.n	800c4d8 <_dtoa_r+0x698>
 800c8c6:	9b07      	ldr	r3, [sp, #28]
 800c8c8:	9a07      	ldr	r2, [sp, #28]
 800c8ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c8ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d028      	beq.n	800c926 <_dtoa_r+0xae6>
 800c8d4:	4649      	mov	r1, r9
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	220a      	movs	r2, #10
 800c8da:	4658      	mov	r0, fp
 800c8dc:	f000 f9d6 	bl	800cc8c <__multadd>
 800c8e0:	42af      	cmp	r7, r5
 800c8e2:	4681      	mov	r9, r0
 800c8e4:	f04f 0300 	mov.w	r3, #0
 800c8e8:	f04f 020a 	mov.w	r2, #10
 800c8ec:	4639      	mov	r1, r7
 800c8ee:	4658      	mov	r0, fp
 800c8f0:	d107      	bne.n	800c902 <_dtoa_r+0xac2>
 800c8f2:	f000 f9cb 	bl	800cc8c <__multadd>
 800c8f6:	4607      	mov	r7, r0
 800c8f8:	4605      	mov	r5, r0
 800c8fa:	9b07      	ldr	r3, [sp, #28]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	9307      	str	r3, [sp, #28]
 800c900:	e774      	b.n	800c7ec <_dtoa_r+0x9ac>
 800c902:	f000 f9c3 	bl	800cc8c <__multadd>
 800c906:	4629      	mov	r1, r5
 800c908:	4607      	mov	r7, r0
 800c90a:	2300      	movs	r3, #0
 800c90c:	220a      	movs	r2, #10
 800c90e:	4658      	mov	r0, fp
 800c910:	f000 f9bc 	bl	800cc8c <__multadd>
 800c914:	4605      	mov	r5, r0
 800c916:	e7f0      	b.n	800c8fa <_dtoa_r+0xaba>
 800c918:	9b00      	ldr	r3, [sp, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	bfcc      	ite	gt
 800c91e:	461e      	movgt	r6, r3
 800c920:	2601      	movle	r6, #1
 800c922:	4456      	add	r6, sl
 800c924:	2700      	movs	r7, #0
 800c926:	4649      	mov	r1, r9
 800c928:	2201      	movs	r2, #1
 800c92a:	4658      	mov	r0, fp
 800c92c:	f000 fb5a 	bl	800cfe4 <__lshift>
 800c930:	4621      	mov	r1, r4
 800c932:	4681      	mov	r9, r0
 800c934:	f000 fbc2 	bl	800d0bc <__mcmp>
 800c938:	2800      	cmp	r0, #0
 800c93a:	dcb0      	bgt.n	800c89e <_dtoa_r+0xa5e>
 800c93c:	d102      	bne.n	800c944 <_dtoa_r+0xb04>
 800c93e:	f018 0f01 	tst.w	r8, #1
 800c942:	d1ac      	bne.n	800c89e <_dtoa_r+0xa5e>
 800c944:	4633      	mov	r3, r6
 800c946:	461e      	mov	r6, r3
 800c948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c94c:	2a30      	cmp	r2, #48	@ 0x30
 800c94e:	d0fa      	beq.n	800c946 <_dtoa_r+0xb06>
 800c950:	e5c2      	b.n	800c4d8 <_dtoa_r+0x698>
 800c952:	459a      	cmp	sl, r3
 800c954:	d1a4      	bne.n	800c8a0 <_dtoa_r+0xa60>
 800c956:	9b04      	ldr	r3, [sp, #16]
 800c958:	3301      	adds	r3, #1
 800c95a:	9304      	str	r3, [sp, #16]
 800c95c:	2331      	movs	r3, #49	@ 0x31
 800c95e:	f88a 3000 	strb.w	r3, [sl]
 800c962:	e5b9      	b.n	800c4d8 <_dtoa_r+0x698>
 800c964:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c966:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c9c4 <_dtoa_r+0xb84>
 800c96a:	b11b      	cbz	r3, 800c974 <_dtoa_r+0xb34>
 800c96c:	f10a 0308 	add.w	r3, sl, #8
 800c970:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c972:	6013      	str	r3, [r2, #0]
 800c974:	4650      	mov	r0, sl
 800c976:	b019      	add	sp, #100	@ 0x64
 800c978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c97c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c97e:	2b01      	cmp	r3, #1
 800c980:	f77f ae37 	ble.w	800c5f2 <_dtoa_r+0x7b2>
 800c984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c986:	930a      	str	r3, [sp, #40]	@ 0x28
 800c988:	2001      	movs	r0, #1
 800c98a:	e655      	b.n	800c638 <_dtoa_r+0x7f8>
 800c98c:	9b00      	ldr	r3, [sp, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	f77f aed6 	ble.w	800c740 <_dtoa_r+0x900>
 800c994:	4656      	mov	r6, sl
 800c996:	4621      	mov	r1, r4
 800c998:	4648      	mov	r0, r9
 800c99a:	f7ff f9c6 	bl	800bd2a <quorem>
 800c99e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c9a2:	f806 8b01 	strb.w	r8, [r6], #1
 800c9a6:	9b00      	ldr	r3, [sp, #0]
 800c9a8:	eba6 020a 	sub.w	r2, r6, sl
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	ddb3      	ble.n	800c918 <_dtoa_r+0xad8>
 800c9b0:	4649      	mov	r1, r9
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	220a      	movs	r2, #10
 800c9b6:	4658      	mov	r0, fp
 800c9b8:	f000 f968 	bl	800cc8c <__multadd>
 800c9bc:	4681      	mov	r9, r0
 800c9be:	e7ea      	b.n	800c996 <_dtoa_r+0xb56>
 800c9c0:	0800e820 	.word	0x0800e820
 800c9c4:	0800e7a4 	.word	0x0800e7a4

0800c9c8 <_free_r>:
 800c9c8:	b538      	push	{r3, r4, r5, lr}
 800c9ca:	4605      	mov	r5, r0
 800c9cc:	2900      	cmp	r1, #0
 800c9ce:	d041      	beq.n	800ca54 <_free_r+0x8c>
 800c9d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9d4:	1f0c      	subs	r4, r1, #4
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	bfb8      	it	lt
 800c9da:	18e4      	addlt	r4, r4, r3
 800c9dc:	f000 f8e8 	bl	800cbb0 <__malloc_lock>
 800c9e0:	4a1d      	ldr	r2, [pc, #116]	@ (800ca58 <_free_r+0x90>)
 800c9e2:	6813      	ldr	r3, [r2, #0]
 800c9e4:	b933      	cbnz	r3, 800c9f4 <_free_r+0x2c>
 800c9e6:	6063      	str	r3, [r4, #4]
 800c9e8:	6014      	str	r4, [r2, #0]
 800c9ea:	4628      	mov	r0, r5
 800c9ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9f0:	f000 b8e4 	b.w	800cbbc <__malloc_unlock>
 800c9f4:	42a3      	cmp	r3, r4
 800c9f6:	d908      	bls.n	800ca0a <_free_r+0x42>
 800c9f8:	6820      	ldr	r0, [r4, #0]
 800c9fa:	1821      	adds	r1, r4, r0
 800c9fc:	428b      	cmp	r3, r1
 800c9fe:	bf01      	itttt	eq
 800ca00:	6819      	ldreq	r1, [r3, #0]
 800ca02:	685b      	ldreq	r3, [r3, #4]
 800ca04:	1809      	addeq	r1, r1, r0
 800ca06:	6021      	streq	r1, [r4, #0]
 800ca08:	e7ed      	b.n	800c9e6 <_free_r+0x1e>
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	685b      	ldr	r3, [r3, #4]
 800ca0e:	b10b      	cbz	r3, 800ca14 <_free_r+0x4c>
 800ca10:	42a3      	cmp	r3, r4
 800ca12:	d9fa      	bls.n	800ca0a <_free_r+0x42>
 800ca14:	6811      	ldr	r1, [r2, #0]
 800ca16:	1850      	adds	r0, r2, r1
 800ca18:	42a0      	cmp	r0, r4
 800ca1a:	d10b      	bne.n	800ca34 <_free_r+0x6c>
 800ca1c:	6820      	ldr	r0, [r4, #0]
 800ca1e:	4401      	add	r1, r0
 800ca20:	1850      	adds	r0, r2, r1
 800ca22:	4283      	cmp	r3, r0
 800ca24:	6011      	str	r1, [r2, #0]
 800ca26:	d1e0      	bne.n	800c9ea <_free_r+0x22>
 800ca28:	6818      	ldr	r0, [r3, #0]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	6053      	str	r3, [r2, #4]
 800ca2e:	4408      	add	r0, r1
 800ca30:	6010      	str	r0, [r2, #0]
 800ca32:	e7da      	b.n	800c9ea <_free_r+0x22>
 800ca34:	d902      	bls.n	800ca3c <_free_r+0x74>
 800ca36:	230c      	movs	r3, #12
 800ca38:	602b      	str	r3, [r5, #0]
 800ca3a:	e7d6      	b.n	800c9ea <_free_r+0x22>
 800ca3c:	6820      	ldr	r0, [r4, #0]
 800ca3e:	1821      	adds	r1, r4, r0
 800ca40:	428b      	cmp	r3, r1
 800ca42:	bf04      	itt	eq
 800ca44:	6819      	ldreq	r1, [r3, #0]
 800ca46:	685b      	ldreq	r3, [r3, #4]
 800ca48:	6063      	str	r3, [r4, #4]
 800ca4a:	bf04      	itt	eq
 800ca4c:	1809      	addeq	r1, r1, r0
 800ca4e:	6021      	streq	r1, [r4, #0]
 800ca50:	6054      	str	r4, [r2, #4]
 800ca52:	e7ca      	b.n	800c9ea <_free_r+0x22>
 800ca54:	bd38      	pop	{r3, r4, r5, pc}
 800ca56:	bf00      	nop
 800ca58:	20002358 	.word	0x20002358

0800ca5c <malloc>:
 800ca5c:	4b02      	ldr	r3, [pc, #8]	@ (800ca68 <malloc+0xc>)
 800ca5e:	4601      	mov	r1, r0
 800ca60:	6818      	ldr	r0, [r3, #0]
 800ca62:	f000 b825 	b.w	800cab0 <_malloc_r>
 800ca66:	bf00      	nop
 800ca68:	2000010c 	.word	0x2000010c

0800ca6c <sbrk_aligned>:
 800ca6c:	b570      	push	{r4, r5, r6, lr}
 800ca6e:	4e0f      	ldr	r6, [pc, #60]	@ (800caac <sbrk_aligned+0x40>)
 800ca70:	460c      	mov	r4, r1
 800ca72:	6831      	ldr	r1, [r6, #0]
 800ca74:	4605      	mov	r5, r0
 800ca76:	b911      	cbnz	r1, 800ca7e <sbrk_aligned+0x12>
 800ca78:	f000 fe46 	bl	800d708 <_sbrk_r>
 800ca7c:	6030      	str	r0, [r6, #0]
 800ca7e:	4621      	mov	r1, r4
 800ca80:	4628      	mov	r0, r5
 800ca82:	f000 fe41 	bl	800d708 <_sbrk_r>
 800ca86:	1c43      	adds	r3, r0, #1
 800ca88:	d103      	bne.n	800ca92 <sbrk_aligned+0x26>
 800ca8a:	f04f 34ff 	mov.w	r4, #4294967295
 800ca8e:	4620      	mov	r0, r4
 800ca90:	bd70      	pop	{r4, r5, r6, pc}
 800ca92:	1cc4      	adds	r4, r0, #3
 800ca94:	f024 0403 	bic.w	r4, r4, #3
 800ca98:	42a0      	cmp	r0, r4
 800ca9a:	d0f8      	beq.n	800ca8e <sbrk_aligned+0x22>
 800ca9c:	1a21      	subs	r1, r4, r0
 800ca9e:	4628      	mov	r0, r5
 800caa0:	f000 fe32 	bl	800d708 <_sbrk_r>
 800caa4:	3001      	adds	r0, #1
 800caa6:	d1f2      	bne.n	800ca8e <sbrk_aligned+0x22>
 800caa8:	e7ef      	b.n	800ca8a <sbrk_aligned+0x1e>
 800caaa:	bf00      	nop
 800caac:	20002354 	.word	0x20002354

0800cab0 <_malloc_r>:
 800cab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cab4:	1ccd      	adds	r5, r1, #3
 800cab6:	f025 0503 	bic.w	r5, r5, #3
 800caba:	3508      	adds	r5, #8
 800cabc:	2d0c      	cmp	r5, #12
 800cabe:	bf38      	it	cc
 800cac0:	250c      	movcc	r5, #12
 800cac2:	2d00      	cmp	r5, #0
 800cac4:	4606      	mov	r6, r0
 800cac6:	db01      	blt.n	800cacc <_malloc_r+0x1c>
 800cac8:	42a9      	cmp	r1, r5
 800caca:	d904      	bls.n	800cad6 <_malloc_r+0x26>
 800cacc:	230c      	movs	r3, #12
 800cace:	6033      	str	r3, [r6, #0]
 800cad0:	2000      	movs	r0, #0
 800cad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cad6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cbac <_malloc_r+0xfc>
 800cada:	f000 f869 	bl	800cbb0 <__malloc_lock>
 800cade:	f8d8 3000 	ldr.w	r3, [r8]
 800cae2:	461c      	mov	r4, r3
 800cae4:	bb44      	cbnz	r4, 800cb38 <_malloc_r+0x88>
 800cae6:	4629      	mov	r1, r5
 800cae8:	4630      	mov	r0, r6
 800caea:	f7ff ffbf 	bl	800ca6c <sbrk_aligned>
 800caee:	1c43      	adds	r3, r0, #1
 800caf0:	4604      	mov	r4, r0
 800caf2:	d158      	bne.n	800cba6 <_malloc_r+0xf6>
 800caf4:	f8d8 4000 	ldr.w	r4, [r8]
 800caf8:	4627      	mov	r7, r4
 800cafa:	2f00      	cmp	r7, #0
 800cafc:	d143      	bne.n	800cb86 <_malloc_r+0xd6>
 800cafe:	2c00      	cmp	r4, #0
 800cb00:	d04b      	beq.n	800cb9a <_malloc_r+0xea>
 800cb02:	6823      	ldr	r3, [r4, #0]
 800cb04:	4639      	mov	r1, r7
 800cb06:	4630      	mov	r0, r6
 800cb08:	eb04 0903 	add.w	r9, r4, r3
 800cb0c:	f000 fdfc 	bl	800d708 <_sbrk_r>
 800cb10:	4581      	cmp	r9, r0
 800cb12:	d142      	bne.n	800cb9a <_malloc_r+0xea>
 800cb14:	6821      	ldr	r1, [r4, #0]
 800cb16:	1a6d      	subs	r5, r5, r1
 800cb18:	4629      	mov	r1, r5
 800cb1a:	4630      	mov	r0, r6
 800cb1c:	f7ff ffa6 	bl	800ca6c <sbrk_aligned>
 800cb20:	3001      	adds	r0, #1
 800cb22:	d03a      	beq.n	800cb9a <_malloc_r+0xea>
 800cb24:	6823      	ldr	r3, [r4, #0]
 800cb26:	442b      	add	r3, r5
 800cb28:	6023      	str	r3, [r4, #0]
 800cb2a:	f8d8 3000 	ldr.w	r3, [r8]
 800cb2e:	685a      	ldr	r2, [r3, #4]
 800cb30:	bb62      	cbnz	r2, 800cb8c <_malloc_r+0xdc>
 800cb32:	f8c8 7000 	str.w	r7, [r8]
 800cb36:	e00f      	b.n	800cb58 <_malloc_r+0xa8>
 800cb38:	6822      	ldr	r2, [r4, #0]
 800cb3a:	1b52      	subs	r2, r2, r5
 800cb3c:	d420      	bmi.n	800cb80 <_malloc_r+0xd0>
 800cb3e:	2a0b      	cmp	r2, #11
 800cb40:	d917      	bls.n	800cb72 <_malloc_r+0xc2>
 800cb42:	1961      	adds	r1, r4, r5
 800cb44:	42a3      	cmp	r3, r4
 800cb46:	6025      	str	r5, [r4, #0]
 800cb48:	bf18      	it	ne
 800cb4a:	6059      	strne	r1, [r3, #4]
 800cb4c:	6863      	ldr	r3, [r4, #4]
 800cb4e:	bf08      	it	eq
 800cb50:	f8c8 1000 	streq.w	r1, [r8]
 800cb54:	5162      	str	r2, [r4, r5]
 800cb56:	604b      	str	r3, [r1, #4]
 800cb58:	4630      	mov	r0, r6
 800cb5a:	f000 f82f 	bl	800cbbc <__malloc_unlock>
 800cb5e:	f104 000b 	add.w	r0, r4, #11
 800cb62:	1d23      	adds	r3, r4, #4
 800cb64:	f020 0007 	bic.w	r0, r0, #7
 800cb68:	1ac2      	subs	r2, r0, r3
 800cb6a:	bf1c      	itt	ne
 800cb6c:	1a1b      	subne	r3, r3, r0
 800cb6e:	50a3      	strne	r3, [r4, r2]
 800cb70:	e7af      	b.n	800cad2 <_malloc_r+0x22>
 800cb72:	6862      	ldr	r2, [r4, #4]
 800cb74:	42a3      	cmp	r3, r4
 800cb76:	bf0c      	ite	eq
 800cb78:	f8c8 2000 	streq.w	r2, [r8]
 800cb7c:	605a      	strne	r2, [r3, #4]
 800cb7e:	e7eb      	b.n	800cb58 <_malloc_r+0xa8>
 800cb80:	4623      	mov	r3, r4
 800cb82:	6864      	ldr	r4, [r4, #4]
 800cb84:	e7ae      	b.n	800cae4 <_malloc_r+0x34>
 800cb86:	463c      	mov	r4, r7
 800cb88:	687f      	ldr	r7, [r7, #4]
 800cb8a:	e7b6      	b.n	800cafa <_malloc_r+0x4a>
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	42a3      	cmp	r3, r4
 800cb92:	d1fb      	bne.n	800cb8c <_malloc_r+0xdc>
 800cb94:	2300      	movs	r3, #0
 800cb96:	6053      	str	r3, [r2, #4]
 800cb98:	e7de      	b.n	800cb58 <_malloc_r+0xa8>
 800cb9a:	230c      	movs	r3, #12
 800cb9c:	6033      	str	r3, [r6, #0]
 800cb9e:	4630      	mov	r0, r6
 800cba0:	f000 f80c 	bl	800cbbc <__malloc_unlock>
 800cba4:	e794      	b.n	800cad0 <_malloc_r+0x20>
 800cba6:	6005      	str	r5, [r0, #0]
 800cba8:	e7d6      	b.n	800cb58 <_malloc_r+0xa8>
 800cbaa:	bf00      	nop
 800cbac:	20002358 	.word	0x20002358

0800cbb0 <__malloc_lock>:
 800cbb0:	4801      	ldr	r0, [pc, #4]	@ (800cbb8 <__malloc_lock+0x8>)
 800cbb2:	f7ff b8b8 	b.w	800bd26 <__retarget_lock_acquire_recursive>
 800cbb6:	bf00      	nop
 800cbb8:	20002350 	.word	0x20002350

0800cbbc <__malloc_unlock>:
 800cbbc:	4801      	ldr	r0, [pc, #4]	@ (800cbc4 <__malloc_unlock+0x8>)
 800cbbe:	f7ff b8b3 	b.w	800bd28 <__retarget_lock_release_recursive>
 800cbc2:	bf00      	nop
 800cbc4:	20002350 	.word	0x20002350

0800cbc8 <_Balloc>:
 800cbc8:	b570      	push	{r4, r5, r6, lr}
 800cbca:	69c6      	ldr	r6, [r0, #28]
 800cbcc:	4604      	mov	r4, r0
 800cbce:	460d      	mov	r5, r1
 800cbd0:	b976      	cbnz	r6, 800cbf0 <_Balloc+0x28>
 800cbd2:	2010      	movs	r0, #16
 800cbd4:	f7ff ff42 	bl	800ca5c <malloc>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	61e0      	str	r0, [r4, #28]
 800cbdc:	b920      	cbnz	r0, 800cbe8 <_Balloc+0x20>
 800cbde:	4b18      	ldr	r3, [pc, #96]	@ (800cc40 <_Balloc+0x78>)
 800cbe0:	4818      	ldr	r0, [pc, #96]	@ (800cc44 <_Balloc+0x7c>)
 800cbe2:	216b      	movs	r1, #107	@ 0x6b
 800cbe4:	f000 fdae 	bl	800d744 <__assert_func>
 800cbe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbec:	6006      	str	r6, [r0, #0]
 800cbee:	60c6      	str	r6, [r0, #12]
 800cbf0:	69e6      	ldr	r6, [r4, #28]
 800cbf2:	68f3      	ldr	r3, [r6, #12]
 800cbf4:	b183      	cbz	r3, 800cc18 <_Balloc+0x50>
 800cbf6:	69e3      	ldr	r3, [r4, #28]
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cbfe:	b9b8      	cbnz	r0, 800cc30 <_Balloc+0x68>
 800cc00:	2101      	movs	r1, #1
 800cc02:	fa01 f605 	lsl.w	r6, r1, r5
 800cc06:	1d72      	adds	r2, r6, #5
 800cc08:	0092      	lsls	r2, r2, #2
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	f000 fdb8 	bl	800d780 <_calloc_r>
 800cc10:	b160      	cbz	r0, 800cc2c <_Balloc+0x64>
 800cc12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc16:	e00e      	b.n	800cc36 <_Balloc+0x6e>
 800cc18:	2221      	movs	r2, #33	@ 0x21
 800cc1a:	2104      	movs	r1, #4
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	f000 fdaf 	bl	800d780 <_calloc_r>
 800cc22:	69e3      	ldr	r3, [r4, #28]
 800cc24:	60f0      	str	r0, [r6, #12]
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d1e4      	bne.n	800cbf6 <_Balloc+0x2e>
 800cc2c:	2000      	movs	r0, #0
 800cc2e:	bd70      	pop	{r4, r5, r6, pc}
 800cc30:	6802      	ldr	r2, [r0, #0]
 800cc32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cc36:	2300      	movs	r3, #0
 800cc38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc3c:	e7f7      	b.n	800cc2e <_Balloc+0x66>
 800cc3e:	bf00      	nop
 800cc40:	0800e7b1 	.word	0x0800e7b1
 800cc44:	0800e831 	.word	0x0800e831

0800cc48 <_Bfree>:
 800cc48:	b570      	push	{r4, r5, r6, lr}
 800cc4a:	69c6      	ldr	r6, [r0, #28]
 800cc4c:	4605      	mov	r5, r0
 800cc4e:	460c      	mov	r4, r1
 800cc50:	b976      	cbnz	r6, 800cc70 <_Bfree+0x28>
 800cc52:	2010      	movs	r0, #16
 800cc54:	f7ff ff02 	bl	800ca5c <malloc>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	61e8      	str	r0, [r5, #28]
 800cc5c:	b920      	cbnz	r0, 800cc68 <_Bfree+0x20>
 800cc5e:	4b09      	ldr	r3, [pc, #36]	@ (800cc84 <_Bfree+0x3c>)
 800cc60:	4809      	ldr	r0, [pc, #36]	@ (800cc88 <_Bfree+0x40>)
 800cc62:	218f      	movs	r1, #143	@ 0x8f
 800cc64:	f000 fd6e 	bl	800d744 <__assert_func>
 800cc68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc6c:	6006      	str	r6, [r0, #0]
 800cc6e:	60c6      	str	r6, [r0, #12]
 800cc70:	b13c      	cbz	r4, 800cc82 <_Bfree+0x3a>
 800cc72:	69eb      	ldr	r3, [r5, #28]
 800cc74:	6862      	ldr	r2, [r4, #4]
 800cc76:	68db      	ldr	r3, [r3, #12]
 800cc78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc7c:	6021      	str	r1, [r4, #0]
 800cc7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc82:	bd70      	pop	{r4, r5, r6, pc}
 800cc84:	0800e7b1 	.word	0x0800e7b1
 800cc88:	0800e831 	.word	0x0800e831

0800cc8c <__multadd>:
 800cc8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc90:	690d      	ldr	r5, [r1, #16]
 800cc92:	4607      	mov	r7, r0
 800cc94:	460c      	mov	r4, r1
 800cc96:	461e      	mov	r6, r3
 800cc98:	f101 0c14 	add.w	ip, r1, #20
 800cc9c:	2000      	movs	r0, #0
 800cc9e:	f8dc 3000 	ldr.w	r3, [ip]
 800cca2:	b299      	uxth	r1, r3
 800cca4:	fb02 6101 	mla	r1, r2, r1, r6
 800cca8:	0c1e      	lsrs	r6, r3, #16
 800ccaa:	0c0b      	lsrs	r3, r1, #16
 800ccac:	fb02 3306 	mla	r3, r2, r6, r3
 800ccb0:	b289      	uxth	r1, r1
 800ccb2:	3001      	adds	r0, #1
 800ccb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ccb8:	4285      	cmp	r5, r0
 800ccba:	f84c 1b04 	str.w	r1, [ip], #4
 800ccbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ccc2:	dcec      	bgt.n	800cc9e <__multadd+0x12>
 800ccc4:	b30e      	cbz	r6, 800cd0a <__multadd+0x7e>
 800ccc6:	68a3      	ldr	r3, [r4, #8]
 800ccc8:	42ab      	cmp	r3, r5
 800ccca:	dc19      	bgt.n	800cd00 <__multadd+0x74>
 800cccc:	6861      	ldr	r1, [r4, #4]
 800ccce:	4638      	mov	r0, r7
 800ccd0:	3101      	adds	r1, #1
 800ccd2:	f7ff ff79 	bl	800cbc8 <_Balloc>
 800ccd6:	4680      	mov	r8, r0
 800ccd8:	b928      	cbnz	r0, 800cce6 <__multadd+0x5a>
 800ccda:	4602      	mov	r2, r0
 800ccdc:	4b0c      	ldr	r3, [pc, #48]	@ (800cd10 <__multadd+0x84>)
 800ccde:	480d      	ldr	r0, [pc, #52]	@ (800cd14 <__multadd+0x88>)
 800cce0:	21ba      	movs	r1, #186	@ 0xba
 800cce2:	f000 fd2f 	bl	800d744 <__assert_func>
 800cce6:	6922      	ldr	r2, [r4, #16]
 800cce8:	3202      	adds	r2, #2
 800ccea:	f104 010c 	add.w	r1, r4, #12
 800ccee:	0092      	lsls	r2, r2, #2
 800ccf0:	300c      	adds	r0, #12
 800ccf2:	f000 fd19 	bl	800d728 <memcpy>
 800ccf6:	4621      	mov	r1, r4
 800ccf8:	4638      	mov	r0, r7
 800ccfa:	f7ff ffa5 	bl	800cc48 <_Bfree>
 800ccfe:	4644      	mov	r4, r8
 800cd00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd04:	3501      	adds	r5, #1
 800cd06:	615e      	str	r6, [r3, #20]
 800cd08:	6125      	str	r5, [r4, #16]
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd10:	0800e820 	.word	0x0800e820
 800cd14:	0800e831 	.word	0x0800e831

0800cd18 <__hi0bits>:
 800cd18:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	bf36      	itet	cc
 800cd20:	0403      	lslcc	r3, r0, #16
 800cd22:	2000      	movcs	r0, #0
 800cd24:	2010      	movcc	r0, #16
 800cd26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cd2a:	bf3c      	itt	cc
 800cd2c:	021b      	lslcc	r3, r3, #8
 800cd2e:	3008      	addcc	r0, #8
 800cd30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd34:	bf3c      	itt	cc
 800cd36:	011b      	lslcc	r3, r3, #4
 800cd38:	3004      	addcc	r0, #4
 800cd3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd3e:	bf3c      	itt	cc
 800cd40:	009b      	lslcc	r3, r3, #2
 800cd42:	3002      	addcc	r0, #2
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	db05      	blt.n	800cd54 <__hi0bits+0x3c>
 800cd48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cd4c:	f100 0001 	add.w	r0, r0, #1
 800cd50:	bf08      	it	eq
 800cd52:	2020      	moveq	r0, #32
 800cd54:	4770      	bx	lr

0800cd56 <__lo0bits>:
 800cd56:	6803      	ldr	r3, [r0, #0]
 800cd58:	4602      	mov	r2, r0
 800cd5a:	f013 0007 	ands.w	r0, r3, #7
 800cd5e:	d00b      	beq.n	800cd78 <__lo0bits+0x22>
 800cd60:	07d9      	lsls	r1, r3, #31
 800cd62:	d421      	bmi.n	800cda8 <__lo0bits+0x52>
 800cd64:	0798      	lsls	r0, r3, #30
 800cd66:	bf49      	itett	mi
 800cd68:	085b      	lsrmi	r3, r3, #1
 800cd6a:	089b      	lsrpl	r3, r3, #2
 800cd6c:	2001      	movmi	r0, #1
 800cd6e:	6013      	strmi	r3, [r2, #0]
 800cd70:	bf5c      	itt	pl
 800cd72:	6013      	strpl	r3, [r2, #0]
 800cd74:	2002      	movpl	r0, #2
 800cd76:	4770      	bx	lr
 800cd78:	b299      	uxth	r1, r3
 800cd7a:	b909      	cbnz	r1, 800cd80 <__lo0bits+0x2a>
 800cd7c:	0c1b      	lsrs	r3, r3, #16
 800cd7e:	2010      	movs	r0, #16
 800cd80:	b2d9      	uxtb	r1, r3
 800cd82:	b909      	cbnz	r1, 800cd88 <__lo0bits+0x32>
 800cd84:	3008      	adds	r0, #8
 800cd86:	0a1b      	lsrs	r3, r3, #8
 800cd88:	0719      	lsls	r1, r3, #28
 800cd8a:	bf04      	itt	eq
 800cd8c:	091b      	lsreq	r3, r3, #4
 800cd8e:	3004      	addeq	r0, #4
 800cd90:	0799      	lsls	r1, r3, #30
 800cd92:	bf04      	itt	eq
 800cd94:	089b      	lsreq	r3, r3, #2
 800cd96:	3002      	addeq	r0, #2
 800cd98:	07d9      	lsls	r1, r3, #31
 800cd9a:	d403      	bmi.n	800cda4 <__lo0bits+0x4e>
 800cd9c:	085b      	lsrs	r3, r3, #1
 800cd9e:	f100 0001 	add.w	r0, r0, #1
 800cda2:	d003      	beq.n	800cdac <__lo0bits+0x56>
 800cda4:	6013      	str	r3, [r2, #0]
 800cda6:	4770      	bx	lr
 800cda8:	2000      	movs	r0, #0
 800cdaa:	4770      	bx	lr
 800cdac:	2020      	movs	r0, #32
 800cdae:	4770      	bx	lr

0800cdb0 <__i2b>:
 800cdb0:	b510      	push	{r4, lr}
 800cdb2:	460c      	mov	r4, r1
 800cdb4:	2101      	movs	r1, #1
 800cdb6:	f7ff ff07 	bl	800cbc8 <_Balloc>
 800cdba:	4602      	mov	r2, r0
 800cdbc:	b928      	cbnz	r0, 800cdca <__i2b+0x1a>
 800cdbe:	4b05      	ldr	r3, [pc, #20]	@ (800cdd4 <__i2b+0x24>)
 800cdc0:	4805      	ldr	r0, [pc, #20]	@ (800cdd8 <__i2b+0x28>)
 800cdc2:	f240 1145 	movw	r1, #325	@ 0x145
 800cdc6:	f000 fcbd 	bl	800d744 <__assert_func>
 800cdca:	2301      	movs	r3, #1
 800cdcc:	6144      	str	r4, [r0, #20]
 800cdce:	6103      	str	r3, [r0, #16]
 800cdd0:	bd10      	pop	{r4, pc}
 800cdd2:	bf00      	nop
 800cdd4:	0800e820 	.word	0x0800e820
 800cdd8:	0800e831 	.word	0x0800e831

0800cddc <__multiply>:
 800cddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde0:	4614      	mov	r4, r2
 800cde2:	690a      	ldr	r2, [r1, #16]
 800cde4:	6923      	ldr	r3, [r4, #16]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	bfa8      	it	ge
 800cdea:	4623      	movge	r3, r4
 800cdec:	460f      	mov	r7, r1
 800cdee:	bfa4      	itt	ge
 800cdf0:	460c      	movge	r4, r1
 800cdf2:	461f      	movge	r7, r3
 800cdf4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cdf8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cdfc:	68a3      	ldr	r3, [r4, #8]
 800cdfe:	6861      	ldr	r1, [r4, #4]
 800ce00:	eb0a 0609 	add.w	r6, sl, r9
 800ce04:	42b3      	cmp	r3, r6
 800ce06:	b085      	sub	sp, #20
 800ce08:	bfb8      	it	lt
 800ce0a:	3101      	addlt	r1, #1
 800ce0c:	f7ff fedc 	bl	800cbc8 <_Balloc>
 800ce10:	b930      	cbnz	r0, 800ce20 <__multiply+0x44>
 800ce12:	4602      	mov	r2, r0
 800ce14:	4b44      	ldr	r3, [pc, #272]	@ (800cf28 <__multiply+0x14c>)
 800ce16:	4845      	ldr	r0, [pc, #276]	@ (800cf2c <__multiply+0x150>)
 800ce18:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ce1c:	f000 fc92 	bl	800d744 <__assert_func>
 800ce20:	f100 0514 	add.w	r5, r0, #20
 800ce24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce28:	462b      	mov	r3, r5
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	4543      	cmp	r3, r8
 800ce2e:	d321      	bcc.n	800ce74 <__multiply+0x98>
 800ce30:	f107 0114 	add.w	r1, r7, #20
 800ce34:	f104 0214 	add.w	r2, r4, #20
 800ce38:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ce3c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ce40:	9302      	str	r3, [sp, #8]
 800ce42:	1b13      	subs	r3, r2, r4
 800ce44:	3b15      	subs	r3, #21
 800ce46:	f023 0303 	bic.w	r3, r3, #3
 800ce4a:	3304      	adds	r3, #4
 800ce4c:	f104 0715 	add.w	r7, r4, #21
 800ce50:	42ba      	cmp	r2, r7
 800ce52:	bf38      	it	cc
 800ce54:	2304      	movcc	r3, #4
 800ce56:	9301      	str	r3, [sp, #4]
 800ce58:	9b02      	ldr	r3, [sp, #8]
 800ce5a:	9103      	str	r1, [sp, #12]
 800ce5c:	428b      	cmp	r3, r1
 800ce5e:	d80c      	bhi.n	800ce7a <__multiply+0x9e>
 800ce60:	2e00      	cmp	r6, #0
 800ce62:	dd03      	ble.n	800ce6c <__multiply+0x90>
 800ce64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d05b      	beq.n	800cf24 <__multiply+0x148>
 800ce6c:	6106      	str	r6, [r0, #16]
 800ce6e:	b005      	add	sp, #20
 800ce70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce74:	f843 2b04 	str.w	r2, [r3], #4
 800ce78:	e7d8      	b.n	800ce2c <__multiply+0x50>
 800ce7a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ce7e:	f1ba 0f00 	cmp.w	sl, #0
 800ce82:	d024      	beq.n	800cece <__multiply+0xf2>
 800ce84:	f104 0e14 	add.w	lr, r4, #20
 800ce88:	46a9      	mov	r9, r5
 800ce8a:	f04f 0c00 	mov.w	ip, #0
 800ce8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce92:	f8d9 3000 	ldr.w	r3, [r9]
 800ce96:	fa1f fb87 	uxth.w	fp, r7
 800ce9a:	b29b      	uxth	r3, r3
 800ce9c:	fb0a 330b 	mla	r3, sl, fp, r3
 800cea0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cea4:	f8d9 7000 	ldr.w	r7, [r9]
 800cea8:	4463      	add	r3, ip
 800ceaa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ceae:	fb0a c70b 	mla	r7, sl, fp, ip
 800ceb2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cebc:	4572      	cmp	r2, lr
 800cebe:	f849 3b04 	str.w	r3, [r9], #4
 800cec2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cec6:	d8e2      	bhi.n	800ce8e <__multiply+0xb2>
 800cec8:	9b01      	ldr	r3, [sp, #4]
 800ceca:	f845 c003 	str.w	ip, [r5, r3]
 800cece:	9b03      	ldr	r3, [sp, #12]
 800ced0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ced4:	3104      	adds	r1, #4
 800ced6:	f1b9 0f00 	cmp.w	r9, #0
 800ceda:	d021      	beq.n	800cf20 <__multiply+0x144>
 800cedc:	682b      	ldr	r3, [r5, #0]
 800cede:	f104 0c14 	add.w	ip, r4, #20
 800cee2:	46ae      	mov	lr, r5
 800cee4:	f04f 0a00 	mov.w	sl, #0
 800cee8:	f8bc b000 	ldrh.w	fp, [ip]
 800ceec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cef0:	fb09 770b 	mla	r7, r9, fp, r7
 800cef4:	4457      	add	r7, sl
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cefc:	f84e 3b04 	str.w	r3, [lr], #4
 800cf00:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cf04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf08:	f8be 3000 	ldrh.w	r3, [lr]
 800cf0c:	fb09 330a 	mla	r3, r9, sl, r3
 800cf10:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cf14:	4562      	cmp	r2, ip
 800cf16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf1a:	d8e5      	bhi.n	800cee8 <__multiply+0x10c>
 800cf1c:	9f01      	ldr	r7, [sp, #4]
 800cf1e:	51eb      	str	r3, [r5, r7]
 800cf20:	3504      	adds	r5, #4
 800cf22:	e799      	b.n	800ce58 <__multiply+0x7c>
 800cf24:	3e01      	subs	r6, #1
 800cf26:	e79b      	b.n	800ce60 <__multiply+0x84>
 800cf28:	0800e820 	.word	0x0800e820
 800cf2c:	0800e831 	.word	0x0800e831

0800cf30 <__pow5mult>:
 800cf30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf34:	4615      	mov	r5, r2
 800cf36:	f012 0203 	ands.w	r2, r2, #3
 800cf3a:	4607      	mov	r7, r0
 800cf3c:	460e      	mov	r6, r1
 800cf3e:	d007      	beq.n	800cf50 <__pow5mult+0x20>
 800cf40:	4c25      	ldr	r4, [pc, #148]	@ (800cfd8 <__pow5mult+0xa8>)
 800cf42:	3a01      	subs	r2, #1
 800cf44:	2300      	movs	r3, #0
 800cf46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf4a:	f7ff fe9f 	bl	800cc8c <__multadd>
 800cf4e:	4606      	mov	r6, r0
 800cf50:	10ad      	asrs	r5, r5, #2
 800cf52:	d03d      	beq.n	800cfd0 <__pow5mult+0xa0>
 800cf54:	69fc      	ldr	r4, [r7, #28]
 800cf56:	b97c      	cbnz	r4, 800cf78 <__pow5mult+0x48>
 800cf58:	2010      	movs	r0, #16
 800cf5a:	f7ff fd7f 	bl	800ca5c <malloc>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	61f8      	str	r0, [r7, #28]
 800cf62:	b928      	cbnz	r0, 800cf70 <__pow5mult+0x40>
 800cf64:	4b1d      	ldr	r3, [pc, #116]	@ (800cfdc <__pow5mult+0xac>)
 800cf66:	481e      	ldr	r0, [pc, #120]	@ (800cfe0 <__pow5mult+0xb0>)
 800cf68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cf6c:	f000 fbea 	bl	800d744 <__assert_func>
 800cf70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf74:	6004      	str	r4, [r0, #0]
 800cf76:	60c4      	str	r4, [r0, #12]
 800cf78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cf7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf80:	b94c      	cbnz	r4, 800cf96 <__pow5mult+0x66>
 800cf82:	f240 2171 	movw	r1, #625	@ 0x271
 800cf86:	4638      	mov	r0, r7
 800cf88:	f7ff ff12 	bl	800cdb0 <__i2b>
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf92:	4604      	mov	r4, r0
 800cf94:	6003      	str	r3, [r0, #0]
 800cf96:	f04f 0900 	mov.w	r9, #0
 800cf9a:	07eb      	lsls	r3, r5, #31
 800cf9c:	d50a      	bpl.n	800cfb4 <__pow5mult+0x84>
 800cf9e:	4631      	mov	r1, r6
 800cfa0:	4622      	mov	r2, r4
 800cfa2:	4638      	mov	r0, r7
 800cfa4:	f7ff ff1a 	bl	800cddc <__multiply>
 800cfa8:	4631      	mov	r1, r6
 800cfaa:	4680      	mov	r8, r0
 800cfac:	4638      	mov	r0, r7
 800cfae:	f7ff fe4b 	bl	800cc48 <_Bfree>
 800cfb2:	4646      	mov	r6, r8
 800cfb4:	106d      	asrs	r5, r5, #1
 800cfb6:	d00b      	beq.n	800cfd0 <__pow5mult+0xa0>
 800cfb8:	6820      	ldr	r0, [r4, #0]
 800cfba:	b938      	cbnz	r0, 800cfcc <__pow5mult+0x9c>
 800cfbc:	4622      	mov	r2, r4
 800cfbe:	4621      	mov	r1, r4
 800cfc0:	4638      	mov	r0, r7
 800cfc2:	f7ff ff0b 	bl	800cddc <__multiply>
 800cfc6:	6020      	str	r0, [r4, #0]
 800cfc8:	f8c0 9000 	str.w	r9, [r0]
 800cfcc:	4604      	mov	r4, r0
 800cfce:	e7e4      	b.n	800cf9a <__pow5mult+0x6a>
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfd6:	bf00      	nop
 800cfd8:	0800e88c 	.word	0x0800e88c
 800cfdc:	0800e7b1 	.word	0x0800e7b1
 800cfe0:	0800e831 	.word	0x0800e831

0800cfe4 <__lshift>:
 800cfe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfe8:	460c      	mov	r4, r1
 800cfea:	6849      	ldr	r1, [r1, #4]
 800cfec:	6923      	ldr	r3, [r4, #16]
 800cfee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cff2:	68a3      	ldr	r3, [r4, #8]
 800cff4:	4607      	mov	r7, r0
 800cff6:	4691      	mov	r9, r2
 800cff8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cffc:	f108 0601 	add.w	r6, r8, #1
 800d000:	42b3      	cmp	r3, r6
 800d002:	db0b      	blt.n	800d01c <__lshift+0x38>
 800d004:	4638      	mov	r0, r7
 800d006:	f7ff fddf 	bl	800cbc8 <_Balloc>
 800d00a:	4605      	mov	r5, r0
 800d00c:	b948      	cbnz	r0, 800d022 <__lshift+0x3e>
 800d00e:	4602      	mov	r2, r0
 800d010:	4b28      	ldr	r3, [pc, #160]	@ (800d0b4 <__lshift+0xd0>)
 800d012:	4829      	ldr	r0, [pc, #164]	@ (800d0b8 <__lshift+0xd4>)
 800d014:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d018:	f000 fb94 	bl	800d744 <__assert_func>
 800d01c:	3101      	adds	r1, #1
 800d01e:	005b      	lsls	r3, r3, #1
 800d020:	e7ee      	b.n	800d000 <__lshift+0x1c>
 800d022:	2300      	movs	r3, #0
 800d024:	f100 0114 	add.w	r1, r0, #20
 800d028:	f100 0210 	add.w	r2, r0, #16
 800d02c:	4618      	mov	r0, r3
 800d02e:	4553      	cmp	r3, sl
 800d030:	db33      	blt.n	800d09a <__lshift+0xb6>
 800d032:	6920      	ldr	r0, [r4, #16]
 800d034:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d038:	f104 0314 	add.w	r3, r4, #20
 800d03c:	f019 091f 	ands.w	r9, r9, #31
 800d040:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d044:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d048:	d02b      	beq.n	800d0a2 <__lshift+0xbe>
 800d04a:	f1c9 0e20 	rsb	lr, r9, #32
 800d04e:	468a      	mov	sl, r1
 800d050:	2200      	movs	r2, #0
 800d052:	6818      	ldr	r0, [r3, #0]
 800d054:	fa00 f009 	lsl.w	r0, r0, r9
 800d058:	4310      	orrs	r0, r2
 800d05a:	f84a 0b04 	str.w	r0, [sl], #4
 800d05e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d062:	459c      	cmp	ip, r3
 800d064:	fa22 f20e 	lsr.w	r2, r2, lr
 800d068:	d8f3      	bhi.n	800d052 <__lshift+0x6e>
 800d06a:	ebac 0304 	sub.w	r3, ip, r4
 800d06e:	3b15      	subs	r3, #21
 800d070:	f023 0303 	bic.w	r3, r3, #3
 800d074:	3304      	adds	r3, #4
 800d076:	f104 0015 	add.w	r0, r4, #21
 800d07a:	4584      	cmp	ip, r0
 800d07c:	bf38      	it	cc
 800d07e:	2304      	movcc	r3, #4
 800d080:	50ca      	str	r2, [r1, r3]
 800d082:	b10a      	cbz	r2, 800d088 <__lshift+0xa4>
 800d084:	f108 0602 	add.w	r6, r8, #2
 800d088:	3e01      	subs	r6, #1
 800d08a:	4638      	mov	r0, r7
 800d08c:	612e      	str	r6, [r5, #16]
 800d08e:	4621      	mov	r1, r4
 800d090:	f7ff fdda 	bl	800cc48 <_Bfree>
 800d094:	4628      	mov	r0, r5
 800d096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d09a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d09e:	3301      	adds	r3, #1
 800d0a0:	e7c5      	b.n	800d02e <__lshift+0x4a>
 800d0a2:	3904      	subs	r1, #4
 800d0a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d0ac:	459c      	cmp	ip, r3
 800d0ae:	d8f9      	bhi.n	800d0a4 <__lshift+0xc0>
 800d0b0:	e7ea      	b.n	800d088 <__lshift+0xa4>
 800d0b2:	bf00      	nop
 800d0b4:	0800e820 	.word	0x0800e820
 800d0b8:	0800e831 	.word	0x0800e831

0800d0bc <__mcmp>:
 800d0bc:	690a      	ldr	r2, [r1, #16]
 800d0be:	4603      	mov	r3, r0
 800d0c0:	6900      	ldr	r0, [r0, #16]
 800d0c2:	1a80      	subs	r0, r0, r2
 800d0c4:	b530      	push	{r4, r5, lr}
 800d0c6:	d10e      	bne.n	800d0e6 <__mcmp+0x2a>
 800d0c8:	3314      	adds	r3, #20
 800d0ca:	3114      	adds	r1, #20
 800d0cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d0d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d0d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d0d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d0dc:	4295      	cmp	r5, r2
 800d0de:	d003      	beq.n	800d0e8 <__mcmp+0x2c>
 800d0e0:	d205      	bcs.n	800d0ee <__mcmp+0x32>
 800d0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e6:	bd30      	pop	{r4, r5, pc}
 800d0e8:	42a3      	cmp	r3, r4
 800d0ea:	d3f3      	bcc.n	800d0d4 <__mcmp+0x18>
 800d0ec:	e7fb      	b.n	800d0e6 <__mcmp+0x2a>
 800d0ee:	2001      	movs	r0, #1
 800d0f0:	e7f9      	b.n	800d0e6 <__mcmp+0x2a>
	...

0800d0f4 <__mdiff>:
 800d0f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f8:	4689      	mov	r9, r1
 800d0fa:	4606      	mov	r6, r0
 800d0fc:	4611      	mov	r1, r2
 800d0fe:	4648      	mov	r0, r9
 800d100:	4614      	mov	r4, r2
 800d102:	f7ff ffdb 	bl	800d0bc <__mcmp>
 800d106:	1e05      	subs	r5, r0, #0
 800d108:	d112      	bne.n	800d130 <__mdiff+0x3c>
 800d10a:	4629      	mov	r1, r5
 800d10c:	4630      	mov	r0, r6
 800d10e:	f7ff fd5b 	bl	800cbc8 <_Balloc>
 800d112:	4602      	mov	r2, r0
 800d114:	b928      	cbnz	r0, 800d122 <__mdiff+0x2e>
 800d116:	4b3f      	ldr	r3, [pc, #252]	@ (800d214 <__mdiff+0x120>)
 800d118:	f240 2137 	movw	r1, #567	@ 0x237
 800d11c:	483e      	ldr	r0, [pc, #248]	@ (800d218 <__mdiff+0x124>)
 800d11e:	f000 fb11 	bl	800d744 <__assert_func>
 800d122:	2301      	movs	r3, #1
 800d124:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d128:	4610      	mov	r0, r2
 800d12a:	b003      	add	sp, #12
 800d12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d130:	bfbc      	itt	lt
 800d132:	464b      	movlt	r3, r9
 800d134:	46a1      	movlt	r9, r4
 800d136:	4630      	mov	r0, r6
 800d138:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d13c:	bfba      	itte	lt
 800d13e:	461c      	movlt	r4, r3
 800d140:	2501      	movlt	r5, #1
 800d142:	2500      	movge	r5, #0
 800d144:	f7ff fd40 	bl	800cbc8 <_Balloc>
 800d148:	4602      	mov	r2, r0
 800d14a:	b918      	cbnz	r0, 800d154 <__mdiff+0x60>
 800d14c:	4b31      	ldr	r3, [pc, #196]	@ (800d214 <__mdiff+0x120>)
 800d14e:	f240 2145 	movw	r1, #581	@ 0x245
 800d152:	e7e3      	b.n	800d11c <__mdiff+0x28>
 800d154:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d158:	6926      	ldr	r6, [r4, #16]
 800d15a:	60c5      	str	r5, [r0, #12]
 800d15c:	f109 0310 	add.w	r3, r9, #16
 800d160:	f109 0514 	add.w	r5, r9, #20
 800d164:	f104 0e14 	add.w	lr, r4, #20
 800d168:	f100 0b14 	add.w	fp, r0, #20
 800d16c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d170:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d174:	9301      	str	r3, [sp, #4]
 800d176:	46d9      	mov	r9, fp
 800d178:	f04f 0c00 	mov.w	ip, #0
 800d17c:	9b01      	ldr	r3, [sp, #4]
 800d17e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d182:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d186:	9301      	str	r3, [sp, #4]
 800d188:	fa1f f38a 	uxth.w	r3, sl
 800d18c:	4619      	mov	r1, r3
 800d18e:	b283      	uxth	r3, r0
 800d190:	1acb      	subs	r3, r1, r3
 800d192:	0c00      	lsrs	r0, r0, #16
 800d194:	4463      	add	r3, ip
 800d196:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d19a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d19e:	b29b      	uxth	r3, r3
 800d1a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d1a4:	4576      	cmp	r6, lr
 800d1a6:	f849 3b04 	str.w	r3, [r9], #4
 800d1aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1ae:	d8e5      	bhi.n	800d17c <__mdiff+0x88>
 800d1b0:	1b33      	subs	r3, r6, r4
 800d1b2:	3b15      	subs	r3, #21
 800d1b4:	f023 0303 	bic.w	r3, r3, #3
 800d1b8:	3415      	adds	r4, #21
 800d1ba:	3304      	adds	r3, #4
 800d1bc:	42a6      	cmp	r6, r4
 800d1be:	bf38      	it	cc
 800d1c0:	2304      	movcc	r3, #4
 800d1c2:	441d      	add	r5, r3
 800d1c4:	445b      	add	r3, fp
 800d1c6:	461e      	mov	r6, r3
 800d1c8:	462c      	mov	r4, r5
 800d1ca:	4544      	cmp	r4, r8
 800d1cc:	d30e      	bcc.n	800d1ec <__mdiff+0xf8>
 800d1ce:	f108 0103 	add.w	r1, r8, #3
 800d1d2:	1b49      	subs	r1, r1, r5
 800d1d4:	f021 0103 	bic.w	r1, r1, #3
 800d1d8:	3d03      	subs	r5, #3
 800d1da:	45a8      	cmp	r8, r5
 800d1dc:	bf38      	it	cc
 800d1de:	2100      	movcc	r1, #0
 800d1e0:	440b      	add	r3, r1
 800d1e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d1e6:	b191      	cbz	r1, 800d20e <__mdiff+0x11a>
 800d1e8:	6117      	str	r7, [r2, #16]
 800d1ea:	e79d      	b.n	800d128 <__mdiff+0x34>
 800d1ec:	f854 1b04 	ldr.w	r1, [r4], #4
 800d1f0:	46e6      	mov	lr, ip
 800d1f2:	0c08      	lsrs	r0, r1, #16
 800d1f4:	fa1c fc81 	uxtah	ip, ip, r1
 800d1f8:	4471      	add	r1, lr
 800d1fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d1fe:	b289      	uxth	r1, r1
 800d200:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d204:	f846 1b04 	str.w	r1, [r6], #4
 800d208:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d20c:	e7dd      	b.n	800d1ca <__mdiff+0xd6>
 800d20e:	3f01      	subs	r7, #1
 800d210:	e7e7      	b.n	800d1e2 <__mdiff+0xee>
 800d212:	bf00      	nop
 800d214:	0800e820 	.word	0x0800e820
 800d218:	0800e831 	.word	0x0800e831

0800d21c <__d2b>:
 800d21c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d220:	460f      	mov	r7, r1
 800d222:	2101      	movs	r1, #1
 800d224:	ec59 8b10 	vmov	r8, r9, d0
 800d228:	4616      	mov	r6, r2
 800d22a:	f7ff fccd 	bl	800cbc8 <_Balloc>
 800d22e:	4604      	mov	r4, r0
 800d230:	b930      	cbnz	r0, 800d240 <__d2b+0x24>
 800d232:	4602      	mov	r2, r0
 800d234:	4b23      	ldr	r3, [pc, #140]	@ (800d2c4 <__d2b+0xa8>)
 800d236:	4824      	ldr	r0, [pc, #144]	@ (800d2c8 <__d2b+0xac>)
 800d238:	f240 310f 	movw	r1, #783	@ 0x30f
 800d23c:	f000 fa82 	bl	800d744 <__assert_func>
 800d240:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d244:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d248:	b10d      	cbz	r5, 800d24e <__d2b+0x32>
 800d24a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d24e:	9301      	str	r3, [sp, #4]
 800d250:	f1b8 0300 	subs.w	r3, r8, #0
 800d254:	d023      	beq.n	800d29e <__d2b+0x82>
 800d256:	4668      	mov	r0, sp
 800d258:	9300      	str	r3, [sp, #0]
 800d25a:	f7ff fd7c 	bl	800cd56 <__lo0bits>
 800d25e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d262:	b1d0      	cbz	r0, 800d29a <__d2b+0x7e>
 800d264:	f1c0 0320 	rsb	r3, r0, #32
 800d268:	fa02 f303 	lsl.w	r3, r2, r3
 800d26c:	430b      	orrs	r3, r1
 800d26e:	40c2      	lsrs	r2, r0
 800d270:	6163      	str	r3, [r4, #20]
 800d272:	9201      	str	r2, [sp, #4]
 800d274:	9b01      	ldr	r3, [sp, #4]
 800d276:	61a3      	str	r3, [r4, #24]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	bf0c      	ite	eq
 800d27c:	2201      	moveq	r2, #1
 800d27e:	2202      	movne	r2, #2
 800d280:	6122      	str	r2, [r4, #16]
 800d282:	b1a5      	cbz	r5, 800d2ae <__d2b+0x92>
 800d284:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d288:	4405      	add	r5, r0
 800d28a:	603d      	str	r5, [r7, #0]
 800d28c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d290:	6030      	str	r0, [r6, #0]
 800d292:	4620      	mov	r0, r4
 800d294:	b003      	add	sp, #12
 800d296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d29a:	6161      	str	r1, [r4, #20]
 800d29c:	e7ea      	b.n	800d274 <__d2b+0x58>
 800d29e:	a801      	add	r0, sp, #4
 800d2a0:	f7ff fd59 	bl	800cd56 <__lo0bits>
 800d2a4:	9b01      	ldr	r3, [sp, #4]
 800d2a6:	6163      	str	r3, [r4, #20]
 800d2a8:	3020      	adds	r0, #32
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	e7e8      	b.n	800d280 <__d2b+0x64>
 800d2ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d2b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d2b6:	6038      	str	r0, [r7, #0]
 800d2b8:	6918      	ldr	r0, [r3, #16]
 800d2ba:	f7ff fd2d 	bl	800cd18 <__hi0bits>
 800d2be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d2c2:	e7e5      	b.n	800d290 <__d2b+0x74>
 800d2c4:	0800e820 	.word	0x0800e820
 800d2c8:	0800e831 	.word	0x0800e831

0800d2cc <__ssputs_r>:
 800d2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2d0:	688e      	ldr	r6, [r1, #8]
 800d2d2:	461f      	mov	r7, r3
 800d2d4:	42be      	cmp	r6, r7
 800d2d6:	680b      	ldr	r3, [r1, #0]
 800d2d8:	4682      	mov	sl, r0
 800d2da:	460c      	mov	r4, r1
 800d2dc:	4690      	mov	r8, r2
 800d2de:	d82d      	bhi.n	800d33c <__ssputs_r+0x70>
 800d2e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d2e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d2e8:	d026      	beq.n	800d338 <__ssputs_r+0x6c>
 800d2ea:	6965      	ldr	r5, [r4, #20]
 800d2ec:	6909      	ldr	r1, [r1, #16]
 800d2ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2f2:	eba3 0901 	sub.w	r9, r3, r1
 800d2f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d2fa:	1c7b      	adds	r3, r7, #1
 800d2fc:	444b      	add	r3, r9
 800d2fe:	106d      	asrs	r5, r5, #1
 800d300:	429d      	cmp	r5, r3
 800d302:	bf38      	it	cc
 800d304:	461d      	movcc	r5, r3
 800d306:	0553      	lsls	r3, r2, #21
 800d308:	d527      	bpl.n	800d35a <__ssputs_r+0x8e>
 800d30a:	4629      	mov	r1, r5
 800d30c:	f7ff fbd0 	bl	800cab0 <_malloc_r>
 800d310:	4606      	mov	r6, r0
 800d312:	b360      	cbz	r0, 800d36e <__ssputs_r+0xa2>
 800d314:	6921      	ldr	r1, [r4, #16]
 800d316:	464a      	mov	r2, r9
 800d318:	f000 fa06 	bl	800d728 <memcpy>
 800d31c:	89a3      	ldrh	r3, [r4, #12]
 800d31e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d326:	81a3      	strh	r3, [r4, #12]
 800d328:	6126      	str	r6, [r4, #16]
 800d32a:	6165      	str	r5, [r4, #20]
 800d32c:	444e      	add	r6, r9
 800d32e:	eba5 0509 	sub.w	r5, r5, r9
 800d332:	6026      	str	r6, [r4, #0]
 800d334:	60a5      	str	r5, [r4, #8]
 800d336:	463e      	mov	r6, r7
 800d338:	42be      	cmp	r6, r7
 800d33a:	d900      	bls.n	800d33e <__ssputs_r+0x72>
 800d33c:	463e      	mov	r6, r7
 800d33e:	6820      	ldr	r0, [r4, #0]
 800d340:	4632      	mov	r2, r6
 800d342:	4641      	mov	r1, r8
 800d344:	f000 f9c6 	bl	800d6d4 <memmove>
 800d348:	68a3      	ldr	r3, [r4, #8]
 800d34a:	1b9b      	subs	r3, r3, r6
 800d34c:	60a3      	str	r3, [r4, #8]
 800d34e:	6823      	ldr	r3, [r4, #0]
 800d350:	4433      	add	r3, r6
 800d352:	6023      	str	r3, [r4, #0]
 800d354:	2000      	movs	r0, #0
 800d356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d35a:	462a      	mov	r2, r5
 800d35c:	f000 fa36 	bl	800d7cc <_realloc_r>
 800d360:	4606      	mov	r6, r0
 800d362:	2800      	cmp	r0, #0
 800d364:	d1e0      	bne.n	800d328 <__ssputs_r+0x5c>
 800d366:	6921      	ldr	r1, [r4, #16]
 800d368:	4650      	mov	r0, sl
 800d36a:	f7ff fb2d 	bl	800c9c8 <_free_r>
 800d36e:	230c      	movs	r3, #12
 800d370:	f8ca 3000 	str.w	r3, [sl]
 800d374:	89a3      	ldrh	r3, [r4, #12]
 800d376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d37a:	81a3      	strh	r3, [r4, #12]
 800d37c:	f04f 30ff 	mov.w	r0, #4294967295
 800d380:	e7e9      	b.n	800d356 <__ssputs_r+0x8a>
	...

0800d384 <_svfiprintf_r>:
 800d384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d388:	4698      	mov	r8, r3
 800d38a:	898b      	ldrh	r3, [r1, #12]
 800d38c:	061b      	lsls	r3, r3, #24
 800d38e:	b09d      	sub	sp, #116	@ 0x74
 800d390:	4607      	mov	r7, r0
 800d392:	460d      	mov	r5, r1
 800d394:	4614      	mov	r4, r2
 800d396:	d510      	bpl.n	800d3ba <_svfiprintf_r+0x36>
 800d398:	690b      	ldr	r3, [r1, #16]
 800d39a:	b973      	cbnz	r3, 800d3ba <_svfiprintf_r+0x36>
 800d39c:	2140      	movs	r1, #64	@ 0x40
 800d39e:	f7ff fb87 	bl	800cab0 <_malloc_r>
 800d3a2:	6028      	str	r0, [r5, #0]
 800d3a4:	6128      	str	r0, [r5, #16]
 800d3a6:	b930      	cbnz	r0, 800d3b6 <_svfiprintf_r+0x32>
 800d3a8:	230c      	movs	r3, #12
 800d3aa:	603b      	str	r3, [r7, #0]
 800d3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d3b0:	b01d      	add	sp, #116	@ 0x74
 800d3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b6:	2340      	movs	r3, #64	@ 0x40
 800d3b8:	616b      	str	r3, [r5, #20]
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3be:	2320      	movs	r3, #32
 800d3c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d3c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3c8:	2330      	movs	r3, #48	@ 0x30
 800d3ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d568 <_svfiprintf_r+0x1e4>
 800d3ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3d2:	f04f 0901 	mov.w	r9, #1
 800d3d6:	4623      	mov	r3, r4
 800d3d8:	469a      	mov	sl, r3
 800d3da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3de:	b10a      	cbz	r2, 800d3e4 <_svfiprintf_r+0x60>
 800d3e0:	2a25      	cmp	r2, #37	@ 0x25
 800d3e2:	d1f9      	bne.n	800d3d8 <_svfiprintf_r+0x54>
 800d3e4:	ebba 0b04 	subs.w	fp, sl, r4
 800d3e8:	d00b      	beq.n	800d402 <_svfiprintf_r+0x7e>
 800d3ea:	465b      	mov	r3, fp
 800d3ec:	4622      	mov	r2, r4
 800d3ee:	4629      	mov	r1, r5
 800d3f0:	4638      	mov	r0, r7
 800d3f2:	f7ff ff6b 	bl	800d2cc <__ssputs_r>
 800d3f6:	3001      	adds	r0, #1
 800d3f8:	f000 80a7 	beq.w	800d54a <_svfiprintf_r+0x1c6>
 800d3fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3fe:	445a      	add	r2, fp
 800d400:	9209      	str	r2, [sp, #36]	@ 0x24
 800d402:	f89a 3000 	ldrb.w	r3, [sl]
 800d406:	2b00      	cmp	r3, #0
 800d408:	f000 809f 	beq.w	800d54a <_svfiprintf_r+0x1c6>
 800d40c:	2300      	movs	r3, #0
 800d40e:	f04f 32ff 	mov.w	r2, #4294967295
 800d412:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d416:	f10a 0a01 	add.w	sl, sl, #1
 800d41a:	9304      	str	r3, [sp, #16]
 800d41c:	9307      	str	r3, [sp, #28]
 800d41e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d422:	931a      	str	r3, [sp, #104]	@ 0x68
 800d424:	4654      	mov	r4, sl
 800d426:	2205      	movs	r2, #5
 800d428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d42c:	484e      	ldr	r0, [pc, #312]	@ (800d568 <_svfiprintf_r+0x1e4>)
 800d42e:	f7f2 fecf 	bl	80001d0 <memchr>
 800d432:	9a04      	ldr	r2, [sp, #16]
 800d434:	b9d8      	cbnz	r0, 800d46e <_svfiprintf_r+0xea>
 800d436:	06d0      	lsls	r0, r2, #27
 800d438:	bf44      	itt	mi
 800d43a:	2320      	movmi	r3, #32
 800d43c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d440:	0711      	lsls	r1, r2, #28
 800d442:	bf44      	itt	mi
 800d444:	232b      	movmi	r3, #43	@ 0x2b
 800d446:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d44a:	f89a 3000 	ldrb.w	r3, [sl]
 800d44e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d450:	d015      	beq.n	800d47e <_svfiprintf_r+0xfa>
 800d452:	9a07      	ldr	r2, [sp, #28]
 800d454:	4654      	mov	r4, sl
 800d456:	2000      	movs	r0, #0
 800d458:	f04f 0c0a 	mov.w	ip, #10
 800d45c:	4621      	mov	r1, r4
 800d45e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d462:	3b30      	subs	r3, #48	@ 0x30
 800d464:	2b09      	cmp	r3, #9
 800d466:	d94b      	bls.n	800d500 <_svfiprintf_r+0x17c>
 800d468:	b1b0      	cbz	r0, 800d498 <_svfiprintf_r+0x114>
 800d46a:	9207      	str	r2, [sp, #28]
 800d46c:	e014      	b.n	800d498 <_svfiprintf_r+0x114>
 800d46e:	eba0 0308 	sub.w	r3, r0, r8
 800d472:	fa09 f303 	lsl.w	r3, r9, r3
 800d476:	4313      	orrs	r3, r2
 800d478:	9304      	str	r3, [sp, #16]
 800d47a:	46a2      	mov	sl, r4
 800d47c:	e7d2      	b.n	800d424 <_svfiprintf_r+0xa0>
 800d47e:	9b03      	ldr	r3, [sp, #12]
 800d480:	1d19      	adds	r1, r3, #4
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	9103      	str	r1, [sp, #12]
 800d486:	2b00      	cmp	r3, #0
 800d488:	bfbb      	ittet	lt
 800d48a:	425b      	neglt	r3, r3
 800d48c:	f042 0202 	orrlt.w	r2, r2, #2
 800d490:	9307      	strge	r3, [sp, #28]
 800d492:	9307      	strlt	r3, [sp, #28]
 800d494:	bfb8      	it	lt
 800d496:	9204      	strlt	r2, [sp, #16]
 800d498:	7823      	ldrb	r3, [r4, #0]
 800d49a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d49c:	d10a      	bne.n	800d4b4 <_svfiprintf_r+0x130>
 800d49e:	7863      	ldrb	r3, [r4, #1]
 800d4a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4a2:	d132      	bne.n	800d50a <_svfiprintf_r+0x186>
 800d4a4:	9b03      	ldr	r3, [sp, #12]
 800d4a6:	1d1a      	adds	r2, r3, #4
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	9203      	str	r2, [sp, #12]
 800d4ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4b0:	3402      	adds	r4, #2
 800d4b2:	9305      	str	r3, [sp, #20]
 800d4b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d578 <_svfiprintf_r+0x1f4>
 800d4b8:	7821      	ldrb	r1, [r4, #0]
 800d4ba:	2203      	movs	r2, #3
 800d4bc:	4650      	mov	r0, sl
 800d4be:	f7f2 fe87 	bl	80001d0 <memchr>
 800d4c2:	b138      	cbz	r0, 800d4d4 <_svfiprintf_r+0x150>
 800d4c4:	9b04      	ldr	r3, [sp, #16]
 800d4c6:	eba0 000a 	sub.w	r0, r0, sl
 800d4ca:	2240      	movs	r2, #64	@ 0x40
 800d4cc:	4082      	lsls	r2, r0
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	3401      	adds	r4, #1
 800d4d2:	9304      	str	r3, [sp, #16]
 800d4d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4d8:	4824      	ldr	r0, [pc, #144]	@ (800d56c <_svfiprintf_r+0x1e8>)
 800d4da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4de:	2206      	movs	r2, #6
 800d4e0:	f7f2 fe76 	bl	80001d0 <memchr>
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	d036      	beq.n	800d556 <_svfiprintf_r+0x1d2>
 800d4e8:	4b21      	ldr	r3, [pc, #132]	@ (800d570 <_svfiprintf_r+0x1ec>)
 800d4ea:	bb1b      	cbnz	r3, 800d534 <_svfiprintf_r+0x1b0>
 800d4ec:	9b03      	ldr	r3, [sp, #12]
 800d4ee:	3307      	adds	r3, #7
 800d4f0:	f023 0307 	bic.w	r3, r3, #7
 800d4f4:	3308      	adds	r3, #8
 800d4f6:	9303      	str	r3, [sp, #12]
 800d4f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4fa:	4433      	add	r3, r6
 800d4fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4fe:	e76a      	b.n	800d3d6 <_svfiprintf_r+0x52>
 800d500:	fb0c 3202 	mla	r2, ip, r2, r3
 800d504:	460c      	mov	r4, r1
 800d506:	2001      	movs	r0, #1
 800d508:	e7a8      	b.n	800d45c <_svfiprintf_r+0xd8>
 800d50a:	2300      	movs	r3, #0
 800d50c:	3401      	adds	r4, #1
 800d50e:	9305      	str	r3, [sp, #20]
 800d510:	4619      	mov	r1, r3
 800d512:	f04f 0c0a 	mov.w	ip, #10
 800d516:	4620      	mov	r0, r4
 800d518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d51c:	3a30      	subs	r2, #48	@ 0x30
 800d51e:	2a09      	cmp	r2, #9
 800d520:	d903      	bls.n	800d52a <_svfiprintf_r+0x1a6>
 800d522:	2b00      	cmp	r3, #0
 800d524:	d0c6      	beq.n	800d4b4 <_svfiprintf_r+0x130>
 800d526:	9105      	str	r1, [sp, #20]
 800d528:	e7c4      	b.n	800d4b4 <_svfiprintf_r+0x130>
 800d52a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d52e:	4604      	mov	r4, r0
 800d530:	2301      	movs	r3, #1
 800d532:	e7f0      	b.n	800d516 <_svfiprintf_r+0x192>
 800d534:	ab03      	add	r3, sp, #12
 800d536:	9300      	str	r3, [sp, #0]
 800d538:	462a      	mov	r2, r5
 800d53a:	4b0e      	ldr	r3, [pc, #56]	@ (800d574 <_svfiprintf_r+0x1f0>)
 800d53c:	a904      	add	r1, sp, #16
 800d53e:	4638      	mov	r0, r7
 800d540:	f7fd fe96 	bl	800b270 <_printf_float>
 800d544:	1c42      	adds	r2, r0, #1
 800d546:	4606      	mov	r6, r0
 800d548:	d1d6      	bne.n	800d4f8 <_svfiprintf_r+0x174>
 800d54a:	89ab      	ldrh	r3, [r5, #12]
 800d54c:	065b      	lsls	r3, r3, #25
 800d54e:	f53f af2d 	bmi.w	800d3ac <_svfiprintf_r+0x28>
 800d552:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d554:	e72c      	b.n	800d3b0 <_svfiprintf_r+0x2c>
 800d556:	ab03      	add	r3, sp, #12
 800d558:	9300      	str	r3, [sp, #0]
 800d55a:	462a      	mov	r2, r5
 800d55c:	4b05      	ldr	r3, [pc, #20]	@ (800d574 <_svfiprintf_r+0x1f0>)
 800d55e:	a904      	add	r1, sp, #16
 800d560:	4638      	mov	r0, r7
 800d562:	f7fe f91d 	bl	800b7a0 <_printf_i>
 800d566:	e7ed      	b.n	800d544 <_svfiprintf_r+0x1c0>
 800d568:	0800e988 	.word	0x0800e988
 800d56c:	0800e992 	.word	0x0800e992
 800d570:	0800b271 	.word	0x0800b271
 800d574:	0800d2cd 	.word	0x0800d2cd
 800d578:	0800e98e 	.word	0x0800e98e

0800d57c <__sflush_r>:
 800d57c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d584:	0716      	lsls	r6, r2, #28
 800d586:	4605      	mov	r5, r0
 800d588:	460c      	mov	r4, r1
 800d58a:	d454      	bmi.n	800d636 <__sflush_r+0xba>
 800d58c:	684b      	ldr	r3, [r1, #4]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	dc02      	bgt.n	800d598 <__sflush_r+0x1c>
 800d592:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d594:	2b00      	cmp	r3, #0
 800d596:	dd48      	ble.n	800d62a <__sflush_r+0xae>
 800d598:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d59a:	2e00      	cmp	r6, #0
 800d59c:	d045      	beq.n	800d62a <__sflush_r+0xae>
 800d59e:	2300      	movs	r3, #0
 800d5a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d5a4:	682f      	ldr	r7, [r5, #0]
 800d5a6:	6a21      	ldr	r1, [r4, #32]
 800d5a8:	602b      	str	r3, [r5, #0]
 800d5aa:	d030      	beq.n	800d60e <__sflush_r+0x92>
 800d5ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d5ae:	89a3      	ldrh	r3, [r4, #12]
 800d5b0:	0759      	lsls	r1, r3, #29
 800d5b2:	d505      	bpl.n	800d5c0 <__sflush_r+0x44>
 800d5b4:	6863      	ldr	r3, [r4, #4]
 800d5b6:	1ad2      	subs	r2, r2, r3
 800d5b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d5ba:	b10b      	cbz	r3, 800d5c0 <__sflush_r+0x44>
 800d5bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d5be:	1ad2      	subs	r2, r2, r3
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5c4:	6a21      	ldr	r1, [r4, #32]
 800d5c6:	4628      	mov	r0, r5
 800d5c8:	47b0      	blx	r6
 800d5ca:	1c43      	adds	r3, r0, #1
 800d5cc:	89a3      	ldrh	r3, [r4, #12]
 800d5ce:	d106      	bne.n	800d5de <__sflush_r+0x62>
 800d5d0:	6829      	ldr	r1, [r5, #0]
 800d5d2:	291d      	cmp	r1, #29
 800d5d4:	d82b      	bhi.n	800d62e <__sflush_r+0xb2>
 800d5d6:	4a2a      	ldr	r2, [pc, #168]	@ (800d680 <__sflush_r+0x104>)
 800d5d8:	410a      	asrs	r2, r1
 800d5da:	07d6      	lsls	r6, r2, #31
 800d5dc:	d427      	bmi.n	800d62e <__sflush_r+0xb2>
 800d5de:	2200      	movs	r2, #0
 800d5e0:	6062      	str	r2, [r4, #4]
 800d5e2:	04d9      	lsls	r1, r3, #19
 800d5e4:	6922      	ldr	r2, [r4, #16]
 800d5e6:	6022      	str	r2, [r4, #0]
 800d5e8:	d504      	bpl.n	800d5f4 <__sflush_r+0x78>
 800d5ea:	1c42      	adds	r2, r0, #1
 800d5ec:	d101      	bne.n	800d5f2 <__sflush_r+0x76>
 800d5ee:	682b      	ldr	r3, [r5, #0]
 800d5f0:	b903      	cbnz	r3, 800d5f4 <__sflush_r+0x78>
 800d5f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800d5f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d5f6:	602f      	str	r7, [r5, #0]
 800d5f8:	b1b9      	cbz	r1, 800d62a <__sflush_r+0xae>
 800d5fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d5fe:	4299      	cmp	r1, r3
 800d600:	d002      	beq.n	800d608 <__sflush_r+0x8c>
 800d602:	4628      	mov	r0, r5
 800d604:	f7ff f9e0 	bl	800c9c8 <_free_r>
 800d608:	2300      	movs	r3, #0
 800d60a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d60c:	e00d      	b.n	800d62a <__sflush_r+0xae>
 800d60e:	2301      	movs	r3, #1
 800d610:	4628      	mov	r0, r5
 800d612:	47b0      	blx	r6
 800d614:	4602      	mov	r2, r0
 800d616:	1c50      	adds	r0, r2, #1
 800d618:	d1c9      	bne.n	800d5ae <__sflush_r+0x32>
 800d61a:	682b      	ldr	r3, [r5, #0]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d0c6      	beq.n	800d5ae <__sflush_r+0x32>
 800d620:	2b1d      	cmp	r3, #29
 800d622:	d001      	beq.n	800d628 <__sflush_r+0xac>
 800d624:	2b16      	cmp	r3, #22
 800d626:	d11e      	bne.n	800d666 <__sflush_r+0xea>
 800d628:	602f      	str	r7, [r5, #0]
 800d62a:	2000      	movs	r0, #0
 800d62c:	e022      	b.n	800d674 <__sflush_r+0xf8>
 800d62e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d632:	b21b      	sxth	r3, r3
 800d634:	e01b      	b.n	800d66e <__sflush_r+0xf2>
 800d636:	690f      	ldr	r7, [r1, #16]
 800d638:	2f00      	cmp	r7, #0
 800d63a:	d0f6      	beq.n	800d62a <__sflush_r+0xae>
 800d63c:	0793      	lsls	r3, r2, #30
 800d63e:	680e      	ldr	r6, [r1, #0]
 800d640:	bf08      	it	eq
 800d642:	694b      	ldreq	r3, [r1, #20]
 800d644:	600f      	str	r7, [r1, #0]
 800d646:	bf18      	it	ne
 800d648:	2300      	movne	r3, #0
 800d64a:	eba6 0807 	sub.w	r8, r6, r7
 800d64e:	608b      	str	r3, [r1, #8]
 800d650:	f1b8 0f00 	cmp.w	r8, #0
 800d654:	dde9      	ble.n	800d62a <__sflush_r+0xae>
 800d656:	6a21      	ldr	r1, [r4, #32]
 800d658:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d65a:	4643      	mov	r3, r8
 800d65c:	463a      	mov	r2, r7
 800d65e:	4628      	mov	r0, r5
 800d660:	47b0      	blx	r6
 800d662:	2800      	cmp	r0, #0
 800d664:	dc08      	bgt.n	800d678 <__sflush_r+0xfc>
 800d666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d66a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d66e:	81a3      	strh	r3, [r4, #12]
 800d670:	f04f 30ff 	mov.w	r0, #4294967295
 800d674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d678:	4407      	add	r7, r0
 800d67a:	eba8 0800 	sub.w	r8, r8, r0
 800d67e:	e7e7      	b.n	800d650 <__sflush_r+0xd4>
 800d680:	dfbffffe 	.word	0xdfbffffe

0800d684 <_fflush_r>:
 800d684:	b538      	push	{r3, r4, r5, lr}
 800d686:	690b      	ldr	r3, [r1, #16]
 800d688:	4605      	mov	r5, r0
 800d68a:	460c      	mov	r4, r1
 800d68c:	b913      	cbnz	r3, 800d694 <_fflush_r+0x10>
 800d68e:	2500      	movs	r5, #0
 800d690:	4628      	mov	r0, r5
 800d692:	bd38      	pop	{r3, r4, r5, pc}
 800d694:	b118      	cbz	r0, 800d69e <_fflush_r+0x1a>
 800d696:	6a03      	ldr	r3, [r0, #32]
 800d698:	b90b      	cbnz	r3, 800d69e <_fflush_r+0x1a>
 800d69a:	f7fe fa2d 	bl	800baf8 <__sinit>
 800d69e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d0f3      	beq.n	800d68e <_fflush_r+0xa>
 800d6a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d6a8:	07d0      	lsls	r0, r2, #31
 800d6aa:	d404      	bmi.n	800d6b6 <_fflush_r+0x32>
 800d6ac:	0599      	lsls	r1, r3, #22
 800d6ae:	d402      	bmi.n	800d6b6 <_fflush_r+0x32>
 800d6b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6b2:	f7fe fb38 	bl	800bd26 <__retarget_lock_acquire_recursive>
 800d6b6:	4628      	mov	r0, r5
 800d6b8:	4621      	mov	r1, r4
 800d6ba:	f7ff ff5f 	bl	800d57c <__sflush_r>
 800d6be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6c0:	07da      	lsls	r2, r3, #31
 800d6c2:	4605      	mov	r5, r0
 800d6c4:	d4e4      	bmi.n	800d690 <_fflush_r+0xc>
 800d6c6:	89a3      	ldrh	r3, [r4, #12]
 800d6c8:	059b      	lsls	r3, r3, #22
 800d6ca:	d4e1      	bmi.n	800d690 <_fflush_r+0xc>
 800d6cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6ce:	f7fe fb2b 	bl	800bd28 <__retarget_lock_release_recursive>
 800d6d2:	e7dd      	b.n	800d690 <_fflush_r+0xc>

0800d6d4 <memmove>:
 800d6d4:	4288      	cmp	r0, r1
 800d6d6:	b510      	push	{r4, lr}
 800d6d8:	eb01 0402 	add.w	r4, r1, r2
 800d6dc:	d902      	bls.n	800d6e4 <memmove+0x10>
 800d6de:	4284      	cmp	r4, r0
 800d6e0:	4623      	mov	r3, r4
 800d6e2:	d807      	bhi.n	800d6f4 <memmove+0x20>
 800d6e4:	1e43      	subs	r3, r0, #1
 800d6e6:	42a1      	cmp	r1, r4
 800d6e8:	d008      	beq.n	800d6fc <memmove+0x28>
 800d6ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d6ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d6f2:	e7f8      	b.n	800d6e6 <memmove+0x12>
 800d6f4:	4402      	add	r2, r0
 800d6f6:	4601      	mov	r1, r0
 800d6f8:	428a      	cmp	r2, r1
 800d6fa:	d100      	bne.n	800d6fe <memmove+0x2a>
 800d6fc:	bd10      	pop	{r4, pc}
 800d6fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d702:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d706:	e7f7      	b.n	800d6f8 <memmove+0x24>

0800d708 <_sbrk_r>:
 800d708:	b538      	push	{r3, r4, r5, lr}
 800d70a:	4d06      	ldr	r5, [pc, #24]	@ (800d724 <_sbrk_r+0x1c>)
 800d70c:	2300      	movs	r3, #0
 800d70e:	4604      	mov	r4, r0
 800d710:	4608      	mov	r0, r1
 800d712:	602b      	str	r3, [r5, #0]
 800d714:	f7f4 ff68 	bl	80025e8 <_sbrk>
 800d718:	1c43      	adds	r3, r0, #1
 800d71a:	d102      	bne.n	800d722 <_sbrk_r+0x1a>
 800d71c:	682b      	ldr	r3, [r5, #0]
 800d71e:	b103      	cbz	r3, 800d722 <_sbrk_r+0x1a>
 800d720:	6023      	str	r3, [r4, #0]
 800d722:	bd38      	pop	{r3, r4, r5, pc}
 800d724:	2000234c 	.word	0x2000234c

0800d728 <memcpy>:
 800d728:	440a      	add	r2, r1
 800d72a:	4291      	cmp	r1, r2
 800d72c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d730:	d100      	bne.n	800d734 <memcpy+0xc>
 800d732:	4770      	bx	lr
 800d734:	b510      	push	{r4, lr}
 800d736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d73a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d73e:	4291      	cmp	r1, r2
 800d740:	d1f9      	bne.n	800d736 <memcpy+0xe>
 800d742:	bd10      	pop	{r4, pc}

0800d744 <__assert_func>:
 800d744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d746:	4614      	mov	r4, r2
 800d748:	461a      	mov	r2, r3
 800d74a:	4b09      	ldr	r3, [pc, #36]	@ (800d770 <__assert_func+0x2c>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	4605      	mov	r5, r0
 800d750:	68d8      	ldr	r0, [r3, #12]
 800d752:	b954      	cbnz	r4, 800d76a <__assert_func+0x26>
 800d754:	4b07      	ldr	r3, [pc, #28]	@ (800d774 <__assert_func+0x30>)
 800d756:	461c      	mov	r4, r3
 800d758:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d75c:	9100      	str	r1, [sp, #0]
 800d75e:	462b      	mov	r3, r5
 800d760:	4905      	ldr	r1, [pc, #20]	@ (800d778 <__assert_func+0x34>)
 800d762:	f000 f86f 	bl	800d844 <fiprintf>
 800d766:	f000 f87f 	bl	800d868 <abort>
 800d76a:	4b04      	ldr	r3, [pc, #16]	@ (800d77c <__assert_func+0x38>)
 800d76c:	e7f4      	b.n	800d758 <__assert_func+0x14>
 800d76e:	bf00      	nop
 800d770:	2000010c 	.word	0x2000010c
 800d774:	0800e9de 	.word	0x0800e9de
 800d778:	0800e9b0 	.word	0x0800e9b0
 800d77c:	0800e9a3 	.word	0x0800e9a3

0800d780 <_calloc_r>:
 800d780:	b570      	push	{r4, r5, r6, lr}
 800d782:	fba1 5402 	umull	r5, r4, r1, r2
 800d786:	b93c      	cbnz	r4, 800d798 <_calloc_r+0x18>
 800d788:	4629      	mov	r1, r5
 800d78a:	f7ff f991 	bl	800cab0 <_malloc_r>
 800d78e:	4606      	mov	r6, r0
 800d790:	b928      	cbnz	r0, 800d79e <_calloc_r+0x1e>
 800d792:	2600      	movs	r6, #0
 800d794:	4630      	mov	r0, r6
 800d796:	bd70      	pop	{r4, r5, r6, pc}
 800d798:	220c      	movs	r2, #12
 800d79a:	6002      	str	r2, [r0, #0]
 800d79c:	e7f9      	b.n	800d792 <_calloc_r+0x12>
 800d79e:	462a      	mov	r2, r5
 800d7a0:	4621      	mov	r1, r4
 800d7a2:	f7fe fa42 	bl	800bc2a <memset>
 800d7a6:	e7f5      	b.n	800d794 <_calloc_r+0x14>

0800d7a8 <__ascii_mbtowc>:
 800d7a8:	b082      	sub	sp, #8
 800d7aa:	b901      	cbnz	r1, 800d7ae <__ascii_mbtowc+0x6>
 800d7ac:	a901      	add	r1, sp, #4
 800d7ae:	b142      	cbz	r2, 800d7c2 <__ascii_mbtowc+0x1a>
 800d7b0:	b14b      	cbz	r3, 800d7c6 <__ascii_mbtowc+0x1e>
 800d7b2:	7813      	ldrb	r3, [r2, #0]
 800d7b4:	600b      	str	r3, [r1, #0]
 800d7b6:	7812      	ldrb	r2, [r2, #0]
 800d7b8:	1e10      	subs	r0, r2, #0
 800d7ba:	bf18      	it	ne
 800d7bc:	2001      	movne	r0, #1
 800d7be:	b002      	add	sp, #8
 800d7c0:	4770      	bx	lr
 800d7c2:	4610      	mov	r0, r2
 800d7c4:	e7fb      	b.n	800d7be <__ascii_mbtowc+0x16>
 800d7c6:	f06f 0001 	mvn.w	r0, #1
 800d7ca:	e7f8      	b.n	800d7be <__ascii_mbtowc+0x16>

0800d7cc <_realloc_r>:
 800d7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d0:	4680      	mov	r8, r0
 800d7d2:	4615      	mov	r5, r2
 800d7d4:	460c      	mov	r4, r1
 800d7d6:	b921      	cbnz	r1, 800d7e2 <_realloc_r+0x16>
 800d7d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7dc:	4611      	mov	r1, r2
 800d7de:	f7ff b967 	b.w	800cab0 <_malloc_r>
 800d7e2:	b92a      	cbnz	r2, 800d7f0 <_realloc_r+0x24>
 800d7e4:	f7ff f8f0 	bl	800c9c8 <_free_r>
 800d7e8:	2400      	movs	r4, #0
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7f0:	f000 f841 	bl	800d876 <_malloc_usable_size_r>
 800d7f4:	4285      	cmp	r5, r0
 800d7f6:	4606      	mov	r6, r0
 800d7f8:	d802      	bhi.n	800d800 <_realloc_r+0x34>
 800d7fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d7fe:	d8f4      	bhi.n	800d7ea <_realloc_r+0x1e>
 800d800:	4629      	mov	r1, r5
 800d802:	4640      	mov	r0, r8
 800d804:	f7ff f954 	bl	800cab0 <_malloc_r>
 800d808:	4607      	mov	r7, r0
 800d80a:	2800      	cmp	r0, #0
 800d80c:	d0ec      	beq.n	800d7e8 <_realloc_r+0x1c>
 800d80e:	42b5      	cmp	r5, r6
 800d810:	462a      	mov	r2, r5
 800d812:	4621      	mov	r1, r4
 800d814:	bf28      	it	cs
 800d816:	4632      	movcs	r2, r6
 800d818:	f7ff ff86 	bl	800d728 <memcpy>
 800d81c:	4621      	mov	r1, r4
 800d81e:	4640      	mov	r0, r8
 800d820:	f7ff f8d2 	bl	800c9c8 <_free_r>
 800d824:	463c      	mov	r4, r7
 800d826:	e7e0      	b.n	800d7ea <_realloc_r+0x1e>

0800d828 <__ascii_wctomb>:
 800d828:	4603      	mov	r3, r0
 800d82a:	4608      	mov	r0, r1
 800d82c:	b141      	cbz	r1, 800d840 <__ascii_wctomb+0x18>
 800d82e:	2aff      	cmp	r2, #255	@ 0xff
 800d830:	d904      	bls.n	800d83c <__ascii_wctomb+0x14>
 800d832:	228a      	movs	r2, #138	@ 0x8a
 800d834:	601a      	str	r2, [r3, #0]
 800d836:	f04f 30ff 	mov.w	r0, #4294967295
 800d83a:	4770      	bx	lr
 800d83c:	700a      	strb	r2, [r1, #0]
 800d83e:	2001      	movs	r0, #1
 800d840:	4770      	bx	lr
	...

0800d844 <fiprintf>:
 800d844:	b40e      	push	{r1, r2, r3}
 800d846:	b503      	push	{r0, r1, lr}
 800d848:	4601      	mov	r1, r0
 800d84a:	ab03      	add	r3, sp, #12
 800d84c:	4805      	ldr	r0, [pc, #20]	@ (800d864 <fiprintf+0x20>)
 800d84e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d852:	6800      	ldr	r0, [r0, #0]
 800d854:	9301      	str	r3, [sp, #4]
 800d856:	f000 f83f 	bl	800d8d8 <_vfiprintf_r>
 800d85a:	b002      	add	sp, #8
 800d85c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d860:	b003      	add	sp, #12
 800d862:	4770      	bx	lr
 800d864:	2000010c 	.word	0x2000010c

0800d868 <abort>:
 800d868:	b508      	push	{r3, lr}
 800d86a:	2006      	movs	r0, #6
 800d86c:	f000 fa08 	bl	800dc80 <raise>
 800d870:	2001      	movs	r0, #1
 800d872:	f7f4 fe41 	bl	80024f8 <_exit>

0800d876 <_malloc_usable_size_r>:
 800d876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d87a:	1f18      	subs	r0, r3, #4
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	bfbc      	itt	lt
 800d880:	580b      	ldrlt	r3, [r1, r0]
 800d882:	18c0      	addlt	r0, r0, r3
 800d884:	4770      	bx	lr

0800d886 <__sfputc_r>:
 800d886:	6893      	ldr	r3, [r2, #8]
 800d888:	3b01      	subs	r3, #1
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	b410      	push	{r4}
 800d88e:	6093      	str	r3, [r2, #8]
 800d890:	da08      	bge.n	800d8a4 <__sfputc_r+0x1e>
 800d892:	6994      	ldr	r4, [r2, #24]
 800d894:	42a3      	cmp	r3, r4
 800d896:	db01      	blt.n	800d89c <__sfputc_r+0x16>
 800d898:	290a      	cmp	r1, #10
 800d89a:	d103      	bne.n	800d8a4 <__sfputc_r+0x1e>
 800d89c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8a0:	f000 b932 	b.w	800db08 <__swbuf_r>
 800d8a4:	6813      	ldr	r3, [r2, #0]
 800d8a6:	1c58      	adds	r0, r3, #1
 800d8a8:	6010      	str	r0, [r2, #0]
 800d8aa:	7019      	strb	r1, [r3, #0]
 800d8ac:	4608      	mov	r0, r1
 800d8ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <__sfputs_r>:
 800d8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8b6:	4606      	mov	r6, r0
 800d8b8:	460f      	mov	r7, r1
 800d8ba:	4614      	mov	r4, r2
 800d8bc:	18d5      	adds	r5, r2, r3
 800d8be:	42ac      	cmp	r4, r5
 800d8c0:	d101      	bne.n	800d8c6 <__sfputs_r+0x12>
 800d8c2:	2000      	movs	r0, #0
 800d8c4:	e007      	b.n	800d8d6 <__sfputs_r+0x22>
 800d8c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8ca:	463a      	mov	r2, r7
 800d8cc:	4630      	mov	r0, r6
 800d8ce:	f7ff ffda 	bl	800d886 <__sfputc_r>
 800d8d2:	1c43      	adds	r3, r0, #1
 800d8d4:	d1f3      	bne.n	800d8be <__sfputs_r+0xa>
 800d8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d8d8 <_vfiprintf_r>:
 800d8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8dc:	460d      	mov	r5, r1
 800d8de:	b09d      	sub	sp, #116	@ 0x74
 800d8e0:	4614      	mov	r4, r2
 800d8e2:	4698      	mov	r8, r3
 800d8e4:	4606      	mov	r6, r0
 800d8e6:	b118      	cbz	r0, 800d8f0 <_vfiprintf_r+0x18>
 800d8e8:	6a03      	ldr	r3, [r0, #32]
 800d8ea:	b90b      	cbnz	r3, 800d8f0 <_vfiprintf_r+0x18>
 800d8ec:	f7fe f904 	bl	800baf8 <__sinit>
 800d8f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d8f2:	07d9      	lsls	r1, r3, #31
 800d8f4:	d405      	bmi.n	800d902 <_vfiprintf_r+0x2a>
 800d8f6:	89ab      	ldrh	r3, [r5, #12]
 800d8f8:	059a      	lsls	r2, r3, #22
 800d8fa:	d402      	bmi.n	800d902 <_vfiprintf_r+0x2a>
 800d8fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8fe:	f7fe fa12 	bl	800bd26 <__retarget_lock_acquire_recursive>
 800d902:	89ab      	ldrh	r3, [r5, #12]
 800d904:	071b      	lsls	r3, r3, #28
 800d906:	d501      	bpl.n	800d90c <_vfiprintf_r+0x34>
 800d908:	692b      	ldr	r3, [r5, #16]
 800d90a:	b99b      	cbnz	r3, 800d934 <_vfiprintf_r+0x5c>
 800d90c:	4629      	mov	r1, r5
 800d90e:	4630      	mov	r0, r6
 800d910:	f000 f938 	bl	800db84 <__swsetup_r>
 800d914:	b170      	cbz	r0, 800d934 <_vfiprintf_r+0x5c>
 800d916:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d918:	07dc      	lsls	r4, r3, #31
 800d91a:	d504      	bpl.n	800d926 <_vfiprintf_r+0x4e>
 800d91c:	f04f 30ff 	mov.w	r0, #4294967295
 800d920:	b01d      	add	sp, #116	@ 0x74
 800d922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d926:	89ab      	ldrh	r3, [r5, #12]
 800d928:	0598      	lsls	r0, r3, #22
 800d92a:	d4f7      	bmi.n	800d91c <_vfiprintf_r+0x44>
 800d92c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d92e:	f7fe f9fb 	bl	800bd28 <__retarget_lock_release_recursive>
 800d932:	e7f3      	b.n	800d91c <_vfiprintf_r+0x44>
 800d934:	2300      	movs	r3, #0
 800d936:	9309      	str	r3, [sp, #36]	@ 0x24
 800d938:	2320      	movs	r3, #32
 800d93a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d93e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d942:	2330      	movs	r3, #48	@ 0x30
 800d944:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800daf4 <_vfiprintf_r+0x21c>
 800d948:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d94c:	f04f 0901 	mov.w	r9, #1
 800d950:	4623      	mov	r3, r4
 800d952:	469a      	mov	sl, r3
 800d954:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d958:	b10a      	cbz	r2, 800d95e <_vfiprintf_r+0x86>
 800d95a:	2a25      	cmp	r2, #37	@ 0x25
 800d95c:	d1f9      	bne.n	800d952 <_vfiprintf_r+0x7a>
 800d95e:	ebba 0b04 	subs.w	fp, sl, r4
 800d962:	d00b      	beq.n	800d97c <_vfiprintf_r+0xa4>
 800d964:	465b      	mov	r3, fp
 800d966:	4622      	mov	r2, r4
 800d968:	4629      	mov	r1, r5
 800d96a:	4630      	mov	r0, r6
 800d96c:	f7ff ffa2 	bl	800d8b4 <__sfputs_r>
 800d970:	3001      	adds	r0, #1
 800d972:	f000 80a7 	beq.w	800dac4 <_vfiprintf_r+0x1ec>
 800d976:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d978:	445a      	add	r2, fp
 800d97a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d97c:	f89a 3000 	ldrb.w	r3, [sl]
 800d980:	2b00      	cmp	r3, #0
 800d982:	f000 809f 	beq.w	800dac4 <_vfiprintf_r+0x1ec>
 800d986:	2300      	movs	r3, #0
 800d988:	f04f 32ff 	mov.w	r2, #4294967295
 800d98c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d990:	f10a 0a01 	add.w	sl, sl, #1
 800d994:	9304      	str	r3, [sp, #16]
 800d996:	9307      	str	r3, [sp, #28]
 800d998:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d99c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d99e:	4654      	mov	r4, sl
 800d9a0:	2205      	movs	r2, #5
 800d9a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9a6:	4853      	ldr	r0, [pc, #332]	@ (800daf4 <_vfiprintf_r+0x21c>)
 800d9a8:	f7f2 fc12 	bl	80001d0 <memchr>
 800d9ac:	9a04      	ldr	r2, [sp, #16]
 800d9ae:	b9d8      	cbnz	r0, 800d9e8 <_vfiprintf_r+0x110>
 800d9b0:	06d1      	lsls	r1, r2, #27
 800d9b2:	bf44      	itt	mi
 800d9b4:	2320      	movmi	r3, #32
 800d9b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9ba:	0713      	lsls	r3, r2, #28
 800d9bc:	bf44      	itt	mi
 800d9be:	232b      	movmi	r3, #43	@ 0x2b
 800d9c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9c4:	f89a 3000 	ldrb.w	r3, [sl]
 800d9c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9ca:	d015      	beq.n	800d9f8 <_vfiprintf_r+0x120>
 800d9cc:	9a07      	ldr	r2, [sp, #28]
 800d9ce:	4654      	mov	r4, sl
 800d9d0:	2000      	movs	r0, #0
 800d9d2:	f04f 0c0a 	mov.w	ip, #10
 800d9d6:	4621      	mov	r1, r4
 800d9d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9dc:	3b30      	subs	r3, #48	@ 0x30
 800d9de:	2b09      	cmp	r3, #9
 800d9e0:	d94b      	bls.n	800da7a <_vfiprintf_r+0x1a2>
 800d9e2:	b1b0      	cbz	r0, 800da12 <_vfiprintf_r+0x13a>
 800d9e4:	9207      	str	r2, [sp, #28]
 800d9e6:	e014      	b.n	800da12 <_vfiprintf_r+0x13a>
 800d9e8:	eba0 0308 	sub.w	r3, r0, r8
 800d9ec:	fa09 f303 	lsl.w	r3, r9, r3
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	9304      	str	r3, [sp, #16]
 800d9f4:	46a2      	mov	sl, r4
 800d9f6:	e7d2      	b.n	800d99e <_vfiprintf_r+0xc6>
 800d9f8:	9b03      	ldr	r3, [sp, #12]
 800d9fa:	1d19      	adds	r1, r3, #4
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	9103      	str	r1, [sp, #12]
 800da00:	2b00      	cmp	r3, #0
 800da02:	bfbb      	ittet	lt
 800da04:	425b      	neglt	r3, r3
 800da06:	f042 0202 	orrlt.w	r2, r2, #2
 800da0a:	9307      	strge	r3, [sp, #28]
 800da0c:	9307      	strlt	r3, [sp, #28]
 800da0e:	bfb8      	it	lt
 800da10:	9204      	strlt	r2, [sp, #16]
 800da12:	7823      	ldrb	r3, [r4, #0]
 800da14:	2b2e      	cmp	r3, #46	@ 0x2e
 800da16:	d10a      	bne.n	800da2e <_vfiprintf_r+0x156>
 800da18:	7863      	ldrb	r3, [r4, #1]
 800da1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800da1c:	d132      	bne.n	800da84 <_vfiprintf_r+0x1ac>
 800da1e:	9b03      	ldr	r3, [sp, #12]
 800da20:	1d1a      	adds	r2, r3, #4
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	9203      	str	r2, [sp, #12]
 800da26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800da2a:	3402      	adds	r4, #2
 800da2c:	9305      	str	r3, [sp, #20]
 800da2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800db04 <_vfiprintf_r+0x22c>
 800da32:	7821      	ldrb	r1, [r4, #0]
 800da34:	2203      	movs	r2, #3
 800da36:	4650      	mov	r0, sl
 800da38:	f7f2 fbca 	bl	80001d0 <memchr>
 800da3c:	b138      	cbz	r0, 800da4e <_vfiprintf_r+0x176>
 800da3e:	9b04      	ldr	r3, [sp, #16]
 800da40:	eba0 000a 	sub.w	r0, r0, sl
 800da44:	2240      	movs	r2, #64	@ 0x40
 800da46:	4082      	lsls	r2, r0
 800da48:	4313      	orrs	r3, r2
 800da4a:	3401      	adds	r4, #1
 800da4c:	9304      	str	r3, [sp, #16]
 800da4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da52:	4829      	ldr	r0, [pc, #164]	@ (800daf8 <_vfiprintf_r+0x220>)
 800da54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800da58:	2206      	movs	r2, #6
 800da5a:	f7f2 fbb9 	bl	80001d0 <memchr>
 800da5e:	2800      	cmp	r0, #0
 800da60:	d03f      	beq.n	800dae2 <_vfiprintf_r+0x20a>
 800da62:	4b26      	ldr	r3, [pc, #152]	@ (800dafc <_vfiprintf_r+0x224>)
 800da64:	bb1b      	cbnz	r3, 800daae <_vfiprintf_r+0x1d6>
 800da66:	9b03      	ldr	r3, [sp, #12]
 800da68:	3307      	adds	r3, #7
 800da6a:	f023 0307 	bic.w	r3, r3, #7
 800da6e:	3308      	adds	r3, #8
 800da70:	9303      	str	r3, [sp, #12]
 800da72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da74:	443b      	add	r3, r7
 800da76:	9309      	str	r3, [sp, #36]	@ 0x24
 800da78:	e76a      	b.n	800d950 <_vfiprintf_r+0x78>
 800da7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800da7e:	460c      	mov	r4, r1
 800da80:	2001      	movs	r0, #1
 800da82:	e7a8      	b.n	800d9d6 <_vfiprintf_r+0xfe>
 800da84:	2300      	movs	r3, #0
 800da86:	3401      	adds	r4, #1
 800da88:	9305      	str	r3, [sp, #20]
 800da8a:	4619      	mov	r1, r3
 800da8c:	f04f 0c0a 	mov.w	ip, #10
 800da90:	4620      	mov	r0, r4
 800da92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da96:	3a30      	subs	r2, #48	@ 0x30
 800da98:	2a09      	cmp	r2, #9
 800da9a:	d903      	bls.n	800daa4 <_vfiprintf_r+0x1cc>
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d0c6      	beq.n	800da2e <_vfiprintf_r+0x156>
 800daa0:	9105      	str	r1, [sp, #20]
 800daa2:	e7c4      	b.n	800da2e <_vfiprintf_r+0x156>
 800daa4:	fb0c 2101 	mla	r1, ip, r1, r2
 800daa8:	4604      	mov	r4, r0
 800daaa:	2301      	movs	r3, #1
 800daac:	e7f0      	b.n	800da90 <_vfiprintf_r+0x1b8>
 800daae:	ab03      	add	r3, sp, #12
 800dab0:	9300      	str	r3, [sp, #0]
 800dab2:	462a      	mov	r2, r5
 800dab4:	4b12      	ldr	r3, [pc, #72]	@ (800db00 <_vfiprintf_r+0x228>)
 800dab6:	a904      	add	r1, sp, #16
 800dab8:	4630      	mov	r0, r6
 800daba:	f7fd fbd9 	bl	800b270 <_printf_float>
 800dabe:	4607      	mov	r7, r0
 800dac0:	1c78      	adds	r0, r7, #1
 800dac2:	d1d6      	bne.n	800da72 <_vfiprintf_r+0x19a>
 800dac4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dac6:	07d9      	lsls	r1, r3, #31
 800dac8:	d405      	bmi.n	800dad6 <_vfiprintf_r+0x1fe>
 800daca:	89ab      	ldrh	r3, [r5, #12]
 800dacc:	059a      	lsls	r2, r3, #22
 800dace:	d402      	bmi.n	800dad6 <_vfiprintf_r+0x1fe>
 800dad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dad2:	f7fe f929 	bl	800bd28 <__retarget_lock_release_recursive>
 800dad6:	89ab      	ldrh	r3, [r5, #12]
 800dad8:	065b      	lsls	r3, r3, #25
 800dada:	f53f af1f 	bmi.w	800d91c <_vfiprintf_r+0x44>
 800dade:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dae0:	e71e      	b.n	800d920 <_vfiprintf_r+0x48>
 800dae2:	ab03      	add	r3, sp, #12
 800dae4:	9300      	str	r3, [sp, #0]
 800dae6:	462a      	mov	r2, r5
 800dae8:	4b05      	ldr	r3, [pc, #20]	@ (800db00 <_vfiprintf_r+0x228>)
 800daea:	a904      	add	r1, sp, #16
 800daec:	4630      	mov	r0, r6
 800daee:	f7fd fe57 	bl	800b7a0 <_printf_i>
 800daf2:	e7e4      	b.n	800dabe <_vfiprintf_r+0x1e6>
 800daf4:	0800e988 	.word	0x0800e988
 800daf8:	0800e992 	.word	0x0800e992
 800dafc:	0800b271 	.word	0x0800b271
 800db00:	0800d8b5 	.word	0x0800d8b5
 800db04:	0800e98e 	.word	0x0800e98e

0800db08 <__swbuf_r>:
 800db08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db0a:	460e      	mov	r6, r1
 800db0c:	4614      	mov	r4, r2
 800db0e:	4605      	mov	r5, r0
 800db10:	b118      	cbz	r0, 800db1a <__swbuf_r+0x12>
 800db12:	6a03      	ldr	r3, [r0, #32]
 800db14:	b90b      	cbnz	r3, 800db1a <__swbuf_r+0x12>
 800db16:	f7fd ffef 	bl	800baf8 <__sinit>
 800db1a:	69a3      	ldr	r3, [r4, #24]
 800db1c:	60a3      	str	r3, [r4, #8]
 800db1e:	89a3      	ldrh	r3, [r4, #12]
 800db20:	071a      	lsls	r2, r3, #28
 800db22:	d501      	bpl.n	800db28 <__swbuf_r+0x20>
 800db24:	6923      	ldr	r3, [r4, #16]
 800db26:	b943      	cbnz	r3, 800db3a <__swbuf_r+0x32>
 800db28:	4621      	mov	r1, r4
 800db2a:	4628      	mov	r0, r5
 800db2c:	f000 f82a 	bl	800db84 <__swsetup_r>
 800db30:	b118      	cbz	r0, 800db3a <__swbuf_r+0x32>
 800db32:	f04f 37ff 	mov.w	r7, #4294967295
 800db36:	4638      	mov	r0, r7
 800db38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db3a:	6823      	ldr	r3, [r4, #0]
 800db3c:	6922      	ldr	r2, [r4, #16]
 800db3e:	1a98      	subs	r0, r3, r2
 800db40:	6963      	ldr	r3, [r4, #20]
 800db42:	b2f6      	uxtb	r6, r6
 800db44:	4283      	cmp	r3, r0
 800db46:	4637      	mov	r7, r6
 800db48:	dc05      	bgt.n	800db56 <__swbuf_r+0x4e>
 800db4a:	4621      	mov	r1, r4
 800db4c:	4628      	mov	r0, r5
 800db4e:	f7ff fd99 	bl	800d684 <_fflush_r>
 800db52:	2800      	cmp	r0, #0
 800db54:	d1ed      	bne.n	800db32 <__swbuf_r+0x2a>
 800db56:	68a3      	ldr	r3, [r4, #8]
 800db58:	3b01      	subs	r3, #1
 800db5a:	60a3      	str	r3, [r4, #8]
 800db5c:	6823      	ldr	r3, [r4, #0]
 800db5e:	1c5a      	adds	r2, r3, #1
 800db60:	6022      	str	r2, [r4, #0]
 800db62:	701e      	strb	r6, [r3, #0]
 800db64:	6962      	ldr	r2, [r4, #20]
 800db66:	1c43      	adds	r3, r0, #1
 800db68:	429a      	cmp	r2, r3
 800db6a:	d004      	beq.n	800db76 <__swbuf_r+0x6e>
 800db6c:	89a3      	ldrh	r3, [r4, #12]
 800db6e:	07db      	lsls	r3, r3, #31
 800db70:	d5e1      	bpl.n	800db36 <__swbuf_r+0x2e>
 800db72:	2e0a      	cmp	r6, #10
 800db74:	d1df      	bne.n	800db36 <__swbuf_r+0x2e>
 800db76:	4621      	mov	r1, r4
 800db78:	4628      	mov	r0, r5
 800db7a:	f7ff fd83 	bl	800d684 <_fflush_r>
 800db7e:	2800      	cmp	r0, #0
 800db80:	d0d9      	beq.n	800db36 <__swbuf_r+0x2e>
 800db82:	e7d6      	b.n	800db32 <__swbuf_r+0x2a>

0800db84 <__swsetup_r>:
 800db84:	b538      	push	{r3, r4, r5, lr}
 800db86:	4b29      	ldr	r3, [pc, #164]	@ (800dc2c <__swsetup_r+0xa8>)
 800db88:	4605      	mov	r5, r0
 800db8a:	6818      	ldr	r0, [r3, #0]
 800db8c:	460c      	mov	r4, r1
 800db8e:	b118      	cbz	r0, 800db98 <__swsetup_r+0x14>
 800db90:	6a03      	ldr	r3, [r0, #32]
 800db92:	b90b      	cbnz	r3, 800db98 <__swsetup_r+0x14>
 800db94:	f7fd ffb0 	bl	800baf8 <__sinit>
 800db98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db9c:	0719      	lsls	r1, r3, #28
 800db9e:	d422      	bmi.n	800dbe6 <__swsetup_r+0x62>
 800dba0:	06da      	lsls	r2, r3, #27
 800dba2:	d407      	bmi.n	800dbb4 <__swsetup_r+0x30>
 800dba4:	2209      	movs	r2, #9
 800dba6:	602a      	str	r2, [r5, #0]
 800dba8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbac:	81a3      	strh	r3, [r4, #12]
 800dbae:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb2:	e033      	b.n	800dc1c <__swsetup_r+0x98>
 800dbb4:	0758      	lsls	r0, r3, #29
 800dbb6:	d512      	bpl.n	800dbde <__swsetup_r+0x5a>
 800dbb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dbba:	b141      	cbz	r1, 800dbce <__swsetup_r+0x4a>
 800dbbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dbc0:	4299      	cmp	r1, r3
 800dbc2:	d002      	beq.n	800dbca <__swsetup_r+0x46>
 800dbc4:	4628      	mov	r0, r5
 800dbc6:	f7fe feff 	bl	800c9c8 <_free_r>
 800dbca:	2300      	movs	r3, #0
 800dbcc:	6363      	str	r3, [r4, #52]	@ 0x34
 800dbce:	89a3      	ldrh	r3, [r4, #12]
 800dbd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dbd4:	81a3      	strh	r3, [r4, #12]
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	6063      	str	r3, [r4, #4]
 800dbda:	6923      	ldr	r3, [r4, #16]
 800dbdc:	6023      	str	r3, [r4, #0]
 800dbde:	89a3      	ldrh	r3, [r4, #12]
 800dbe0:	f043 0308 	orr.w	r3, r3, #8
 800dbe4:	81a3      	strh	r3, [r4, #12]
 800dbe6:	6923      	ldr	r3, [r4, #16]
 800dbe8:	b94b      	cbnz	r3, 800dbfe <__swsetup_r+0x7a>
 800dbea:	89a3      	ldrh	r3, [r4, #12]
 800dbec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dbf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dbf4:	d003      	beq.n	800dbfe <__swsetup_r+0x7a>
 800dbf6:	4621      	mov	r1, r4
 800dbf8:	4628      	mov	r0, r5
 800dbfa:	f000 f883 	bl	800dd04 <__smakebuf_r>
 800dbfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc02:	f013 0201 	ands.w	r2, r3, #1
 800dc06:	d00a      	beq.n	800dc1e <__swsetup_r+0x9a>
 800dc08:	2200      	movs	r2, #0
 800dc0a:	60a2      	str	r2, [r4, #8]
 800dc0c:	6962      	ldr	r2, [r4, #20]
 800dc0e:	4252      	negs	r2, r2
 800dc10:	61a2      	str	r2, [r4, #24]
 800dc12:	6922      	ldr	r2, [r4, #16]
 800dc14:	b942      	cbnz	r2, 800dc28 <__swsetup_r+0xa4>
 800dc16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dc1a:	d1c5      	bne.n	800dba8 <__swsetup_r+0x24>
 800dc1c:	bd38      	pop	{r3, r4, r5, pc}
 800dc1e:	0799      	lsls	r1, r3, #30
 800dc20:	bf58      	it	pl
 800dc22:	6962      	ldrpl	r2, [r4, #20]
 800dc24:	60a2      	str	r2, [r4, #8]
 800dc26:	e7f4      	b.n	800dc12 <__swsetup_r+0x8e>
 800dc28:	2000      	movs	r0, #0
 800dc2a:	e7f7      	b.n	800dc1c <__swsetup_r+0x98>
 800dc2c:	2000010c 	.word	0x2000010c

0800dc30 <_raise_r>:
 800dc30:	291f      	cmp	r1, #31
 800dc32:	b538      	push	{r3, r4, r5, lr}
 800dc34:	4605      	mov	r5, r0
 800dc36:	460c      	mov	r4, r1
 800dc38:	d904      	bls.n	800dc44 <_raise_r+0x14>
 800dc3a:	2316      	movs	r3, #22
 800dc3c:	6003      	str	r3, [r0, #0]
 800dc3e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc42:	bd38      	pop	{r3, r4, r5, pc}
 800dc44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dc46:	b112      	cbz	r2, 800dc4e <_raise_r+0x1e>
 800dc48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc4c:	b94b      	cbnz	r3, 800dc62 <_raise_r+0x32>
 800dc4e:	4628      	mov	r0, r5
 800dc50:	f000 f830 	bl	800dcb4 <_getpid_r>
 800dc54:	4622      	mov	r2, r4
 800dc56:	4601      	mov	r1, r0
 800dc58:	4628      	mov	r0, r5
 800dc5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc5e:	f000 b817 	b.w	800dc90 <_kill_r>
 800dc62:	2b01      	cmp	r3, #1
 800dc64:	d00a      	beq.n	800dc7c <_raise_r+0x4c>
 800dc66:	1c59      	adds	r1, r3, #1
 800dc68:	d103      	bne.n	800dc72 <_raise_r+0x42>
 800dc6a:	2316      	movs	r3, #22
 800dc6c:	6003      	str	r3, [r0, #0]
 800dc6e:	2001      	movs	r0, #1
 800dc70:	e7e7      	b.n	800dc42 <_raise_r+0x12>
 800dc72:	2100      	movs	r1, #0
 800dc74:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dc78:	4620      	mov	r0, r4
 800dc7a:	4798      	blx	r3
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	e7e0      	b.n	800dc42 <_raise_r+0x12>

0800dc80 <raise>:
 800dc80:	4b02      	ldr	r3, [pc, #8]	@ (800dc8c <raise+0xc>)
 800dc82:	4601      	mov	r1, r0
 800dc84:	6818      	ldr	r0, [r3, #0]
 800dc86:	f7ff bfd3 	b.w	800dc30 <_raise_r>
 800dc8a:	bf00      	nop
 800dc8c:	2000010c 	.word	0x2000010c

0800dc90 <_kill_r>:
 800dc90:	b538      	push	{r3, r4, r5, lr}
 800dc92:	4d07      	ldr	r5, [pc, #28]	@ (800dcb0 <_kill_r+0x20>)
 800dc94:	2300      	movs	r3, #0
 800dc96:	4604      	mov	r4, r0
 800dc98:	4608      	mov	r0, r1
 800dc9a:	4611      	mov	r1, r2
 800dc9c:	602b      	str	r3, [r5, #0]
 800dc9e:	f7f4 fc1b 	bl	80024d8 <_kill>
 800dca2:	1c43      	adds	r3, r0, #1
 800dca4:	d102      	bne.n	800dcac <_kill_r+0x1c>
 800dca6:	682b      	ldr	r3, [r5, #0]
 800dca8:	b103      	cbz	r3, 800dcac <_kill_r+0x1c>
 800dcaa:	6023      	str	r3, [r4, #0]
 800dcac:	bd38      	pop	{r3, r4, r5, pc}
 800dcae:	bf00      	nop
 800dcb0:	2000234c 	.word	0x2000234c

0800dcb4 <_getpid_r>:
 800dcb4:	f7f4 bc08 	b.w	80024c8 <_getpid>

0800dcb8 <__swhatbuf_r>:
 800dcb8:	b570      	push	{r4, r5, r6, lr}
 800dcba:	460c      	mov	r4, r1
 800dcbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcc0:	2900      	cmp	r1, #0
 800dcc2:	b096      	sub	sp, #88	@ 0x58
 800dcc4:	4615      	mov	r5, r2
 800dcc6:	461e      	mov	r6, r3
 800dcc8:	da0d      	bge.n	800dce6 <__swhatbuf_r+0x2e>
 800dcca:	89a3      	ldrh	r3, [r4, #12]
 800dccc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dcd0:	f04f 0100 	mov.w	r1, #0
 800dcd4:	bf14      	ite	ne
 800dcd6:	2340      	movne	r3, #64	@ 0x40
 800dcd8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dcdc:	2000      	movs	r0, #0
 800dcde:	6031      	str	r1, [r6, #0]
 800dce0:	602b      	str	r3, [r5, #0]
 800dce2:	b016      	add	sp, #88	@ 0x58
 800dce4:	bd70      	pop	{r4, r5, r6, pc}
 800dce6:	466a      	mov	r2, sp
 800dce8:	f000 f848 	bl	800dd7c <_fstat_r>
 800dcec:	2800      	cmp	r0, #0
 800dcee:	dbec      	blt.n	800dcca <__swhatbuf_r+0x12>
 800dcf0:	9901      	ldr	r1, [sp, #4]
 800dcf2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dcf6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dcfa:	4259      	negs	r1, r3
 800dcfc:	4159      	adcs	r1, r3
 800dcfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd02:	e7eb      	b.n	800dcdc <__swhatbuf_r+0x24>

0800dd04 <__smakebuf_r>:
 800dd04:	898b      	ldrh	r3, [r1, #12]
 800dd06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd08:	079d      	lsls	r5, r3, #30
 800dd0a:	4606      	mov	r6, r0
 800dd0c:	460c      	mov	r4, r1
 800dd0e:	d507      	bpl.n	800dd20 <__smakebuf_r+0x1c>
 800dd10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dd14:	6023      	str	r3, [r4, #0]
 800dd16:	6123      	str	r3, [r4, #16]
 800dd18:	2301      	movs	r3, #1
 800dd1a:	6163      	str	r3, [r4, #20]
 800dd1c:	b003      	add	sp, #12
 800dd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd20:	ab01      	add	r3, sp, #4
 800dd22:	466a      	mov	r2, sp
 800dd24:	f7ff ffc8 	bl	800dcb8 <__swhatbuf_r>
 800dd28:	9f00      	ldr	r7, [sp, #0]
 800dd2a:	4605      	mov	r5, r0
 800dd2c:	4639      	mov	r1, r7
 800dd2e:	4630      	mov	r0, r6
 800dd30:	f7fe febe 	bl	800cab0 <_malloc_r>
 800dd34:	b948      	cbnz	r0, 800dd4a <__smakebuf_r+0x46>
 800dd36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd3a:	059a      	lsls	r2, r3, #22
 800dd3c:	d4ee      	bmi.n	800dd1c <__smakebuf_r+0x18>
 800dd3e:	f023 0303 	bic.w	r3, r3, #3
 800dd42:	f043 0302 	orr.w	r3, r3, #2
 800dd46:	81a3      	strh	r3, [r4, #12]
 800dd48:	e7e2      	b.n	800dd10 <__smakebuf_r+0xc>
 800dd4a:	89a3      	ldrh	r3, [r4, #12]
 800dd4c:	6020      	str	r0, [r4, #0]
 800dd4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd52:	81a3      	strh	r3, [r4, #12]
 800dd54:	9b01      	ldr	r3, [sp, #4]
 800dd56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dd5a:	b15b      	cbz	r3, 800dd74 <__smakebuf_r+0x70>
 800dd5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd60:	4630      	mov	r0, r6
 800dd62:	f000 f81d 	bl	800dda0 <_isatty_r>
 800dd66:	b128      	cbz	r0, 800dd74 <__smakebuf_r+0x70>
 800dd68:	89a3      	ldrh	r3, [r4, #12]
 800dd6a:	f023 0303 	bic.w	r3, r3, #3
 800dd6e:	f043 0301 	orr.w	r3, r3, #1
 800dd72:	81a3      	strh	r3, [r4, #12]
 800dd74:	89a3      	ldrh	r3, [r4, #12]
 800dd76:	431d      	orrs	r5, r3
 800dd78:	81a5      	strh	r5, [r4, #12]
 800dd7a:	e7cf      	b.n	800dd1c <__smakebuf_r+0x18>

0800dd7c <_fstat_r>:
 800dd7c:	b538      	push	{r3, r4, r5, lr}
 800dd7e:	4d07      	ldr	r5, [pc, #28]	@ (800dd9c <_fstat_r+0x20>)
 800dd80:	2300      	movs	r3, #0
 800dd82:	4604      	mov	r4, r0
 800dd84:	4608      	mov	r0, r1
 800dd86:	4611      	mov	r1, r2
 800dd88:	602b      	str	r3, [r5, #0]
 800dd8a:	f7f4 fc05 	bl	8002598 <_fstat>
 800dd8e:	1c43      	adds	r3, r0, #1
 800dd90:	d102      	bne.n	800dd98 <_fstat_r+0x1c>
 800dd92:	682b      	ldr	r3, [r5, #0]
 800dd94:	b103      	cbz	r3, 800dd98 <_fstat_r+0x1c>
 800dd96:	6023      	str	r3, [r4, #0]
 800dd98:	bd38      	pop	{r3, r4, r5, pc}
 800dd9a:	bf00      	nop
 800dd9c:	2000234c 	.word	0x2000234c

0800dda0 <_isatty_r>:
 800dda0:	b538      	push	{r3, r4, r5, lr}
 800dda2:	4d06      	ldr	r5, [pc, #24]	@ (800ddbc <_isatty_r+0x1c>)
 800dda4:	2300      	movs	r3, #0
 800dda6:	4604      	mov	r4, r0
 800dda8:	4608      	mov	r0, r1
 800ddaa:	602b      	str	r3, [r5, #0]
 800ddac:	f7f4 fc04 	bl	80025b8 <_isatty>
 800ddb0:	1c43      	adds	r3, r0, #1
 800ddb2:	d102      	bne.n	800ddba <_isatty_r+0x1a>
 800ddb4:	682b      	ldr	r3, [r5, #0]
 800ddb6:	b103      	cbz	r3, 800ddba <_isatty_r+0x1a>
 800ddb8:	6023      	str	r3, [r4, #0]
 800ddba:	bd38      	pop	{r3, r4, r5, pc}
 800ddbc:	2000234c 	.word	0x2000234c

0800ddc0 <log>:
 800ddc0:	b538      	push	{r3, r4, r5, lr}
 800ddc2:	ed2d 8b02 	vpush	{d8}
 800ddc6:	ec55 4b10 	vmov	r4, r5, d0
 800ddca:	f000 f949 	bl	800e060 <__ieee754_log>
 800ddce:	4622      	mov	r2, r4
 800ddd0:	462b      	mov	r3, r5
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	4629      	mov	r1, r5
 800ddd6:	eeb0 8a40 	vmov.f32	s16, s0
 800ddda:	eef0 8a60 	vmov.f32	s17, s1
 800ddde:	f7f2 fea5 	bl	8000b2c <__aeabi_dcmpun>
 800dde2:	b998      	cbnz	r0, 800de0c <log+0x4c>
 800dde4:	2200      	movs	r2, #0
 800dde6:	2300      	movs	r3, #0
 800dde8:	4620      	mov	r0, r4
 800ddea:	4629      	mov	r1, r5
 800ddec:	f7f2 fe94 	bl	8000b18 <__aeabi_dcmpgt>
 800ddf0:	b960      	cbnz	r0, 800de0c <log+0x4c>
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	4629      	mov	r1, r5
 800ddfa:	f7f2 fe65 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddfe:	b160      	cbz	r0, 800de1a <log+0x5a>
 800de00:	f7fd ff66 	bl	800bcd0 <__errno>
 800de04:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800de30 <log+0x70>
 800de08:	2322      	movs	r3, #34	@ 0x22
 800de0a:	6003      	str	r3, [r0, #0]
 800de0c:	eeb0 0a48 	vmov.f32	s0, s16
 800de10:	eef0 0a68 	vmov.f32	s1, s17
 800de14:	ecbd 8b02 	vpop	{d8}
 800de18:	bd38      	pop	{r3, r4, r5, pc}
 800de1a:	f7fd ff59 	bl	800bcd0 <__errno>
 800de1e:	ecbd 8b02 	vpop	{d8}
 800de22:	2321      	movs	r3, #33	@ 0x21
 800de24:	6003      	str	r3, [r0, #0]
 800de26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de2a:	4803      	ldr	r0, [pc, #12]	@ (800de38 <log+0x78>)
 800de2c:	f000 b834 	b.w	800de98 <nan>
 800de30:	00000000 	.word	0x00000000
 800de34:	fff00000 	.word	0xfff00000
 800de38:	0800e9de 	.word	0x0800e9de

0800de3c <sqrt>:
 800de3c:	b538      	push	{r3, r4, r5, lr}
 800de3e:	ed2d 8b02 	vpush	{d8}
 800de42:	ec55 4b10 	vmov	r4, r5, d0
 800de46:	f000 f82f 	bl	800dea8 <__ieee754_sqrt>
 800de4a:	4622      	mov	r2, r4
 800de4c:	462b      	mov	r3, r5
 800de4e:	4620      	mov	r0, r4
 800de50:	4629      	mov	r1, r5
 800de52:	eeb0 8a40 	vmov.f32	s16, s0
 800de56:	eef0 8a60 	vmov.f32	s17, s1
 800de5a:	f7f2 fe67 	bl	8000b2c <__aeabi_dcmpun>
 800de5e:	b990      	cbnz	r0, 800de86 <sqrt+0x4a>
 800de60:	2200      	movs	r2, #0
 800de62:	2300      	movs	r3, #0
 800de64:	4620      	mov	r0, r4
 800de66:	4629      	mov	r1, r5
 800de68:	f7f2 fe38 	bl	8000adc <__aeabi_dcmplt>
 800de6c:	b158      	cbz	r0, 800de86 <sqrt+0x4a>
 800de6e:	f7fd ff2f 	bl	800bcd0 <__errno>
 800de72:	2321      	movs	r3, #33	@ 0x21
 800de74:	6003      	str	r3, [r0, #0]
 800de76:	2200      	movs	r2, #0
 800de78:	2300      	movs	r3, #0
 800de7a:	4610      	mov	r0, r2
 800de7c:	4619      	mov	r1, r3
 800de7e:	f7f2 fce5 	bl	800084c <__aeabi_ddiv>
 800de82:	ec41 0b18 	vmov	d8, r0, r1
 800de86:	eeb0 0a48 	vmov.f32	s0, s16
 800de8a:	eef0 0a68 	vmov.f32	s1, s17
 800de8e:	ecbd 8b02 	vpop	{d8}
 800de92:	bd38      	pop	{r3, r4, r5, pc}
 800de94:	0000      	movs	r0, r0
	...

0800de98 <nan>:
 800de98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dea0 <nan+0x8>
 800de9c:	4770      	bx	lr
 800de9e:	bf00      	nop
 800dea0:	00000000 	.word	0x00000000
 800dea4:	7ff80000 	.word	0x7ff80000

0800dea8 <__ieee754_sqrt>:
 800dea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deac:	4a68      	ldr	r2, [pc, #416]	@ (800e050 <__ieee754_sqrt+0x1a8>)
 800deae:	ec55 4b10 	vmov	r4, r5, d0
 800deb2:	43aa      	bics	r2, r5
 800deb4:	462b      	mov	r3, r5
 800deb6:	4621      	mov	r1, r4
 800deb8:	d110      	bne.n	800dedc <__ieee754_sqrt+0x34>
 800deba:	4622      	mov	r2, r4
 800debc:	4620      	mov	r0, r4
 800debe:	4629      	mov	r1, r5
 800dec0:	f7f2 fb9a 	bl	80005f8 <__aeabi_dmul>
 800dec4:	4602      	mov	r2, r0
 800dec6:	460b      	mov	r3, r1
 800dec8:	4620      	mov	r0, r4
 800deca:	4629      	mov	r1, r5
 800decc:	f7f2 f9de 	bl	800028c <__adddf3>
 800ded0:	4604      	mov	r4, r0
 800ded2:	460d      	mov	r5, r1
 800ded4:	ec45 4b10 	vmov	d0, r4, r5
 800ded8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dedc:	2d00      	cmp	r5, #0
 800dede:	dc0e      	bgt.n	800defe <__ieee754_sqrt+0x56>
 800dee0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800dee4:	4322      	orrs	r2, r4
 800dee6:	d0f5      	beq.n	800ded4 <__ieee754_sqrt+0x2c>
 800dee8:	b19d      	cbz	r5, 800df12 <__ieee754_sqrt+0x6a>
 800deea:	4622      	mov	r2, r4
 800deec:	4620      	mov	r0, r4
 800deee:	4629      	mov	r1, r5
 800def0:	f7f2 f9ca 	bl	8000288 <__aeabi_dsub>
 800def4:	4602      	mov	r2, r0
 800def6:	460b      	mov	r3, r1
 800def8:	f7f2 fca8 	bl	800084c <__aeabi_ddiv>
 800defc:	e7e8      	b.n	800ded0 <__ieee754_sqrt+0x28>
 800defe:	152a      	asrs	r2, r5, #20
 800df00:	d115      	bne.n	800df2e <__ieee754_sqrt+0x86>
 800df02:	2000      	movs	r0, #0
 800df04:	e009      	b.n	800df1a <__ieee754_sqrt+0x72>
 800df06:	0acb      	lsrs	r3, r1, #11
 800df08:	3a15      	subs	r2, #21
 800df0a:	0549      	lsls	r1, r1, #21
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d0fa      	beq.n	800df06 <__ieee754_sqrt+0x5e>
 800df10:	e7f7      	b.n	800df02 <__ieee754_sqrt+0x5a>
 800df12:	462a      	mov	r2, r5
 800df14:	e7fa      	b.n	800df0c <__ieee754_sqrt+0x64>
 800df16:	005b      	lsls	r3, r3, #1
 800df18:	3001      	adds	r0, #1
 800df1a:	02dc      	lsls	r4, r3, #11
 800df1c:	d5fb      	bpl.n	800df16 <__ieee754_sqrt+0x6e>
 800df1e:	1e44      	subs	r4, r0, #1
 800df20:	1b12      	subs	r2, r2, r4
 800df22:	f1c0 0420 	rsb	r4, r0, #32
 800df26:	fa21 f404 	lsr.w	r4, r1, r4
 800df2a:	4323      	orrs	r3, r4
 800df2c:	4081      	lsls	r1, r0
 800df2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df32:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800df36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800df3a:	07d2      	lsls	r2, r2, #31
 800df3c:	bf5c      	itt	pl
 800df3e:	005b      	lslpl	r3, r3, #1
 800df40:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800df44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800df48:	bf58      	it	pl
 800df4a:	0049      	lslpl	r1, r1, #1
 800df4c:	2600      	movs	r6, #0
 800df4e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800df52:	106d      	asrs	r5, r5, #1
 800df54:	0049      	lsls	r1, r1, #1
 800df56:	2016      	movs	r0, #22
 800df58:	4632      	mov	r2, r6
 800df5a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800df5e:	1917      	adds	r7, r2, r4
 800df60:	429f      	cmp	r7, r3
 800df62:	bfde      	ittt	le
 800df64:	193a      	addle	r2, r7, r4
 800df66:	1bdb      	suble	r3, r3, r7
 800df68:	1936      	addle	r6, r6, r4
 800df6a:	0fcf      	lsrs	r7, r1, #31
 800df6c:	3801      	subs	r0, #1
 800df6e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800df72:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800df76:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800df7a:	d1f0      	bne.n	800df5e <__ieee754_sqrt+0xb6>
 800df7c:	4604      	mov	r4, r0
 800df7e:	2720      	movs	r7, #32
 800df80:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800df84:	429a      	cmp	r2, r3
 800df86:	eb00 0e0c 	add.w	lr, r0, ip
 800df8a:	db02      	blt.n	800df92 <__ieee754_sqrt+0xea>
 800df8c:	d113      	bne.n	800dfb6 <__ieee754_sqrt+0x10e>
 800df8e:	458e      	cmp	lr, r1
 800df90:	d811      	bhi.n	800dfb6 <__ieee754_sqrt+0x10e>
 800df92:	f1be 0f00 	cmp.w	lr, #0
 800df96:	eb0e 000c 	add.w	r0, lr, ip
 800df9a:	da42      	bge.n	800e022 <__ieee754_sqrt+0x17a>
 800df9c:	2800      	cmp	r0, #0
 800df9e:	db40      	blt.n	800e022 <__ieee754_sqrt+0x17a>
 800dfa0:	f102 0801 	add.w	r8, r2, #1
 800dfa4:	1a9b      	subs	r3, r3, r2
 800dfa6:	458e      	cmp	lr, r1
 800dfa8:	bf88      	it	hi
 800dfaa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800dfae:	eba1 010e 	sub.w	r1, r1, lr
 800dfb2:	4464      	add	r4, ip
 800dfb4:	4642      	mov	r2, r8
 800dfb6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800dfba:	3f01      	subs	r7, #1
 800dfbc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800dfc0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dfc4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800dfc8:	d1dc      	bne.n	800df84 <__ieee754_sqrt+0xdc>
 800dfca:	4319      	orrs	r1, r3
 800dfcc:	d01b      	beq.n	800e006 <__ieee754_sqrt+0x15e>
 800dfce:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e054 <__ieee754_sqrt+0x1ac>
 800dfd2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e058 <__ieee754_sqrt+0x1b0>
 800dfd6:	e9da 0100 	ldrd	r0, r1, [sl]
 800dfda:	e9db 2300 	ldrd	r2, r3, [fp]
 800dfde:	f7f2 f953 	bl	8000288 <__aeabi_dsub>
 800dfe2:	e9da 8900 	ldrd	r8, r9, [sl]
 800dfe6:	4602      	mov	r2, r0
 800dfe8:	460b      	mov	r3, r1
 800dfea:	4640      	mov	r0, r8
 800dfec:	4649      	mov	r1, r9
 800dfee:	f7f2 fd7f 	bl	8000af0 <__aeabi_dcmple>
 800dff2:	b140      	cbz	r0, 800e006 <__ieee754_sqrt+0x15e>
 800dff4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dff8:	e9da 0100 	ldrd	r0, r1, [sl]
 800dffc:	e9db 2300 	ldrd	r2, r3, [fp]
 800e000:	d111      	bne.n	800e026 <__ieee754_sqrt+0x17e>
 800e002:	3601      	adds	r6, #1
 800e004:	463c      	mov	r4, r7
 800e006:	1072      	asrs	r2, r6, #1
 800e008:	0863      	lsrs	r3, r4, #1
 800e00a:	07f1      	lsls	r1, r6, #31
 800e00c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e010:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e014:	bf48      	it	mi
 800e016:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e01a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e01e:	4618      	mov	r0, r3
 800e020:	e756      	b.n	800ded0 <__ieee754_sqrt+0x28>
 800e022:	4690      	mov	r8, r2
 800e024:	e7be      	b.n	800dfa4 <__ieee754_sqrt+0xfc>
 800e026:	f7f2 f931 	bl	800028c <__adddf3>
 800e02a:	e9da 8900 	ldrd	r8, r9, [sl]
 800e02e:	4602      	mov	r2, r0
 800e030:	460b      	mov	r3, r1
 800e032:	4640      	mov	r0, r8
 800e034:	4649      	mov	r1, r9
 800e036:	f7f2 fd51 	bl	8000adc <__aeabi_dcmplt>
 800e03a:	b120      	cbz	r0, 800e046 <__ieee754_sqrt+0x19e>
 800e03c:	1ca0      	adds	r0, r4, #2
 800e03e:	bf08      	it	eq
 800e040:	3601      	addeq	r6, #1
 800e042:	3402      	adds	r4, #2
 800e044:	e7df      	b.n	800e006 <__ieee754_sqrt+0x15e>
 800e046:	1c63      	adds	r3, r4, #1
 800e048:	f023 0401 	bic.w	r4, r3, #1
 800e04c:	e7db      	b.n	800e006 <__ieee754_sqrt+0x15e>
 800e04e:	bf00      	nop
 800e050:	7ff00000 	.word	0x7ff00000
 800e054:	200002d0 	.word	0x200002d0
 800e058:	200002c8 	.word	0x200002c8
 800e05c:	00000000 	.word	0x00000000

0800e060 <__ieee754_log>:
 800e060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e064:	ec51 0b10 	vmov	r0, r1, d0
 800e068:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800e06c:	b087      	sub	sp, #28
 800e06e:	460d      	mov	r5, r1
 800e070:	da26      	bge.n	800e0c0 <__ieee754_log+0x60>
 800e072:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e076:	4303      	orrs	r3, r0
 800e078:	4602      	mov	r2, r0
 800e07a:	d10a      	bne.n	800e092 <__ieee754_log+0x32>
 800e07c:	49ce      	ldr	r1, [pc, #824]	@ (800e3b8 <__ieee754_log+0x358>)
 800e07e:	2200      	movs	r2, #0
 800e080:	2300      	movs	r3, #0
 800e082:	2000      	movs	r0, #0
 800e084:	f7f2 fbe2 	bl	800084c <__aeabi_ddiv>
 800e088:	ec41 0b10 	vmov	d0, r0, r1
 800e08c:	b007      	add	sp, #28
 800e08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e092:	2900      	cmp	r1, #0
 800e094:	da05      	bge.n	800e0a2 <__ieee754_log+0x42>
 800e096:	460b      	mov	r3, r1
 800e098:	f7f2 f8f6 	bl	8000288 <__aeabi_dsub>
 800e09c:	2200      	movs	r2, #0
 800e09e:	2300      	movs	r3, #0
 800e0a0:	e7f0      	b.n	800e084 <__ieee754_log+0x24>
 800e0a2:	4bc6      	ldr	r3, [pc, #792]	@ (800e3bc <__ieee754_log+0x35c>)
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	f7f2 faa7 	bl	80005f8 <__aeabi_dmul>
 800e0aa:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800e0ae:	460d      	mov	r5, r1
 800e0b0:	4ac3      	ldr	r2, [pc, #780]	@ (800e3c0 <__ieee754_log+0x360>)
 800e0b2:	4295      	cmp	r5, r2
 800e0b4:	dd06      	ble.n	800e0c4 <__ieee754_log+0x64>
 800e0b6:	4602      	mov	r2, r0
 800e0b8:	460b      	mov	r3, r1
 800e0ba:	f7f2 f8e7 	bl	800028c <__adddf3>
 800e0be:	e7e3      	b.n	800e088 <__ieee754_log+0x28>
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	e7f5      	b.n	800e0b0 <__ieee754_log+0x50>
 800e0c4:	152c      	asrs	r4, r5, #20
 800e0c6:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800e0ca:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e0ce:	441c      	add	r4, r3
 800e0d0:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800e0d4:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800e0d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e0dc:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800e0e0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800e0e4:	ea42 0105 	orr.w	r1, r2, r5
 800e0e8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	4bb5      	ldr	r3, [pc, #724]	@ (800e3c4 <__ieee754_log+0x364>)
 800e0f0:	f7f2 f8ca 	bl	8000288 <__aeabi_dsub>
 800e0f4:	1cab      	adds	r3, r5, #2
 800e0f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0fa:	2b02      	cmp	r3, #2
 800e0fc:	4682      	mov	sl, r0
 800e0fe:	468b      	mov	fp, r1
 800e100:	f04f 0200 	mov.w	r2, #0
 800e104:	dc53      	bgt.n	800e1ae <__ieee754_log+0x14e>
 800e106:	2300      	movs	r3, #0
 800e108:	f7f2 fcde 	bl	8000ac8 <__aeabi_dcmpeq>
 800e10c:	b1d0      	cbz	r0, 800e144 <__ieee754_log+0xe4>
 800e10e:	2c00      	cmp	r4, #0
 800e110:	f000 8120 	beq.w	800e354 <__ieee754_log+0x2f4>
 800e114:	4620      	mov	r0, r4
 800e116:	f7f2 fa05 	bl	8000524 <__aeabi_i2d>
 800e11a:	a391      	add	r3, pc, #580	@ (adr r3, 800e360 <__ieee754_log+0x300>)
 800e11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e120:	4606      	mov	r6, r0
 800e122:	460f      	mov	r7, r1
 800e124:	f7f2 fa68 	bl	80005f8 <__aeabi_dmul>
 800e128:	a38f      	add	r3, pc, #572	@ (adr r3, 800e368 <__ieee754_log+0x308>)
 800e12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12e:	4604      	mov	r4, r0
 800e130:	460d      	mov	r5, r1
 800e132:	4630      	mov	r0, r6
 800e134:	4639      	mov	r1, r7
 800e136:	f7f2 fa5f 	bl	80005f8 <__aeabi_dmul>
 800e13a:	4602      	mov	r2, r0
 800e13c:	460b      	mov	r3, r1
 800e13e:	4620      	mov	r0, r4
 800e140:	4629      	mov	r1, r5
 800e142:	e7ba      	b.n	800e0ba <__ieee754_log+0x5a>
 800e144:	a38a      	add	r3, pc, #552	@ (adr r3, 800e370 <__ieee754_log+0x310>)
 800e146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14a:	4650      	mov	r0, sl
 800e14c:	4659      	mov	r1, fp
 800e14e:	f7f2 fa53 	bl	80005f8 <__aeabi_dmul>
 800e152:	4602      	mov	r2, r0
 800e154:	460b      	mov	r3, r1
 800e156:	2000      	movs	r0, #0
 800e158:	499b      	ldr	r1, [pc, #620]	@ (800e3c8 <__ieee754_log+0x368>)
 800e15a:	f7f2 f895 	bl	8000288 <__aeabi_dsub>
 800e15e:	4652      	mov	r2, sl
 800e160:	4606      	mov	r6, r0
 800e162:	460f      	mov	r7, r1
 800e164:	465b      	mov	r3, fp
 800e166:	4650      	mov	r0, sl
 800e168:	4659      	mov	r1, fp
 800e16a:	f7f2 fa45 	bl	80005f8 <__aeabi_dmul>
 800e16e:	4602      	mov	r2, r0
 800e170:	460b      	mov	r3, r1
 800e172:	4630      	mov	r0, r6
 800e174:	4639      	mov	r1, r7
 800e176:	f7f2 fa3f 	bl	80005f8 <__aeabi_dmul>
 800e17a:	4606      	mov	r6, r0
 800e17c:	460f      	mov	r7, r1
 800e17e:	b914      	cbnz	r4, 800e186 <__ieee754_log+0x126>
 800e180:	4632      	mov	r2, r6
 800e182:	463b      	mov	r3, r7
 800e184:	e0a0      	b.n	800e2c8 <__ieee754_log+0x268>
 800e186:	4620      	mov	r0, r4
 800e188:	f7f2 f9cc 	bl	8000524 <__aeabi_i2d>
 800e18c:	a374      	add	r3, pc, #464	@ (adr r3, 800e360 <__ieee754_log+0x300>)
 800e18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e192:	4680      	mov	r8, r0
 800e194:	4689      	mov	r9, r1
 800e196:	f7f2 fa2f 	bl	80005f8 <__aeabi_dmul>
 800e19a:	a373      	add	r3, pc, #460	@ (adr r3, 800e368 <__ieee754_log+0x308>)
 800e19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a0:	4604      	mov	r4, r0
 800e1a2:	460d      	mov	r5, r1
 800e1a4:	4640      	mov	r0, r8
 800e1a6:	4649      	mov	r1, r9
 800e1a8:	f7f2 fa26 	bl	80005f8 <__aeabi_dmul>
 800e1ac:	e0a5      	b.n	800e2fa <__ieee754_log+0x29a>
 800e1ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e1b2:	f7f2 f86b 	bl	800028c <__adddf3>
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	4650      	mov	r0, sl
 800e1bc:	4659      	mov	r1, fp
 800e1be:	f7f2 fb45 	bl	800084c <__aeabi_ddiv>
 800e1c2:	e9cd 0100 	strd	r0, r1, [sp]
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f7f2 f9ac 	bl	8000524 <__aeabi_i2d>
 800e1cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1d4:	4610      	mov	r0, r2
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	f7f2 fa0e 	bl	80005f8 <__aeabi_dmul>
 800e1dc:	4602      	mov	r2, r0
 800e1de:	460b      	mov	r3, r1
 800e1e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e1e4:	f7f2 fa08 	bl	80005f8 <__aeabi_dmul>
 800e1e8:	a363      	add	r3, pc, #396	@ (adr r3, 800e378 <__ieee754_log+0x318>)
 800e1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ee:	4680      	mov	r8, r0
 800e1f0:	4689      	mov	r9, r1
 800e1f2:	f7f2 fa01 	bl	80005f8 <__aeabi_dmul>
 800e1f6:	a362      	add	r3, pc, #392	@ (adr r3, 800e380 <__ieee754_log+0x320>)
 800e1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fc:	f7f2 f846 	bl	800028c <__adddf3>
 800e200:	4642      	mov	r2, r8
 800e202:	464b      	mov	r3, r9
 800e204:	f7f2 f9f8 	bl	80005f8 <__aeabi_dmul>
 800e208:	a35f      	add	r3, pc, #380	@ (adr r3, 800e388 <__ieee754_log+0x328>)
 800e20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e20e:	f7f2 f83d 	bl	800028c <__adddf3>
 800e212:	4642      	mov	r2, r8
 800e214:	464b      	mov	r3, r9
 800e216:	f7f2 f9ef 	bl	80005f8 <__aeabi_dmul>
 800e21a:	a35d      	add	r3, pc, #372	@ (adr r3, 800e390 <__ieee754_log+0x330>)
 800e21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e220:	f7f2 f834 	bl	800028c <__adddf3>
 800e224:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e228:	f7f2 f9e6 	bl	80005f8 <__aeabi_dmul>
 800e22c:	a35a      	add	r3, pc, #360	@ (adr r3, 800e398 <__ieee754_log+0x338>)
 800e22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e232:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e236:	4640      	mov	r0, r8
 800e238:	4649      	mov	r1, r9
 800e23a:	f7f2 f9dd 	bl	80005f8 <__aeabi_dmul>
 800e23e:	a358      	add	r3, pc, #352	@ (adr r3, 800e3a0 <__ieee754_log+0x340>)
 800e240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e244:	f7f2 f822 	bl	800028c <__adddf3>
 800e248:	4642      	mov	r2, r8
 800e24a:	464b      	mov	r3, r9
 800e24c:	f7f2 f9d4 	bl	80005f8 <__aeabi_dmul>
 800e250:	a355      	add	r3, pc, #340	@ (adr r3, 800e3a8 <__ieee754_log+0x348>)
 800e252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e256:	f7f2 f819 	bl	800028c <__adddf3>
 800e25a:	4642      	mov	r2, r8
 800e25c:	464b      	mov	r3, r9
 800e25e:	f7f2 f9cb 	bl	80005f8 <__aeabi_dmul>
 800e262:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800e266:	4602      	mov	r2, r0
 800e268:	460b      	mov	r3, r1
 800e26a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800e26e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e272:	f7f2 f80b 	bl	800028c <__adddf3>
 800e276:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800e27a:	3551      	adds	r5, #81	@ 0x51
 800e27c:	4335      	orrs	r5, r6
 800e27e:	2d00      	cmp	r5, #0
 800e280:	4680      	mov	r8, r0
 800e282:	4689      	mov	r9, r1
 800e284:	dd48      	ble.n	800e318 <__ieee754_log+0x2b8>
 800e286:	4b50      	ldr	r3, [pc, #320]	@ (800e3c8 <__ieee754_log+0x368>)
 800e288:	2200      	movs	r2, #0
 800e28a:	4650      	mov	r0, sl
 800e28c:	4659      	mov	r1, fp
 800e28e:	f7f2 f9b3 	bl	80005f8 <__aeabi_dmul>
 800e292:	4652      	mov	r2, sl
 800e294:	465b      	mov	r3, fp
 800e296:	f7f2 f9af 	bl	80005f8 <__aeabi_dmul>
 800e29a:	4602      	mov	r2, r0
 800e29c:	460b      	mov	r3, r1
 800e29e:	4606      	mov	r6, r0
 800e2a0:	460f      	mov	r7, r1
 800e2a2:	4640      	mov	r0, r8
 800e2a4:	4649      	mov	r1, r9
 800e2a6:	f7f1 fff1 	bl	800028c <__adddf3>
 800e2aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2ae:	f7f2 f9a3 	bl	80005f8 <__aeabi_dmul>
 800e2b2:	4680      	mov	r8, r0
 800e2b4:	4689      	mov	r9, r1
 800e2b6:	b964      	cbnz	r4, 800e2d2 <__ieee754_log+0x272>
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	4630      	mov	r0, r6
 800e2be:	4639      	mov	r1, r7
 800e2c0:	f7f1 ffe2 	bl	8000288 <__aeabi_dsub>
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	4650      	mov	r0, sl
 800e2ca:	4659      	mov	r1, fp
 800e2cc:	f7f1 ffdc 	bl	8000288 <__aeabi_dsub>
 800e2d0:	e6da      	b.n	800e088 <__ieee754_log+0x28>
 800e2d2:	a323      	add	r3, pc, #140	@ (adr r3, 800e360 <__ieee754_log+0x300>)
 800e2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2dc:	f7f2 f98c 	bl	80005f8 <__aeabi_dmul>
 800e2e0:	a321      	add	r3, pc, #132	@ (adr r3, 800e368 <__ieee754_log+0x308>)
 800e2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	460d      	mov	r5, r1
 800e2ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2ee:	f7f2 f983 	bl	80005f8 <__aeabi_dmul>
 800e2f2:	4642      	mov	r2, r8
 800e2f4:	464b      	mov	r3, r9
 800e2f6:	f7f1 ffc9 	bl	800028c <__adddf3>
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	4630      	mov	r0, r6
 800e300:	4639      	mov	r1, r7
 800e302:	f7f1 ffc1 	bl	8000288 <__aeabi_dsub>
 800e306:	4652      	mov	r2, sl
 800e308:	465b      	mov	r3, fp
 800e30a:	f7f1 ffbd 	bl	8000288 <__aeabi_dsub>
 800e30e:	4602      	mov	r2, r0
 800e310:	460b      	mov	r3, r1
 800e312:	4620      	mov	r0, r4
 800e314:	4629      	mov	r1, r5
 800e316:	e7d9      	b.n	800e2cc <__ieee754_log+0x26c>
 800e318:	4602      	mov	r2, r0
 800e31a:	460b      	mov	r3, r1
 800e31c:	4650      	mov	r0, sl
 800e31e:	4659      	mov	r1, fp
 800e320:	f7f1 ffb2 	bl	8000288 <__aeabi_dsub>
 800e324:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e328:	f7f2 f966 	bl	80005f8 <__aeabi_dmul>
 800e32c:	4606      	mov	r6, r0
 800e32e:	460f      	mov	r7, r1
 800e330:	2c00      	cmp	r4, #0
 800e332:	f43f af25 	beq.w	800e180 <__ieee754_log+0x120>
 800e336:	a30a      	add	r3, pc, #40	@ (adr r3, 800e360 <__ieee754_log+0x300>)
 800e338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e340:	f7f2 f95a 	bl	80005f8 <__aeabi_dmul>
 800e344:	a308      	add	r3, pc, #32	@ (adr r3, 800e368 <__ieee754_log+0x308>)
 800e346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e34a:	4604      	mov	r4, r0
 800e34c:	460d      	mov	r5, r1
 800e34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e352:	e729      	b.n	800e1a8 <__ieee754_log+0x148>
 800e354:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800e3b0 <__ieee754_log+0x350>
 800e358:	e698      	b.n	800e08c <__ieee754_log+0x2c>
 800e35a:	bf00      	nop
 800e35c:	f3af 8000 	nop.w
 800e360:	fee00000 	.word	0xfee00000
 800e364:	3fe62e42 	.word	0x3fe62e42
 800e368:	35793c76 	.word	0x35793c76
 800e36c:	3dea39ef 	.word	0x3dea39ef
 800e370:	55555555 	.word	0x55555555
 800e374:	3fd55555 	.word	0x3fd55555
 800e378:	df3e5244 	.word	0xdf3e5244
 800e37c:	3fc2f112 	.word	0x3fc2f112
 800e380:	96cb03de 	.word	0x96cb03de
 800e384:	3fc74664 	.word	0x3fc74664
 800e388:	94229359 	.word	0x94229359
 800e38c:	3fd24924 	.word	0x3fd24924
 800e390:	55555593 	.word	0x55555593
 800e394:	3fe55555 	.word	0x3fe55555
 800e398:	d078c69f 	.word	0xd078c69f
 800e39c:	3fc39a09 	.word	0x3fc39a09
 800e3a0:	1d8e78af 	.word	0x1d8e78af
 800e3a4:	3fcc71c5 	.word	0x3fcc71c5
 800e3a8:	9997fa04 	.word	0x9997fa04
 800e3ac:	3fd99999 	.word	0x3fd99999
	...
 800e3b8:	c3500000 	.word	0xc3500000
 800e3bc:	43500000 	.word	0x43500000
 800e3c0:	7fefffff 	.word	0x7fefffff
 800e3c4:	3ff00000 	.word	0x3ff00000
 800e3c8:	3fe00000 	.word	0x3fe00000

0800e3cc <_init>:
 800e3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ce:	bf00      	nop
 800e3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3d2:	bc08      	pop	{r3}
 800e3d4:	469e      	mov	lr, r3
 800e3d6:	4770      	bx	lr

0800e3d8 <_fini>:
 800e3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3da:	bf00      	nop
 800e3dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3de:	bc08      	pop	{r3}
 800e3e0:	469e      	mov	lr, r3
 800e3e2:	4770      	bx	lr
