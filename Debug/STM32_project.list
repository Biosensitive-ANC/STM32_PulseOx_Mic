
STM32_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010004  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08010198  08010198  00011198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010570  08010570  000122d8  2**0
                  CONTENTS
  4 .ARM          00000008  08010570  08010570  00011570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010578  08010578  000122d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010578  08010578  00011578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801057c  0801057c  0001157c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  08010580  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000122d8  2**0
                  CONTENTS
 10 .bss          00002158  200002d8  200002d8  000122d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002430  20002430  000122d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000122d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e2e1  00000000  00000000  00012308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049a7  00000000  00000000  000305e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001af0  00000000  00000000  00034f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014e0  00000000  00000000  00036a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002846b  00000000  00000000  00037f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024e67  00000000  00000000  000603cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e373a  00000000  00000000  00085232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016896c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008344  00000000  00000000  001689b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00170cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801017c 	.word	0x0801017c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	0801017c 	.word	0x0801017c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <dcRemoval>:

#include "filter.h"


DC_FILTER_T dcRemoval(float x, float prev_w, float alpha)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b08b      	sub	sp, #44	@ 0x2c
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000f82:	edc7 0a04 	vstr	s1, [r7, #16]
 8000f86:	ed87 1a03 	vstr	s2, [r7, #12]
  DC_FILTER_T filtered;
  filtered.w = x + alpha * prev_w;
 8000f8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f96:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9e:	edc7 7a06 	vstr	s15, [r7, #24]
  filtered.result = filtered.w - prev_w;
 8000fa2:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fae:	edc7 7a07 	vstr	s15, [r7, #28]

  return filtered;
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	f107 0218 	add.w	r2, r7, #24
 8000fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fbe:	e883 0003 	stmia.w	r3, {r0, r1}
 8000fc2:	6a3a      	ldr	r2, [r7, #32]
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc6:	ee07 2a10 	vmov	s14, r2
 8000fca:	ee07 3a90 	vmov	s15, r3
}
 8000fce:	eeb0 0a47 	vmov.f32	s0, s14
 8000fd2:	eef0 0a67 	vmov.f32	s1, s15
 8000fd6:	372c      	adds	r7, #44	@ 0x2c
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <lowPassButterworthFilter>:

//Low pass butterworth filter order=1 alpha1=0.1
void lowPassButterworthFilter(float x, BUTTERWORTH_FILTER_T * filterResult)
{
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fea:	6038      	str	r0, [r7, #0]
	filterResult->v[0] = filterResult->v[1];
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	601a      	str	r2, [r3, #0]

    //Fs = 100Hz and Fc = 10Hz
    //filterResult->v[1] = (2.452372752527856026e-1 * x) + (0.50952544949442879485 * filterResult->v[0]);

    //Fs = 100Hz and Fc = 4Hz
    filterResult->v[1] = (1.367287359973195227e-1 * x) + (0.72654252800536101020 * filterResult->v[0]); //Very precise butterworth filter
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff faa7 	bl	8000548 <__aeabi_f2d>
 8000ffa:	a319      	add	r3, pc, #100	@ (adr r3, 8001060 <lowPassButterworthFilter+0x80>)
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	f7ff fafa 	bl	80005f8 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4614      	mov	r4, r2
 800100a:	461d      	mov	r5, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa99 	bl	8000548 <__aeabi_f2d>
 8001016:	a314      	add	r3, pc, #80	@ (adr r3, 8001068 <lowPassButterworthFilter+0x88>)
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	f7ff faec 	bl	80005f8 <__aeabi_dmul>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4620      	mov	r0, r4
 8001026:	4629      	mov	r1, r5
 8001028:	f7ff f930 	bl	800028c <__adddf3>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fdd8 	bl	8000be8 <__aeabi_d2f>
 8001038:	4602      	mov	r2, r0
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	605a      	str	r2, [r3, #4]

    filterResult->result = filterResult->v[0] + filterResult->v[1];
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	ed93 7a00 	vldr	s14, [r3]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	edd3 7a01 	vldr	s15, [r3, #4]
 800104a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bdb0      	pop	{r4, r5, r7, pc}
 800105c:	f3af 8000 	nop.w
 8001060:	c4c41579 	.word	0xc4c41579
 8001064:	3fc18053 	.word	0x3fc18053
 8001068:	1d9df544 	.word	0x1d9df544
 800106c:	3fe73fd6 	.word	0x3fe73fd6

08001070 <meanDiff>:

float meanDiff(float M, MEAN_DIFF_FILTER_T* filterValues)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	ed87 0a01 	vstr	s0, [r7, #4]
 800107a:	6038      	str	r0, [r7, #0]
  float avg = 0;
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]

  filterValues->sum -= filterValues->values[filterValues->index];
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
  filterValues->values[filterValues->index] = M;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	601a      	str	r2, [r3, #0]
  filterValues->sum += filterValues->values[filterValues->index];
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	edd3 7a00 	vldr	s15, [r3]
 80010c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

  filterValues->index++;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010d8:	3301      	adds	r3, #1
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  filterValues->index = filterValues->index % MEAN_FILTER_SIZE;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 80010e8:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <meanDiff+0xe0>)
 80010ea:	fba3 1302 	umull	r1, r3, r3, r2
 80010ee:	08d9      	lsrs	r1, r3, #3
 80010f0:	460b      	mov	r3, r1
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	1a5b      	subs	r3, r3, r1
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(filterValues->count < MEAN_FILTER_SIZE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001106:	2b0e      	cmp	r3, #14
 8001108:	d807      	bhi.n	800111a <meanDiff+0xaa>
    filterValues->count++;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001110:	3301      	adds	r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  avg = filterValues->sum / filterValues->count;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800112e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001132:	edc7 7a03 	vstr	s15, [r7, #12]
  return avg - M;
 8001136:	ed97 7a03 	vldr	s14, [r7, #12]
 800113a:	edd7 7a01 	vldr	s15, [r7, #4]
 800113e:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001142:	eeb0 0a67 	vmov.f32	s0, s15
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	88888889 	.word	0x88888889

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115a:	f001 fc1b 	bl	8002994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115e:	f000 f8bf 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001162:	f000 fab5 	bl	80016d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001166:	f000 fa7d 	bl	8001664 <MX_DMA_Init>
  MX_I2C1_Init();
 800116a:	f000 f983 	bl	8001474 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800116e:	f00b f9ff 	bl	800c570 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001172:	f000 f91f 	bl	80013b4 <MX_ADC1_Init>
  MX_I2S2_Init();
 8001176:	f000 f9ab 	bl	80014d0 <MX_I2S2_Init>
  MX_TIM2_Init();
 800117a:	f000 f9d7 	bl	800152c <MX_TIM2_Init>
  MX_UART4_Init();
 800117e:	f000 fa47 	bl	8001610 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

    MAX30102_Init(); // configure the heart rate sensor
 8001182:	f000 fce5 	bl	8001b50 <MAX30102_Init>

    HAL_TIM_Base_Start(&htim2); // enable microphone sample timer
 8001186:	4845      	ldr	r0, [pc, #276]	@ (800129c <main+0x148>)
 8001188:	f006 fd4e 	bl	8007c28 <HAL_TIM_Base_Start>

    // enable DMA for microphone to record data
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 2 * MIC_OVERSAMPLING); // cast to 32 because STM moment
 800118c:	2208      	movs	r2, #8
 800118e:	4944      	ldr	r1, [pc, #272]	@ (80012a0 <main+0x14c>)
 8001190:	4844      	ldr	r0, [pc, #272]	@ (80012a4 <main+0x150>)
 8001192:	f001 fcd9 	bl	8002b48 <HAL_ADC_Start_DMA>
	HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)audio_tx_buffer, 2);
 8001196:	2202      	movs	r2, #2
 8001198:	4943      	ldr	r1, [pc, #268]	@ (80012a8 <main+0x154>)
 800119a:	4844      	ldr	r0, [pc, #272]	@ (80012ac <main+0x158>)
 800119c:	f004 f866 	bl	800526c <HAL_I2S_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	currentMillis = millis();
 80011a0:	f001 fbb4 	bl	800290c <millis>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b41      	ldr	r3, [pc, #260]	@ (80012b0 <main+0x15c>)
 80011aa:	601a      	str	r2, [r3, #0]

	while (1)
	{
		if( pulseOximiterIntFlag )
 80011ac:	4b41      	ldr	r3, [pc, #260]	@ (80012b4 <main+0x160>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d009      	beq.n	80011ca <main+0x76>
		{
			if (MAX30102_DumpFifo() == HAL_OK) {
 80011b6:	f000 fd43 	bl	8001c40 <MAX30102_DumpFifo>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d104      	bne.n	80011ca <main+0x76>

				pulseOximiterIntFlag = 0;
 80011c0:	4b3c      	ldr	r3, [pc, #240]	@ (80012b4 <main+0x160>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]

				MAX30102_ProcessData();
 80011c6:	f000 fd4d 	bl	8001c64 <MAX30102_ProcessData>
			}
		}

		// Display the data over the built in USB every 5 seconds
		currentMillis = millis();
 80011ca:	f001 fb9f 	bl	800290c <millis>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b37      	ldr	r3, [pc, #220]	@ (80012b0 <main+0x15c>)
 80011d4:	601a      	str	r2, [r3, #0]
		if( currentMillis - lastMillis > SEND_PULSEOX_PERIOD_MS )
 80011d6:	4b36      	ldr	r3, [pc, #216]	@ (80012b0 <main+0x15c>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b37      	ldr	r3, [pc, #220]	@ (80012b8 <main+0x164>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011e4:	dde2      	ble.n	80011ac <main+0x58>
		{
			float bpm = MAX30102_getBPM();
 80011e6:	f001 f855 	bl	8002294 <MAX30102_getBPM>
 80011ea:	ed87 0a03 	vstr	s0, [r7, #12]
			float spo2 = MAX30102_getSPO2();
 80011ee:	f001 f85f 	bl	80022b0 <MAX30102_getSPO2>
 80011f2:	ed87 0a02 	vstr	s0, [r7, #8]

			// Convert BPM to 8-bit integer
			if (bpm > 255.0f) bpm = 255.0f;
 80011f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011fa:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80012bc <main+0x168>
 80011fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001206:	dd01      	ble.n	800120c <main+0xb8>
 8001208:	4b2d      	ldr	r3, [pc, #180]	@ (80012c0 <main+0x16c>)
 800120a:	60fb      	str	r3, [r7, #12]
			txBuffer[0] = (uint8_t)bpm;
 800120c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001214:	edc7 7a01 	vstr	s15, [r7, #4]
 8001218:	793b      	ldrb	r3, [r7, #4]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	4b29      	ldr	r3, [pc, #164]	@ (80012c4 <main+0x170>)
 800121e:	701a      	strb	r2, [r3, #0]

			// Convert SpO2 to 8-bit integer with range mapping (90%-100%)
			if (spo2 < 90.0f) spo2 = 90.0f;
 8001220:	edd7 7a02 	vldr	s15, [r7, #8]
 8001224:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80012c8 <main+0x174>
 8001228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800122c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001230:	d501      	bpl.n	8001236 <main+0xe2>
 8001232:	4b26      	ldr	r3, [pc, #152]	@ (80012cc <main+0x178>)
 8001234:	60bb      	str	r3, [r7, #8]
			if (spo2 > 100.0f) spo2 = 100.0f;
 8001236:	edd7 7a02 	vldr	s15, [r7, #8]
 800123a:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80012d0 <main+0x17c>
 800123e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001246:	dd01      	ble.n	800124c <main+0xf8>
 8001248:	4b22      	ldr	r3, [pc, #136]	@ (80012d4 <main+0x180>)
 800124a:	60bb      	str	r3, [r7, #8]
			txBuffer[1] = (uint8_t)((spo2 - 90.0f) * 255.0f / 10.0f);
 800124c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001250:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80012c8 <main+0x174>
 8001254:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001258:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80012bc <main+0x168>
 800125c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001260:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001264:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800126c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001270:	793b      	ldrb	r3, [r7, #4]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <main+0x170>)
 8001276:	705a      	strb	r2, [r3, #1]

			// Transmit the data over UART
			HAL_UART_Transmit(&huart4, txBuffer, 2, HAL_MAX_DELAY);
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	2202      	movs	r2, #2
 800127e:	4911      	ldr	r1, [pc, #68]	@ (80012c4 <main+0x170>)
 8001280:	4815      	ldr	r0, [pc, #84]	@ (80012d8 <main+0x184>)
 8001282:	f007 fadf 	bl	8008844 <HAL_UART_Transmit>

			HAL_GPIO_TogglePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin);
 8001286:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800128a:	4814      	ldr	r0, [pc, #80]	@ (80012dc <main+0x188>)
 800128c:	f002 fe57 	bl	8003f3e <HAL_GPIO_TogglePin>
			lastMillis = currentMillis;
 8001290:	4b07      	ldr	r3, [pc, #28]	@ (80012b0 <main+0x15c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a08      	ldr	r2, [pc, #32]	@ (80012b8 <main+0x164>)
 8001296:	6013      	str	r3, [r2, #0]
		if( pulseOximiterIntFlag )
 8001298:	e788      	b.n	80011ac <main+0x58>
 800129a:	bf00      	nop
 800129c:	20000498 	.word	0x20000498
 80012a0:	20000534 	.word	0x20000534
 80012a4:	200002f4 	.word	0x200002f4
 80012a8:	20000544 	.word	0x20000544
 80012ac:	200003f0 	.word	0x200003f0
 80012b0:	20000528 	.word	0x20000528
 80012b4:	20000530 	.word	0x20000530
 80012b8:	2000052c 	.word	0x2000052c
 80012bc:	437f0000 	.word	0x437f0000
 80012c0:	437f0000 	.word	0x437f0000
 80012c4:	20000548 	.word	0x20000548
 80012c8:	42b40000 	.word	0x42b40000
 80012cc:	42b40000 	.word	0x42b40000
 80012d0:	42c80000 	.word	0x42c80000
 80012d4:	42c80000 	.word	0x42c80000
 80012d8:	200004e0 	.word	0x200004e0
 80012dc:	40020c00 	.word	0x40020c00

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b094      	sub	sp, #80	@ 0x50
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0320 	add.w	r3, r7, #32
 80012ea:	2230      	movs	r2, #48	@ 0x30
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f00c fd1d 	bl	800dd2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <SystemClock_Config+0xcc>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130c:	4a27      	ldr	r2, [pc, #156]	@ (80013ac <SystemClock_Config+0xcc>)
 800130e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001312:	6413      	str	r3, [r2, #64]	@ 0x40
 8001314:	4b25      	ldr	r3, [pc, #148]	@ (80013ac <SystemClock_Config+0xcc>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <SystemClock_Config+0xd0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a21      	ldr	r2, [pc, #132]	@ (80013b0 <SystemClock_Config+0xd0>)
 800132a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <SystemClock_Config+0xd0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800133c:	2301      	movs	r3, #1
 800133e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001340:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001346:	2302      	movs	r3, #2
 8001348:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800134a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800134e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001350:	2308      	movs	r3, #8
 8001352:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001354:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001358:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800135a:	2302      	movs	r3, #2
 800135c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800135e:	2307      	movs	r3, #7
 8001360:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	4618      	mov	r0, r3
 8001368:	f005 fe34 	bl	8006fd4 <HAL_RCC_OscConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001372:	f000 fb97 	bl	8001aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001376:	230f      	movs	r3, #15
 8001378:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137a:	2302      	movs	r3, #2
 800137c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001382:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001386:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001388:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800138c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	2105      	movs	r1, #5
 8001394:	4618      	mov	r0, r3
 8001396:	f006 f895 	bl	80074c4 <HAL_RCC_ClockConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013a0:	f000 fb80 	bl	8001aa4 <Error_Handler>
  }
}
 80013a4:	bf00      	nop
 80013a6:	3750      	adds	r7, #80	@ 0x50
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40007000 	.word	0x40007000

080013b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ba:	463b      	mov	r3, r7
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013c6:	4b29      	ldr	r3, [pc, #164]	@ (800146c <MX_ADC1_Init+0xb8>)
 80013c8:	4a29      	ldr	r2, [pc, #164]	@ (8001470 <MX_ADC1_Init+0xbc>)
 80013ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013cc:	4b27      	ldr	r3, [pc, #156]	@ (800146c <MX_ADC1_Init+0xb8>)
 80013ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013d4:	4b25      	ldr	r3, [pc, #148]	@ (800146c <MX_ADC1_Init+0xb8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80013da:	4b24      	ldr	r3, [pc, #144]	@ (800146c <MX_ADC1_Init+0xb8>)
 80013dc:	2201      	movs	r2, #1
 80013de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013e0:	4b22      	ldr	r3, [pc, #136]	@ (800146c <MX_ADC1_Init+0xb8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013e6:	4b21      	ldr	r3, [pc, #132]	@ (800146c <MX_ADC1_Init+0xb8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013ee:	4b1f      	ldr	r3, [pc, #124]	@ (800146c <MX_ADC1_Init+0xb8>)
 80013f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80013f6:	4b1d      	ldr	r3, [pc, #116]	@ (800146c <MX_ADC1_Init+0xb8>)
 80013f8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80013fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013fe:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <MX_ADC1_Init+0xb8>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001404:	4b19      	ldr	r3, [pc, #100]	@ (800146c <MX_ADC1_Init+0xb8>)
 8001406:	2202      	movs	r2, #2
 8001408:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800140a:	4b18      	ldr	r3, [pc, #96]	@ (800146c <MX_ADC1_Init+0xb8>)
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001412:	4b16      	ldr	r3, [pc, #88]	@ (800146c <MX_ADC1_Init+0xb8>)
 8001414:	2201      	movs	r2, #1
 8001416:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001418:	4814      	ldr	r0, [pc, #80]	@ (800146c <MX_ADC1_Init+0xb8>)
 800141a:	f001 fb51 	bl	8002ac0 <HAL_ADC_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001424:	f000 fb3e 	bl	8001aa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001428:	2300      	movs	r3, #0
 800142a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800142c:	2301      	movs	r3, #1
 800142e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001430:	2302      	movs	r3, #2
 8001432:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	4619      	mov	r1, r3
 8001438:	480c      	ldr	r0, [pc, #48]	@ (800146c <MX_ADC1_Init+0xb8>)
 800143a:	f001 fca9 	bl	8002d90 <HAL_ADC_ConfigChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001444:	f000 fb2e 	bl	8001aa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001448:	2301      	movs	r3, #1
 800144a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800144c:	2302      	movs	r3, #2
 800144e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001450:	463b      	mov	r3, r7
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	@ (800146c <MX_ADC1_Init+0xb8>)
 8001456:	f001 fc9b 	bl	8002d90 <HAL_ADC_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001460:	f000 fb20 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200002f4 	.word	0x200002f4
 8001470:	40012000 	.word	0x40012000

08001474 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <MX_I2C1_Init+0x50>)
 800147a:	4a13      	ldr	r2, [pc, #76]	@ (80014c8 <MX_I2C1_Init+0x54>)
 800147c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <MX_I2C1_Init+0x50>)
 8001480:	4a12      	ldr	r2, [pc, #72]	@ (80014cc <MX_I2C1_Init+0x58>)
 8001482:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001484:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <MX_I2C1_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <MX_I2C1_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <MX_I2C1_Init+0x50>)
 8001492:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001496:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001498:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <MX_I2C1_Init+0x50>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <MX_I2C1_Init+0x50>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a4:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <MX_I2C1_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <MX_I2C1_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014b0:	4804      	ldr	r0, [pc, #16]	@ (80014c4 <MX_I2C1_Init+0x50>)
 80014b2:	f002 fd77 	bl	8003fa4 <HAL_I2C_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014bc:	f000 faf2 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2000039c 	.word	0x2000039c
 80014c8:	40005400 	.word	0x40005400
 80014cc:	00061a80 	.word	0x00061a80

080014d0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80014d4:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <MX_I2S2_Init+0x54>)
 80014d6:	4a14      	ldr	r2, [pc, #80]	@ (8001528 <MX_I2S2_Init+0x58>)
 80014d8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80014da:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <MX_I2S2_Init+0x54>)
 80014dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014e0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80014e2:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <MX_I2S2_Init+0x54>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80014e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <MX_I2S2_Init+0x54>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80014ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001524 <MX_I2S2_Init+0x54>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80014f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <MX_I2S2_Init+0x54>)
 80014f6:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80014fa:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80014fc:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <MX_I2S2_Init+0x54>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001502:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <MX_I2S2_Init+0x54>)
 8001504:	2200      	movs	r2, #0
 8001506:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <MX_I2S2_Init+0x54>)
 800150a:	2200      	movs	r2, #0
 800150c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800150e:	4805      	ldr	r0, [pc, #20]	@ (8001524 <MX_I2S2_Init+0x54>)
 8001510:	f003 fd6c 	bl	8004fec <HAL_I2S_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800151a:	f000 fac3 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200003f0 	.word	0x200003f0
 8001528:	40003800 	.word	0x40003800

0800152c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08e      	sub	sp, #56	@ 0x38
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001532:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001540:	f107 0320 	add.w	r3, r7, #32
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
 8001558:	615a      	str	r2, [r3, #20]
 800155a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800155c:	4b2b      	ldr	r3, [pc, #172]	@ (800160c <MX_TIM2_Init+0xe0>)
 800155e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001562:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8001564:	4b29      	ldr	r3, [pc, #164]	@ (800160c <MX_TIM2_Init+0xe0>)
 8001566:	2201      	movs	r2, #1
 8001568:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156a:	4b28      	ldr	r3, [pc, #160]	@ (800160c <MX_TIM2_Init+0xe0>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 218;
 8001570:	4b26      	ldr	r3, [pc, #152]	@ (800160c <MX_TIM2_Init+0xe0>)
 8001572:	22da      	movs	r2, #218	@ 0xda
 8001574:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001576:	4b25      	ldr	r3, [pc, #148]	@ (800160c <MX_TIM2_Init+0xe0>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157c:	4b23      	ldr	r3, [pc, #140]	@ (800160c <MX_TIM2_Init+0xe0>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001582:	4822      	ldr	r0, [pc, #136]	@ (800160c <MX_TIM2_Init+0xe0>)
 8001584:	f006 fb00 	bl	8007b88 <HAL_TIM_Base_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800158e:	f000 fa89 	bl	8001aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001592:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001596:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001598:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800159c:	4619      	mov	r1, r3
 800159e:	481b      	ldr	r0, [pc, #108]	@ (800160c <MX_TIM2_Init+0xe0>)
 80015a0:	f006 fcc6 	bl	8007f30 <HAL_TIM_ConfigClockSource>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80015aa:	f000 fa7b 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015ae:	4817      	ldr	r0, [pc, #92]	@ (800160c <MX_TIM2_Init+0xe0>)
 80015b0:	f006 fba2 	bl	8007cf8 <HAL_TIM_PWM_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80015ba:	f000 fa73 	bl	8001aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015be:	2320      	movs	r3, #32
 80015c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015c6:	f107 0320 	add.w	r3, r7, #32
 80015ca:	4619      	mov	r1, r3
 80015cc:	480f      	ldr	r0, [pc, #60]	@ (800160c <MX_TIM2_Init+0xe0>)
 80015ce:	f007 f86d 	bl	80086ac <HAL_TIMEx_MasterConfigSynchronization>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80015d8:	f000 fa64 	bl	8001aa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015dc:	2360      	movs	r3, #96	@ 0x60
 80015de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	2200      	movs	r2, #0
 80015f0:	4619      	mov	r1, r3
 80015f2:	4806      	ldr	r0, [pc, #24]	@ (800160c <MX_TIM2_Init+0xe0>)
 80015f4:	f006 fbda 	bl	8007dac <HAL_TIM_PWM_ConfigChannel>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80015fe:	f000 fa51 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	3738      	adds	r7, #56	@ 0x38
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000498 	.word	0x20000498

08001610 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001614:	4b11      	ldr	r3, [pc, #68]	@ (800165c <MX_UART4_Init+0x4c>)
 8001616:	4a12      	ldr	r2, [pc, #72]	@ (8001660 <MX_UART4_Init+0x50>)
 8001618:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800161a:	4b10      	ldr	r3, [pc, #64]	@ (800165c <MX_UART4_Init+0x4c>)
 800161c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001620:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001622:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <MX_UART4_Init+0x4c>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001628:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <MX_UART4_Init+0x4c>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800162e:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <MX_UART4_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001634:	4b09      	ldr	r3, [pc, #36]	@ (800165c <MX_UART4_Init+0x4c>)
 8001636:	220c      	movs	r2, #12
 8001638:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163a:	4b08      	ldr	r3, [pc, #32]	@ (800165c <MX_UART4_Init+0x4c>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <MX_UART4_Init+0x4c>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001646:	4805      	ldr	r0, [pc, #20]	@ (800165c <MX_UART4_Init+0x4c>)
 8001648:	f007 f8ac 	bl	80087a4 <HAL_UART_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001652:	f000 fa27 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200004e0 	.word	0x200004e0
 8001660:	40004c00 	.word	0x40004c00

08001664 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	4b17      	ldr	r3, [pc, #92]	@ (80016cc <MX_DMA_Init+0x68>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a16      	ldr	r2, [pc, #88]	@ (80016cc <MX_DMA_Init+0x68>)
 8001674:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <MX_DMA_Init+0x68>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <MX_DMA_Init+0x68>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a0f      	ldr	r2, [pc, #60]	@ (80016cc <MX_DMA_Init+0x68>)
 8001690:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <MX_DMA_Init+0x68>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	200f      	movs	r0, #15
 80016a8:	f001 feed 	bl	8003486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80016ac:	200f      	movs	r0, #15
 80016ae:	f001 ff06 	bl	80034be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	2038      	movs	r0, #56	@ 0x38
 80016b8:	f001 fee5 	bl	8003486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016bc:	2038      	movs	r0, #56	@ 0x38
 80016be:	f001 fefe 	bl	80034be <HAL_NVIC_EnableIRQ>

}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08c      	sub	sp, #48	@ 0x30
 80016d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	61bb      	str	r3, [r7, #24]
 80016ea:	4b7f      	ldr	r3, [pc, #508]	@ (80018e8 <MX_GPIO_Init+0x218>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a7e      	ldr	r2, [pc, #504]	@ (80018e8 <MX_GPIO_Init+0x218>)
 80016f0:	f043 0310 	orr.w	r3, r3, #16
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b7c      	ldr	r3, [pc, #496]	@ (80018e8 <MX_GPIO_Init+0x218>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	4b78      	ldr	r3, [pc, #480]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a77      	ldr	r2, [pc, #476]	@ (80018e8 <MX_GPIO_Init+0x218>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b75      	ldr	r3, [pc, #468]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b71      	ldr	r3, [pc, #452]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	4a70      	ldr	r2, [pc, #448]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800172c:	6313      	str	r3, [r2, #48]	@ 0x30
 800172e:	4b6e      	ldr	r3, [pc, #440]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b6a      	ldr	r3, [pc, #424]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a69      	ldr	r2, [pc, #420]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b67      	ldr	r3, [pc, #412]	@ (80018e8 <MX_GPIO_Init+0x218>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b63      	ldr	r3, [pc, #396]	@ (80018e8 <MX_GPIO_Init+0x218>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a62      	ldr	r2, [pc, #392]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b60      	ldr	r3, [pc, #384]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b5c      	ldr	r3, [pc, #368]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	4a5b      	ldr	r2, [pc, #364]	@ (80018e8 <MX_GPIO_Init+0x218>)
 800177c:	f043 0308 	orr.w	r3, r3, #8
 8001780:	6313      	str	r3, [r2, #48]	@ 0x30
 8001782:	4b59      	ldr	r3, [pc, #356]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	2108      	movs	r1, #8
 8001792:	4856      	ldr	r0, [pc, #344]	@ (80018ec <MX_GPIO_Init+0x21c>)
 8001794:	f002 fbba 	bl	8003f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001798:	2201      	movs	r2, #1
 800179a:	2101      	movs	r1, #1
 800179c:	4854      	ldr	r0, [pc, #336]	@ (80018f0 <MX_GPIO_Init+0x220>)
 800179e:	f002 fbb5 	bl	8003f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_debug_GPIO_Port, ADC_debug_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2102      	movs	r1, #2
 80017a6:	4852      	ldr	r0, [pc, #328]	@ (80018f0 <MX_GPIO_Init+0x220>)
 80017a8:	f002 fbb0 	bl	8003f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80017ac:	2200      	movs	r2, #0
 80017ae:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80017b2:	4850      	ldr	r0, [pc, #320]	@ (80018f4 <MX_GPIO_Init+0x224>)
 80017b4:	f002 fbaa 	bl	8003f0c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80017b8:	2308      	movs	r3, #8
 80017ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017bc:	2301      	movs	r3, #1
 80017be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80017c8:	f107 031c 	add.w	r3, r7, #28
 80017cc:	4619      	mov	r1, r3
 80017ce:	4847      	ldr	r0, [pc, #284]	@ (80018ec <MX_GPIO_Init+0x21c>)
 80017d0:	f002 fa00 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80017d4:	2301      	movs	r3, #1
 80017d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 031c 	add.w	r3, r7, #28
 80017e8:	4619      	mov	r1, r3
 80017ea:	4841      	ldr	r0, [pc, #260]	@ (80018f0 <MX_GPIO_Init+0x220>)
 80017ec:	f002 f9f2 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_debug_Pin */
  GPIO_InitStruct.Pin = ADC_debug_Pin;
 80017f0:	2302      	movs	r3, #2
 80017f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ADC_debug_GPIO_Port, &GPIO_InitStruct);
 8001800:	f107 031c 	add.w	r3, r7, #28
 8001804:	4619      	mov	r1, r3
 8001806:	483a      	ldr	r0, [pc, #232]	@ (80018f0 <MX_GPIO_Init+0x220>)
 8001808:	f002 f9e4 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800180c:	2310      	movs	r3, #16
 800180e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800181c:	2306      	movs	r3, #6
 800181e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	4619      	mov	r1, r3
 8001826:	4834      	ldr	r0, [pc, #208]	@ (80018f8 <MX_GPIO_Init+0x228>)
 8001828:	f002 f9d4 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800182c:	23e0      	movs	r3, #224	@ 0xe0
 800182e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800183c:	2305      	movs	r3, #5
 800183e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	4619      	mov	r1, r3
 8001846:	482c      	ldr	r0, [pc, #176]	@ (80018f8 <MX_GPIO_Init+0x228>)
 8001848:	f002 f9c4 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pulse_Oximeter_Int_Pin */
  GPIO_InitStruct.Pin = Pulse_Oximeter_Int_Pin;
 800184c:	2301      	movs	r3, #1
 800184e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001850:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001856:	2301      	movs	r3, #1
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Pulse_Oximeter_Int_GPIO_Port, &GPIO_InitStruct);
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	4619      	mov	r1, r3
 8001860:	4826      	ldr	r0, [pc, #152]	@ (80018fc <MX_GPIO_Init+0x22c>)
 8001862:	f002 f9b7 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001866:	2304      	movs	r3, #4
 8001868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	4619      	mov	r1, r3
 8001878:	4820      	ldr	r0, [pc, #128]	@ (80018fc <MX_GPIO_Init+0x22c>)
 800187a:	f002 f9ab 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800187e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001882:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	4619      	mov	r1, r3
 8001896:	4817      	ldr	r0, [pc, #92]	@ (80018f4 <MX_GPIO_Init+0x224>)
 8001898:	f002 f99c 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800189c:	2320      	movs	r3, #32
 800189e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	4619      	mov	r1, r3
 80018ae:	4811      	ldr	r0, [pc, #68]	@ (80018f4 <MX_GPIO_Init+0x224>)
 80018b0:	f002 f990 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80018b4:	2302      	movs	r3, #2
 80018b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018b8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80018bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	4619      	mov	r1, r3
 80018c8:	4808      	ldr	r0, [pc, #32]	@ (80018ec <MX_GPIO_Init+0x21c>)
 80018ca:	f002 f983 	bl	8003bd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	2006      	movs	r0, #6
 80018d4:	f001 fdd7 	bl	8003486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018d8:	2006      	movs	r0, #6
 80018da:	f001 fdf0 	bl	80034be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018de:	bf00      	nop
 80018e0:	3730      	adds	r7, #48	@ 0x30
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40020800 	.word	0x40020800
 80018f4:	40020c00 	.word	0x40020c00
 80018f8:	40020000 	.word	0x40020000
 80018fc:	40020400 	.word	0x40020400

08001900 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Pulse_Oximeter_Int_Pin)
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d102      	bne.n	8001916 <HAL_GPIO_EXTI_Callback+0x16>
	{
		pulseOximiterIntFlag = 1;
 8001910:	4b04      	ldr	r3, [pc, #16]	@ (8001924 <HAL_GPIO_EXTI_Callback+0x24>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
	}
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000530 	.word	0x20000530

08001928 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	static float adc_dc_left = 0.0; // left microphone is PA0 i think
	static float adc_dc_right = 0.0;
	static uint16_t adc_sum_left = 0;
	static uint16_t adc_sum_right = 0;

	if (hadc->Instance == ADC1) {
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a54      	ldr	r2, [pc, #336]	@ (8001a88 <HAL_ADC_ConvCpltCallback+0x160>)
 8001936:	4293      	cmp	r3, r2
 8001938:	f040 8098 	bne.w	8001a6c <HAL_ADC_ConvCpltCallback+0x144>
		adc_sum_left = 0;
 800193c:	4b53      	ldr	r3, [pc, #332]	@ (8001a8c <HAL_ADC_ConvCpltCallback+0x164>)
 800193e:	2200      	movs	r2, #0
 8001940:	801a      	strh	r2, [r3, #0]
		adc_sum_right = 0;
 8001942:	4b53      	ldr	r3, [pc, #332]	@ (8001a90 <HAL_ADC_ConvCpltCallback+0x168>)
 8001944:	2200      	movs	r2, #0
 8001946:	801a      	strh	r2, [r3, #0]

		for (int i = 0; i < MIC_OVERSAMPLING; i++) {
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e019      	b.n	8001982 <HAL_ADC_ConvCpltCallback+0x5a>
			adc_sum_left += adc_buffer[2*i];
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4a50      	ldr	r2, [pc, #320]	@ (8001a94 <HAL_ADC_ConvCpltCallback+0x16c>)
 8001954:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001958:	4b4c      	ldr	r3, [pc, #304]	@ (8001a8c <HAL_ADC_ConvCpltCallback+0x164>)
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	4413      	add	r3, r2
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b4a      	ldr	r3, [pc, #296]	@ (8001a8c <HAL_ADC_ConvCpltCallback+0x164>)
 8001962:	801a      	strh	r2, [r3, #0]
			adc_sum_right += adc_buffer[2*i + 1];
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	3301      	adds	r3, #1
 800196a:	4a4a      	ldr	r2, [pc, #296]	@ (8001a94 <HAL_ADC_ConvCpltCallback+0x16c>)
 800196c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001970:	4b47      	ldr	r3, [pc, #284]	@ (8001a90 <HAL_ADC_ConvCpltCallback+0x168>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	4413      	add	r3, r2
 8001976:	b29a      	uxth	r2, r3
 8001978:	4b45      	ldr	r3, [pc, #276]	@ (8001a90 <HAL_ADC_ConvCpltCallback+0x168>)
 800197a:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < MIC_OVERSAMPLING; i++) {
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3301      	adds	r3, #1
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b03      	cmp	r3, #3
 8001986:	dde2      	ble.n	800194e <HAL_ADC_ConvCpltCallback+0x26>
		}

		adc_dc_left 	= ADC_DC_FILT_COEFF * adc_dc_left 	+ (1-ADC_DC_FILT_COEFF) * adc_sum_left; // calculate dc offset
 8001988:	4b43      	ldr	r3, [pc, #268]	@ (8001a98 <HAL_ADC_ConvCpltCallback+0x170>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fddb 	bl	8000548 <__aeabi_f2d>
 8001992:	a339      	add	r3, pc, #228	@ (adr r3, 8001a78 <HAL_ADC_ConvCpltCallback+0x150>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7fe fe2e 	bl	80005f8 <__aeabi_dmul>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4614      	mov	r4, r2
 80019a2:	461d      	mov	r5, r3
 80019a4:	4b39      	ldr	r3, [pc, #228]	@ (8001a8c <HAL_ADC_ConvCpltCallback+0x164>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fdbb 	bl	8000524 <__aeabi_i2d>
 80019ae:	a334      	add	r3, pc, #208	@ (adr r3, 8001a80 <HAL_ADC_ConvCpltCallback+0x158>)
 80019b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b4:	f7fe fe20 	bl	80005f8 <__aeabi_dmul>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4620      	mov	r0, r4
 80019be:	4629      	mov	r1, r5
 80019c0:	f7fe fc64 	bl	800028c <__adddf3>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	f7ff f90c 	bl	8000be8 <__aeabi_d2f>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4a31      	ldr	r2, [pc, #196]	@ (8001a98 <HAL_ADC_ConvCpltCallback+0x170>)
 80019d4:	6013      	str	r3, [r2, #0]
		adc_dc_right 	= ADC_DC_FILT_COEFF * adc_dc_right 	+ (1-ADC_DC_FILT_COEFF) * adc_sum_right; // calculate dc offset
 80019d6:	4b31      	ldr	r3, [pc, #196]	@ (8001a9c <HAL_ADC_ConvCpltCallback+0x174>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fdb4 	bl	8000548 <__aeabi_f2d>
 80019e0:	a325      	add	r3, pc, #148	@ (adr r3, 8001a78 <HAL_ADC_ConvCpltCallback+0x150>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	f7fe fe07 	bl	80005f8 <__aeabi_dmul>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4614      	mov	r4, r2
 80019f0:	461d      	mov	r5, r3
 80019f2:	4b27      	ldr	r3, [pc, #156]	@ (8001a90 <HAL_ADC_ConvCpltCallback+0x168>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fd94 	bl	8000524 <__aeabi_i2d>
 80019fc:	a320      	add	r3, pc, #128	@ (adr r3, 8001a80 <HAL_ADC_ConvCpltCallback+0x158>)
 80019fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a02:	f7fe fdf9 	bl	80005f8 <__aeabi_dmul>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	f7fe fc3d 	bl	800028c <__adddf3>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f7ff f8e5 	bl	8000be8 <__aeabi_d2f>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4a1e      	ldr	r2, [pc, #120]	@ (8001a9c <HAL_ADC_ConvCpltCallback+0x174>)
 8001a22:	6013      	str	r3, [r2, #0]

		audio_tx_buffer[0] = (int16_t)(adc_dc_left - adc_sum_left); // remove dc offset from sum and invert
 8001a24:	4b1c      	ldr	r3, [pc, #112]	@ (8001a98 <HAL_ADC_ConvCpltCallback+0x170>)
 8001a26:	ed93 7a00 	vldr	s14, [r3]
 8001a2a:	4b18      	ldr	r3, [pc, #96]	@ (8001a8c <HAL_ADC_ConvCpltCallback+0x164>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a3e:	ee17 3a90 	vmov	r3, s15
 8001a42:	b21a      	sxth	r2, r3
 8001a44:	4b16      	ldr	r3, [pc, #88]	@ (8001aa0 <HAL_ADC_ConvCpltCallback+0x178>)
 8001a46:	801a      	strh	r2, [r3, #0]
		audio_tx_buffer[1] = (int16_t)(adc_dc_right - adc_sum_right); // remove dc offset from sum and invert
 8001a48:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <HAL_ADC_ConvCpltCallback+0x174>)
 8001a4a:	ed93 7a00 	vldr	s14, [r3]
 8001a4e:	4b10      	ldr	r3, [pc, #64]	@ (8001a90 <HAL_ADC_ConvCpltCallback+0x168>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	ee07 3a90 	vmov	s15, r3
 8001a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a62:	ee17 3a90 	vmov	r3, s15
 8001a66:	b21a      	sxth	r2, r3
 8001a68:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa0 <HAL_ADC_ConvCpltCallback+0x178>)
 8001a6a:	805a      	strh	r2, [r3, #2]
	}
}
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bdb0      	pop	{r4, r5, r7, pc}
 8001a74:	f3af 8000 	nop.w
 8001a78:	d916872b 	.word	0xd916872b
 8001a7c:	3feff7ce 	.word	0x3feff7ce
 8001a80:	d2f1aa00 	.word	0xd2f1aa00
 8001a84:	3f50624d 	.word	0x3f50624d
 8001a88:	40012000 	.word	0x40012000
 8001a8c:	2000054a 	.word	0x2000054a
 8001a90:	2000054c 	.word	0x2000054c
 8001a94:	20000534 	.word	0x20000534
 8001a98:	20000550 	.word	0x20000550
 8001a9c:	20000554 	.word	0x20000554
 8001aa0:	20000544 	.word	0x20000544

08001aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa8:	b672      	cpsid	i
}
 8001aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <Error_Handler+0x8>

08001ab0 <MAX30102_WriteRegister>:
uint8_t max30102_sensor_data[6 * MAX30102_SAMPLES_PER_BURST] = {0};


/* USER CODE BEGIN 0 */
// I2C write to register
HAL_StatusTypeDef MAX30102_WriteRegister(uint8_t reg, uint8_t value) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af04      	add	r7, sp, #16
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	460a      	mov	r2, r1
 8001aba:	71fb      	strb	r3, [r7, #7]
 8001abc:	4613      	mov	r3, r2
 8001abe:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(&hi2c1, (MAX30102_ADDRESS << 1), reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 100);
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	2364      	movs	r3, #100	@ 0x64
 8001ac6:	9302      	str	r3, [sp, #8]
 8001ac8:	2301      	movs	r3, #1
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	1dbb      	adds	r3, r7, #6
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	21ae      	movs	r1, #174	@ 0xae
 8001ad4:	4803      	ldr	r0, [pc, #12]	@ (8001ae4 <MAX30102_WriteRegister+0x34>)
 8001ad6:	f002 fba9 	bl	800422c <HAL_I2C_Mem_Write>
 8001ada:	4603      	mov	r3, r0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	2000039c 	.word	0x2000039c

08001ae8 <MAX30102_ReadRegister>:

// I2C read from register
HAL_StatusTypeDef MAX30102_ReadRegister(uint8_t reg, uint8_t *value) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af04      	add	r7, sp, #16
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Read(&hi2c1, (MAX30102_ADDRESS << 1), reg, I2C_MEMADD_SIZE_8BIT, value, 1, 100);
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	2364      	movs	r3, #100	@ 0x64
 8001afa:	9302      	str	r3, [sp, #8]
 8001afc:	2301      	movs	r3, #1
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2301      	movs	r3, #1
 8001b06:	21ae      	movs	r1, #174	@ 0xae
 8001b08:	4803      	ldr	r0, [pc, #12]	@ (8001b18 <MAX30102_ReadRegister+0x30>)
 8001b0a:	f002 fc89 	bl	8004420 <HAL_I2C_Mem_Read>
 8001b0e:	4603      	mov	r3, r0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	2000039c 	.word	0x2000039c

08001b1c <MAX30102_ReadFIFO>:

// Read FIFO data
uint8_t MAX30102_ReadFIFO(uint8_t *buffer, uint8_t length) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af04      	add	r7, sp, #16
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Read(&hi2c1, (MAX30102_ADDRESS << 1), REG_FIFO_DATA, I2C_MEMADD_SIZE_8BIT, buffer, length, 100);
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	2264      	movs	r2, #100	@ 0x64
 8001b2e:	9202      	str	r2, [sp, #8]
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2301      	movs	r3, #1
 8001b38:	2207      	movs	r2, #7
 8001b3a:	21ae      	movs	r1, #174	@ 0xae
 8001b3c:	4803      	ldr	r0, [pc, #12]	@ (8001b4c <MAX30102_ReadFIFO+0x30>)
 8001b3e:	f002 fc6f 	bl	8004420 <HAL_I2C_Mem_Read>
 8001b42:	4603      	mov	r3, r0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	2000039c 	.word	0x2000039c

08001b50 <MAX30102_Init>:

// MAX30102 initialization
uint8_t MAX30102_Init(void) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
    uint8_t part_id = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	71bb      	strb	r3, [r7, #6]

    // Read MAX30102 ID to verify device presence
    if (MAX30102_ReadRegister(REG_PART_ID, &part_id) != HAL_OK || part_id != 0x15) {
 8001b5a:	1dbb      	adds	r3, r7, #6
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	20ff      	movs	r0, #255	@ 0xff
 8001b60:	f7ff ffc2 	bl	8001ae8 <MAX30102_ReadRegister>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d102      	bne.n	8001b70 <MAX30102_Init+0x20>
 8001b6a:	79bb      	ldrb	r3, [r7, #6]
 8001b6c:	2b15      	cmp	r3, #21
 8001b6e:	d001      	beq.n	8001b74 <MAX30102_Init+0x24>
        return 0;  // Device not found
 8001b70:	2300      	movs	r3, #0
 8001b72:	e02b      	b.n	8001bcc <MAX30102_Init+0x7c>
    }

    // Reset MAX30102
    MAX30102_WriteRegister(REG_MODE_CONFIG, (1 << 6));  // Reset MAX30102  (bit 6)
 8001b74:	2140      	movs	r1, #64	@ 0x40
 8001b76:	2009      	movs	r0, #9
 8001b78:	f7ff ff9a 	bl	8001ab0 <MAX30102_WriteRegister>
    HAL_Delay(10);
 8001b7c:	200a      	movs	r0, #10
 8001b7e:	f000 ff7b 	bl	8002a78 <HAL_Delay>

    // Configure SPO2 mode
    MAX30102_WriteRegister(REG_MODE_CONFIG, 0b011 << BIT_MODE);  // Use heart rate mode only (or 0x07 to enable SPO2)
 8001b82:	2103      	movs	r1, #3
 8001b84:	2009      	movs	r0, #9
 8001b86:	f7ff ff93 	bl	8001ab0 <MAX30102_WriteRegister>
    uint8_t spo2_bits = (0b01 << BIT_SPO2_ADC_RGE) |  (0b000 << BIT_SPO2_SR) | (0b01 << BIT_LED_PW); //pw of 11 browns out supply
 8001b8a:	2321      	movs	r3, #33	@ 0x21
 8001b8c:	71fb      	strb	r3, [r7, #7]
    MAX30102_WriteRegister(REG_SPO2_CONFIG, spo2_bits);  // Set ADC range and sampling rate
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	4619      	mov	r1, r3
 8001b92:	200a      	movs	r0, #10
 8001b94:	f7ff ff8c 	bl	8001ab0 <MAX30102_WriteRegister>

    // Set LED brightness (0x24 represents medium brightness, adjustable)
    redLEDCurrent = 50;
 8001b98:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd4 <MAX30102_Init+0x84>)
 8001b9a:	2232      	movs	r2, #50	@ 0x32
 8001b9c:	701a      	strb	r2, [r3, #0]
    MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd4 <MAX30102_Init+0x84>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f000 f825 	bl	8001bf4 <MAX30102_setLedCurrent>
    MAX30102_setLedCurrent(IR_LED, redLEDCurrent);
 8001baa:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <MAX30102_Init+0x84>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	2002      	movs	r0, #2
 8001bb2:	f000 f81f 	bl	8001bf4 <MAX30102_setLedCurrent>

    // interrupts
    MAX30102_WriteRegister(REG_FIFO_CONFIG, (0b000 << BIT_SMP_AVG) | ((32 - MAX30102_SAMPLES_PER_BURST) << BIT_FIFO_A_FULL_VAL)); // max value is 15 min is 0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	2008      	movs	r0, #8
 8001bba:	f7ff ff79 	bl	8001ab0 <MAX30102_WriteRegister>
    MAX30102_WriteRegister(REG_INT1_EN, 1 << BIT_EN_A_FULL_INT);
 8001bbe:	2180      	movs	r1, #128	@ 0x80
 8001bc0:	2002      	movs	r0, #2
 8001bc2:	f7ff ff75 	bl	8001ab0 <MAX30102_WriteRegister>

    MAX30102_ClearInterrupt();
 8001bc6:	f000 f807 	bl	8001bd8 <MAX30102_ClearInterrupt>

    return 1;  // Initialization successful
 8001bca:	2301      	movs	r3, #1
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000624 	.word	0x20000624

08001bd8 <MAX30102_ClearInterrupt>:

void MAX30102_ClearInterrupt(void) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
	uint8_t reset = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	71fb      	strb	r3, [r7, #7]
	MAX30102_ReadRegister(REG_STATUS, &reset); // clears initial interrupt
 8001be2:	1dfb      	adds	r3, r7, #7
 8001be4:	4619      	mov	r1, r3
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff ff7e 	bl	8001ae8 <MAX30102_ReadRegister>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <MAX30102_setLedCurrent>:
	return 1;
}


uint8_t MAX30102_setLedCurrent(uint8_t led, uint8_t currentLevel)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	71fb      	strb	r3, [r7, #7]
 8001c00:	4613      	mov	r3, r2
 8001c02:	71bb      	strb	r3, [r7, #6]
	uint8_t ledRegister = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	73fb      	strb	r3, [r7, #15]

	switch(led){
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d002      	beq.n	8001c14 <MAX30102_setLedCurrent+0x20>
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d003      	beq.n	8001c1a <MAX30102_setLedCurrent+0x26>
 8001c12:	e005      	b.n	8001c20 <MAX30102_setLedCurrent+0x2c>
	case RED_LED: 	ledRegister = REG_LED1_PA; break;
 8001c14:	230c      	movs	r3, #12
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e002      	b.n	8001c20 <MAX30102_setLedCurrent+0x2c>
	case IR_LED:	ledRegister = REG_LED2_PA; break;
 8001c1a:	230d      	movs	r3, #13
 8001c1c:	73fb      	strb	r3, [r7, #15]
 8001c1e:	bf00      	nop
	}

	if( MAX30102_WriteRegister(ledRegister, currentLevel) != HAL_OK){
 8001c20:	79ba      	ldrb	r2, [r7, #6]
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	4611      	mov	r1, r2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ff42 	bl	8001ab0 <MAX30102_WriteRegister>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MAX30102_setLedCurrent+0x42>
		return 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <MAX30102_setLedCurrent+0x44>
	}
	return 1;
 8001c36:	2301      	movs	r3, #1
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <MAX30102_DumpFifo>:

uint8_t MAX30102_DumpFifo() {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
	uint8_t retval = MAX30102_ReadFIFO(max30102_sensor_data, 6 * MAX30102_SAMPLES_PER_BURST);
 8001c46:	21c0      	movs	r1, #192	@ 0xc0
 8001c48:	4805      	ldr	r0, [pc, #20]	@ (8001c60 <MAX30102_DumpFifo+0x20>)
 8001c4a:	f7ff ff67 	bl	8001b1c <MAX30102_ReadFIFO>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
	MAX30102_ClearInterrupt();
 8001c52:	f7ff ffc1 	bl	8001bd8 <MAX30102_ClearInterrupt>
	return retval;
 8001c56:	79fb      	ldrb	r3, [r7, #7]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000630 	.word	0x20000630

08001c64 <MAX30102_ProcessData>:

void MAX30102_ProcessData() {
 8001c64:	b5b0      	push	{r4, r5, r7, lr}
 8001c66:	b08e      	sub	sp, #56	@ 0x38
 8001c68:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < MAX30102_SAMPLES_PER_BURST; i++) {
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c6e:	e048      	b.n	8001d02 <MAX30102_ProcessData+0x9e>
		// heart rate mode only needs red, so only save red data initially long term
		FIFO_LED_DATA rawData = {0};
 8001c70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
		uint8_t n = i*6;
 8001c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	461a      	mov	r2, r3
 8001c80:	0052      	lsls	r2, r2, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		rawData.redLedRaw = ((max30102_sensor_data[n+0] << 16) | (max30102_sensor_data[n+1] << 8) | max30102_sensor_data[n+2]);
 8001c8a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c8e:	4a21      	ldr	r2, [pc, #132]	@ (8001d14 <MAX30102_ProcessData+0xb0>)
 8001c90:	5cd3      	ldrb	r3, [r2, r3]
 8001c92:	041a      	lsls	r2, r3, #16
 8001c94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c98:	3301      	adds	r3, #1
 8001c9a:	491e      	ldr	r1, [pc, #120]	@ (8001d14 <MAX30102_ProcessData+0xb0>)
 8001c9c:	5ccb      	ldrb	r3, [r1, r3]
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001ca6:	3202      	adds	r2, #2
 8001ca8:	491a      	ldr	r1, [pc, #104]	@ (8001d14 <MAX30102_ProcessData+0xb0>)
 8001caa:	5c8a      	ldrb	r2, [r1, r2]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	62bb      	str	r3, [r7, #40]	@ 0x28
		rawData.irLedRaw = 	((max30102_sensor_data[n+3] << 16) | (max30102_sensor_data[n+4] << 8) | max30102_sensor_data[n+5]);
 8001cb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001cb4:	3303      	adds	r3, #3
 8001cb6:	4a17      	ldr	r2, [pc, #92]	@ (8001d14 <MAX30102_ProcessData+0xb0>)
 8001cb8:	5cd3      	ldrb	r3, [r2, r3]
 8001cba:	041a      	lsls	r2, r3, #16
 8001cbc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	4914      	ldr	r1, [pc, #80]	@ (8001d14 <MAX30102_ProcessData+0xb0>)
 8001cc4:	5ccb      	ldrb	r3, [r1, r3]
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001cce:	3205      	adds	r2, #5
 8001cd0:	4910      	ldr	r1, [pc, #64]	@ (8001d14 <MAX30102_ProcessData+0xb0>)
 8001cd2:	5c8a      	ldrb	r2, [r1, r2]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		pulseOximeter = pulseOximeter_update(rawData);
 8001cd8:	4c0f      	ldr	r4, [pc, #60]	@ (8001d18 <MAX30102_ProcessData+0xb4>)
 8001cda:	4638      	mov	r0, r7
 8001cdc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ce0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ce4:	f000 f97e 	bl	8001fe4 <pulseOximeter_update>
 8001ce8:	4625      	mov	r5, r4
 8001cea:	463c      	mov	r4, r7
 8001cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cf8:	e885 0003 	stmia.w	r5, {r0, r1}
	for (int i = 0 ; i < MAX30102_SAMPLES_PER_BURST; i++) {
 8001cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cfe:	3301      	adds	r3, #1
 8001d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d04:	2b1f      	cmp	r3, #31
 8001d06:	ddb3      	ble.n	8001c70 <MAX30102_ProcessData+0xc>

	}
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3738      	adds	r7, #56	@ 0x38
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bdb0      	pop	{r4, r5, r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000630 	.word	0x20000630
 8001d18:	20000558 	.word	0x20000558

08001d1c <compare>:

	currentTemperature = temperature;
}

// Comparison function for qsort
int compare(const void *a, const void *b) {
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
    return (*(int*)a - *(int*)b);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	1ad3      	subs	r3, r2, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <getMedian>:

// Function to calculate the median
double getMedian(int arr[], int size) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
    // Sort the array
    qsort(arr, size, sizeof(int), compare);
 8001d46:	6839      	ldr	r1, [r7, #0]
 8001d48:	4b0d      	ldr	r3, [pc, #52]	@ (8001d80 <getMedian+0x44>)
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f00b f94a 	bl	800cfe6 <qsort>

    return arr[size - 1 - 3];
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001d58:	3b04      	subs	r3, #4
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	4413      	add	r3, r2
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fbde 	bl	8000524 <__aeabi_i2d>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d70:	eeb0 0a47 	vmov.f32	s0, s14
 8001d74:	eef0 0a67 	vmov.f32	s1, s15
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	08001d1d 	.word	0x08001d1d
 8001d84:	00000000 	.word	0x00000000

08001d88 <detectPulse>:


bool detectPulse(float sensor_value)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	ed87 0a01 	vstr	s0, [r7, #4]
  static float prev_sensor_value = 0;
  static uint8_t values_went_down = 0;
  static uint16_t currentBeatIndex = 0;

  if(sensor_value > PULSE_MAX_THRESHOLD)
 8001d92:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d96:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001f08 <detectPulse+0x180>
 8001d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da2:	dd0b      	ble.n	8001dbc <detectPulse+0x34>
  {
    currentPulseDetectorState = PULSE_IDLE;
 8001da4:	4b59      	ldr	r3, [pc, #356]	@ (8001f0c <detectPulse+0x184>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
    prev_sensor_value = 0;
 8001daa:	4b59      	ldr	r3, [pc, #356]	@ (8001f10 <detectPulse+0x188>)
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
    values_went_down = 0;
 8001db2:	4b58      	ldr	r3, [pc, #352]	@ (8001f14 <detectPulse+0x18c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
    return false;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e09b      	b.n	8001ef4 <detectPulse+0x16c>
  }

  currentBeatIndex++;
 8001dbc:	4b56      	ldr	r3, [pc, #344]	@ (8001f18 <detectPulse+0x190>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b54      	ldr	r3, [pc, #336]	@ (8001f18 <detectPulse+0x190>)
 8001dc6:	801a      	strh	r2, [r3, #0]

  switch(currentPulseDetectorState)
 8001dc8:	4b50      	ldr	r3, [pc, #320]	@ (8001f0c <detectPulse+0x184>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d06e      	beq.n	8001eae <detectPulse+0x126>
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	f300 808b 	bgt.w	8001eec <detectPulse+0x164>
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <detectPulse+0x58>
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d011      	beq.n	8001e02 <detectPulse+0x7a>
 8001dde:	e085      	b.n	8001eec <detectPulse+0x164>
  {
    case PULSE_IDLE:
      if(sensor_value >= PULSE_MIN_THRESHOLD) {
 8001de0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001de4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001f1c <detectPulse+0x194>
 8001de8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df0:	da00      	bge.n	8001df4 <detectPulse+0x6c>
        currentPulseDetectorState = PULSE_TRACE_UP;
        values_went_down = 0;
      }
      break;
 8001df2:	e07b      	b.n	8001eec <detectPulse+0x164>
        currentPulseDetectorState = PULSE_TRACE_UP;
 8001df4:	4b45      	ldr	r3, [pc, #276]	@ (8001f0c <detectPulse+0x184>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	701a      	strb	r2, [r3, #0]
        values_went_down = 0;
 8001dfa:	4b46      	ldr	r3, [pc, #280]	@ (8001f14 <detectPulse+0x18c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
      break;
 8001e00:	e074      	b.n	8001eec <detectPulse+0x164>

    case PULSE_TRACE_UP:
      if (!(sensor_value > prev_sensor_value))
 8001e02:	4b43      	ldr	r3, [pc, #268]	@ (8001f10 <detectPulse+0x188>)
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e14:	bfcc      	ite	gt
 8001e16:	2301      	movgt	r3, #1
 8001e18:	2300      	movle	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	f083 0301 	eor.w	r3, r3, #1
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d061      	beq.n	8001eea <detectPulse+0x162>
      {
    	if (currentBeatIndex > 0) valuesBPM[bpmIndex] = currentBeatIndex;
 8001e26:	4b3c      	ldr	r3, [pc, #240]	@ (8001f18 <detectPulse+0x190>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d007      	beq.n	8001e3e <detectPulse+0xb6>
 8001e2e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f18 <detectPulse+0x190>)
 8001e30:	8819      	ldrh	r1, [r3, #0]
 8001e32:	4b3b      	ldr	r3, [pc, #236]	@ (8001f20 <detectPulse+0x198>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	4b3a      	ldr	r3, [pc, #232]	@ (8001f24 <detectPulse+0x19c>)
 8001e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    	currentBeatIndex = 0;
 8001e3e:	4b36      	ldr	r3, [pc, #216]	@ (8001f18 <detectPulse+0x190>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	801a      	strh	r2, [r3, #0]

        bpmIndex++;
 8001e44:	4b36      	ldr	r3, [pc, #216]	@ (8001f20 <detectPulse+0x198>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	4b34      	ldr	r3, [pc, #208]	@ (8001f20 <detectPulse+0x198>)
 8001e4e:	701a      	strb	r2, [r3, #0]

        if (bpmIndex >= PULSE_BPM_SAMPLE_SIZE){
 8001e50:	4b33      	ldr	r3, [pc, #204]	@ (8001f20 <detectPulse+0x198>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b09      	cmp	r3, #9
 8001e56:	d925      	bls.n	8001ea4 <detectPulse+0x11c>
        	bpmIndex = 0;
 8001e58:	4b31      	ldr	r3, [pc, #196]	@ (8001f20 <detectPulse+0x198>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
        	uint16_t medianIdx = getMedian(valuesBPM, (int)PULSE_BPM_SAMPLE_SIZE);
 8001e5e:	210a      	movs	r1, #10
 8001e60:	4830      	ldr	r0, [pc, #192]	@ (8001f24 <detectPulse+0x19c>)
 8001e62:	f7ff ff6b 	bl	8001d3c <getMedian>
 8001e66:	ec53 2b10 	vmov	r2, r3, d0
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f7fe fe9b 	bl	8000ba8 <__aeabi_d2uiz>
 8001e72:	4603      	mov	r3, r0
 8001e74:	81fb      	strh	r3, [r7, #14]

        	if(medianIdx > 0)
 8001e76:	89fb      	ldrh	r3, [r7, #14]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d013      	beq.n	8001ea4 <detectPulse+0x11c>
        		currentBPM = (60.0 * MAX30102_SAMPLE_RATE) / medianIdx;
 8001e7c:	89fb      	ldrh	r3, [r7, #14]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe fb50 	bl	8000524 <__aeabi_i2d>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	a11d      	add	r1, pc, #116	@ (adr r1, 8001f00 <detectPulse+0x178>)
 8001e8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e8e:	f7fe fcdd 	bl	800084c <__aeabi_ddiv>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f7fe fea5 	bl	8000be8 <__aeabi_d2f>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4a21      	ldr	r2, [pc, #132]	@ (8001f28 <detectPulse+0x1a0>)
 8001ea2:	6013      	str	r3, [r2, #0]
        }

        currentPulseDetectorState = PULSE_TRACE_DOWN;
 8001ea4:	4b19      	ldr	r3, [pc, #100]	@ (8001f0c <detectPulse+0x184>)
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	701a      	strb	r2, [r3, #0]

        return true;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e022      	b.n	8001ef4 <detectPulse+0x16c>
      }
      break;

    case PULSE_TRACE_DOWN:
      if(sensor_value < prev_sensor_value)
 8001eae:	4b18      	ldr	r3, [pc, #96]	@ (8001f10 <detectPulse+0x188>)
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001eb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec0:	d505      	bpl.n	8001ece <detectPulse+0x146>
      {
        values_went_down++;
 8001ec2:	4b14      	ldr	r3, [pc, #80]	@ (8001f14 <detectPulse+0x18c>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4b12      	ldr	r3, [pc, #72]	@ (8001f14 <detectPulse+0x18c>)
 8001ecc:	701a      	strb	r2, [r3, #0]
      }


      if(sensor_value < PULSE_MIN_THRESHOLD)
 8001ece:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ed2:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001f1c <detectPulse+0x194>
 8001ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ede:	d400      	bmi.n	8001ee2 <detectPulse+0x15a>
      {
        currentPulseDetectorState = PULSE_IDLE;
      }
      break;
 8001ee0:	e004      	b.n	8001eec <detectPulse+0x164>
        currentPulseDetectorState = PULSE_IDLE;
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f0c <detectPulse+0x184>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
      break;
 8001ee8:	e000      	b.n	8001eec <detectPulse+0x164>
      break;
 8001eea:	bf00      	nop
  }

  prev_sensor_value = sensor_value;
 8001eec:	4a08      	ldr	r2, [pc, #32]	@ (8001f10 <detectPulse+0x188>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6013      	str	r3, [r2, #0]
  return false;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	f3af 8000 	nop.w
 8001f00:	00000000 	.word	0x00000000
 8001f04:	40a77000 	.word	0x40a77000
 8001f08:	44fa0000 	.word	0x44fa0000
 8001f0c:	2000062c 	.word	0x2000062c
 8001f10:	200006f0 	.word	0x200006f0
 8001f14:	200006f4 	.word	0x200006f4
 8001f18:	200006f6 	.word	0x200006f6
 8001f1c:	42c80000 	.word	0x42c80000
 8001f20:	20000610 	.word	0x20000610
 8001f24:	200005e8 	.word	0x200005e8
 8001f28:	200005e4 	.word	0x200005e4

08001f2c <balanceIntesities>:

void balanceIntesities( float redLedDC, float IRLedDC )
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f36:	edc7 0a00 	vstr	s1, [r7]
	uint32_t currentTime = millis();
 8001f3a:	f000 fce7 	bl	800290c <millis>
 8001f3e:	60f8      	str	r0, [r7, #12]
  if( currentTime - lastREDLedCurrentCheck >= RED_LED_CURRENT_ADJUSTMENT_MS)
 8001f40:	4b25      	ldr	r3, [pc, #148]	@ (8001fd8 <balanceIntesities+0xac>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	2bc7      	cmp	r3, #199	@ 0xc7
 8001f4c:	d940      	bls.n	8001fd0 <balanceIntesities+0xa4>
  {
	if( IRLedDC - redLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent < 51)
 8001f4e:	ed97 7a00 	vldr	s14, [r7]
 8001f52:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f5a:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001fdc <balanceIntesities+0xb0>
 8001f5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f66:	dd10      	ble.n	8001f8a <balanceIntesities+0x5e>
 8001f68:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe0 <balanceIntesities+0xb4>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b32      	cmp	r3, #50	@ 0x32
 8001f6e:	d80c      	bhi.n	8001f8a <balanceIntesities+0x5e>
    {
		redLEDCurrent++;
 8001f70:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe0 <balanceIntesities+0xb4>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	3301      	adds	r3, #1
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <balanceIntesities+0xb4>)
 8001f7a:	701a      	strb	r2, [r3, #0]
		MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8001f7c:	4b18      	ldr	r3, [pc, #96]	@ (8001fe0 <balanceIntesities+0xb4>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	4619      	mov	r1, r3
 8001f82:	2001      	movs	r0, #1
 8001f84:	f7ff fe36 	bl	8001bf4 <MAX30102_setLedCurrent>
 8001f88:	e01c      	b.n	8001fc4 <balanceIntesities+0x98>
    }
    else if(redLedDC - IRLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent > 0)
 8001f8a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f8e:	edd7 7a00 	vldr	s15, [r7]
 8001f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f96:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001fdc <balanceIntesities+0xb0>
 8001f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa2:	dd0f      	ble.n	8001fc4 <balanceIntesities+0x98>
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <balanceIntesities+0xb4>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00b      	beq.n	8001fc4 <balanceIntesities+0x98>
    {
    	redLEDCurrent--;
 8001fac:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <balanceIntesities+0xb4>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <balanceIntesities+0xb4>)
 8001fb6:	701a      	strb	r2, [r3, #0]
    	MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8001fb8:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <balanceIntesities+0xb4>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f7ff fe18 	bl	8001bf4 <MAX30102_setLedCurrent>
    }

    lastREDLedCurrentCheck = millis();
 8001fc4:	f000 fca2 	bl	800290c <millis>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4b02      	ldr	r3, [pc, #8]	@ (8001fd8 <balanceIntesities+0xac>)
 8001fce:	601a      	str	r2, [r3, #0]
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000628 	.word	0x20000628
 8001fdc:	461c4000 	.word	0x461c4000
 8001fe0:	20000624 	.word	0x20000624

08001fe4 <pulseOximeter_update>:

MAX30102 pulseOximeter_update(FIFO_LED_DATA m_fifoData)
	{
 8001fe4:	b5b0      	push	{r4, r5, r7, lr}
 8001fe6:	b090      	sub	sp, #64	@ 0x40
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	e883 0006 	stmia.w	r3, {r1, r2}
		MAX30102 result = {
 8001ff2:	f107 0310 	add.w	r3, r7, #16
 8001ff6:	2228      	movs	r2, #40	@ 0x28
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f00b fe97 	bl	800dd2e <memset>
 8002000:	4b96      	ldr	r3, [pc, #600]	@ (800225c <pulseOximeter_update+0x278>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	627b      	str	r3, [r7, #36]	@ 0x24
 8002006:	4b96      	ldr	r3, [pc, #600]	@ (8002260 <pulseOximeter_update+0x27c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	633b      	str	r3, [r7, #48]	@ 0x30
		/*float dcFilteredIR*/ 0.0,
		/*float dcFilteredRed*/ 0.0,
		/*float temperature;*/ currentTemperature
	};

	dcFilterIR = dcRemoval( (float)m_fifoData.irLedRaw, dcFilterIR.w, ALPHA );
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	ee07 3a90 	vmov	s15, r3
 8002012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002016:	4b93      	ldr	r3, [pc, #588]	@ (8002264 <pulseOximeter_update+0x280>)
 8002018:	ed93 7a00 	vldr	s14, [r3]
 800201c:	ed9f 1a92 	vldr	s2, [pc, #584]	@ 8002268 <pulseOximeter_update+0x284>
 8002020:	eef0 0a47 	vmov.f32	s1, s14
 8002024:	eeb0 0a67 	vmov.f32	s0, s15
 8002028:	f7fe ffa6 	bl	8000f78 <dcRemoval>
 800202c:	eeb0 7a40 	vmov.f32	s14, s0
 8002030:	eef0 7a60 	vmov.f32	s15, s1
 8002034:	4b8b      	ldr	r3, [pc, #556]	@ (8002264 <pulseOximeter_update+0x280>)
 8002036:	ed83 7a00 	vstr	s14, [r3]
 800203a:	edc3 7a01 	vstr	s15, [r3, #4]
	dcFilterRed = dcRemoval( (float)m_fifoData.redLedRaw, dcFilterRed.w, ALPHA );
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	ee07 3a90 	vmov	s15, r3
 8002044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002048:	4b88      	ldr	r3, [pc, #544]	@ (800226c <pulseOximeter_update+0x288>)
 800204a:	ed93 7a00 	vldr	s14, [r3]
 800204e:	ed9f 1a86 	vldr	s2, [pc, #536]	@ 8002268 <pulseOximeter_update+0x284>
 8002052:	eef0 0a47 	vmov.f32	s1, s14
 8002056:	eeb0 0a67 	vmov.f32	s0, s15
 800205a:	f7fe ff8d 	bl	8000f78 <dcRemoval>
 800205e:	eeb0 7a40 	vmov.f32	s14, s0
 8002062:	eef0 7a60 	vmov.f32	s15, s1
 8002066:	4b81      	ldr	r3, [pc, #516]	@ (800226c <pulseOximeter_update+0x288>)
 8002068:	ed83 7a00 	vstr	s14, [r3]
 800206c:	edc3 7a01 	vstr	s15, [r3, #4]

	float meanDiffResIR = meanDiff( dcFilterIR.result, &meanDiffIR);
 8002070:	4b7c      	ldr	r3, [pc, #496]	@ (8002264 <pulseOximeter_update+0x280>)
 8002072:	edd3 7a01 	vldr	s15, [r3, #4]
 8002076:	487e      	ldr	r0, [pc, #504]	@ (8002270 <pulseOximeter_update+0x28c>)
 8002078:	eeb0 0a67 	vmov.f32	s0, s15
 800207c:	f7fe fff8 	bl	8001070 <meanDiff>
 8002080:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
	lowPassButterworthFilter( meanDiffResIR/*-dcFilterIR.result*/, &lpbFilterIR );
 8002084:	487b      	ldr	r0, [pc, #492]	@ (8002274 <pulseOximeter_update+0x290>)
 8002086:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 800208a:	f7fe ffa9 	bl	8000fe0 <lowPassButterworthFilter>

	irACValueSqSum += dcFilterIR.result * dcFilterIR.result;
 800208e:	4b75      	ldr	r3, [pc, #468]	@ (8002264 <pulseOximeter_update+0x280>)
 8002090:	ed93 7a01 	vldr	s14, [r3, #4]
 8002094:	4b73      	ldr	r3, [pc, #460]	@ (8002264 <pulseOximeter_update+0x280>)
 8002096:	edd3 7a01 	vldr	s15, [r3, #4]
 800209a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800209e:	4b76      	ldr	r3, [pc, #472]	@ (8002278 <pulseOximeter_update+0x294>)
 80020a0:	edd3 7a00 	vldr	s15, [r3]
 80020a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a8:	4b73      	ldr	r3, [pc, #460]	@ (8002278 <pulseOximeter_update+0x294>)
 80020aa:	edc3 7a00 	vstr	s15, [r3]
	redACValueSqSum += dcFilterRed.result * dcFilterRed.result;
 80020ae:	4b6f      	ldr	r3, [pc, #444]	@ (800226c <pulseOximeter_update+0x288>)
 80020b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80020b4:	4b6d      	ldr	r3, [pc, #436]	@ (800226c <pulseOximeter_update+0x288>)
 80020b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80020ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020be:	4b6f      	ldr	r3, [pc, #444]	@ (800227c <pulseOximeter_update+0x298>)
 80020c0:	edd3 7a00 	vldr	s15, [r3]
 80020c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c8:	4b6c      	ldr	r3, [pc, #432]	@ (800227c <pulseOximeter_update+0x298>)
 80020ca:	edc3 7a00 	vstr	s15, [r3]
	samplesRecorded++;
 80020ce:	4b6c      	ldr	r3, [pc, #432]	@ (8002280 <pulseOximeter_update+0x29c>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	3301      	adds	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	4b6a      	ldr	r3, [pc, #424]	@ (8002280 <pulseOximeter_update+0x29c>)
 80020d8:	801a      	strh	r2, [r3, #0]

	if( detectPulse( lpbFilterIR.result ) &&  samplesRecorded > 0 )
 80020da:	4b66      	ldr	r3, [pc, #408]	@ (8002274 <pulseOximeter_update+0x290>)
 80020dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80020e0:	eeb0 0a67 	vmov.f32	s0, s15
 80020e4:	f7ff fe50 	bl	8001d88 <detectPulse>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8088 	beq.w	8002200 <pulseOximeter_update+0x21c>
 80020f0:	4b63      	ldr	r3, [pc, #396]	@ (8002280 <pulseOximeter_update+0x29c>)
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 8083 	beq.w	8002200 <pulseOximeter_update+0x21c>
	{
		result.pulseDetected=true;
 80020fa:	2301      	movs	r3, #1
 80020fc:	743b      	strb	r3, [r7, #16]
		pulsesDetected++;
 80020fe:	4b61      	ldr	r3, [pc, #388]	@ (8002284 <pulseOximeter_update+0x2a0>)
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	3301      	adds	r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	4b5f      	ldr	r3, [pc, #380]	@ (8002284 <pulseOximeter_update+0x2a0>)
 8002108:	801a      	strh	r2, [r3, #0]

		if( (pulsesDetected % RESET_SPO2_EVERY_N_PULSES == 0) )
 800210a:	4b5e      	ldr	r3, [pc, #376]	@ (8002284 <pulseOximeter_update+0x2a0>)
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	b29b      	uxth	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d173      	bne.n	8002200 <pulseOximeter_update+0x21c>
		{
			float ratioRMS = log( sqrt(redACValueSqSum/samplesRecorded) ) / log( sqrt(irACValueSqSum/samplesRecorded) );
 8002118:	4b58      	ldr	r3, [pc, #352]	@ (800227c <pulseOximeter_update+0x298>)
 800211a:	ed93 7a00 	vldr	s14, [r3]
 800211e:	4b58      	ldr	r3, [pc, #352]	@ (8002280 <pulseOximeter_update+0x29c>)
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	ee07 3a90 	vmov	s15, r3
 8002126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800212a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800212e:	ee16 0a90 	vmov	r0, s13
 8002132:	f7fe fa09 	bl	8000548 <__aeabi_f2d>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	ec43 2b10 	vmov	d0, r2, r3
 800213e:	f00d fd55 	bl	800fbec <sqrt>
 8002142:	eeb0 7a40 	vmov.f32	s14, s0
 8002146:	eef0 7a60 	vmov.f32	s15, s1
 800214a:	eeb0 0a47 	vmov.f32	s0, s14
 800214e:	eef0 0a67 	vmov.f32	s1, s15
 8002152:	f00d fd0d 	bl	800fb70 <log>
 8002156:	ec55 4b10 	vmov	r4, r5, d0
 800215a:	4b47      	ldr	r3, [pc, #284]	@ (8002278 <pulseOximeter_update+0x294>)
 800215c:	ed93 7a00 	vldr	s14, [r3]
 8002160:	4b47      	ldr	r3, [pc, #284]	@ (8002280 <pulseOximeter_update+0x29c>)
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	ee07 3a90 	vmov	s15, r3
 8002168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800216c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002170:	ee16 0a90 	vmov	r0, s13
 8002174:	f7fe f9e8 	bl	8000548 <__aeabi_f2d>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	ec43 2b10 	vmov	d0, r2, r3
 8002180:	f00d fd34 	bl	800fbec <sqrt>
 8002184:	eeb0 7a40 	vmov.f32	s14, s0
 8002188:	eef0 7a60 	vmov.f32	s15, s1
 800218c:	eeb0 0a47 	vmov.f32	s0, s14
 8002190:	eef0 0a67 	vmov.f32	s1, s15
 8002194:	f00d fcec 	bl	800fb70 <log>
 8002198:	ec53 2b10 	vmov	r2, r3, d0
 800219c:	4620      	mov	r0, r4
 800219e:	4629      	mov	r1, r5
 80021a0:	f7fe fb54 	bl	800084c <__aeabi_ddiv>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	f7fe fd1c 	bl	8000be8 <__aeabi_d2f>
 80021b0:	4603      	mov	r3, r0
 80021b2:	63bb      	str	r3, [r7, #56]	@ 0x38
			currentSpO2Value = 114.0 - 18.0 * ratioRMS;
 80021b4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80021b6:	f7fe f9c7 	bl	8000548 <__aeabi_f2d>
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	4b32      	ldr	r3, [pc, #200]	@ (8002288 <pulseOximeter_update+0x2a4>)
 80021c0:	f7fe fa1a 	bl	80005f8 <__aeabi_dmul>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	f04f 0000 	mov.w	r0, #0
 80021cc:	492f      	ldr	r1, [pc, #188]	@ (800228c <pulseOximeter_update+0x2a8>)
 80021ce:	f7fe f85b 	bl	8000288 <__aeabi_dsub>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4610      	mov	r0, r2
 80021d8:	4619      	mov	r1, r3
 80021da:	f7fe fd05 	bl	8000be8 <__aeabi_d2f>
 80021de:	4603      	mov	r3, r0
 80021e0:	4a1e      	ldr	r2, [pc, #120]	@ (800225c <pulseOximeter_update+0x278>)
 80021e2:	6013      	str	r3, [r2, #0]

			//uint8_t ratio =  ((redACValueSqSum/samplesRecorded) * 100) / (irACValueSqSum/samplesRecorded);
			//if (ratio > 183) ratio = 183;
			//currentSpO2Value = uch_spo2_table[ratio];

			result.SpO2 = currentSpO2Value;
 80021e4:	4b1d      	ldr	r3, [pc, #116]	@ (800225c <pulseOximeter_update+0x278>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24

			irACValueSqSum = 0;
 80021ea:	4b23      	ldr	r3, [pc, #140]	@ (8002278 <pulseOximeter_update+0x294>)
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
			redACValueSqSum = 0;
 80021f2:	4b22      	ldr	r3, [pc, #136]	@ (800227c <pulseOximeter_update+0x298>)
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
			samplesRecorded = 0;
 80021fa:	4b21      	ldr	r3, [pc, #132]	@ (8002280 <pulseOximeter_update+0x29c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	801a      	strh	r2, [r3, #0]
		}
	}

	balanceIntesities( dcFilterRed.w, dcFilterIR.w );
 8002200:	4b1a      	ldr	r3, [pc, #104]	@ (800226c <pulseOximeter_update+0x288>)
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	4b17      	ldr	r3, [pc, #92]	@ (8002264 <pulseOximeter_update+0x280>)
 8002208:	ed93 7a00 	vldr	s14, [r3]
 800220c:	eef0 0a47 	vmov.f32	s1, s14
 8002210:	eeb0 0a67 	vmov.f32	s0, s15
 8002214:	f7ff fe8a 	bl	8001f2c <balanceIntesities>

	result.heartBPM = currentBPM;
 8002218:	4b1d      	ldr	r3, [pc, #116]	@ (8002290 <pulseOximeter_update+0x2ac>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	617b      	str	r3, [r7, #20]
	result.irCardiogram = lpbFilterIR.result;
 800221e:	4b15      	ldr	r3, [pc, #84]	@ (8002274 <pulseOximeter_update+0x290>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	61bb      	str	r3, [r7, #24]
	result.irDcValue = dcFilterIR.w;
 8002224:	4b0f      	ldr	r3, [pc, #60]	@ (8002264 <pulseOximeter_update+0x280>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	61fb      	str	r3, [r7, #28]
	result.redDcValue = dcFilterRed.w;
 800222a:	4b10      	ldr	r3, [pc, #64]	@ (800226c <pulseOximeter_update+0x288>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	623b      	str	r3, [r7, #32]
	result.dcFilteredIR = dcFilterIR.result;
 8002230:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <pulseOximeter_update+0x280>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	62fb      	str	r3, [r7, #44]	@ 0x2c
	result.dcFilteredRed = dcFilterRed.result;
 8002236:	4b0d      	ldr	r3, [pc, #52]	@ (800226c <pulseOximeter_update+0x288>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	633b      	str	r3, [r7, #48]	@ 0x30

	return result;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	461d      	mov	r5, r3
 8002240:	f107 0410 	add.w	r4, r7, #16
 8002244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800224a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800224c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002250:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	3740      	adds	r7, #64	@ 0x40
 8002258:	46bd      	mov	sp, r7
 800225a:	bdb0      	pop	{r4, r5, r7, pc}
 800225c:	20000620 	.word	0x20000620
 8002260:	20000000 	.word	0x20000000
 8002264:	20000580 	.word	0x20000580
 8002268:	3f733333 	.word	0x3f733333
 800226c:	20000588 	.word	0x20000588
 8002270:	20000590 	.word	0x20000590
 8002274:	200005d8 	.word	0x200005d8
 8002278:	20000614 	.word	0x20000614
 800227c:	20000618 	.word	0x20000618
 8002280:	2000061c 	.word	0x2000061c
 8002284:	2000061e 	.word	0x2000061e
 8002288:	40320000 	.word	0x40320000
 800228c:	405c8000 	.word	0x405c8000
 8002290:	200005e4 	.word	0x200005e4

08002294 <MAX30102_getBPM>:

float MAX30102_getBPM(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
	return pulseOximeter.heartBPM;
 8002298:	4b04      	ldr	r3, [pc, #16]	@ (80022ac <MAX30102_getBPM+0x18>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	ee07 3a90 	vmov	s15, r3
}
 80022a0:	eeb0 0a67 	vmov.f32	s0, s15
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	20000558 	.word	0x20000558

080022b0 <MAX30102_getSPO2>:
float MAX30102_getSPO2(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
	return pulseOximeter.SpO2;
 80022b4:	4b04      	ldr	r3, [pc, #16]	@ (80022c8 <MAX30102_getSPO2+0x18>)
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	ee07 3a90 	vmov	s15, r3
}
 80022bc:	eeb0 0a67 	vmov.f32	s0, s15
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	20000558 	.word	0x20000558

080022cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <HAL_MspInit+0x4c>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022da:	4a0f      	ldr	r2, [pc, #60]	@ (8002318 <HAL_MspInit+0x4c>)
 80022dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002318 <HAL_MspInit+0x4c>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	4b09      	ldr	r3, [pc, #36]	@ (8002318 <HAL_MspInit+0x4c>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f6:	4a08      	ldr	r2, [pc, #32]	@ (8002318 <HAL_MspInit+0x4c>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022fe:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <HAL_MspInit+0x4c>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800230a:	2007      	movs	r0, #7
 800230c:	f001 f8b0 	bl	8003470 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40023800 	.word	0x40023800

0800231c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	@ 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a2f      	ldr	r2, [pc, #188]	@ (80023f8 <HAL_ADC_MspInit+0xdc>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d158      	bne.n	80023f0 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b2e      	ldr	r3, [pc, #184]	@ (80023fc <HAL_ADC_MspInit+0xe0>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002346:	4a2d      	ldr	r2, [pc, #180]	@ (80023fc <HAL_ADC_MspInit+0xe0>)
 8002348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800234c:	6453      	str	r3, [r2, #68]	@ 0x44
 800234e:	4b2b      	ldr	r3, [pc, #172]	@ (80023fc <HAL_ADC_MspInit+0xe0>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b27      	ldr	r3, [pc, #156]	@ (80023fc <HAL_ADC_MspInit+0xe0>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	4a26      	ldr	r2, [pc, #152]	@ (80023fc <HAL_ADC_MspInit+0xe0>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6313      	str	r3, [r2, #48]	@ 0x30
 800236a:	4b24      	ldr	r3, [pc, #144]	@ (80023fc <HAL_ADC_MspInit+0xe0>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002376:	2303      	movs	r3, #3
 8002378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800237a:	2303      	movs	r3, #3
 800237c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	4619      	mov	r1, r3
 8002388:	481d      	ldr	r0, [pc, #116]	@ (8002400 <HAL_ADC_MspInit+0xe4>)
 800238a:	f001 fc23 	bl	8003bd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800238e:	4b1d      	ldr	r3, [pc, #116]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 8002390:	4a1d      	ldr	r2, [pc, #116]	@ (8002408 <HAL_ADC_MspInit+0xec>)
 8002392:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002394:	4b1b      	ldr	r3, [pc, #108]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 8002396:	2200      	movs	r2, #0
 8002398:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800239a:	4b1a      	ldr	r3, [pc, #104]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023a0:	4b18      	ldr	r3, [pc, #96]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023a6:	4b17      	ldr	r3, [pc, #92]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 80023a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023ae:	4b15      	ldr	r3, [pc, #84]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 80023b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023b6:	4b13      	ldr	r3, [pc, #76]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 80023b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023be:	4b11      	ldr	r3, [pc, #68]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 80023c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80023c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 80023c8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80023cc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023d4:	480b      	ldr	r0, [pc, #44]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 80023d6:	f001 f88d 	bl	80034f4 <HAL_DMA_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80023e0:	f7ff fb60 	bl	8001aa4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a07      	ldr	r2, [pc, #28]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 80023e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80023ea:	4a06      	ldr	r2, [pc, #24]	@ (8002404 <HAL_ADC_MspInit+0xe8>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80023f0:	bf00      	nop
 80023f2:	3728      	adds	r7, #40	@ 0x28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40012000 	.word	0x40012000
 80023fc:	40023800 	.word	0x40023800
 8002400:	40020000 	.word	0x40020000
 8002404:	2000033c 	.word	0x2000033c
 8002408:	40026410 	.word	0x40026410

0800240c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	@ 0x28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a19      	ldr	r2, [pc, #100]	@ (8002490 <HAL_I2C_MspInit+0x84>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d12c      	bne.n	8002488 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	4b18      	ldr	r3, [pc, #96]	@ (8002494 <HAL_I2C_MspInit+0x88>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	4a17      	ldr	r2, [pc, #92]	@ (8002494 <HAL_I2C_MspInit+0x88>)
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	6313      	str	r3, [r2, #48]	@ 0x30
 800243e:	4b15      	ldr	r3, [pc, #84]	@ (8002494 <HAL_I2C_MspInit+0x88>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800244a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800244e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002450:	2312      	movs	r3, #18
 8002452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002454:	2301      	movs	r3, #1
 8002456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002458:	2300      	movs	r3, #0
 800245a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800245c:	2304      	movs	r3, #4
 800245e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	4619      	mov	r1, r3
 8002466:	480c      	ldr	r0, [pc, #48]	@ (8002498 <HAL_I2C_MspInit+0x8c>)
 8002468:	f001 fbb4 	bl	8003bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	4b08      	ldr	r3, [pc, #32]	@ (8002494 <HAL_I2C_MspInit+0x88>)
 8002472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002474:	4a07      	ldr	r2, [pc, #28]	@ (8002494 <HAL_I2C_MspInit+0x88>)
 8002476:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800247a:	6413      	str	r3, [r2, #64]	@ 0x40
 800247c:	4b05      	ldr	r3, [pc, #20]	@ (8002494 <HAL_I2C_MspInit+0x88>)
 800247e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002488:	bf00      	nop
 800248a:	3728      	adds	r7, #40	@ 0x28
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40005400 	.word	0x40005400
 8002494:	40023800 	.word	0x40023800
 8002498:	40020400 	.word	0x40020400

0800249c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08e      	sub	sp, #56	@ 0x38
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a4a      	ldr	r2, [pc, #296]	@ (80025f0 <HAL_I2S_MspInit+0x154>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	f040 808c 	bne.w	80025e6 <HAL_I2S_MspInit+0x14a>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80024ce:	2301      	movs	r3, #1
 80024d0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80024d2:	23c0      	movs	r3, #192	@ 0xc0
 80024d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 80024d6:	2305      	movs	r3, #5
 80024d8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	4618      	mov	r0, r3
 80024e0:	f005 fa10 	bl	8007904 <HAL_RCCEx_PeriphCLKConfig>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80024ea:	f7ff fadb 	bl	8001aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	4b40      	ldr	r3, [pc, #256]	@ (80025f4 <HAL_I2S_MspInit+0x158>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	4a3f      	ldr	r2, [pc, #252]	@ (80025f4 <HAL_I2S_MspInit+0x158>)
 80024f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80024fe:	4b3d      	ldr	r3, [pc, #244]	@ (80025f4 <HAL_I2S_MspInit+0x158>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	4b39      	ldr	r3, [pc, #228]	@ (80025f4 <HAL_I2S_MspInit+0x158>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	4a38      	ldr	r2, [pc, #224]	@ (80025f4 <HAL_I2S_MspInit+0x158>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	6313      	str	r3, [r2, #48]	@ 0x30
 800251a:	4b36      	ldr	r3, [pc, #216]	@ (80025f4 <HAL_I2S_MspInit+0x158>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	4b32      	ldr	r3, [pc, #200]	@ (80025f4 <HAL_I2S_MspInit+0x158>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	4a31      	ldr	r2, [pc, #196]	@ (80025f4 <HAL_I2S_MspInit+0x158>)
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	6313      	str	r3, [r2, #48]	@ 0x30
 8002536:	4b2f      	ldr	r3, [pc, #188]	@ (80025f4 <HAL_I2S_MspInit+0x158>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002542:	2308      	movs	r3, #8
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002546:	2302      	movs	r3, #2
 8002548:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254e:	2300      	movs	r3, #0
 8002550:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002552:	2305      	movs	r3, #5
 8002554:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800255a:	4619      	mov	r1, r3
 800255c:	4826      	ldr	r0, [pc, #152]	@ (80025f8 <HAL_I2S_MspInit+0x15c>)
 800255e:	f001 fb39 	bl	8003bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8002562:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002566:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002568:	2302      	movs	r3, #2
 800256a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002570:	2300      	movs	r3, #0
 8002572:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002574:	2305      	movs	r3, #5
 8002576:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800257c:	4619      	mov	r1, r3
 800257e:	481f      	ldr	r0, [pc, #124]	@ (80025fc <HAL_I2S_MspInit+0x160>)
 8002580:	f001 fb28 	bl	8003bd4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002584:	4b1e      	ldr	r3, [pc, #120]	@ (8002600 <HAL_I2S_MspInit+0x164>)
 8002586:	4a1f      	ldr	r2, [pc, #124]	@ (8002604 <HAL_I2S_MspInit+0x168>)
 8002588:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800258a:	4b1d      	ldr	r3, [pc, #116]	@ (8002600 <HAL_I2S_MspInit+0x164>)
 800258c:	2200      	movs	r2, #0
 800258e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002590:	4b1b      	ldr	r3, [pc, #108]	@ (8002600 <HAL_I2S_MspInit+0x164>)
 8002592:	2240      	movs	r2, #64	@ 0x40
 8002594:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002596:	4b1a      	ldr	r3, [pc, #104]	@ (8002600 <HAL_I2S_MspInit+0x164>)
 8002598:	2200      	movs	r2, #0
 800259a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800259c:	4b18      	ldr	r3, [pc, #96]	@ (8002600 <HAL_I2S_MspInit+0x164>)
 800259e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025a2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025a4:	4b16      	ldr	r3, [pc, #88]	@ (8002600 <HAL_I2S_MspInit+0x164>)
 80025a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025aa:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025ac:	4b14      	ldr	r3, [pc, #80]	@ (8002600 <HAL_I2S_MspInit+0x164>)
 80025ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025b2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80025b4:	4b12      	ldr	r3, [pc, #72]	@ (8002600 <HAL_I2S_MspInit+0x164>)
 80025b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025ba:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80025bc:	4b10      	ldr	r3, [pc, #64]	@ (8002600 <HAL_I2S_MspInit+0x164>)
 80025be:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80025c2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002600 <HAL_I2S_MspInit+0x164>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80025ca:	480d      	ldr	r0, [pc, #52]	@ (8002600 <HAL_I2S_MspInit+0x164>)
 80025cc:	f000 ff92 	bl	80034f4 <HAL_DMA_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 80025d6:	f7ff fa65 	bl	8001aa4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a08      	ldr	r2, [pc, #32]	@ (8002600 <HAL_I2S_MspInit+0x164>)
 80025de:	639a      	str	r2, [r3, #56]	@ 0x38
 80025e0:	4a07      	ldr	r2, [pc, #28]	@ (8002600 <HAL_I2S_MspInit+0x164>)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80025e6:	bf00      	nop
 80025e8:	3738      	adds	r7, #56	@ 0x38
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40003800 	.word	0x40003800
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40020800 	.word	0x40020800
 80025fc:	40020400 	.word	0x40020400
 8002600:	20000438 	.word	0x20000438
 8002604:	40026070 	.word	0x40026070

08002608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002618:	d10d      	bne.n	8002636 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <HAL_TIM_Base_MspInit+0x3c>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	4a08      	ldr	r2, [pc, #32]	@ (8002644 <HAL_TIM_Base_MspInit+0x3c>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	6413      	str	r3, [r2, #64]	@ 0x40
 800262a:	4b06      	ldr	r3, [pc, #24]	@ (8002644 <HAL_TIM_Base_MspInit+0x3c>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800

08002648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	@ 0x28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a19      	ldr	r2, [pc, #100]	@ (80026cc <HAL_UART_MspInit+0x84>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d12c      	bne.n	80026c4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	4b18      	ldr	r3, [pc, #96]	@ (80026d0 <HAL_UART_MspInit+0x88>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	4a17      	ldr	r2, [pc, #92]	@ (80026d0 <HAL_UART_MspInit+0x88>)
 8002674:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002678:	6413      	str	r3, [r2, #64]	@ 0x40
 800267a:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <HAL_UART_MspInit+0x88>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <HAL_UART_MspInit+0x88>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	4a10      	ldr	r2, [pc, #64]	@ (80026d0 <HAL_UART_MspInit+0x88>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	6313      	str	r3, [r2, #48]	@ 0x30
 8002696:	4b0e      	ldr	r3, [pc, #56]	@ (80026d0 <HAL_UART_MspInit+0x88>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026a2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80026a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b0:	2303      	movs	r3, #3
 80026b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80026b4:	2308      	movs	r3, #8
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b8:	f107 0314 	add.w	r3, r7, #20
 80026bc:	4619      	mov	r1, r3
 80026be:	4805      	ldr	r0, [pc, #20]	@ (80026d4 <HAL_UART_MspInit+0x8c>)
 80026c0:	f001 fa88 	bl	8003bd4 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80026c4:	bf00      	nop
 80026c6:	3728      	adds	r7, #40	@ 0x28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40004c00 	.word	0x40004c00
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40020800 	.word	0x40020800

080026d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026dc:	bf00      	nop
 80026de:	e7fd      	b.n	80026dc <NMI_Handler+0x4>

080026e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026e4:	bf00      	nop
 80026e6:	e7fd      	b.n	80026e4 <HardFault_Handler+0x4>

080026e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026ec:	bf00      	nop
 80026ee:	e7fd      	b.n	80026ec <MemManage_Handler+0x4>

080026f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <BusFault_Handler+0x4>

080026f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <UsageFault_Handler+0x4>

08002700 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800272e:	f000 f983 	bl	8002a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}

08002736 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pulse_Oximeter_Int_Pin);
 800273a:	2001      	movs	r0, #1
 800273c:	f001 fc1a 	bl	8003f74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}

08002744 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002748:	4802      	ldr	r0, [pc, #8]	@ (8002754 <DMA1_Stream4_IRQHandler+0x10>)
 800274a:	f000 ffd9 	bl	8003700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000438 	.word	0x20000438

08002758 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800275c:	4802      	ldr	r0, [pc, #8]	@ (8002768 <DMA2_Stream0_IRQHandler+0x10>)
 800275e:	f000 ffcf 	bl	8003700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	2000033c 	.word	0x2000033c

0800276c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002770:	4802      	ldr	r0, [pc, #8]	@ (800277c <OTG_FS_IRQHandler+0x10>)
 8002772:	f003 fb21 	bl	8005db8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20001be0 	.word	0x20001be0

08002780 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return 1;
 8002784:	2301      	movs	r3, #1
}
 8002786:	4618      	mov	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <_kill>:

int _kill(int pid, int sig)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800279a:	f00b fb1b 	bl	800ddd4 <__errno>
 800279e:	4603      	mov	r3, r0
 80027a0:	2216      	movs	r2, #22
 80027a2:	601a      	str	r2, [r3, #0]
  return -1;
 80027a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <_exit>:

void _exit (int status)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027b8:	f04f 31ff 	mov.w	r1, #4294967295
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff ffe7 	bl	8002790 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027c2:	bf00      	nop
 80027c4:	e7fd      	b.n	80027c2 <_exit+0x12>

080027c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	e00a      	b.n	80027ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027d8:	f3af 8000 	nop.w
 80027dc:	4601      	mov	r1, r0
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	60ba      	str	r2, [r7, #8]
 80027e4:	b2ca      	uxtb	r2, r1
 80027e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	3301      	adds	r3, #1
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	dbf0      	blt.n	80027d8 <_read+0x12>
  }

  return len;
 80027f6:	687b      	ldr	r3, [r7, #4]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	e009      	b.n	8002826 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	60ba      	str	r2, [r7, #8]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	3301      	adds	r3, #1
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	429a      	cmp	r2, r3
 800282c:	dbf1      	blt.n	8002812 <_write+0x12>
  }
  return len;
 800282e:	687b      	ldr	r3, [r7, #4]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <_close>:

int _close(int file)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002840:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002860:	605a      	str	r2, [r3, #4]
  return 0;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <_isatty>:

int _isatty(int file)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002878:	2301      	movs	r3, #1
}
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002886:	b480      	push	{r7}
 8002888:	b085      	sub	sp, #20
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a8:	4a14      	ldr	r2, [pc, #80]	@ (80028fc <_sbrk+0x5c>)
 80028aa:	4b15      	ldr	r3, [pc, #84]	@ (8002900 <_sbrk+0x60>)
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b4:	4b13      	ldr	r3, [pc, #76]	@ (8002904 <_sbrk+0x64>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d102      	bne.n	80028c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028bc:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <_sbrk+0x64>)
 80028be:	4a12      	ldr	r2, [pc, #72]	@ (8002908 <_sbrk+0x68>)
 80028c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028c2:	4b10      	ldr	r3, [pc, #64]	@ (8002904 <_sbrk+0x64>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d207      	bcs.n	80028e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028d0:	f00b fa80 	bl	800ddd4 <__errno>
 80028d4:	4603      	mov	r3, r0
 80028d6:	220c      	movs	r2, #12
 80028d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028da:	f04f 33ff 	mov.w	r3, #4294967295
 80028de:	e009      	b.n	80028f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e0:	4b08      	ldr	r3, [pc, #32]	@ (8002904 <_sbrk+0x64>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028e6:	4b07      	ldr	r3, [pc, #28]	@ (8002904 <_sbrk+0x64>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4413      	add	r3, r2
 80028ee:	4a05      	ldr	r2, [pc, #20]	@ (8002904 <_sbrk+0x64>)
 80028f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028f2:	68fb      	ldr	r3, [r7, #12]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20020000 	.word	0x20020000
 8002900:	00000400 	.word	0x00000400
 8002904:	200006f8 	.word	0x200006f8
 8002908:	20002430 	.word	0x20002430

0800290c <millis>:
  }
}

// Get number of elapsed milliseconds
uint32_t millis(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002910:	f000 f8a6 	bl	8002a60 <HAL_GetTick>
 8002914:	4603      	mov	r3, r0
}
 8002916:	4618      	mov	r0, r3
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002920:	4b06      	ldr	r3, [pc, #24]	@ (800293c <SystemInit+0x20>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002926:	4a05      	ldr	r2, [pc, #20]	@ (800293c <SystemInit+0x20>)
 8002928:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800292c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

   ldr   sp, =_estack     /* set stack pointer */
 8002940:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002978 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002944:	f7ff ffea 	bl	800291c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002948:	480c      	ldr	r0, [pc, #48]	@ (800297c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800294a:	490d      	ldr	r1, [pc, #52]	@ (8002980 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800294c:	4a0d      	ldr	r2, [pc, #52]	@ (8002984 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800294e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002950:	e002      	b.n	8002958 <LoopCopyDataInit>

08002952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002956:	3304      	adds	r3, #4

08002958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800295a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800295c:	d3f9      	bcc.n	8002952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800295e:	4a0a      	ldr	r2, [pc, #40]	@ (8002988 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002960:	4c0a      	ldr	r4, [pc, #40]	@ (800298c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002964:	e001      	b.n	800296a <LoopFillZerobss>

08002966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002968:	3204      	adds	r2, #4

0800296a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800296a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800296c:	d3fb      	bcc.n	8002966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800296e:	f00b fa37 	bl	800dde0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002972:	f7fe fbef 	bl	8001154 <main>
  bx  lr    
 8002976:	4770      	bx	lr
   ldr   sp, =_estack     /* set stack pointer */
 8002978:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800297c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002980:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8002984:	08010580 	.word	0x08010580
  ldr r2, =_sbss
 8002988:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 800298c:	20002430 	.word	0x20002430

08002990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002990:	e7fe      	b.n	8002990 <ADC_IRQHandler>
	...

08002994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002998:	4b0e      	ldr	r3, [pc, #56]	@ (80029d4 <HAL_Init+0x40>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a0d      	ldr	r2, [pc, #52]	@ (80029d4 <HAL_Init+0x40>)
 800299e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029a4:	4b0b      	ldr	r3, [pc, #44]	@ (80029d4 <HAL_Init+0x40>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a0a      	ldr	r2, [pc, #40]	@ (80029d4 <HAL_Init+0x40>)
 80029aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029b0:	4b08      	ldr	r3, [pc, #32]	@ (80029d4 <HAL_Init+0x40>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a07      	ldr	r2, [pc, #28]	@ (80029d4 <HAL_Init+0x40>)
 80029b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029bc:	2003      	movs	r0, #3
 80029be:	f000 fd57 	bl	8003470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029c2:	2000      	movs	r0, #0
 80029c4:	f000 f808 	bl	80029d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029c8:	f7ff fc80 	bl	80022cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40023c00 	.word	0x40023c00

080029d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029e0:	4b12      	ldr	r3, [pc, #72]	@ (8002a2c <HAL_InitTick+0x54>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b12      	ldr	r3, [pc, #72]	@ (8002a30 <HAL_InitTick+0x58>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	4619      	mov	r1, r3
 80029ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80029f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 fd6f 	bl	80034da <HAL_SYSTICK_Config>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e00e      	b.n	8002a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b0f      	cmp	r3, #15
 8002a0a:	d80a      	bhi.n	8002a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	f04f 30ff 	mov.w	r0, #4294967295
 8002a14:	f000 fd37 	bl	8003486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a18:	4a06      	ldr	r2, [pc, #24]	@ (8002a34 <HAL_InitTick+0x5c>)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e000      	b.n	8002a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000004 	.word	0x20000004
 8002a30:	2000000c 	.word	0x2000000c
 8002a34:	20000008 	.word	0x20000008

08002a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	@ (8002a58 <HAL_IncTick+0x20>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <HAL_IncTick+0x24>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4413      	add	r3, r2
 8002a48:	4a04      	ldr	r2, [pc, #16]	@ (8002a5c <HAL_IncTick+0x24>)
 8002a4a:	6013      	str	r3, [r2, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	2000000c 	.word	0x2000000c
 8002a5c:	200006fc 	.word	0x200006fc

08002a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return uwTick;
 8002a64:	4b03      	ldr	r3, [pc, #12]	@ (8002a74 <HAL_GetTick+0x14>)
 8002a66:	681b      	ldr	r3, [r3, #0]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	200006fc 	.word	0x200006fc

08002a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a80:	f7ff ffee 	bl	8002a60 <HAL_GetTick>
 8002a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a90:	d005      	beq.n	8002a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a92:	4b0a      	ldr	r3, [pc, #40]	@ (8002abc <HAL_Delay+0x44>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a9e:	bf00      	nop
 8002aa0:	f7ff ffde 	bl	8002a60 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d8f7      	bhi.n	8002aa0 <HAL_Delay+0x28>
  {
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	2000000c 	.word	0x2000000c

08002ac0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e033      	b.n	8002b3e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff fc1c 	bl	800231c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d118      	bne.n	8002b30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b06:	f023 0302 	bic.w	r3, r3, #2
 8002b0a:	f043 0202 	orr.w	r2, r3, #2
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fa5e 	bl	8002fd4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b22:	f023 0303 	bic.w	r3, r3, #3
 8002b26:	f043 0201 	orr.w	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b2e:	e001      	b.n	8002b34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_ADC_Start_DMA+0x1e>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e0e9      	b.n	8002d3a <HAL_ADC_Start_DMA+0x1f2>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d018      	beq.n	8002bae <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b8c:	4b6d      	ldr	r3, [pc, #436]	@ (8002d44 <HAL_ADC_Start_DMA+0x1fc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a6d      	ldr	r2, [pc, #436]	@ (8002d48 <HAL_ADC_Start_DMA+0x200>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	0c9a      	lsrs	r2, r3, #18
 8002b98:	4613      	mov	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002ba0:	e002      	b.n	8002ba8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f9      	bne.n	8002ba2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bbc:	d107      	bne.n	8002bce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bcc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	f040 80a1 	bne.w	8002d20 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002be6:	f023 0301 	bic.w	r3, r3, #1
 8002bea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d007      	beq.n	8002c10 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c04:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c08:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c1c:	d106      	bne.n	8002c2c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c22:	f023 0206 	bic.w	r2, r3, #6
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c2a:	e002      	b.n	8002c32 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c3a:	4b44      	ldr	r3, [pc, #272]	@ (8002d4c <HAL_ADC_Start_DMA+0x204>)
 8002c3c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c42:	4a43      	ldr	r2, [pc, #268]	@ (8002d50 <HAL_ADC_Start_DMA+0x208>)
 8002c44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4a:	4a42      	ldr	r2, [pc, #264]	@ (8002d54 <HAL_ADC_Start_DMA+0x20c>)
 8002c4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c52:	4a41      	ldr	r2, [pc, #260]	@ (8002d58 <HAL_ADC_Start_DMA+0x210>)
 8002c54:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002c5e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002c6e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c7e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	334c      	adds	r3, #76	@ 0x4c
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f000 fcde 	bl	8003650 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d12a      	bne.n	8002cf6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a2d      	ldr	r2, [pc, #180]	@ (8002d5c <HAL_ADC_Start_DMA+0x214>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d015      	beq.n	8002cd6 <HAL_ADC_Start_DMA+0x18e>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a2c      	ldr	r2, [pc, #176]	@ (8002d60 <HAL_ADC_Start_DMA+0x218>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d105      	bne.n	8002cc0 <HAL_ADC_Start_DMA+0x178>
 8002cb4:	4b25      	ldr	r3, [pc, #148]	@ (8002d4c <HAL_ADC_Start_DMA+0x204>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00a      	beq.n	8002cd6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a27      	ldr	r2, [pc, #156]	@ (8002d64 <HAL_ADC_Start_DMA+0x21c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d136      	bne.n	8002d38 <HAL_ADC_Start_DMA+0x1f0>
 8002cca:	4b20      	ldr	r3, [pc, #128]	@ (8002d4c <HAL_ADC_Start_DMA+0x204>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 0310 	and.w	r3, r3, #16
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d130      	bne.n	8002d38 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d129      	bne.n	8002d38 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	e020      	b.n	8002d38 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a18      	ldr	r2, [pc, #96]	@ (8002d5c <HAL_ADC_Start_DMA+0x214>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d11b      	bne.n	8002d38 <HAL_ADC_Start_DMA+0x1f0>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d114      	bne.n	8002d38 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	e00b      	b.n	8002d38 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d24:	f043 0210 	orr.w	r2, r3, #16
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d30:	f043 0201 	orr.w	r2, r3, #1
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000004 	.word	0x20000004
 8002d48:	431bde83 	.word	0x431bde83
 8002d4c:	40012300 	.word	0x40012300
 8002d50:	080031cd 	.word	0x080031cd
 8002d54:	08003287 	.word	0x08003287
 8002d58:	080032a3 	.word	0x080032a3
 8002d5c:	40012000 	.word	0x40012000
 8002d60:	40012100 	.word	0x40012100
 8002d64:	40012200 	.word	0x40012200

08002d68 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x1c>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e105      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x228>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b09      	cmp	r3, #9
 8002dba:	d925      	bls.n	8002e08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68d9      	ldr	r1, [r3, #12]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4613      	mov	r3, r2
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	4413      	add	r3, r2
 8002dd0:	3b1e      	subs	r3, #30
 8002dd2:	2207      	movs	r2, #7
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43da      	mvns	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	400a      	ands	r2, r1
 8002de0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68d9      	ldr	r1, [r3, #12]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	4618      	mov	r0, r3
 8002df4:	4603      	mov	r3, r0
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4403      	add	r3, r0
 8002dfa:	3b1e      	subs	r3, #30
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	60da      	str	r2, [r3, #12]
 8002e06:	e022      	b.n	8002e4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6919      	ldr	r1, [r3, #16]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	4613      	mov	r3, r2
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4413      	add	r3, r2
 8002e1c:	2207      	movs	r2, #7
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43da      	mvns	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	400a      	ands	r2, r1
 8002e2a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6919      	ldr	r1, [r3, #16]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	4603      	mov	r3, r0
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	4403      	add	r3, r0
 8002e44:	409a      	lsls	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b06      	cmp	r3, #6
 8002e54:	d824      	bhi.n	8002ea0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	3b05      	subs	r3, #5
 8002e68:	221f      	movs	r2, #31
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	400a      	ands	r2, r1
 8002e76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	4618      	mov	r0, r3
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	3b05      	subs	r3, #5
 8002e92:	fa00 f203 	lsl.w	r2, r0, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e9e:	e04c      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b0c      	cmp	r3, #12
 8002ea6:	d824      	bhi.n	8002ef2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3b23      	subs	r3, #35	@ 0x23
 8002eba:	221f      	movs	r2, #31
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43da      	mvns	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	400a      	ands	r2, r1
 8002ec8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3b23      	subs	r3, #35	@ 0x23
 8002ee4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ef0:	e023      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	3b41      	subs	r3, #65	@ 0x41
 8002f04:	221f      	movs	r2, #31
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43da      	mvns	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	400a      	ands	r2, r1
 8002f12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	4618      	mov	r0, r3
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3b41      	subs	r3, #65	@ 0x41
 8002f2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f3a:	4b22      	ldr	r3, [pc, #136]	@ (8002fc4 <HAL_ADC_ConfigChannel+0x234>)
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a21      	ldr	r2, [pc, #132]	@ (8002fc8 <HAL_ADC_ConfigChannel+0x238>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d109      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x1cc>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b12      	cmp	r3, #18
 8002f4e:	d105      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a19      	ldr	r2, [pc, #100]	@ (8002fc8 <HAL_ADC_ConfigChannel+0x238>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d123      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x21e>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b10      	cmp	r3, #16
 8002f6c:	d003      	beq.n	8002f76 <HAL_ADC_ConfigChannel+0x1e6>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b11      	cmp	r3, #17
 8002f74:	d11b      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b10      	cmp	r3, #16
 8002f88:	d111      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f8a:	4b10      	ldr	r3, [pc, #64]	@ (8002fcc <HAL_ADC_ConfigChannel+0x23c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a10      	ldr	r2, [pc, #64]	@ (8002fd0 <HAL_ADC_ConfigChannel+0x240>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	0c9a      	lsrs	r2, r3, #18
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fa0:	e002      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f9      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	40012300 	.word	0x40012300
 8002fc8:	40012000 	.word	0x40012000
 8002fcc:	20000004 	.word	0x20000004
 8002fd0:	431bde83 	.word	0x431bde83

08002fd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fdc:	4b79      	ldr	r3, [pc, #484]	@ (80031c4 <ADC_Init+0x1f0>)
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003008:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	021a      	lsls	r2, r3, #8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800302c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6859      	ldr	r1, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800304e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6899      	ldr	r1, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003066:	4a58      	ldr	r2, [pc, #352]	@ (80031c8 <ADC_Init+0x1f4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d022      	beq.n	80030b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800307a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6899      	ldr	r1, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800309c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6899      	ldr	r1, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	e00f      	b.n	80030d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0202 	bic.w	r2, r2, #2
 80030e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6899      	ldr	r1, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	7e1b      	ldrb	r3, [r3, #24]
 80030ec:	005a      	lsls	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01b      	beq.n	8003138 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800310e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800311e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6859      	ldr	r1, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	3b01      	subs	r3, #1
 800312c:	035a      	lsls	r2, r3, #13
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	e007      	b.n	8003148 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003146:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003156:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	3b01      	subs	r3, #1
 8003164:	051a      	lsls	r2, r3, #20
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800317c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6899      	ldr	r1, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800318a:	025a      	lsls	r2, r3, #9
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6899      	ldr	r1, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	029a      	lsls	r2, r3, #10
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	609a      	str	r2, [r3, #8]
}
 80031b8:	bf00      	nop
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	40012300 	.word	0x40012300
 80031c8:	0f000001 	.word	0x0f000001

080031cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d13c      	bne.n	8003260 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d12b      	bne.n	8003258 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003204:	2b00      	cmp	r3, #0
 8003206:	d127      	bne.n	8003258 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003212:	2b00      	cmp	r3, #0
 8003214:	d006      	beq.n	8003224 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003220:	2b00      	cmp	r3, #0
 8003222:	d119      	bne.n	8003258 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0220 	bic.w	r2, r2, #32
 8003232:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d105      	bne.n	8003258 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003250:	f043 0201 	orr.w	r2, r3, #1
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f7fe fb65 	bl	8001928 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800325e:	e00e      	b.n	800327e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7ff fd85 	bl	8002d7c <HAL_ADC_ErrorCallback>
}
 8003272:	e004      	b.n	800327e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	4798      	blx	r3
}
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003292:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f7ff fd67 	bl	8002d68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ae:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2240      	movs	r2, #64	@ 0x40
 80032b4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ba:	f043 0204 	orr.w	r2, r3, #4
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f7ff fd5a 	bl	8002d7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003314 <__NVIC_SetPriorityGrouping+0x44>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032ec:	4013      	ands	r3, r2
 80032ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003302:	4a04      	ldr	r2, [pc, #16]	@ (8003314 <__NVIC_SetPriorityGrouping+0x44>)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	60d3      	str	r3, [r2, #12]
}
 8003308:	bf00      	nop
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800331c:	4b04      	ldr	r3, [pc, #16]	@ (8003330 <__NVIC_GetPriorityGrouping+0x18>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	0a1b      	lsrs	r3, r3, #8
 8003322:	f003 0307 	and.w	r3, r3, #7
}
 8003326:	4618      	mov	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003342:	2b00      	cmp	r3, #0
 8003344:	db0b      	blt.n	800335e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	f003 021f 	and.w	r2, r3, #31
 800334c:	4907      	ldr	r1, [pc, #28]	@ (800336c <__NVIC_EnableIRQ+0x38>)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	2001      	movs	r0, #1
 8003356:	fa00 f202 	lsl.w	r2, r0, r2
 800335a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	e000e100 	.word	0xe000e100

08003370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	6039      	str	r1, [r7, #0]
 800337a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800337c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003380:	2b00      	cmp	r3, #0
 8003382:	db0a      	blt.n	800339a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	b2da      	uxtb	r2, r3
 8003388:	490c      	ldr	r1, [pc, #48]	@ (80033bc <__NVIC_SetPriority+0x4c>)
 800338a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338e:	0112      	lsls	r2, r2, #4
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	440b      	add	r3, r1
 8003394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003398:	e00a      	b.n	80033b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	b2da      	uxtb	r2, r3
 800339e:	4908      	ldr	r1, [pc, #32]	@ (80033c0 <__NVIC_SetPriority+0x50>)
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	3b04      	subs	r3, #4
 80033a8:	0112      	lsls	r2, r2, #4
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	440b      	add	r3, r1
 80033ae:	761a      	strb	r2, [r3, #24]
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	e000e100 	.word	0xe000e100
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b089      	sub	sp, #36	@ 0x24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f1c3 0307 	rsb	r3, r3, #7
 80033de:	2b04      	cmp	r3, #4
 80033e0:	bf28      	it	cs
 80033e2:	2304      	movcs	r3, #4
 80033e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	3304      	adds	r3, #4
 80033ea:	2b06      	cmp	r3, #6
 80033ec:	d902      	bls.n	80033f4 <NVIC_EncodePriority+0x30>
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3b03      	subs	r3, #3
 80033f2:	e000      	b.n	80033f6 <NVIC_EncodePriority+0x32>
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f8:	f04f 32ff 	mov.w	r2, #4294967295
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43da      	mvns	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	401a      	ands	r2, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800340c:	f04f 31ff 	mov.w	r1, #4294967295
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	fa01 f303 	lsl.w	r3, r1, r3
 8003416:	43d9      	mvns	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800341c:	4313      	orrs	r3, r2
         );
}
 800341e:	4618      	mov	r0, r3
 8003420:	3724      	adds	r7, #36	@ 0x24
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3b01      	subs	r3, #1
 8003438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800343c:	d301      	bcc.n	8003442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800343e:	2301      	movs	r3, #1
 8003440:	e00f      	b.n	8003462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003442:	4a0a      	ldr	r2, [pc, #40]	@ (800346c <SysTick_Config+0x40>)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3b01      	subs	r3, #1
 8003448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800344a:	210f      	movs	r1, #15
 800344c:	f04f 30ff 	mov.w	r0, #4294967295
 8003450:	f7ff ff8e 	bl	8003370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003454:	4b05      	ldr	r3, [pc, #20]	@ (800346c <SysTick_Config+0x40>)
 8003456:	2200      	movs	r2, #0
 8003458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800345a:	4b04      	ldr	r3, [pc, #16]	@ (800346c <SysTick_Config+0x40>)
 800345c:	2207      	movs	r2, #7
 800345e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	e000e010 	.word	0xe000e010

08003470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff ff29 	bl	80032d0 <__NVIC_SetPriorityGrouping>
}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003486:	b580      	push	{r7, lr}
 8003488:	b086      	sub	sp, #24
 800348a:	af00      	add	r7, sp, #0
 800348c:	4603      	mov	r3, r0
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	607a      	str	r2, [r7, #4]
 8003492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003498:	f7ff ff3e 	bl	8003318 <__NVIC_GetPriorityGrouping>
 800349c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	6978      	ldr	r0, [r7, #20]
 80034a4:	f7ff ff8e 	bl	80033c4 <NVIC_EncodePriority>
 80034a8:	4602      	mov	r2, r0
 80034aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ae:	4611      	mov	r1, r2
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff ff5d 	bl	8003370 <__NVIC_SetPriority>
}
 80034b6:	bf00      	nop
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	4603      	mov	r3, r0
 80034c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff31 	bl	8003334 <__NVIC_EnableIRQ>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff ffa2 	bl	800342c <SysTick_Config>
 80034e8:	4603      	mov	r3, r0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003500:	f7ff faae 	bl	8002a60 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e099      	b.n	8003644 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0201 	bic.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003530:	e00f      	b.n	8003552 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003532:	f7ff fa95 	bl	8002a60 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b05      	cmp	r3, #5
 800353e:	d908      	bls.n	8003552 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2203      	movs	r2, #3
 800354a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e078      	b.n	8003644 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e8      	bne.n	8003532 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4b38      	ldr	r3, [pc, #224]	@ (800364c <HAL_DMA_Init+0x158>)
 800356c:	4013      	ands	r3, r2
 800356e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800357e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800358a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003596:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d107      	bne.n	80035bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b4:	4313      	orrs	r3, r2
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f023 0307 	bic.w	r3, r3, #7
 80035d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d117      	bne.n	8003616 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00e      	beq.n	8003616 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 fa6f 	bl	8003adc <DMA_CheckFifoParam>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2240      	movs	r2, #64	@ 0x40
 8003608:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003612:	2301      	movs	r3, #1
 8003614:	e016      	b.n	8003644 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fa26 	bl	8003a70 <DMA_CalcBaseAndBitshift>
 8003624:	4603      	mov	r3, r0
 8003626:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362c:	223f      	movs	r2, #63	@ 0x3f
 800362e:	409a      	lsls	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	f010803f 	.word	0xf010803f

08003650 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003666:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_DMA_Start_IT+0x26>
 8003672:	2302      	movs	r3, #2
 8003674:	e040      	b.n	80036f8 <HAL_DMA_Start_IT+0xa8>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	d12f      	bne.n	80036ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2202      	movs	r2, #2
 800368e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f9b8 	bl	8003a14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a8:	223f      	movs	r2, #63	@ 0x3f
 80036aa:	409a      	lsls	r2, r3
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0216 	orr.w	r2, r2, #22
 80036be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d007      	beq.n	80036d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0208 	orr.w	r2, r2, #8
 80036d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	e005      	b.n	80036f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036f2:	2302      	movs	r3, #2
 80036f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800370c:	4b8e      	ldr	r3, [pc, #568]	@ (8003948 <HAL_DMA_IRQHandler+0x248>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a8e      	ldr	r2, [pc, #568]	@ (800394c <HAL_DMA_IRQHandler+0x24c>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0a9b      	lsrs	r3, r3, #10
 8003718:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800371e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372a:	2208      	movs	r2, #8
 800372c:	409a      	lsls	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4013      	ands	r3, r2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01a      	beq.n	800376c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d013      	beq.n	800376c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0204 	bic.w	r2, r2, #4
 8003752:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003758:	2208      	movs	r2, #8
 800375a:	409a      	lsls	r2, r3
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003764:	f043 0201 	orr.w	r2, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003770:	2201      	movs	r2, #1
 8003772:	409a      	lsls	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d012      	beq.n	80037a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378e:	2201      	movs	r2, #1
 8003790:	409a      	lsls	r2, r3
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379a:	f043 0202 	orr.w	r2, r3, #2
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a6:	2204      	movs	r2, #4
 80037a8:	409a      	lsls	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d012      	beq.n	80037d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00b      	beq.n	80037d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c4:	2204      	movs	r2, #4
 80037c6:	409a      	lsls	r2, r3
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d0:	f043 0204 	orr.w	r2, r3, #4
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037dc:	2210      	movs	r2, #16
 80037de:	409a      	lsls	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d043      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d03c      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fa:	2210      	movs	r2, #16
 80037fc:	409a      	lsls	r2, r3
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d018      	beq.n	8003842 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d108      	bne.n	8003830 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d024      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4798      	blx	r3
 800382e:	e01f      	b.n	8003870 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01b      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
 8003840:	e016      	b.n	8003870 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d107      	bne.n	8003860 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0208 	bic.w	r2, r2, #8
 800385e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003874:	2220      	movs	r2, #32
 8003876:	409a      	lsls	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 808f 	beq.w	80039a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8087 	beq.w	80039a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003896:	2220      	movs	r2, #32
 8003898:	409a      	lsls	r2, r3
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b05      	cmp	r3, #5
 80038a8:	d136      	bne.n	8003918 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0216 	bic.w	r2, r2, #22
 80038b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d103      	bne.n	80038da <HAL_DMA_IRQHandler+0x1da>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d007      	beq.n	80038ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0208 	bic.w	r2, r2, #8
 80038e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ee:	223f      	movs	r2, #63	@ 0x3f
 80038f0:	409a      	lsls	r2, r3
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800390a:	2b00      	cmp	r3, #0
 800390c:	d07e      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	4798      	blx	r3
        }
        return;
 8003916:	e079      	b.n	8003a0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d01d      	beq.n	8003962 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10d      	bne.n	8003950 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003938:	2b00      	cmp	r3, #0
 800393a:	d031      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4798      	blx	r3
 8003944:	e02c      	b.n	80039a0 <HAL_DMA_IRQHandler+0x2a0>
 8003946:	bf00      	nop
 8003948:	20000004 	.word	0x20000004
 800394c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003954:	2b00      	cmp	r3, #0
 8003956:	d023      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	4798      	blx	r3
 8003960:	e01e      	b.n	80039a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10f      	bne.n	8003990 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0210 	bic.w	r2, r2, #16
 800397e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d032      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d022      	beq.n	80039fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2205      	movs	r2, #5
 80039b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0201 	bic.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	3301      	adds	r3, #1
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d307      	bcc.n	80039e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f2      	bne.n	80039cc <HAL_DMA_IRQHandler+0x2cc>
 80039e6:	e000      	b.n	80039ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80039e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	4798      	blx	r3
 8003a0a:	e000      	b.n	8003a0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a0c:	bf00      	nop
    }
  }
}
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b40      	cmp	r3, #64	@ 0x40
 8003a40:	d108      	bne.n	8003a54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a52:	e007      	b.n	8003a64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	60da      	str	r2, [r3, #12]
}
 8003a64:	bf00      	nop
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	3b10      	subs	r3, #16
 8003a80:	4a14      	ldr	r2, [pc, #80]	@ (8003ad4 <DMA_CalcBaseAndBitshift+0x64>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	091b      	lsrs	r3, r3, #4
 8003a88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a8a:	4a13      	ldr	r2, [pc, #76]	@ (8003ad8 <DMA_CalcBaseAndBitshift+0x68>)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4413      	add	r3, r2
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d909      	bls.n	8003ab2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003aa6:	f023 0303 	bic.w	r3, r3, #3
 8003aaa:	1d1a      	adds	r2, r3, #4
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ab0:	e007      	b.n	8003ac2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003aba:	f023 0303 	bic.w	r3, r3, #3
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	aaaaaaab 	.word	0xaaaaaaab
 8003ad8:	080101f8 	.word	0x080101f8

08003adc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d11f      	bne.n	8003b36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d856      	bhi.n	8003baa <DMA_CheckFifoParam+0xce>
 8003afc:	a201      	add	r2, pc, #4	@ (adr r2, 8003b04 <DMA_CheckFifoParam+0x28>)
 8003afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b02:	bf00      	nop
 8003b04:	08003b15 	.word	0x08003b15
 8003b08:	08003b27 	.word	0x08003b27
 8003b0c:	08003b15 	.word	0x08003b15
 8003b10:	08003bab 	.word	0x08003bab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d046      	beq.n	8003bae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b24:	e043      	b.n	8003bae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b2e:	d140      	bne.n	8003bb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b34:	e03d      	b.n	8003bb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b3e:	d121      	bne.n	8003b84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d837      	bhi.n	8003bb6 <DMA_CheckFifoParam+0xda>
 8003b46:	a201      	add	r2, pc, #4	@ (adr r2, 8003b4c <DMA_CheckFifoParam+0x70>)
 8003b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4c:	08003b5d 	.word	0x08003b5d
 8003b50:	08003b63 	.word	0x08003b63
 8003b54:	08003b5d 	.word	0x08003b5d
 8003b58:	08003b75 	.word	0x08003b75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b60:	e030      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d025      	beq.n	8003bba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b72:	e022      	b.n	8003bba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b78:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b7c:	d11f      	bne.n	8003bbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b82:	e01c      	b.n	8003bbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d903      	bls.n	8003b92 <DMA_CheckFifoParam+0xb6>
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d003      	beq.n	8003b98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b90:	e018      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	73fb      	strb	r3, [r7, #15]
      break;
 8003b96:	e015      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00e      	beq.n	8003bc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba8:	e00b      	b.n	8003bc2 <DMA_CheckFifoParam+0xe6>
      break;
 8003baa:	bf00      	nop
 8003bac:	e00a      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bae:	bf00      	nop
 8003bb0:	e008      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e006      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e004      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e002      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bbe:	bf00      	nop
 8003bc0:	e000      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bc2:	bf00      	nop
    }
  } 
  
  return status; 
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop

08003bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b089      	sub	sp, #36	@ 0x24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
 8003bee:	e16b      	b.n	8003ec8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4013      	ands	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	f040 815a 	bne.w	8003ec2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d005      	beq.n	8003c26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d130      	bne.n	8003c88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	2203      	movs	r2, #3
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	43db      	mvns	r3, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	f003 0201 	and.w	r2, r3, #1
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d017      	beq.n	8003cc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	2203      	movs	r2, #3
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d123      	bne.n	8003d18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	08da      	lsrs	r2, r3, #3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3208      	adds	r2, #8
 8003cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	220f      	movs	r2, #15
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	08da      	lsrs	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3208      	adds	r2, #8
 8003d12:	69b9      	ldr	r1, [r7, #24]
 8003d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	2203      	movs	r2, #3
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 0203 	and.w	r2, r3, #3
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80b4 	beq.w	8003ec2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	4b60      	ldr	r3, [pc, #384]	@ (8003ee0 <HAL_GPIO_Init+0x30c>)
 8003d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d62:	4a5f      	ldr	r2, [pc, #380]	@ (8003ee0 <HAL_GPIO_Init+0x30c>)
 8003d64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d68:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d6a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ee0 <HAL_GPIO_Init+0x30c>)
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d76:	4a5b      	ldr	r2, [pc, #364]	@ (8003ee4 <HAL_GPIO_Init+0x310>)
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	089b      	lsrs	r3, r3, #2
 8003d7c:	3302      	adds	r3, #2
 8003d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	220f      	movs	r2, #15
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43db      	mvns	r3, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4013      	ands	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a52      	ldr	r2, [pc, #328]	@ (8003ee8 <HAL_GPIO_Init+0x314>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d02b      	beq.n	8003dfa <HAL_GPIO_Init+0x226>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a51      	ldr	r2, [pc, #324]	@ (8003eec <HAL_GPIO_Init+0x318>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d025      	beq.n	8003df6 <HAL_GPIO_Init+0x222>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a50      	ldr	r2, [pc, #320]	@ (8003ef0 <HAL_GPIO_Init+0x31c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d01f      	beq.n	8003df2 <HAL_GPIO_Init+0x21e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a4f      	ldr	r2, [pc, #316]	@ (8003ef4 <HAL_GPIO_Init+0x320>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d019      	beq.n	8003dee <HAL_GPIO_Init+0x21a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a4e      	ldr	r2, [pc, #312]	@ (8003ef8 <HAL_GPIO_Init+0x324>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d013      	beq.n	8003dea <HAL_GPIO_Init+0x216>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a4d      	ldr	r2, [pc, #308]	@ (8003efc <HAL_GPIO_Init+0x328>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00d      	beq.n	8003de6 <HAL_GPIO_Init+0x212>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a4c      	ldr	r2, [pc, #304]	@ (8003f00 <HAL_GPIO_Init+0x32c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d007      	beq.n	8003de2 <HAL_GPIO_Init+0x20e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a4b      	ldr	r2, [pc, #300]	@ (8003f04 <HAL_GPIO_Init+0x330>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d101      	bne.n	8003dde <HAL_GPIO_Init+0x20a>
 8003dda:	2307      	movs	r3, #7
 8003ddc:	e00e      	b.n	8003dfc <HAL_GPIO_Init+0x228>
 8003dde:	2308      	movs	r3, #8
 8003de0:	e00c      	b.n	8003dfc <HAL_GPIO_Init+0x228>
 8003de2:	2306      	movs	r3, #6
 8003de4:	e00a      	b.n	8003dfc <HAL_GPIO_Init+0x228>
 8003de6:	2305      	movs	r3, #5
 8003de8:	e008      	b.n	8003dfc <HAL_GPIO_Init+0x228>
 8003dea:	2304      	movs	r3, #4
 8003dec:	e006      	b.n	8003dfc <HAL_GPIO_Init+0x228>
 8003dee:	2303      	movs	r3, #3
 8003df0:	e004      	b.n	8003dfc <HAL_GPIO_Init+0x228>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e002      	b.n	8003dfc <HAL_GPIO_Init+0x228>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_GPIO_Init+0x228>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	f002 0203 	and.w	r2, r2, #3
 8003e02:	0092      	lsls	r2, r2, #2
 8003e04:	4093      	lsls	r3, r2
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e0c:	4935      	ldr	r1, [pc, #212]	@ (8003ee4 <HAL_GPIO_Init+0x310>)
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	089b      	lsrs	r3, r3, #2
 8003e12:	3302      	adds	r3, #2
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f08 <HAL_GPIO_Init+0x334>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	43db      	mvns	r3, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4013      	ands	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e3e:	4a32      	ldr	r2, [pc, #200]	@ (8003f08 <HAL_GPIO_Init+0x334>)
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e44:	4b30      	ldr	r3, [pc, #192]	@ (8003f08 <HAL_GPIO_Init+0x334>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4013      	ands	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e68:	4a27      	ldr	r2, [pc, #156]	@ (8003f08 <HAL_GPIO_Init+0x334>)
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e6e:	4b26      	ldr	r3, [pc, #152]	@ (8003f08 <HAL_GPIO_Init+0x334>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	43db      	mvns	r3, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e92:	4a1d      	ldr	r2, [pc, #116]	@ (8003f08 <HAL_GPIO_Init+0x334>)
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e98:	4b1b      	ldr	r3, [pc, #108]	@ (8003f08 <HAL_GPIO_Init+0x334>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ebc:	4a12      	ldr	r2, [pc, #72]	@ (8003f08 <HAL_GPIO_Init+0x334>)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	2b0f      	cmp	r3, #15
 8003ecc:	f67f ae90 	bls.w	8003bf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ed0:	bf00      	nop
 8003ed2:	bf00      	nop
 8003ed4:	3724      	adds	r7, #36	@ 0x24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	40013800 	.word	0x40013800
 8003ee8:	40020000 	.word	0x40020000
 8003eec:	40020400 	.word	0x40020400
 8003ef0:	40020800 	.word	0x40020800
 8003ef4:	40020c00 	.word	0x40020c00
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40021400 	.word	0x40021400
 8003f00:	40021800 	.word	0x40021800
 8003f04:	40021c00 	.word	0x40021c00
 8003f08:	40013c00 	.word	0x40013c00

08003f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	807b      	strh	r3, [r7, #2]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f1c:	787b      	ldrb	r3, [r7, #1]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f22:	887a      	ldrh	r2, [r7, #2]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f28:	e003      	b.n	8003f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f2a:	887b      	ldrh	r3, [r7, #2]
 8003f2c:	041a      	lsls	r2, r3, #16
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	619a      	str	r2, [r3, #24]
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b085      	sub	sp, #20
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	460b      	mov	r3, r1
 8003f48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f50:	887a      	ldrh	r2, [r7, #2]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4013      	ands	r3, r2
 8003f56:	041a      	lsls	r2, r3, #16
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	43d9      	mvns	r1, r3
 8003f5c:	887b      	ldrh	r3, [r7, #2]
 8003f5e:	400b      	ands	r3, r1
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	619a      	str	r2, [r3, #24]
}
 8003f66:	bf00      	nop
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
	...

08003f74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f7e:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f80:	695a      	ldr	r2, [r3, #20]
 8003f82:	88fb      	ldrh	r3, [r7, #6]
 8003f84:	4013      	ands	r3, r2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d006      	beq.n	8003f98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f8a:	4a05      	ldr	r2, [pc, #20]	@ (8003fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f8c:	88fb      	ldrh	r3, [r7, #6]
 8003f8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f90:	88fb      	ldrh	r3, [r7, #6]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fd fcb4 	bl	8001900 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f98:	bf00      	nop
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40013c00 	.word	0x40013c00

08003fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e12b      	b.n	800420e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fe fa1e 	bl	800240c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2224      	movs	r2, #36	@ 0x24
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0201 	bic.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ff6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004006:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004008:	f003 fc54 	bl	80078b4 <HAL_RCC_GetPCLK1Freq>
 800400c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	4a81      	ldr	r2, [pc, #516]	@ (8004218 <HAL_I2C_Init+0x274>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d807      	bhi.n	8004028 <HAL_I2C_Init+0x84>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4a80      	ldr	r2, [pc, #512]	@ (800421c <HAL_I2C_Init+0x278>)
 800401c:	4293      	cmp	r3, r2
 800401e:	bf94      	ite	ls
 8004020:	2301      	movls	r3, #1
 8004022:	2300      	movhi	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	e006      	b.n	8004036 <HAL_I2C_Init+0x92>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4a7d      	ldr	r2, [pc, #500]	@ (8004220 <HAL_I2C_Init+0x27c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	bf94      	ite	ls
 8004030:	2301      	movls	r3, #1
 8004032:	2300      	movhi	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e0e7      	b.n	800420e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4a78      	ldr	r2, [pc, #480]	@ (8004224 <HAL_I2C_Init+0x280>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	0c9b      	lsrs	r3, r3, #18
 8004048:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	430a      	orrs	r2, r1
 800405c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	4a6a      	ldr	r2, [pc, #424]	@ (8004218 <HAL_I2C_Init+0x274>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d802      	bhi.n	8004078 <HAL_I2C_Init+0xd4>
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	3301      	adds	r3, #1
 8004076:	e009      	b.n	800408c <HAL_I2C_Init+0xe8>
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	4a69      	ldr	r2, [pc, #420]	@ (8004228 <HAL_I2C_Init+0x284>)
 8004084:	fba2 2303 	umull	r2, r3, r2, r3
 8004088:	099b      	lsrs	r3, r3, #6
 800408a:	3301      	adds	r3, #1
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	430b      	orrs	r3, r1
 8004092:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800409e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	495c      	ldr	r1, [pc, #368]	@ (8004218 <HAL_I2C_Init+0x274>)
 80040a8:	428b      	cmp	r3, r1
 80040aa:	d819      	bhi.n	80040e0 <HAL_I2C_Init+0x13c>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1e59      	subs	r1, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ba:	1c59      	adds	r1, r3, #1
 80040bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040c0:	400b      	ands	r3, r1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_I2C_Init+0x138>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	1e59      	subs	r1, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80040d4:	3301      	adds	r3, #1
 80040d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040da:	e051      	b.n	8004180 <HAL_I2C_Init+0x1dc>
 80040dc:	2304      	movs	r3, #4
 80040de:	e04f      	b.n	8004180 <HAL_I2C_Init+0x1dc>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d111      	bne.n	800410c <HAL_I2C_Init+0x168>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	1e58      	subs	r0, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6859      	ldr	r1, [r3, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	440b      	add	r3, r1
 80040f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040fa:	3301      	adds	r3, #1
 80040fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	e012      	b.n	8004132 <HAL_I2C_Init+0x18e>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	1e58      	subs	r0, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6859      	ldr	r1, [r3, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	0099      	lsls	r1, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004122:	3301      	adds	r3, #1
 8004124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004128:	2b00      	cmp	r3, #0
 800412a:	bf0c      	ite	eq
 800412c:	2301      	moveq	r3, #1
 800412e:	2300      	movne	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_I2C_Init+0x196>
 8004136:	2301      	movs	r3, #1
 8004138:	e022      	b.n	8004180 <HAL_I2C_Init+0x1dc>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10e      	bne.n	8004160 <HAL_I2C_Init+0x1bc>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1e58      	subs	r0, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6859      	ldr	r1, [r3, #4]
 800414a:	460b      	mov	r3, r1
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	440b      	add	r3, r1
 8004150:	fbb0 f3f3 	udiv	r3, r0, r3
 8004154:	3301      	adds	r3, #1
 8004156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800415a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800415e:	e00f      	b.n	8004180 <HAL_I2C_Init+0x1dc>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	1e58      	subs	r0, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6859      	ldr	r1, [r3, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	0099      	lsls	r1, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	fbb0 f3f3 	udiv	r3, r0, r3
 8004176:	3301      	adds	r3, #1
 8004178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800417c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	6809      	ldr	r1, [r1, #0]
 8004184:	4313      	orrs	r3, r2
 8004186:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69da      	ldr	r2, [r3, #28]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80041ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6911      	ldr	r1, [r2, #16]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	68d2      	ldr	r2, [r2, #12]
 80041ba:	4311      	orrs	r1, r2
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6812      	ldr	r2, [r2, #0]
 80041c0:	430b      	orrs	r3, r1
 80041c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	000186a0 	.word	0x000186a0
 800421c:	001e847f 	.word	0x001e847f
 8004220:	003d08ff 	.word	0x003d08ff
 8004224:	431bde83 	.word	0x431bde83
 8004228:	10624dd3 	.word	0x10624dd3

0800422c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af02      	add	r7, sp, #8
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	4608      	mov	r0, r1
 8004236:	4611      	mov	r1, r2
 8004238:	461a      	mov	r2, r3
 800423a:	4603      	mov	r3, r0
 800423c:	817b      	strh	r3, [r7, #10]
 800423e:	460b      	mov	r3, r1
 8004240:	813b      	strh	r3, [r7, #8]
 8004242:	4613      	mov	r3, r2
 8004244:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004246:	f7fe fc0b 	bl	8002a60 <HAL_GetTick>
 800424a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b20      	cmp	r3, #32
 8004256:	f040 80d9 	bne.w	800440c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	2319      	movs	r3, #25
 8004260:	2201      	movs	r2, #1
 8004262:	496d      	ldr	r1, [pc, #436]	@ (8004418 <HAL_I2C_Mem_Write+0x1ec>)
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 fc8b 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004270:	2302      	movs	r3, #2
 8004272:	e0cc      	b.n	800440e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_I2C_Mem_Write+0x56>
 800427e:	2302      	movs	r3, #2
 8004280:	e0c5      	b.n	800440e <HAL_I2C_Mem_Write+0x1e2>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b01      	cmp	r3, #1
 8004296:	d007      	beq.n	80042a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2221      	movs	r2, #33	@ 0x21
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2240      	movs	r2, #64	@ 0x40
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a3a      	ldr	r2, [r7, #32]
 80042d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4a4d      	ldr	r2, [pc, #308]	@ (800441c <HAL_I2C_Mem_Write+0x1f0>)
 80042e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042ea:	88f8      	ldrh	r0, [r7, #6]
 80042ec:	893a      	ldrh	r2, [r7, #8]
 80042ee:	8979      	ldrh	r1, [r7, #10]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	9301      	str	r3, [sp, #4]
 80042f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	4603      	mov	r3, r0
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 fac2 	bl	8004884 <I2C_RequestMemoryWrite>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d052      	beq.n	80043ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e081      	b.n	800440e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 fd50 	bl	8004db4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00d      	beq.n	8004336 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431e:	2b04      	cmp	r3, #4
 8004320:	d107      	bne.n	8004332 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004330:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e06b      	b.n	800440e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	781a      	ldrb	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b04      	cmp	r3, #4
 8004372:	d11b      	bne.n	80043ac <HAL_I2C_Mem_Write+0x180>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004378:	2b00      	cmp	r3, #0
 800437a:	d017      	beq.n	80043ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	781a      	ldrb	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1aa      	bne.n	800430a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 fd43 	bl	8004e44 <I2C_WaitOnBTFFlagUntilTimeout>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00d      	beq.n	80043e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d107      	bne.n	80043dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e016      	b.n	800440e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	e000      	b.n	800440e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800440c:	2302      	movs	r3, #2
  }
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	00100002 	.word	0x00100002
 800441c:	ffff0000 	.word	0xffff0000

08004420 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08c      	sub	sp, #48	@ 0x30
 8004424:	af02      	add	r7, sp, #8
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	4608      	mov	r0, r1
 800442a:	4611      	mov	r1, r2
 800442c:	461a      	mov	r2, r3
 800442e:	4603      	mov	r3, r0
 8004430:	817b      	strh	r3, [r7, #10]
 8004432:	460b      	mov	r3, r1
 8004434:	813b      	strh	r3, [r7, #8]
 8004436:	4613      	mov	r3, r2
 8004438:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800443a:	f7fe fb11 	bl	8002a60 <HAL_GetTick>
 800443e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b20      	cmp	r3, #32
 800444a:	f040 8214 	bne.w	8004876 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	2319      	movs	r3, #25
 8004454:	2201      	movs	r2, #1
 8004456:	497b      	ldr	r1, [pc, #492]	@ (8004644 <HAL_I2C_Mem_Read+0x224>)
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 fb91 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004464:	2302      	movs	r3, #2
 8004466:	e207      	b.n	8004878 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_I2C_Mem_Read+0x56>
 8004472:	2302      	movs	r3, #2
 8004474:	e200      	b.n	8004878 <HAL_I2C_Mem_Read+0x458>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b01      	cmp	r3, #1
 800448a:	d007      	beq.n	800449c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2222      	movs	r2, #34	@ 0x22
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2240      	movs	r2, #64	@ 0x40
 80044b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80044cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4a5b      	ldr	r2, [pc, #364]	@ (8004648 <HAL_I2C_Mem_Read+0x228>)
 80044dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044de:	88f8      	ldrh	r0, [r7, #6]
 80044e0:	893a      	ldrh	r2, [r7, #8]
 80044e2:	8979      	ldrh	r1, [r7, #10]
 80044e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e6:	9301      	str	r3, [sp, #4]
 80044e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	4603      	mov	r3, r0
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 fa5e 	bl	80049b0 <I2C_RequestMemoryRead>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e1bc      	b.n	8004878 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004502:	2b00      	cmp	r3, #0
 8004504:	d113      	bne.n	800452e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004506:	2300      	movs	r3, #0
 8004508:	623b      	str	r3, [r7, #32]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	623b      	str	r3, [r7, #32]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	623b      	str	r3, [r7, #32]
 800451a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	e190      	b.n	8004850 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004532:	2b01      	cmp	r3, #1
 8004534:	d11b      	bne.n	800456e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004544:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004546:	2300      	movs	r3, #0
 8004548:	61fb      	str	r3, [r7, #28]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	61fb      	str	r3, [r7, #28]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	61fb      	str	r3, [r7, #28]
 800455a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	e170      	b.n	8004850 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004572:	2b02      	cmp	r3, #2
 8004574:	d11b      	bne.n	80045ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004584:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004594:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004596:	2300      	movs	r3, #0
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	61bb      	str	r3, [r7, #24]
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	e150      	b.n	8004850 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80045c4:	e144      	b.n	8004850 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	f200 80f1 	bhi.w	80047b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d123      	bne.n	8004620 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 fc79 	bl	8004ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e145      	b.n	8004878 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004614:	b29b      	uxth	r3, r3
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800461e:	e117      	b.n	8004850 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004624:	2b02      	cmp	r3, #2
 8004626:	d14e      	bne.n	80046c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462e:	2200      	movs	r2, #0
 8004630:	4906      	ldr	r1, [pc, #24]	@ (800464c <HAL_I2C_Mem_Read+0x22c>)
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 faa4 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d008      	beq.n	8004650 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e11a      	b.n	8004878 <HAL_I2C_Mem_Read+0x458>
 8004642:	bf00      	nop
 8004644:	00100002 	.word	0x00100002
 8004648:	ffff0000 	.word	0xffff0000
 800464c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800465e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046c4:	e0c4      	b.n	8004850 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046cc:	2200      	movs	r2, #0
 80046ce:	496c      	ldr	r1, [pc, #432]	@ (8004880 <HAL_I2C_Mem_Read+0x460>)
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fa55 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e0cb      	b.n	8004878 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691a      	ldr	r2, [r3, #16]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004728:	2200      	movs	r2, #0
 800472a:	4955      	ldr	r1, [pc, #340]	@ (8004880 <HAL_I2C_Mem_Read+0x460>)
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 fa27 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e09d      	b.n	8004878 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800474a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047b0:	e04e      	b.n	8004850 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fb8c 	bl	8004ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e058      	b.n	8004878 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f003 0304 	and.w	r3, r3, #4
 8004802:	2b04      	cmp	r3, #4
 8004804:	d124      	bne.n	8004850 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800480a:	2b03      	cmp	r3, #3
 800480c:	d107      	bne.n	800481e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800481c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004854:	2b00      	cmp	r3, #0
 8004856:	f47f aeb6 	bne.w	80045c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2220      	movs	r2, #32
 800485e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	e000      	b.n	8004878 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004876:	2302      	movs	r3, #2
  }
}
 8004878:	4618      	mov	r0, r3
 800487a:	3728      	adds	r7, #40	@ 0x28
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	00010004 	.word	0x00010004

08004884 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af02      	add	r7, sp, #8
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	4608      	mov	r0, r1
 800488e:	4611      	mov	r1, r2
 8004890:	461a      	mov	r2, r3
 8004892:	4603      	mov	r3, r0
 8004894:	817b      	strh	r3, [r7, #10]
 8004896:	460b      	mov	r3, r1
 8004898:	813b      	strh	r3, [r7, #8]
 800489a:	4613      	mov	r3, r2
 800489c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f960 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00d      	beq.n	80048e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048d4:	d103      	bne.n	80048de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e05f      	b.n	80049a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048e2:	897b      	ldrh	r3, [r7, #10]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	6a3a      	ldr	r2, [r7, #32]
 80048f6:	492d      	ldr	r1, [pc, #180]	@ (80049ac <I2C_RequestMemoryWrite+0x128>)
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 f9bb 	bl	8004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e04c      	b.n	80049a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004908:	2300      	movs	r3, #0
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800491e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004920:	6a39      	ldr	r1, [r7, #32]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fa46 	bl	8004db4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00d      	beq.n	800494a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004932:	2b04      	cmp	r3, #4
 8004934:	d107      	bne.n	8004946 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004944:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e02b      	b.n	80049a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800494a:	88fb      	ldrh	r3, [r7, #6]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d105      	bne.n	800495c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004950:	893b      	ldrh	r3, [r7, #8]
 8004952:	b2da      	uxtb	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	611a      	str	r2, [r3, #16]
 800495a:	e021      	b.n	80049a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800495c:	893b      	ldrh	r3, [r7, #8]
 800495e:	0a1b      	lsrs	r3, r3, #8
 8004960:	b29b      	uxth	r3, r3
 8004962:	b2da      	uxtb	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800496a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800496c:	6a39      	ldr	r1, [r7, #32]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 fa20 	bl	8004db4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00d      	beq.n	8004996 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497e:	2b04      	cmp	r3, #4
 8004980:	d107      	bne.n	8004992 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004990:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e005      	b.n	80049a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004996:	893b      	ldrh	r3, [r7, #8]
 8004998:	b2da      	uxtb	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	00010002 	.word	0x00010002

080049b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	4608      	mov	r0, r1
 80049ba:	4611      	mov	r1, r2
 80049bc:	461a      	mov	r2, r3
 80049be:	4603      	mov	r3, r0
 80049c0:	817b      	strh	r3, [r7, #10]
 80049c2:	460b      	mov	r3, r1
 80049c4:	813b      	strh	r3, [r7, #8]
 80049c6:	4613      	mov	r3, r2
 80049c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 f8c2 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00d      	beq.n	8004a1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a10:	d103      	bne.n	8004a1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a18:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e0aa      	b.n	8004b74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a1e:	897b      	ldrh	r3, [r7, #10]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	461a      	mov	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a30:	6a3a      	ldr	r2, [r7, #32]
 8004a32:	4952      	ldr	r1, [pc, #328]	@ (8004b7c <I2C_RequestMemoryRead+0x1cc>)
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 f91d 	bl	8004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e097      	b.n	8004b74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a44:	2300      	movs	r3, #0
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a5c:	6a39      	ldr	r1, [r7, #32]
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 f9a8 	bl	8004db4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00d      	beq.n	8004a86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d107      	bne.n	8004a82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e076      	b.n	8004b74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a86:	88fb      	ldrh	r3, [r7, #6]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d105      	bne.n	8004a98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a8c:	893b      	ldrh	r3, [r7, #8]
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	611a      	str	r2, [r3, #16]
 8004a96:	e021      	b.n	8004adc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a98:	893b      	ldrh	r3, [r7, #8]
 8004a9a:	0a1b      	lsrs	r3, r3, #8
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa8:	6a39      	ldr	r1, [r7, #32]
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f982 	bl	8004db4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00d      	beq.n	8004ad2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	d107      	bne.n	8004ace <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004acc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e050      	b.n	8004b74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ad2:	893b      	ldrh	r3, [r7, #8]
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ade:	6a39      	ldr	r1, [r7, #32]
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 f967 	bl	8004db4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00d      	beq.n	8004b08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d107      	bne.n	8004b04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e035      	b.n	8004b74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f82b 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00d      	beq.n	8004b4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b3e:	d103      	bne.n	8004b48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e013      	b.n	8004b74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b4c:	897b      	ldrh	r3, [r7, #10]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5e:	6a3a      	ldr	r2, [r7, #32]
 8004b60:	4906      	ldr	r1, [pc, #24]	@ (8004b7c <I2C_RequestMemoryRead+0x1cc>)
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 f886 	bl	8004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	00010002 	.word	0x00010002

08004b80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b90:	e048      	b.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b98:	d044      	beq.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b9a:	f7fd ff61 	bl	8002a60 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d302      	bcc.n	8004bb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d139      	bne.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	0c1b      	lsrs	r3, r3, #16
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d10d      	bne.n	8004bd6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	43da      	mvns	r2, r3
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bf0c      	ite	eq
 8004bcc:	2301      	moveq	r3, #1
 8004bce:	2300      	movne	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	e00c      	b.n	8004bf0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	43da      	mvns	r2, r3
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	4013      	ands	r3, r2
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	bf0c      	ite	eq
 8004be8:	2301      	moveq	r3, #1
 8004bea:	2300      	movne	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	461a      	mov	r2, r3
 8004bf0:	79fb      	ldrb	r3, [r7, #7]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d116      	bne.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c10:	f043 0220 	orr.w	r2, r3, #32
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e023      	b.n	8004c6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	0c1b      	lsrs	r3, r3, #16
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d10d      	bne.n	8004c4a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	43da      	mvns	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bf0c      	ite	eq
 8004c40:	2301      	moveq	r3, #1
 8004c42:	2300      	movne	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	461a      	mov	r2, r3
 8004c48:	e00c      	b.n	8004c64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	43da      	mvns	r2, r3
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	4013      	ands	r3, r2
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	461a      	mov	r2, r3
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d093      	beq.n	8004b92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c82:	e071      	b.n	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c92:	d123      	bne.n	8004cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ca2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc8:	f043 0204 	orr.w	r2, r3, #4
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e067      	b.n	8004dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce2:	d041      	beq.n	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce4:	f7fd febc 	bl	8002a60 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d302      	bcc.n	8004cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d136      	bne.n	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	0c1b      	lsrs	r3, r3, #16
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d10c      	bne.n	8004d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	43da      	mvns	r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	bf14      	ite	ne
 8004d16:	2301      	movne	r3, #1
 8004d18:	2300      	moveq	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	e00b      	b.n	8004d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	43da      	mvns	r2, r3
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	bf14      	ite	ne
 8004d30:	2301      	movne	r3, #1
 8004d32:	2300      	moveq	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d016      	beq.n	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e021      	b.n	8004dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	0c1b      	lsrs	r3, r3, #16
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d10c      	bne.n	8004d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	43da      	mvns	r2, r3
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	bf14      	ite	ne
 8004d84:	2301      	movne	r3, #1
 8004d86:	2300      	moveq	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	e00b      	b.n	8004da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	43da      	mvns	r2, r3
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	4013      	ands	r3, r2
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	bf14      	ite	ne
 8004d9e:	2301      	movne	r3, #1
 8004da0:	2300      	moveq	r3, #0
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f47f af6d 	bne.w	8004c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dc0:	e034      	b.n	8004e2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 f8e3 	bl	8004f8e <I2C_IsAcknowledgeFailed>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e034      	b.n	8004e3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd8:	d028      	beq.n	8004e2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dda:	f7fd fe41 	bl	8002a60 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d302      	bcc.n	8004df0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d11d      	bne.n	8004e2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dfa:	2b80      	cmp	r3, #128	@ 0x80
 8004dfc:	d016      	beq.n	8004e2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e18:	f043 0220 	orr.w	r2, r3, #32
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e007      	b.n	8004e3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e36:	2b80      	cmp	r3, #128	@ 0x80
 8004e38:	d1c3      	bne.n	8004dc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e50:	e034      	b.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 f89b 	bl	8004f8e <I2C_IsAcknowledgeFailed>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e034      	b.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e68:	d028      	beq.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6a:	f7fd fdf9 	bl	8002a60 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d302      	bcc.n	8004e80 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d11d      	bne.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d016      	beq.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea8:	f043 0220 	orr.w	r2, r3, #32
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e007      	b.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d1c3      	bne.n	8004e52 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ee0:	e049      	b.n	8004f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d119      	bne.n	8004f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f06f 0210 	mvn.w	r2, #16
 8004ef8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e030      	b.n	8004f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f24:	f7fd fd9c 	bl	8002a60 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d302      	bcc.n	8004f3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d11d      	bne.n	8004f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f44:	2b40      	cmp	r3, #64	@ 0x40
 8004f46:	d016      	beq.n	8004f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f62:	f043 0220 	orr.w	r2, r3, #32
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e007      	b.n	8004f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f80:	2b40      	cmp	r3, #64	@ 0x40
 8004f82:	d1ae      	bne.n	8004ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fa4:	d11b      	bne.n	8004fde <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	f043 0204 	orr.w	r2, r3, #4
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b088      	sub	sp, #32
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e128      	b.n	8005250 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d109      	bne.n	800501e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a90      	ldr	r2, [pc, #576]	@ (8005258 <HAL_I2S_Init+0x26c>)
 8005016:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7fd fa3f 	bl	800249c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2202      	movs	r2, #2
 8005022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6812      	ldr	r2, [r2, #0]
 8005030:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005034:	f023 030f 	bic.w	r3, r3, #15
 8005038:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2202      	movs	r2, #2
 8005040:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	2b02      	cmp	r3, #2
 8005048:	d060      	beq.n	800510c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d102      	bne.n	8005058 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005052:	2310      	movs	r3, #16
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	e001      	b.n	800505c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005058:	2320      	movs	r3, #32
 800505a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2b20      	cmp	r3, #32
 8005062:	d802      	bhi.n	800506a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800506a:	2001      	movs	r0, #1
 800506c:	f002 fd2c 	bl	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005070:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800507a:	d125      	bne.n	80050c8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d010      	beq.n	80050a6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	fbb2 f2f3 	udiv	r2, r2, r3
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	461a      	mov	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a0:	3305      	adds	r3, #5
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	e01f      	b.n	80050e6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80050b0:	4613      	mov	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	461a      	mov	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c2:	3305      	adds	r3, #5
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	e00e      	b.n	80050e6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	461a      	mov	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e2:	3305      	adds	r3, #5
 80050e4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	4a5c      	ldr	r2, [pc, #368]	@ (800525c <HAL_I2S_Init+0x270>)
 80050ea:	fba2 2303 	umull	r2, r3, r2, r3
 80050ee:	08db      	lsrs	r3, r3, #3
 80050f0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	085b      	lsrs	r3, r3, #1
 8005102:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	021b      	lsls	r3, r3, #8
 8005108:	61bb      	str	r3, [r7, #24]
 800510a:	e003      	b.n	8005114 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800510c:	2302      	movs	r3, #2
 800510e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d902      	bls.n	8005120 <HAL_I2S_Init+0x134>
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	2bff      	cmp	r3, #255	@ 0xff
 800511e:	d907      	bls.n	8005130 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005124:	f043 0210 	orr.w	r2, r3, #16
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e08f      	b.n	8005250 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	ea42 0103 	orr.w	r1, r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69fa      	ldr	r2, [r7, #28]
 8005140:	430a      	orrs	r2, r1
 8005142:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800514e:	f023 030f 	bic.w	r3, r3, #15
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6851      	ldr	r1, [r2, #4]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6892      	ldr	r2, [r2, #8]
 800515a:	4311      	orrs	r1, r2
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	68d2      	ldr	r2, [r2, #12]
 8005160:	4311      	orrs	r1, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6992      	ldr	r2, [r2, #24]
 8005166:	430a      	orrs	r2, r1
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005172:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d161      	bne.n	8005240 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a38      	ldr	r2, [pc, #224]	@ (8005260 <HAL_I2S_Init+0x274>)
 8005180:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a37      	ldr	r2, [pc, #220]	@ (8005264 <HAL_I2S_Init+0x278>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d101      	bne.n	8005190 <HAL_I2S_Init+0x1a4>
 800518c:	4b36      	ldr	r3, [pc, #216]	@ (8005268 <HAL_I2S_Init+0x27c>)
 800518e:	e001      	b.n	8005194 <HAL_I2S_Init+0x1a8>
 8005190:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6812      	ldr	r2, [r2, #0]
 800519a:	4932      	ldr	r1, [pc, #200]	@ (8005264 <HAL_I2S_Init+0x278>)
 800519c:	428a      	cmp	r2, r1
 800519e:	d101      	bne.n	80051a4 <HAL_I2S_Init+0x1b8>
 80051a0:	4a31      	ldr	r2, [pc, #196]	@ (8005268 <HAL_I2S_Init+0x27c>)
 80051a2:	e001      	b.n	80051a8 <HAL_I2S_Init+0x1bc>
 80051a4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80051a8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80051ac:	f023 030f 	bic.w	r3, r3, #15
 80051b0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a2b      	ldr	r2, [pc, #172]	@ (8005264 <HAL_I2S_Init+0x278>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d101      	bne.n	80051c0 <HAL_I2S_Init+0x1d4>
 80051bc:	4b2a      	ldr	r3, [pc, #168]	@ (8005268 <HAL_I2S_Init+0x27c>)
 80051be:	e001      	b.n	80051c4 <HAL_I2S_Init+0x1d8>
 80051c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051c4:	2202      	movs	r2, #2
 80051c6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a25      	ldr	r2, [pc, #148]	@ (8005264 <HAL_I2S_Init+0x278>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d101      	bne.n	80051d6 <HAL_I2S_Init+0x1ea>
 80051d2:	4b25      	ldr	r3, [pc, #148]	@ (8005268 <HAL_I2S_Init+0x27c>)
 80051d4:	e001      	b.n	80051da <HAL_I2S_Init+0x1ee>
 80051d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051e6:	d003      	beq.n	80051f0 <HAL_I2S_Init+0x204>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d103      	bne.n	80051f8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80051f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	e001      	b.n	80051fc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80051f8:	2300      	movs	r3, #0
 80051fa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005206:	4313      	orrs	r3, r2
 8005208:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005210:	4313      	orrs	r3, r2
 8005212:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800521a:	4313      	orrs	r3, r2
 800521c:	b29a      	uxth	r2, r3
 800521e:	897b      	ldrh	r3, [r7, #10]
 8005220:	4313      	orrs	r3, r2
 8005222:	b29b      	uxth	r3, r3
 8005224:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005228:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a0d      	ldr	r2, [pc, #52]	@ (8005264 <HAL_I2S_Init+0x278>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d101      	bne.n	8005238 <HAL_I2S_Init+0x24c>
 8005234:	4b0c      	ldr	r3, [pc, #48]	@ (8005268 <HAL_I2S_Init+0x27c>)
 8005236:	e001      	b.n	800523c <HAL_I2S_Init+0x250>
 8005238:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800523c:	897a      	ldrh	r2, [r7, #10]
 800523e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3720      	adds	r7, #32
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	08005569 	.word	0x08005569
 800525c:	cccccccd 	.word	0xcccccccd
 8005260:	0800567d 	.word	0x0800567d
 8005264:	40003800 	.word	0x40003800
 8005268:	40003400 	.word	0x40003400

0800526c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <HAL_I2S_Transmit_DMA+0x1a>
 8005280:	88fb      	ldrh	r3, [r7, #6]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e08a      	b.n	80053a0 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b01      	cmp	r3, #1
 8005294:	d001      	beq.n	800529a <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8005296:	2302      	movs	r3, #2
 8005298:	e082      	b.n	80053a0 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <HAL_I2S_Transmit_DMA+0x3e>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e07a      	b.n	80053a0 <HAL_I2S_Transmit_DMA+0x134>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2203      	movs	r2, #3
 80052b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d002      	beq.n	80052de <HAL_I2S_Transmit_DMA+0x72>
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b05      	cmp	r3, #5
 80052dc:	d10a      	bne.n	80052f4 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80052de:	88fb      	ldrh	r3, [r7, #6]
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80052e8:	88fb      	ldrh	r3, [r7, #6]
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052f2:	e005      	b.n	8005300 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	88fa      	ldrh	r2, [r7, #6]
 80052f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	88fa      	ldrh	r2, [r7, #6]
 80052fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005304:	4a28      	ldr	r2, [pc, #160]	@ (80053a8 <HAL_I2S_Transmit_DMA+0x13c>)
 8005306:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530c:	4a27      	ldr	r2, [pc, #156]	@ (80053ac <HAL_I2S_Transmit_DMA+0x140>)
 800530e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005314:	4a26      	ldr	r2, [pc, #152]	@ (80053b0 <HAL_I2S_Transmit_DMA+0x144>)
 8005316:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005320:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005328:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800532e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005330:	f7fe f98e 	bl	8003650 <HAL_DMA_Start_IT>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00f      	beq.n	800535a <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533e:	f043 0208 	orr.w	r2, r3, #8
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e022      	b.n	80053a0 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d107      	bne.n	8005380 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0202 	orr.w	r2, r2, #2
 800537e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800538a:	2b00      	cmp	r3, #0
 800538c:	d107      	bne.n	800539e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69da      	ldr	r2, [r3, #28]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800539c:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3718      	adds	r7, #24
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	08005447 	.word	0x08005447
 80053ac:	08005405 	.word	0x08005405
 80053b0:	08005463 	.word	0x08005463

080053b4 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005410:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10e      	bne.n	8005438 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0202 	bic.w	r2, r2, #2
 8005428:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f7ff ffc5 	bl	80053c8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800543e:	bf00      	nop
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005452:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f7ff ffad 	bl	80053b4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800545a:	bf00      	nop
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0203 	bic.w	r2, r2, #3
 800547e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005498:	f043 0208 	orr.w	r2, r3, #8
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f7ff ffa5 	bl	80053f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80054a6:	bf00      	nop
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b082      	sub	sp, #8
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ba:	881a      	ldrh	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c6:	1c9a      	adds	r2, r3, #2
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054de:	b29b      	uxth	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10e      	bne.n	8005502 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80054f2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff ff63 	bl	80053c8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005502:	bf00      	nop
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b082      	sub	sp, #8
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551c:	b292      	uxth	r2, r2
 800551e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005524:	1c9a      	adds	r2, r3, #2
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800552e:	b29b      	uxth	r3, r3
 8005530:	3b01      	subs	r3, #1
 8005532:	b29a      	uxth	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800553c:	b29b      	uxth	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10e      	bne.n	8005560 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005550:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7ff ff3e 	bl	80053dc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005560:	bf00      	nop
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b04      	cmp	r3, #4
 8005582:	d13a      	bne.n	80055fa <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b01      	cmp	r3, #1
 800558c:	d109      	bne.n	80055a2 <I2S_IRQHandler+0x3a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005598:	2b40      	cmp	r3, #64	@ 0x40
 800559a:	d102      	bne.n	80055a2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7ff ffb4 	bl	800550a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a8:	2b40      	cmp	r3, #64	@ 0x40
 80055aa:	d126      	bne.n	80055fa <I2S_IRQHandler+0x92>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f003 0320 	and.w	r3, r3, #32
 80055b6:	2b20      	cmp	r3, #32
 80055b8:	d11f      	bne.n	80055fa <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80055c8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80055ca:	2300      	movs	r3, #0
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ec:	f043 0202 	orr.w	r2, r3, #2
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff fefb 	bl	80053f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b03      	cmp	r3, #3
 8005604:	d136      	bne.n	8005674 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b02      	cmp	r3, #2
 800560e:	d109      	bne.n	8005624 <I2S_IRQHandler+0xbc>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800561a:	2b80      	cmp	r3, #128	@ 0x80
 800561c:	d102      	bne.n	8005624 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff ff45 	bl	80054ae <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b08      	cmp	r3, #8
 800562c:	d122      	bne.n	8005674 <I2S_IRQHandler+0x10c>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f003 0320 	and.w	r3, r3, #32
 8005638:	2b20      	cmp	r3, #32
 800563a:	d11b      	bne.n	8005674 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800564a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005666:	f043 0204 	orr.w	r2, r3, #4
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff febe 	bl	80053f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005674:	bf00      	nop
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b088      	sub	sp, #32
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a92      	ldr	r2, [pc, #584]	@ (80058dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d101      	bne.n	800569a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005696:	4b92      	ldr	r3, [pc, #584]	@ (80058e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005698:	e001      	b.n	800569e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800569a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a8b      	ldr	r2, [pc, #556]	@ (80058dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d101      	bne.n	80056b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80056b4:	4b8a      	ldr	r3, [pc, #552]	@ (80058e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056b6:	e001      	b.n	80056bc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80056b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056c8:	d004      	beq.n	80056d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f040 8099 	bne.w	8005806 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d107      	bne.n	80056ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f925 	bl	8005938 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d107      	bne.n	8005708 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f9c8 	bl	8005a98 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570e:	2b40      	cmp	r3, #64	@ 0x40
 8005710:	d13a      	bne.n	8005788 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b00      	cmp	r3, #0
 800571a:	d035      	beq.n	8005788 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a6e      	ldr	r2, [pc, #440]	@ (80058dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d101      	bne.n	800572a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005726:	4b6e      	ldr	r3, [pc, #440]	@ (80058e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005728:	e001      	b.n	800572e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800572a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4969      	ldr	r1, [pc, #420]	@ (80058dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005736:	428b      	cmp	r3, r1
 8005738:	d101      	bne.n	800573e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800573a:	4b69      	ldr	r3, [pc, #420]	@ (80058e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800573c:	e001      	b.n	8005742 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800573e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005742:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005746:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005756:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005758:	2300      	movs	r3, #0
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800577a:	f043 0202 	orr.w	r2, r3, #2
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff fe34 	bl	80053f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	2b08      	cmp	r3, #8
 8005790:	f040 80c3 	bne.w	800591a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 80bd 	beq.w	800591a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80057ae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a49      	ldr	r2, [pc, #292]	@ (80058dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d101      	bne.n	80057be <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80057ba:	4b49      	ldr	r3, [pc, #292]	@ (80058e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057bc:	e001      	b.n	80057c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80057be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4944      	ldr	r1, [pc, #272]	@ (80058dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057ca:	428b      	cmp	r3, r1
 80057cc:	d101      	bne.n	80057d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80057ce:	4b44      	ldr	r3, [pc, #272]	@ (80058e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057d0:	e001      	b.n	80057d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80057d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80057da:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80057dc:	2300      	movs	r3, #0
 80057de:	60bb      	str	r3, [r7, #8]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	60bb      	str	r3, [r7, #8]
 80057e8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f6:	f043 0204 	orr.w	r2, r3, #4
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7ff fdf6 	bl	80053f0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005804:	e089      	b.n	800591a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b02      	cmp	r3, #2
 800580e:	d107      	bne.n	8005820 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f8be 	bl	800599c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b01      	cmp	r3, #1
 8005828:	d107      	bne.n	800583a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f8fd 	bl	8005a34 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005840:	2b40      	cmp	r3, #64	@ 0x40
 8005842:	d12f      	bne.n	80058a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	2b00      	cmp	r3, #0
 800584c:	d02a      	beq.n	80058a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800585c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a1e      	ldr	r2, [pc, #120]	@ (80058dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d101      	bne.n	800586c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005868:	4b1d      	ldr	r3, [pc, #116]	@ (80058e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800586a:	e001      	b.n	8005870 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800586c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4919      	ldr	r1, [pc, #100]	@ (80058dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005878:	428b      	cmp	r3, r1
 800587a:	d101      	bne.n	8005880 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800587c:	4b18      	ldr	r3, [pc, #96]	@ (80058e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800587e:	e001      	b.n	8005884 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005880:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005884:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005888:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005896:	f043 0202 	orr.w	r2, r3, #2
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7ff fda6 	bl	80053f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	f003 0308 	and.w	r3, r3, #8
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d136      	bne.n	800591c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d031      	beq.n	800591c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a07      	ldr	r2, [pc, #28]	@ (80058dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d101      	bne.n	80058c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80058c2:	4b07      	ldr	r3, [pc, #28]	@ (80058e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058c4:	e001      	b.n	80058ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80058c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4902      	ldr	r1, [pc, #8]	@ (80058dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058d2:	428b      	cmp	r3, r1
 80058d4:	d106      	bne.n	80058e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80058d6:	4b02      	ldr	r3, [pc, #8]	@ (80058e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058d8:	e006      	b.n	80058e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80058da:	bf00      	nop
 80058dc:	40003800 	.word	0x40003800
 80058e0:	40003400 	.word	0x40003400
 80058e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80058ec:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80058fc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590a:	f043 0204 	orr.w	r2, r3, #4
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7ff fd6c 	bl	80053f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005918:	e000      	b.n	800591c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800591a:	bf00      	nop
}
 800591c:	bf00      	nop
 800591e:	3720      	adds	r7, #32
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005944:	1c99      	adds	r1, r3, #2
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6251      	str	r1, [r2, #36]	@ 0x24
 800594a:	881a      	ldrh	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005956:	b29b      	uxth	r3, r3
 8005958:	3b01      	subs	r3, #1
 800595a:	b29a      	uxth	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005964:	b29b      	uxth	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d113      	bne.n	8005992 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005978:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800597e:	b29b      	uxth	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d106      	bne.n	8005992 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7ff ffc9 	bl	8005924 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005992:	bf00      	nop
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
	...

0800599c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a8:	1c99      	adds	r1, r3, #2
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6251      	str	r1, [r2, #36]	@ 0x24
 80059ae:	8819      	ldrh	r1, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a2c <I2SEx_TxISR_I2SExt+0x90>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d101      	bne.n	80059be <I2SEx_TxISR_I2SExt+0x22>
 80059ba:	4b1d      	ldr	r3, [pc, #116]	@ (8005a30 <I2SEx_TxISR_I2SExt+0x94>)
 80059bc:	e001      	b.n	80059c2 <I2SEx_TxISR_I2SExt+0x26>
 80059be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059c2:	460a      	mov	r2, r1
 80059c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d121      	bne.n	8005a22 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a12      	ldr	r2, [pc, #72]	@ (8005a2c <I2SEx_TxISR_I2SExt+0x90>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d101      	bne.n	80059ec <I2SEx_TxISR_I2SExt+0x50>
 80059e8:	4b11      	ldr	r3, [pc, #68]	@ (8005a30 <I2SEx_TxISR_I2SExt+0x94>)
 80059ea:	e001      	b.n	80059f0 <I2SEx_TxISR_I2SExt+0x54>
 80059ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	490d      	ldr	r1, [pc, #52]	@ (8005a2c <I2SEx_TxISR_I2SExt+0x90>)
 80059f8:	428b      	cmp	r3, r1
 80059fa:	d101      	bne.n	8005a00 <I2SEx_TxISR_I2SExt+0x64>
 80059fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a30 <I2SEx_TxISR_I2SExt+0x94>)
 80059fe:	e001      	b.n	8005a04 <I2SEx_TxISR_I2SExt+0x68>
 8005a00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a04:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a08:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d106      	bne.n	8005a22 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff ff81 	bl	8005924 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a22:	bf00      	nop
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40003800 	.word	0x40003800
 8005a30:	40003400 	.word	0x40003400

08005a34 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68d8      	ldr	r0, [r3, #12]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a46:	1c99      	adds	r1, r3, #2
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005a4c:	b282      	uxth	r2, r0
 8005a4e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d113      	bne.n	8005a90 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a76:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff ff4a 	bl	8005924 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a90:	bf00      	nop
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a20      	ldr	r2, [pc, #128]	@ (8005b28 <I2SEx_RxISR_I2SExt+0x90>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d101      	bne.n	8005aae <I2SEx_RxISR_I2SExt+0x16>
 8005aaa:	4b20      	ldr	r3, [pc, #128]	@ (8005b2c <I2SEx_RxISR_I2SExt+0x94>)
 8005aac:	e001      	b.n	8005ab2 <I2SEx_RxISR_I2SExt+0x1a>
 8005aae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ab2:	68d8      	ldr	r0, [r3, #12]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab8:	1c99      	adds	r1, r3, #2
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005abe:	b282      	uxth	r2, r0
 8005ac0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d121      	bne.n	8005b1e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a12      	ldr	r2, [pc, #72]	@ (8005b28 <I2SEx_RxISR_I2SExt+0x90>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d101      	bne.n	8005ae8 <I2SEx_RxISR_I2SExt+0x50>
 8005ae4:	4b11      	ldr	r3, [pc, #68]	@ (8005b2c <I2SEx_RxISR_I2SExt+0x94>)
 8005ae6:	e001      	b.n	8005aec <I2SEx_RxISR_I2SExt+0x54>
 8005ae8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	490d      	ldr	r1, [pc, #52]	@ (8005b28 <I2SEx_RxISR_I2SExt+0x90>)
 8005af4:	428b      	cmp	r3, r1
 8005af6:	d101      	bne.n	8005afc <I2SEx_RxISR_I2SExt+0x64>
 8005af8:	4b0c      	ldr	r3, [pc, #48]	@ (8005b2c <I2SEx_RxISR_I2SExt+0x94>)
 8005afa:	e001      	b.n	8005b00 <I2SEx_RxISR_I2SExt+0x68>
 8005afc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b00:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b04:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d106      	bne.n	8005b1e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff ff03 	bl	8005924 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b1e:	bf00      	nop
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	40003800 	.word	0x40003800
 8005b2c:	40003400 	.word	0x40003400

08005b30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af02      	add	r7, sp, #8
 8005b36:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e101      	b.n	8005d46 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d106      	bne.n	8005b62 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f006 fee7 	bl	800c930 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2203      	movs	r2, #3
 8005b66:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b70:	d102      	bne.n	8005b78 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f003 fb34 	bl	80091ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	7c1a      	ldrb	r2, [r3, #16]
 8005b8a:	f88d 2000 	strb.w	r2, [sp]
 8005b8e:	3304      	adds	r3, #4
 8005b90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b92:	f003 fa13 	bl	8008fbc <USB_CoreInit>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e0ce      	b.n	8005d46 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2100      	movs	r1, #0
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f003 fb2c 	bl	800920c <USB_SetCurrentMode>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d005      	beq.n	8005bc6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e0bf      	b.n	8005d46 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	73fb      	strb	r3, [r7, #15]
 8005bca:	e04a      	b.n	8005c62 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005bcc:	7bfa      	ldrb	r2, [r7, #15]
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	440b      	add	r3, r1
 8005bda:	3315      	adds	r3, #21
 8005bdc:	2201      	movs	r2, #1
 8005bde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005be0:	7bfa      	ldrb	r2, [r7, #15]
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	4613      	mov	r3, r2
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	4413      	add	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	440b      	add	r3, r1
 8005bee:	3314      	adds	r3, #20
 8005bf0:	7bfa      	ldrb	r2, [r7, #15]
 8005bf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005bf4:	7bfa      	ldrb	r2, [r7, #15]
 8005bf6:	7bfb      	ldrb	r3, [r7, #15]
 8005bf8:	b298      	uxth	r0, r3
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	4413      	add	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	440b      	add	r3, r1
 8005c06:	332e      	adds	r3, #46	@ 0x2e
 8005c08:	4602      	mov	r2, r0
 8005c0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c0c:	7bfa      	ldrb	r2, [r7, #15]
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	4613      	mov	r3, r2
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	440b      	add	r3, r1
 8005c1a:	3318      	adds	r3, #24
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005c20:	7bfa      	ldrb	r2, [r7, #15]
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	4613      	mov	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	4413      	add	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	440b      	add	r3, r1
 8005c2e:	331c      	adds	r3, #28
 8005c30:	2200      	movs	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c34:	7bfa      	ldrb	r2, [r7, #15]
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	4413      	add	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	440b      	add	r3, r1
 8005c42:	3320      	adds	r3, #32
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c48:	7bfa      	ldrb	r2, [r7, #15]
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	4413      	add	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	440b      	add	r3, r1
 8005c56:	3324      	adds	r3, #36	@ 0x24
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	73fb      	strb	r3, [r7, #15]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	791b      	ldrb	r3, [r3, #4]
 8005c66:	7bfa      	ldrb	r2, [r7, #15]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d3af      	bcc.n	8005bcc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	73fb      	strb	r3, [r7, #15]
 8005c70:	e044      	b.n	8005cfc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c72:	7bfa      	ldrb	r2, [r7, #15]
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	4613      	mov	r3, r2
 8005c78:	00db      	lsls	r3, r3, #3
 8005c7a:	4413      	add	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	440b      	add	r3, r1
 8005c80:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005c84:	2200      	movs	r2, #0
 8005c86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c88:	7bfa      	ldrb	r2, [r7, #15]
 8005c8a:	6879      	ldr	r1, [r7, #4]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	4413      	add	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	440b      	add	r3, r1
 8005c96:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005c9a:	7bfa      	ldrb	r2, [r7, #15]
 8005c9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c9e:	7bfa      	ldrb	r2, [r7, #15]
 8005ca0:	6879      	ldr	r1, [r7, #4]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	440b      	add	r3, r1
 8005cac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005cb4:	7bfa      	ldrb	r2, [r7, #15]
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	4413      	add	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	440b      	add	r3, r1
 8005cc2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005cca:	7bfa      	ldrb	r2, [r7, #15]
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005cdc:	2200      	movs	r2, #0
 8005cde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ce0:	7bfa      	ldrb	r2, [r7, #15]
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	4413      	add	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	440b      	add	r3, r1
 8005cee:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	73fb      	strb	r3, [r7, #15]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	791b      	ldrb	r3, [r3, #4]
 8005d00:	7bfa      	ldrb	r2, [r7, #15]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d3b5      	bcc.n	8005c72 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	7c1a      	ldrb	r2, [r3, #16]
 8005d0e:	f88d 2000 	strb.w	r2, [sp]
 8005d12:	3304      	adds	r3, #4
 8005d14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d16:	f003 fac5 	bl	80092a4 <USB_DevInit>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d005      	beq.n	8005d2c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e00c      	b.n	8005d46 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f004 fb0f 	bl	800a362 <USB_DevDisconnect>

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b084      	sub	sp, #16
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_PCD_Start+0x1c>
 8005d66:	2302      	movs	r3, #2
 8005d68:	e022      	b.n	8005db0 <HAL_PCD_Start+0x62>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d009      	beq.n	8005d92 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d105      	bne.n	8005d92 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f003 fa16 	bl	80091c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f004 fabd 	bl	800a320 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005db8:	b590      	push	{r4, r7, lr}
 8005dba:	b08d      	sub	sp, #52	@ 0x34
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f004 fb7b 	bl	800a4ca <USB_GetMode>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f040 848c 	bne.w	80066f4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f004 fadf 	bl	800a3a4 <USB_ReadInterrupts>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 8482 	beq.w	80066f2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	0a1b      	lsrs	r3, r3, #8
 8005df8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f004 facc 	bl	800a3a4 <USB_ReadInterrupts>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d107      	bne.n	8005e26 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695a      	ldr	r2, [r3, #20]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f002 0202 	and.w	r2, r2, #2
 8005e24:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f004 faba 	bl	800a3a4 <USB_ReadInterrupts>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f003 0310 	and.w	r3, r3, #16
 8005e36:	2b10      	cmp	r3, #16
 8005e38:	d161      	bne.n	8005efe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699a      	ldr	r2, [r3, #24]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0210 	bic.w	r2, r2, #16
 8005e48:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	f003 020f 	and.w	r2, r3, #15
 8005e56:	4613      	mov	r3, r2
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	4413      	add	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	4413      	add	r3, r2
 8005e66:	3304      	adds	r3, #4
 8005e68:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	0c5b      	lsrs	r3, r3, #17
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d124      	bne.n	8005ec0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d035      	beq.n	8005eee <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	091b      	lsrs	r3, r3, #4
 8005e8a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	461a      	mov	r2, r3
 8005e94:	6a38      	ldr	r0, [r7, #32]
 8005e96:	f004 f8f1 	bl	800a07c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	091b      	lsrs	r3, r3, #4
 8005ea2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ea6:	441a      	add	r2, r3
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	695a      	ldr	r2, [r3, #20]
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	091b      	lsrs	r3, r3, #4
 8005eb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eb8:	441a      	add	r2, r3
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	615a      	str	r2, [r3, #20]
 8005ebe:	e016      	b.n	8005eee <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	0c5b      	lsrs	r3, r3, #17
 8005ec4:	f003 030f 	and.w	r3, r3, #15
 8005ec8:	2b06      	cmp	r3, #6
 8005eca:	d110      	bne.n	8005eee <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ed2:	2208      	movs	r2, #8
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	6a38      	ldr	r0, [r7, #32]
 8005ed8:	f004 f8d0 	bl	800a07c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	695a      	ldr	r2, [r3, #20]
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	091b      	lsrs	r3, r3, #4
 8005ee4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ee8:	441a      	add	r2, r3
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	699a      	ldr	r2, [r3, #24]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f042 0210 	orr.w	r2, r2, #16
 8005efc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f004 fa4e 	bl	800a3a4 <USB_ReadInterrupts>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f0e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005f12:	f040 80a7 	bne.w	8006064 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f004 fa53 	bl	800a3ca <USB_ReadDevAllOutEpInterrupt>
 8005f24:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005f26:	e099      	b.n	800605c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 808e 	beq.w	8006050 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f004 fa77 	bl	800a432 <USB_ReadDevOutEPInterrupt>
 8005f44:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00c      	beq.n	8005f6a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	2301      	movs	r3, #1
 8005f60:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005f62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fea3 	bl	8006cb0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00c      	beq.n	8005f8e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f80:	461a      	mov	r2, r3
 8005f82:	2308      	movs	r3, #8
 8005f84:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005f86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 ff79 	bl	8006e80 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f003 0310 	and.w	r3, r3, #16
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d008      	beq.n	8005faa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	2310      	movs	r3, #16
 8005fa8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d030      	beq.n	8006016 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fbc:	2b80      	cmp	r3, #128	@ 0x80
 8005fbe:	d109      	bne.n	8005fd4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	69fa      	ldr	r2, [r7, #28]
 8005fca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005fd2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	4413      	add	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	78db      	ldrb	r3, [r3, #3]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d108      	bne.n	8006004 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f006 fdaa 	bl	800cb58 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006010:	461a      	mov	r2, r3
 8006012:	2302      	movs	r3, #2
 8006014:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	f003 0320 	and.w	r3, r3, #32
 800601c:	2b00      	cmp	r3, #0
 800601e:	d008      	beq.n	8006032 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800602c:	461a      	mov	r2, r3
 800602e:	2320      	movs	r3, #32
 8006030:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d009      	beq.n	8006050 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800603c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006048:	461a      	mov	r2, r3
 800604a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800604e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006052:	3301      	adds	r3, #1
 8006054:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006058:	085b      	lsrs	r3, r3, #1
 800605a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800605c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605e:	2b00      	cmp	r3, #0
 8006060:	f47f af62 	bne.w	8005f28 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4618      	mov	r0, r3
 800606a:	f004 f99b 	bl	800a3a4 <USB_ReadInterrupts>
 800606e:	4603      	mov	r3, r0
 8006070:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006074:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006078:	f040 80db 	bne.w	8006232 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4618      	mov	r0, r3
 8006082:	f004 f9bc 	bl	800a3fe <USB_ReadDevAllInEpInterrupt>
 8006086:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800608c:	e0cd      	b.n	800622a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800608e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 80c2 	beq.w	800621e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	4611      	mov	r1, r2
 80060a4:	4618      	mov	r0, r3
 80060a6:	f004 f9e2 	bl	800a46e <USB_ReadDevInEPInterrupt>
 80060aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d057      	beq.n	8006166 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80060b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b8:	f003 030f 	and.w	r3, r3, #15
 80060bc:	2201      	movs	r2, #1
 80060be:	fa02 f303 	lsl.w	r3, r2, r3
 80060c2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	43db      	mvns	r3, r3
 80060d0:	69f9      	ldr	r1, [r7, #28]
 80060d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060d6:	4013      	ands	r3, r2
 80060d8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80060da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060e6:	461a      	mov	r2, r3
 80060e8:	2301      	movs	r3, #1
 80060ea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	799b      	ldrb	r3, [r3, #6]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d132      	bne.n	800615a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060f8:	4613      	mov	r3, r2
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	4413      	add	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	440b      	add	r3, r1
 8006102:	3320      	adds	r3, #32
 8006104:	6819      	ldr	r1, [r3, #0]
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800610a:	4613      	mov	r3, r2
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	4413      	add	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4403      	add	r3, r0
 8006114:	331c      	adds	r3, #28
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4419      	add	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800611e:	4613      	mov	r3, r2
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4403      	add	r3, r0
 8006128:	3320      	adds	r3, #32
 800612a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800612c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612e:	2b00      	cmp	r3, #0
 8006130:	d113      	bne.n	800615a <HAL_PCD_IRQHandler+0x3a2>
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006136:	4613      	mov	r3, r2
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	4413      	add	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	440b      	add	r3, r1
 8006140:	3324      	adds	r3, #36	@ 0x24
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d108      	bne.n	800615a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6818      	ldr	r0, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006152:	461a      	mov	r2, r3
 8006154:	2101      	movs	r1, #1
 8006156:	f004 f9e9 	bl	800a52c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800615a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615c:	b2db      	uxtb	r3, r3
 800615e:	4619      	mov	r1, r3
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f006 fc74 	bl	800ca4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f003 0308 	and.w	r3, r3, #8
 800616c:	2b00      	cmp	r3, #0
 800616e:	d008      	beq.n	8006182 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800617c:	461a      	mov	r2, r3
 800617e:	2308      	movs	r3, #8
 8006180:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f003 0310 	and.w	r3, r3, #16
 8006188:	2b00      	cmp	r3, #0
 800618a:	d008      	beq.n	800619e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800618c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006198:	461a      	mov	r2, r3
 800619a:	2310      	movs	r3, #16
 800619c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d008      	beq.n	80061ba <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80061a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b4:	461a      	mov	r2, r3
 80061b6:	2340      	movs	r3, #64	@ 0x40
 80061b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d023      	beq.n	800620c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80061c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061c6:	6a38      	ldr	r0, [r7, #32]
 80061c8:	f003 f9d0 	bl	800956c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80061cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ce:	4613      	mov	r3, r2
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	3310      	adds	r3, #16
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	4413      	add	r3, r2
 80061dc:	3304      	adds	r3, #4
 80061de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	78db      	ldrb	r3, [r3, #3]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d108      	bne.n	80061fa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	2200      	movs	r2, #0
 80061ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80061ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f006 fcc1 	bl	800cb7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80061fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006206:	461a      	mov	r2, r3
 8006208:	2302      	movs	r3, #2
 800620a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006216:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fcbd 	bl	8006b98 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	3301      	adds	r3, #1
 8006222:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006226:	085b      	lsrs	r3, r3, #1
 8006228:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800622a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622c:	2b00      	cmp	r3, #0
 800622e:	f47f af2e 	bne.w	800608e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4618      	mov	r0, r3
 8006238:	f004 f8b4 	bl	800a3a4 <USB_ReadInterrupts>
 800623c:	4603      	mov	r3, r0
 800623e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006242:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006246:	d122      	bne.n	800628e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	69fa      	ldr	r2, [r7, #28]
 8006252:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006256:	f023 0301 	bic.w	r3, r3, #1
 800625a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006262:	2b01      	cmp	r3, #1
 8006264:	d108      	bne.n	8006278 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800626e:	2100      	movs	r1, #0
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fea3 	bl	8006fbc <HAL_PCDEx_LPM_Callback>
 8006276:	e002      	b.n	800627e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f006 fc5f 	bl	800cb3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695a      	ldr	r2, [r3, #20]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800628c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4618      	mov	r0, r3
 8006294:	f004 f886 	bl	800a3a4 <USB_ReadInterrupts>
 8006298:	4603      	mov	r3, r0
 800629a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800629e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062a2:	d112      	bne.n	80062ca <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d102      	bne.n	80062ba <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f006 fc1b 	bl	800caf0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	695a      	ldr	r2, [r3, #20]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80062c8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f004 f868 	bl	800a3a4 <USB_ReadInterrupts>
 80062d4:	4603      	mov	r3, r0
 80062d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062de:	f040 80b7 	bne.w	8006450 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	69fa      	ldr	r2, [r7, #28]
 80062ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062f0:	f023 0301 	bic.w	r3, r3, #1
 80062f4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2110      	movs	r1, #16
 80062fc:	4618      	mov	r0, r3
 80062fe:	f003 f935 	bl	800956c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006302:	2300      	movs	r3, #0
 8006304:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006306:	e046      	b.n	8006396 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006314:	461a      	mov	r2, r3
 8006316:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800631a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800631c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800632c:	0151      	lsls	r1, r2, #5
 800632e:	69fa      	ldr	r2, [r7, #28]
 8006330:	440a      	add	r2, r1
 8006332:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006336:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800633a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800633c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	4413      	add	r3, r2
 8006344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006348:	461a      	mov	r2, r3
 800634a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800634e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006360:	0151      	lsls	r1, r2, #5
 8006362:	69fa      	ldr	r2, [r7, #28]
 8006364:	440a      	add	r2, r1
 8006366:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800636a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800636e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006380:	0151      	lsls	r1, r2, #5
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	440a      	add	r2, r1
 8006386:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800638a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800638e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006392:	3301      	adds	r3, #1
 8006394:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	791b      	ldrb	r3, [r3, #4]
 800639a:	461a      	mov	r2, r3
 800639c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800639e:	4293      	cmp	r3, r2
 80063a0:	d3b2      	bcc.n	8006308 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	69fa      	ldr	r2, [r7, #28]
 80063ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063b0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80063b4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	7bdb      	ldrb	r3, [r3, #15]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d016      	beq.n	80063ec <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063c8:	69fa      	ldr	r2, [r7, #28]
 80063ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063ce:	f043 030b 	orr.w	r3, r3, #11
 80063d2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063de:	69fa      	ldr	r2, [r7, #28]
 80063e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063e4:	f043 030b 	orr.w	r3, r3, #11
 80063e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80063ea:	e015      	b.n	8006418 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	69fa      	ldr	r2, [r7, #28]
 80063f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80063fe:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006402:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	69fa      	ldr	r2, [r7, #28]
 800640e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006412:	f043 030b 	orr.w	r3, r3, #11
 8006416:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	69fa      	ldr	r2, [r7, #28]
 8006422:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006426:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800642a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6818      	ldr	r0, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800643a:	461a      	mov	r2, r3
 800643c:	f004 f876 	bl	800a52c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695a      	ldr	r2, [r3, #20]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800644e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4618      	mov	r0, r3
 8006456:	f003 ffa5 	bl	800a3a4 <USB_ReadInterrupts>
 800645a:	4603      	mov	r3, r0
 800645c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006460:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006464:	d123      	bne.n	80064ae <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4618      	mov	r0, r3
 800646c:	f004 f83b 	bl	800a4e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4618      	mov	r0, r3
 8006476:	f003 f8f2 	bl	800965e <USB_GetDevSpeed>
 800647a:	4603      	mov	r3, r0
 800647c:	461a      	mov	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681c      	ldr	r4, [r3, #0]
 8006486:	f001 fa09 	bl	800789c <HAL_RCC_GetHCLKFreq>
 800648a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006490:	461a      	mov	r2, r3
 8006492:	4620      	mov	r0, r4
 8006494:	f002 fdf6 	bl	8009084 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f006 fb00 	bl	800ca9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	695a      	ldr	r2, [r3, #20]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80064ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f003 ff76 	bl	800a3a4 <USB_ReadInterrupts>
 80064b8:	4603      	mov	r3, r0
 80064ba:	f003 0308 	and.w	r3, r3, #8
 80064be:	2b08      	cmp	r3, #8
 80064c0:	d10a      	bne.n	80064d8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f006 fadd 	bl	800ca82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	695a      	ldr	r2, [r3, #20]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f002 0208 	and.w	r2, r2, #8
 80064d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4618      	mov	r0, r3
 80064de:	f003 ff61 	bl	800a3a4 <USB_ReadInterrupts>
 80064e2:	4603      	mov	r3, r0
 80064e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064e8:	2b80      	cmp	r3, #128	@ 0x80
 80064ea:	d123      	bne.n	8006534 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80064f8:	2301      	movs	r3, #1
 80064fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80064fc:	e014      	b.n	8006528 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80064fe:	6879      	ldr	r1, [r7, #4]
 8006500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006502:	4613      	mov	r3, r2
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	440b      	add	r3, r1
 800650c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d105      	bne.n	8006522 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006518:	b2db      	uxtb	r3, r3
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fb0a 	bl	8006b36 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	3301      	adds	r3, #1
 8006526:	627b      	str	r3, [r7, #36]	@ 0x24
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	791b      	ldrb	r3, [r3, #4]
 800652c:	461a      	mov	r2, r3
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	4293      	cmp	r3, r2
 8006532:	d3e4      	bcc.n	80064fe <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4618      	mov	r0, r3
 800653a:	f003 ff33 	bl	800a3a4 <USB_ReadInterrupts>
 800653e:	4603      	mov	r3, r0
 8006540:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006544:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006548:	d13c      	bne.n	80065c4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800654a:	2301      	movs	r3, #1
 800654c:	627b      	str	r3, [r7, #36]	@ 0x24
 800654e:	e02b      	b.n	80065a8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006564:	4613      	mov	r3, r2
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	4413      	add	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	440b      	add	r3, r1
 800656e:	3318      	adds	r3, #24
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d115      	bne.n	80065a2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006576:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006578:	2b00      	cmp	r3, #0
 800657a:	da12      	bge.n	80065a2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800657c:	6879      	ldr	r1, [r7, #4]
 800657e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006580:	4613      	mov	r3, r2
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	4413      	add	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	440b      	add	r3, r1
 800658a:	3317      	adds	r3, #23
 800658c:	2201      	movs	r2, #1
 800658e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006592:	b2db      	uxtb	r3, r3
 8006594:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006598:	b2db      	uxtb	r3, r3
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 faca 	bl	8006b36 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a4:	3301      	adds	r3, #1
 80065a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	791b      	ldrb	r3, [r3, #4]
 80065ac:	461a      	mov	r2, r3
 80065ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d3cd      	bcc.n	8006550 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695a      	ldr	r2, [r3, #20]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80065c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f003 feeb 	bl	800a3a4 <USB_ReadInterrupts>
 80065ce:	4603      	mov	r3, r0
 80065d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065d8:	d156      	bne.n	8006688 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065da:	2301      	movs	r3, #1
 80065dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80065de:	e045      	b.n	800666c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80065e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065f4:	4613      	mov	r3, r2
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	4413      	add	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	440b      	add	r3, r1
 80065fe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d12e      	bne.n	8006666 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006608:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800660a:	2b00      	cmp	r3, #0
 800660c:	da2b      	bge.n	8006666 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800661a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800661e:	429a      	cmp	r2, r3
 8006620:	d121      	bne.n	8006666 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006626:	4613      	mov	r3, r2
 8006628:	00db      	lsls	r3, r3, #3
 800662a:	4413      	add	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	440b      	add	r3, r1
 8006630:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006634:	2201      	movs	r2, #1
 8006636:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10a      	bne.n	8006666 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	69fa      	ldr	r2, [r7, #28]
 800665a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800665e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006662:	6053      	str	r3, [r2, #4]
            break;
 8006664:	e008      	b.n	8006678 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	3301      	adds	r3, #1
 800666a:	627b      	str	r3, [r7, #36]	@ 0x24
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	791b      	ldrb	r3, [r3, #4]
 8006670:	461a      	mov	r2, r3
 8006672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006674:	4293      	cmp	r3, r2
 8006676:	d3b3      	bcc.n	80065e0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	695a      	ldr	r2, [r3, #20]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006686:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4618      	mov	r0, r3
 800668e:	f003 fe89 	bl	800a3a4 <USB_ReadInterrupts>
 8006692:	4603      	mov	r3, r0
 8006694:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800669c:	d10a      	bne.n	80066b4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f006 fa7e 	bl	800cba0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	695a      	ldr	r2, [r3, #20]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80066b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f003 fe73 	bl	800a3a4 <USB_ReadInterrupts>
 80066be:	4603      	mov	r3, r0
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d115      	bne.n	80066f4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	f003 0304 	and.w	r3, r3, #4
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f006 fa6e 	bl	800cbbc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6859      	ldr	r1, [r3, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	605a      	str	r2, [r3, #4]
 80066f0:	e000      	b.n	80066f4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80066f2:	bf00      	nop
    }
  }
}
 80066f4:	3734      	adds	r7, #52	@ 0x34
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd90      	pop	{r4, r7, pc}

080066fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b082      	sub	sp, #8
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	460b      	mov	r3, r1
 8006704:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800670c:	2b01      	cmp	r3, #1
 800670e:	d101      	bne.n	8006714 <HAL_PCD_SetAddress+0x1a>
 8006710:	2302      	movs	r3, #2
 8006712:	e012      	b.n	800673a <HAL_PCD_SetAddress+0x40>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	78fa      	ldrb	r2, [r7, #3]
 8006720:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	78fa      	ldrb	r2, [r7, #3]
 8006728:	4611      	mov	r1, r2
 800672a:	4618      	mov	r0, r3
 800672c:	f003 fdd2 	bl	800a2d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b084      	sub	sp, #16
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	4608      	mov	r0, r1
 800674c:	4611      	mov	r1, r2
 800674e:	461a      	mov	r2, r3
 8006750:	4603      	mov	r3, r0
 8006752:	70fb      	strb	r3, [r7, #3]
 8006754:	460b      	mov	r3, r1
 8006756:	803b      	strh	r3, [r7, #0]
 8006758:	4613      	mov	r3, r2
 800675a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006764:	2b00      	cmp	r3, #0
 8006766:	da0f      	bge.n	8006788 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	f003 020f 	and.w	r2, r3, #15
 800676e:	4613      	mov	r3, r2
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	3310      	adds	r3, #16
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	4413      	add	r3, r2
 800677c:	3304      	adds	r3, #4
 800677e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2201      	movs	r2, #1
 8006784:	705a      	strb	r2, [r3, #1]
 8006786:	e00f      	b.n	80067a8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	f003 020f 	and.w	r2, r3, #15
 800678e:	4613      	mov	r3, r2
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	4413      	add	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	4413      	add	r3, r2
 800679e:	3304      	adds	r3, #4
 80067a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	f003 030f 	and.w	r3, r3, #15
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80067b4:	883b      	ldrh	r3, [r7, #0]
 80067b6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	78ba      	ldrb	r2, [r7, #2]
 80067c2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	785b      	ldrb	r3, [r3, #1]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d004      	beq.n	80067d6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	461a      	mov	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80067d6:	78bb      	ldrb	r3, [r7, #2]
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d102      	bne.n	80067e2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d101      	bne.n	80067f0 <HAL_PCD_EP_Open+0xae>
 80067ec:	2302      	movs	r3, #2
 80067ee:	e00e      	b.n	800680e <HAL_PCD_EP_Open+0xcc>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68f9      	ldr	r1, [r7, #12]
 80067fe:	4618      	mov	r0, r3
 8006800:	f002 ff52 	bl	80096a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800680c:	7afb      	ldrb	r3, [r7, #11]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b084      	sub	sp, #16
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	460b      	mov	r3, r1
 8006820:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006822:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006826:	2b00      	cmp	r3, #0
 8006828:	da0f      	bge.n	800684a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800682a:	78fb      	ldrb	r3, [r7, #3]
 800682c:	f003 020f 	and.w	r2, r3, #15
 8006830:	4613      	mov	r3, r2
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	4413      	add	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	3310      	adds	r3, #16
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	4413      	add	r3, r2
 800683e:	3304      	adds	r3, #4
 8006840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2201      	movs	r2, #1
 8006846:	705a      	strb	r2, [r3, #1]
 8006848:	e00f      	b.n	800686a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800684a:	78fb      	ldrb	r3, [r7, #3]
 800684c:	f003 020f 	and.w	r2, r3, #15
 8006850:	4613      	mov	r3, r2
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	4413      	add	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	4413      	add	r3, r2
 8006860:	3304      	adds	r3, #4
 8006862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800686a:	78fb      	ldrb	r3, [r7, #3]
 800686c:	f003 030f 	and.w	r3, r3, #15
 8006870:	b2da      	uxtb	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800687c:	2b01      	cmp	r3, #1
 800687e:	d101      	bne.n	8006884 <HAL_PCD_EP_Close+0x6e>
 8006880:	2302      	movs	r3, #2
 8006882:	e00e      	b.n	80068a2 <HAL_PCD_EP_Close+0x8c>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68f9      	ldr	r1, [r7, #12]
 8006892:	4618      	mov	r0, r3
 8006894:	f002 ff90 	bl	80097b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b086      	sub	sp, #24
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	603b      	str	r3, [r7, #0]
 80068b6:	460b      	mov	r3, r1
 80068b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068ba:	7afb      	ldrb	r3, [r7, #11]
 80068bc:	f003 020f 	and.w	r2, r3, #15
 80068c0:	4613      	mov	r3, r2
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	4413      	add	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	4413      	add	r3, r2
 80068d0:	3304      	adds	r3, #4
 80068d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	2200      	movs	r2, #0
 80068e4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	2200      	movs	r2, #0
 80068ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068ec:	7afb      	ldrb	r3, [r7, #11]
 80068ee:	f003 030f 	and.w	r3, r3, #15
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	799b      	ldrb	r3, [r3, #6]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d102      	bne.n	8006906 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6818      	ldr	r0, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	799b      	ldrb	r3, [r3, #6]
 800690e:	461a      	mov	r2, r3
 8006910:	6979      	ldr	r1, [r7, #20]
 8006912:	f003 f82d 	bl	8009970 <USB_EPStartXfer>

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	460b      	mov	r3, r1
 800692a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	f003 020f 	and.w	r2, r3, #15
 8006932:	6879      	ldr	r1, [r7, #4]
 8006934:	4613      	mov	r3, r2
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	4413      	add	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	440b      	add	r3, r1
 800693e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006942:	681b      	ldr	r3, [r3, #0]
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	607a      	str	r2, [r7, #4]
 800695a:	603b      	str	r3, [r7, #0]
 800695c:	460b      	mov	r3, r1
 800695e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006960:	7afb      	ldrb	r3, [r7, #11]
 8006962:	f003 020f 	and.w	r2, r3, #15
 8006966:	4613      	mov	r3, r2
 8006968:	00db      	lsls	r3, r3, #3
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	3310      	adds	r3, #16
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	3304      	adds	r3, #4
 8006976:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2200      	movs	r2, #0
 8006988:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2201      	movs	r2, #1
 800698e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006990:	7afb      	ldrb	r3, [r7, #11]
 8006992:	f003 030f 	and.w	r3, r3, #15
 8006996:	b2da      	uxtb	r2, r3
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	799b      	ldrb	r3, [r3, #6]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d102      	bne.n	80069aa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6818      	ldr	r0, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	799b      	ldrb	r3, [r3, #6]
 80069b2:	461a      	mov	r2, r3
 80069b4:	6979      	ldr	r1, [r7, #20]
 80069b6:	f002 ffdb 	bl	8009970 <USB_EPStartXfer>

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	460b      	mov	r3, r1
 80069ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	f003 030f 	and.w	r3, r3, #15
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	7912      	ldrb	r2, [r2, #4]
 80069da:	4293      	cmp	r3, r2
 80069dc:	d901      	bls.n	80069e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e04f      	b.n	8006a82 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80069e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	da0f      	bge.n	8006a0a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069ea:	78fb      	ldrb	r3, [r7, #3]
 80069ec:	f003 020f 	and.w	r2, r3, #15
 80069f0:	4613      	mov	r3, r2
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	4413      	add	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	3310      	adds	r3, #16
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	4413      	add	r3, r2
 80069fe:	3304      	adds	r3, #4
 8006a00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	705a      	strb	r2, [r3, #1]
 8006a08:	e00d      	b.n	8006a26 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006a0a:	78fa      	ldrb	r2, [r7, #3]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	4413      	add	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a2c:	78fb      	ldrb	r3, [r7, #3]
 8006a2e:	f003 030f 	and.w	r3, r3, #15
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d101      	bne.n	8006a46 <HAL_PCD_EP_SetStall+0x82>
 8006a42:	2302      	movs	r3, #2
 8006a44:	e01d      	b.n	8006a82 <HAL_PCD_EP_SetStall+0xbe>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68f9      	ldr	r1, [r7, #12]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f003 fb69 	bl	800a12c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a5a:	78fb      	ldrb	r3, [r7, #3]
 8006a5c:	f003 030f 	and.w	r3, r3, #15
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d109      	bne.n	8006a78 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6818      	ldr	r0, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	7999      	ldrb	r1, [r3, #6]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a72:	461a      	mov	r2, r3
 8006a74:	f003 fd5a 	bl	800a52c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	460b      	mov	r3, r1
 8006a94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	f003 030f 	and.w	r3, r3, #15
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	7912      	ldrb	r2, [r2, #4]
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d901      	bls.n	8006aa8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e042      	b.n	8006b2e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006aa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	da0f      	bge.n	8006ad0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ab0:	78fb      	ldrb	r3, [r7, #3]
 8006ab2:	f003 020f 	and.w	r2, r3, #15
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	3310      	adds	r3, #16
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2201      	movs	r2, #1
 8006acc:	705a      	strb	r2, [r3, #1]
 8006ace:	e00f      	b.n	8006af0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	f003 020f 	and.w	r2, r3, #15
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	00db      	lsls	r3, r3, #3
 8006ada:	4413      	add	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006af6:	78fb      	ldrb	r3, [r7, #3]
 8006af8:	f003 030f 	and.w	r3, r3, #15
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d101      	bne.n	8006b10 <HAL_PCD_EP_ClrStall+0x86>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	e00e      	b.n	8006b2e <HAL_PCD_EP_ClrStall+0xa4>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68f9      	ldr	r1, [r7, #12]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f003 fb72 	bl	800a208 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b084      	sub	sp, #16
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006b42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	da0c      	bge.n	8006b64 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	f003 020f 	and.w	r2, r3, #15
 8006b50:	4613      	mov	r3, r2
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	4413      	add	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	3310      	adds	r3, #16
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	3304      	adds	r3, #4
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	e00c      	b.n	8006b7e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b64:	78fb      	ldrb	r3, [r7, #3]
 8006b66:	f003 020f 	and.w	r2, r3, #15
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	4413      	add	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	4413      	add	r3, r2
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68f9      	ldr	r1, [r7, #12]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f003 f991 	bl	8009eac <USB_EPStopXfer>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006b8e:	7afb      	ldrb	r3, [r7, #11]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08a      	sub	sp, #40	@ 0x28
 8006b9c:	af02      	add	r7, sp, #8
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	3310      	adds	r3, #16
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	4413      	add	r3, r2
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	695a      	ldr	r2, [r3, #20]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d901      	bls.n	8006bd0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e06b      	b.n	8006ca8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	691a      	ldr	r2, [r3, #16]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	69fa      	ldr	r2, [r7, #28]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d902      	bls.n	8006bec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	3303      	adds	r3, #3
 8006bf0:	089b      	lsrs	r3, r3, #2
 8006bf2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006bf4:	e02a      	b.n	8006c4c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	691a      	ldr	r2, [r3, #16]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	69fa      	ldr	r2, [r7, #28]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d902      	bls.n	8006c12 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	3303      	adds	r3, #3
 8006c16:	089b      	lsrs	r3, r3, #2
 8006c18:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	68d9      	ldr	r1, [r3, #12]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	6978      	ldr	r0, [r7, #20]
 8006c30:	f003 f9e6 	bl	800a000 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	68da      	ldr	r2, [r3, #12]
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	441a      	add	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	695a      	ldr	r2, [r3, #20]
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	441a      	add	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d809      	bhi.n	8006c76 <PCD_WriteEmptyTxFifo+0xde>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	695a      	ldr	r2, [r3, #20]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d203      	bcs.n	8006c76 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1bf      	bne.n	8006bf6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	691a      	ldr	r2, [r3, #16]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d811      	bhi.n	8006ca6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	f003 030f 	and.w	r3, r3, #15
 8006c88:	2201      	movs	r2, #1
 8006c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	43db      	mvns	r3, r3
 8006c9c:	6939      	ldr	r1, [r7, #16]
 8006c9e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3720      	adds	r7, #32
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b088      	sub	sp, #32
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	333c      	adds	r3, #60	@ 0x3c
 8006cc8:	3304      	adds	r3, #4
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	799b      	ldrb	r3, [r3, #6]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d17b      	bne.n	8006dde <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f003 0308 	and.w	r3, r3, #8
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d015      	beq.n	8006d1c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	4a61      	ldr	r2, [pc, #388]	@ (8006e78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	f240 80b9 	bls.w	8006e6c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 80b3 	beq.w	8006e6c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d12:	461a      	mov	r2, r3
 8006d14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d18:	6093      	str	r3, [r2, #8]
 8006d1a:	e0a7      	b.n	8006e6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	f003 0320 	and.w	r3, r3, #32
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d009      	beq.n	8006d3a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d32:	461a      	mov	r2, r3
 8006d34:	2320      	movs	r3, #32
 8006d36:	6093      	str	r3, [r2, #8]
 8006d38:	e098      	b.n	8006e6c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f040 8093 	bne.w	8006e6c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	4a4b      	ldr	r2, [pc, #300]	@ (8006e78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d90f      	bls.n	8006d6e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00a      	beq.n	8006d6e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d64:	461a      	mov	r2, r3
 8006d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d6a:	6093      	str	r3, [r2, #8]
 8006d6c:	e07e      	b.n	8006e6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	4613      	mov	r3, r2
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	4413      	add	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	4413      	add	r3, r2
 8006d80:	3304      	adds	r3, #4
 8006d82:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6a1a      	ldr	r2, [r3, #32]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	0159      	lsls	r1, r3, #5
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	440b      	add	r3, r1
 8006d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d9a:	1ad2      	subs	r2, r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d114      	bne.n	8006dd0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d109      	bne.n	8006dc2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6818      	ldr	r0, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006db8:	461a      	mov	r2, r3
 8006dba:	2101      	movs	r1, #1
 8006dbc:	f003 fbb6 	bl	800a52c <USB_EP0_OutStart>
 8006dc0:	e006      	b.n	8006dd0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	68da      	ldr	r2, [r3, #12]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	441a      	add	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f005 fe1e 	bl	800ca18 <HAL_PCD_DataOutStageCallback>
 8006ddc:	e046      	b.n	8006e6c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	4a26      	ldr	r2, [pc, #152]	@ (8006e7c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d124      	bne.n	8006e30 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00a      	beq.n	8006e06 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e02:	6093      	str	r3, [r2, #8]
 8006e04:	e032      	b.n	8006e6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f003 0320 	and.w	r3, r3, #32
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d008      	beq.n	8006e22 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	2320      	movs	r3, #32
 8006e20:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	4619      	mov	r1, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f005 fdf5 	bl	800ca18 <HAL_PCD_DataOutStageCallback>
 8006e2e:	e01d      	b.n	8006e6c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d114      	bne.n	8006e60 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006e36:	6879      	ldr	r1, [r7, #4]
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	00db      	lsls	r3, r3, #3
 8006e3e:	4413      	add	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	440b      	add	r3, r1
 8006e44:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d108      	bne.n	8006e60 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6818      	ldr	r0, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006e58:	461a      	mov	r2, r3
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	f003 fb66 	bl	800a52c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f005 fdd6 	bl	800ca18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3720      	adds	r7, #32
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	4f54300a 	.word	0x4f54300a
 8006e7c:	4f54310a 	.word	0x4f54310a

08006e80 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	333c      	adds	r3, #60	@ 0x3c
 8006e98:	3304      	adds	r3, #4
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	4a15      	ldr	r2, [pc, #84]	@ (8006f08 <PCD_EP_OutSetupPacket_int+0x88>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d90e      	bls.n	8006ed4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d009      	beq.n	8006ed4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ecc:	461a      	mov	r2, r3
 8006ece:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ed2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f005 fd8d 	bl	800c9f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	4a0a      	ldr	r2, [pc, #40]	@ (8006f08 <PCD_EP_OutSetupPacket_int+0x88>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d90c      	bls.n	8006efc <PCD_EP_OutSetupPacket_int+0x7c>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	799b      	ldrb	r3, [r3, #6]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d108      	bne.n	8006efc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6818      	ldr	r0, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	f003 fb18 	bl	800a52c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3718      	adds	r7, #24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	4f54300a 	.word	0x4f54300a

08006f0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	460b      	mov	r3, r1
 8006f16:	70fb      	strb	r3, [r7, #3]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006f24:	78fb      	ldrb	r3, [r7, #3]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d107      	bne.n	8006f3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006f2a:	883b      	ldrh	r3, [r7, #0]
 8006f2c:	0419      	lsls	r1, r3, #16
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f38:	e028      	b.n	8006f8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f40:	0c1b      	lsrs	r3, r3, #16
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	4413      	add	r3, r2
 8006f46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006f48:	2300      	movs	r3, #0
 8006f4a:	73fb      	strb	r3, [r7, #15]
 8006f4c:	e00d      	b.n	8006f6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
 8006f54:	3340      	adds	r3, #64	@ 0x40
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	0c1b      	lsrs	r3, r3, #16
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	4413      	add	r3, r2
 8006f62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
 8006f66:	3301      	adds	r3, #1
 8006f68:	73fb      	strb	r3, [r7, #15]
 8006f6a:	7bfa      	ldrb	r2, [r7, #15]
 8006f6c:	78fb      	ldrb	r3, [r7, #3]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d3ec      	bcc.n	8006f4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006f74:	883b      	ldrh	r3, [r7, #0]
 8006f76:	0418      	lsls	r0, r3, #16
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6819      	ldr	r1, [r3, #0]
 8006f7c:	78fb      	ldrb	r3, [r7, #3]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	4302      	orrs	r2, r0
 8006f84:	3340      	adds	r3, #64	@ 0x40
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	440b      	add	r3, r1
 8006f8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b083      	sub	sp, #12
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	887a      	ldrh	r2, [r7, #2]
 8006fac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e267      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d075      	beq.n	80070de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006ff2:	4b88      	ldr	r3, [pc, #544]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 030c 	and.w	r3, r3, #12
 8006ffa:	2b04      	cmp	r3, #4
 8006ffc:	d00c      	beq.n	8007018 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ffe:	4b85      	ldr	r3, [pc, #532]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007006:	2b08      	cmp	r3, #8
 8007008:	d112      	bne.n	8007030 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800700a:	4b82      	ldr	r3, [pc, #520]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007012:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007016:	d10b      	bne.n	8007030 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007018:	4b7e      	ldr	r3, [pc, #504]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d05b      	beq.n	80070dc <HAL_RCC_OscConfig+0x108>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d157      	bne.n	80070dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e242      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007038:	d106      	bne.n	8007048 <HAL_RCC_OscConfig+0x74>
 800703a:	4b76      	ldr	r3, [pc, #472]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a75      	ldr	r2, [pc, #468]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 8007040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	e01d      	b.n	8007084 <HAL_RCC_OscConfig+0xb0>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007050:	d10c      	bne.n	800706c <HAL_RCC_OscConfig+0x98>
 8007052:	4b70      	ldr	r3, [pc, #448]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a6f      	ldr	r2, [pc, #444]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 8007058:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	4b6d      	ldr	r3, [pc, #436]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a6c      	ldr	r2, [pc, #432]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 8007064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	e00b      	b.n	8007084 <HAL_RCC_OscConfig+0xb0>
 800706c:	4b69      	ldr	r3, [pc, #420]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a68      	ldr	r2, [pc, #416]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 8007072:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	4b66      	ldr	r3, [pc, #408]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a65      	ldr	r2, [pc, #404]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 800707e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d013      	beq.n	80070b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800708c:	f7fb fce8 	bl	8002a60 <HAL_GetTick>
 8007090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007092:	e008      	b.n	80070a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007094:	f7fb fce4 	bl	8002a60 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b64      	cmp	r3, #100	@ 0x64
 80070a0:	d901      	bls.n	80070a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e207      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070a6:	4b5b      	ldr	r3, [pc, #364]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d0f0      	beq.n	8007094 <HAL_RCC_OscConfig+0xc0>
 80070b2:	e014      	b.n	80070de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070b4:	f7fb fcd4 	bl	8002a60 <HAL_GetTick>
 80070b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ba:	e008      	b.n	80070ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070bc:	f7fb fcd0 	bl	8002a60 <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	2b64      	cmp	r3, #100	@ 0x64
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e1f3      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ce:	4b51      	ldr	r3, [pc, #324]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1f0      	bne.n	80070bc <HAL_RCC_OscConfig+0xe8>
 80070da:	e000      	b.n	80070de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d063      	beq.n	80071b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80070ea:	4b4a      	ldr	r3, [pc, #296]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f003 030c 	and.w	r3, r3, #12
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00b      	beq.n	800710e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070f6:	4b47      	ldr	r3, [pc, #284]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80070fe:	2b08      	cmp	r3, #8
 8007100:	d11c      	bne.n	800713c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007102:	4b44      	ldr	r3, [pc, #272]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d116      	bne.n	800713c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800710e:	4b41      	ldr	r3, [pc, #260]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d005      	beq.n	8007126 <HAL_RCC_OscConfig+0x152>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d001      	beq.n	8007126 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e1c7      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007126:	4b3b      	ldr	r3, [pc, #236]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	00db      	lsls	r3, r3, #3
 8007134:	4937      	ldr	r1, [pc, #220]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 8007136:	4313      	orrs	r3, r2
 8007138:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800713a:	e03a      	b.n	80071b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d020      	beq.n	8007186 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007144:	4b34      	ldr	r3, [pc, #208]	@ (8007218 <HAL_RCC_OscConfig+0x244>)
 8007146:	2201      	movs	r2, #1
 8007148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800714a:	f7fb fc89 	bl	8002a60 <HAL_GetTick>
 800714e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007150:	e008      	b.n	8007164 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007152:	f7fb fc85 	bl	8002a60 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b02      	cmp	r3, #2
 800715e:	d901      	bls.n	8007164 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e1a8      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007164:	4b2b      	ldr	r3, [pc, #172]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0f0      	beq.n	8007152 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007170:	4b28      	ldr	r3, [pc, #160]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	00db      	lsls	r3, r3, #3
 800717e:	4925      	ldr	r1, [pc, #148]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 8007180:	4313      	orrs	r3, r2
 8007182:	600b      	str	r3, [r1, #0]
 8007184:	e015      	b.n	80071b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007186:	4b24      	ldr	r3, [pc, #144]	@ (8007218 <HAL_RCC_OscConfig+0x244>)
 8007188:	2200      	movs	r2, #0
 800718a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718c:	f7fb fc68 	bl	8002a60 <HAL_GetTick>
 8007190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007192:	e008      	b.n	80071a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007194:	f7fb fc64 	bl	8002a60 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d901      	bls.n	80071a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e187      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071a6:	4b1b      	ldr	r3, [pc, #108]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1f0      	bne.n	8007194 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0308 	and.w	r3, r3, #8
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d036      	beq.n	800722c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d016      	beq.n	80071f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071c6:	4b15      	ldr	r3, [pc, #84]	@ (800721c <HAL_RCC_OscConfig+0x248>)
 80071c8:	2201      	movs	r2, #1
 80071ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071cc:	f7fb fc48 	bl	8002a60 <HAL_GetTick>
 80071d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071d2:	e008      	b.n	80071e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071d4:	f7fb fc44 	bl	8002a60 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e167      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007214 <HAL_RCC_OscConfig+0x240>)
 80071e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0f0      	beq.n	80071d4 <HAL_RCC_OscConfig+0x200>
 80071f2:	e01b      	b.n	800722c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071f4:	4b09      	ldr	r3, [pc, #36]	@ (800721c <HAL_RCC_OscConfig+0x248>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071fa:	f7fb fc31 	bl	8002a60 <HAL_GetTick>
 80071fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007200:	e00e      	b.n	8007220 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007202:	f7fb fc2d 	bl	8002a60 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b02      	cmp	r3, #2
 800720e:	d907      	bls.n	8007220 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e150      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
 8007214:	40023800 	.word	0x40023800
 8007218:	42470000 	.word	0x42470000
 800721c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007220:	4b88      	ldr	r3, [pc, #544]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 8007222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1ea      	bne.n	8007202 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0304 	and.w	r3, r3, #4
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 8097 	beq.w	8007368 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800723a:	2300      	movs	r3, #0
 800723c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800723e:	4b81      	ldr	r3, [pc, #516]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 8007240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10f      	bne.n	800726a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800724a:	2300      	movs	r3, #0
 800724c:	60bb      	str	r3, [r7, #8]
 800724e:	4b7d      	ldr	r3, [pc, #500]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 8007250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007252:	4a7c      	ldr	r2, [pc, #496]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 8007254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007258:	6413      	str	r3, [r2, #64]	@ 0x40
 800725a:	4b7a      	ldr	r3, [pc, #488]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 800725c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007262:	60bb      	str	r3, [r7, #8]
 8007264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007266:	2301      	movs	r3, #1
 8007268:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800726a:	4b77      	ldr	r3, [pc, #476]	@ (8007448 <HAL_RCC_OscConfig+0x474>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007272:	2b00      	cmp	r3, #0
 8007274:	d118      	bne.n	80072a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007276:	4b74      	ldr	r3, [pc, #464]	@ (8007448 <HAL_RCC_OscConfig+0x474>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a73      	ldr	r2, [pc, #460]	@ (8007448 <HAL_RCC_OscConfig+0x474>)
 800727c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007282:	f7fb fbed 	bl	8002a60 <HAL_GetTick>
 8007286:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007288:	e008      	b.n	800729c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800728a:	f7fb fbe9 	bl	8002a60 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d901      	bls.n	800729c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e10c      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800729c:	4b6a      	ldr	r3, [pc, #424]	@ (8007448 <HAL_RCC_OscConfig+0x474>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d0f0      	beq.n	800728a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d106      	bne.n	80072be <HAL_RCC_OscConfig+0x2ea>
 80072b0:	4b64      	ldr	r3, [pc, #400]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 80072b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072b4:	4a63      	ldr	r2, [pc, #396]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 80072b6:	f043 0301 	orr.w	r3, r3, #1
 80072ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80072bc:	e01c      	b.n	80072f8 <HAL_RCC_OscConfig+0x324>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	2b05      	cmp	r3, #5
 80072c4:	d10c      	bne.n	80072e0 <HAL_RCC_OscConfig+0x30c>
 80072c6:	4b5f      	ldr	r3, [pc, #380]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 80072c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ca:	4a5e      	ldr	r2, [pc, #376]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 80072cc:	f043 0304 	orr.w	r3, r3, #4
 80072d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80072d2:	4b5c      	ldr	r3, [pc, #368]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 80072d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d6:	4a5b      	ldr	r2, [pc, #364]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 80072d8:	f043 0301 	orr.w	r3, r3, #1
 80072dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80072de:	e00b      	b.n	80072f8 <HAL_RCC_OscConfig+0x324>
 80072e0:	4b58      	ldr	r3, [pc, #352]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 80072e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072e4:	4a57      	ldr	r2, [pc, #348]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 80072e6:	f023 0301 	bic.w	r3, r3, #1
 80072ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80072ec:	4b55      	ldr	r3, [pc, #340]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 80072ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f0:	4a54      	ldr	r2, [pc, #336]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 80072f2:	f023 0304 	bic.w	r3, r3, #4
 80072f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d015      	beq.n	800732c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007300:	f7fb fbae 	bl	8002a60 <HAL_GetTick>
 8007304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007306:	e00a      	b.n	800731e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007308:	f7fb fbaa 	bl	8002a60 <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007316:	4293      	cmp	r3, r2
 8007318:	d901      	bls.n	800731e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e0cb      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800731e:	4b49      	ldr	r3, [pc, #292]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 8007320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0ee      	beq.n	8007308 <HAL_RCC_OscConfig+0x334>
 800732a:	e014      	b.n	8007356 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800732c:	f7fb fb98 	bl	8002a60 <HAL_GetTick>
 8007330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007332:	e00a      	b.n	800734a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007334:	f7fb fb94 	bl	8002a60 <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007342:	4293      	cmp	r3, r2
 8007344:	d901      	bls.n	800734a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e0b5      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800734a:	4b3e      	ldr	r3, [pc, #248]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 800734c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1ee      	bne.n	8007334 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007356:	7dfb      	ldrb	r3, [r7, #23]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d105      	bne.n	8007368 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800735c:	4b39      	ldr	r3, [pc, #228]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 800735e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007360:	4a38      	ldr	r2, [pc, #224]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 8007362:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007366:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 80a1 	beq.w	80074b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007372:	4b34      	ldr	r3, [pc, #208]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 030c 	and.w	r3, r3, #12
 800737a:	2b08      	cmp	r3, #8
 800737c:	d05c      	beq.n	8007438 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	2b02      	cmp	r3, #2
 8007384:	d141      	bne.n	800740a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007386:	4b31      	ldr	r3, [pc, #196]	@ (800744c <HAL_RCC_OscConfig+0x478>)
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800738c:	f7fb fb68 	bl	8002a60 <HAL_GetTick>
 8007390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007392:	e008      	b.n	80073a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007394:	f7fb fb64 	bl	8002a60 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e087      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073a6:	4b27      	ldr	r3, [pc, #156]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1f0      	bne.n	8007394 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	69da      	ldr	r2, [r3, #28]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c0:	019b      	lsls	r3, r3, #6
 80073c2:	431a      	orrs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c8:	085b      	lsrs	r3, r3, #1
 80073ca:	3b01      	subs	r3, #1
 80073cc:	041b      	lsls	r3, r3, #16
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d4:	061b      	lsls	r3, r3, #24
 80073d6:	491b      	ldr	r1, [pc, #108]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073dc:	4b1b      	ldr	r3, [pc, #108]	@ (800744c <HAL_RCC_OscConfig+0x478>)
 80073de:	2201      	movs	r2, #1
 80073e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073e2:	f7fb fb3d 	bl	8002a60 <HAL_GetTick>
 80073e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073e8:	e008      	b.n	80073fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073ea:	f7fb fb39 	bl	8002a60 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d901      	bls.n	80073fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e05c      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073fc:	4b11      	ldr	r3, [pc, #68]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d0f0      	beq.n	80073ea <HAL_RCC_OscConfig+0x416>
 8007408:	e054      	b.n	80074b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800740a:	4b10      	ldr	r3, [pc, #64]	@ (800744c <HAL_RCC_OscConfig+0x478>)
 800740c:	2200      	movs	r2, #0
 800740e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007410:	f7fb fb26 	bl	8002a60 <HAL_GetTick>
 8007414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007416:	e008      	b.n	800742a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007418:	f7fb fb22 	bl	8002a60 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	2b02      	cmp	r3, #2
 8007424:	d901      	bls.n	800742a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e045      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800742a:	4b06      	ldr	r3, [pc, #24]	@ (8007444 <HAL_RCC_OscConfig+0x470>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1f0      	bne.n	8007418 <HAL_RCC_OscConfig+0x444>
 8007436:	e03d      	b.n	80074b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d107      	bne.n	8007450 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e038      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
 8007444:	40023800 	.word	0x40023800
 8007448:	40007000 	.word	0x40007000
 800744c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007450:	4b1b      	ldr	r3, [pc, #108]	@ (80074c0 <HAL_RCC_OscConfig+0x4ec>)
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d028      	beq.n	80074b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007468:	429a      	cmp	r2, r3
 800746a:	d121      	bne.n	80074b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007476:	429a      	cmp	r2, r3
 8007478:	d11a      	bne.n	80074b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007480:	4013      	ands	r3, r2
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007486:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007488:	4293      	cmp	r3, r2
 800748a:	d111      	bne.n	80074b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007496:	085b      	lsrs	r3, r3, #1
 8007498:	3b01      	subs	r3, #1
 800749a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800749c:	429a      	cmp	r2, r3
 800749e:	d107      	bne.n	80074b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d001      	beq.n	80074b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e000      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3718      	adds	r7, #24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	40023800 	.word	0x40023800

080074c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e0cc      	b.n	8007672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074d8:	4b68      	ldr	r3, [pc, #416]	@ (800767c <HAL_RCC_ClockConfig+0x1b8>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0307 	and.w	r3, r3, #7
 80074e0:	683a      	ldr	r2, [r7, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d90c      	bls.n	8007500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074e6:	4b65      	ldr	r3, [pc, #404]	@ (800767c <HAL_RCC_ClockConfig+0x1b8>)
 80074e8:	683a      	ldr	r2, [r7, #0]
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ee:	4b63      	ldr	r3, [pc, #396]	@ (800767c <HAL_RCC_ClockConfig+0x1b8>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d001      	beq.n	8007500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e0b8      	b.n	8007672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d020      	beq.n	800754e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0304 	and.w	r3, r3, #4
 8007514:	2b00      	cmp	r3, #0
 8007516:	d005      	beq.n	8007524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007518:	4b59      	ldr	r3, [pc, #356]	@ (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	4a58      	ldr	r2, [pc, #352]	@ (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 800751e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007522:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0308 	and.w	r3, r3, #8
 800752c:	2b00      	cmp	r3, #0
 800752e:	d005      	beq.n	800753c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007530:	4b53      	ldr	r3, [pc, #332]	@ (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	4a52      	ldr	r2, [pc, #328]	@ (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 8007536:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800753a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800753c:	4b50      	ldr	r3, [pc, #320]	@ (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	494d      	ldr	r1, [pc, #308]	@ (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 800754a:	4313      	orrs	r3, r2
 800754c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b00      	cmp	r3, #0
 8007558:	d044      	beq.n	80075e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d107      	bne.n	8007572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007562:	4b47      	ldr	r3, [pc, #284]	@ (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d119      	bne.n	80075a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e07f      	b.n	8007672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	2b02      	cmp	r3, #2
 8007578:	d003      	beq.n	8007582 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800757e:	2b03      	cmp	r3, #3
 8007580:	d107      	bne.n	8007592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007582:	4b3f      	ldr	r3, [pc, #252]	@ (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d109      	bne.n	80075a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e06f      	b.n	8007672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007592:	4b3b      	ldr	r3, [pc, #236]	@ (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e067      	b.n	8007672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075a2:	4b37      	ldr	r3, [pc, #220]	@ (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f023 0203 	bic.w	r2, r3, #3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	4934      	ldr	r1, [pc, #208]	@ (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075b4:	f7fb fa54 	bl	8002a60 <HAL_GetTick>
 80075b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ba:	e00a      	b.n	80075d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075bc:	f7fb fa50 	bl	8002a60 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d901      	bls.n	80075d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e04f      	b.n	8007672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075d2:	4b2b      	ldr	r3, [pc, #172]	@ (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f003 020c 	and.w	r2, r3, #12
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d1eb      	bne.n	80075bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075e4:	4b25      	ldr	r3, [pc, #148]	@ (800767c <HAL_RCC_ClockConfig+0x1b8>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0307 	and.w	r3, r3, #7
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d20c      	bcs.n	800760c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075f2:	4b22      	ldr	r3, [pc, #136]	@ (800767c <HAL_RCC_ClockConfig+0x1b8>)
 80075f4:	683a      	ldr	r2, [r7, #0]
 80075f6:	b2d2      	uxtb	r2, r2
 80075f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075fa:	4b20      	ldr	r3, [pc, #128]	@ (800767c <HAL_RCC_ClockConfig+0x1b8>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	429a      	cmp	r2, r3
 8007606:	d001      	beq.n	800760c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e032      	b.n	8007672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0304 	and.w	r3, r3, #4
 8007614:	2b00      	cmp	r3, #0
 8007616:	d008      	beq.n	800762a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007618:	4b19      	ldr	r3, [pc, #100]	@ (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	4916      	ldr	r1, [pc, #88]	@ (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 8007626:	4313      	orrs	r3, r2
 8007628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0308 	and.w	r3, r3, #8
 8007632:	2b00      	cmp	r3, #0
 8007634:	d009      	beq.n	800764a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007636:	4b12      	ldr	r3, [pc, #72]	@ (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	00db      	lsls	r3, r3, #3
 8007644:	490e      	ldr	r1, [pc, #56]	@ (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 8007646:	4313      	orrs	r3, r2
 8007648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800764a:	f000 f821 	bl	8007690 <HAL_RCC_GetSysClockFreq>
 800764e:	4602      	mov	r2, r0
 8007650:	4b0b      	ldr	r3, [pc, #44]	@ (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	091b      	lsrs	r3, r3, #4
 8007656:	f003 030f 	and.w	r3, r3, #15
 800765a:	490a      	ldr	r1, [pc, #40]	@ (8007684 <HAL_RCC_ClockConfig+0x1c0>)
 800765c:	5ccb      	ldrb	r3, [r1, r3]
 800765e:	fa22 f303 	lsr.w	r3, r2, r3
 8007662:	4a09      	ldr	r2, [pc, #36]	@ (8007688 <HAL_RCC_ClockConfig+0x1c4>)
 8007664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007666:	4b09      	ldr	r3, [pc, #36]	@ (800768c <HAL_RCC_ClockConfig+0x1c8>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4618      	mov	r0, r3
 800766c:	f7fb f9b4 	bl	80029d8 <HAL_InitTick>

  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	40023c00 	.word	0x40023c00
 8007680:	40023800 	.word	0x40023800
 8007684:	080101e0 	.word	0x080101e0
 8007688:	20000004 	.word	0x20000004
 800768c:	20000008 	.word	0x20000008

08007690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007694:	b094      	sub	sp, #80	@ 0x50
 8007696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076a8:	4b79      	ldr	r3, [pc, #484]	@ (8007890 <HAL_RCC_GetSysClockFreq+0x200>)
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f003 030c 	and.w	r3, r3, #12
 80076b0:	2b08      	cmp	r3, #8
 80076b2:	d00d      	beq.n	80076d0 <HAL_RCC_GetSysClockFreq+0x40>
 80076b4:	2b08      	cmp	r3, #8
 80076b6:	f200 80e1 	bhi.w	800787c <HAL_RCC_GetSysClockFreq+0x1ec>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d002      	beq.n	80076c4 <HAL_RCC_GetSysClockFreq+0x34>
 80076be:	2b04      	cmp	r3, #4
 80076c0:	d003      	beq.n	80076ca <HAL_RCC_GetSysClockFreq+0x3a>
 80076c2:	e0db      	b.n	800787c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076c4:	4b73      	ldr	r3, [pc, #460]	@ (8007894 <HAL_RCC_GetSysClockFreq+0x204>)
 80076c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80076c8:	e0db      	b.n	8007882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076ca:	4b73      	ldr	r3, [pc, #460]	@ (8007898 <HAL_RCC_GetSysClockFreq+0x208>)
 80076cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80076ce:	e0d8      	b.n	8007882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076d0:	4b6f      	ldr	r3, [pc, #444]	@ (8007890 <HAL_RCC_GetSysClockFreq+0x200>)
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076da:	4b6d      	ldr	r3, [pc, #436]	@ (8007890 <HAL_RCC_GetSysClockFreq+0x200>)
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d063      	beq.n	80077ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076e6:	4b6a      	ldr	r3, [pc, #424]	@ (8007890 <HAL_RCC_GetSysClockFreq+0x200>)
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	099b      	lsrs	r3, r3, #6
 80076ec:	2200      	movs	r2, #0
 80076ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80076f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80076fa:	2300      	movs	r3, #0
 80076fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80076fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007702:	4622      	mov	r2, r4
 8007704:	462b      	mov	r3, r5
 8007706:	f04f 0000 	mov.w	r0, #0
 800770a:	f04f 0100 	mov.w	r1, #0
 800770e:	0159      	lsls	r1, r3, #5
 8007710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007714:	0150      	lsls	r0, r2, #5
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	4621      	mov	r1, r4
 800771c:	1a51      	subs	r1, r2, r1
 800771e:	6139      	str	r1, [r7, #16]
 8007720:	4629      	mov	r1, r5
 8007722:	eb63 0301 	sbc.w	r3, r3, r1
 8007726:	617b      	str	r3, [r7, #20]
 8007728:	f04f 0200 	mov.w	r2, #0
 800772c:	f04f 0300 	mov.w	r3, #0
 8007730:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007734:	4659      	mov	r1, fp
 8007736:	018b      	lsls	r3, r1, #6
 8007738:	4651      	mov	r1, sl
 800773a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800773e:	4651      	mov	r1, sl
 8007740:	018a      	lsls	r2, r1, #6
 8007742:	4651      	mov	r1, sl
 8007744:	ebb2 0801 	subs.w	r8, r2, r1
 8007748:	4659      	mov	r1, fp
 800774a:	eb63 0901 	sbc.w	r9, r3, r1
 800774e:	f04f 0200 	mov.w	r2, #0
 8007752:	f04f 0300 	mov.w	r3, #0
 8007756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800775a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800775e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007762:	4690      	mov	r8, r2
 8007764:	4699      	mov	r9, r3
 8007766:	4623      	mov	r3, r4
 8007768:	eb18 0303 	adds.w	r3, r8, r3
 800776c:	60bb      	str	r3, [r7, #8]
 800776e:	462b      	mov	r3, r5
 8007770:	eb49 0303 	adc.w	r3, r9, r3
 8007774:	60fb      	str	r3, [r7, #12]
 8007776:	f04f 0200 	mov.w	r2, #0
 800777a:	f04f 0300 	mov.w	r3, #0
 800777e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007782:	4629      	mov	r1, r5
 8007784:	024b      	lsls	r3, r1, #9
 8007786:	4621      	mov	r1, r4
 8007788:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800778c:	4621      	mov	r1, r4
 800778e:	024a      	lsls	r2, r1, #9
 8007790:	4610      	mov	r0, r2
 8007792:	4619      	mov	r1, r3
 8007794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007796:	2200      	movs	r2, #0
 8007798:	62bb      	str	r3, [r7, #40]	@ 0x28
 800779a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800779c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80077a0:	f7f9 fa72 	bl	8000c88 <__aeabi_uldivmod>
 80077a4:	4602      	mov	r2, r0
 80077a6:	460b      	mov	r3, r1
 80077a8:	4613      	mov	r3, r2
 80077aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077ac:	e058      	b.n	8007860 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077ae:	4b38      	ldr	r3, [pc, #224]	@ (8007890 <HAL_RCC_GetSysClockFreq+0x200>)
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	099b      	lsrs	r3, r3, #6
 80077b4:	2200      	movs	r2, #0
 80077b6:	4618      	mov	r0, r3
 80077b8:	4611      	mov	r1, r2
 80077ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80077be:	623b      	str	r3, [r7, #32]
 80077c0:	2300      	movs	r3, #0
 80077c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80077c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80077c8:	4642      	mov	r2, r8
 80077ca:	464b      	mov	r3, r9
 80077cc:	f04f 0000 	mov.w	r0, #0
 80077d0:	f04f 0100 	mov.w	r1, #0
 80077d4:	0159      	lsls	r1, r3, #5
 80077d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077da:	0150      	lsls	r0, r2, #5
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4641      	mov	r1, r8
 80077e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80077e6:	4649      	mov	r1, r9
 80077e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80077ec:	f04f 0200 	mov.w	r2, #0
 80077f0:	f04f 0300 	mov.w	r3, #0
 80077f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80077f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80077fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007800:	ebb2 040a 	subs.w	r4, r2, sl
 8007804:	eb63 050b 	sbc.w	r5, r3, fp
 8007808:	f04f 0200 	mov.w	r2, #0
 800780c:	f04f 0300 	mov.w	r3, #0
 8007810:	00eb      	lsls	r3, r5, #3
 8007812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007816:	00e2      	lsls	r2, r4, #3
 8007818:	4614      	mov	r4, r2
 800781a:	461d      	mov	r5, r3
 800781c:	4643      	mov	r3, r8
 800781e:	18e3      	adds	r3, r4, r3
 8007820:	603b      	str	r3, [r7, #0]
 8007822:	464b      	mov	r3, r9
 8007824:	eb45 0303 	adc.w	r3, r5, r3
 8007828:	607b      	str	r3, [r7, #4]
 800782a:	f04f 0200 	mov.w	r2, #0
 800782e:	f04f 0300 	mov.w	r3, #0
 8007832:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007836:	4629      	mov	r1, r5
 8007838:	028b      	lsls	r3, r1, #10
 800783a:	4621      	mov	r1, r4
 800783c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007840:	4621      	mov	r1, r4
 8007842:	028a      	lsls	r2, r1, #10
 8007844:	4610      	mov	r0, r2
 8007846:	4619      	mov	r1, r3
 8007848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800784a:	2200      	movs	r2, #0
 800784c:	61bb      	str	r3, [r7, #24]
 800784e:	61fa      	str	r2, [r7, #28]
 8007850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007854:	f7f9 fa18 	bl	8000c88 <__aeabi_uldivmod>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	4613      	mov	r3, r2
 800785e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007860:	4b0b      	ldr	r3, [pc, #44]	@ (8007890 <HAL_RCC_GetSysClockFreq+0x200>)
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	0c1b      	lsrs	r3, r3, #16
 8007866:	f003 0303 	and.w	r3, r3, #3
 800786a:	3301      	adds	r3, #1
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007870:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007874:	fbb2 f3f3 	udiv	r3, r2, r3
 8007878:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800787a:	e002      	b.n	8007882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800787c:	4b05      	ldr	r3, [pc, #20]	@ (8007894 <HAL_RCC_GetSysClockFreq+0x204>)
 800787e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007882:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007884:	4618      	mov	r0, r3
 8007886:	3750      	adds	r7, #80	@ 0x50
 8007888:	46bd      	mov	sp, r7
 800788a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800788e:	bf00      	nop
 8007890:	40023800 	.word	0x40023800
 8007894:	00f42400 	.word	0x00f42400
 8007898:	007a1200 	.word	0x007a1200

0800789c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800789c:	b480      	push	{r7}
 800789e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078a0:	4b03      	ldr	r3, [pc, #12]	@ (80078b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80078a2:	681b      	ldr	r3, [r3, #0]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	20000004 	.word	0x20000004

080078b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80078b8:	f7ff fff0 	bl	800789c <HAL_RCC_GetHCLKFreq>
 80078bc:	4602      	mov	r2, r0
 80078be:	4b05      	ldr	r3, [pc, #20]	@ (80078d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	0a9b      	lsrs	r3, r3, #10
 80078c4:	f003 0307 	and.w	r3, r3, #7
 80078c8:	4903      	ldr	r1, [pc, #12]	@ (80078d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078ca:	5ccb      	ldrb	r3, [r1, r3]
 80078cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	40023800 	.word	0x40023800
 80078d8:	080101f0 	.word	0x080101f0

080078dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80078e0:	f7ff ffdc 	bl	800789c <HAL_RCC_GetHCLKFreq>
 80078e4:	4602      	mov	r2, r0
 80078e6:	4b05      	ldr	r3, [pc, #20]	@ (80078fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	0b5b      	lsrs	r3, r3, #13
 80078ec:	f003 0307 	and.w	r3, r3, #7
 80078f0:	4903      	ldr	r1, [pc, #12]	@ (8007900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80078f2:	5ccb      	ldrb	r3, [r1, r3]
 80078f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	40023800 	.word	0x40023800
 8007900:	080101f0 	.word	0x080101f0

08007904 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b086      	sub	sp, #24
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b00      	cmp	r3, #0
 800791e:	d105      	bne.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007928:	2b00      	cmp	r3, #0
 800792a:	d035      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800792c:	4b62      	ldr	r3, [pc, #392]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800792e:	2200      	movs	r2, #0
 8007930:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007932:	f7fb f895 	bl	8002a60 <HAL_GetTick>
 8007936:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007938:	e008      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800793a:	f7fb f891 	bl	8002a60 <HAL_GetTick>
 800793e:	4602      	mov	r2, r0
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	2b02      	cmp	r3, #2
 8007946:	d901      	bls.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	e0b0      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800794c:	4b5b      	ldr	r3, [pc, #364]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1f0      	bne.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	019a      	lsls	r2, r3, #6
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	071b      	lsls	r3, r3, #28
 8007964:	4955      	ldr	r1, [pc, #340]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007966:	4313      	orrs	r3, r2
 8007968:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800796c:	4b52      	ldr	r3, [pc, #328]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800796e:	2201      	movs	r2, #1
 8007970:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007972:	f7fb f875 	bl	8002a60 <HAL_GetTick>
 8007976:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007978:	e008      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800797a:	f7fb f871 	bl	8002a60 <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	2b02      	cmp	r3, #2
 8007986:	d901      	bls.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e090      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800798c:	4b4b      	ldr	r3, [pc, #300]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d0f0      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 0302 	and.w	r3, r3, #2
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 8083 	beq.w	8007aac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80079a6:	2300      	movs	r3, #0
 80079a8:	60fb      	str	r3, [r7, #12]
 80079aa:	4b44      	ldr	r3, [pc, #272]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ae:	4a43      	ldr	r2, [pc, #268]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80079b6:	4b41      	ldr	r3, [pc, #260]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80079c2:	4b3f      	ldr	r3, [pc, #252]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a3e      	ldr	r2, [pc, #248]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80079c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80079ce:	f7fb f847 	bl	8002a60 <HAL_GetTick>
 80079d2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80079d4:	e008      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079d6:	f7fb f843 	bl	8002a60 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d901      	bls.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e062      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80079e8:	4b35      	ldr	r3, [pc, #212]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d0f0      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80079f4:	4b31      	ldr	r3, [pc, #196]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079fc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d02f      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d028      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a12:	4b2a      	ldr	r3, [pc, #168]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a1a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a1c:	4b29      	ldr	r3, [pc, #164]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007a1e:	2201      	movs	r2, #1
 8007a20:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a22:	4b28      	ldr	r3, [pc, #160]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007a28:	4a24      	ldr	r2, [pc, #144]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a2e:	4b23      	ldr	r3, [pc, #140]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d114      	bne.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007a3a:	f7fb f811 	bl	8002a60 <HAL_GetTick>
 8007a3e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a40:	e00a      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a42:	f7fb f80d 	bl	8002a60 <HAL_GetTick>
 8007a46:	4602      	mov	r2, r0
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d901      	bls.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e02a      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a58:	4b18      	ldr	r3, [pc, #96]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a5c:	f003 0302 	and.w	r3, r3, #2
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d0ee      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a70:	d10d      	bne.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007a72:	4b12      	ldr	r3, [pc, #72]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a86:	490d      	ldr	r1, [pc, #52]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	608b      	str	r3, [r1, #8]
 8007a8c:	e005      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	4a0a      	ldr	r2, [pc, #40]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a94:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007a98:	6093      	str	r3, [r2, #8]
 8007a9a:	4b08      	ldr	r3, [pc, #32]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a9c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007aa6:	4905      	ldr	r1, [pc, #20]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	42470068 	.word	0x42470068
 8007abc:	40023800 	.word	0x40023800
 8007ac0:	40007000 	.word	0x40007000
 8007ac4:	42470e40 	.word	0x42470e40

08007ac8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007adc:	2300      	movs	r3, #0
 8007ade:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d13f      	bne.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007ae6:	4b24      	ldr	r3, [pc, #144]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d006      	beq.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007afc:	d12f      	bne.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007afe:	4b1f      	ldr	r3, [pc, #124]	@ (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007b00:	617b      	str	r3, [r7, #20]
          break;
 8007b02:	e02f      	b.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007b04:	4b1c      	ldr	r3, [pc, #112]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b10:	d108      	bne.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007b12:	4b19      	ldr	r3, [pc, #100]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b1a:	4a19      	ldr	r2, [pc, #100]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b20:	613b      	str	r3, [r7, #16]
 8007b22:	e007      	b.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007b24:	4b14      	ldr	r3, [pc, #80]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b2c:	4a15      	ldr	r2, [pc, #84]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b32:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007b34:	4b10      	ldr	r3, [pc, #64]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b3a:	099b      	lsrs	r3, r3, #6
 8007b3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	fb02 f303 	mul.w	r3, r2, r3
 8007b46:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007b48:	4b0b      	ldr	r3, [pc, #44]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b4e:	0f1b      	lsrs	r3, r3, #28
 8007b50:	f003 0307 	and.w	r3, r3, #7
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b5a:	617b      	str	r3, [r7, #20]
          break;
 8007b5c:	e002      	b.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	617b      	str	r3, [r7, #20]
          break;
 8007b62:	bf00      	nop
        }
      }
      break;
 8007b64:	e000      	b.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8007b66:	bf00      	nop
    }
  }
  return frequency;
 8007b68:	697b      	ldr	r3, [r7, #20]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	371c      	adds	r7, #28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	40023800 	.word	0x40023800
 8007b7c:	00bb8000 	.word	0x00bb8000
 8007b80:	007a1200 	.word	0x007a1200
 8007b84:	00f42400 	.word	0x00f42400

08007b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e041      	b.n	8007c1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d106      	bne.n	8007bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f7fa fd2a 	bl	8002608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4610      	mov	r0, r2
 8007bc8:	f000 fa7a 	bl	80080c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
	...

08007c28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d001      	beq.n	8007c40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e046      	b.n	8007cce <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2202      	movs	r2, #2
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a23      	ldr	r2, [pc, #140]	@ (8007cdc <HAL_TIM_Base_Start+0xb4>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d022      	beq.n	8007c98 <HAL_TIM_Base_Start+0x70>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c5a:	d01d      	beq.n	8007c98 <HAL_TIM_Base_Start+0x70>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a1f      	ldr	r2, [pc, #124]	@ (8007ce0 <HAL_TIM_Base_Start+0xb8>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d018      	beq.n	8007c98 <HAL_TIM_Base_Start+0x70>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ce4 <HAL_TIM_Base_Start+0xbc>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d013      	beq.n	8007c98 <HAL_TIM_Base_Start+0x70>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a1c      	ldr	r2, [pc, #112]	@ (8007ce8 <HAL_TIM_Base_Start+0xc0>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d00e      	beq.n	8007c98 <HAL_TIM_Base_Start+0x70>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8007cec <HAL_TIM_Base_Start+0xc4>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d009      	beq.n	8007c98 <HAL_TIM_Base_Start+0x70>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a19      	ldr	r2, [pc, #100]	@ (8007cf0 <HAL_TIM_Base_Start+0xc8>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d004      	beq.n	8007c98 <HAL_TIM_Base_Start+0x70>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a18      	ldr	r2, [pc, #96]	@ (8007cf4 <HAL_TIM_Base_Start+0xcc>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d111      	bne.n	8007cbc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2b06      	cmp	r3, #6
 8007ca8:	d010      	beq.n	8007ccc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f042 0201 	orr.w	r2, r2, #1
 8007cb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cba:	e007      	b.n	8007ccc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0201 	orr.w	r2, r2, #1
 8007cca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3714      	adds	r7, #20
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	40010000 	.word	0x40010000
 8007ce0:	40000400 	.word	0x40000400
 8007ce4:	40000800 	.word	0x40000800
 8007ce8:	40000c00 	.word	0x40000c00
 8007cec:	40010400 	.word	0x40010400
 8007cf0:	40014000 	.word	0x40014000
 8007cf4:	40001800 	.word	0x40001800

08007cf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e041      	b.n	8007d8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d106      	bne.n	8007d24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f839 	bl	8007d96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2202      	movs	r2, #2
 8007d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	3304      	adds	r3, #4
 8007d34:	4619      	mov	r1, r3
 8007d36:	4610      	mov	r0, r2
 8007d38:	f000 f9c2 	bl	80080c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b083      	sub	sp, #12
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
	...

08007dac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b086      	sub	sp, #24
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007db8:	2300      	movs	r3, #0
 8007dba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d101      	bne.n	8007dca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007dc6:	2302      	movs	r3, #2
 8007dc8:	e0ae      	b.n	8007f28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b0c      	cmp	r3, #12
 8007dd6:	f200 809f 	bhi.w	8007f18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007dda:	a201      	add	r2, pc, #4	@ (adr r2, 8007de0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de0:	08007e15 	.word	0x08007e15
 8007de4:	08007f19 	.word	0x08007f19
 8007de8:	08007f19 	.word	0x08007f19
 8007dec:	08007f19 	.word	0x08007f19
 8007df0:	08007e55 	.word	0x08007e55
 8007df4:	08007f19 	.word	0x08007f19
 8007df8:	08007f19 	.word	0x08007f19
 8007dfc:	08007f19 	.word	0x08007f19
 8007e00:	08007e97 	.word	0x08007e97
 8007e04:	08007f19 	.word	0x08007f19
 8007e08:	08007f19 	.word	0x08007f19
 8007e0c:	08007f19 	.word	0x08007f19
 8007e10:	08007ed7 	.word	0x08007ed7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68b9      	ldr	r1, [r7, #8]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 f9fc 	bl	8008218 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	699a      	ldr	r2, [r3, #24]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f042 0208 	orr.w	r2, r2, #8
 8007e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	699a      	ldr	r2, [r3, #24]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 0204 	bic.w	r2, r2, #4
 8007e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6999      	ldr	r1, [r3, #24]
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	691a      	ldr	r2, [r3, #16]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	619a      	str	r2, [r3, #24]
      break;
 8007e52:	e064      	b.n	8007f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68b9      	ldr	r1, [r7, #8]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 fa4c 	bl	80082f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	699a      	ldr	r2, [r3, #24]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	699a      	ldr	r2, [r3, #24]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6999      	ldr	r1, [r3, #24]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	021a      	lsls	r2, r3, #8
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	619a      	str	r2, [r3, #24]
      break;
 8007e94:	e043      	b.n	8007f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68b9      	ldr	r1, [r7, #8]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 faa1 	bl	80083e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	69da      	ldr	r2, [r3, #28]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f042 0208 	orr.w	r2, r2, #8
 8007eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	69da      	ldr	r2, [r3, #28]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f022 0204 	bic.w	r2, r2, #4
 8007ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	69d9      	ldr	r1, [r3, #28]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	691a      	ldr	r2, [r3, #16]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	61da      	str	r2, [r3, #28]
      break;
 8007ed4:	e023      	b.n	8007f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68b9      	ldr	r1, [r7, #8]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f000 faf5 	bl	80084cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	69da      	ldr	r2, [r3, #28]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	69da      	ldr	r2, [r3, #28]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	69d9      	ldr	r1, [r3, #28]
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	021a      	lsls	r2, r3, #8
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	61da      	str	r2, [r3, #28]
      break;
 8007f16:	e002      	b.n	8007f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3718      	adds	r7, #24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d101      	bne.n	8007f4c <HAL_TIM_ConfigClockSource+0x1c>
 8007f48:	2302      	movs	r3, #2
 8007f4a:	e0b4      	b.n	80080b6 <HAL_TIM_ConfigClockSource+0x186>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2202      	movs	r2, #2
 8007f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f84:	d03e      	beq.n	8008004 <HAL_TIM_ConfigClockSource+0xd4>
 8007f86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f8a:	f200 8087 	bhi.w	800809c <HAL_TIM_ConfigClockSource+0x16c>
 8007f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f92:	f000 8086 	beq.w	80080a2 <HAL_TIM_ConfigClockSource+0x172>
 8007f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f9a:	d87f      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x16c>
 8007f9c:	2b70      	cmp	r3, #112	@ 0x70
 8007f9e:	d01a      	beq.n	8007fd6 <HAL_TIM_ConfigClockSource+0xa6>
 8007fa0:	2b70      	cmp	r3, #112	@ 0x70
 8007fa2:	d87b      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x16c>
 8007fa4:	2b60      	cmp	r3, #96	@ 0x60
 8007fa6:	d050      	beq.n	800804a <HAL_TIM_ConfigClockSource+0x11a>
 8007fa8:	2b60      	cmp	r3, #96	@ 0x60
 8007faa:	d877      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x16c>
 8007fac:	2b50      	cmp	r3, #80	@ 0x50
 8007fae:	d03c      	beq.n	800802a <HAL_TIM_ConfigClockSource+0xfa>
 8007fb0:	2b50      	cmp	r3, #80	@ 0x50
 8007fb2:	d873      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x16c>
 8007fb4:	2b40      	cmp	r3, #64	@ 0x40
 8007fb6:	d058      	beq.n	800806a <HAL_TIM_ConfigClockSource+0x13a>
 8007fb8:	2b40      	cmp	r3, #64	@ 0x40
 8007fba:	d86f      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x16c>
 8007fbc:	2b30      	cmp	r3, #48	@ 0x30
 8007fbe:	d064      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x15a>
 8007fc0:	2b30      	cmp	r3, #48	@ 0x30
 8007fc2:	d86b      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x16c>
 8007fc4:	2b20      	cmp	r3, #32
 8007fc6:	d060      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x15a>
 8007fc8:	2b20      	cmp	r3, #32
 8007fca:	d867      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x16c>
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d05c      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x15a>
 8007fd0:	2b10      	cmp	r3, #16
 8007fd2:	d05a      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x15a>
 8007fd4:	e062      	b.n	800809c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fe6:	f000 fb41 	bl	800866c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007ff8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	609a      	str	r2, [r3, #8]
      break;
 8008002:	e04f      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008014:	f000 fb2a 	bl	800866c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	689a      	ldr	r2, [r3, #8]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008026:	609a      	str	r2, [r3, #8]
      break;
 8008028:	e03c      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008036:	461a      	mov	r2, r3
 8008038:	f000 fa9e 	bl	8008578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2150      	movs	r1, #80	@ 0x50
 8008042:	4618      	mov	r0, r3
 8008044:	f000 faf7 	bl	8008636 <TIM_ITRx_SetConfig>
      break;
 8008048:	e02c      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008056:	461a      	mov	r2, r3
 8008058:	f000 fabd 	bl	80085d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2160      	movs	r1, #96	@ 0x60
 8008062:	4618      	mov	r0, r3
 8008064:	f000 fae7 	bl	8008636 <TIM_ITRx_SetConfig>
      break;
 8008068:	e01c      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008076:	461a      	mov	r2, r3
 8008078:	f000 fa7e 	bl	8008578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2140      	movs	r1, #64	@ 0x40
 8008082:	4618      	mov	r0, r3
 8008084:	f000 fad7 	bl	8008636 <TIM_ITRx_SetConfig>
      break;
 8008088:	e00c      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4619      	mov	r1, r3
 8008094:	4610      	mov	r0, r2
 8008096:	f000 face 	bl	8008636 <TIM_ITRx_SetConfig>
      break;
 800809a:	e003      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	73fb      	strb	r3, [r7, #15]
      break;
 80080a0:	e000      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
	...

080080c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a46      	ldr	r2, [pc, #280]	@ (80081ec <TIM_Base_SetConfig+0x12c>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d013      	beq.n	8008100 <TIM_Base_SetConfig+0x40>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080de:	d00f      	beq.n	8008100 <TIM_Base_SetConfig+0x40>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a43      	ldr	r2, [pc, #268]	@ (80081f0 <TIM_Base_SetConfig+0x130>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d00b      	beq.n	8008100 <TIM_Base_SetConfig+0x40>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a42      	ldr	r2, [pc, #264]	@ (80081f4 <TIM_Base_SetConfig+0x134>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d007      	beq.n	8008100 <TIM_Base_SetConfig+0x40>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a41      	ldr	r2, [pc, #260]	@ (80081f8 <TIM_Base_SetConfig+0x138>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d003      	beq.n	8008100 <TIM_Base_SetConfig+0x40>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a40      	ldr	r2, [pc, #256]	@ (80081fc <TIM_Base_SetConfig+0x13c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d108      	bne.n	8008112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	4313      	orrs	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a35      	ldr	r2, [pc, #212]	@ (80081ec <TIM_Base_SetConfig+0x12c>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d02b      	beq.n	8008172 <TIM_Base_SetConfig+0xb2>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008120:	d027      	beq.n	8008172 <TIM_Base_SetConfig+0xb2>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a32      	ldr	r2, [pc, #200]	@ (80081f0 <TIM_Base_SetConfig+0x130>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d023      	beq.n	8008172 <TIM_Base_SetConfig+0xb2>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a31      	ldr	r2, [pc, #196]	@ (80081f4 <TIM_Base_SetConfig+0x134>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d01f      	beq.n	8008172 <TIM_Base_SetConfig+0xb2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a30      	ldr	r2, [pc, #192]	@ (80081f8 <TIM_Base_SetConfig+0x138>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d01b      	beq.n	8008172 <TIM_Base_SetConfig+0xb2>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a2f      	ldr	r2, [pc, #188]	@ (80081fc <TIM_Base_SetConfig+0x13c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d017      	beq.n	8008172 <TIM_Base_SetConfig+0xb2>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a2e      	ldr	r2, [pc, #184]	@ (8008200 <TIM_Base_SetConfig+0x140>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d013      	beq.n	8008172 <TIM_Base_SetConfig+0xb2>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a2d      	ldr	r2, [pc, #180]	@ (8008204 <TIM_Base_SetConfig+0x144>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d00f      	beq.n	8008172 <TIM_Base_SetConfig+0xb2>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a2c      	ldr	r2, [pc, #176]	@ (8008208 <TIM_Base_SetConfig+0x148>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d00b      	beq.n	8008172 <TIM_Base_SetConfig+0xb2>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a2b      	ldr	r2, [pc, #172]	@ (800820c <TIM_Base_SetConfig+0x14c>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d007      	beq.n	8008172 <TIM_Base_SetConfig+0xb2>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a2a      	ldr	r2, [pc, #168]	@ (8008210 <TIM_Base_SetConfig+0x150>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d003      	beq.n	8008172 <TIM_Base_SetConfig+0xb2>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a29      	ldr	r2, [pc, #164]	@ (8008214 <TIM_Base_SetConfig+0x154>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d108      	bne.n	8008184 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	4313      	orrs	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	4313      	orrs	r3, r2
 8008190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	689a      	ldr	r2, [r3, #8]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a10      	ldr	r2, [pc, #64]	@ (80081ec <TIM_Base_SetConfig+0x12c>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d003      	beq.n	80081b8 <TIM_Base_SetConfig+0xf8>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a12      	ldr	r2, [pc, #72]	@ (80081fc <TIM_Base_SetConfig+0x13c>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d103      	bne.n	80081c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	691a      	ldr	r2, [r3, #16]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d105      	bne.n	80081de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	f023 0201 	bic.w	r2, r3, #1
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	611a      	str	r2, [r3, #16]
  }
}
 80081de:	bf00      	nop
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	40010000 	.word	0x40010000
 80081f0:	40000400 	.word	0x40000400
 80081f4:	40000800 	.word	0x40000800
 80081f8:	40000c00 	.word	0x40000c00
 80081fc:	40010400 	.word	0x40010400
 8008200:	40014000 	.word	0x40014000
 8008204:	40014400 	.word	0x40014400
 8008208:	40014800 	.word	0x40014800
 800820c:	40001800 	.word	0x40001800
 8008210:	40001c00 	.word	0x40001c00
 8008214:	40002000 	.word	0x40002000

08008218 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a1b      	ldr	r3, [r3, #32]
 8008226:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a1b      	ldr	r3, [r3, #32]
 800822c:	f023 0201 	bic.w	r2, r3, #1
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f023 0303 	bic.w	r3, r3, #3
 800824e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	4313      	orrs	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f023 0302 	bic.w	r3, r3, #2
 8008260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	697a      	ldr	r2, [r7, #20]
 8008268:	4313      	orrs	r3, r2
 800826a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a20      	ldr	r2, [pc, #128]	@ (80082f0 <TIM_OC1_SetConfig+0xd8>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d003      	beq.n	800827c <TIM_OC1_SetConfig+0x64>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a1f      	ldr	r2, [pc, #124]	@ (80082f4 <TIM_OC1_SetConfig+0xdc>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d10c      	bne.n	8008296 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	f023 0308 	bic.w	r3, r3, #8
 8008282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	697a      	ldr	r2, [r7, #20]
 800828a:	4313      	orrs	r3, r2
 800828c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	f023 0304 	bic.w	r3, r3, #4
 8008294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a15      	ldr	r2, [pc, #84]	@ (80082f0 <TIM_OC1_SetConfig+0xd8>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d003      	beq.n	80082a6 <TIM_OC1_SetConfig+0x8e>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a14      	ldr	r2, [pc, #80]	@ (80082f4 <TIM_OC1_SetConfig+0xdc>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d111      	bne.n	80082ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80082b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	4313      	orrs	r3, r2
 80082be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	693a      	ldr	r2, [r7, #16]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	621a      	str	r2, [r3, #32]
}
 80082e4:	bf00      	nop
 80082e6:	371c      	adds	r7, #28
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	40010000 	.word	0x40010000
 80082f4:	40010400 	.word	0x40010400

080082f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	f023 0210 	bic.w	r2, r3, #16
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800832e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	021b      	lsls	r3, r3, #8
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	4313      	orrs	r3, r2
 800833a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	f023 0320 	bic.w	r3, r3, #32
 8008342:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	011b      	lsls	r3, r3, #4
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	4313      	orrs	r3, r2
 800834e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a22      	ldr	r2, [pc, #136]	@ (80083dc <TIM_OC2_SetConfig+0xe4>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d003      	beq.n	8008360 <TIM_OC2_SetConfig+0x68>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a21      	ldr	r2, [pc, #132]	@ (80083e0 <TIM_OC2_SetConfig+0xe8>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d10d      	bne.n	800837c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	011b      	lsls	r3, r3, #4
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	4313      	orrs	r3, r2
 8008372:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800837a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a17      	ldr	r2, [pc, #92]	@ (80083dc <TIM_OC2_SetConfig+0xe4>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d003      	beq.n	800838c <TIM_OC2_SetConfig+0x94>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a16      	ldr	r2, [pc, #88]	@ (80083e0 <TIM_OC2_SetConfig+0xe8>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d113      	bne.n	80083b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008392:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800839a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	697a      	ldr	r2, [r7, #20]
 80083cc:	621a      	str	r2, [r3, #32]
}
 80083ce:	bf00      	nop
 80083d0:	371c      	adds	r7, #28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	40010000 	.word	0x40010000
 80083e0:	40010400 	.word	0x40010400

080083e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b087      	sub	sp, #28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	69db      	ldr	r3, [r3, #28]
 800840a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f023 0303 	bic.w	r3, r3, #3
 800841a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	4313      	orrs	r3, r2
 8008424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800842c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	021b      	lsls	r3, r3, #8
 8008434:	697a      	ldr	r2, [r7, #20]
 8008436:	4313      	orrs	r3, r2
 8008438:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a21      	ldr	r2, [pc, #132]	@ (80084c4 <TIM_OC3_SetConfig+0xe0>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d003      	beq.n	800844a <TIM_OC3_SetConfig+0x66>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a20      	ldr	r2, [pc, #128]	@ (80084c8 <TIM_OC3_SetConfig+0xe4>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d10d      	bne.n	8008466 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008450:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	021b      	lsls	r3, r3, #8
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	4313      	orrs	r3, r2
 800845c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a16      	ldr	r2, [pc, #88]	@ (80084c4 <TIM_OC3_SetConfig+0xe0>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d003      	beq.n	8008476 <TIM_OC3_SetConfig+0x92>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a15      	ldr	r2, [pc, #84]	@ (80084c8 <TIM_OC3_SetConfig+0xe4>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d113      	bne.n	800849e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800847c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	011b      	lsls	r3, r3, #4
 800848c:	693a      	ldr	r2, [r7, #16]
 800848e:	4313      	orrs	r3, r2
 8008490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	011b      	lsls	r3, r3, #4
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	4313      	orrs	r3, r2
 800849c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	685a      	ldr	r2, [r3, #4]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	697a      	ldr	r2, [r7, #20]
 80084b6:	621a      	str	r2, [r3, #32]
}
 80084b8:	bf00      	nop
 80084ba:	371c      	adds	r7, #28
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr
 80084c4:	40010000 	.word	0x40010000
 80084c8:	40010400 	.word	0x40010400

080084cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b087      	sub	sp, #28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a1b      	ldr	r3, [r3, #32]
 80084da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a1b      	ldr	r3, [r3, #32]
 80084e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	69db      	ldr	r3, [r3, #28]
 80084f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	021b      	lsls	r3, r3, #8
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	4313      	orrs	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008516:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	031b      	lsls	r3, r3, #12
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	4313      	orrs	r3, r2
 8008522:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a12      	ldr	r2, [pc, #72]	@ (8008570 <TIM_OC4_SetConfig+0xa4>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d003      	beq.n	8008534 <TIM_OC4_SetConfig+0x68>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a11      	ldr	r2, [pc, #68]	@ (8008574 <TIM_OC4_SetConfig+0xa8>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d109      	bne.n	8008548 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800853a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	695b      	ldr	r3, [r3, #20]
 8008540:	019b      	lsls	r3, r3, #6
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	4313      	orrs	r3, r2
 8008546:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	621a      	str	r2, [r3, #32]
}
 8008562:	bf00      	nop
 8008564:	371c      	adds	r7, #28
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	40010000 	.word	0x40010000
 8008574:	40010400 	.word	0x40010400

08008578 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008578:	b480      	push	{r7}
 800857a:	b087      	sub	sp, #28
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6a1b      	ldr	r3, [r3, #32]
 8008588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	f023 0201 	bic.w	r2, r3, #1
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	011b      	lsls	r3, r3, #4
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f023 030a 	bic.w	r3, r3, #10
 80085b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	621a      	str	r2, [r3, #32]
}
 80085ca:	bf00      	nop
 80085cc:	371c      	adds	r7, #28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b087      	sub	sp, #28
 80085da:	af00      	add	r7, sp, #0
 80085dc:	60f8      	str	r0, [r7, #12]
 80085de:	60b9      	str	r1, [r7, #8]
 80085e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6a1b      	ldr	r3, [r3, #32]
 80085ec:	f023 0210 	bic.w	r2, r3, #16
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008600:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	031b      	lsls	r3, r3, #12
 8008606:	693a      	ldr	r2, [r7, #16]
 8008608:	4313      	orrs	r3, r2
 800860a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008612:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	011b      	lsls	r3, r3, #4
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	4313      	orrs	r3, r2
 800861c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	621a      	str	r2, [r3, #32]
}
 800862a:	bf00      	nop
 800862c:	371c      	adds	r7, #28
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008636:	b480      	push	{r7}
 8008638:	b085      	sub	sp, #20
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800864c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	4313      	orrs	r3, r2
 8008654:	f043 0307 	orr.w	r3, r3, #7
 8008658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	609a      	str	r2, [r3, #8]
}
 8008660:	bf00      	nop
 8008662:	3714      	adds	r7, #20
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800866c:	b480      	push	{r7}
 800866e:	b087      	sub	sp, #28
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
 8008678:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008686:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	021a      	lsls	r2, r3, #8
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	431a      	orrs	r2, r3
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	4313      	orrs	r3, r2
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	4313      	orrs	r3, r2
 8008698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	609a      	str	r2, [r3, #8]
}
 80086a0:	bf00      	nop
 80086a2:	371c      	adds	r7, #28
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d101      	bne.n	80086c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086c0:	2302      	movs	r3, #2
 80086c2:	e05a      	b.n	800877a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2202      	movs	r2, #2
 80086d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a21      	ldr	r2, [pc, #132]	@ (8008788 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d022      	beq.n	800874e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008710:	d01d      	beq.n	800874e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a1d      	ldr	r2, [pc, #116]	@ (800878c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d018      	beq.n	800874e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a1b      	ldr	r2, [pc, #108]	@ (8008790 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d013      	beq.n	800874e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a1a      	ldr	r2, [pc, #104]	@ (8008794 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d00e      	beq.n	800874e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a18      	ldr	r2, [pc, #96]	@ (8008798 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d009      	beq.n	800874e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a17      	ldr	r2, [pc, #92]	@ (800879c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d004      	beq.n	800874e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a15      	ldr	r2, [pc, #84]	@ (80087a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d10c      	bne.n	8008768 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008754:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	4313      	orrs	r3, r2
 800875e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68ba      	ldr	r2, [r7, #8]
 8008766:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3714      	adds	r7, #20
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	40010000 	.word	0x40010000
 800878c:	40000400 	.word	0x40000400
 8008790:	40000800 	.word	0x40000800
 8008794:	40000c00 	.word	0x40000c00
 8008798:	40010400 	.word	0x40010400
 800879c:	40014000 	.word	0x40014000
 80087a0:	40001800 	.word	0x40001800

080087a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d101      	bne.n	80087b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e042      	b.n	800883c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d106      	bne.n	80087d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7f9 ff3c 	bl	8002648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2224      	movs	r2, #36	@ 0x24
 80087d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68da      	ldr	r2, [r3, #12]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80087e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f973 	bl	8008ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	691a      	ldr	r2, [r3, #16]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80087fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	695a      	ldr	r2, [r3, #20]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800880c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68da      	ldr	r2, [r3, #12]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800881c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2220      	movs	r2, #32
 8008828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2220      	movs	r2, #32
 8008830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b08a      	sub	sp, #40	@ 0x28
 8008848:	af02      	add	r7, sp, #8
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	603b      	str	r3, [r7, #0]
 8008850:	4613      	mov	r3, r2
 8008852:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008854:	2300      	movs	r3, #0
 8008856:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800885e:	b2db      	uxtb	r3, r3
 8008860:	2b20      	cmp	r3, #32
 8008862:	d175      	bne.n	8008950 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d002      	beq.n	8008870 <HAL_UART_Transmit+0x2c>
 800886a:	88fb      	ldrh	r3, [r7, #6]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d101      	bne.n	8008874 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e06e      	b.n	8008952 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2221      	movs	r2, #33	@ 0x21
 800887e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008882:	f7fa f8ed 	bl	8002a60 <HAL_GetTick>
 8008886:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	88fa      	ldrh	r2, [r7, #6]
 800888c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	88fa      	ldrh	r2, [r7, #6]
 8008892:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800889c:	d108      	bne.n	80088b0 <HAL_UART_Transmit+0x6c>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d104      	bne.n	80088b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80088a6:	2300      	movs	r3, #0
 80088a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	61bb      	str	r3, [r7, #24]
 80088ae:	e003      	b.n	80088b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088b4:	2300      	movs	r3, #0
 80088b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80088b8:	e02e      	b.n	8008918 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2200      	movs	r2, #0
 80088c2:	2180      	movs	r1, #128	@ 0x80
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f000 f848 	bl	800895a <UART_WaitOnFlagUntilTimeout>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d005      	beq.n	80088dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2220      	movs	r2, #32
 80088d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e03a      	b.n	8008952 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10b      	bne.n	80088fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	3302      	adds	r3, #2
 80088f6:	61bb      	str	r3, [r7, #24]
 80088f8:	e007      	b.n	800890a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	781a      	ldrb	r2, [r3, #0]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	3301      	adds	r3, #1
 8008908:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800890e:	b29b      	uxth	r3, r3
 8008910:	3b01      	subs	r3, #1
 8008912:	b29a      	uxth	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800891c:	b29b      	uxth	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1cb      	bne.n	80088ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	2200      	movs	r2, #0
 800892a:	2140      	movs	r1, #64	@ 0x40
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f000 f814 	bl	800895a <UART_WaitOnFlagUntilTimeout>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d005      	beq.n	8008944 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2220      	movs	r2, #32
 800893c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008940:	2303      	movs	r3, #3
 8008942:	e006      	b.n	8008952 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2220      	movs	r2, #32
 8008948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	e000      	b.n	8008952 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008950:	2302      	movs	r3, #2
  }
}
 8008952:	4618      	mov	r0, r3
 8008954:	3720      	adds	r7, #32
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b086      	sub	sp, #24
 800895e:	af00      	add	r7, sp, #0
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	603b      	str	r3, [r7, #0]
 8008966:	4613      	mov	r3, r2
 8008968:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800896a:	e03b      	b.n	80089e4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008972:	d037      	beq.n	80089e4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008974:	f7fa f874 	bl	8002a60 <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	6a3a      	ldr	r2, [r7, #32]
 8008980:	429a      	cmp	r2, r3
 8008982:	d302      	bcc.n	800898a <UART_WaitOnFlagUntilTimeout+0x30>
 8008984:	6a3b      	ldr	r3, [r7, #32]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d101      	bne.n	800898e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800898a:	2303      	movs	r3, #3
 800898c:	e03a      	b.n	8008a04 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	f003 0304 	and.w	r3, r3, #4
 8008998:	2b00      	cmp	r3, #0
 800899a:	d023      	beq.n	80089e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	2b80      	cmp	r3, #128	@ 0x80
 80089a0:	d020      	beq.n	80089e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	2b40      	cmp	r3, #64	@ 0x40
 80089a6:	d01d      	beq.n	80089e4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0308 	and.w	r3, r3, #8
 80089b2:	2b08      	cmp	r3, #8
 80089b4:	d116      	bne.n	80089e4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80089b6:	2300      	movs	r3, #0
 80089b8:	617b      	str	r3, [r7, #20]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	617b      	str	r3, [r7, #20]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	617b      	str	r3, [r7, #20]
 80089ca:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f000 f81d 	bl	8008a0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2208      	movs	r2, #8
 80089d6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e00f      	b.n	8008a04 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	4013      	ands	r3, r2
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	bf0c      	ite	eq
 80089f4:	2301      	moveq	r3, #1
 80089f6:	2300      	movne	r3, #0
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	461a      	mov	r2, r3
 80089fc:	79fb      	ldrb	r3, [r7, #7]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d0b4      	beq.n	800896c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3718      	adds	r7, #24
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b095      	sub	sp, #84	@ 0x54
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	330c      	adds	r3, #12
 8008a1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a1e:	e853 3f00 	ldrex	r3, [r3]
 8008a22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	330c      	adds	r3, #12
 8008a32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a34:	643a      	str	r2, [r7, #64]	@ 0x40
 8008a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a3c:	e841 2300 	strex	r3, r2, [r1]
 8008a40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1e5      	bne.n	8008a14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3314      	adds	r3, #20
 8008a4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	e853 3f00 	ldrex	r3, [r3]
 8008a56:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	f023 0301 	bic.w	r3, r3, #1
 8008a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	3314      	adds	r3, #20
 8008a66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a70:	e841 2300 	strex	r3, r2, [r1]
 8008a74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1e5      	bne.n	8008a48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d119      	bne.n	8008ab8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	330c      	adds	r3, #12
 8008a8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	e853 3f00 	ldrex	r3, [r3]
 8008a92:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	f023 0310 	bic.w	r3, r3, #16
 8008a9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	330c      	adds	r3, #12
 8008aa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008aa4:	61ba      	str	r2, [r7, #24]
 8008aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa8:	6979      	ldr	r1, [r7, #20]
 8008aaa:	69ba      	ldr	r2, [r7, #24]
 8008aac:	e841 2300 	strex	r3, r2, [r1]
 8008ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1e5      	bne.n	8008a84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2220      	movs	r2, #32
 8008abc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008ac6:	bf00      	nop
 8008ac8:	3754      	adds	r7, #84	@ 0x54
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
	...

08008ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ad8:	b0c0      	sub	sp, #256	@ 0x100
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008af0:	68d9      	ldr	r1, [r3, #12]
 8008af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	ea40 0301 	orr.w	r3, r0, r1
 8008afc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b02:	689a      	ldr	r2, [r3, #8]
 8008b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	431a      	orrs	r2, r3
 8008b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	431a      	orrs	r2, r3
 8008b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008b2c:	f021 010c 	bic.w	r1, r1, #12
 8008b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008b3a:	430b      	orrs	r3, r1
 8008b3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b4e:	6999      	ldr	r1, [r3, #24]
 8008b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	ea40 0301 	orr.w	r3, r0, r1
 8008b5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	4b8f      	ldr	r3, [pc, #572]	@ (8008da0 <UART_SetConfig+0x2cc>)
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d005      	beq.n	8008b74 <UART_SetConfig+0xa0>
 8008b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	4b8d      	ldr	r3, [pc, #564]	@ (8008da4 <UART_SetConfig+0x2d0>)
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d104      	bne.n	8008b7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b74:	f7fe feb2 	bl	80078dc <HAL_RCC_GetPCLK2Freq>
 8008b78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008b7c:	e003      	b.n	8008b86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b7e:	f7fe fe99 	bl	80078b4 <HAL_RCC_GetPCLK1Freq>
 8008b82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b8a:	69db      	ldr	r3, [r3, #28]
 8008b8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b90:	f040 810c 	bne.w	8008dac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008b9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008ba2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008ba6:	4622      	mov	r2, r4
 8008ba8:	462b      	mov	r3, r5
 8008baa:	1891      	adds	r1, r2, r2
 8008bac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008bae:	415b      	adcs	r3, r3
 8008bb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008bb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	eb12 0801 	adds.w	r8, r2, r1
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	eb43 0901 	adc.w	r9, r3, r1
 8008bc2:	f04f 0200 	mov.w	r2, #0
 8008bc6:	f04f 0300 	mov.w	r3, #0
 8008bca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008bce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008bd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bd6:	4690      	mov	r8, r2
 8008bd8:	4699      	mov	r9, r3
 8008bda:	4623      	mov	r3, r4
 8008bdc:	eb18 0303 	adds.w	r3, r8, r3
 8008be0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008be4:	462b      	mov	r3, r5
 8008be6:	eb49 0303 	adc.w	r3, r9, r3
 8008bea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008bfa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008bfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008c02:	460b      	mov	r3, r1
 8008c04:	18db      	adds	r3, r3, r3
 8008c06:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c08:	4613      	mov	r3, r2
 8008c0a:	eb42 0303 	adc.w	r3, r2, r3
 8008c0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008c14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008c18:	f7f8 f836 	bl	8000c88 <__aeabi_uldivmod>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4b61      	ldr	r3, [pc, #388]	@ (8008da8 <UART_SetConfig+0x2d4>)
 8008c22:	fba3 2302 	umull	r2, r3, r3, r2
 8008c26:	095b      	lsrs	r3, r3, #5
 8008c28:	011c      	lsls	r4, r3, #4
 8008c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c34:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008c38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008c3c:	4642      	mov	r2, r8
 8008c3e:	464b      	mov	r3, r9
 8008c40:	1891      	adds	r1, r2, r2
 8008c42:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008c44:	415b      	adcs	r3, r3
 8008c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008c4c:	4641      	mov	r1, r8
 8008c4e:	eb12 0a01 	adds.w	sl, r2, r1
 8008c52:	4649      	mov	r1, r9
 8008c54:	eb43 0b01 	adc.w	fp, r3, r1
 8008c58:	f04f 0200 	mov.w	r2, #0
 8008c5c:	f04f 0300 	mov.w	r3, #0
 8008c60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c6c:	4692      	mov	sl, r2
 8008c6e:	469b      	mov	fp, r3
 8008c70:	4643      	mov	r3, r8
 8008c72:	eb1a 0303 	adds.w	r3, sl, r3
 8008c76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c7a:	464b      	mov	r3, r9
 8008c7c:	eb4b 0303 	adc.w	r3, fp, r3
 8008c80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c90:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008c94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008c98:	460b      	mov	r3, r1
 8008c9a:	18db      	adds	r3, r3, r3
 8008c9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	eb42 0303 	adc.w	r3, r2, r3
 8008ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ca6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008caa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008cae:	f7f7 ffeb 	bl	8000c88 <__aeabi_uldivmod>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	4611      	mov	r1, r2
 8008cb8:	4b3b      	ldr	r3, [pc, #236]	@ (8008da8 <UART_SetConfig+0x2d4>)
 8008cba:	fba3 2301 	umull	r2, r3, r3, r1
 8008cbe:	095b      	lsrs	r3, r3, #5
 8008cc0:	2264      	movs	r2, #100	@ 0x64
 8008cc2:	fb02 f303 	mul.w	r3, r2, r3
 8008cc6:	1acb      	subs	r3, r1, r3
 8008cc8:	00db      	lsls	r3, r3, #3
 8008cca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008cce:	4b36      	ldr	r3, [pc, #216]	@ (8008da8 <UART_SetConfig+0x2d4>)
 8008cd0:	fba3 2302 	umull	r2, r3, r3, r2
 8008cd4:	095b      	lsrs	r3, r3, #5
 8008cd6:	005b      	lsls	r3, r3, #1
 8008cd8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008cdc:	441c      	add	r4, r3
 8008cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ce8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008cec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008cf0:	4642      	mov	r2, r8
 8008cf2:	464b      	mov	r3, r9
 8008cf4:	1891      	adds	r1, r2, r2
 8008cf6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008cf8:	415b      	adcs	r3, r3
 8008cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008d00:	4641      	mov	r1, r8
 8008d02:	1851      	adds	r1, r2, r1
 8008d04:	6339      	str	r1, [r7, #48]	@ 0x30
 8008d06:	4649      	mov	r1, r9
 8008d08:	414b      	adcs	r3, r1
 8008d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d0c:	f04f 0200 	mov.w	r2, #0
 8008d10:	f04f 0300 	mov.w	r3, #0
 8008d14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008d18:	4659      	mov	r1, fp
 8008d1a:	00cb      	lsls	r3, r1, #3
 8008d1c:	4651      	mov	r1, sl
 8008d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d22:	4651      	mov	r1, sl
 8008d24:	00ca      	lsls	r2, r1, #3
 8008d26:	4610      	mov	r0, r2
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	4642      	mov	r2, r8
 8008d2e:	189b      	adds	r3, r3, r2
 8008d30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d34:	464b      	mov	r3, r9
 8008d36:	460a      	mov	r2, r1
 8008d38:	eb42 0303 	adc.w	r3, r2, r3
 8008d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008d4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008d50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008d54:	460b      	mov	r3, r1
 8008d56:	18db      	adds	r3, r3, r3
 8008d58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	eb42 0303 	adc.w	r3, r2, r3
 8008d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008d66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008d6a:	f7f7 ff8d 	bl	8000c88 <__aeabi_uldivmod>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	460b      	mov	r3, r1
 8008d72:	4b0d      	ldr	r3, [pc, #52]	@ (8008da8 <UART_SetConfig+0x2d4>)
 8008d74:	fba3 1302 	umull	r1, r3, r3, r2
 8008d78:	095b      	lsrs	r3, r3, #5
 8008d7a:	2164      	movs	r1, #100	@ 0x64
 8008d7c:	fb01 f303 	mul.w	r3, r1, r3
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	00db      	lsls	r3, r3, #3
 8008d84:	3332      	adds	r3, #50	@ 0x32
 8008d86:	4a08      	ldr	r2, [pc, #32]	@ (8008da8 <UART_SetConfig+0x2d4>)
 8008d88:	fba2 2303 	umull	r2, r3, r2, r3
 8008d8c:	095b      	lsrs	r3, r3, #5
 8008d8e:	f003 0207 	and.w	r2, r3, #7
 8008d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4422      	add	r2, r4
 8008d9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d9c:	e106      	b.n	8008fac <UART_SetConfig+0x4d8>
 8008d9e:	bf00      	nop
 8008da0:	40011000 	.word	0x40011000
 8008da4:	40011400 	.word	0x40011400
 8008da8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008db0:	2200      	movs	r2, #0
 8008db2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008db6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008dba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008dbe:	4642      	mov	r2, r8
 8008dc0:	464b      	mov	r3, r9
 8008dc2:	1891      	adds	r1, r2, r2
 8008dc4:	6239      	str	r1, [r7, #32]
 8008dc6:	415b      	adcs	r3, r3
 8008dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008dce:	4641      	mov	r1, r8
 8008dd0:	1854      	adds	r4, r2, r1
 8008dd2:	4649      	mov	r1, r9
 8008dd4:	eb43 0501 	adc.w	r5, r3, r1
 8008dd8:	f04f 0200 	mov.w	r2, #0
 8008ddc:	f04f 0300 	mov.w	r3, #0
 8008de0:	00eb      	lsls	r3, r5, #3
 8008de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008de6:	00e2      	lsls	r2, r4, #3
 8008de8:	4614      	mov	r4, r2
 8008dea:	461d      	mov	r5, r3
 8008dec:	4643      	mov	r3, r8
 8008dee:	18e3      	adds	r3, r4, r3
 8008df0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008df4:	464b      	mov	r3, r9
 8008df6:	eb45 0303 	adc.w	r3, r5, r3
 8008dfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008e0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008e0e:	f04f 0200 	mov.w	r2, #0
 8008e12:	f04f 0300 	mov.w	r3, #0
 8008e16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	008b      	lsls	r3, r1, #2
 8008e1e:	4621      	mov	r1, r4
 8008e20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e24:	4621      	mov	r1, r4
 8008e26:	008a      	lsls	r2, r1, #2
 8008e28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008e2c:	f7f7 ff2c 	bl	8000c88 <__aeabi_uldivmod>
 8008e30:	4602      	mov	r2, r0
 8008e32:	460b      	mov	r3, r1
 8008e34:	4b60      	ldr	r3, [pc, #384]	@ (8008fb8 <UART_SetConfig+0x4e4>)
 8008e36:	fba3 2302 	umull	r2, r3, r3, r2
 8008e3a:	095b      	lsrs	r3, r3, #5
 8008e3c:	011c      	lsls	r4, r3, #4
 8008e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e42:	2200      	movs	r2, #0
 8008e44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008e48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008e4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008e50:	4642      	mov	r2, r8
 8008e52:	464b      	mov	r3, r9
 8008e54:	1891      	adds	r1, r2, r2
 8008e56:	61b9      	str	r1, [r7, #24]
 8008e58:	415b      	adcs	r3, r3
 8008e5a:	61fb      	str	r3, [r7, #28]
 8008e5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e60:	4641      	mov	r1, r8
 8008e62:	1851      	adds	r1, r2, r1
 8008e64:	6139      	str	r1, [r7, #16]
 8008e66:	4649      	mov	r1, r9
 8008e68:	414b      	adcs	r3, r1
 8008e6a:	617b      	str	r3, [r7, #20]
 8008e6c:	f04f 0200 	mov.w	r2, #0
 8008e70:	f04f 0300 	mov.w	r3, #0
 8008e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e78:	4659      	mov	r1, fp
 8008e7a:	00cb      	lsls	r3, r1, #3
 8008e7c:	4651      	mov	r1, sl
 8008e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e82:	4651      	mov	r1, sl
 8008e84:	00ca      	lsls	r2, r1, #3
 8008e86:	4610      	mov	r0, r2
 8008e88:	4619      	mov	r1, r3
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	4642      	mov	r2, r8
 8008e8e:	189b      	adds	r3, r3, r2
 8008e90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e94:	464b      	mov	r3, r9
 8008e96:	460a      	mov	r2, r1
 8008e98:	eb42 0303 	adc.w	r3, r2, r3
 8008e9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008eaa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008eac:	f04f 0200 	mov.w	r2, #0
 8008eb0:	f04f 0300 	mov.w	r3, #0
 8008eb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008eb8:	4649      	mov	r1, r9
 8008eba:	008b      	lsls	r3, r1, #2
 8008ebc:	4641      	mov	r1, r8
 8008ebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ec2:	4641      	mov	r1, r8
 8008ec4:	008a      	lsls	r2, r1, #2
 8008ec6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008eca:	f7f7 fedd 	bl	8000c88 <__aeabi_uldivmod>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	4b38      	ldr	r3, [pc, #224]	@ (8008fb8 <UART_SetConfig+0x4e4>)
 8008ed6:	fba3 2301 	umull	r2, r3, r3, r1
 8008eda:	095b      	lsrs	r3, r3, #5
 8008edc:	2264      	movs	r2, #100	@ 0x64
 8008ede:	fb02 f303 	mul.w	r3, r2, r3
 8008ee2:	1acb      	subs	r3, r1, r3
 8008ee4:	011b      	lsls	r3, r3, #4
 8008ee6:	3332      	adds	r3, #50	@ 0x32
 8008ee8:	4a33      	ldr	r2, [pc, #204]	@ (8008fb8 <UART_SetConfig+0x4e4>)
 8008eea:	fba2 2303 	umull	r2, r3, r2, r3
 8008eee:	095b      	lsrs	r3, r3, #5
 8008ef0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ef4:	441c      	add	r4, r3
 8008ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008efa:	2200      	movs	r2, #0
 8008efc:	673b      	str	r3, [r7, #112]	@ 0x70
 8008efe:	677a      	str	r2, [r7, #116]	@ 0x74
 8008f00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008f04:	4642      	mov	r2, r8
 8008f06:	464b      	mov	r3, r9
 8008f08:	1891      	adds	r1, r2, r2
 8008f0a:	60b9      	str	r1, [r7, #8]
 8008f0c:	415b      	adcs	r3, r3
 8008f0e:	60fb      	str	r3, [r7, #12]
 8008f10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f14:	4641      	mov	r1, r8
 8008f16:	1851      	adds	r1, r2, r1
 8008f18:	6039      	str	r1, [r7, #0]
 8008f1a:	4649      	mov	r1, r9
 8008f1c:	414b      	adcs	r3, r1
 8008f1e:	607b      	str	r3, [r7, #4]
 8008f20:	f04f 0200 	mov.w	r2, #0
 8008f24:	f04f 0300 	mov.w	r3, #0
 8008f28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f2c:	4659      	mov	r1, fp
 8008f2e:	00cb      	lsls	r3, r1, #3
 8008f30:	4651      	mov	r1, sl
 8008f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f36:	4651      	mov	r1, sl
 8008f38:	00ca      	lsls	r2, r1, #3
 8008f3a:	4610      	mov	r0, r2
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	4603      	mov	r3, r0
 8008f40:	4642      	mov	r2, r8
 8008f42:	189b      	adds	r3, r3, r2
 8008f44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f46:	464b      	mov	r3, r9
 8008f48:	460a      	mov	r2, r1
 8008f4a:	eb42 0303 	adc.w	r3, r2, r3
 8008f4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f5a:	667a      	str	r2, [r7, #100]	@ 0x64
 8008f5c:	f04f 0200 	mov.w	r2, #0
 8008f60:	f04f 0300 	mov.w	r3, #0
 8008f64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008f68:	4649      	mov	r1, r9
 8008f6a:	008b      	lsls	r3, r1, #2
 8008f6c:	4641      	mov	r1, r8
 8008f6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f72:	4641      	mov	r1, r8
 8008f74:	008a      	lsls	r2, r1, #2
 8008f76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008f7a:	f7f7 fe85 	bl	8000c88 <__aeabi_uldivmod>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	460b      	mov	r3, r1
 8008f82:	4b0d      	ldr	r3, [pc, #52]	@ (8008fb8 <UART_SetConfig+0x4e4>)
 8008f84:	fba3 1302 	umull	r1, r3, r3, r2
 8008f88:	095b      	lsrs	r3, r3, #5
 8008f8a:	2164      	movs	r1, #100	@ 0x64
 8008f8c:	fb01 f303 	mul.w	r3, r1, r3
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	011b      	lsls	r3, r3, #4
 8008f94:	3332      	adds	r3, #50	@ 0x32
 8008f96:	4a08      	ldr	r2, [pc, #32]	@ (8008fb8 <UART_SetConfig+0x4e4>)
 8008f98:	fba2 2303 	umull	r2, r3, r2, r3
 8008f9c:	095b      	lsrs	r3, r3, #5
 8008f9e:	f003 020f 	and.w	r2, r3, #15
 8008fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4422      	add	r2, r4
 8008faa:	609a      	str	r2, [r3, #8]
}
 8008fac:	bf00      	nop
 8008fae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fb8:	51eb851f 	.word	0x51eb851f

08008fbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fbc:	b084      	sub	sp, #16
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	f107 001c 	add.w	r0, r7, #28
 8008fca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008fce:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d123      	bne.n	800901e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fda:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008fea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008ffe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009002:	2b01      	cmp	r3, #1
 8009004:	d105      	bne.n	8009012 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f001 fae8 	bl	800a5e8 <USB_CoreReset>
 8009018:	4603      	mov	r3, r0
 800901a:	73fb      	strb	r3, [r7, #15]
 800901c:	e01b      	b.n	8009056 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f001 fadc 	bl	800a5e8 <USB_CoreReset>
 8009030:	4603      	mov	r3, r0
 8009032:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009034:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009038:	2b00      	cmp	r3, #0
 800903a:	d106      	bne.n	800904a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009040:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	639a      	str	r2, [r3, #56]	@ 0x38
 8009048:	e005      	b.n	8009056 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800904e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009056:	7fbb      	ldrb	r3, [r7, #30]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d10b      	bne.n	8009074 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	f043 0206 	orr.w	r2, r3, #6
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	f043 0220 	orr.w	r2, r3, #32
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009074:	7bfb      	ldrb	r3, [r7, #15]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009080:	b004      	add	sp, #16
 8009082:	4770      	bx	lr

08009084 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009084:	b480      	push	{r7}
 8009086:	b087      	sub	sp, #28
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	4613      	mov	r3, r2
 8009090:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009092:	79fb      	ldrb	r3, [r7, #7]
 8009094:	2b02      	cmp	r3, #2
 8009096:	d165      	bne.n	8009164 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	4a41      	ldr	r2, [pc, #260]	@ (80091a0 <USB_SetTurnaroundTime+0x11c>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d906      	bls.n	80090ae <USB_SetTurnaroundTime+0x2a>
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	4a40      	ldr	r2, [pc, #256]	@ (80091a4 <USB_SetTurnaroundTime+0x120>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d202      	bcs.n	80090ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80090a8:	230f      	movs	r3, #15
 80090aa:	617b      	str	r3, [r7, #20]
 80090ac:	e062      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	4a3c      	ldr	r2, [pc, #240]	@ (80091a4 <USB_SetTurnaroundTime+0x120>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d306      	bcc.n	80090c4 <USB_SetTurnaroundTime+0x40>
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	4a3b      	ldr	r2, [pc, #236]	@ (80091a8 <USB_SetTurnaroundTime+0x124>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d202      	bcs.n	80090c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80090be:	230e      	movs	r3, #14
 80090c0:	617b      	str	r3, [r7, #20]
 80090c2:	e057      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	4a38      	ldr	r2, [pc, #224]	@ (80091a8 <USB_SetTurnaroundTime+0x124>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d306      	bcc.n	80090da <USB_SetTurnaroundTime+0x56>
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	4a37      	ldr	r2, [pc, #220]	@ (80091ac <USB_SetTurnaroundTime+0x128>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d202      	bcs.n	80090da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80090d4:	230d      	movs	r3, #13
 80090d6:	617b      	str	r3, [r7, #20]
 80090d8:	e04c      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	4a33      	ldr	r2, [pc, #204]	@ (80091ac <USB_SetTurnaroundTime+0x128>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d306      	bcc.n	80090f0 <USB_SetTurnaroundTime+0x6c>
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	4a32      	ldr	r2, [pc, #200]	@ (80091b0 <USB_SetTurnaroundTime+0x12c>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d802      	bhi.n	80090f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80090ea:	230c      	movs	r3, #12
 80090ec:	617b      	str	r3, [r7, #20]
 80090ee:	e041      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	4a2f      	ldr	r2, [pc, #188]	@ (80091b0 <USB_SetTurnaroundTime+0x12c>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d906      	bls.n	8009106 <USB_SetTurnaroundTime+0x82>
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	4a2e      	ldr	r2, [pc, #184]	@ (80091b4 <USB_SetTurnaroundTime+0x130>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d802      	bhi.n	8009106 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009100:	230b      	movs	r3, #11
 8009102:	617b      	str	r3, [r7, #20]
 8009104:	e036      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	4a2a      	ldr	r2, [pc, #168]	@ (80091b4 <USB_SetTurnaroundTime+0x130>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d906      	bls.n	800911c <USB_SetTurnaroundTime+0x98>
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	4a29      	ldr	r2, [pc, #164]	@ (80091b8 <USB_SetTurnaroundTime+0x134>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d802      	bhi.n	800911c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009116:	230a      	movs	r3, #10
 8009118:	617b      	str	r3, [r7, #20]
 800911a:	e02b      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	4a26      	ldr	r2, [pc, #152]	@ (80091b8 <USB_SetTurnaroundTime+0x134>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d906      	bls.n	8009132 <USB_SetTurnaroundTime+0xae>
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	4a25      	ldr	r2, [pc, #148]	@ (80091bc <USB_SetTurnaroundTime+0x138>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d202      	bcs.n	8009132 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800912c:	2309      	movs	r3, #9
 800912e:	617b      	str	r3, [r7, #20]
 8009130:	e020      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	4a21      	ldr	r2, [pc, #132]	@ (80091bc <USB_SetTurnaroundTime+0x138>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d306      	bcc.n	8009148 <USB_SetTurnaroundTime+0xc4>
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	4a20      	ldr	r2, [pc, #128]	@ (80091c0 <USB_SetTurnaroundTime+0x13c>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d802      	bhi.n	8009148 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009142:	2308      	movs	r3, #8
 8009144:	617b      	str	r3, [r7, #20]
 8009146:	e015      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	4a1d      	ldr	r2, [pc, #116]	@ (80091c0 <USB_SetTurnaroundTime+0x13c>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d906      	bls.n	800915e <USB_SetTurnaroundTime+0xda>
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	4a1c      	ldr	r2, [pc, #112]	@ (80091c4 <USB_SetTurnaroundTime+0x140>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d202      	bcs.n	800915e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009158:	2307      	movs	r3, #7
 800915a:	617b      	str	r3, [r7, #20]
 800915c:	e00a      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800915e:	2306      	movs	r3, #6
 8009160:	617b      	str	r3, [r7, #20]
 8009162:	e007      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009164:	79fb      	ldrb	r3, [r7, #7]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d102      	bne.n	8009170 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800916a:	2309      	movs	r3, #9
 800916c:	617b      	str	r3, [r7, #20]
 800916e:	e001      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009170:	2309      	movs	r3, #9
 8009172:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	68da      	ldr	r2, [r3, #12]
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	029b      	lsls	r3, r3, #10
 8009188:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800918c:	431a      	orrs	r2, r3
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	371c      	adds	r7, #28
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	00d8acbf 	.word	0x00d8acbf
 80091a4:	00e4e1c0 	.word	0x00e4e1c0
 80091a8:	00f42400 	.word	0x00f42400
 80091ac:	01067380 	.word	0x01067380
 80091b0:	011a499f 	.word	0x011a499f
 80091b4:	01312cff 	.word	0x01312cff
 80091b8:	014ca43f 	.word	0x014ca43f
 80091bc:	016e3600 	.word	0x016e3600
 80091c0:	01a6ab1f 	.word	0x01a6ab1f
 80091c4:	01e84800 	.word	0x01e84800

080091c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	f043 0201 	orr.w	r2, r3, #1
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	370c      	adds	r7, #12
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr

080091ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091ea:	b480      	push	{r7}
 80091ec:	b083      	sub	sp, #12
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	f023 0201 	bic.w	r2, r3, #1
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	460b      	mov	r3, r1
 8009216:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009218:	2300      	movs	r3, #0
 800921a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009228:	78fb      	ldrb	r3, [r7, #3]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d115      	bne.n	800925a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800923a:	200a      	movs	r0, #10
 800923c:	f7f9 fc1c 	bl	8002a78 <HAL_Delay>
      ms += 10U;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	330a      	adds	r3, #10
 8009244:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f001 f93f 	bl	800a4ca <USB_GetMode>
 800924c:	4603      	mov	r3, r0
 800924e:	2b01      	cmp	r3, #1
 8009250:	d01e      	beq.n	8009290 <USB_SetCurrentMode+0x84>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2bc7      	cmp	r3, #199	@ 0xc7
 8009256:	d9f0      	bls.n	800923a <USB_SetCurrentMode+0x2e>
 8009258:	e01a      	b.n	8009290 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800925a:	78fb      	ldrb	r3, [r7, #3]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d115      	bne.n	800928c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800926c:	200a      	movs	r0, #10
 800926e:	f7f9 fc03 	bl	8002a78 <HAL_Delay>
      ms += 10U;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	330a      	adds	r3, #10
 8009276:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f001 f926 	bl	800a4ca <USB_GetMode>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d005      	beq.n	8009290 <USB_SetCurrentMode+0x84>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2bc7      	cmp	r3, #199	@ 0xc7
 8009288:	d9f0      	bls.n	800926c <USB_SetCurrentMode+0x60>
 800928a:	e001      	b.n	8009290 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	e005      	b.n	800929c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2bc8      	cmp	r3, #200	@ 0xc8
 8009294:	d101      	bne.n	800929a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	e000      	b.n	800929c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092a4:	b084      	sub	sp, #16
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b086      	sub	sp, #24
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
 80092ae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80092b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80092be:	2300      	movs	r3, #0
 80092c0:	613b      	str	r3, [r7, #16]
 80092c2:	e009      	b.n	80092d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	3340      	adds	r3, #64	@ 0x40
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4413      	add	r3, r2
 80092ce:	2200      	movs	r2, #0
 80092d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	3301      	adds	r3, #1
 80092d6:	613b      	str	r3, [r7, #16]
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	2b0e      	cmp	r3, #14
 80092dc:	d9f2      	bls.n	80092c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80092de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d11c      	bne.n	8009320 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092f4:	f043 0302 	orr.w	r3, r3, #2
 80092f8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800930a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009316:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	639a      	str	r2, [r3, #56]	@ 0x38
 800931e:	e00b      	b.n	8009338 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009324:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009330:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800933e:	461a      	mov	r2, r3
 8009340:	2300      	movs	r3, #0
 8009342:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009344:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009348:	2b01      	cmp	r3, #1
 800934a:	d10d      	bne.n	8009368 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800934c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009350:	2b00      	cmp	r3, #0
 8009352:	d104      	bne.n	800935e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009354:	2100      	movs	r1, #0
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f968 	bl	800962c <USB_SetDevSpeed>
 800935c:	e008      	b.n	8009370 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800935e:	2101      	movs	r1, #1
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f963 	bl	800962c <USB_SetDevSpeed>
 8009366:	e003      	b.n	8009370 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009368:	2103      	movs	r1, #3
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f95e 	bl	800962c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009370:	2110      	movs	r1, #16
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f8fa 	bl	800956c <USB_FlushTxFifo>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d001      	beq.n	8009382 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f924 	bl	80095d0 <USB_FlushRxFifo>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d001      	beq.n	8009392 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009398:	461a      	mov	r2, r3
 800939a:	2300      	movs	r3, #0
 800939c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093a4:	461a      	mov	r2, r3
 80093a6:	2300      	movs	r3, #0
 80093a8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093b0:	461a      	mov	r2, r3
 80093b2:	2300      	movs	r3, #0
 80093b4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093b6:	2300      	movs	r3, #0
 80093b8:	613b      	str	r3, [r7, #16]
 80093ba:	e043      	b.n	8009444 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093d2:	d118      	bne.n	8009406 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10a      	bne.n	80093f0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	015a      	lsls	r2, r3, #5
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	4413      	add	r3, r2
 80093e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093e6:	461a      	mov	r2, r3
 80093e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80093ec:	6013      	str	r3, [r2, #0]
 80093ee:	e013      	b.n	8009418 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	015a      	lsls	r2, r3, #5
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	4413      	add	r3, r2
 80093f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093fc:	461a      	mov	r2, r3
 80093fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009402:	6013      	str	r3, [r2, #0]
 8009404:	e008      	b.n	8009418 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	015a      	lsls	r2, r3, #5
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	4413      	add	r3, r2
 800940e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009412:	461a      	mov	r2, r3
 8009414:	2300      	movs	r3, #0
 8009416:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	015a      	lsls	r2, r3, #5
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4413      	add	r3, r2
 8009420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009424:	461a      	mov	r2, r3
 8009426:	2300      	movs	r3, #0
 8009428:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	015a      	lsls	r2, r3, #5
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	4413      	add	r3, r2
 8009432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009436:	461a      	mov	r2, r3
 8009438:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800943c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	3301      	adds	r3, #1
 8009442:	613b      	str	r3, [r7, #16]
 8009444:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009448:	461a      	mov	r2, r3
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	4293      	cmp	r3, r2
 800944e:	d3b5      	bcc.n	80093bc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009450:	2300      	movs	r3, #0
 8009452:	613b      	str	r3, [r7, #16]
 8009454:	e043      	b.n	80094de <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	015a      	lsls	r2, r3, #5
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	4413      	add	r3, r2
 800945e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009468:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800946c:	d118      	bne.n	80094a0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10a      	bne.n	800948a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	015a      	lsls	r2, r3, #5
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	4413      	add	r3, r2
 800947c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009480:	461a      	mov	r2, r3
 8009482:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009486:	6013      	str	r3, [r2, #0]
 8009488:	e013      	b.n	80094b2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	015a      	lsls	r2, r3, #5
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	4413      	add	r3, r2
 8009492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009496:	461a      	mov	r2, r3
 8009498:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800949c:	6013      	str	r3, [r2, #0]
 800949e:	e008      	b.n	80094b2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	015a      	lsls	r2, r3, #5
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	4413      	add	r3, r2
 80094a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094ac:	461a      	mov	r2, r3
 80094ae:	2300      	movs	r3, #0
 80094b0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	015a      	lsls	r2, r3, #5
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	4413      	add	r3, r2
 80094ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094be:	461a      	mov	r2, r3
 80094c0:	2300      	movs	r3, #0
 80094c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	015a      	lsls	r2, r3, #5
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	4413      	add	r3, r2
 80094cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094d0:	461a      	mov	r2, r3
 80094d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80094d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	3301      	adds	r3, #1
 80094dc:	613b      	str	r3, [r7, #16]
 80094de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80094e2:	461a      	mov	r2, r3
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d3b5      	bcc.n	8009456 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094fc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800950a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800950c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009510:	2b00      	cmp	r3, #0
 8009512:	d105      	bne.n	8009520 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	f043 0210 	orr.w	r2, r3, #16
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	699a      	ldr	r2, [r3, #24]
 8009524:	4b10      	ldr	r3, [pc, #64]	@ (8009568 <USB_DevInit+0x2c4>)
 8009526:	4313      	orrs	r3, r2
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800952c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009530:	2b00      	cmp	r3, #0
 8009532:	d005      	beq.n	8009540 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	f043 0208 	orr.w	r2, r3, #8
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009540:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009544:	2b01      	cmp	r3, #1
 8009546:	d107      	bne.n	8009558 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	699b      	ldr	r3, [r3, #24]
 800954c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009550:	f043 0304 	orr.w	r3, r3, #4
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009558:	7dfb      	ldrb	r3, [r7, #23]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3718      	adds	r7, #24
 800955e:	46bd      	mov	sp, r7
 8009560:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009564:	b004      	add	sp, #16
 8009566:	4770      	bx	lr
 8009568:	803c3800 	.word	0x803c3800

0800956c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009576:	2300      	movs	r3, #0
 8009578:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	3301      	adds	r3, #1
 800957e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009586:	d901      	bls.n	800958c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009588:	2303      	movs	r3, #3
 800958a:	e01b      	b.n	80095c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	2b00      	cmp	r3, #0
 8009592:	daf2      	bge.n	800957a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009594:	2300      	movs	r3, #0
 8009596:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	019b      	lsls	r3, r3, #6
 800959c:	f043 0220 	orr.w	r2, r3, #32
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	3301      	adds	r3, #1
 80095a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095b0:	d901      	bls.n	80095b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80095b2:	2303      	movs	r3, #3
 80095b4:	e006      	b.n	80095c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	f003 0320 	and.w	r3, r3, #32
 80095be:	2b20      	cmp	r3, #32
 80095c0:	d0f0      	beq.n	80095a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3714      	adds	r7, #20
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095d8:	2300      	movs	r3, #0
 80095da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	3301      	adds	r3, #1
 80095e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095e8:	d901      	bls.n	80095ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80095ea:	2303      	movs	r3, #3
 80095ec:	e018      	b.n	8009620 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	daf2      	bge.n	80095dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80095f6:	2300      	movs	r3, #0
 80095f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2210      	movs	r2, #16
 80095fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	3301      	adds	r3, #1
 8009604:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800960c:	d901      	bls.n	8009612 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800960e:	2303      	movs	r3, #3
 8009610:	e006      	b.n	8009620 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	f003 0310 	and.w	r3, r3, #16
 800961a:	2b10      	cmp	r3, #16
 800961c:	d0f0      	beq.n	8009600 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3714      	adds	r7, #20
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	460b      	mov	r3, r1
 8009636:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	78fb      	ldrb	r3, [r7, #3]
 8009646:	68f9      	ldr	r1, [r7, #12]
 8009648:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800964c:	4313      	orrs	r3, r2
 800964e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3714      	adds	r7, #20
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr

0800965e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800965e:	b480      	push	{r7}
 8009660:	b087      	sub	sp, #28
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	f003 0306 	and.w	r3, r3, #6
 8009676:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d102      	bne.n	8009684 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800967e:	2300      	movs	r3, #0
 8009680:	75fb      	strb	r3, [r7, #23]
 8009682:	e00a      	b.n	800969a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2b02      	cmp	r3, #2
 8009688:	d002      	beq.n	8009690 <USB_GetDevSpeed+0x32>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2b06      	cmp	r3, #6
 800968e:	d102      	bne.n	8009696 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009690:	2302      	movs	r3, #2
 8009692:	75fb      	strb	r3, [r7, #23]
 8009694:	e001      	b.n	800969a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009696:	230f      	movs	r3, #15
 8009698:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800969a:	7dfb      	ldrb	r3, [r7, #23]
}
 800969c:	4618      	mov	r0, r3
 800969e:	371c      	adds	r7, #28
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	785b      	ldrb	r3, [r3, #1]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d13a      	bne.n	800973a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096ca:	69da      	ldr	r2, [r3, #28]
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	f003 030f 	and.w	r3, r3, #15
 80096d4:	2101      	movs	r1, #1
 80096d6:	fa01 f303 	lsl.w	r3, r1, r3
 80096da:	b29b      	uxth	r3, r3
 80096dc:	68f9      	ldr	r1, [r7, #12]
 80096de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80096e2:	4313      	orrs	r3, r2
 80096e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	015a      	lsls	r2, r3, #5
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	4413      	add	r3, r2
 80096ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d155      	bne.n	80097a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	015a      	lsls	r2, r3, #5
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	4413      	add	r3, r2
 8009704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	791b      	ldrb	r3, [r3, #4]
 8009716:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009718:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	059b      	lsls	r3, r3, #22
 800971e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009720:	4313      	orrs	r3, r2
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	0151      	lsls	r1, r2, #5
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	440a      	add	r2, r1
 800972a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800972e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009736:	6013      	str	r3, [r2, #0]
 8009738:	e036      	b.n	80097a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009740:	69da      	ldr	r2, [r3, #28]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	f003 030f 	and.w	r3, r3, #15
 800974a:	2101      	movs	r1, #1
 800974c:	fa01 f303 	lsl.w	r3, r1, r3
 8009750:	041b      	lsls	r3, r3, #16
 8009752:	68f9      	ldr	r1, [r7, #12]
 8009754:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009758:	4313      	orrs	r3, r2
 800975a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	015a      	lsls	r2, r3, #5
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	4413      	add	r3, r2
 8009764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800976e:	2b00      	cmp	r3, #0
 8009770:	d11a      	bne.n	80097a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	015a      	lsls	r2, r3, #5
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	4413      	add	r3, r2
 800977a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	791b      	ldrb	r3, [r3, #4]
 800978c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800978e:	430b      	orrs	r3, r1
 8009790:	4313      	orrs	r3, r2
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	0151      	lsls	r1, r2, #5
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	440a      	add	r2, r1
 800979a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800979e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
	...

080097b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	785b      	ldrb	r3, [r3, #1]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d161      	bne.n	8009898 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	015a      	lsls	r2, r3, #5
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	4413      	add	r3, r2
 80097dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097ea:	d11f      	bne.n	800982c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	015a      	lsls	r2, r3, #5
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	4413      	add	r3, r2
 80097f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68ba      	ldr	r2, [r7, #8]
 80097fc:	0151      	lsls	r1, r2, #5
 80097fe:	68fa      	ldr	r2, [r7, #12]
 8009800:	440a      	add	r2, r1
 8009802:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009806:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800980a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	015a      	lsls	r2, r3, #5
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4413      	add	r3, r2
 8009814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	0151      	lsls	r1, r2, #5
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	440a      	add	r2, r1
 8009822:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009826:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800982a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009832:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	f003 030f 	and.w	r3, r3, #15
 800983c:	2101      	movs	r1, #1
 800983e:	fa01 f303 	lsl.w	r3, r1, r3
 8009842:	b29b      	uxth	r3, r3
 8009844:	43db      	mvns	r3, r3
 8009846:	68f9      	ldr	r1, [r7, #12]
 8009848:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800984c:	4013      	ands	r3, r2
 800984e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009856:	69da      	ldr	r2, [r3, #28]
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	f003 030f 	and.w	r3, r3, #15
 8009860:	2101      	movs	r1, #1
 8009862:	fa01 f303 	lsl.w	r3, r1, r3
 8009866:	b29b      	uxth	r3, r3
 8009868:	43db      	mvns	r3, r3
 800986a:	68f9      	ldr	r1, [r7, #12]
 800986c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009870:	4013      	ands	r3, r2
 8009872:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	015a      	lsls	r2, r3, #5
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	4413      	add	r3, r2
 800987c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	0159      	lsls	r1, r3, #5
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	440b      	add	r3, r1
 800988a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800988e:	4619      	mov	r1, r3
 8009890:	4b35      	ldr	r3, [pc, #212]	@ (8009968 <USB_DeactivateEndpoint+0x1b0>)
 8009892:	4013      	ands	r3, r2
 8009894:	600b      	str	r3, [r1, #0]
 8009896:	e060      	b.n	800995a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	015a      	lsls	r2, r3, #5
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	4413      	add	r3, r2
 80098a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098ae:	d11f      	bne.n	80098f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	015a      	lsls	r2, r3, #5
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	4413      	add	r3, r2
 80098b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68ba      	ldr	r2, [r7, #8]
 80098c0:	0151      	lsls	r1, r2, #5
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	440a      	add	r2, r1
 80098c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80098ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	015a      	lsls	r2, r3, #5
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4413      	add	r3, r2
 80098d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68ba      	ldr	r2, [r7, #8]
 80098e0:	0151      	lsls	r1, r2, #5
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	440a      	add	r2, r1
 80098e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80098ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	f003 030f 	and.w	r3, r3, #15
 8009900:	2101      	movs	r1, #1
 8009902:	fa01 f303 	lsl.w	r3, r1, r3
 8009906:	041b      	lsls	r3, r3, #16
 8009908:	43db      	mvns	r3, r3
 800990a:	68f9      	ldr	r1, [r7, #12]
 800990c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009910:	4013      	ands	r3, r2
 8009912:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800991a:	69da      	ldr	r2, [r3, #28]
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	f003 030f 	and.w	r3, r3, #15
 8009924:	2101      	movs	r1, #1
 8009926:	fa01 f303 	lsl.w	r3, r1, r3
 800992a:	041b      	lsls	r3, r3, #16
 800992c:	43db      	mvns	r3, r3
 800992e:	68f9      	ldr	r1, [r7, #12]
 8009930:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009934:	4013      	ands	r3, r2
 8009936:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	015a      	lsls	r2, r3, #5
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	4413      	add	r3, r2
 8009940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	0159      	lsls	r1, r3, #5
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	440b      	add	r3, r1
 800994e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009952:	4619      	mov	r1, r3
 8009954:	4b05      	ldr	r3, [pc, #20]	@ (800996c <USB_DeactivateEndpoint+0x1b4>)
 8009956:	4013      	ands	r3, r2
 8009958:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr
 8009968:	ec337800 	.word	0xec337800
 800996c:	eff37800 	.word	0xeff37800

08009970 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b08a      	sub	sp, #40	@ 0x28
 8009974:	af02      	add	r7, sp, #8
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	4613      	mov	r3, r2
 800997c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	785b      	ldrb	r3, [r3, #1]
 800998c:	2b01      	cmp	r3, #1
 800998e:	f040 817f 	bne.w	8009c90 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d132      	bne.n	8009a00 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	015a      	lsls	r2, r3, #5
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	4413      	add	r3, r2
 80099a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	69ba      	ldr	r2, [r7, #24]
 80099aa:	0151      	lsls	r1, r2, #5
 80099ac:	69fa      	ldr	r2, [r7, #28]
 80099ae:	440a      	add	r2, r1
 80099b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099b4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80099b8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80099bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	015a      	lsls	r2, r3, #5
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	4413      	add	r3, r2
 80099c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	69ba      	ldr	r2, [r7, #24]
 80099ce:	0151      	lsls	r1, r2, #5
 80099d0:	69fa      	ldr	r2, [r7, #28]
 80099d2:	440a      	add	r2, r1
 80099d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80099dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	015a      	lsls	r2, r3, #5
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	4413      	add	r3, r2
 80099e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	69ba      	ldr	r2, [r7, #24]
 80099ee:	0151      	lsls	r1, r2, #5
 80099f0:	69fa      	ldr	r2, [r7, #28]
 80099f2:	440a      	add	r2, r1
 80099f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099f8:	0cdb      	lsrs	r3, r3, #19
 80099fa:	04db      	lsls	r3, r3, #19
 80099fc:	6113      	str	r3, [r2, #16]
 80099fe:	e097      	b.n	8009b30 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	015a      	lsls	r2, r3, #5
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	69ba      	ldr	r2, [r7, #24]
 8009a10:	0151      	lsls	r1, r2, #5
 8009a12:	69fa      	ldr	r2, [r7, #28]
 8009a14:	440a      	add	r2, r1
 8009a16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a1a:	0cdb      	lsrs	r3, r3, #19
 8009a1c:	04db      	lsls	r3, r3, #19
 8009a1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	015a      	lsls	r2, r3, #5
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	4413      	add	r3, r2
 8009a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	69ba      	ldr	r2, [r7, #24]
 8009a30:	0151      	lsls	r1, r2, #5
 8009a32:	69fa      	ldr	r2, [r7, #28]
 8009a34:	440a      	add	r2, r1
 8009a36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a3a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009a3e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009a42:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d11a      	bne.n	8009a80 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	691a      	ldr	r2, [r3, #16]
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d903      	bls.n	8009a5e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	689a      	ldr	r2, [r3, #8]
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	015a      	lsls	r2, r3, #5
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	4413      	add	r3, r2
 8009a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	69ba      	ldr	r2, [r7, #24]
 8009a6e:	0151      	lsls	r1, r2, #5
 8009a70:	69fa      	ldr	r2, [r7, #28]
 8009a72:	440a      	add	r2, r1
 8009a74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a7c:	6113      	str	r3, [r2, #16]
 8009a7e:	e044      	b.n	8009b0a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	691a      	ldr	r2, [r3, #16]
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	4413      	add	r3, r2
 8009a8a:	1e5a      	subs	r2, r3, #1
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a94:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	015a      	lsls	r2, r3, #5
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aa2:	691a      	ldr	r2, [r3, #16]
 8009aa4:	8afb      	ldrh	r3, [r7, #22]
 8009aa6:	04d9      	lsls	r1, r3, #19
 8009aa8:	4ba4      	ldr	r3, [pc, #656]	@ (8009d3c <USB_EPStartXfer+0x3cc>)
 8009aaa:	400b      	ands	r3, r1
 8009aac:	69b9      	ldr	r1, [r7, #24]
 8009aae:	0148      	lsls	r0, r1, #5
 8009ab0:	69f9      	ldr	r1, [r7, #28]
 8009ab2:	4401      	add	r1, r0
 8009ab4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	791b      	ldrb	r3, [r3, #4]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d122      	bne.n	8009b0a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	015a      	lsls	r2, r3, #5
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	4413      	add	r3, r2
 8009acc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	69ba      	ldr	r2, [r7, #24]
 8009ad4:	0151      	lsls	r1, r2, #5
 8009ad6:	69fa      	ldr	r2, [r7, #28]
 8009ad8:	440a      	add	r2, r1
 8009ada:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ade:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009ae2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	015a      	lsls	r2, r3, #5
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	4413      	add	r3, r2
 8009aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009af0:	691a      	ldr	r2, [r3, #16]
 8009af2:	8afb      	ldrh	r3, [r7, #22]
 8009af4:	075b      	lsls	r3, r3, #29
 8009af6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009afa:	69b9      	ldr	r1, [r7, #24]
 8009afc:	0148      	lsls	r0, r1, #5
 8009afe:	69f9      	ldr	r1, [r7, #28]
 8009b00:	4401      	add	r1, r0
 8009b02:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009b06:	4313      	orrs	r3, r2
 8009b08:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	015a      	lsls	r2, r3, #5
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	4413      	add	r3, r2
 8009b12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b16:	691a      	ldr	r2, [r3, #16]
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b20:	69b9      	ldr	r1, [r7, #24]
 8009b22:	0148      	lsls	r0, r1, #5
 8009b24:	69f9      	ldr	r1, [r7, #28]
 8009b26:	4401      	add	r1, r0
 8009b28:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009b30:	79fb      	ldrb	r3, [r7, #7]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d14b      	bne.n	8009bce <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	69db      	ldr	r3, [r3, #28]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d009      	beq.n	8009b52 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	015a      	lsls	r2, r3, #5
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	4413      	add	r3, r2
 8009b46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	69db      	ldr	r3, [r3, #28]
 8009b50:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	791b      	ldrb	r3, [r3, #4]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d128      	bne.n	8009bac <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d110      	bne.n	8009b8c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	015a      	lsls	r2, r3, #5
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	4413      	add	r3, r2
 8009b72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	69ba      	ldr	r2, [r7, #24]
 8009b7a:	0151      	lsls	r1, r2, #5
 8009b7c:	69fa      	ldr	r2, [r7, #28]
 8009b7e:	440a      	add	r2, r1
 8009b80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009b88:	6013      	str	r3, [r2, #0]
 8009b8a:	e00f      	b.n	8009bac <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	015a      	lsls	r2, r3, #5
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	4413      	add	r3, r2
 8009b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	69ba      	ldr	r2, [r7, #24]
 8009b9c:	0151      	lsls	r1, r2, #5
 8009b9e:	69fa      	ldr	r2, [r7, #28]
 8009ba0:	440a      	add	r2, r1
 8009ba2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009baa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	015a      	lsls	r2, r3, #5
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	4413      	add	r3, r2
 8009bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	69ba      	ldr	r2, [r7, #24]
 8009bbc:	0151      	lsls	r1, r2, #5
 8009bbe:	69fa      	ldr	r2, [r7, #28]
 8009bc0:	440a      	add	r2, r1
 8009bc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bc6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009bca:	6013      	str	r3, [r2, #0]
 8009bcc:	e166      	b.n	8009e9c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	015a      	lsls	r2, r3, #5
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	69ba      	ldr	r2, [r7, #24]
 8009bde:	0151      	lsls	r1, r2, #5
 8009be0:	69fa      	ldr	r2, [r7, #28]
 8009be2:	440a      	add	r2, r1
 8009be4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009be8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009bec:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	791b      	ldrb	r3, [r3, #4]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d015      	beq.n	8009c22 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f000 814e 	beq.w	8009e9c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	f003 030f 	and.w	r3, r3, #15
 8009c10:	2101      	movs	r1, #1
 8009c12:	fa01 f303 	lsl.w	r3, r1, r3
 8009c16:	69f9      	ldr	r1, [r7, #28]
 8009c18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	634b      	str	r3, [r1, #52]	@ 0x34
 8009c20:	e13c      	b.n	8009e9c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d110      	bne.n	8009c54 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	015a      	lsls	r2, r3, #5
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	4413      	add	r3, r2
 8009c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	69ba      	ldr	r2, [r7, #24]
 8009c42:	0151      	lsls	r1, r2, #5
 8009c44:	69fa      	ldr	r2, [r7, #28]
 8009c46:	440a      	add	r2, r1
 8009c48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009c50:	6013      	str	r3, [r2, #0]
 8009c52:	e00f      	b.n	8009c74 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	015a      	lsls	r2, r3, #5
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	69ba      	ldr	r2, [r7, #24]
 8009c64:	0151      	lsls	r1, r2, #5
 8009c66:	69fa      	ldr	r2, [r7, #28]
 8009c68:	440a      	add	r2, r1
 8009c6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c72:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	68d9      	ldr	r1, [r3, #12]
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	781a      	ldrb	r2, [r3, #0]
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	b298      	uxth	r0, r3
 8009c82:	79fb      	ldrb	r3, [r7, #7]
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	4603      	mov	r3, r0
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f000 f9b9 	bl	800a000 <USB_WritePacket>
 8009c8e:	e105      	b.n	8009e9c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	015a      	lsls	r2, r3, #5
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	4413      	add	r3, r2
 8009c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	69ba      	ldr	r2, [r7, #24]
 8009ca0:	0151      	lsls	r1, r2, #5
 8009ca2:	69fa      	ldr	r2, [r7, #28]
 8009ca4:	440a      	add	r2, r1
 8009ca6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009caa:	0cdb      	lsrs	r3, r3, #19
 8009cac:	04db      	lsls	r3, r3, #19
 8009cae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	015a      	lsls	r2, r3, #5
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	69ba      	ldr	r2, [r7, #24]
 8009cc0:	0151      	lsls	r1, r2, #5
 8009cc2:	69fa      	ldr	r2, [r7, #28]
 8009cc4:	440a      	add	r2, r1
 8009cc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009cce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009cd2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d132      	bne.n	8009d40 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	689a      	ldr	r2, [r3, #8]
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	689a      	ldr	r2, [r3, #8]
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	015a      	lsls	r2, r3, #5
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cfe:	691a      	ldr	r2, [r3, #16]
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	6a1b      	ldr	r3, [r3, #32]
 8009d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d08:	69b9      	ldr	r1, [r7, #24]
 8009d0a:	0148      	lsls	r0, r1, #5
 8009d0c:	69f9      	ldr	r1, [r7, #28]
 8009d0e:	4401      	add	r1, r0
 8009d10:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009d14:	4313      	orrs	r3, r2
 8009d16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	015a      	lsls	r2, r3, #5
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	4413      	add	r3, r2
 8009d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	69ba      	ldr	r2, [r7, #24]
 8009d28:	0151      	lsls	r1, r2, #5
 8009d2a:	69fa      	ldr	r2, [r7, #28]
 8009d2c:	440a      	add	r2, r1
 8009d2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009d36:	6113      	str	r3, [r2, #16]
 8009d38:	e062      	b.n	8009e00 <USB_EPStartXfer+0x490>
 8009d3a:	bf00      	nop
 8009d3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d123      	bne.n	8009d90 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	015a      	lsls	r2, r3, #5
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	4413      	add	r3, r2
 8009d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d54:	691a      	ldr	r2, [r3, #16]
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d5e:	69b9      	ldr	r1, [r7, #24]
 8009d60:	0148      	lsls	r0, r1, #5
 8009d62:	69f9      	ldr	r1, [r7, #28]
 8009d64:	4401      	add	r1, r0
 8009d66:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	015a      	lsls	r2, r3, #5
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	4413      	add	r3, r2
 8009d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d7a:	691b      	ldr	r3, [r3, #16]
 8009d7c:	69ba      	ldr	r2, [r7, #24]
 8009d7e:	0151      	lsls	r1, r2, #5
 8009d80:	69fa      	ldr	r2, [r7, #28]
 8009d82:	440a      	add	r2, r1
 8009d84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009d8c:	6113      	str	r3, [r2, #16]
 8009d8e:	e037      	b.n	8009e00 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	691a      	ldr	r2, [r3, #16]
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	4413      	add	r3, r2
 8009d9a:	1e5a      	subs	r2, r3, #1
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009da4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	8afa      	ldrh	r2, [r7, #22]
 8009dac:	fb03 f202 	mul.w	r2, r3, r2
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	015a      	lsls	r2, r3, #5
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	4413      	add	r3, r2
 8009dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dc0:	691a      	ldr	r2, [r3, #16]
 8009dc2:	8afb      	ldrh	r3, [r7, #22]
 8009dc4:	04d9      	lsls	r1, r3, #19
 8009dc6:	4b38      	ldr	r3, [pc, #224]	@ (8009ea8 <USB_EPStartXfer+0x538>)
 8009dc8:	400b      	ands	r3, r1
 8009dca:	69b9      	ldr	r1, [r7, #24]
 8009dcc:	0148      	lsls	r0, r1, #5
 8009dce:	69f9      	ldr	r1, [r7, #28]
 8009dd0:	4401      	add	r1, r0
 8009dd2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	015a      	lsls	r2, r3, #5
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	4413      	add	r3, r2
 8009de2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009de6:	691a      	ldr	r2, [r3, #16]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	6a1b      	ldr	r3, [r3, #32]
 8009dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009df0:	69b9      	ldr	r1, [r7, #24]
 8009df2:	0148      	lsls	r0, r1, #5
 8009df4:	69f9      	ldr	r1, [r7, #28]
 8009df6:	4401      	add	r1, r0
 8009df8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009e00:	79fb      	ldrb	r3, [r7, #7]
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d10d      	bne.n	8009e22 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d009      	beq.n	8009e22 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	68d9      	ldr	r1, [r3, #12]
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	015a      	lsls	r2, r3, #5
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	4413      	add	r3, r2
 8009e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e1e:	460a      	mov	r2, r1
 8009e20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	791b      	ldrb	r3, [r3, #4]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d128      	bne.n	8009e7c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d110      	bne.n	8009e5c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	015a      	lsls	r2, r3, #5
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	4413      	add	r3, r2
 8009e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	69ba      	ldr	r2, [r7, #24]
 8009e4a:	0151      	lsls	r1, r2, #5
 8009e4c:	69fa      	ldr	r2, [r7, #28]
 8009e4e:	440a      	add	r2, r1
 8009e50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009e58:	6013      	str	r3, [r2, #0]
 8009e5a:	e00f      	b.n	8009e7c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	015a      	lsls	r2, r3, #5
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	4413      	add	r3, r2
 8009e64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	69ba      	ldr	r2, [r7, #24]
 8009e6c:	0151      	lsls	r1, r2, #5
 8009e6e:	69fa      	ldr	r2, [r7, #28]
 8009e70:	440a      	add	r2, r1
 8009e72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	015a      	lsls	r2, r3, #5
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	69ba      	ldr	r2, [r7, #24]
 8009e8c:	0151      	lsls	r1, r2, #5
 8009e8e:	69fa      	ldr	r2, [r7, #28]
 8009e90:	440a      	add	r2, r1
 8009e92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e96:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009e9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3720      	adds	r7, #32
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	1ff80000 	.word	0x1ff80000

08009eac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b087      	sub	sp, #28
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	785b      	ldrb	r3, [r3, #1]
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d14a      	bne.n	8009f60 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	015a      	lsls	r2, r3, #5
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ede:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ee2:	f040 8086 	bne.w	8009ff2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	015a      	lsls	r2, r3, #5
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	4413      	add	r3, r2
 8009ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	683a      	ldr	r2, [r7, #0]
 8009ef8:	7812      	ldrb	r2, [r2, #0]
 8009efa:	0151      	lsls	r1, r2, #5
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	440a      	add	r2, r1
 8009f00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f08:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	015a      	lsls	r2, r3, #5
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	4413      	add	r3, r2
 8009f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	683a      	ldr	r2, [r7, #0]
 8009f1c:	7812      	ldrb	r2, [r2, #0]
 8009f1e:	0151      	lsls	r1, r2, #5
 8009f20:	693a      	ldr	r2, [r7, #16]
 8009f22:	440a      	add	r2, r1
 8009f24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	3301      	adds	r3, #1
 8009f32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d902      	bls.n	8009f44 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	75fb      	strb	r3, [r7, #23]
          break;
 8009f42:	e056      	b.n	8009ff2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	015a      	lsls	r2, r3, #5
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f5c:	d0e7      	beq.n	8009f2e <USB_EPStopXfer+0x82>
 8009f5e:	e048      	b.n	8009ff2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	015a      	lsls	r2, r3, #5
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	4413      	add	r3, r2
 8009f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f78:	d13b      	bne.n	8009ff2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	015a      	lsls	r2, r3, #5
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	4413      	add	r3, r2
 8009f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	683a      	ldr	r2, [r7, #0]
 8009f8c:	7812      	ldrb	r2, [r2, #0]
 8009f8e:	0151      	lsls	r1, r2, #5
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	440a      	add	r2, r1
 8009f94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f9c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	015a      	lsls	r2, r3, #5
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	683a      	ldr	r2, [r7, #0]
 8009fb0:	7812      	ldrb	r2, [r2, #0]
 8009fb2:	0151      	lsls	r1, r2, #5
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	440a      	add	r2, r1
 8009fb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009fc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d902      	bls.n	8009fd8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	75fb      	strb	r3, [r7, #23]
          break;
 8009fd6:	e00c      	b.n	8009ff2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	015a      	lsls	r2, r3, #5
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009fec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ff0:	d0e7      	beq.n	8009fc2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	371c      	adds	r7, #28
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a000:	b480      	push	{r7}
 800a002:	b089      	sub	sp, #36	@ 0x24
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	4611      	mov	r1, r2
 800a00c:	461a      	mov	r2, r3
 800a00e:	460b      	mov	r3, r1
 800a010:	71fb      	strb	r3, [r7, #7]
 800a012:	4613      	mov	r3, r2
 800a014:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a01e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a022:	2b00      	cmp	r3, #0
 800a024:	d123      	bne.n	800a06e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a026:	88bb      	ldrh	r3, [r7, #4]
 800a028:	3303      	adds	r3, #3
 800a02a:	089b      	lsrs	r3, r3, #2
 800a02c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a02e:	2300      	movs	r3, #0
 800a030:	61bb      	str	r3, [r7, #24]
 800a032:	e018      	b.n	800a066 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a034:	79fb      	ldrb	r3, [r7, #7]
 800a036:	031a      	lsls	r2, r3, #12
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	4413      	add	r3, r2
 800a03c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a040:	461a      	mov	r2, r3
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	3301      	adds	r3, #1
 800a04c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	3301      	adds	r3, #1
 800a052:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	3301      	adds	r3, #1
 800a058:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	3301      	adds	r3, #1
 800a05e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	3301      	adds	r3, #1
 800a064:	61bb      	str	r3, [r7, #24]
 800a066:	69ba      	ldr	r2, [r7, #24]
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d3e2      	bcc.n	800a034 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3724      	adds	r7, #36	@ 0x24
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b08b      	sub	sp, #44	@ 0x2c
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	4613      	mov	r3, r2
 800a088:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a092:	88fb      	ldrh	r3, [r7, #6]
 800a094:	089b      	lsrs	r3, r3, #2
 800a096:	b29b      	uxth	r3, r3
 800a098:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a09a:	88fb      	ldrh	r3, [r7, #6]
 800a09c:	f003 0303 	and.w	r3, r3, #3
 800a0a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	623b      	str	r3, [r7, #32]
 800a0a6:	e014      	b.n	800a0d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b2:	601a      	str	r2, [r3, #0]
    pDest++;
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0bc:	3301      	adds	r3, #1
 800a0be:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a0cc:	6a3b      	ldr	r3, [r7, #32]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	623b      	str	r3, [r7, #32]
 800a0d2:	6a3a      	ldr	r2, [r7, #32]
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d3e6      	bcc.n	800a0a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a0da:	8bfb      	ldrh	r3, [r7, #30]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d01e      	beq.n	800a11e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	f107 0310 	add.w	r3, r7, #16
 800a0f0:	6812      	ldr	r2, [r2, #0]
 800a0f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a0f4:	693a      	ldr	r2, [r7, #16]
 800a0f6:	6a3b      	ldr	r3, [r7, #32]
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	00db      	lsls	r3, r3, #3
 800a0fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a100:	b2da      	uxtb	r2, r3
 800a102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a104:	701a      	strb	r2, [r3, #0]
      i++;
 800a106:	6a3b      	ldr	r3, [r7, #32]
 800a108:	3301      	adds	r3, #1
 800a10a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10e:	3301      	adds	r3, #1
 800a110:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a112:	8bfb      	ldrh	r3, [r7, #30]
 800a114:	3b01      	subs	r3, #1
 800a116:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a118:	8bfb      	ldrh	r3, [r7, #30]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1ea      	bne.n	800a0f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a120:	4618      	mov	r0, r3
 800a122:	372c      	adds	r7, #44	@ 0x2c
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	785b      	ldrb	r3, [r3, #1]
 800a144:	2b01      	cmp	r3, #1
 800a146:	d12c      	bne.n	800a1a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	015a      	lsls	r2, r3, #5
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	4413      	add	r3, r2
 800a150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	db12      	blt.n	800a180 <USB_EPSetStall+0x54>
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d00f      	beq.n	800a180 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	015a      	lsls	r2, r3, #5
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	4413      	add	r3, r2
 800a168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	0151      	lsls	r1, r2, #5
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	440a      	add	r2, r1
 800a176:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a17a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a17e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	015a      	lsls	r2, r3, #5
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	4413      	add	r3, r2
 800a188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68ba      	ldr	r2, [r7, #8]
 800a190:	0151      	lsls	r1, r2, #5
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	440a      	add	r2, r1
 800a196:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a19a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a19e:	6013      	str	r3, [r2, #0]
 800a1a0:	e02b      	b.n	800a1fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	015a      	lsls	r2, r3, #5
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	db12      	blt.n	800a1da <USB_EPSetStall+0xae>
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00f      	beq.n	800a1da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	015a      	lsls	r2, r3, #5
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68ba      	ldr	r2, [r7, #8]
 800a1ca:	0151      	lsls	r1, r2, #5
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	440a      	add	r2, r1
 800a1d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a1d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	015a      	lsls	r2, r3, #5
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68ba      	ldr	r2, [r7, #8]
 800a1ea:	0151      	lsls	r1, r2, #5
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	440a      	add	r2, r1
 800a1f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a1f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	785b      	ldrb	r3, [r3, #1]
 800a220:	2b01      	cmp	r3, #1
 800a222:	d128      	bne.n	800a276 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	015a      	lsls	r2, r3, #5
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	4413      	add	r3, r2
 800a22c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	0151      	lsls	r1, r2, #5
 800a236:	68fa      	ldr	r2, [r7, #12]
 800a238:	440a      	add	r2, r1
 800a23a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a23e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a242:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	791b      	ldrb	r3, [r3, #4]
 800a248:	2b03      	cmp	r3, #3
 800a24a:	d003      	beq.n	800a254 <USB_EPClearStall+0x4c>
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	791b      	ldrb	r3, [r3, #4]
 800a250:	2b02      	cmp	r3, #2
 800a252:	d138      	bne.n	800a2c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	015a      	lsls	r2, r3, #5
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	4413      	add	r3, r2
 800a25c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	0151      	lsls	r1, r2, #5
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	440a      	add	r2, r1
 800a26a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a26e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a272:	6013      	str	r3, [r2, #0]
 800a274:	e027      	b.n	800a2c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	015a      	lsls	r2, r3, #5
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	4413      	add	r3, r2
 800a27e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	0151      	lsls	r1, r2, #5
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	440a      	add	r2, r1
 800a28c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a290:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a294:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	791b      	ldrb	r3, [r3, #4]
 800a29a:	2b03      	cmp	r3, #3
 800a29c:	d003      	beq.n	800a2a6 <USB_EPClearStall+0x9e>
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	791b      	ldrb	r3, [r3, #4]
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d10f      	bne.n	800a2c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	015a      	lsls	r2, r3, #5
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	0151      	lsls	r1, r2, #5
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	440a      	add	r2, r1
 800a2bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3714      	adds	r7, #20
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	460b      	mov	r3, r1
 800a2de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a2f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a2f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	78fb      	ldrb	r3, [r7, #3]
 800a302:	011b      	lsls	r3, r3, #4
 800a304:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a308:	68f9      	ldr	r1, [r7, #12]
 800a30a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a30e:	4313      	orrs	r3, r2
 800a310:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3714      	adds	r7, #20
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	68fa      	ldr	r2, [r7, #12]
 800a336:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a33a:	f023 0303 	bic.w	r3, r3, #3
 800a33e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a34e:	f023 0302 	bic.w	r3, r3, #2
 800a352:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3714      	adds	r7, #20
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a362:	b480      	push	{r7}
 800a364:	b085      	sub	sp, #20
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a37c:	f023 0303 	bic.w	r3, r3, #3
 800a380:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a390:	f043 0302 	orr.w	r3, r3, #2
 800a394:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b085      	sub	sp, #20
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	695b      	ldr	r3, [r3, #20]
 800a3b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	699b      	ldr	r3, [r3, #24]
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3714      	adds	r7, #20
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	b085      	sub	sp, #20
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3dc:	699b      	ldr	r3, [r3, #24]
 800a3de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3e6:	69db      	ldr	r3, [r3, #28]
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	0c1b      	lsrs	r3, r3, #16
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr

0800a3fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a3fe:	b480      	push	{r7}
 800a400:	b085      	sub	sp, #20
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a410:	699b      	ldr	r3, [r3, #24]
 800a412:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a41a:	69db      	ldr	r3, [r3, #28]
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	4013      	ands	r3, r2
 800a420:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	b29b      	uxth	r3, r3
}
 800a426:	4618      	mov	r0, r3
 800a428:	3714      	adds	r7, #20
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr

0800a432 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a432:	b480      	push	{r7}
 800a434:	b085      	sub	sp, #20
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
 800a43a:	460b      	mov	r3, r1
 800a43c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a442:	78fb      	ldrb	r3, [r7, #3]
 800a444:	015a      	lsls	r2, r3, #5
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	4413      	add	r3, r2
 800a44a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a458:	695b      	ldr	r3, [r3, #20]
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	4013      	ands	r3, r2
 800a45e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a460:	68bb      	ldr	r3, [r7, #8]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3714      	adds	r7, #20
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr

0800a46e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a46e:	b480      	push	{r7}
 800a470:	b087      	sub	sp, #28
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
 800a476:	460b      	mov	r3, r1
 800a478:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a48e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a490:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a492:	78fb      	ldrb	r3, [r7, #3]
 800a494:	f003 030f 	and.w	r3, r3, #15
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	fa22 f303 	lsr.w	r3, r2, r3
 800a49e:	01db      	lsls	r3, r3, #7
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	693a      	ldr	r2, [r7, #16]
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a4a8:	78fb      	ldrb	r3, [r7, #3]
 800a4aa:	015a      	lsls	r2, r3, #5
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	693a      	ldr	r2, [r7, #16]
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a4bc:	68bb      	ldr	r3, [r7, #8]
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	371c      	adds	r7, #28
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr

0800a4ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a4ca:	b480      	push	{r7}
 800a4cc:	b083      	sub	sp, #12
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	f003 0301 	and.w	r3, r3, #1
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b085      	sub	sp, #20
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a500:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a504:	f023 0307 	bic.w	r3, r3, #7
 800a508:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	68fa      	ldr	r2, [r7, #12]
 800a514:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a51c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a51e:	2300      	movs	r3, #0
}
 800a520:	4618      	mov	r0, r3
 800a522:	3714      	adds	r7, #20
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b087      	sub	sp, #28
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	460b      	mov	r3, r1
 800a536:	607a      	str	r2, [r7, #4]
 800a538:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	333c      	adds	r3, #60	@ 0x3c
 800a542:	3304      	adds	r3, #4
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	4a26      	ldr	r2, [pc, #152]	@ (800a5e4 <USB_EP0_OutStart+0xb8>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d90a      	bls.n	800a566 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a55c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a560:	d101      	bne.n	800a566 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a562:	2300      	movs	r3, #0
 800a564:	e037      	b.n	800a5d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a56c:	461a      	mov	r2, r3
 800a56e:	2300      	movs	r3, #0
 800a570:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a580:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a584:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	697a      	ldr	r2, [r7, #20]
 800a590:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a594:	f043 0318 	orr.w	r3, r3, #24
 800a598:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	697a      	ldr	r2, [r7, #20]
 800a5a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5a8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a5ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a5ae:	7afb      	ldrb	r3, [r7, #11]
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d10f      	bne.n	800a5d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	697a      	ldr	r2, [r7, #20]
 800a5ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5ce:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a5d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	371c      	adds	r7, #28
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	4f54300a 	.word	0x4f54300a

0800a5e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b085      	sub	sp, #20
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a600:	d901      	bls.n	800a606 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a602:	2303      	movs	r3, #3
 800a604:	e01b      	b.n	800a63e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	daf2      	bge.n	800a5f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a60e:	2300      	movs	r3, #0
 800a610:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	f043 0201 	orr.w	r2, r3, #1
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	3301      	adds	r3, #1
 800a622:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a62a:	d901      	bls.n	800a630 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a62c:	2303      	movs	r3, #3
 800a62e:	e006      	b.n	800a63e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	f003 0301 	and.w	r3, r3, #1
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d0f0      	beq.n	800a61e <USB_CoreReset+0x36>

  return HAL_OK;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3714      	adds	r7, #20
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
	...

0800a64c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	460b      	mov	r3, r1
 800a656:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a658:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a65c:	f002 fc46 	bl	800ceec <USBD_static_malloc>
 800a660:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d109      	bne.n	800a67c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	32b0      	adds	r2, #176	@ 0xb0
 800a672:	2100      	movs	r1, #0
 800a674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a678:	2302      	movs	r3, #2
 800a67a:	e0d4      	b.n	800a826 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a67c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a680:	2100      	movs	r1, #0
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f003 fb53 	bl	800dd2e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	32b0      	adds	r2, #176	@ 0xb0
 800a692:	68f9      	ldr	r1, [r7, #12]
 800a694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	32b0      	adds	r2, #176	@ 0xb0
 800a6a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	7c1b      	ldrb	r3, [r3, #16]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d138      	bne.n	800a726 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a6b4:	4b5e      	ldr	r3, [pc, #376]	@ (800a830 <USBD_CDC_Init+0x1e4>)
 800a6b6:	7819      	ldrb	r1, [r3, #0]
 800a6b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6bc:	2202      	movs	r2, #2
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f002 faf1 	bl	800cca6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a6c4:	4b5a      	ldr	r3, [pc, #360]	@ (800a830 <USBD_CDC_Init+0x1e4>)
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	f003 020f 	and.w	r2, r3, #15
 800a6cc:	6879      	ldr	r1, [r7, #4]
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	4413      	add	r3, r2
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	440b      	add	r3, r1
 800a6d8:	3324      	adds	r3, #36	@ 0x24
 800a6da:	2201      	movs	r2, #1
 800a6dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a6de:	4b55      	ldr	r3, [pc, #340]	@ (800a834 <USBD_CDC_Init+0x1e8>)
 800a6e0:	7819      	ldrb	r1, [r3, #0]
 800a6e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6e6:	2202      	movs	r2, #2
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f002 fadc 	bl	800cca6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a6ee:	4b51      	ldr	r3, [pc, #324]	@ (800a834 <USBD_CDC_Init+0x1e8>)
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	f003 020f 	and.w	r2, r3, #15
 800a6f6:	6879      	ldr	r1, [r7, #4]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	440b      	add	r3, r1
 800a702:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a706:	2201      	movs	r2, #1
 800a708:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a70a:	4b4b      	ldr	r3, [pc, #300]	@ (800a838 <USBD_CDC_Init+0x1ec>)
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	f003 020f 	and.w	r2, r3, #15
 800a712:	6879      	ldr	r1, [r7, #4]
 800a714:	4613      	mov	r3, r2
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	440b      	add	r3, r1
 800a71e:	3326      	adds	r3, #38	@ 0x26
 800a720:	2210      	movs	r2, #16
 800a722:	801a      	strh	r2, [r3, #0]
 800a724:	e035      	b.n	800a792 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a726:	4b42      	ldr	r3, [pc, #264]	@ (800a830 <USBD_CDC_Init+0x1e4>)
 800a728:	7819      	ldrb	r1, [r3, #0]
 800a72a:	2340      	movs	r3, #64	@ 0x40
 800a72c:	2202      	movs	r2, #2
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f002 fab9 	bl	800cca6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a734:	4b3e      	ldr	r3, [pc, #248]	@ (800a830 <USBD_CDC_Init+0x1e4>)
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	f003 020f 	and.w	r2, r3, #15
 800a73c:	6879      	ldr	r1, [r7, #4]
 800a73e:	4613      	mov	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4413      	add	r3, r2
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	440b      	add	r3, r1
 800a748:	3324      	adds	r3, #36	@ 0x24
 800a74a:	2201      	movs	r2, #1
 800a74c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a74e:	4b39      	ldr	r3, [pc, #228]	@ (800a834 <USBD_CDC_Init+0x1e8>)
 800a750:	7819      	ldrb	r1, [r3, #0]
 800a752:	2340      	movs	r3, #64	@ 0x40
 800a754:	2202      	movs	r2, #2
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f002 faa5 	bl	800cca6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a75c:	4b35      	ldr	r3, [pc, #212]	@ (800a834 <USBD_CDC_Init+0x1e8>)
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	f003 020f 	and.w	r2, r3, #15
 800a764:	6879      	ldr	r1, [r7, #4]
 800a766:	4613      	mov	r3, r2
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	4413      	add	r3, r2
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	440b      	add	r3, r1
 800a770:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a774:	2201      	movs	r2, #1
 800a776:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a778:	4b2f      	ldr	r3, [pc, #188]	@ (800a838 <USBD_CDC_Init+0x1ec>)
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	f003 020f 	and.w	r2, r3, #15
 800a780:	6879      	ldr	r1, [r7, #4]
 800a782:	4613      	mov	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	4413      	add	r3, r2
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	440b      	add	r3, r1
 800a78c:	3326      	adds	r3, #38	@ 0x26
 800a78e:	2210      	movs	r2, #16
 800a790:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a792:	4b29      	ldr	r3, [pc, #164]	@ (800a838 <USBD_CDC_Init+0x1ec>)
 800a794:	7819      	ldrb	r1, [r3, #0]
 800a796:	2308      	movs	r3, #8
 800a798:	2203      	movs	r2, #3
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f002 fa83 	bl	800cca6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a7a0:	4b25      	ldr	r3, [pc, #148]	@ (800a838 <USBD_CDC_Init+0x1ec>)
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	f003 020f 	and.w	r2, r3, #15
 800a7a8:	6879      	ldr	r1, [r7, #4]
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	4413      	add	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	440b      	add	r3, r1
 800a7b4:	3324      	adds	r3, #36	@ 0x24
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	33b0      	adds	r3, #176	@ 0xb0
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4413      	add	r3, r2
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a7f0:	2302      	movs	r3, #2
 800a7f2:	e018      	b.n	800a826 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	7c1b      	ldrb	r3, [r3, #16]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d10a      	bne.n	800a812 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7fc:	4b0d      	ldr	r3, [pc, #52]	@ (800a834 <USBD_CDC_Init+0x1e8>)
 800a7fe:	7819      	ldrb	r1, [r3, #0]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a806:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f002 fb3a 	bl	800ce84 <USBD_LL_PrepareReceive>
 800a810:	e008      	b.n	800a824 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a812:	4b08      	ldr	r3, [pc, #32]	@ (800a834 <USBD_CDC_Init+0x1e8>)
 800a814:	7819      	ldrb	r1, [r3, #0]
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a81c:	2340      	movs	r3, #64	@ 0x40
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f002 fb30 	bl	800ce84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	20000097 	.word	0x20000097
 800a834:	20000098 	.word	0x20000098
 800a838:	20000099 	.word	0x20000099

0800a83c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	460b      	mov	r3, r1
 800a846:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a848:	4b3a      	ldr	r3, [pc, #232]	@ (800a934 <USBD_CDC_DeInit+0xf8>)
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	4619      	mov	r1, r3
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f002 fa4f 	bl	800ccf2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a854:	4b37      	ldr	r3, [pc, #220]	@ (800a934 <USBD_CDC_DeInit+0xf8>)
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	f003 020f 	and.w	r2, r3, #15
 800a85c:	6879      	ldr	r1, [r7, #4]
 800a85e:	4613      	mov	r3, r2
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	4413      	add	r3, r2
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	440b      	add	r3, r1
 800a868:	3324      	adds	r3, #36	@ 0x24
 800a86a:	2200      	movs	r2, #0
 800a86c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a86e:	4b32      	ldr	r3, [pc, #200]	@ (800a938 <USBD_CDC_DeInit+0xfc>)
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	4619      	mov	r1, r3
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f002 fa3c 	bl	800ccf2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a87a:	4b2f      	ldr	r3, [pc, #188]	@ (800a938 <USBD_CDC_DeInit+0xfc>)
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	f003 020f 	and.w	r2, r3, #15
 800a882:	6879      	ldr	r1, [r7, #4]
 800a884:	4613      	mov	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	4413      	add	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	440b      	add	r3, r1
 800a88e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a892:	2200      	movs	r2, #0
 800a894:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a896:	4b29      	ldr	r3, [pc, #164]	@ (800a93c <USBD_CDC_DeInit+0x100>)
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	4619      	mov	r1, r3
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f002 fa28 	bl	800ccf2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a8a2:	4b26      	ldr	r3, [pc, #152]	@ (800a93c <USBD_CDC_DeInit+0x100>)
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	f003 020f 	and.w	r2, r3, #15
 800a8aa:	6879      	ldr	r1, [r7, #4]
 800a8ac:	4613      	mov	r3, r2
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	4413      	add	r3, r2
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	440b      	add	r3, r1
 800a8b6:	3324      	adds	r3, #36	@ 0x24
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a8bc:	4b1f      	ldr	r3, [pc, #124]	@ (800a93c <USBD_CDC_DeInit+0x100>)
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	f003 020f 	and.w	r2, r3, #15
 800a8c4:	6879      	ldr	r1, [r7, #4]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	4413      	add	r3, r2
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	440b      	add	r3, r1
 800a8d0:	3326      	adds	r3, #38	@ 0x26
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	32b0      	adds	r2, #176	@ 0xb0
 800a8e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d01f      	beq.n	800a928 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	33b0      	adds	r3, #176	@ 0xb0
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4413      	add	r3, r2
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	32b0      	adds	r2, #176	@ 0xb0
 800a906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a90a:	4618      	mov	r0, r3
 800a90c:	f002 fafc 	bl	800cf08 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	32b0      	adds	r2, #176	@ 0xb0
 800a91a:	2100      	movs	r1, #0
 800a91c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	20000097 	.word	0x20000097
 800a938:	20000098 	.word	0x20000098
 800a93c:	20000099 	.word	0x20000099

0800a940 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b086      	sub	sp, #24
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	32b0      	adds	r2, #176	@ 0xb0
 800a954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a958:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a95a:	2300      	movs	r3, #0
 800a95c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a95e:	2300      	movs	r3, #0
 800a960:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a962:	2300      	movs	r3, #0
 800a964:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d101      	bne.n	800a970 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a96c:	2303      	movs	r3, #3
 800a96e:	e0bf      	b.n	800aaf0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d050      	beq.n	800aa1e <USBD_CDC_Setup+0xde>
 800a97c:	2b20      	cmp	r3, #32
 800a97e:	f040 80af 	bne.w	800aae0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	88db      	ldrh	r3, [r3, #6]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d03a      	beq.n	800aa00 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	b25b      	sxtb	r3, r3
 800a990:	2b00      	cmp	r3, #0
 800a992:	da1b      	bge.n	800a9cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	33b0      	adds	r3, #176	@ 0xb0
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	4413      	add	r3, r2
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a9aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a9ac:	683a      	ldr	r2, [r7, #0]
 800a9ae:	88d2      	ldrh	r2, [r2, #6]
 800a9b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	88db      	ldrh	r3, [r3, #6]
 800a9b6:	2b07      	cmp	r3, #7
 800a9b8:	bf28      	it	cs
 800a9ba:	2307      	movcs	r3, #7
 800a9bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	89fa      	ldrh	r2, [r7, #14]
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f001 fd53 	bl	800c470 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a9ca:	e090      	b.n	800aaee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	785a      	ldrb	r2, [r3, #1]
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	88db      	ldrh	r3, [r3, #6]
 800a9da:	2b3f      	cmp	r3, #63	@ 0x3f
 800a9dc:	d803      	bhi.n	800a9e6 <USBD_CDC_Setup+0xa6>
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	88db      	ldrh	r3, [r3, #6]
 800a9e2:	b2da      	uxtb	r2, r3
 800a9e4:	e000      	b.n	800a9e8 <USBD_CDC_Setup+0xa8>
 800a9e6:	2240      	movs	r2, #64	@ 0x40
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a9ee:	6939      	ldr	r1, [r7, #16]
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f001 fd65 	bl	800c4c8 <USBD_CtlPrepareRx>
      break;
 800a9fe:	e076      	b.n	800aaee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	33b0      	adds	r3, #176	@ 0xb0
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	4413      	add	r3, r2
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	7850      	ldrb	r0, [r2, #1]
 800aa16:	2200      	movs	r2, #0
 800aa18:	6839      	ldr	r1, [r7, #0]
 800aa1a:	4798      	blx	r3
      break;
 800aa1c:	e067      	b.n	800aaee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	785b      	ldrb	r3, [r3, #1]
 800aa22:	2b0b      	cmp	r3, #11
 800aa24:	d851      	bhi.n	800aaca <USBD_CDC_Setup+0x18a>
 800aa26:	a201      	add	r2, pc, #4	@ (adr r2, 800aa2c <USBD_CDC_Setup+0xec>)
 800aa28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa2c:	0800aa5d 	.word	0x0800aa5d
 800aa30:	0800aad9 	.word	0x0800aad9
 800aa34:	0800aacb 	.word	0x0800aacb
 800aa38:	0800aacb 	.word	0x0800aacb
 800aa3c:	0800aacb 	.word	0x0800aacb
 800aa40:	0800aacb 	.word	0x0800aacb
 800aa44:	0800aacb 	.word	0x0800aacb
 800aa48:	0800aacb 	.word	0x0800aacb
 800aa4c:	0800aacb 	.word	0x0800aacb
 800aa50:	0800aacb 	.word	0x0800aacb
 800aa54:	0800aa87 	.word	0x0800aa87
 800aa58:	0800aab1 	.word	0x0800aab1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	2b03      	cmp	r3, #3
 800aa66:	d107      	bne.n	800aa78 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aa68:	f107 030a 	add.w	r3, r7, #10
 800aa6c:	2202      	movs	r2, #2
 800aa6e:	4619      	mov	r1, r3
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f001 fcfd 	bl	800c470 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa76:	e032      	b.n	800aade <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa78:	6839      	ldr	r1, [r7, #0]
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f001 fc7b 	bl	800c376 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa80:	2303      	movs	r3, #3
 800aa82:	75fb      	strb	r3, [r7, #23]
          break;
 800aa84:	e02b      	b.n	800aade <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	2b03      	cmp	r3, #3
 800aa90:	d107      	bne.n	800aaa2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aa92:	f107 030d 	add.w	r3, r7, #13
 800aa96:	2201      	movs	r2, #1
 800aa98:	4619      	mov	r1, r3
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f001 fce8 	bl	800c470 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aaa0:	e01d      	b.n	800aade <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aaa2:	6839      	ldr	r1, [r7, #0]
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f001 fc66 	bl	800c376 <USBD_CtlError>
            ret = USBD_FAIL;
 800aaaa:	2303      	movs	r3, #3
 800aaac:	75fb      	strb	r3, [r7, #23]
          break;
 800aaae:	e016      	b.n	800aade <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	2b03      	cmp	r3, #3
 800aaba:	d00f      	beq.n	800aadc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aabc:	6839      	ldr	r1, [r7, #0]
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f001 fc59 	bl	800c376 <USBD_CtlError>
            ret = USBD_FAIL;
 800aac4:	2303      	movs	r3, #3
 800aac6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aac8:	e008      	b.n	800aadc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aaca:	6839      	ldr	r1, [r7, #0]
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f001 fc52 	bl	800c376 <USBD_CtlError>
          ret = USBD_FAIL;
 800aad2:	2303      	movs	r3, #3
 800aad4:	75fb      	strb	r3, [r7, #23]
          break;
 800aad6:	e002      	b.n	800aade <USBD_CDC_Setup+0x19e>
          break;
 800aad8:	bf00      	nop
 800aada:	e008      	b.n	800aaee <USBD_CDC_Setup+0x1ae>
          break;
 800aadc:	bf00      	nop
      }
      break;
 800aade:	e006      	b.n	800aaee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aae0:	6839      	ldr	r1, [r7, #0]
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f001 fc47 	bl	800c376 <USBD_CtlError>
      ret = USBD_FAIL;
 800aae8:	2303      	movs	r3, #3
 800aaea:	75fb      	strb	r3, [r7, #23]
      break;
 800aaec:	bf00      	nop
  }

  return (uint8_t)ret;
 800aaee:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3718      	adds	r7, #24
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	460b      	mov	r3, r1
 800ab02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	32b0      	adds	r2, #176	@ 0xb0
 800ab16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d101      	bne.n	800ab22 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ab1e:	2303      	movs	r3, #3
 800ab20:	e065      	b.n	800abee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	32b0      	adds	r2, #176	@ 0xb0
 800ab2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab30:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab32:	78fb      	ldrb	r3, [r7, #3]
 800ab34:	f003 020f 	and.w	r2, r3, #15
 800ab38:	6879      	ldr	r1, [r7, #4]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	4413      	add	r3, r2
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	440b      	add	r3, r1
 800ab44:	3318      	adds	r3, #24
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d02f      	beq.n	800abac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ab4c:	78fb      	ldrb	r3, [r7, #3]
 800ab4e:	f003 020f 	and.w	r2, r3, #15
 800ab52:	6879      	ldr	r1, [r7, #4]
 800ab54:	4613      	mov	r3, r2
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	4413      	add	r3, r2
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	440b      	add	r3, r1
 800ab5e:	3318      	adds	r3, #24
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	78fb      	ldrb	r3, [r7, #3]
 800ab64:	f003 010f 	and.w	r1, r3, #15
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	00db      	lsls	r3, r3, #3
 800ab6e:	440b      	add	r3, r1
 800ab70:	009b      	lsls	r3, r3, #2
 800ab72:	4403      	add	r3, r0
 800ab74:	331c      	adds	r3, #28
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab7c:	fb01 f303 	mul.w	r3, r1, r3
 800ab80:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d112      	bne.n	800abac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ab86:	78fb      	ldrb	r3, [r7, #3]
 800ab88:	f003 020f 	and.w	r2, r3, #15
 800ab8c:	6879      	ldr	r1, [r7, #4]
 800ab8e:	4613      	mov	r3, r2
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	4413      	add	r3, r2
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	440b      	add	r3, r1
 800ab98:	3318      	adds	r3, #24
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ab9e:	78f9      	ldrb	r1, [r7, #3]
 800aba0:	2300      	movs	r3, #0
 800aba2:	2200      	movs	r2, #0
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f002 f94c 	bl	800ce42 <USBD_LL_Transmit>
 800abaa:	e01f      	b.n	800abec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	2200      	movs	r2, #0
 800abb0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	33b0      	adds	r3, #176	@ 0xb0
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	4413      	add	r3, r2
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	691b      	ldr	r3, [r3, #16]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d010      	beq.n	800abec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	33b0      	adds	r3, #176	@ 0xb0
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	4413      	add	r3, r2
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	691b      	ldr	r3, [r3, #16]
 800abdc:	68ba      	ldr	r2, [r7, #8]
 800abde:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800abe8:	78fa      	ldrb	r2, [r7, #3]
 800abea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b084      	sub	sp, #16
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	460b      	mov	r3, r1
 800ac00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	32b0      	adds	r2, #176	@ 0xb0
 800ac0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	32b0      	adds	r2, #176	@ 0xb0
 800ac1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d101      	bne.n	800ac28 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ac24:	2303      	movs	r3, #3
 800ac26:	e01a      	b.n	800ac5e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ac28:	78fb      	ldrb	r3, [r7, #3]
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f002 f94a 	bl	800cec6 <USBD_LL_GetRxDataSize>
 800ac32:	4602      	mov	r2, r0
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	33b0      	adds	r3, #176	@ 0xb0
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ac58:	4611      	mov	r1, r2
 800ac5a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ac5c:	2300      	movs	r3, #0
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3710      	adds	r7, #16
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b084      	sub	sp, #16
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	32b0      	adds	r2, #176	@ 0xb0
 800ac78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d101      	bne.n	800ac88 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac84:	2303      	movs	r3, #3
 800ac86:	e024      	b.n	800acd2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	33b0      	adds	r3, #176	@ 0xb0
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	4413      	add	r3, r2
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d019      	beq.n	800acd0 <USBD_CDC_EP0_RxReady+0x6a>
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800aca2:	2bff      	cmp	r3, #255	@ 0xff
 800aca4:	d014      	beq.n	800acd0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	33b0      	adds	r3, #176	@ 0xb0
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	4413      	add	r3, r2
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800acbe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800acc6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	22ff      	movs	r2, #255	@ 0xff
 800accc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800acd0:	2300      	movs	r3, #0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
	...

0800acdc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b086      	sub	sp, #24
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ace4:	2182      	movs	r1, #130	@ 0x82
 800ace6:	4818      	ldr	r0, [pc, #96]	@ (800ad48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ace8:	f000 fd0f 	bl	800b70a <USBD_GetEpDesc>
 800acec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800acee:	2101      	movs	r1, #1
 800acf0:	4815      	ldr	r0, [pc, #84]	@ (800ad48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800acf2:	f000 fd0a 	bl	800b70a <USBD_GetEpDesc>
 800acf6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800acf8:	2181      	movs	r1, #129	@ 0x81
 800acfa:	4813      	ldr	r0, [pc, #76]	@ (800ad48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800acfc:	f000 fd05 	bl	800b70a <USBD_GetEpDesc>
 800ad00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d002      	beq.n	800ad0e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	2210      	movs	r2, #16
 800ad0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d006      	beq.n	800ad22 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad1c:	711a      	strb	r2, [r3, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d006      	beq.n	800ad36 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad30:	711a      	strb	r2, [r3, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2243      	movs	r2, #67	@ 0x43
 800ad3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad3c:	4b02      	ldr	r3, [pc, #8]	@ (800ad48 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3718      	adds	r7, #24
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	20000054 	.word	0x20000054

0800ad4c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad54:	2182      	movs	r1, #130	@ 0x82
 800ad56:	4818      	ldr	r0, [pc, #96]	@ (800adb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad58:	f000 fcd7 	bl	800b70a <USBD_GetEpDesc>
 800ad5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad5e:	2101      	movs	r1, #1
 800ad60:	4815      	ldr	r0, [pc, #84]	@ (800adb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad62:	f000 fcd2 	bl	800b70a <USBD_GetEpDesc>
 800ad66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad68:	2181      	movs	r1, #129	@ 0x81
 800ad6a:	4813      	ldr	r0, [pc, #76]	@ (800adb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad6c:	f000 fccd 	bl	800b70a <USBD_GetEpDesc>
 800ad70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d002      	beq.n	800ad7e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	2210      	movs	r2, #16
 800ad7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d006      	beq.n	800ad92 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	2200      	movs	r2, #0
 800ad88:	711a      	strb	r2, [r3, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f042 0202 	orr.w	r2, r2, #2
 800ad90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d006      	beq.n	800ada6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	711a      	strb	r2, [r3, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f042 0202 	orr.w	r2, r2, #2
 800ada4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2243      	movs	r2, #67	@ 0x43
 800adaa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800adac:	4b02      	ldr	r3, [pc, #8]	@ (800adb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3718      	adds	r7, #24
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	20000054 	.word	0x20000054

0800adbc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b086      	sub	sp, #24
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800adc4:	2182      	movs	r1, #130	@ 0x82
 800adc6:	4818      	ldr	r0, [pc, #96]	@ (800ae28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800adc8:	f000 fc9f 	bl	800b70a <USBD_GetEpDesc>
 800adcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800adce:	2101      	movs	r1, #1
 800add0:	4815      	ldr	r0, [pc, #84]	@ (800ae28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800add2:	f000 fc9a 	bl	800b70a <USBD_GetEpDesc>
 800add6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800add8:	2181      	movs	r1, #129	@ 0x81
 800adda:	4813      	ldr	r0, [pc, #76]	@ (800ae28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800addc:	f000 fc95 	bl	800b70a <USBD_GetEpDesc>
 800ade0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d002      	beq.n	800adee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	2210      	movs	r2, #16
 800adec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d006      	beq.n	800ae02 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800adfc:	711a      	strb	r2, [r3, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d006      	beq.n	800ae16 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae10:	711a      	strb	r2, [r3, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2243      	movs	r2, #67	@ 0x43
 800ae1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ae1c:	4b02      	ldr	r3, [pc, #8]	@ (800ae28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3718      	adds	r7, #24
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	20000054 	.word	0x20000054

0800ae2c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	220a      	movs	r2, #10
 800ae38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ae3a:	4b03      	ldr	r3, [pc, #12]	@ (800ae48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	370c      	adds	r7, #12
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr
 800ae48:	20000010 	.word	0x20000010

0800ae4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d101      	bne.n	800ae60 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ae5c:	2303      	movs	r3, #3
 800ae5e:	e009      	b.n	800ae74 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	33b0      	adds	r3, #176	@ 0xb0
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	4413      	add	r3, r2
 800ae6e:	683a      	ldr	r2, [r7, #0]
 800ae70:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b087      	sub	sp, #28
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	32b0      	adds	r2, #176	@ 0xb0
 800ae96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae9a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d101      	bne.n	800aea6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800aea2:	2303      	movs	r3, #3
 800aea4:	e008      	b.n	800aeb8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800aeb6:	2300      	movs	r3, #0
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	371c      	adds	r7, #28
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	32b0      	adds	r2, #176	@ 0xb0
 800aed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aedc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d101      	bne.n	800aee8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800aee4:	2303      	movs	r3, #3
 800aee6:	e004      	b.n	800aef2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	683a      	ldr	r2, [r7, #0]
 800aeec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3714      	adds	r7, #20
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr
	...

0800af00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	32b0      	adds	r2, #176	@ 0xb0
 800af12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af16:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	32b0      	adds	r2, #176	@ 0xb0
 800af22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d101      	bne.n	800af2e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800af2a:	2303      	movs	r3, #3
 800af2c:	e018      	b.n	800af60 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	7c1b      	ldrb	r3, [r3, #16]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d10a      	bne.n	800af4c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af36:	4b0c      	ldr	r3, [pc, #48]	@ (800af68 <USBD_CDC_ReceivePacket+0x68>)
 800af38:	7819      	ldrb	r1, [r3, #0]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f001 ff9d 	bl	800ce84 <USBD_LL_PrepareReceive>
 800af4a:	e008      	b.n	800af5e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af4c:	4b06      	ldr	r3, [pc, #24]	@ (800af68 <USBD_CDC_ReceivePacket+0x68>)
 800af4e:	7819      	ldrb	r1, [r3, #0]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af56:	2340      	movs	r3, #64	@ 0x40
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f001 ff93 	bl	800ce84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	3710      	adds	r7, #16
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}
 800af68:	20000098 	.word	0x20000098

0800af6c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b086      	sub	sp, #24
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	4613      	mov	r3, r2
 800af78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d101      	bne.n	800af84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800af80:	2303      	movs	r3, #3
 800af82:	e01f      	b.n	800afc4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2200      	movs	r2, #0
 800af88:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2200      	movs	r2, #0
 800af90:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2200      	movs	r2, #0
 800af98:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d003      	beq.n	800afaa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	68ba      	ldr	r2, [r7, #8]
 800afa6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2201      	movs	r2, #1
 800afae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	79fa      	ldrb	r2, [r7, #7]
 800afb6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f001 fe0d 	bl	800cbd8 <USBD_LL_Init>
 800afbe:	4603      	mov	r3, r0
 800afc0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800afc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3718      	adds	r7, #24
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800afd6:	2300      	movs	r3, #0
 800afd8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d101      	bne.n	800afe4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800afe0:	2303      	movs	r3, #3
 800afe2:	e025      	b.n	800b030 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	683a      	ldr	r2, [r7, #0]
 800afe8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	32ae      	adds	r2, #174	@ 0xae
 800aff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800affa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00f      	beq.n	800b020 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	32ae      	adds	r2, #174	@ 0xae
 800b00a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b00e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b010:	f107 020e 	add.w	r2, r7, #14
 800b014:	4610      	mov	r0, r2
 800b016:	4798      	blx	r3
 800b018:	4602      	mov	r2, r0
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b026:	1c5a      	adds	r2, r3, #1
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f001 fe15 	bl	800cc70 <USBD_LL_Start>
 800b046:	4603      	mov	r3, r0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3708      	adds	r7, #8
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b058:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	370c      	adds	r7, #12
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr

0800b066 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b084      	sub	sp, #16
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
 800b06e:	460b      	mov	r3, r1
 800b070:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b072:	2300      	movs	r3, #0
 800b074:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d009      	beq.n	800b094 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	78fa      	ldrb	r2, [r7, #3]
 800b08a:	4611      	mov	r1, r2
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	4798      	blx	r3
 800b090:	4603      	mov	r3, r0
 800b092:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b094:	7bfb      	ldrb	r3, [r7, #15]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b084      	sub	sp, #16
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	78fa      	ldrb	r2, [r7, #3]
 800b0b8:	4611      	mov	r1, r2
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	4798      	blx	r3
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d001      	beq.n	800b0c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b084      	sub	sp, #16
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
 800b0da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b0e2:	6839      	ldr	r1, [r7, #0]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f001 f90c 	bl	800c302 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b106:	f003 031f 	and.w	r3, r3, #31
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	d01a      	beq.n	800b144 <USBD_LL_SetupStage+0x72>
 800b10e:	2b02      	cmp	r3, #2
 800b110:	d822      	bhi.n	800b158 <USBD_LL_SetupStage+0x86>
 800b112:	2b00      	cmp	r3, #0
 800b114:	d002      	beq.n	800b11c <USBD_LL_SetupStage+0x4a>
 800b116:	2b01      	cmp	r3, #1
 800b118:	d00a      	beq.n	800b130 <USBD_LL_SetupStage+0x5e>
 800b11a:	e01d      	b.n	800b158 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b122:	4619      	mov	r1, r3
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fb63 	bl	800b7f0 <USBD_StdDevReq>
 800b12a:	4603      	mov	r3, r0
 800b12c:	73fb      	strb	r3, [r7, #15]
      break;
 800b12e:	e020      	b.n	800b172 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b136:	4619      	mov	r1, r3
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 fbcb 	bl	800b8d4 <USBD_StdItfReq>
 800b13e:	4603      	mov	r3, r0
 800b140:	73fb      	strb	r3, [r7, #15]
      break;
 800b142:	e016      	b.n	800b172 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b14a:	4619      	mov	r1, r3
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 fc2d 	bl	800b9ac <USBD_StdEPReq>
 800b152:	4603      	mov	r3, r0
 800b154:	73fb      	strb	r3, [r7, #15]
      break;
 800b156:	e00c      	b.n	800b172 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b15e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b162:	b2db      	uxtb	r3, r3
 800b164:	4619      	mov	r1, r3
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f001 fde2 	bl	800cd30 <USBD_LL_StallEP>
 800b16c:	4603      	mov	r3, r0
 800b16e:	73fb      	strb	r3, [r7, #15]
      break;
 800b170:	bf00      	nop
  }

  return ret;
 800b172:	7bfb      	ldrb	r3, [r7, #15]
}
 800b174:	4618      	mov	r0, r3
 800b176:	3710      	adds	r7, #16
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b086      	sub	sp, #24
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	460b      	mov	r3, r1
 800b186:	607a      	str	r2, [r7, #4]
 800b188:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b18a:	2300      	movs	r3, #0
 800b18c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b18e:	7afb      	ldrb	r3, [r7, #11]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d16e      	bne.n	800b272 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b19a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b1a2:	2b03      	cmp	r3, #3
 800b1a4:	f040 8098 	bne.w	800b2d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	689a      	ldr	r2, [r3, #8]
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d913      	bls.n	800b1dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	689a      	ldr	r2, [r3, #8]
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	1ad2      	subs	r2, r2, r3
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	68da      	ldr	r2, [r3, #12]
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	bf28      	it	cs
 800b1ce:	4613      	movcs	r3, r2
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	6879      	ldr	r1, [r7, #4]
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f001 f994 	bl	800c502 <USBD_CtlContinueRx>
 800b1da:	e07d      	b.n	800b2d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b1e2:	f003 031f 	and.w	r3, r3, #31
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	d014      	beq.n	800b214 <USBD_LL_DataOutStage+0x98>
 800b1ea:	2b02      	cmp	r3, #2
 800b1ec:	d81d      	bhi.n	800b22a <USBD_LL_DataOutStage+0xae>
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d002      	beq.n	800b1f8 <USBD_LL_DataOutStage+0x7c>
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d003      	beq.n	800b1fe <USBD_LL_DataOutStage+0x82>
 800b1f6:	e018      	b.n	800b22a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	75bb      	strb	r3, [r7, #22]
            break;
 800b1fc:	e018      	b.n	800b230 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b204:	b2db      	uxtb	r3, r3
 800b206:	4619      	mov	r1, r3
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f000 fa64 	bl	800b6d6 <USBD_CoreFindIF>
 800b20e:	4603      	mov	r3, r0
 800b210:	75bb      	strb	r3, [r7, #22]
            break;
 800b212:	e00d      	b.n	800b230 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	4619      	mov	r1, r3
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f000 fa66 	bl	800b6f0 <USBD_CoreFindEP>
 800b224:	4603      	mov	r3, r0
 800b226:	75bb      	strb	r3, [r7, #22]
            break;
 800b228:	e002      	b.n	800b230 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b22a:	2300      	movs	r3, #0
 800b22c:	75bb      	strb	r3, [r7, #22]
            break;
 800b22e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b230:	7dbb      	ldrb	r3, [r7, #22]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d119      	bne.n	800b26a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	2b03      	cmp	r3, #3
 800b240:	d113      	bne.n	800b26a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b242:	7dba      	ldrb	r2, [r7, #22]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	32ae      	adds	r2, #174	@ 0xae
 800b248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b24c:	691b      	ldr	r3, [r3, #16]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d00b      	beq.n	800b26a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b252:	7dba      	ldrb	r2, [r7, #22]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b25a:	7dba      	ldrb	r2, [r7, #22]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	32ae      	adds	r2, #174	@ 0xae
 800b260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b264:	691b      	ldr	r3, [r3, #16]
 800b266:	68f8      	ldr	r0, [r7, #12]
 800b268:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	f001 f95a 	bl	800c524 <USBD_CtlSendStatus>
 800b270:	e032      	b.n	800b2d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b272:	7afb      	ldrb	r3, [r7, #11]
 800b274:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	4619      	mov	r1, r3
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f000 fa37 	bl	800b6f0 <USBD_CoreFindEP>
 800b282:	4603      	mov	r3, r0
 800b284:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b286:	7dbb      	ldrb	r3, [r7, #22]
 800b288:	2bff      	cmp	r3, #255	@ 0xff
 800b28a:	d025      	beq.n	800b2d8 <USBD_LL_DataOutStage+0x15c>
 800b28c:	7dbb      	ldrb	r3, [r7, #22]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d122      	bne.n	800b2d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	2b03      	cmp	r3, #3
 800b29c:	d117      	bne.n	800b2ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b29e:	7dba      	ldrb	r2, [r7, #22]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	32ae      	adds	r2, #174	@ 0xae
 800b2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a8:	699b      	ldr	r3, [r3, #24]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00f      	beq.n	800b2ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b2ae:	7dba      	ldrb	r2, [r7, #22]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b2b6:	7dba      	ldrb	r2, [r7, #22]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	32ae      	adds	r2, #174	@ 0xae
 800b2bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c0:	699b      	ldr	r3, [r3, #24]
 800b2c2:	7afa      	ldrb	r2, [r7, #11]
 800b2c4:	4611      	mov	r1, r2
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	4798      	blx	r3
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b2ce:	7dfb      	ldrb	r3, [r7, #23]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d001      	beq.n	800b2d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b2d4:	7dfb      	ldrb	r3, [r7, #23]
 800b2d6:	e000      	b.n	800b2da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b2d8:	2300      	movs	r3, #0
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3718      	adds	r7, #24
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b2e2:	b580      	push	{r7, lr}
 800b2e4:	b086      	sub	sp, #24
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	60f8      	str	r0, [r7, #12]
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	607a      	str	r2, [r7, #4]
 800b2ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b2f0:	7afb      	ldrb	r3, [r7, #11]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d16f      	bne.n	800b3d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	3314      	adds	r3, #20
 800b2fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b302:	2b02      	cmp	r3, #2
 800b304:	d15a      	bne.n	800b3bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	689a      	ldr	r2, [r3, #8]
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d914      	bls.n	800b33c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	689a      	ldr	r2, [r3, #8]
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	1ad2      	subs	r2, r2, r3
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	461a      	mov	r2, r3
 800b326:	6879      	ldr	r1, [r7, #4]
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f001 f8bc 	bl	800c4a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b32e:	2300      	movs	r3, #0
 800b330:	2200      	movs	r2, #0
 800b332:	2100      	movs	r1, #0
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f001 fda5 	bl	800ce84 <USBD_LL_PrepareReceive>
 800b33a:	e03f      	b.n	800b3bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	68da      	ldr	r2, [r3, #12]
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	429a      	cmp	r2, r3
 800b346:	d11c      	bne.n	800b382 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	685a      	ldr	r2, [r3, #4]
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b350:	429a      	cmp	r2, r3
 800b352:	d316      	bcc.n	800b382 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	685a      	ldr	r2, [r3, #4]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b35e:	429a      	cmp	r2, r3
 800b360:	d20f      	bcs.n	800b382 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b362:	2200      	movs	r2, #0
 800b364:	2100      	movs	r1, #0
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f001 f89d 	bl	800c4a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b374:	2300      	movs	r3, #0
 800b376:	2200      	movs	r2, #0
 800b378:	2100      	movs	r1, #0
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	f001 fd82 	bl	800ce84 <USBD_LL_PrepareReceive>
 800b380:	e01c      	b.n	800b3bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	2b03      	cmp	r3, #3
 800b38c:	d10f      	bne.n	800b3ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d009      	beq.n	800b3ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2200      	movs	r2, #0
 800b39e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3a8:	68db      	ldr	r3, [r3, #12]
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3ae:	2180      	movs	r1, #128	@ 0x80
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f001 fcbd 	bl	800cd30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f001 f8c7 	bl	800c54a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d03a      	beq.n	800b43c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f7ff fe42 	bl	800b050 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b3d4:	e032      	b.n	800b43c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b3d6:	7afb      	ldrb	r3, [r7, #11]
 800b3d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	4619      	mov	r1, r3
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f000 f985 	bl	800b6f0 <USBD_CoreFindEP>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3ea:	7dfb      	ldrb	r3, [r7, #23]
 800b3ec:	2bff      	cmp	r3, #255	@ 0xff
 800b3ee:	d025      	beq.n	800b43c <USBD_LL_DataInStage+0x15a>
 800b3f0:	7dfb      	ldrb	r3, [r7, #23]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d122      	bne.n	800b43c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	2b03      	cmp	r3, #3
 800b400:	d11c      	bne.n	800b43c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b402:	7dfa      	ldrb	r2, [r7, #23]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	32ae      	adds	r2, #174	@ 0xae
 800b408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b40c:	695b      	ldr	r3, [r3, #20]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d014      	beq.n	800b43c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b412:	7dfa      	ldrb	r2, [r7, #23]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b41a:	7dfa      	ldrb	r2, [r7, #23]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	32ae      	adds	r2, #174	@ 0xae
 800b420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b424:	695b      	ldr	r3, [r3, #20]
 800b426:	7afa      	ldrb	r2, [r7, #11]
 800b428:	4611      	mov	r1, r2
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	4798      	blx	r3
 800b42e:	4603      	mov	r3, r0
 800b430:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b432:	7dbb      	ldrb	r3, [r7, #22]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d001      	beq.n	800b43c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b438:	7dbb      	ldrb	r3, [r7, #22]
 800b43a:	e000      	b.n	800b43e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b43c:	2300      	movs	r3, #0
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3718      	adds	r7, #24
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}

0800b446 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b446:	b580      	push	{r7, lr}
 800b448:	b084      	sub	sp, #16
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b44e:	2300      	movs	r3, #0
 800b450:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2201      	movs	r2, #1
 800b456:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2200      	movs	r2, #0
 800b45e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d014      	beq.n	800b4ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00e      	beq.n	800b4ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	6852      	ldr	r2, [r2, #4]
 800b49a:	b2d2      	uxtb	r2, r2
 800b49c:	4611      	mov	r1, r2
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	4798      	blx	r3
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d001      	beq.n	800b4ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b4a8:	2303      	movs	r3, #3
 800b4aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4ac:	2340      	movs	r3, #64	@ 0x40
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	2100      	movs	r1, #0
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f001 fbf7 	bl	800cca6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2240      	movs	r2, #64	@ 0x40
 800b4c4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4c8:	2340      	movs	r3, #64	@ 0x40
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	2180      	movs	r1, #128	@ 0x80
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f001 fbe9 	bl	800cca6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2240      	movs	r2, #64	@ 0x40
 800b4de:	621a      	str	r2, [r3, #32]

  return ret;
 800b4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b4ea:	b480      	push	{r7}
 800b4ec:	b083      	sub	sp, #12
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	78fa      	ldrb	r2, [r7, #3]
 800b4fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	370c      	adds	r7, #12
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr

0800b50a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b50a:	b480      	push	{r7}
 800b50c:	b083      	sub	sp, #12
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	2b04      	cmp	r3, #4
 800b51c:	d006      	beq.n	800b52c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b524:	b2da      	uxtb	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2204      	movs	r2, #4
 800b530:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b534:	2300      	movs	r3, #0
}
 800b536:	4618      	mov	r0, r3
 800b538:	370c      	adds	r7, #12
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr

0800b542 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b542:	b480      	push	{r7}
 800b544:	b083      	sub	sp, #12
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b550:	b2db      	uxtb	r3, r3
 800b552:	2b04      	cmp	r3, #4
 800b554:	d106      	bne.n	800b564 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b55c:	b2da      	uxtb	r2, r3
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	370c      	adds	r7, #12
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr

0800b572 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b572:	b580      	push	{r7, lr}
 800b574:	b082      	sub	sp, #8
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b580:	b2db      	uxtb	r3, r3
 800b582:	2b03      	cmp	r3, #3
 800b584:	d110      	bne.n	800b5a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00b      	beq.n	800b5a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b596:	69db      	ldr	r3, [r3, #28]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d005      	beq.n	800b5a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5a2:	69db      	ldr	r3, [r3, #28]
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b5a8:	2300      	movs	r3, #0
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3708      	adds	r7, #8
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b082      	sub	sp, #8
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	32ae      	adds	r2, #174	@ 0xae
 800b5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d101      	bne.n	800b5d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b5d0:	2303      	movs	r3, #3
 800b5d2:	e01c      	b.n	800b60e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	2b03      	cmp	r3, #3
 800b5de:	d115      	bne.n	800b60c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	32ae      	adds	r2, #174	@ 0xae
 800b5ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ee:	6a1b      	ldr	r3, [r3, #32]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00b      	beq.n	800b60c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	32ae      	adds	r2, #174	@ 0xae
 800b5fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b602:	6a1b      	ldr	r3, [r3, #32]
 800b604:	78fa      	ldrb	r2, [r7, #3]
 800b606:	4611      	mov	r1, r2
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b60c:	2300      	movs	r3, #0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b082      	sub	sp, #8
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
 800b61e:	460b      	mov	r3, r1
 800b620:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	32ae      	adds	r2, #174	@ 0xae
 800b62c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d101      	bne.n	800b638 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b634:	2303      	movs	r3, #3
 800b636:	e01c      	b.n	800b672 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	2b03      	cmp	r3, #3
 800b642:	d115      	bne.n	800b670 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	32ae      	adds	r2, #174	@ 0xae
 800b64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b654:	2b00      	cmp	r3, #0
 800b656:	d00b      	beq.n	800b670 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	32ae      	adds	r2, #174	@ 0xae
 800b662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b668:	78fa      	ldrb	r2, [r7, #3]
 800b66a:	4611      	mov	r1, r2
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b670:	2300      	movs	r3, #0
}
 800b672:	4618      	mov	r0, r3
 800b674:	3708      	adds	r7, #8
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}

0800b67a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b67a:	b480      	push	{r7}
 800b67c:	b083      	sub	sp, #12
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	370c      	adds	r7, #12
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b698:	2300      	movs	r3, #0
 800b69a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00e      	beq.n	800b6cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	6852      	ldr	r2, [r2, #4]
 800b6ba:	b2d2      	uxtb	r2, r2
 800b6bc:	4611      	mov	r1, r2
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	4798      	blx	r3
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d001      	beq.n	800b6cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b6c8:	2303      	movs	r3, #3
 800b6ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b6d6:	b480      	push	{r7}
 800b6d8:	b083      	sub	sp, #12
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	460b      	mov	r3, r1
 800b6e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b6e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b6fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	370c      	adds	r7, #12
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b086      	sub	sp, #24
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	460b      	mov	r3, r1
 800b714:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b71e:	2300      	movs	r3, #0
 800b720:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	885b      	ldrh	r3, [r3, #2]
 800b726:	b29b      	uxth	r3, r3
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	7812      	ldrb	r2, [r2, #0]
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d91f      	bls.n	800b770 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	781b      	ldrb	r3, [r3, #0]
 800b734:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b736:	e013      	b.n	800b760 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b738:	f107 030a 	add.w	r3, r7, #10
 800b73c:	4619      	mov	r1, r3
 800b73e:	6978      	ldr	r0, [r7, #20]
 800b740:	f000 f81b 	bl	800b77a <USBD_GetNextDesc>
 800b744:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	785b      	ldrb	r3, [r3, #1]
 800b74a:	2b05      	cmp	r3, #5
 800b74c:	d108      	bne.n	800b760 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	789b      	ldrb	r3, [r3, #2]
 800b756:	78fa      	ldrb	r2, [r7, #3]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d008      	beq.n	800b76e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b75c:	2300      	movs	r3, #0
 800b75e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	885b      	ldrh	r3, [r3, #2]
 800b764:	b29a      	uxth	r2, r3
 800b766:	897b      	ldrh	r3, [r7, #10]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d8e5      	bhi.n	800b738 <USBD_GetEpDesc+0x2e>
 800b76c:	e000      	b.n	800b770 <USBD_GetEpDesc+0x66>
          break;
 800b76e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b770:	693b      	ldr	r3, [r7, #16]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3718      	adds	r7, #24
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b77a:	b480      	push	{r7}
 800b77c:	b085      	sub	sp, #20
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
 800b782:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	881b      	ldrh	r3, [r3, #0]
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	7812      	ldrb	r2, [r2, #0]
 800b790:	4413      	add	r3, r2
 800b792:	b29a      	uxth	r2, r3
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	461a      	mov	r2, r3
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3714      	adds	r7, #20
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr

0800b7b2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b7b2:	b480      	push	{r7}
 800b7b4:	b087      	sub	sp, #28
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b7d0:	8a3b      	ldrh	r3, [r7, #16]
 800b7d2:	021b      	lsls	r3, r3, #8
 800b7d4:	b21a      	sxth	r2, r3
 800b7d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	b21b      	sxth	r3, r3
 800b7de:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b7e0:	89fb      	ldrh	r3, [r7, #14]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	371c      	adds	r7, #28
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
	...

0800b7f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b806:	2b40      	cmp	r3, #64	@ 0x40
 800b808:	d005      	beq.n	800b816 <USBD_StdDevReq+0x26>
 800b80a:	2b40      	cmp	r3, #64	@ 0x40
 800b80c:	d857      	bhi.n	800b8be <USBD_StdDevReq+0xce>
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d00f      	beq.n	800b832 <USBD_StdDevReq+0x42>
 800b812:	2b20      	cmp	r3, #32
 800b814:	d153      	bne.n	800b8be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	32ae      	adds	r2, #174	@ 0xae
 800b820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	6839      	ldr	r1, [r7, #0]
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	4798      	blx	r3
 800b82c:	4603      	mov	r3, r0
 800b82e:	73fb      	strb	r3, [r7, #15]
      break;
 800b830:	e04a      	b.n	800b8c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	785b      	ldrb	r3, [r3, #1]
 800b836:	2b09      	cmp	r3, #9
 800b838:	d83b      	bhi.n	800b8b2 <USBD_StdDevReq+0xc2>
 800b83a:	a201      	add	r2, pc, #4	@ (adr r2, 800b840 <USBD_StdDevReq+0x50>)
 800b83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b840:	0800b895 	.word	0x0800b895
 800b844:	0800b8a9 	.word	0x0800b8a9
 800b848:	0800b8b3 	.word	0x0800b8b3
 800b84c:	0800b89f 	.word	0x0800b89f
 800b850:	0800b8b3 	.word	0x0800b8b3
 800b854:	0800b873 	.word	0x0800b873
 800b858:	0800b869 	.word	0x0800b869
 800b85c:	0800b8b3 	.word	0x0800b8b3
 800b860:	0800b88b 	.word	0x0800b88b
 800b864:	0800b87d 	.word	0x0800b87d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b868:	6839      	ldr	r1, [r7, #0]
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 fa3c 	bl	800bce8 <USBD_GetDescriptor>
          break;
 800b870:	e024      	b.n	800b8bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b872:	6839      	ldr	r1, [r7, #0]
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 fba1 	bl	800bfbc <USBD_SetAddress>
          break;
 800b87a:	e01f      	b.n	800b8bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b87c:	6839      	ldr	r1, [r7, #0]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 fbe0 	bl	800c044 <USBD_SetConfig>
 800b884:	4603      	mov	r3, r0
 800b886:	73fb      	strb	r3, [r7, #15]
          break;
 800b888:	e018      	b.n	800b8bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b88a:	6839      	ldr	r1, [r7, #0]
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 fc83 	bl	800c198 <USBD_GetConfig>
          break;
 800b892:	e013      	b.n	800b8bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b894:	6839      	ldr	r1, [r7, #0]
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 fcb4 	bl	800c204 <USBD_GetStatus>
          break;
 800b89c:	e00e      	b.n	800b8bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b89e:	6839      	ldr	r1, [r7, #0]
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 fce3 	bl	800c26c <USBD_SetFeature>
          break;
 800b8a6:	e009      	b.n	800b8bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fd07 	bl	800c2be <USBD_ClrFeature>
          break;
 800b8b0:	e004      	b.n	800b8bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b8b2:	6839      	ldr	r1, [r7, #0]
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 fd5e 	bl	800c376 <USBD_CtlError>
          break;
 800b8ba:	bf00      	nop
      }
      break;
 800b8bc:	e004      	b.n	800b8c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b8be:	6839      	ldr	r1, [r7, #0]
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 fd58 	bl	800c376 <USBD_CtlError>
      break;
 800b8c6:	bf00      	nop
  }

  return ret;
 800b8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop

0800b8d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b8ea:	2b40      	cmp	r3, #64	@ 0x40
 800b8ec:	d005      	beq.n	800b8fa <USBD_StdItfReq+0x26>
 800b8ee:	2b40      	cmp	r3, #64	@ 0x40
 800b8f0:	d852      	bhi.n	800b998 <USBD_StdItfReq+0xc4>
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d001      	beq.n	800b8fa <USBD_StdItfReq+0x26>
 800b8f6:	2b20      	cmp	r3, #32
 800b8f8:	d14e      	bne.n	800b998 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b900:	b2db      	uxtb	r3, r3
 800b902:	3b01      	subs	r3, #1
 800b904:	2b02      	cmp	r3, #2
 800b906:	d840      	bhi.n	800b98a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	889b      	ldrh	r3, [r3, #4]
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d836      	bhi.n	800b980 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	889b      	ldrh	r3, [r3, #4]
 800b916:	b2db      	uxtb	r3, r3
 800b918:	4619      	mov	r1, r3
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f7ff fedb 	bl	800b6d6 <USBD_CoreFindIF>
 800b920:	4603      	mov	r3, r0
 800b922:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b924:	7bbb      	ldrb	r3, [r7, #14]
 800b926:	2bff      	cmp	r3, #255	@ 0xff
 800b928:	d01d      	beq.n	800b966 <USBD_StdItfReq+0x92>
 800b92a:	7bbb      	ldrb	r3, [r7, #14]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d11a      	bne.n	800b966 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b930:	7bba      	ldrb	r2, [r7, #14]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	32ae      	adds	r2, #174	@ 0xae
 800b936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00f      	beq.n	800b960 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b940:	7bba      	ldrb	r2, [r7, #14]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b948:	7bba      	ldrb	r2, [r7, #14]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	32ae      	adds	r2, #174	@ 0xae
 800b94e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b952:	689b      	ldr	r3, [r3, #8]
 800b954:	6839      	ldr	r1, [r7, #0]
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	4798      	blx	r3
 800b95a:	4603      	mov	r3, r0
 800b95c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b95e:	e004      	b.n	800b96a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b960:	2303      	movs	r3, #3
 800b962:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b964:	e001      	b.n	800b96a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b966:	2303      	movs	r3, #3
 800b968:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	88db      	ldrh	r3, [r3, #6]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d110      	bne.n	800b994 <USBD_StdItfReq+0xc0>
 800b972:	7bfb      	ldrb	r3, [r7, #15]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d10d      	bne.n	800b994 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 fdd3 	bl	800c524 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b97e:	e009      	b.n	800b994 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b980:	6839      	ldr	r1, [r7, #0]
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fcf7 	bl	800c376 <USBD_CtlError>
          break;
 800b988:	e004      	b.n	800b994 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b98a:	6839      	ldr	r1, [r7, #0]
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 fcf2 	bl	800c376 <USBD_CtlError>
          break;
 800b992:	e000      	b.n	800b996 <USBD_StdItfReq+0xc2>
          break;
 800b994:	bf00      	nop
      }
      break;
 800b996:	e004      	b.n	800b9a2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b998:	6839      	ldr	r1, [r7, #0]
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 fceb 	bl	800c376 <USBD_CtlError>
      break;
 800b9a0:	bf00      	nop
  }

  return ret;
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3710      	adds	r7, #16
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	889b      	ldrh	r3, [r3, #4]
 800b9be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b9c8:	2b40      	cmp	r3, #64	@ 0x40
 800b9ca:	d007      	beq.n	800b9dc <USBD_StdEPReq+0x30>
 800b9cc:	2b40      	cmp	r3, #64	@ 0x40
 800b9ce:	f200 817f 	bhi.w	800bcd0 <USBD_StdEPReq+0x324>
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d02a      	beq.n	800ba2c <USBD_StdEPReq+0x80>
 800b9d6:	2b20      	cmp	r3, #32
 800b9d8:	f040 817a 	bne.w	800bcd0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
 800b9de:	4619      	mov	r1, r3
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7ff fe85 	bl	800b6f0 <USBD_CoreFindEP>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9ea:	7b7b      	ldrb	r3, [r7, #13]
 800b9ec:	2bff      	cmp	r3, #255	@ 0xff
 800b9ee:	f000 8174 	beq.w	800bcda <USBD_StdEPReq+0x32e>
 800b9f2:	7b7b      	ldrb	r3, [r7, #13]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f040 8170 	bne.w	800bcda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b9fa:	7b7a      	ldrb	r2, [r7, #13]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ba02:	7b7a      	ldrb	r2, [r7, #13]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	32ae      	adds	r2, #174	@ 0xae
 800ba08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	f000 8163 	beq.w	800bcda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ba14:	7b7a      	ldrb	r2, [r7, #13]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	32ae      	adds	r2, #174	@ 0xae
 800ba1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	6839      	ldr	r1, [r7, #0]
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	4798      	blx	r3
 800ba26:	4603      	mov	r3, r0
 800ba28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ba2a:	e156      	b.n	800bcda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	785b      	ldrb	r3, [r3, #1]
 800ba30:	2b03      	cmp	r3, #3
 800ba32:	d008      	beq.n	800ba46 <USBD_StdEPReq+0x9a>
 800ba34:	2b03      	cmp	r3, #3
 800ba36:	f300 8145 	bgt.w	800bcc4 <USBD_StdEPReq+0x318>
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	f000 809b 	beq.w	800bb76 <USBD_StdEPReq+0x1ca>
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d03c      	beq.n	800babe <USBD_StdEPReq+0x112>
 800ba44:	e13e      	b.n	800bcc4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	2b02      	cmp	r3, #2
 800ba50:	d002      	beq.n	800ba58 <USBD_StdEPReq+0xac>
 800ba52:	2b03      	cmp	r3, #3
 800ba54:	d016      	beq.n	800ba84 <USBD_StdEPReq+0xd8>
 800ba56:	e02c      	b.n	800bab2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba58:	7bbb      	ldrb	r3, [r7, #14]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00d      	beq.n	800ba7a <USBD_StdEPReq+0xce>
 800ba5e:	7bbb      	ldrb	r3, [r7, #14]
 800ba60:	2b80      	cmp	r3, #128	@ 0x80
 800ba62:	d00a      	beq.n	800ba7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba64:	7bbb      	ldrb	r3, [r7, #14]
 800ba66:	4619      	mov	r1, r3
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f001 f961 	bl	800cd30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba6e:	2180      	movs	r1, #128	@ 0x80
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f001 f95d 	bl	800cd30 <USBD_LL_StallEP>
 800ba76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba78:	e020      	b.n	800babc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ba7a:	6839      	ldr	r1, [r7, #0]
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 fc7a 	bl	800c376 <USBD_CtlError>
              break;
 800ba82:	e01b      	b.n	800babc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	885b      	ldrh	r3, [r3, #2]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d10e      	bne.n	800baaa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ba8c:	7bbb      	ldrb	r3, [r7, #14]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d00b      	beq.n	800baaa <USBD_StdEPReq+0xfe>
 800ba92:	7bbb      	ldrb	r3, [r7, #14]
 800ba94:	2b80      	cmp	r3, #128	@ 0x80
 800ba96:	d008      	beq.n	800baaa <USBD_StdEPReq+0xfe>
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	88db      	ldrh	r3, [r3, #6]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d104      	bne.n	800baaa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800baa0:	7bbb      	ldrb	r3, [r7, #14]
 800baa2:	4619      	mov	r1, r3
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f001 f943 	bl	800cd30 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 fd3a 	bl	800c524 <USBD_CtlSendStatus>

              break;
 800bab0:	e004      	b.n	800babc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bab2:	6839      	ldr	r1, [r7, #0]
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 fc5e 	bl	800c376 <USBD_CtlError>
              break;
 800baba:	bf00      	nop
          }
          break;
 800babc:	e107      	b.n	800bcce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	2b02      	cmp	r3, #2
 800bac8:	d002      	beq.n	800bad0 <USBD_StdEPReq+0x124>
 800baca:	2b03      	cmp	r3, #3
 800bacc:	d016      	beq.n	800bafc <USBD_StdEPReq+0x150>
 800bace:	e04b      	b.n	800bb68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bad0:	7bbb      	ldrb	r3, [r7, #14]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00d      	beq.n	800baf2 <USBD_StdEPReq+0x146>
 800bad6:	7bbb      	ldrb	r3, [r7, #14]
 800bad8:	2b80      	cmp	r3, #128	@ 0x80
 800bada:	d00a      	beq.n	800baf2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800badc:	7bbb      	ldrb	r3, [r7, #14]
 800bade:	4619      	mov	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f001 f925 	bl	800cd30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bae6:	2180      	movs	r1, #128	@ 0x80
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f001 f921 	bl	800cd30 <USBD_LL_StallEP>
 800baee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800baf0:	e040      	b.n	800bb74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800baf2:	6839      	ldr	r1, [r7, #0]
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 fc3e 	bl	800c376 <USBD_CtlError>
              break;
 800bafa:	e03b      	b.n	800bb74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	885b      	ldrh	r3, [r3, #2]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d136      	bne.n	800bb72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bb04:	7bbb      	ldrb	r3, [r7, #14]
 800bb06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d004      	beq.n	800bb18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bb0e:	7bbb      	ldrb	r3, [r7, #14]
 800bb10:	4619      	mov	r1, r3
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f001 f92b 	bl	800cd6e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 fd03 	bl	800c524 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bb1e:	7bbb      	ldrb	r3, [r7, #14]
 800bb20:	4619      	mov	r1, r3
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7ff fde4 	bl	800b6f0 <USBD_CoreFindEP>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb2c:	7b7b      	ldrb	r3, [r7, #13]
 800bb2e:	2bff      	cmp	r3, #255	@ 0xff
 800bb30:	d01f      	beq.n	800bb72 <USBD_StdEPReq+0x1c6>
 800bb32:	7b7b      	ldrb	r3, [r7, #13]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d11c      	bne.n	800bb72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bb38:	7b7a      	ldrb	r2, [r7, #13]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bb40:	7b7a      	ldrb	r2, [r7, #13]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	32ae      	adds	r2, #174	@ 0xae
 800bb46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d010      	beq.n	800bb72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bb50:	7b7a      	ldrb	r2, [r7, #13]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	32ae      	adds	r2, #174	@ 0xae
 800bb56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb5a:	689b      	ldr	r3, [r3, #8]
 800bb5c:	6839      	ldr	r1, [r7, #0]
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	4798      	blx	r3
 800bb62:	4603      	mov	r3, r0
 800bb64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bb66:	e004      	b.n	800bb72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bb68:	6839      	ldr	r1, [r7, #0]
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 fc03 	bl	800c376 <USBD_CtlError>
              break;
 800bb70:	e000      	b.n	800bb74 <USBD_StdEPReq+0x1c8>
              break;
 800bb72:	bf00      	nop
          }
          break;
 800bb74:	e0ab      	b.n	800bcce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	2b02      	cmp	r3, #2
 800bb80:	d002      	beq.n	800bb88 <USBD_StdEPReq+0x1dc>
 800bb82:	2b03      	cmp	r3, #3
 800bb84:	d032      	beq.n	800bbec <USBD_StdEPReq+0x240>
 800bb86:	e097      	b.n	800bcb8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb88:	7bbb      	ldrb	r3, [r7, #14]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d007      	beq.n	800bb9e <USBD_StdEPReq+0x1f2>
 800bb8e:	7bbb      	ldrb	r3, [r7, #14]
 800bb90:	2b80      	cmp	r3, #128	@ 0x80
 800bb92:	d004      	beq.n	800bb9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bb94:	6839      	ldr	r1, [r7, #0]
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fbed 	bl	800c376 <USBD_CtlError>
                break;
 800bb9c:	e091      	b.n	800bcc2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	da0b      	bge.n	800bbbe <USBD_StdEPReq+0x212>
 800bba6:	7bbb      	ldrb	r3, [r7, #14]
 800bba8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bbac:	4613      	mov	r3, r2
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	4413      	add	r3, r2
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	3310      	adds	r3, #16
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	4413      	add	r3, r2
 800bbba:	3304      	adds	r3, #4
 800bbbc:	e00b      	b.n	800bbd6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bbbe:	7bbb      	ldrb	r3, [r7, #14]
 800bbc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	4413      	add	r3, r2
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	3304      	adds	r3, #4
 800bbd6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	2202      	movs	r2, #2
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 fc43 	bl	800c470 <USBD_CtlSendData>
              break;
 800bbea:	e06a      	b.n	800bcc2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bbec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	da11      	bge.n	800bc18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bbf4:	7bbb      	ldrb	r3, [r7, #14]
 800bbf6:	f003 020f 	and.w	r2, r3, #15
 800bbfa:	6879      	ldr	r1, [r7, #4]
 800bbfc:	4613      	mov	r3, r2
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	4413      	add	r3, r2
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	440b      	add	r3, r1
 800bc06:	3324      	adds	r3, #36	@ 0x24
 800bc08:	881b      	ldrh	r3, [r3, #0]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d117      	bne.n	800bc3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc0e:	6839      	ldr	r1, [r7, #0]
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 fbb0 	bl	800c376 <USBD_CtlError>
                  break;
 800bc16:	e054      	b.n	800bcc2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bc18:	7bbb      	ldrb	r3, [r7, #14]
 800bc1a:	f003 020f 	and.w	r2, r3, #15
 800bc1e:	6879      	ldr	r1, [r7, #4]
 800bc20:	4613      	mov	r3, r2
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	4413      	add	r3, r2
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	440b      	add	r3, r1
 800bc2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bc2e:	881b      	ldrh	r3, [r3, #0]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d104      	bne.n	800bc3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc34:	6839      	ldr	r1, [r7, #0]
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 fb9d 	bl	800c376 <USBD_CtlError>
                  break;
 800bc3c:	e041      	b.n	800bcc2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	da0b      	bge.n	800bc5e <USBD_StdEPReq+0x2b2>
 800bc46:	7bbb      	ldrb	r3, [r7, #14]
 800bc48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4413      	add	r3, r2
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	3310      	adds	r3, #16
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	4413      	add	r3, r2
 800bc5a:	3304      	adds	r3, #4
 800bc5c:	e00b      	b.n	800bc76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc5e:	7bbb      	ldrb	r3, [r7, #14]
 800bc60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc64:	4613      	mov	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4413      	add	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	4413      	add	r3, r2
 800bc74:	3304      	adds	r3, #4
 800bc76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bc78:	7bbb      	ldrb	r3, [r7, #14]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d002      	beq.n	800bc84 <USBD_StdEPReq+0x2d8>
 800bc7e:	7bbb      	ldrb	r3, [r7, #14]
 800bc80:	2b80      	cmp	r3, #128	@ 0x80
 800bc82:	d103      	bne.n	800bc8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	2200      	movs	r2, #0
 800bc88:	601a      	str	r2, [r3, #0]
 800bc8a:	e00e      	b.n	800bcaa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bc8c:	7bbb      	ldrb	r3, [r7, #14]
 800bc8e:	4619      	mov	r1, r3
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f001 f88b 	bl	800cdac <USBD_LL_IsStallEP>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d003      	beq.n	800bca4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	2201      	movs	r2, #1
 800bca0:	601a      	str	r2, [r3, #0]
 800bca2:	e002      	b.n	800bcaa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	2200      	movs	r2, #0
 800bca8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	2202      	movs	r2, #2
 800bcae:	4619      	mov	r1, r3
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f000 fbdd 	bl	800c470 <USBD_CtlSendData>
              break;
 800bcb6:	e004      	b.n	800bcc2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bcb8:	6839      	ldr	r1, [r7, #0]
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f000 fb5b 	bl	800c376 <USBD_CtlError>
              break;
 800bcc0:	bf00      	nop
          }
          break;
 800bcc2:	e004      	b.n	800bcce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bcc4:	6839      	ldr	r1, [r7, #0]
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 fb55 	bl	800c376 <USBD_CtlError>
          break;
 800bccc:	bf00      	nop
      }
      break;
 800bcce:	e005      	b.n	800bcdc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bcd0:	6839      	ldr	r1, [r7, #0]
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 fb4f 	bl	800c376 <USBD_CtlError>
      break;
 800bcd8:	e000      	b.n	800bcdc <USBD_StdEPReq+0x330>
      break;
 800bcda:	bf00      	nop
  }

  return ret;
 800bcdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
	...

0800bce8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	885b      	ldrh	r3, [r3, #2]
 800bd02:	0a1b      	lsrs	r3, r3, #8
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	3b01      	subs	r3, #1
 800bd08:	2b06      	cmp	r3, #6
 800bd0a:	f200 8128 	bhi.w	800bf5e <USBD_GetDescriptor+0x276>
 800bd0e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd14 <USBD_GetDescriptor+0x2c>)
 800bd10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd14:	0800bd31 	.word	0x0800bd31
 800bd18:	0800bd49 	.word	0x0800bd49
 800bd1c:	0800bd89 	.word	0x0800bd89
 800bd20:	0800bf5f 	.word	0x0800bf5f
 800bd24:	0800bf5f 	.word	0x0800bf5f
 800bd28:	0800beff 	.word	0x0800beff
 800bd2c:	0800bf2b 	.word	0x0800bf2b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	7c12      	ldrb	r2, [r2, #16]
 800bd3c:	f107 0108 	add.w	r1, r7, #8
 800bd40:	4610      	mov	r0, r2
 800bd42:	4798      	blx	r3
 800bd44:	60f8      	str	r0, [r7, #12]
      break;
 800bd46:	e112      	b.n	800bf6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	7c1b      	ldrb	r3, [r3, #16]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10d      	bne.n	800bd6c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd58:	f107 0208 	add.w	r2, r7, #8
 800bd5c:	4610      	mov	r0, r2
 800bd5e:	4798      	blx	r3
 800bd60:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	3301      	adds	r3, #1
 800bd66:	2202      	movs	r2, #2
 800bd68:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bd6a:	e100      	b.n	800bf6e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd74:	f107 0208 	add.w	r2, r7, #8
 800bd78:	4610      	mov	r0, r2
 800bd7a:	4798      	blx	r3
 800bd7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	3301      	adds	r3, #1
 800bd82:	2202      	movs	r2, #2
 800bd84:	701a      	strb	r2, [r3, #0]
      break;
 800bd86:	e0f2      	b.n	800bf6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	885b      	ldrh	r3, [r3, #2]
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	2b05      	cmp	r3, #5
 800bd90:	f200 80ac 	bhi.w	800beec <USBD_GetDescriptor+0x204>
 800bd94:	a201      	add	r2, pc, #4	@ (adr r2, 800bd9c <USBD_GetDescriptor+0xb4>)
 800bd96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd9a:	bf00      	nop
 800bd9c:	0800bdb5 	.word	0x0800bdb5
 800bda0:	0800bde9 	.word	0x0800bde9
 800bda4:	0800be1d 	.word	0x0800be1d
 800bda8:	0800be51 	.word	0x0800be51
 800bdac:	0800be85 	.word	0x0800be85
 800bdb0:	0800beb9 	.word	0x0800beb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d00b      	beq.n	800bdd8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	7c12      	ldrb	r2, [r2, #16]
 800bdcc:	f107 0108 	add.w	r1, r7, #8
 800bdd0:	4610      	mov	r0, r2
 800bdd2:	4798      	blx	r3
 800bdd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdd6:	e091      	b.n	800befc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdd8:	6839      	ldr	r1, [r7, #0]
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 facb 	bl	800c376 <USBD_CtlError>
            err++;
 800bde0:	7afb      	ldrb	r3, [r7, #11]
 800bde2:	3301      	adds	r3, #1
 800bde4:	72fb      	strb	r3, [r7, #11]
          break;
 800bde6:	e089      	b.n	800befc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdee:	689b      	ldr	r3, [r3, #8]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d00b      	beq.n	800be0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	7c12      	ldrb	r2, [r2, #16]
 800be00:	f107 0108 	add.w	r1, r7, #8
 800be04:	4610      	mov	r0, r2
 800be06:	4798      	blx	r3
 800be08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be0a:	e077      	b.n	800befc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be0c:	6839      	ldr	r1, [r7, #0]
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 fab1 	bl	800c376 <USBD_CtlError>
            err++;
 800be14:	7afb      	ldrb	r3, [r7, #11]
 800be16:	3301      	adds	r3, #1
 800be18:	72fb      	strb	r3, [r7, #11]
          break;
 800be1a:	e06f      	b.n	800befc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d00b      	beq.n	800be40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	7c12      	ldrb	r2, [r2, #16]
 800be34:	f107 0108 	add.w	r1, r7, #8
 800be38:	4610      	mov	r0, r2
 800be3a:	4798      	blx	r3
 800be3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be3e:	e05d      	b.n	800befc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be40:	6839      	ldr	r1, [r7, #0]
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 fa97 	bl	800c376 <USBD_CtlError>
            err++;
 800be48:	7afb      	ldrb	r3, [r7, #11]
 800be4a:	3301      	adds	r3, #1
 800be4c:	72fb      	strb	r3, [r7, #11]
          break;
 800be4e:	e055      	b.n	800befc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be56:	691b      	ldr	r3, [r3, #16]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d00b      	beq.n	800be74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be62:	691b      	ldr	r3, [r3, #16]
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	7c12      	ldrb	r2, [r2, #16]
 800be68:	f107 0108 	add.w	r1, r7, #8
 800be6c:	4610      	mov	r0, r2
 800be6e:	4798      	blx	r3
 800be70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be72:	e043      	b.n	800befc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be74:	6839      	ldr	r1, [r7, #0]
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 fa7d 	bl	800c376 <USBD_CtlError>
            err++;
 800be7c:	7afb      	ldrb	r3, [r7, #11]
 800be7e:	3301      	adds	r3, #1
 800be80:	72fb      	strb	r3, [r7, #11]
          break;
 800be82:	e03b      	b.n	800befc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be8a:	695b      	ldr	r3, [r3, #20]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00b      	beq.n	800bea8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be96:	695b      	ldr	r3, [r3, #20]
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	7c12      	ldrb	r2, [r2, #16]
 800be9c:	f107 0108 	add.w	r1, r7, #8
 800bea0:	4610      	mov	r0, r2
 800bea2:	4798      	blx	r3
 800bea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bea6:	e029      	b.n	800befc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bea8:	6839      	ldr	r1, [r7, #0]
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 fa63 	bl	800c376 <USBD_CtlError>
            err++;
 800beb0:	7afb      	ldrb	r3, [r7, #11]
 800beb2:	3301      	adds	r3, #1
 800beb4:	72fb      	strb	r3, [r7, #11]
          break;
 800beb6:	e021      	b.n	800befc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bebe:	699b      	ldr	r3, [r3, #24]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00b      	beq.n	800bedc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	7c12      	ldrb	r2, [r2, #16]
 800bed0:	f107 0108 	add.w	r1, r7, #8
 800bed4:	4610      	mov	r0, r2
 800bed6:	4798      	blx	r3
 800bed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800beda:	e00f      	b.n	800befc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bedc:	6839      	ldr	r1, [r7, #0]
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 fa49 	bl	800c376 <USBD_CtlError>
            err++;
 800bee4:	7afb      	ldrb	r3, [r7, #11]
 800bee6:	3301      	adds	r3, #1
 800bee8:	72fb      	strb	r3, [r7, #11]
          break;
 800beea:	e007      	b.n	800befc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800beec:	6839      	ldr	r1, [r7, #0]
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 fa41 	bl	800c376 <USBD_CtlError>
          err++;
 800bef4:	7afb      	ldrb	r3, [r7, #11]
 800bef6:	3301      	adds	r3, #1
 800bef8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800befa:	bf00      	nop
      }
      break;
 800befc:	e037      	b.n	800bf6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	7c1b      	ldrb	r3, [r3, #16]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d109      	bne.n	800bf1a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf0e:	f107 0208 	add.w	r2, r7, #8
 800bf12:	4610      	mov	r0, r2
 800bf14:	4798      	blx	r3
 800bf16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf18:	e029      	b.n	800bf6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bf1a:	6839      	ldr	r1, [r7, #0]
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 fa2a 	bl	800c376 <USBD_CtlError>
        err++;
 800bf22:	7afb      	ldrb	r3, [r7, #11]
 800bf24:	3301      	adds	r3, #1
 800bf26:	72fb      	strb	r3, [r7, #11]
      break;
 800bf28:	e021      	b.n	800bf6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	7c1b      	ldrb	r3, [r3, #16]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d10d      	bne.n	800bf4e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf3a:	f107 0208 	add.w	r2, r7, #8
 800bf3e:	4610      	mov	r0, r2
 800bf40:	4798      	blx	r3
 800bf42:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	3301      	adds	r3, #1
 800bf48:	2207      	movs	r2, #7
 800bf4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf4c:	e00f      	b.n	800bf6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bf4e:	6839      	ldr	r1, [r7, #0]
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 fa10 	bl	800c376 <USBD_CtlError>
        err++;
 800bf56:	7afb      	ldrb	r3, [r7, #11]
 800bf58:	3301      	adds	r3, #1
 800bf5a:	72fb      	strb	r3, [r7, #11]
      break;
 800bf5c:	e007      	b.n	800bf6e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bf5e:	6839      	ldr	r1, [r7, #0]
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 fa08 	bl	800c376 <USBD_CtlError>
      err++;
 800bf66:	7afb      	ldrb	r3, [r7, #11]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	72fb      	strb	r3, [r7, #11]
      break;
 800bf6c:	bf00      	nop
  }

  if (err != 0U)
 800bf6e:	7afb      	ldrb	r3, [r7, #11]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d11e      	bne.n	800bfb2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	88db      	ldrh	r3, [r3, #6]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d016      	beq.n	800bfaa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bf7c:	893b      	ldrh	r3, [r7, #8]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d00e      	beq.n	800bfa0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	88da      	ldrh	r2, [r3, #6]
 800bf86:	893b      	ldrh	r3, [r7, #8]
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	bf28      	it	cs
 800bf8c:	4613      	movcs	r3, r2
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bf92:	893b      	ldrh	r3, [r7, #8]
 800bf94:	461a      	mov	r2, r3
 800bf96:	68f9      	ldr	r1, [r7, #12]
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 fa69 	bl	800c470 <USBD_CtlSendData>
 800bf9e:	e009      	b.n	800bfb4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bfa0:	6839      	ldr	r1, [r7, #0]
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 f9e7 	bl	800c376 <USBD_CtlError>
 800bfa8:	e004      	b.n	800bfb4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 faba 	bl	800c524 <USBD_CtlSendStatus>
 800bfb0:	e000      	b.n	800bfb4 <USBD_GetDescriptor+0x2cc>
    return;
 800bfb2:	bf00      	nop
  }
}
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop

0800bfbc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	889b      	ldrh	r3, [r3, #4]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d131      	bne.n	800c032 <USBD_SetAddress+0x76>
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	88db      	ldrh	r3, [r3, #6]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d12d      	bne.n	800c032 <USBD_SetAddress+0x76>
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	885b      	ldrh	r3, [r3, #2]
 800bfda:	2b7f      	cmp	r3, #127	@ 0x7f
 800bfdc:	d829      	bhi.n	800c032 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	885b      	ldrh	r3, [r3, #2]
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfe8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	2b03      	cmp	r3, #3
 800bff4:	d104      	bne.n	800c000 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bff6:	6839      	ldr	r1, [r7, #0]
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 f9bc 	bl	800c376 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bffe:	e01d      	b.n	800c03c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	7bfa      	ldrb	r2, [r7, #15]
 800c004:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c008:	7bfb      	ldrb	r3, [r7, #15]
 800c00a:	4619      	mov	r1, r3
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 fef9 	bl	800ce04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f000 fa86 	bl	800c524 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c018:	7bfb      	ldrb	r3, [r7, #15]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d004      	beq.n	800c028 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2202      	movs	r2, #2
 800c022:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c026:	e009      	b.n	800c03c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c030:	e004      	b.n	800c03c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c032:	6839      	ldr	r1, [r7, #0]
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 f99e 	bl	800c376 <USBD_CtlError>
  }
}
 800c03a:	bf00      	nop
 800c03c:	bf00      	nop
 800c03e:	3710      	adds	r7, #16
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c04e:	2300      	movs	r3, #0
 800c050:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	885b      	ldrh	r3, [r3, #2]
 800c056:	b2da      	uxtb	r2, r3
 800c058:	4b4e      	ldr	r3, [pc, #312]	@ (800c194 <USBD_SetConfig+0x150>)
 800c05a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c05c:	4b4d      	ldr	r3, [pc, #308]	@ (800c194 <USBD_SetConfig+0x150>)
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	2b01      	cmp	r3, #1
 800c062:	d905      	bls.n	800c070 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c064:	6839      	ldr	r1, [r7, #0]
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 f985 	bl	800c376 <USBD_CtlError>
    return USBD_FAIL;
 800c06c:	2303      	movs	r3, #3
 800c06e:	e08c      	b.n	800c18a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c076:	b2db      	uxtb	r3, r3
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d002      	beq.n	800c082 <USBD_SetConfig+0x3e>
 800c07c:	2b03      	cmp	r3, #3
 800c07e:	d029      	beq.n	800c0d4 <USBD_SetConfig+0x90>
 800c080:	e075      	b.n	800c16e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c082:	4b44      	ldr	r3, [pc, #272]	@ (800c194 <USBD_SetConfig+0x150>)
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d020      	beq.n	800c0cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c08a:	4b42      	ldr	r3, [pc, #264]	@ (800c194 <USBD_SetConfig+0x150>)
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	461a      	mov	r2, r3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c094:	4b3f      	ldr	r3, [pc, #252]	@ (800c194 <USBD_SetConfig+0x150>)
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	4619      	mov	r1, r3
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f7fe ffe3 	bl	800b066 <USBD_SetClassConfig>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c0a4:	7bfb      	ldrb	r3, [r7, #15]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d008      	beq.n	800c0bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c0aa:	6839      	ldr	r1, [r7, #0]
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 f962 	bl	800c376 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2202      	movs	r2, #2
 800c0b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c0ba:	e065      	b.n	800c188 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 fa31 	bl	800c524 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2203      	movs	r2, #3
 800c0c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c0ca:	e05d      	b.n	800c188 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 fa29 	bl	800c524 <USBD_CtlSendStatus>
      break;
 800c0d2:	e059      	b.n	800c188 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c0d4:	4b2f      	ldr	r3, [pc, #188]	@ (800c194 <USBD_SetConfig+0x150>)
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d112      	bne.n	800c102 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2202      	movs	r2, #2
 800c0e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c0e4:	4b2b      	ldr	r3, [pc, #172]	@ (800c194 <USBD_SetConfig+0x150>)
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c0ee:	4b29      	ldr	r3, [pc, #164]	@ (800c194 <USBD_SetConfig+0x150>)
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f7fe ffd2 	bl	800b09e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 fa12 	bl	800c524 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c100:	e042      	b.n	800c188 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c102:	4b24      	ldr	r3, [pc, #144]	@ (800c194 <USBD_SetConfig+0x150>)
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	461a      	mov	r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d02a      	beq.n	800c166 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	b2db      	uxtb	r3, r3
 800c116:	4619      	mov	r1, r3
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f7fe ffc0 	bl	800b09e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c11e:	4b1d      	ldr	r3, [pc, #116]	@ (800c194 <USBD_SetConfig+0x150>)
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	461a      	mov	r2, r3
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c128:	4b1a      	ldr	r3, [pc, #104]	@ (800c194 <USBD_SetConfig+0x150>)
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	4619      	mov	r1, r3
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f7fe ff99 	bl	800b066 <USBD_SetClassConfig>
 800c134:	4603      	mov	r3, r0
 800c136:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c138:	7bfb      	ldrb	r3, [r7, #15]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d00f      	beq.n	800c15e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c13e:	6839      	ldr	r1, [r7, #0]
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 f918 	bl	800c376 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7fe ffa5 	bl	800b09e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2202      	movs	r2, #2
 800c158:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c15c:	e014      	b.n	800c188 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 f9e0 	bl	800c524 <USBD_CtlSendStatus>
      break;
 800c164:	e010      	b.n	800c188 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 f9dc 	bl	800c524 <USBD_CtlSendStatus>
      break;
 800c16c:	e00c      	b.n	800c188 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c16e:	6839      	ldr	r1, [r7, #0]
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 f900 	bl	800c376 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c176:	4b07      	ldr	r3, [pc, #28]	@ (800c194 <USBD_SetConfig+0x150>)
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	4619      	mov	r1, r3
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f7fe ff8e 	bl	800b09e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c182:	2303      	movs	r3, #3
 800c184:	73fb      	strb	r3, [r7, #15]
      break;
 800c186:	bf00      	nop
  }

  return ret;
 800c188:	7bfb      	ldrb	r3, [r7, #15]
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	20000700 	.word	0x20000700

0800c198 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	88db      	ldrh	r3, [r3, #6]
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d004      	beq.n	800c1b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c1aa:	6839      	ldr	r1, [r7, #0]
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 f8e2 	bl	800c376 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c1b2:	e023      	b.n	800c1fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	2b02      	cmp	r3, #2
 800c1be:	dc02      	bgt.n	800c1c6 <USBD_GetConfig+0x2e>
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	dc03      	bgt.n	800c1cc <USBD_GetConfig+0x34>
 800c1c4:	e015      	b.n	800c1f2 <USBD_GetConfig+0x5a>
 800c1c6:	2b03      	cmp	r3, #3
 800c1c8:	d00b      	beq.n	800c1e2 <USBD_GetConfig+0x4a>
 800c1ca:	e012      	b.n	800c1f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	3308      	adds	r3, #8
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	4619      	mov	r1, r3
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 f948 	bl	800c470 <USBD_CtlSendData>
        break;
 800c1e0:	e00c      	b.n	800c1fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	3304      	adds	r3, #4
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 f940 	bl	800c470 <USBD_CtlSendData>
        break;
 800c1f0:	e004      	b.n	800c1fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c1f2:	6839      	ldr	r1, [r7, #0]
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 f8be 	bl	800c376 <USBD_CtlError>
        break;
 800c1fa:	bf00      	nop
}
 800c1fc:	bf00      	nop
 800c1fe:	3708      	adds	r7, #8
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b082      	sub	sp, #8
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c214:	b2db      	uxtb	r3, r3
 800c216:	3b01      	subs	r3, #1
 800c218:	2b02      	cmp	r3, #2
 800c21a:	d81e      	bhi.n	800c25a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	88db      	ldrh	r3, [r3, #6]
 800c220:	2b02      	cmp	r3, #2
 800c222:	d004      	beq.n	800c22e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c224:	6839      	ldr	r1, [r7, #0]
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 f8a5 	bl	800c376 <USBD_CtlError>
        break;
 800c22c:	e01a      	b.n	800c264 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2201      	movs	r2, #1
 800c232:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d005      	beq.n	800c24a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	f043 0202 	orr.w	r2, r3, #2
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	330c      	adds	r3, #12
 800c24e:	2202      	movs	r2, #2
 800c250:	4619      	mov	r1, r3
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 f90c 	bl	800c470 <USBD_CtlSendData>
      break;
 800c258:	e004      	b.n	800c264 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c25a:	6839      	ldr	r1, [r7, #0]
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 f88a 	bl	800c376 <USBD_CtlError>
      break;
 800c262:	bf00      	nop
  }
}
 800c264:	bf00      	nop
 800c266:	3708      	adds	r7, #8
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	885b      	ldrh	r3, [r3, #2]
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	d107      	bne.n	800c28e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2201      	movs	r2, #1
 800c282:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 f94c 	bl	800c524 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c28c:	e013      	b.n	800c2b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	885b      	ldrh	r3, [r3, #2]
 800c292:	2b02      	cmp	r3, #2
 800c294:	d10b      	bne.n	800c2ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	889b      	ldrh	r3, [r3, #4]
 800c29a:	0a1b      	lsrs	r3, r3, #8
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	b2da      	uxtb	r2, r3
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 f93c 	bl	800c524 <USBD_CtlSendStatus>
}
 800c2ac:	e003      	b.n	800c2b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c2ae:	6839      	ldr	r1, [r7, #0]
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 f860 	bl	800c376 <USBD_CtlError>
}
 800c2b6:	bf00      	nop
 800c2b8:	3708      	adds	r7, #8
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}

0800c2be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b082      	sub	sp, #8
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
 800c2c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2ce:	b2db      	uxtb	r3, r3
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	d80b      	bhi.n	800c2ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	885b      	ldrh	r3, [r3, #2]
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d10c      	bne.n	800c2f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 f91c 	bl	800c524 <USBD_CtlSendStatus>
      }
      break;
 800c2ec:	e004      	b.n	800c2f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c2ee:	6839      	ldr	r1, [r7, #0]
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 f840 	bl	800c376 <USBD_CtlError>
      break;
 800c2f6:	e000      	b.n	800c2fa <USBD_ClrFeature+0x3c>
      break;
 800c2f8:	bf00      	nop
  }
}
 800c2fa:	bf00      	nop
 800c2fc:	3708      	adds	r7, #8
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c302:	b580      	push	{r7, lr}
 800c304:	b084      	sub	sp, #16
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
 800c30a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	781a      	ldrb	r2, [r3, #0]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	3301      	adds	r3, #1
 800c31c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	781a      	ldrb	r2, [r3, #0]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	3301      	adds	r3, #1
 800c32a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c32c:	68f8      	ldr	r0, [r7, #12]
 800c32e:	f7ff fa40 	bl	800b7b2 <SWAPBYTE>
 800c332:	4603      	mov	r3, r0
 800c334:	461a      	mov	r2, r3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	3301      	adds	r3, #1
 800c33e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	3301      	adds	r3, #1
 800c344:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c346:	68f8      	ldr	r0, [r7, #12]
 800c348:	f7ff fa33 	bl	800b7b2 <SWAPBYTE>
 800c34c:	4603      	mov	r3, r0
 800c34e:	461a      	mov	r2, r3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	3301      	adds	r3, #1
 800c358:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	3301      	adds	r3, #1
 800c35e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c360:	68f8      	ldr	r0, [r7, #12]
 800c362:	f7ff fa26 	bl	800b7b2 <SWAPBYTE>
 800c366:	4603      	mov	r3, r0
 800c368:	461a      	mov	r2, r3
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	80da      	strh	r2, [r3, #6]
}
 800c36e:	bf00      	nop
 800c370:	3710      	adds	r7, #16
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b082      	sub	sp, #8
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
 800c37e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c380:	2180      	movs	r1, #128	@ 0x80
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 fcd4 	bl	800cd30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c388:	2100      	movs	r1, #0
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 fcd0 	bl	800cd30 <USBD_LL_StallEP>
}
 800c390:	bf00      	nop
 800c392:	3708      	adds	r7, #8
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b086      	sub	sp, #24
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d042      	beq.n	800c434 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c3b2:	6938      	ldr	r0, [r7, #16]
 800c3b4:	f000 f842 	bl	800c43c <USBD_GetLen>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	005b      	lsls	r3, r3, #1
 800c3be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3c2:	d808      	bhi.n	800c3d6 <USBD_GetString+0x3e>
 800c3c4:	6938      	ldr	r0, [r7, #16]
 800c3c6:	f000 f839 	bl	800c43c <USBD_GetLen>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	005b      	lsls	r3, r3, #1
 800c3d2:	b29a      	uxth	r2, r3
 800c3d4:	e001      	b.n	800c3da <USBD_GetString+0x42>
 800c3d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c3de:	7dfb      	ldrb	r3, [r7, #23]
 800c3e0:	68ba      	ldr	r2, [r7, #8]
 800c3e2:	4413      	add	r3, r2
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	7812      	ldrb	r2, [r2, #0]
 800c3e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c3ea:	7dfb      	ldrb	r3, [r7, #23]
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c3f0:	7dfb      	ldrb	r3, [r7, #23]
 800c3f2:	68ba      	ldr	r2, [r7, #8]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	2203      	movs	r2, #3
 800c3f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c3fa:	7dfb      	ldrb	r3, [r7, #23]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c400:	e013      	b.n	800c42a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c402:	7dfb      	ldrb	r3, [r7, #23]
 800c404:	68ba      	ldr	r2, [r7, #8]
 800c406:	4413      	add	r3, r2
 800c408:	693a      	ldr	r2, [r7, #16]
 800c40a:	7812      	ldrb	r2, [r2, #0]
 800c40c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	3301      	adds	r3, #1
 800c412:	613b      	str	r3, [r7, #16]
    idx++;
 800c414:	7dfb      	ldrb	r3, [r7, #23]
 800c416:	3301      	adds	r3, #1
 800c418:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c41a:	7dfb      	ldrb	r3, [r7, #23]
 800c41c:	68ba      	ldr	r2, [r7, #8]
 800c41e:	4413      	add	r3, r2
 800c420:	2200      	movs	r2, #0
 800c422:	701a      	strb	r2, [r3, #0]
    idx++;
 800c424:	7dfb      	ldrb	r3, [r7, #23]
 800c426:	3301      	adds	r3, #1
 800c428:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d1e7      	bne.n	800c402 <USBD_GetString+0x6a>
 800c432:	e000      	b.n	800c436 <USBD_GetString+0x9e>
    return;
 800c434:	bf00      	nop
  }
}
 800c436:	3718      	adds	r7, #24
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c444:	2300      	movs	r3, #0
 800c446:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c44c:	e005      	b.n	800c45a <USBD_GetLen+0x1e>
  {
    len++;
 800c44e:	7bfb      	ldrb	r3, [r7, #15]
 800c450:	3301      	adds	r3, #1
 800c452:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	3301      	adds	r3, #1
 800c458:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d1f5      	bne.n	800c44e <USBD_GetLen+0x12>
  }

  return len;
 800c462:	7bfb      	ldrb	r3, [r7, #15]
}
 800c464:	4618      	mov	r0, r3
 800c466:	3714      	adds	r7, #20
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr

0800c470 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2202      	movs	r2, #2
 800c480:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	68ba      	ldr	r2, [r7, #8]
 800c494:	2100      	movs	r1, #0
 800c496:	68f8      	ldr	r0, [r7, #12]
 800c498:	f000 fcd3 	bl	800ce42 <USBD_LL_Transmit>

  return USBD_OK;
 800c49c:	2300      	movs	r3, #0
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b084      	sub	sp, #16
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	60f8      	str	r0, [r7, #12]
 800c4ae:	60b9      	str	r1, [r7, #8]
 800c4b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	68ba      	ldr	r2, [r7, #8]
 800c4b6:	2100      	movs	r1, #0
 800c4b8:	68f8      	ldr	r0, [r7, #12]
 800c4ba:	f000 fcc2 	bl	800ce42 <USBD_LL_Transmit>

  return USBD_OK;
 800c4be:	2300      	movs	r3, #0
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3710      	adds	r7, #16
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2203      	movs	r2, #3
 800c4d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	68ba      	ldr	r2, [r7, #8]
 800c4f0:	2100      	movs	r1, #0
 800c4f2:	68f8      	ldr	r0, [r7, #12]
 800c4f4:	f000 fcc6 	bl	800ce84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3710      	adds	r7, #16
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b084      	sub	sp, #16
 800c506:	af00      	add	r7, sp, #0
 800c508:	60f8      	str	r0, [r7, #12]
 800c50a:	60b9      	str	r1, [r7, #8]
 800c50c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	68ba      	ldr	r2, [r7, #8]
 800c512:	2100      	movs	r1, #0
 800c514:	68f8      	ldr	r0, [r7, #12]
 800c516:	f000 fcb5 	bl	800ce84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3710      	adds	r7, #16
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2204      	movs	r2, #4
 800c530:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c534:	2300      	movs	r3, #0
 800c536:	2200      	movs	r2, #0
 800c538:	2100      	movs	r1, #0
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 fc81 	bl	800ce42 <USBD_LL_Transmit>

  return USBD_OK;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b082      	sub	sp, #8
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2205      	movs	r2, #5
 800c556:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c55a:	2300      	movs	r3, #0
 800c55c:	2200      	movs	r2, #0
 800c55e:	2100      	movs	r1, #0
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f000 fc8f 	bl	800ce84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c566:	2300      	movs	r3, #0
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3708      	adds	r7, #8
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c574:	2200      	movs	r2, #0
 800c576:	4912      	ldr	r1, [pc, #72]	@ (800c5c0 <MX_USB_DEVICE_Init+0x50>)
 800c578:	4812      	ldr	r0, [pc, #72]	@ (800c5c4 <MX_USB_DEVICE_Init+0x54>)
 800c57a:	f7fe fcf7 	bl	800af6c <USBD_Init>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d001      	beq.n	800c588 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c584:	f7f5 fa8e 	bl	8001aa4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c588:	490f      	ldr	r1, [pc, #60]	@ (800c5c8 <MX_USB_DEVICE_Init+0x58>)
 800c58a:	480e      	ldr	r0, [pc, #56]	@ (800c5c4 <MX_USB_DEVICE_Init+0x54>)
 800c58c:	f7fe fd1e 	bl	800afcc <USBD_RegisterClass>
 800c590:	4603      	mov	r3, r0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d001      	beq.n	800c59a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c596:	f7f5 fa85 	bl	8001aa4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c59a:	490c      	ldr	r1, [pc, #48]	@ (800c5cc <MX_USB_DEVICE_Init+0x5c>)
 800c59c:	4809      	ldr	r0, [pc, #36]	@ (800c5c4 <MX_USB_DEVICE_Init+0x54>)
 800c59e:	f7fe fc55 	bl	800ae4c <USBD_CDC_RegisterInterface>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d001      	beq.n	800c5ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c5a8:	f7f5 fa7c 	bl	8001aa4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c5ac:	4805      	ldr	r0, [pc, #20]	@ (800c5c4 <MX_USB_DEVICE_Init+0x54>)
 800c5ae:	f7fe fd43 	bl	800b038 <USBD_Start>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d001      	beq.n	800c5bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c5b8:	f7f5 fa74 	bl	8001aa4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c5bc:	bf00      	nop
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	200000b0 	.word	0x200000b0
 800c5c4:	20000704 	.word	0x20000704
 800c5c8:	2000001c 	.word	0x2000001c
 800c5cc:	2000009c 	.word	0x2000009c

0800c5d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	4905      	ldr	r1, [pc, #20]	@ (800c5ec <CDC_Init_FS+0x1c>)
 800c5d8:	4805      	ldr	r0, [pc, #20]	@ (800c5f0 <CDC_Init_FS+0x20>)
 800c5da:	f7fe fc51 	bl	800ae80 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c5de:	4905      	ldr	r1, [pc, #20]	@ (800c5f4 <CDC_Init_FS+0x24>)
 800c5e0:	4803      	ldr	r0, [pc, #12]	@ (800c5f0 <CDC_Init_FS+0x20>)
 800c5e2:	f7fe fc6f 	bl	800aec4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c5e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	200011e0 	.word	0x200011e0
 800c5f0:	20000704 	.word	0x20000704
 800c5f4:	200009e0 	.word	0x200009e0

0800c5f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c5fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr

0800c608 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	4603      	mov	r3, r0
 800c610:	6039      	str	r1, [r7, #0]
 800c612:	71fb      	strb	r3, [r7, #7]
 800c614:	4613      	mov	r3, r2
 800c616:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c618:	79fb      	ldrb	r3, [r7, #7]
 800c61a:	2b23      	cmp	r3, #35	@ 0x23
 800c61c:	d84a      	bhi.n	800c6b4 <CDC_Control_FS+0xac>
 800c61e:	a201      	add	r2, pc, #4	@ (adr r2, 800c624 <CDC_Control_FS+0x1c>)
 800c620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c624:	0800c6b5 	.word	0x0800c6b5
 800c628:	0800c6b5 	.word	0x0800c6b5
 800c62c:	0800c6b5 	.word	0x0800c6b5
 800c630:	0800c6b5 	.word	0x0800c6b5
 800c634:	0800c6b5 	.word	0x0800c6b5
 800c638:	0800c6b5 	.word	0x0800c6b5
 800c63c:	0800c6b5 	.word	0x0800c6b5
 800c640:	0800c6b5 	.word	0x0800c6b5
 800c644:	0800c6b5 	.word	0x0800c6b5
 800c648:	0800c6b5 	.word	0x0800c6b5
 800c64c:	0800c6b5 	.word	0x0800c6b5
 800c650:	0800c6b5 	.word	0x0800c6b5
 800c654:	0800c6b5 	.word	0x0800c6b5
 800c658:	0800c6b5 	.word	0x0800c6b5
 800c65c:	0800c6b5 	.word	0x0800c6b5
 800c660:	0800c6b5 	.word	0x0800c6b5
 800c664:	0800c6b5 	.word	0x0800c6b5
 800c668:	0800c6b5 	.word	0x0800c6b5
 800c66c:	0800c6b5 	.word	0x0800c6b5
 800c670:	0800c6b5 	.word	0x0800c6b5
 800c674:	0800c6b5 	.word	0x0800c6b5
 800c678:	0800c6b5 	.word	0x0800c6b5
 800c67c:	0800c6b5 	.word	0x0800c6b5
 800c680:	0800c6b5 	.word	0x0800c6b5
 800c684:	0800c6b5 	.word	0x0800c6b5
 800c688:	0800c6b5 	.word	0x0800c6b5
 800c68c:	0800c6b5 	.word	0x0800c6b5
 800c690:	0800c6b5 	.word	0x0800c6b5
 800c694:	0800c6b5 	.word	0x0800c6b5
 800c698:	0800c6b5 	.word	0x0800c6b5
 800c69c:	0800c6b5 	.word	0x0800c6b5
 800c6a0:	0800c6b5 	.word	0x0800c6b5
 800c6a4:	0800c6b5 	.word	0x0800c6b5
 800c6a8:	0800c6b5 	.word	0x0800c6b5
 800c6ac:	0800c6b5 	.word	0x0800c6b5
 800c6b0:	0800c6b5 	.word	0x0800c6b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c6b4:	bf00      	nop
  }

  return (USBD_OK);
 800c6b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c6ce:	6879      	ldr	r1, [r7, #4]
 800c6d0:	4805      	ldr	r0, [pc, #20]	@ (800c6e8 <CDC_Receive_FS+0x24>)
 800c6d2:	f7fe fbf7 	bl	800aec4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c6d6:	4804      	ldr	r0, [pc, #16]	@ (800c6e8 <CDC_Receive_FS+0x24>)
 800c6d8:	f7fe fc12 	bl	800af00 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c6dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	20000704 	.word	0x20000704

0800c6ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b087      	sub	sp, #28
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	4613      	mov	r3, r2
 800c6f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c6fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c702:	4618      	mov	r0, r3
 800c704:	371c      	adds	r7, #28
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr
	...

0800c710 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	4603      	mov	r3, r0
 800c718:	6039      	str	r1, [r7, #0]
 800c71a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	2212      	movs	r2, #18
 800c720:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c722:	4b03      	ldr	r3, [pc, #12]	@ (800c730 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c724:	4618      	mov	r0, r3
 800c726:	370c      	adds	r7, #12
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr
 800c730:	200000cc 	.word	0x200000cc

0800c734 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
 800c73a:	4603      	mov	r3, r0
 800c73c:	6039      	str	r1, [r7, #0]
 800c73e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	2204      	movs	r2, #4
 800c744:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c746:	4b03      	ldr	r3, [pc, #12]	@ (800c754 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c748:	4618      	mov	r0, r3
 800c74a:	370c      	adds	r7, #12
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr
 800c754:	200000e0 	.word	0x200000e0

0800c758 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	4603      	mov	r3, r0
 800c760:	6039      	str	r1, [r7, #0]
 800c762:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c764:	79fb      	ldrb	r3, [r7, #7]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d105      	bne.n	800c776 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c76a:	683a      	ldr	r2, [r7, #0]
 800c76c:	4907      	ldr	r1, [pc, #28]	@ (800c78c <USBD_FS_ProductStrDescriptor+0x34>)
 800c76e:	4808      	ldr	r0, [pc, #32]	@ (800c790 <USBD_FS_ProductStrDescriptor+0x38>)
 800c770:	f7ff fe12 	bl	800c398 <USBD_GetString>
 800c774:	e004      	b.n	800c780 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c776:	683a      	ldr	r2, [r7, #0]
 800c778:	4904      	ldr	r1, [pc, #16]	@ (800c78c <USBD_FS_ProductStrDescriptor+0x34>)
 800c77a:	4805      	ldr	r0, [pc, #20]	@ (800c790 <USBD_FS_ProductStrDescriptor+0x38>)
 800c77c:	f7ff fe0c 	bl	800c398 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c780:	4b02      	ldr	r3, [pc, #8]	@ (800c78c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c782:	4618      	mov	r0, r3
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	200019e0 	.word	0x200019e0
 800c790:	08010198 	.word	0x08010198

0800c794 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	4603      	mov	r3, r0
 800c79c:	6039      	str	r1, [r7, #0]
 800c79e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c7a0:	683a      	ldr	r2, [r7, #0]
 800c7a2:	4904      	ldr	r1, [pc, #16]	@ (800c7b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c7a4:	4804      	ldr	r0, [pc, #16]	@ (800c7b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c7a6:	f7ff fdf7 	bl	800c398 <USBD_GetString>
  return USBD_StrDesc;
 800c7aa:	4b02      	ldr	r3, [pc, #8]	@ (800c7b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3708      	adds	r7, #8
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	200019e0 	.word	0x200019e0
 800c7b8:	080101b0 	.word	0x080101b0

0800c7bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	6039      	str	r1, [r7, #0]
 800c7c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	221a      	movs	r2, #26
 800c7cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c7ce:	f000 f843 	bl	800c858 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c7d2:	4b02      	ldr	r3, [pc, #8]	@ (800c7dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3708      	adds	r7, #8
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	200000e4 	.word	0x200000e4

0800c7e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	6039      	str	r1, [r7, #0]
 800c7ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c7ec:	79fb      	ldrb	r3, [r7, #7]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d105      	bne.n	800c7fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c7f2:	683a      	ldr	r2, [r7, #0]
 800c7f4:	4907      	ldr	r1, [pc, #28]	@ (800c814 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c7f6:	4808      	ldr	r0, [pc, #32]	@ (800c818 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c7f8:	f7ff fdce 	bl	800c398 <USBD_GetString>
 800c7fc:	e004      	b.n	800c808 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c7fe:	683a      	ldr	r2, [r7, #0]
 800c800:	4904      	ldr	r1, [pc, #16]	@ (800c814 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c802:	4805      	ldr	r0, [pc, #20]	@ (800c818 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c804:	f7ff fdc8 	bl	800c398 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c808:	4b02      	ldr	r3, [pc, #8]	@ (800c814 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3708      	adds	r7, #8
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop
 800c814:	200019e0 	.word	0x200019e0
 800c818:	080101c4 	.word	0x080101c4

0800c81c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b082      	sub	sp, #8
 800c820:	af00      	add	r7, sp, #0
 800c822:	4603      	mov	r3, r0
 800c824:	6039      	str	r1, [r7, #0]
 800c826:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c828:	79fb      	ldrb	r3, [r7, #7]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d105      	bne.n	800c83a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c82e:	683a      	ldr	r2, [r7, #0]
 800c830:	4907      	ldr	r1, [pc, #28]	@ (800c850 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c832:	4808      	ldr	r0, [pc, #32]	@ (800c854 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c834:	f7ff fdb0 	bl	800c398 <USBD_GetString>
 800c838:	e004      	b.n	800c844 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c83a:	683a      	ldr	r2, [r7, #0]
 800c83c:	4904      	ldr	r1, [pc, #16]	@ (800c850 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c83e:	4805      	ldr	r0, [pc, #20]	@ (800c854 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c840:	f7ff fdaa 	bl	800c398 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c844:	4b02      	ldr	r3, [pc, #8]	@ (800c850 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c846:	4618      	mov	r0, r3
 800c848:	3708      	adds	r7, #8
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	200019e0 	.word	0x200019e0
 800c854:	080101d0 	.word	0x080101d0

0800c858 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c85e:	4b0f      	ldr	r3, [pc, #60]	@ (800c89c <Get_SerialNum+0x44>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c864:	4b0e      	ldr	r3, [pc, #56]	@ (800c8a0 <Get_SerialNum+0x48>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c86a:	4b0e      	ldr	r3, [pc, #56]	@ (800c8a4 <Get_SerialNum+0x4c>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c870:	68fa      	ldr	r2, [r7, #12]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4413      	add	r3, r2
 800c876:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d009      	beq.n	800c892 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c87e:	2208      	movs	r2, #8
 800c880:	4909      	ldr	r1, [pc, #36]	@ (800c8a8 <Get_SerialNum+0x50>)
 800c882:	68f8      	ldr	r0, [r7, #12]
 800c884:	f000 f814 	bl	800c8b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c888:	2204      	movs	r2, #4
 800c88a:	4908      	ldr	r1, [pc, #32]	@ (800c8ac <Get_SerialNum+0x54>)
 800c88c:	68b8      	ldr	r0, [r7, #8]
 800c88e:	f000 f80f 	bl	800c8b0 <IntToUnicode>
  }
}
 800c892:	bf00      	nop
 800c894:	3710      	adds	r7, #16
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	1fff7a10 	.word	0x1fff7a10
 800c8a0:	1fff7a14 	.word	0x1fff7a14
 800c8a4:	1fff7a18 	.word	0x1fff7a18
 800c8a8:	200000e6 	.word	0x200000e6
 800c8ac:	200000f6 	.word	0x200000f6

0800c8b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b087      	sub	sp, #28
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	75fb      	strb	r3, [r7, #23]
 800c8c6:	e027      	b.n	800c918 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	0f1b      	lsrs	r3, r3, #28
 800c8cc:	2b09      	cmp	r3, #9
 800c8ce:	d80b      	bhi.n	800c8e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	0f1b      	lsrs	r3, r3, #28
 800c8d4:	b2da      	uxtb	r2, r3
 800c8d6:	7dfb      	ldrb	r3, [r7, #23]
 800c8d8:	005b      	lsls	r3, r3, #1
 800c8da:	4619      	mov	r1, r3
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	440b      	add	r3, r1
 800c8e0:	3230      	adds	r2, #48	@ 0x30
 800c8e2:	b2d2      	uxtb	r2, r2
 800c8e4:	701a      	strb	r2, [r3, #0]
 800c8e6:	e00a      	b.n	800c8fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	0f1b      	lsrs	r3, r3, #28
 800c8ec:	b2da      	uxtb	r2, r3
 800c8ee:	7dfb      	ldrb	r3, [r7, #23]
 800c8f0:	005b      	lsls	r3, r3, #1
 800c8f2:	4619      	mov	r1, r3
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	440b      	add	r3, r1
 800c8f8:	3237      	adds	r2, #55	@ 0x37
 800c8fa:	b2d2      	uxtb	r2, r2
 800c8fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	011b      	lsls	r3, r3, #4
 800c902:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c904:	7dfb      	ldrb	r3, [r7, #23]
 800c906:	005b      	lsls	r3, r3, #1
 800c908:	3301      	adds	r3, #1
 800c90a:	68ba      	ldr	r2, [r7, #8]
 800c90c:	4413      	add	r3, r2
 800c90e:	2200      	movs	r2, #0
 800c910:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c912:	7dfb      	ldrb	r3, [r7, #23]
 800c914:	3301      	adds	r3, #1
 800c916:	75fb      	strb	r3, [r7, #23]
 800c918:	7dfa      	ldrb	r2, [r7, #23]
 800c91a:	79fb      	ldrb	r3, [r7, #7]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d3d3      	bcc.n	800c8c8 <IntToUnicode+0x18>
  }
}
 800c920:	bf00      	nop
 800c922:	bf00      	nop
 800c924:	371c      	adds	r7, #28
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr
	...

0800c930 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b08a      	sub	sp, #40	@ 0x28
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c938:	f107 0314 	add.w	r3, r7, #20
 800c93c:	2200      	movs	r2, #0
 800c93e:	601a      	str	r2, [r3, #0]
 800c940:	605a      	str	r2, [r3, #4]
 800c942:	609a      	str	r2, [r3, #8]
 800c944:	60da      	str	r2, [r3, #12]
 800c946:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c950:	d147      	bne.n	800c9e2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c952:	2300      	movs	r3, #0
 800c954:	613b      	str	r3, [r7, #16]
 800c956:	4b25      	ldr	r3, [pc, #148]	@ (800c9ec <HAL_PCD_MspInit+0xbc>)
 800c958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c95a:	4a24      	ldr	r2, [pc, #144]	@ (800c9ec <HAL_PCD_MspInit+0xbc>)
 800c95c:	f043 0301 	orr.w	r3, r3, #1
 800c960:	6313      	str	r3, [r2, #48]	@ 0x30
 800c962:	4b22      	ldr	r3, [pc, #136]	@ (800c9ec <HAL_PCD_MspInit+0xbc>)
 800c964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c966:	f003 0301 	and.w	r3, r3, #1
 800c96a:	613b      	str	r3, [r7, #16]
 800c96c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c96e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c974:	2300      	movs	r3, #0
 800c976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c978:	2300      	movs	r3, #0
 800c97a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c97c:	f107 0314 	add.w	r3, r7, #20
 800c980:	4619      	mov	r1, r3
 800c982:	481b      	ldr	r0, [pc, #108]	@ (800c9f0 <HAL_PCD_MspInit+0xc0>)
 800c984:	f7f7 f926 	bl	8003bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c988:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800c98c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c98e:	2302      	movs	r3, #2
 800c990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c992:	2300      	movs	r3, #0
 800c994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c996:	2300      	movs	r3, #0
 800c998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c99a:	230a      	movs	r3, #10
 800c99c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c99e:	f107 0314 	add.w	r3, r7, #20
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	4812      	ldr	r0, [pc, #72]	@ (800c9f0 <HAL_PCD_MspInit+0xc0>)
 800c9a6:	f7f7 f915 	bl	8003bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c9aa:	4b10      	ldr	r3, [pc, #64]	@ (800c9ec <HAL_PCD_MspInit+0xbc>)
 800c9ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9ae:	4a0f      	ldr	r2, [pc, #60]	@ (800c9ec <HAL_PCD_MspInit+0xbc>)
 800c9b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9b4:	6353      	str	r3, [r2, #52]	@ 0x34
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	60fb      	str	r3, [r7, #12]
 800c9ba:	4b0c      	ldr	r3, [pc, #48]	@ (800c9ec <HAL_PCD_MspInit+0xbc>)
 800c9bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9be:	4a0b      	ldr	r2, [pc, #44]	@ (800c9ec <HAL_PCD_MspInit+0xbc>)
 800c9c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c9c4:	6453      	str	r3, [r2, #68]	@ 0x44
 800c9c6:	4b09      	ldr	r3, [pc, #36]	@ (800c9ec <HAL_PCD_MspInit+0xbc>)
 800c9c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c9ce:	60fb      	str	r3, [r7, #12]
 800c9d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	2100      	movs	r1, #0
 800c9d6:	2043      	movs	r0, #67	@ 0x43
 800c9d8:	f7f6 fd55 	bl	8003486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c9dc:	2043      	movs	r0, #67	@ 0x43
 800c9de:	f7f6 fd6e 	bl	80034be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c9e2:	bf00      	nop
 800c9e4:	3728      	adds	r7, #40	@ 0x28
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
 800c9ea:	bf00      	nop
 800c9ec:	40023800 	.word	0x40023800
 800c9f0:	40020000 	.word	0x40020000

0800c9f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ca08:	4619      	mov	r1, r3
 800ca0a:	4610      	mov	r0, r2
 800ca0c:	f7fe fb61 	bl	800b0d2 <USBD_LL_SetupStage>
}
 800ca10:	bf00      	nop
 800ca12:	3708      	adds	r7, #8
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	460b      	mov	r3, r1
 800ca22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ca2a:	78fa      	ldrb	r2, [r7, #3]
 800ca2c:	6879      	ldr	r1, [r7, #4]
 800ca2e:	4613      	mov	r3, r2
 800ca30:	00db      	lsls	r3, r3, #3
 800ca32:	4413      	add	r3, r2
 800ca34:	009b      	lsls	r3, r3, #2
 800ca36:	440b      	add	r3, r1
 800ca38:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	78fb      	ldrb	r3, [r7, #3]
 800ca40:	4619      	mov	r1, r3
 800ca42:	f7fe fb9b 	bl	800b17c <USBD_LL_DataOutStage>
}
 800ca46:	bf00      	nop
 800ca48:	3708      	adds	r7, #8
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}

0800ca4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca4e:	b580      	push	{r7, lr}
 800ca50:	b082      	sub	sp, #8
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
 800ca56:	460b      	mov	r3, r1
 800ca58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ca60:	78fa      	ldrb	r2, [r7, #3]
 800ca62:	6879      	ldr	r1, [r7, #4]
 800ca64:	4613      	mov	r3, r2
 800ca66:	00db      	lsls	r3, r3, #3
 800ca68:	4413      	add	r3, r2
 800ca6a:	009b      	lsls	r3, r3, #2
 800ca6c:	440b      	add	r3, r1
 800ca6e:	3320      	adds	r3, #32
 800ca70:	681a      	ldr	r2, [r3, #0]
 800ca72:	78fb      	ldrb	r3, [r7, #3]
 800ca74:	4619      	mov	r1, r3
 800ca76:	f7fe fc34 	bl	800b2e2 <USBD_LL_DataInStage>
}
 800ca7a:	bf00      	nop
 800ca7c:	3708      	adds	r7, #8
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca82:	b580      	push	{r7, lr}
 800ca84:	b082      	sub	sp, #8
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7fe fd6e 	bl	800b572 <USBD_LL_SOF>
}
 800ca96:	bf00      	nop
 800ca98:	3708      	adds	r7, #8
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b084      	sub	sp, #16
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800caa6:	2301      	movs	r3, #1
 800caa8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	79db      	ldrb	r3, [r3, #7]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d102      	bne.n	800cab8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cab2:	2300      	movs	r3, #0
 800cab4:	73fb      	strb	r3, [r7, #15]
 800cab6:	e008      	b.n	800caca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	79db      	ldrb	r3, [r3, #7]
 800cabc:	2b02      	cmp	r3, #2
 800cabe:	d102      	bne.n	800cac6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cac0:	2301      	movs	r3, #1
 800cac2:	73fb      	strb	r3, [r7, #15]
 800cac4:	e001      	b.n	800caca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cac6:	f7f4 ffed 	bl	8001aa4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cad0:	7bfa      	ldrb	r2, [r7, #15]
 800cad2:	4611      	mov	r1, r2
 800cad4:	4618      	mov	r0, r3
 800cad6:	f7fe fd08 	bl	800b4ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7fe fcb0 	bl	800b446 <USBD_LL_Reset>
}
 800cae6:	bf00      	nop
 800cae8:	3710      	adds	r7, #16
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
	...

0800caf0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b082      	sub	sp, #8
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7fe fd03 	bl	800b50a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	6812      	ldr	r2, [r2, #0]
 800cb12:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cb16:	f043 0301 	orr.w	r3, r3, #1
 800cb1a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	7adb      	ldrb	r3, [r3, #11]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d005      	beq.n	800cb30 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb24:	4b04      	ldr	r3, [pc, #16]	@ (800cb38 <HAL_PCD_SuspendCallback+0x48>)
 800cb26:	691b      	ldr	r3, [r3, #16]
 800cb28:	4a03      	ldr	r2, [pc, #12]	@ (800cb38 <HAL_PCD_SuspendCallback+0x48>)
 800cb2a:	f043 0306 	orr.w	r3, r3, #6
 800cb2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cb30:	bf00      	nop
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	e000ed00 	.word	0xe000ed00

0800cb3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7fe fcf9 	bl	800b542 <USBD_LL_Resume>
}
 800cb50:	bf00      	nop
 800cb52:	3708      	adds	r7, #8
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	460b      	mov	r3, r1
 800cb62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb6a:	78fa      	ldrb	r2, [r7, #3]
 800cb6c:	4611      	mov	r1, r2
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7fe fd51 	bl	800b616 <USBD_LL_IsoOUTIncomplete>
}
 800cb74:	bf00      	nop
 800cb76:	3708      	adds	r7, #8
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	460b      	mov	r3, r1
 800cb86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb8e:	78fa      	ldrb	r2, [r7, #3]
 800cb90:	4611      	mov	r1, r2
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7fe fd0d 	bl	800b5b2 <USBD_LL_IsoINIncomplete>
}
 800cb98:	bf00      	nop
 800cb9a:	3708      	adds	r7, #8
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b082      	sub	sp, #8
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7fe fd63 	bl	800b67a <USBD_LL_DevConnected>
}
 800cbb4:	bf00      	nop
 800cbb6:	3708      	adds	r7, #8
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7fe fd60 	bl	800b690 <USBD_LL_DevDisconnected>
}
 800cbd0:	bf00      	nop
 800cbd2:	3708      	adds	r7, #8
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}

0800cbd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d13c      	bne.n	800cc62 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cbe8:	4a20      	ldr	r2, [pc, #128]	@ (800cc6c <USBD_LL_Init+0x94>)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	4a1e      	ldr	r2, [pc, #120]	@ (800cc6c <USBD_LL_Init+0x94>)
 800cbf4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cbf8:	4b1c      	ldr	r3, [pc, #112]	@ (800cc6c <USBD_LL_Init+0x94>)
 800cbfa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cbfe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cc00:	4b1a      	ldr	r3, [pc, #104]	@ (800cc6c <USBD_LL_Init+0x94>)
 800cc02:	2204      	movs	r2, #4
 800cc04:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cc06:	4b19      	ldr	r3, [pc, #100]	@ (800cc6c <USBD_LL_Init+0x94>)
 800cc08:	2202      	movs	r2, #2
 800cc0a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cc0c:	4b17      	ldr	r3, [pc, #92]	@ (800cc6c <USBD_LL_Init+0x94>)
 800cc0e:	2200      	movs	r2, #0
 800cc10:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cc12:	4b16      	ldr	r3, [pc, #88]	@ (800cc6c <USBD_LL_Init+0x94>)
 800cc14:	2202      	movs	r2, #2
 800cc16:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cc18:	4b14      	ldr	r3, [pc, #80]	@ (800cc6c <USBD_LL_Init+0x94>)
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cc1e:	4b13      	ldr	r3, [pc, #76]	@ (800cc6c <USBD_LL_Init+0x94>)
 800cc20:	2200      	movs	r2, #0
 800cc22:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cc24:	4b11      	ldr	r3, [pc, #68]	@ (800cc6c <USBD_LL_Init+0x94>)
 800cc26:	2200      	movs	r2, #0
 800cc28:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800cc2a:	4b10      	ldr	r3, [pc, #64]	@ (800cc6c <USBD_LL_Init+0x94>)
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cc30:	4b0e      	ldr	r3, [pc, #56]	@ (800cc6c <USBD_LL_Init+0x94>)
 800cc32:	2200      	movs	r2, #0
 800cc34:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cc36:	480d      	ldr	r0, [pc, #52]	@ (800cc6c <USBD_LL_Init+0x94>)
 800cc38:	f7f8 ff7a 	bl	8005b30 <HAL_PCD_Init>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d001      	beq.n	800cc46 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cc42:	f7f4 ff2f 	bl	8001aa4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cc46:	2180      	movs	r1, #128	@ 0x80
 800cc48:	4808      	ldr	r0, [pc, #32]	@ (800cc6c <USBD_LL_Init+0x94>)
 800cc4a:	f7fa f9a6 	bl	8006f9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cc4e:	2240      	movs	r2, #64	@ 0x40
 800cc50:	2100      	movs	r1, #0
 800cc52:	4806      	ldr	r0, [pc, #24]	@ (800cc6c <USBD_LL_Init+0x94>)
 800cc54:	f7fa f95a 	bl	8006f0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cc58:	2280      	movs	r2, #128	@ 0x80
 800cc5a:	2101      	movs	r1, #1
 800cc5c:	4803      	ldr	r0, [pc, #12]	@ (800cc6c <USBD_LL_Init+0x94>)
 800cc5e:	f7fa f955 	bl	8006f0c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cc62:	2300      	movs	r3, #0
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3708      	adds	r7, #8
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	20001be0 	.word	0x20001be0

0800cc70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7f9 f861 	bl	8005d4e <HAL_PCD_Start>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc90:	7bfb      	ldrb	r3, [r7, #15]
 800cc92:	4618      	mov	r0, r3
 800cc94:	f000 f942 	bl	800cf1c <USBD_Get_USB_Status>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3710      	adds	r7, #16
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b084      	sub	sp, #16
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	4608      	mov	r0, r1
 800ccb0:	4611      	mov	r1, r2
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	70fb      	strb	r3, [r7, #3]
 800ccb8:	460b      	mov	r3, r1
 800ccba:	70bb      	strb	r3, [r7, #2]
 800ccbc:	4613      	mov	r3, r2
 800ccbe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ccce:	78bb      	ldrb	r3, [r7, #2]
 800ccd0:	883a      	ldrh	r2, [r7, #0]
 800ccd2:	78f9      	ldrb	r1, [r7, #3]
 800ccd4:	f7f9 fd35 	bl	8006742 <HAL_PCD_EP_Open>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccdc:	7bfb      	ldrb	r3, [r7, #15]
 800ccde:	4618      	mov	r0, r3
 800cce0:	f000 f91c 	bl	800cf1c <USBD_Get_USB_Status>
 800cce4:	4603      	mov	r3, r0
 800cce6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cce8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3710      	adds	r7, #16
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}

0800ccf2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccf2:	b580      	push	{r7, lr}
 800ccf4:	b084      	sub	sp, #16
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd02:	2300      	movs	r3, #0
 800cd04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd0c:	78fa      	ldrb	r2, [r7, #3]
 800cd0e:	4611      	mov	r1, r2
 800cd10:	4618      	mov	r0, r3
 800cd12:	f7f9 fd80 	bl	8006816 <HAL_PCD_EP_Close>
 800cd16:	4603      	mov	r3, r0
 800cd18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd1a:	7bfb      	ldrb	r3, [r7, #15]
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f000 f8fd 	bl	800cf1c <USBD_Get_USB_Status>
 800cd22:	4603      	mov	r3, r0
 800cd24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd26:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3710      	adds	r7, #16
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd40:	2300      	movs	r3, #0
 800cd42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd4a:	78fa      	ldrb	r2, [r7, #3]
 800cd4c:	4611      	mov	r1, r2
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7f9 fe38 	bl	80069c4 <HAL_PCD_EP_SetStall>
 800cd54:	4603      	mov	r3, r0
 800cd56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd58:	7bfb      	ldrb	r3, [r7, #15]
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f000 f8de 	bl	800cf1c <USBD_Get_USB_Status>
 800cd60:	4603      	mov	r3, r0
 800cd62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd64:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3710      	adds	r7, #16
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}

0800cd6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b084      	sub	sp, #16
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
 800cd76:	460b      	mov	r3, r1
 800cd78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd88:	78fa      	ldrb	r2, [r7, #3]
 800cd8a:	4611      	mov	r1, r2
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7f9 fe7c 	bl	8006a8a <HAL_PCD_EP_ClrStall>
 800cd92:	4603      	mov	r3, r0
 800cd94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd96:	7bfb      	ldrb	r3, [r7, #15]
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f000 f8bf 	bl	800cf1c <USBD_Get_USB_Status>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cda2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b085      	sub	sp, #20
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cdbe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cdc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	da0b      	bge.n	800cde0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cdc8:	78fb      	ldrb	r3, [r7, #3]
 800cdca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cdce:	68f9      	ldr	r1, [r7, #12]
 800cdd0:	4613      	mov	r3, r2
 800cdd2:	00db      	lsls	r3, r3, #3
 800cdd4:	4413      	add	r3, r2
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	440b      	add	r3, r1
 800cdda:	3316      	adds	r3, #22
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	e00b      	b.n	800cdf8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cde0:	78fb      	ldrb	r3, [r7, #3]
 800cde2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cde6:	68f9      	ldr	r1, [r7, #12]
 800cde8:	4613      	mov	r3, r2
 800cdea:	00db      	lsls	r3, r3, #3
 800cdec:	4413      	add	r3, r2
 800cdee:	009b      	lsls	r3, r3, #2
 800cdf0:	440b      	add	r3, r1
 800cdf2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800cdf6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3714      	adds	r7, #20
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	460b      	mov	r3, r1
 800ce0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce10:	2300      	movs	r3, #0
 800ce12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce14:	2300      	movs	r3, #0
 800ce16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce1e:	78fa      	ldrb	r2, [r7, #3]
 800ce20:	4611      	mov	r1, r2
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7f9 fc69 	bl	80066fa <HAL_PCD_SetAddress>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce2c:	7bfb      	ldrb	r3, [r7, #15]
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f000 f874 	bl	800cf1c <USBD_Get_USB_Status>
 800ce34:	4603      	mov	r3, r0
 800ce36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce38:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3710      	adds	r7, #16
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}

0800ce42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce42:	b580      	push	{r7, lr}
 800ce44:	b086      	sub	sp, #24
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	60f8      	str	r0, [r7, #12]
 800ce4a:	607a      	str	r2, [r7, #4]
 800ce4c:	603b      	str	r3, [r7, #0]
 800ce4e:	460b      	mov	r3, r1
 800ce50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce52:	2300      	movs	r3, #0
 800ce54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce56:	2300      	movs	r3, #0
 800ce58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ce60:	7af9      	ldrb	r1, [r7, #11]
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	f7f9 fd73 	bl	8006950 <HAL_PCD_EP_Transmit>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce6e:	7dfb      	ldrb	r3, [r7, #23]
 800ce70:	4618      	mov	r0, r3
 800ce72:	f000 f853 	bl	800cf1c <USBD_Get_USB_Status>
 800ce76:	4603      	mov	r3, r0
 800ce78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce7a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3718      	adds	r7, #24
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b086      	sub	sp, #24
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	60f8      	str	r0, [r7, #12]
 800ce8c:	607a      	str	r2, [r7, #4]
 800ce8e:	603b      	str	r3, [r7, #0]
 800ce90:	460b      	mov	r3, r1
 800ce92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce94:	2300      	movs	r3, #0
 800ce96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cea2:	7af9      	ldrb	r1, [r7, #11]
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	687a      	ldr	r2, [r7, #4]
 800cea8:	f7f9 fcff 	bl	80068aa <HAL_PCD_EP_Receive>
 800ceac:	4603      	mov	r3, r0
 800ceae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ceb0:	7dfb      	ldrb	r3, [r7, #23]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f000 f832 	bl	800cf1c <USBD_Get_USB_Status>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cebc:	7dbb      	ldrb	r3, [r7, #22]
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3718      	adds	r7, #24
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}

0800cec6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cec6:	b580      	push	{r7, lr}
 800cec8:	b082      	sub	sp, #8
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
 800cece:	460b      	mov	r3, r1
 800ced0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ced8:	78fa      	ldrb	r2, [r7, #3]
 800ceda:	4611      	mov	r1, r2
 800cedc:	4618      	mov	r0, r3
 800cede:	f7f9 fd1f 	bl	8006920 <HAL_PCD_EP_GetRxCount>
 800cee2:	4603      	mov	r3, r0
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3708      	adds	r7, #8
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cef4:	4b03      	ldr	r3, [pc, #12]	@ (800cf04 <USBD_static_malloc+0x18>)
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	370c      	adds	r7, #12
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	200020c4 	.word	0x200020c4

0800cf08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b083      	sub	sp, #12
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]

}
 800cf10:	bf00      	nop
 800cf12:	370c      	adds	r7, #12
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr

0800cf1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	4603      	mov	r3, r0
 800cf24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf26:	2300      	movs	r3, #0
 800cf28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf2a:	79fb      	ldrb	r3, [r7, #7]
 800cf2c:	2b03      	cmp	r3, #3
 800cf2e:	d817      	bhi.n	800cf60 <USBD_Get_USB_Status+0x44>
 800cf30:	a201      	add	r2, pc, #4	@ (adr r2, 800cf38 <USBD_Get_USB_Status+0x1c>)
 800cf32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf36:	bf00      	nop
 800cf38:	0800cf49 	.word	0x0800cf49
 800cf3c:	0800cf4f 	.word	0x0800cf4f
 800cf40:	0800cf55 	.word	0x0800cf55
 800cf44:	0800cf5b 	.word	0x0800cf5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf4c:	e00b      	b.n	800cf66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf4e:	2303      	movs	r3, #3
 800cf50:	73fb      	strb	r3, [r7, #15]
    break;
 800cf52:	e008      	b.n	800cf66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf54:	2301      	movs	r3, #1
 800cf56:	73fb      	strb	r3, [r7, #15]
    break;
 800cf58:	e005      	b.n	800cf66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf5a:	2303      	movs	r3, #3
 800cf5c:	73fb      	strb	r3, [r7, #15]
    break;
 800cf5e:	e002      	b.n	800cf66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cf60:	2303      	movs	r3, #3
 800cf62:	73fb      	strb	r3, [r7, #15]
    break;
 800cf64:	bf00      	nop
  }
  return usb_status;
 800cf66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3714      	adds	r7, #20
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr

0800cf74 <swapfunc>:
 800cf74:	2b02      	cmp	r3, #2
 800cf76:	b510      	push	{r4, lr}
 800cf78:	d00a      	beq.n	800cf90 <swapfunc+0x1c>
 800cf7a:	0892      	lsrs	r2, r2, #2
 800cf7c:	3a01      	subs	r2, #1
 800cf7e:	6803      	ldr	r3, [r0, #0]
 800cf80:	680c      	ldr	r4, [r1, #0]
 800cf82:	f840 4b04 	str.w	r4, [r0], #4
 800cf86:	2a00      	cmp	r2, #0
 800cf88:	f841 3b04 	str.w	r3, [r1], #4
 800cf8c:	dcf6      	bgt.n	800cf7c <swapfunc+0x8>
 800cf8e:	bd10      	pop	{r4, pc}
 800cf90:	4402      	add	r2, r0
 800cf92:	780c      	ldrb	r4, [r1, #0]
 800cf94:	7803      	ldrb	r3, [r0, #0]
 800cf96:	f800 4b01 	strb.w	r4, [r0], #1
 800cf9a:	f801 3b01 	strb.w	r3, [r1], #1
 800cf9e:	1a13      	subs	r3, r2, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	dcf6      	bgt.n	800cf92 <swapfunc+0x1e>
 800cfa4:	e7f3      	b.n	800cf8e <swapfunc+0x1a>

0800cfa6 <med3.constprop.0>:
 800cfa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfa8:	460f      	mov	r7, r1
 800cfaa:	4616      	mov	r6, r2
 800cfac:	4604      	mov	r4, r0
 800cfae:	461d      	mov	r5, r3
 800cfb0:	4798      	blx	r3
 800cfb2:	2800      	cmp	r0, #0
 800cfb4:	4631      	mov	r1, r6
 800cfb6:	4638      	mov	r0, r7
 800cfb8:	da0c      	bge.n	800cfd4 <med3.constprop.0+0x2e>
 800cfba:	47a8      	blx	r5
 800cfbc:	2800      	cmp	r0, #0
 800cfbe:	da02      	bge.n	800cfc6 <med3.constprop.0+0x20>
 800cfc0:	463c      	mov	r4, r7
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfc6:	4631      	mov	r1, r6
 800cfc8:	4620      	mov	r0, r4
 800cfca:	47a8      	blx	r5
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	daf8      	bge.n	800cfc2 <med3.constprop.0+0x1c>
 800cfd0:	4634      	mov	r4, r6
 800cfd2:	e7f6      	b.n	800cfc2 <med3.constprop.0+0x1c>
 800cfd4:	47a8      	blx	r5
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	dcf2      	bgt.n	800cfc0 <med3.constprop.0+0x1a>
 800cfda:	4631      	mov	r1, r6
 800cfdc:	4620      	mov	r0, r4
 800cfde:	47a8      	blx	r5
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	daf5      	bge.n	800cfd0 <med3.constprop.0+0x2a>
 800cfe4:	e7ed      	b.n	800cfc2 <med3.constprop.0+0x1c>

0800cfe6 <qsort>:
 800cfe6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfea:	b095      	sub	sp, #84	@ 0x54
 800cfec:	4606      	mov	r6, r0
 800cfee:	9300      	str	r3, [sp, #0]
 800cff0:	ea40 0302 	orr.w	r3, r0, r2
 800cff4:	079b      	lsls	r3, r3, #30
 800cff6:	4614      	mov	r4, r2
 800cff8:	d118      	bne.n	800d02c <qsort+0x46>
 800cffa:	f1b2 0804 	subs.w	r8, r2, #4
 800cffe:	bf18      	it	ne
 800d000:	f04f 0801 	movne.w	r8, #1
 800d004:	2300      	movs	r3, #0
 800d006:	9301      	str	r3, [sp, #4]
 800d008:	fb04 f701 	mul.w	r7, r4, r1
 800d00c:	19f3      	adds	r3, r6, r7
 800d00e:	2906      	cmp	r1, #6
 800d010:	eb06 0b04 	add.w	fp, r6, r4
 800d014:	9302      	str	r3, [sp, #8]
 800d016:	d828      	bhi.n	800d06a <qsort+0x84>
 800d018:	9b02      	ldr	r3, [sp, #8]
 800d01a:	459b      	cmp	fp, r3
 800d01c:	d310      	bcc.n	800d040 <qsort+0x5a>
 800d01e:	9b01      	ldr	r3, [sp, #4]
 800d020:	2b00      	cmp	r3, #0
 800d022:	f040 8117 	bne.w	800d254 <qsort+0x26e>
 800d026:	b015      	add	sp, #84	@ 0x54
 800d028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d02c:	f04f 0802 	mov.w	r8, #2
 800d030:	e7e8      	b.n	800d004 <qsort+0x1e>
 800d032:	4643      	mov	r3, r8
 800d034:	4622      	mov	r2, r4
 800d036:	4639      	mov	r1, r7
 800d038:	4628      	mov	r0, r5
 800d03a:	f7ff ff9b 	bl	800cf74 <swapfunc>
 800d03e:	e00f      	b.n	800d060 <qsort+0x7a>
 800d040:	465d      	mov	r5, fp
 800d042:	e00e      	b.n	800d062 <qsort+0x7c>
 800d044:	1b2f      	subs	r7, r5, r4
 800d046:	9b00      	ldr	r3, [sp, #0]
 800d048:	4629      	mov	r1, r5
 800d04a:	4638      	mov	r0, r7
 800d04c:	4798      	blx	r3
 800d04e:	2800      	cmp	r0, #0
 800d050:	dd09      	ble.n	800d066 <qsort+0x80>
 800d052:	f1b8 0f00 	cmp.w	r8, #0
 800d056:	d1ec      	bne.n	800d032 <qsort+0x4c>
 800d058:	682b      	ldr	r3, [r5, #0]
 800d05a:	683a      	ldr	r2, [r7, #0]
 800d05c:	602a      	str	r2, [r5, #0]
 800d05e:	603b      	str	r3, [r7, #0]
 800d060:	463d      	mov	r5, r7
 800d062:	42ae      	cmp	r6, r5
 800d064:	d3ee      	bcc.n	800d044 <qsort+0x5e>
 800d066:	44a3      	add	fp, r4
 800d068:	e7d6      	b.n	800d018 <qsort+0x32>
 800d06a:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800d06e:	1b3f      	subs	r7, r7, r4
 800d070:	2907      	cmp	r1, #7
 800d072:	fb04 6909 	mla	r9, r4, r9, r6
 800d076:	4437      	add	r7, r6
 800d078:	d021      	beq.n	800d0be <qsort+0xd8>
 800d07a:	2928      	cmp	r1, #40	@ 0x28
 800d07c:	d944      	bls.n	800d108 <qsort+0x122>
 800d07e:	08cd      	lsrs	r5, r1, #3
 800d080:	4365      	muls	r5, r4
 800d082:	9b00      	ldr	r3, [sp, #0]
 800d084:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 800d088:	1971      	adds	r1, r6, r5
 800d08a:	4630      	mov	r0, r6
 800d08c:	f7ff ff8b 	bl	800cfa6 <med3.constprop.0>
 800d090:	4649      	mov	r1, r9
 800d092:	eb09 0205 	add.w	r2, r9, r5
 800d096:	9b00      	ldr	r3, [sp, #0]
 800d098:	4682      	mov	sl, r0
 800d09a:	1b48      	subs	r0, r1, r5
 800d09c:	f7ff ff83 	bl	800cfa6 <med3.constprop.0>
 800d0a0:	463a      	mov	r2, r7
 800d0a2:	9b00      	ldr	r3, [sp, #0]
 800d0a4:	4681      	mov	r9, r0
 800d0a6:	1b79      	subs	r1, r7, r5
 800d0a8:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800d0ac:	f7ff ff7b 	bl	800cfa6 <med3.constprop.0>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	4649      	mov	r1, r9
 800d0b4:	9b00      	ldr	r3, [sp, #0]
 800d0b6:	4650      	mov	r0, sl
 800d0b8:	f7ff ff75 	bl	800cfa6 <med3.constprop.0>
 800d0bc:	4681      	mov	r9, r0
 800d0be:	f1b8 0f00 	cmp.w	r8, #0
 800d0c2:	d124      	bne.n	800d10e <qsort+0x128>
 800d0c4:	6833      	ldr	r3, [r6, #0]
 800d0c6:	f8d9 2000 	ldr.w	r2, [r9]
 800d0ca:	6032      	str	r2, [r6, #0]
 800d0cc:	f8c9 3000 	str.w	r3, [r9]
 800d0d0:	46d9      	mov	r9, fp
 800d0d2:	46ba      	mov	sl, r7
 800d0d4:	465d      	mov	r5, fp
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	45b9      	cmp	r9, r7
 800d0da:	d857      	bhi.n	800d18c <qsort+0x1a6>
 800d0dc:	9303      	str	r3, [sp, #12]
 800d0de:	4631      	mov	r1, r6
 800d0e0:	9b00      	ldr	r3, [sp, #0]
 800d0e2:	4648      	mov	r0, r9
 800d0e4:	4798      	blx	r3
 800d0e6:	2800      	cmp	r0, #0
 800d0e8:	9b03      	ldr	r3, [sp, #12]
 800d0ea:	dc2c      	bgt.n	800d146 <qsort+0x160>
 800d0ec:	d10a      	bne.n	800d104 <qsort+0x11e>
 800d0ee:	f1b8 0f00 	cmp.w	r8, #0
 800d0f2:	d113      	bne.n	800d11c <qsort+0x136>
 800d0f4:	682b      	ldr	r3, [r5, #0]
 800d0f6:	f8d9 2000 	ldr.w	r2, [r9]
 800d0fa:	602a      	str	r2, [r5, #0]
 800d0fc:	f8c9 3000 	str.w	r3, [r9]
 800d100:	4425      	add	r5, r4
 800d102:	2301      	movs	r3, #1
 800d104:	44a1      	add	r9, r4
 800d106:	e7e7      	b.n	800d0d8 <qsort+0xf2>
 800d108:	463a      	mov	r2, r7
 800d10a:	46b2      	mov	sl, r6
 800d10c:	e7d1      	b.n	800d0b2 <qsort+0xcc>
 800d10e:	4643      	mov	r3, r8
 800d110:	4622      	mov	r2, r4
 800d112:	4649      	mov	r1, r9
 800d114:	4630      	mov	r0, r6
 800d116:	f7ff ff2d 	bl	800cf74 <swapfunc>
 800d11a:	e7d9      	b.n	800d0d0 <qsort+0xea>
 800d11c:	4643      	mov	r3, r8
 800d11e:	4622      	mov	r2, r4
 800d120:	4649      	mov	r1, r9
 800d122:	4628      	mov	r0, r5
 800d124:	f7ff ff26 	bl	800cf74 <swapfunc>
 800d128:	e7ea      	b.n	800d100 <qsort+0x11a>
 800d12a:	d10b      	bne.n	800d144 <qsort+0x15e>
 800d12c:	f1b8 0f00 	cmp.w	r8, #0
 800d130:	d11e      	bne.n	800d170 <qsort+0x18a>
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	f8da 2000 	ldr.w	r2, [sl]
 800d138:	603a      	str	r2, [r7, #0]
 800d13a:	f8ca 3000 	str.w	r3, [sl]
 800d13e:	ebaa 0a04 	sub.w	sl, sl, r4
 800d142:	2301      	movs	r3, #1
 800d144:	1b3f      	subs	r7, r7, r4
 800d146:	45b9      	cmp	r9, r7
 800d148:	d820      	bhi.n	800d18c <qsort+0x1a6>
 800d14a:	9303      	str	r3, [sp, #12]
 800d14c:	4631      	mov	r1, r6
 800d14e:	9b00      	ldr	r3, [sp, #0]
 800d150:	4638      	mov	r0, r7
 800d152:	4798      	blx	r3
 800d154:	2800      	cmp	r0, #0
 800d156:	9b03      	ldr	r3, [sp, #12]
 800d158:	dae7      	bge.n	800d12a <qsort+0x144>
 800d15a:	f1b8 0f00 	cmp.w	r8, #0
 800d15e:	d10e      	bne.n	800d17e <qsort+0x198>
 800d160:	f8d9 3000 	ldr.w	r3, [r9]
 800d164:	683a      	ldr	r2, [r7, #0]
 800d166:	f8c9 2000 	str.w	r2, [r9]
 800d16a:	603b      	str	r3, [r7, #0]
 800d16c:	1b3f      	subs	r7, r7, r4
 800d16e:	e7c8      	b.n	800d102 <qsort+0x11c>
 800d170:	4643      	mov	r3, r8
 800d172:	4622      	mov	r2, r4
 800d174:	4651      	mov	r1, sl
 800d176:	4638      	mov	r0, r7
 800d178:	f7ff fefc 	bl	800cf74 <swapfunc>
 800d17c:	e7df      	b.n	800d13e <qsort+0x158>
 800d17e:	4643      	mov	r3, r8
 800d180:	4622      	mov	r2, r4
 800d182:	4639      	mov	r1, r7
 800d184:	4648      	mov	r0, r9
 800d186:	f7ff fef5 	bl	800cf74 <swapfunc>
 800d18a:	e7ef      	b.n	800d16c <qsort+0x186>
 800d18c:	b9fb      	cbnz	r3, 800d1ce <qsort+0x1e8>
 800d18e:	9b02      	ldr	r3, [sp, #8]
 800d190:	459b      	cmp	fp, r3
 800d192:	f4bf af44 	bcs.w	800d01e <qsort+0x38>
 800d196:	465d      	mov	r5, fp
 800d198:	e015      	b.n	800d1c6 <qsort+0x1e0>
 800d19a:	4643      	mov	r3, r8
 800d19c:	4622      	mov	r2, r4
 800d19e:	4639      	mov	r1, r7
 800d1a0:	4628      	mov	r0, r5
 800d1a2:	f7ff fee7 	bl	800cf74 <swapfunc>
 800d1a6:	e00d      	b.n	800d1c4 <qsort+0x1de>
 800d1a8:	1b2f      	subs	r7, r5, r4
 800d1aa:	9b00      	ldr	r3, [sp, #0]
 800d1ac:	4629      	mov	r1, r5
 800d1ae:	4638      	mov	r0, r7
 800d1b0:	4798      	blx	r3
 800d1b2:	2800      	cmp	r0, #0
 800d1b4:	dd09      	ble.n	800d1ca <qsort+0x1e4>
 800d1b6:	f1b8 0f00 	cmp.w	r8, #0
 800d1ba:	d1ee      	bne.n	800d19a <qsort+0x1b4>
 800d1bc:	682b      	ldr	r3, [r5, #0]
 800d1be:	683a      	ldr	r2, [r7, #0]
 800d1c0:	602a      	str	r2, [r5, #0]
 800d1c2:	603b      	str	r3, [r7, #0]
 800d1c4:	463d      	mov	r5, r7
 800d1c6:	42ae      	cmp	r6, r5
 800d1c8:	d3ee      	bcc.n	800d1a8 <qsort+0x1c2>
 800d1ca:	44a3      	add	fp, r4
 800d1cc:	e7df      	b.n	800d18e <qsort+0x1a8>
 800d1ce:	eba9 0b05 	sub.w	fp, r9, r5
 800d1d2:	1baa      	subs	r2, r5, r6
 800d1d4:	455a      	cmp	r2, fp
 800d1d6:	bfa8      	it	ge
 800d1d8:	465a      	movge	r2, fp
 800d1da:	b12a      	cbz	r2, 800d1e8 <qsort+0x202>
 800d1dc:	4643      	mov	r3, r8
 800d1de:	eba9 0102 	sub.w	r1, r9, r2
 800d1e2:	4630      	mov	r0, r6
 800d1e4:	f7ff fec6 	bl	800cf74 <swapfunc>
 800d1e8:	9b02      	ldr	r3, [sp, #8]
 800d1ea:	eba3 020a 	sub.w	r2, r3, sl
 800d1ee:	ebaa 0507 	sub.w	r5, sl, r7
 800d1f2:	1b12      	subs	r2, r2, r4
 800d1f4:	42aa      	cmp	r2, r5
 800d1f6:	bf28      	it	cs
 800d1f8:	462a      	movcs	r2, r5
 800d1fa:	b12a      	cbz	r2, 800d208 <qsort+0x222>
 800d1fc:	9902      	ldr	r1, [sp, #8]
 800d1fe:	4643      	mov	r3, r8
 800d200:	1a89      	subs	r1, r1, r2
 800d202:	4648      	mov	r0, r9
 800d204:	f7ff feb6 	bl	800cf74 <swapfunc>
 800d208:	9b02      	ldr	r3, [sp, #8]
 800d20a:	455d      	cmp	r5, fp
 800d20c:	465f      	mov	r7, fp
 800d20e:	eba3 0005 	sub.w	r0, r3, r5
 800d212:	d904      	bls.n	800d21e <qsort+0x238>
 800d214:	4633      	mov	r3, r6
 800d216:	462f      	mov	r7, r5
 800d218:	4606      	mov	r6, r0
 800d21a:	465d      	mov	r5, fp
 800d21c:	4618      	mov	r0, r3
 800d21e:	42a5      	cmp	r5, r4
 800d220:	d921      	bls.n	800d266 <qsort+0x280>
 800d222:	fbb5 f1f4 	udiv	r1, r5, r4
 800d226:	9b01      	ldr	r3, [sp, #4]
 800d228:	2b07      	cmp	r3, #7
 800d22a:	d80d      	bhi.n	800d248 <qsort+0x262>
 800d22c:	fbb7 f7f4 	udiv	r7, r7, r4
 800d230:	aa14      	add	r2, sp, #80	@ 0x50
 800d232:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d236:	f843 6c40 	str.w	r6, [r3, #-64]
 800d23a:	f843 7c3c 	str.w	r7, [r3, #-60]
 800d23e:	9b01      	ldr	r3, [sp, #4]
 800d240:	3301      	adds	r3, #1
 800d242:	9301      	str	r3, [sp, #4]
 800d244:	4606      	mov	r6, r0
 800d246:	e6df      	b.n	800d008 <qsort+0x22>
 800d248:	9b00      	ldr	r3, [sp, #0]
 800d24a:	4622      	mov	r2, r4
 800d24c:	f7ff fecb 	bl	800cfe6 <qsort>
 800d250:	42a7      	cmp	r7, r4
 800d252:	d80b      	bhi.n	800d26c <qsort+0x286>
 800d254:	9b01      	ldr	r3, [sp, #4]
 800d256:	aa14      	add	r2, sp, #80	@ 0x50
 800d258:	3b01      	subs	r3, #1
 800d25a:	9301      	str	r3, [sp, #4]
 800d25c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d260:	e953 0110 	ldrd	r0, r1, [r3, #-64]	@ 0x40
 800d264:	e7ee      	b.n	800d244 <qsort+0x25e>
 800d266:	42a7      	cmp	r7, r4
 800d268:	f67f aed9 	bls.w	800d01e <qsort+0x38>
 800d26c:	fbb7 f1f4 	udiv	r1, r7, r4
 800d270:	4630      	mov	r0, r6
 800d272:	e7e7      	b.n	800d244 <qsort+0x25e>

0800d274 <__cvt>:
 800d274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d278:	ec57 6b10 	vmov	r6, r7, d0
 800d27c:	2f00      	cmp	r7, #0
 800d27e:	460c      	mov	r4, r1
 800d280:	4619      	mov	r1, r3
 800d282:	463b      	mov	r3, r7
 800d284:	bfbb      	ittet	lt
 800d286:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d28a:	461f      	movlt	r7, r3
 800d28c:	2300      	movge	r3, #0
 800d28e:	232d      	movlt	r3, #45	@ 0x2d
 800d290:	700b      	strb	r3, [r1, #0]
 800d292:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d294:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d298:	4691      	mov	r9, r2
 800d29a:	f023 0820 	bic.w	r8, r3, #32
 800d29e:	bfbc      	itt	lt
 800d2a0:	4632      	movlt	r2, r6
 800d2a2:	4616      	movlt	r6, r2
 800d2a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d2a8:	d005      	beq.n	800d2b6 <__cvt+0x42>
 800d2aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d2ae:	d100      	bne.n	800d2b2 <__cvt+0x3e>
 800d2b0:	3401      	adds	r4, #1
 800d2b2:	2102      	movs	r1, #2
 800d2b4:	e000      	b.n	800d2b8 <__cvt+0x44>
 800d2b6:	2103      	movs	r1, #3
 800d2b8:	ab03      	add	r3, sp, #12
 800d2ba:	9301      	str	r3, [sp, #4]
 800d2bc:	ab02      	add	r3, sp, #8
 800d2be:	9300      	str	r3, [sp, #0]
 800d2c0:	ec47 6b10 	vmov	d0, r6, r7
 800d2c4:	4653      	mov	r3, sl
 800d2c6:	4622      	mov	r2, r4
 800d2c8:	f000 fe3a 	bl	800df40 <_dtoa_r>
 800d2cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d2d0:	4605      	mov	r5, r0
 800d2d2:	d119      	bne.n	800d308 <__cvt+0x94>
 800d2d4:	f019 0f01 	tst.w	r9, #1
 800d2d8:	d00e      	beq.n	800d2f8 <__cvt+0x84>
 800d2da:	eb00 0904 	add.w	r9, r0, r4
 800d2de:	2200      	movs	r2, #0
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	4639      	mov	r1, r7
 800d2e6:	f7f3 fbef 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2ea:	b108      	cbz	r0, 800d2f0 <__cvt+0x7c>
 800d2ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800d2f0:	2230      	movs	r2, #48	@ 0x30
 800d2f2:	9b03      	ldr	r3, [sp, #12]
 800d2f4:	454b      	cmp	r3, r9
 800d2f6:	d31e      	bcc.n	800d336 <__cvt+0xc2>
 800d2f8:	9b03      	ldr	r3, [sp, #12]
 800d2fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2fc:	1b5b      	subs	r3, r3, r5
 800d2fe:	4628      	mov	r0, r5
 800d300:	6013      	str	r3, [r2, #0]
 800d302:	b004      	add	sp, #16
 800d304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d308:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d30c:	eb00 0904 	add.w	r9, r0, r4
 800d310:	d1e5      	bne.n	800d2de <__cvt+0x6a>
 800d312:	7803      	ldrb	r3, [r0, #0]
 800d314:	2b30      	cmp	r3, #48	@ 0x30
 800d316:	d10a      	bne.n	800d32e <__cvt+0xba>
 800d318:	2200      	movs	r2, #0
 800d31a:	2300      	movs	r3, #0
 800d31c:	4630      	mov	r0, r6
 800d31e:	4639      	mov	r1, r7
 800d320:	f7f3 fbd2 	bl	8000ac8 <__aeabi_dcmpeq>
 800d324:	b918      	cbnz	r0, 800d32e <__cvt+0xba>
 800d326:	f1c4 0401 	rsb	r4, r4, #1
 800d32a:	f8ca 4000 	str.w	r4, [sl]
 800d32e:	f8da 3000 	ldr.w	r3, [sl]
 800d332:	4499      	add	r9, r3
 800d334:	e7d3      	b.n	800d2de <__cvt+0x6a>
 800d336:	1c59      	adds	r1, r3, #1
 800d338:	9103      	str	r1, [sp, #12]
 800d33a:	701a      	strb	r2, [r3, #0]
 800d33c:	e7d9      	b.n	800d2f2 <__cvt+0x7e>

0800d33e <__exponent>:
 800d33e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d340:	2900      	cmp	r1, #0
 800d342:	bfba      	itte	lt
 800d344:	4249      	neglt	r1, r1
 800d346:	232d      	movlt	r3, #45	@ 0x2d
 800d348:	232b      	movge	r3, #43	@ 0x2b
 800d34a:	2909      	cmp	r1, #9
 800d34c:	7002      	strb	r2, [r0, #0]
 800d34e:	7043      	strb	r3, [r0, #1]
 800d350:	dd29      	ble.n	800d3a6 <__exponent+0x68>
 800d352:	f10d 0307 	add.w	r3, sp, #7
 800d356:	461d      	mov	r5, r3
 800d358:	270a      	movs	r7, #10
 800d35a:	461a      	mov	r2, r3
 800d35c:	fbb1 f6f7 	udiv	r6, r1, r7
 800d360:	fb07 1416 	mls	r4, r7, r6, r1
 800d364:	3430      	adds	r4, #48	@ 0x30
 800d366:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d36a:	460c      	mov	r4, r1
 800d36c:	2c63      	cmp	r4, #99	@ 0x63
 800d36e:	f103 33ff 	add.w	r3, r3, #4294967295
 800d372:	4631      	mov	r1, r6
 800d374:	dcf1      	bgt.n	800d35a <__exponent+0x1c>
 800d376:	3130      	adds	r1, #48	@ 0x30
 800d378:	1e94      	subs	r4, r2, #2
 800d37a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d37e:	1c41      	adds	r1, r0, #1
 800d380:	4623      	mov	r3, r4
 800d382:	42ab      	cmp	r3, r5
 800d384:	d30a      	bcc.n	800d39c <__exponent+0x5e>
 800d386:	f10d 0309 	add.w	r3, sp, #9
 800d38a:	1a9b      	subs	r3, r3, r2
 800d38c:	42ac      	cmp	r4, r5
 800d38e:	bf88      	it	hi
 800d390:	2300      	movhi	r3, #0
 800d392:	3302      	adds	r3, #2
 800d394:	4403      	add	r3, r0
 800d396:	1a18      	subs	r0, r3, r0
 800d398:	b003      	add	sp, #12
 800d39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d39c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d3a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d3a4:	e7ed      	b.n	800d382 <__exponent+0x44>
 800d3a6:	2330      	movs	r3, #48	@ 0x30
 800d3a8:	3130      	adds	r1, #48	@ 0x30
 800d3aa:	7083      	strb	r3, [r0, #2]
 800d3ac:	70c1      	strb	r1, [r0, #3]
 800d3ae:	1d03      	adds	r3, r0, #4
 800d3b0:	e7f1      	b.n	800d396 <__exponent+0x58>
	...

0800d3b4 <_printf_float>:
 800d3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b8:	b08d      	sub	sp, #52	@ 0x34
 800d3ba:	460c      	mov	r4, r1
 800d3bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d3c0:	4616      	mov	r6, r2
 800d3c2:	461f      	mov	r7, r3
 800d3c4:	4605      	mov	r5, r0
 800d3c6:	f000 fcbb 	bl	800dd40 <_localeconv_r>
 800d3ca:	6803      	ldr	r3, [r0, #0]
 800d3cc:	9304      	str	r3, [sp, #16]
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7f2 ff4e 	bl	8000270 <strlen>
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3d8:	f8d8 3000 	ldr.w	r3, [r8]
 800d3dc:	9005      	str	r0, [sp, #20]
 800d3de:	3307      	adds	r3, #7
 800d3e0:	f023 0307 	bic.w	r3, r3, #7
 800d3e4:	f103 0208 	add.w	r2, r3, #8
 800d3e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d3ec:	f8d4 b000 	ldr.w	fp, [r4]
 800d3f0:	f8c8 2000 	str.w	r2, [r8]
 800d3f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d3f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d3fc:	9307      	str	r3, [sp, #28]
 800d3fe:	f8cd 8018 	str.w	r8, [sp, #24]
 800d402:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d406:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d40a:	4b9c      	ldr	r3, [pc, #624]	@ (800d67c <_printf_float+0x2c8>)
 800d40c:	f04f 32ff 	mov.w	r2, #4294967295
 800d410:	f7f3 fb8c 	bl	8000b2c <__aeabi_dcmpun>
 800d414:	bb70      	cbnz	r0, 800d474 <_printf_float+0xc0>
 800d416:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d41a:	4b98      	ldr	r3, [pc, #608]	@ (800d67c <_printf_float+0x2c8>)
 800d41c:	f04f 32ff 	mov.w	r2, #4294967295
 800d420:	f7f3 fb66 	bl	8000af0 <__aeabi_dcmple>
 800d424:	bb30      	cbnz	r0, 800d474 <_printf_float+0xc0>
 800d426:	2200      	movs	r2, #0
 800d428:	2300      	movs	r3, #0
 800d42a:	4640      	mov	r0, r8
 800d42c:	4649      	mov	r1, r9
 800d42e:	f7f3 fb55 	bl	8000adc <__aeabi_dcmplt>
 800d432:	b110      	cbz	r0, 800d43a <_printf_float+0x86>
 800d434:	232d      	movs	r3, #45	@ 0x2d
 800d436:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d43a:	4a91      	ldr	r2, [pc, #580]	@ (800d680 <_printf_float+0x2cc>)
 800d43c:	4b91      	ldr	r3, [pc, #580]	@ (800d684 <_printf_float+0x2d0>)
 800d43e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d442:	bf94      	ite	ls
 800d444:	4690      	movls	r8, r2
 800d446:	4698      	movhi	r8, r3
 800d448:	2303      	movs	r3, #3
 800d44a:	6123      	str	r3, [r4, #16]
 800d44c:	f02b 0304 	bic.w	r3, fp, #4
 800d450:	6023      	str	r3, [r4, #0]
 800d452:	f04f 0900 	mov.w	r9, #0
 800d456:	9700      	str	r7, [sp, #0]
 800d458:	4633      	mov	r3, r6
 800d45a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d45c:	4621      	mov	r1, r4
 800d45e:	4628      	mov	r0, r5
 800d460:	f000 f9d2 	bl	800d808 <_printf_common>
 800d464:	3001      	adds	r0, #1
 800d466:	f040 808d 	bne.w	800d584 <_printf_float+0x1d0>
 800d46a:	f04f 30ff 	mov.w	r0, #4294967295
 800d46e:	b00d      	add	sp, #52	@ 0x34
 800d470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d474:	4642      	mov	r2, r8
 800d476:	464b      	mov	r3, r9
 800d478:	4640      	mov	r0, r8
 800d47a:	4649      	mov	r1, r9
 800d47c:	f7f3 fb56 	bl	8000b2c <__aeabi_dcmpun>
 800d480:	b140      	cbz	r0, 800d494 <_printf_float+0xe0>
 800d482:	464b      	mov	r3, r9
 800d484:	2b00      	cmp	r3, #0
 800d486:	bfbc      	itt	lt
 800d488:	232d      	movlt	r3, #45	@ 0x2d
 800d48a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d48e:	4a7e      	ldr	r2, [pc, #504]	@ (800d688 <_printf_float+0x2d4>)
 800d490:	4b7e      	ldr	r3, [pc, #504]	@ (800d68c <_printf_float+0x2d8>)
 800d492:	e7d4      	b.n	800d43e <_printf_float+0x8a>
 800d494:	6863      	ldr	r3, [r4, #4]
 800d496:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d49a:	9206      	str	r2, [sp, #24]
 800d49c:	1c5a      	adds	r2, r3, #1
 800d49e:	d13b      	bne.n	800d518 <_printf_float+0x164>
 800d4a0:	2306      	movs	r3, #6
 800d4a2:	6063      	str	r3, [r4, #4]
 800d4a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	6022      	str	r2, [r4, #0]
 800d4ac:	9303      	str	r3, [sp, #12]
 800d4ae:	ab0a      	add	r3, sp, #40	@ 0x28
 800d4b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d4b4:	ab09      	add	r3, sp, #36	@ 0x24
 800d4b6:	9300      	str	r3, [sp, #0]
 800d4b8:	6861      	ldr	r1, [r4, #4]
 800d4ba:	ec49 8b10 	vmov	d0, r8, r9
 800d4be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	f7ff fed6 	bl	800d274 <__cvt>
 800d4c8:	9b06      	ldr	r3, [sp, #24]
 800d4ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d4cc:	2b47      	cmp	r3, #71	@ 0x47
 800d4ce:	4680      	mov	r8, r0
 800d4d0:	d129      	bne.n	800d526 <_printf_float+0x172>
 800d4d2:	1cc8      	adds	r0, r1, #3
 800d4d4:	db02      	blt.n	800d4dc <_printf_float+0x128>
 800d4d6:	6863      	ldr	r3, [r4, #4]
 800d4d8:	4299      	cmp	r1, r3
 800d4da:	dd41      	ble.n	800d560 <_printf_float+0x1ac>
 800d4dc:	f1aa 0a02 	sub.w	sl, sl, #2
 800d4e0:	fa5f fa8a 	uxtb.w	sl, sl
 800d4e4:	3901      	subs	r1, #1
 800d4e6:	4652      	mov	r2, sl
 800d4e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d4ec:	9109      	str	r1, [sp, #36]	@ 0x24
 800d4ee:	f7ff ff26 	bl	800d33e <__exponent>
 800d4f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d4f4:	1813      	adds	r3, r2, r0
 800d4f6:	2a01      	cmp	r2, #1
 800d4f8:	4681      	mov	r9, r0
 800d4fa:	6123      	str	r3, [r4, #16]
 800d4fc:	dc02      	bgt.n	800d504 <_printf_float+0x150>
 800d4fe:	6822      	ldr	r2, [r4, #0]
 800d500:	07d2      	lsls	r2, r2, #31
 800d502:	d501      	bpl.n	800d508 <_printf_float+0x154>
 800d504:	3301      	adds	r3, #1
 800d506:	6123      	str	r3, [r4, #16]
 800d508:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d0a2      	beq.n	800d456 <_printf_float+0xa2>
 800d510:	232d      	movs	r3, #45	@ 0x2d
 800d512:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d516:	e79e      	b.n	800d456 <_printf_float+0xa2>
 800d518:	9a06      	ldr	r2, [sp, #24]
 800d51a:	2a47      	cmp	r2, #71	@ 0x47
 800d51c:	d1c2      	bne.n	800d4a4 <_printf_float+0xf0>
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1c0      	bne.n	800d4a4 <_printf_float+0xf0>
 800d522:	2301      	movs	r3, #1
 800d524:	e7bd      	b.n	800d4a2 <_printf_float+0xee>
 800d526:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d52a:	d9db      	bls.n	800d4e4 <_printf_float+0x130>
 800d52c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d530:	d118      	bne.n	800d564 <_printf_float+0x1b0>
 800d532:	2900      	cmp	r1, #0
 800d534:	6863      	ldr	r3, [r4, #4]
 800d536:	dd0b      	ble.n	800d550 <_printf_float+0x19c>
 800d538:	6121      	str	r1, [r4, #16]
 800d53a:	b913      	cbnz	r3, 800d542 <_printf_float+0x18e>
 800d53c:	6822      	ldr	r2, [r4, #0]
 800d53e:	07d0      	lsls	r0, r2, #31
 800d540:	d502      	bpl.n	800d548 <_printf_float+0x194>
 800d542:	3301      	adds	r3, #1
 800d544:	440b      	add	r3, r1
 800d546:	6123      	str	r3, [r4, #16]
 800d548:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d54a:	f04f 0900 	mov.w	r9, #0
 800d54e:	e7db      	b.n	800d508 <_printf_float+0x154>
 800d550:	b913      	cbnz	r3, 800d558 <_printf_float+0x1a4>
 800d552:	6822      	ldr	r2, [r4, #0]
 800d554:	07d2      	lsls	r2, r2, #31
 800d556:	d501      	bpl.n	800d55c <_printf_float+0x1a8>
 800d558:	3302      	adds	r3, #2
 800d55a:	e7f4      	b.n	800d546 <_printf_float+0x192>
 800d55c:	2301      	movs	r3, #1
 800d55e:	e7f2      	b.n	800d546 <_printf_float+0x192>
 800d560:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d566:	4299      	cmp	r1, r3
 800d568:	db05      	blt.n	800d576 <_printf_float+0x1c2>
 800d56a:	6823      	ldr	r3, [r4, #0]
 800d56c:	6121      	str	r1, [r4, #16]
 800d56e:	07d8      	lsls	r0, r3, #31
 800d570:	d5ea      	bpl.n	800d548 <_printf_float+0x194>
 800d572:	1c4b      	adds	r3, r1, #1
 800d574:	e7e7      	b.n	800d546 <_printf_float+0x192>
 800d576:	2900      	cmp	r1, #0
 800d578:	bfd4      	ite	le
 800d57a:	f1c1 0202 	rsble	r2, r1, #2
 800d57e:	2201      	movgt	r2, #1
 800d580:	4413      	add	r3, r2
 800d582:	e7e0      	b.n	800d546 <_printf_float+0x192>
 800d584:	6823      	ldr	r3, [r4, #0]
 800d586:	055a      	lsls	r2, r3, #21
 800d588:	d407      	bmi.n	800d59a <_printf_float+0x1e6>
 800d58a:	6923      	ldr	r3, [r4, #16]
 800d58c:	4642      	mov	r2, r8
 800d58e:	4631      	mov	r1, r6
 800d590:	4628      	mov	r0, r5
 800d592:	47b8      	blx	r7
 800d594:	3001      	adds	r0, #1
 800d596:	d12b      	bne.n	800d5f0 <_printf_float+0x23c>
 800d598:	e767      	b.n	800d46a <_printf_float+0xb6>
 800d59a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d59e:	f240 80dd 	bls.w	800d75c <_printf_float+0x3a8>
 800d5a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	f7f3 fa8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	d033      	beq.n	800d61a <_printf_float+0x266>
 800d5b2:	4a37      	ldr	r2, [pc, #220]	@ (800d690 <_printf_float+0x2dc>)
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	4631      	mov	r1, r6
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	47b8      	blx	r7
 800d5bc:	3001      	adds	r0, #1
 800d5be:	f43f af54 	beq.w	800d46a <_printf_float+0xb6>
 800d5c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d5c6:	4543      	cmp	r3, r8
 800d5c8:	db02      	blt.n	800d5d0 <_printf_float+0x21c>
 800d5ca:	6823      	ldr	r3, [r4, #0]
 800d5cc:	07d8      	lsls	r0, r3, #31
 800d5ce:	d50f      	bpl.n	800d5f0 <_printf_float+0x23c>
 800d5d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5d4:	4631      	mov	r1, r6
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	47b8      	blx	r7
 800d5da:	3001      	adds	r0, #1
 800d5dc:	f43f af45 	beq.w	800d46a <_printf_float+0xb6>
 800d5e0:	f04f 0900 	mov.w	r9, #0
 800d5e4:	f108 38ff 	add.w	r8, r8, #4294967295
 800d5e8:	f104 0a1a 	add.w	sl, r4, #26
 800d5ec:	45c8      	cmp	r8, r9
 800d5ee:	dc09      	bgt.n	800d604 <_printf_float+0x250>
 800d5f0:	6823      	ldr	r3, [r4, #0]
 800d5f2:	079b      	lsls	r3, r3, #30
 800d5f4:	f100 8103 	bmi.w	800d7fe <_printf_float+0x44a>
 800d5f8:	68e0      	ldr	r0, [r4, #12]
 800d5fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5fc:	4298      	cmp	r0, r3
 800d5fe:	bfb8      	it	lt
 800d600:	4618      	movlt	r0, r3
 800d602:	e734      	b.n	800d46e <_printf_float+0xba>
 800d604:	2301      	movs	r3, #1
 800d606:	4652      	mov	r2, sl
 800d608:	4631      	mov	r1, r6
 800d60a:	4628      	mov	r0, r5
 800d60c:	47b8      	blx	r7
 800d60e:	3001      	adds	r0, #1
 800d610:	f43f af2b 	beq.w	800d46a <_printf_float+0xb6>
 800d614:	f109 0901 	add.w	r9, r9, #1
 800d618:	e7e8      	b.n	800d5ec <_printf_float+0x238>
 800d61a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	dc39      	bgt.n	800d694 <_printf_float+0x2e0>
 800d620:	4a1b      	ldr	r2, [pc, #108]	@ (800d690 <_printf_float+0x2dc>)
 800d622:	2301      	movs	r3, #1
 800d624:	4631      	mov	r1, r6
 800d626:	4628      	mov	r0, r5
 800d628:	47b8      	blx	r7
 800d62a:	3001      	adds	r0, #1
 800d62c:	f43f af1d 	beq.w	800d46a <_printf_float+0xb6>
 800d630:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d634:	ea59 0303 	orrs.w	r3, r9, r3
 800d638:	d102      	bne.n	800d640 <_printf_float+0x28c>
 800d63a:	6823      	ldr	r3, [r4, #0]
 800d63c:	07d9      	lsls	r1, r3, #31
 800d63e:	d5d7      	bpl.n	800d5f0 <_printf_float+0x23c>
 800d640:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d644:	4631      	mov	r1, r6
 800d646:	4628      	mov	r0, r5
 800d648:	47b8      	blx	r7
 800d64a:	3001      	adds	r0, #1
 800d64c:	f43f af0d 	beq.w	800d46a <_printf_float+0xb6>
 800d650:	f04f 0a00 	mov.w	sl, #0
 800d654:	f104 0b1a 	add.w	fp, r4, #26
 800d658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d65a:	425b      	negs	r3, r3
 800d65c:	4553      	cmp	r3, sl
 800d65e:	dc01      	bgt.n	800d664 <_printf_float+0x2b0>
 800d660:	464b      	mov	r3, r9
 800d662:	e793      	b.n	800d58c <_printf_float+0x1d8>
 800d664:	2301      	movs	r3, #1
 800d666:	465a      	mov	r2, fp
 800d668:	4631      	mov	r1, r6
 800d66a:	4628      	mov	r0, r5
 800d66c:	47b8      	blx	r7
 800d66e:	3001      	adds	r0, #1
 800d670:	f43f aefb 	beq.w	800d46a <_printf_float+0xb6>
 800d674:	f10a 0a01 	add.w	sl, sl, #1
 800d678:	e7ee      	b.n	800d658 <_printf_float+0x2a4>
 800d67a:	bf00      	nop
 800d67c:	7fefffff 	.word	0x7fefffff
 800d680:	08010200 	.word	0x08010200
 800d684:	08010204 	.word	0x08010204
 800d688:	08010208 	.word	0x08010208
 800d68c:	0801020c 	.word	0x0801020c
 800d690:	08010210 	.word	0x08010210
 800d694:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d696:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d69a:	4553      	cmp	r3, sl
 800d69c:	bfa8      	it	ge
 800d69e:	4653      	movge	r3, sl
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	4699      	mov	r9, r3
 800d6a4:	dc36      	bgt.n	800d714 <_printf_float+0x360>
 800d6a6:	f04f 0b00 	mov.w	fp, #0
 800d6aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d6ae:	f104 021a 	add.w	r2, r4, #26
 800d6b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d6b4:	9306      	str	r3, [sp, #24]
 800d6b6:	eba3 0309 	sub.w	r3, r3, r9
 800d6ba:	455b      	cmp	r3, fp
 800d6bc:	dc31      	bgt.n	800d722 <_printf_float+0x36e>
 800d6be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6c0:	459a      	cmp	sl, r3
 800d6c2:	dc3a      	bgt.n	800d73a <_printf_float+0x386>
 800d6c4:	6823      	ldr	r3, [r4, #0]
 800d6c6:	07da      	lsls	r2, r3, #31
 800d6c8:	d437      	bmi.n	800d73a <_printf_float+0x386>
 800d6ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6cc:	ebaa 0903 	sub.w	r9, sl, r3
 800d6d0:	9b06      	ldr	r3, [sp, #24]
 800d6d2:	ebaa 0303 	sub.w	r3, sl, r3
 800d6d6:	4599      	cmp	r9, r3
 800d6d8:	bfa8      	it	ge
 800d6da:	4699      	movge	r9, r3
 800d6dc:	f1b9 0f00 	cmp.w	r9, #0
 800d6e0:	dc33      	bgt.n	800d74a <_printf_float+0x396>
 800d6e2:	f04f 0800 	mov.w	r8, #0
 800d6e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d6ea:	f104 0b1a 	add.w	fp, r4, #26
 800d6ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6f0:	ebaa 0303 	sub.w	r3, sl, r3
 800d6f4:	eba3 0309 	sub.w	r3, r3, r9
 800d6f8:	4543      	cmp	r3, r8
 800d6fa:	f77f af79 	ble.w	800d5f0 <_printf_float+0x23c>
 800d6fe:	2301      	movs	r3, #1
 800d700:	465a      	mov	r2, fp
 800d702:	4631      	mov	r1, r6
 800d704:	4628      	mov	r0, r5
 800d706:	47b8      	blx	r7
 800d708:	3001      	adds	r0, #1
 800d70a:	f43f aeae 	beq.w	800d46a <_printf_float+0xb6>
 800d70e:	f108 0801 	add.w	r8, r8, #1
 800d712:	e7ec      	b.n	800d6ee <_printf_float+0x33a>
 800d714:	4642      	mov	r2, r8
 800d716:	4631      	mov	r1, r6
 800d718:	4628      	mov	r0, r5
 800d71a:	47b8      	blx	r7
 800d71c:	3001      	adds	r0, #1
 800d71e:	d1c2      	bne.n	800d6a6 <_printf_float+0x2f2>
 800d720:	e6a3      	b.n	800d46a <_printf_float+0xb6>
 800d722:	2301      	movs	r3, #1
 800d724:	4631      	mov	r1, r6
 800d726:	4628      	mov	r0, r5
 800d728:	9206      	str	r2, [sp, #24]
 800d72a:	47b8      	blx	r7
 800d72c:	3001      	adds	r0, #1
 800d72e:	f43f ae9c 	beq.w	800d46a <_printf_float+0xb6>
 800d732:	9a06      	ldr	r2, [sp, #24]
 800d734:	f10b 0b01 	add.w	fp, fp, #1
 800d738:	e7bb      	b.n	800d6b2 <_printf_float+0x2fe>
 800d73a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d73e:	4631      	mov	r1, r6
 800d740:	4628      	mov	r0, r5
 800d742:	47b8      	blx	r7
 800d744:	3001      	adds	r0, #1
 800d746:	d1c0      	bne.n	800d6ca <_printf_float+0x316>
 800d748:	e68f      	b.n	800d46a <_printf_float+0xb6>
 800d74a:	9a06      	ldr	r2, [sp, #24]
 800d74c:	464b      	mov	r3, r9
 800d74e:	4442      	add	r2, r8
 800d750:	4631      	mov	r1, r6
 800d752:	4628      	mov	r0, r5
 800d754:	47b8      	blx	r7
 800d756:	3001      	adds	r0, #1
 800d758:	d1c3      	bne.n	800d6e2 <_printf_float+0x32e>
 800d75a:	e686      	b.n	800d46a <_printf_float+0xb6>
 800d75c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d760:	f1ba 0f01 	cmp.w	sl, #1
 800d764:	dc01      	bgt.n	800d76a <_printf_float+0x3b6>
 800d766:	07db      	lsls	r3, r3, #31
 800d768:	d536      	bpl.n	800d7d8 <_printf_float+0x424>
 800d76a:	2301      	movs	r3, #1
 800d76c:	4642      	mov	r2, r8
 800d76e:	4631      	mov	r1, r6
 800d770:	4628      	mov	r0, r5
 800d772:	47b8      	blx	r7
 800d774:	3001      	adds	r0, #1
 800d776:	f43f ae78 	beq.w	800d46a <_printf_float+0xb6>
 800d77a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d77e:	4631      	mov	r1, r6
 800d780:	4628      	mov	r0, r5
 800d782:	47b8      	blx	r7
 800d784:	3001      	adds	r0, #1
 800d786:	f43f ae70 	beq.w	800d46a <_printf_float+0xb6>
 800d78a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d78e:	2200      	movs	r2, #0
 800d790:	2300      	movs	r3, #0
 800d792:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d796:	f7f3 f997 	bl	8000ac8 <__aeabi_dcmpeq>
 800d79a:	b9c0      	cbnz	r0, 800d7ce <_printf_float+0x41a>
 800d79c:	4653      	mov	r3, sl
 800d79e:	f108 0201 	add.w	r2, r8, #1
 800d7a2:	4631      	mov	r1, r6
 800d7a4:	4628      	mov	r0, r5
 800d7a6:	47b8      	blx	r7
 800d7a8:	3001      	adds	r0, #1
 800d7aa:	d10c      	bne.n	800d7c6 <_printf_float+0x412>
 800d7ac:	e65d      	b.n	800d46a <_printf_float+0xb6>
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	465a      	mov	r2, fp
 800d7b2:	4631      	mov	r1, r6
 800d7b4:	4628      	mov	r0, r5
 800d7b6:	47b8      	blx	r7
 800d7b8:	3001      	adds	r0, #1
 800d7ba:	f43f ae56 	beq.w	800d46a <_printf_float+0xb6>
 800d7be:	f108 0801 	add.w	r8, r8, #1
 800d7c2:	45d0      	cmp	r8, sl
 800d7c4:	dbf3      	blt.n	800d7ae <_printf_float+0x3fa>
 800d7c6:	464b      	mov	r3, r9
 800d7c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d7cc:	e6df      	b.n	800d58e <_printf_float+0x1da>
 800d7ce:	f04f 0800 	mov.w	r8, #0
 800d7d2:	f104 0b1a 	add.w	fp, r4, #26
 800d7d6:	e7f4      	b.n	800d7c2 <_printf_float+0x40e>
 800d7d8:	2301      	movs	r3, #1
 800d7da:	4642      	mov	r2, r8
 800d7dc:	e7e1      	b.n	800d7a2 <_printf_float+0x3ee>
 800d7de:	2301      	movs	r3, #1
 800d7e0:	464a      	mov	r2, r9
 800d7e2:	4631      	mov	r1, r6
 800d7e4:	4628      	mov	r0, r5
 800d7e6:	47b8      	blx	r7
 800d7e8:	3001      	adds	r0, #1
 800d7ea:	f43f ae3e 	beq.w	800d46a <_printf_float+0xb6>
 800d7ee:	f108 0801 	add.w	r8, r8, #1
 800d7f2:	68e3      	ldr	r3, [r4, #12]
 800d7f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d7f6:	1a5b      	subs	r3, r3, r1
 800d7f8:	4543      	cmp	r3, r8
 800d7fa:	dcf0      	bgt.n	800d7de <_printf_float+0x42a>
 800d7fc:	e6fc      	b.n	800d5f8 <_printf_float+0x244>
 800d7fe:	f04f 0800 	mov.w	r8, #0
 800d802:	f104 0919 	add.w	r9, r4, #25
 800d806:	e7f4      	b.n	800d7f2 <_printf_float+0x43e>

0800d808 <_printf_common>:
 800d808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d80c:	4616      	mov	r6, r2
 800d80e:	4698      	mov	r8, r3
 800d810:	688a      	ldr	r2, [r1, #8]
 800d812:	690b      	ldr	r3, [r1, #16]
 800d814:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d818:	4293      	cmp	r3, r2
 800d81a:	bfb8      	it	lt
 800d81c:	4613      	movlt	r3, r2
 800d81e:	6033      	str	r3, [r6, #0]
 800d820:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d824:	4607      	mov	r7, r0
 800d826:	460c      	mov	r4, r1
 800d828:	b10a      	cbz	r2, 800d82e <_printf_common+0x26>
 800d82a:	3301      	adds	r3, #1
 800d82c:	6033      	str	r3, [r6, #0]
 800d82e:	6823      	ldr	r3, [r4, #0]
 800d830:	0699      	lsls	r1, r3, #26
 800d832:	bf42      	ittt	mi
 800d834:	6833      	ldrmi	r3, [r6, #0]
 800d836:	3302      	addmi	r3, #2
 800d838:	6033      	strmi	r3, [r6, #0]
 800d83a:	6825      	ldr	r5, [r4, #0]
 800d83c:	f015 0506 	ands.w	r5, r5, #6
 800d840:	d106      	bne.n	800d850 <_printf_common+0x48>
 800d842:	f104 0a19 	add.w	sl, r4, #25
 800d846:	68e3      	ldr	r3, [r4, #12]
 800d848:	6832      	ldr	r2, [r6, #0]
 800d84a:	1a9b      	subs	r3, r3, r2
 800d84c:	42ab      	cmp	r3, r5
 800d84e:	dc26      	bgt.n	800d89e <_printf_common+0x96>
 800d850:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d854:	6822      	ldr	r2, [r4, #0]
 800d856:	3b00      	subs	r3, #0
 800d858:	bf18      	it	ne
 800d85a:	2301      	movne	r3, #1
 800d85c:	0692      	lsls	r2, r2, #26
 800d85e:	d42b      	bmi.n	800d8b8 <_printf_common+0xb0>
 800d860:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d864:	4641      	mov	r1, r8
 800d866:	4638      	mov	r0, r7
 800d868:	47c8      	blx	r9
 800d86a:	3001      	adds	r0, #1
 800d86c:	d01e      	beq.n	800d8ac <_printf_common+0xa4>
 800d86e:	6823      	ldr	r3, [r4, #0]
 800d870:	6922      	ldr	r2, [r4, #16]
 800d872:	f003 0306 	and.w	r3, r3, #6
 800d876:	2b04      	cmp	r3, #4
 800d878:	bf02      	ittt	eq
 800d87a:	68e5      	ldreq	r5, [r4, #12]
 800d87c:	6833      	ldreq	r3, [r6, #0]
 800d87e:	1aed      	subeq	r5, r5, r3
 800d880:	68a3      	ldr	r3, [r4, #8]
 800d882:	bf0c      	ite	eq
 800d884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d888:	2500      	movne	r5, #0
 800d88a:	4293      	cmp	r3, r2
 800d88c:	bfc4      	itt	gt
 800d88e:	1a9b      	subgt	r3, r3, r2
 800d890:	18ed      	addgt	r5, r5, r3
 800d892:	2600      	movs	r6, #0
 800d894:	341a      	adds	r4, #26
 800d896:	42b5      	cmp	r5, r6
 800d898:	d11a      	bne.n	800d8d0 <_printf_common+0xc8>
 800d89a:	2000      	movs	r0, #0
 800d89c:	e008      	b.n	800d8b0 <_printf_common+0xa8>
 800d89e:	2301      	movs	r3, #1
 800d8a0:	4652      	mov	r2, sl
 800d8a2:	4641      	mov	r1, r8
 800d8a4:	4638      	mov	r0, r7
 800d8a6:	47c8      	blx	r9
 800d8a8:	3001      	adds	r0, #1
 800d8aa:	d103      	bne.n	800d8b4 <_printf_common+0xac>
 800d8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8b4:	3501      	adds	r5, #1
 800d8b6:	e7c6      	b.n	800d846 <_printf_common+0x3e>
 800d8b8:	18e1      	adds	r1, r4, r3
 800d8ba:	1c5a      	adds	r2, r3, #1
 800d8bc:	2030      	movs	r0, #48	@ 0x30
 800d8be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d8c2:	4422      	add	r2, r4
 800d8c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d8c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d8cc:	3302      	adds	r3, #2
 800d8ce:	e7c7      	b.n	800d860 <_printf_common+0x58>
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	4622      	mov	r2, r4
 800d8d4:	4641      	mov	r1, r8
 800d8d6:	4638      	mov	r0, r7
 800d8d8:	47c8      	blx	r9
 800d8da:	3001      	adds	r0, #1
 800d8dc:	d0e6      	beq.n	800d8ac <_printf_common+0xa4>
 800d8de:	3601      	adds	r6, #1
 800d8e0:	e7d9      	b.n	800d896 <_printf_common+0x8e>
	...

0800d8e4 <_printf_i>:
 800d8e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8e8:	7e0f      	ldrb	r7, [r1, #24]
 800d8ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d8ec:	2f78      	cmp	r7, #120	@ 0x78
 800d8ee:	4691      	mov	r9, r2
 800d8f0:	4680      	mov	r8, r0
 800d8f2:	460c      	mov	r4, r1
 800d8f4:	469a      	mov	sl, r3
 800d8f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d8fa:	d807      	bhi.n	800d90c <_printf_i+0x28>
 800d8fc:	2f62      	cmp	r7, #98	@ 0x62
 800d8fe:	d80a      	bhi.n	800d916 <_printf_i+0x32>
 800d900:	2f00      	cmp	r7, #0
 800d902:	f000 80d2 	beq.w	800daaa <_printf_i+0x1c6>
 800d906:	2f58      	cmp	r7, #88	@ 0x58
 800d908:	f000 80b9 	beq.w	800da7e <_printf_i+0x19a>
 800d90c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d910:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d914:	e03a      	b.n	800d98c <_printf_i+0xa8>
 800d916:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d91a:	2b15      	cmp	r3, #21
 800d91c:	d8f6      	bhi.n	800d90c <_printf_i+0x28>
 800d91e:	a101      	add	r1, pc, #4	@ (adr r1, 800d924 <_printf_i+0x40>)
 800d920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d924:	0800d97d 	.word	0x0800d97d
 800d928:	0800d991 	.word	0x0800d991
 800d92c:	0800d90d 	.word	0x0800d90d
 800d930:	0800d90d 	.word	0x0800d90d
 800d934:	0800d90d 	.word	0x0800d90d
 800d938:	0800d90d 	.word	0x0800d90d
 800d93c:	0800d991 	.word	0x0800d991
 800d940:	0800d90d 	.word	0x0800d90d
 800d944:	0800d90d 	.word	0x0800d90d
 800d948:	0800d90d 	.word	0x0800d90d
 800d94c:	0800d90d 	.word	0x0800d90d
 800d950:	0800da91 	.word	0x0800da91
 800d954:	0800d9bb 	.word	0x0800d9bb
 800d958:	0800da4b 	.word	0x0800da4b
 800d95c:	0800d90d 	.word	0x0800d90d
 800d960:	0800d90d 	.word	0x0800d90d
 800d964:	0800dab3 	.word	0x0800dab3
 800d968:	0800d90d 	.word	0x0800d90d
 800d96c:	0800d9bb 	.word	0x0800d9bb
 800d970:	0800d90d 	.word	0x0800d90d
 800d974:	0800d90d 	.word	0x0800d90d
 800d978:	0800da53 	.word	0x0800da53
 800d97c:	6833      	ldr	r3, [r6, #0]
 800d97e:	1d1a      	adds	r2, r3, #4
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	6032      	str	r2, [r6, #0]
 800d984:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d988:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d98c:	2301      	movs	r3, #1
 800d98e:	e09d      	b.n	800dacc <_printf_i+0x1e8>
 800d990:	6833      	ldr	r3, [r6, #0]
 800d992:	6820      	ldr	r0, [r4, #0]
 800d994:	1d19      	adds	r1, r3, #4
 800d996:	6031      	str	r1, [r6, #0]
 800d998:	0606      	lsls	r6, r0, #24
 800d99a:	d501      	bpl.n	800d9a0 <_printf_i+0xbc>
 800d99c:	681d      	ldr	r5, [r3, #0]
 800d99e:	e003      	b.n	800d9a8 <_printf_i+0xc4>
 800d9a0:	0645      	lsls	r5, r0, #25
 800d9a2:	d5fb      	bpl.n	800d99c <_printf_i+0xb8>
 800d9a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d9a8:	2d00      	cmp	r5, #0
 800d9aa:	da03      	bge.n	800d9b4 <_printf_i+0xd0>
 800d9ac:	232d      	movs	r3, #45	@ 0x2d
 800d9ae:	426d      	negs	r5, r5
 800d9b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d9b4:	4859      	ldr	r0, [pc, #356]	@ (800db1c <_printf_i+0x238>)
 800d9b6:	230a      	movs	r3, #10
 800d9b8:	e011      	b.n	800d9de <_printf_i+0xfa>
 800d9ba:	6821      	ldr	r1, [r4, #0]
 800d9bc:	6833      	ldr	r3, [r6, #0]
 800d9be:	0608      	lsls	r0, r1, #24
 800d9c0:	f853 5b04 	ldr.w	r5, [r3], #4
 800d9c4:	d402      	bmi.n	800d9cc <_printf_i+0xe8>
 800d9c6:	0649      	lsls	r1, r1, #25
 800d9c8:	bf48      	it	mi
 800d9ca:	b2ad      	uxthmi	r5, r5
 800d9cc:	2f6f      	cmp	r7, #111	@ 0x6f
 800d9ce:	4853      	ldr	r0, [pc, #332]	@ (800db1c <_printf_i+0x238>)
 800d9d0:	6033      	str	r3, [r6, #0]
 800d9d2:	bf14      	ite	ne
 800d9d4:	230a      	movne	r3, #10
 800d9d6:	2308      	moveq	r3, #8
 800d9d8:	2100      	movs	r1, #0
 800d9da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d9de:	6866      	ldr	r6, [r4, #4]
 800d9e0:	60a6      	str	r6, [r4, #8]
 800d9e2:	2e00      	cmp	r6, #0
 800d9e4:	bfa2      	ittt	ge
 800d9e6:	6821      	ldrge	r1, [r4, #0]
 800d9e8:	f021 0104 	bicge.w	r1, r1, #4
 800d9ec:	6021      	strge	r1, [r4, #0]
 800d9ee:	b90d      	cbnz	r5, 800d9f4 <_printf_i+0x110>
 800d9f0:	2e00      	cmp	r6, #0
 800d9f2:	d04b      	beq.n	800da8c <_printf_i+0x1a8>
 800d9f4:	4616      	mov	r6, r2
 800d9f6:	fbb5 f1f3 	udiv	r1, r5, r3
 800d9fa:	fb03 5711 	mls	r7, r3, r1, r5
 800d9fe:	5dc7      	ldrb	r7, [r0, r7]
 800da00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800da04:	462f      	mov	r7, r5
 800da06:	42bb      	cmp	r3, r7
 800da08:	460d      	mov	r5, r1
 800da0a:	d9f4      	bls.n	800d9f6 <_printf_i+0x112>
 800da0c:	2b08      	cmp	r3, #8
 800da0e:	d10b      	bne.n	800da28 <_printf_i+0x144>
 800da10:	6823      	ldr	r3, [r4, #0]
 800da12:	07df      	lsls	r7, r3, #31
 800da14:	d508      	bpl.n	800da28 <_printf_i+0x144>
 800da16:	6923      	ldr	r3, [r4, #16]
 800da18:	6861      	ldr	r1, [r4, #4]
 800da1a:	4299      	cmp	r1, r3
 800da1c:	bfde      	ittt	le
 800da1e:	2330      	movle	r3, #48	@ 0x30
 800da20:	f806 3c01 	strble.w	r3, [r6, #-1]
 800da24:	f106 36ff 	addle.w	r6, r6, #4294967295
 800da28:	1b92      	subs	r2, r2, r6
 800da2a:	6122      	str	r2, [r4, #16]
 800da2c:	f8cd a000 	str.w	sl, [sp]
 800da30:	464b      	mov	r3, r9
 800da32:	aa03      	add	r2, sp, #12
 800da34:	4621      	mov	r1, r4
 800da36:	4640      	mov	r0, r8
 800da38:	f7ff fee6 	bl	800d808 <_printf_common>
 800da3c:	3001      	adds	r0, #1
 800da3e:	d14a      	bne.n	800dad6 <_printf_i+0x1f2>
 800da40:	f04f 30ff 	mov.w	r0, #4294967295
 800da44:	b004      	add	sp, #16
 800da46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da4a:	6823      	ldr	r3, [r4, #0]
 800da4c:	f043 0320 	orr.w	r3, r3, #32
 800da50:	6023      	str	r3, [r4, #0]
 800da52:	4833      	ldr	r0, [pc, #204]	@ (800db20 <_printf_i+0x23c>)
 800da54:	2778      	movs	r7, #120	@ 0x78
 800da56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800da5a:	6823      	ldr	r3, [r4, #0]
 800da5c:	6831      	ldr	r1, [r6, #0]
 800da5e:	061f      	lsls	r7, r3, #24
 800da60:	f851 5b04 	ldr.w	r5, [r1], #4
 800da64:	d402      	bmi.n	800da6c <_printf_i+0x188>
 800da66:	065f      	lsls	r7, r3, #25
 800da68:	bf48      	it	mi
 800da6a:	b2ad      	uxthmi	r5, r5
 800da6c:	6031      	str	r1, [r6, #0]
 800da6e:	07d9      	lsls	r1, r3, #31
 800da70:	bf44      	itt	mi
 800da72:	f043 0320 	orrmi.w	r3, r3, #32
 800da76:	6023      	strmi	r3, [r4, #0]
 800da78:	b11d      	cbz	r5, 800da82 <_printf_i+0x19e>
 800da7a:	2310      	movs	r3, #16
 800da7c:	e7ac      	b.n	800d9d8 <_printf_i+0xf4>
 800da7e:	4827      	ldr	r0, [pc, #156]	@ (800db1c <_printf_i+0x238>)
 800da80:	e7e9      	b.n	800da56 <_printf_i+0x172>
 800da82:	6823      	ldr	r3, [r4, #0]
 800da84:	f023 0320 	bic.w	r3, r3, #32
 800da88:	6023      	str	r3, [r4, #0]
 800da8a:	e7f6      	b.n	800da7a <_printf_i+0x196>
 800da8c:	4616      	mov	r6, r2
 800da8e:	e7bd      	b.n	800da0c <_printf_i+0x128>
 800da90:	6833      	ldr	r3, [r6, #0]
 800da92:	6825      	ldr	r5, [r4, #0]
 800da94:	6961      	ldr	r1, [r4, #20]
 800da96:	1d18      	adds	r0, r3, #4
 800da98:	6030      	str	r0, [r6, #0]
 800da9a:	062e      	lsls	r6, r5, #24
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	d501      	bpl.n	800daa4 <_printf_i+0x1c0>
 800daa0:	6019      	str	r1, [r3, #0]
 800daa2:	e002      	b.n	800daaa <_printf_i+0x1c6>
 800daa4:	0668      	lsls	r0, r5, #25
 800daa6:	d5fb      	bpl.n	800daa0 <_printf_i+0x1bc>
 800daa8:	8019      	strh	r1, [r3, #0]
 800daaa:	2300      	movs	r3, #0
 800daac:	6123      	str	r3, [r4, #16]
 800daae:	4616      	mov	r6, r2
 800dab0:	e7bc      	b.n	800da2c <_printf_i+0x148>
 800dab2:	6833      	ldr	r3, [r6, #0]
 800dab4:	1d1a      	adds	r2, r3, #4
 800dab6:	6032      	str	r2, [r6, #0]
 800dab8:	681e      	ldr	r6, [r3, #0]
 800daba:	6862      	ldr	r2, [r4, #4]
 800dabc:	2100      	movs	r1, #0
 800dabe:	4630      	mov	r0, r6
 800dac0:	f7f2 fb86 	bl	80001d0 <memchr>
 800dac4:	b108      	cbz	r0, 800daca <_printf_i+0x1e6>
 800dac6:	1b80      	subs	r0, r0, r6
 800dac8:	6060      	str	r0, [r4, #4]
 800daca:	6863      	ldr	r3, [r4, #4]
 800dacc:	6123      	str	r3, [r4, #16]
 800dace:	2300      	movs	r3, #0
 800dad0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dad4:	e7aa      	b.n	800da2c <_printf_i+0x148>
 800dad6:	6923      	ldr	r3, [r4, #16]
 800dad8:	4632      	mov	r2, r6
 800dada:	4649      	mov	r1, r9
 800dadc:	4640      	mov	r0, r8
 800dade:	47d0      	blx	sl
 800dae0:	3001      	adds	r0, #1
 800dae2:	d0ad      	beq.n	800da40 <_printf_i+0x15c>
 800dae4:	6823      	ldr	r3, [r4, #0]
 800dae6:	079b      	lsls	r3, r3, #30
 800dae8:	d413      	bmi.n	800db12 <_printf_i+0x22e>
 800daea:	68e0      	ldr	r0, [r4, #12]
 800daec:	9b03      	ldr	r3, [sp, #12]
 800daee:	4298      	cmp	r0, r3
 800daf0:	bfb8      	it	lt
 800daf2:	4618      	movlt	r0, r3
 800daf4:	e7a6      	b.n	800da44 <_printf_i+0x160>
 800daf6:	2301      	movs	r3, #1
 800daf8:	4632      	mov	r2, r6
 800dafa:	4649      	mov	r1, r9
 800dafc:	4640      	mov	r0, r8
 800dafe:	47d0      	blx	sl
 800db00:	3001      	adds	r0, #1
 800db02:	d09d      	beq.n	800da40 <_printf_i+0x15c>
 800db04:	3501      	adds	r5, #1
 800db06:	68e3      	ldr	r3, [r4, #12]
 800db08:	9903      	ldr	r1, [sp, #12]
 800db0a:	1a5b      	subs	r3, r3, r1
 800db0c:	42ab      	cmp	r3, r5
 800db0e:	dcf2      	bgt.n	800daf6 <_printf_i+0x212>
 800db10:	e7eb      	b.n	800daea <_printf_i+0x206>
 800db12:	2500      	movs	r5, #0
 800db14:	f104 0619 	add.w	r6, r4, #25
 800db18:	e7f5      	b.n	800db06 <_printf_i+0x222>
 800db1a:	bf00      	nop
 800db1c:	08010212 	.word	0x08010212
 800db20:	08010223 	.word	0x08010223

0800db24 <std>:
 800db24:	2300      	movs	r3, #0
 800db26:	b510      	push	{r4, lr}
 800db28:	4604      	mov	r4, r0
 800db2a:	e9c0 3300 	strd	r3, r3, [r0]
 800db2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800db32:	6083      	str	r3, [r0, #8]
 800db34:	8181      	strh	r1, [r0, #12]
 800db36:	6643      	str	r3, [r0, #100]	@ 0x64
 800db38:	81c2      	strh	r2, [r0, #14]
 800db3a:	6183      	str	r3, [r0, #24]
 800db3c:	4619      	mov	r1, r3
 800db3e:	2208      	movs	r2, #8
 800db40:	305c      	adds	r0, #92	@ 0x5c
 800db42:	f000 f8f4 	bl	800dd2e <memset>
 800db46:	4b0d      	ldr	r3, [pc, #52]	@ (800db7c <std+0x58>)
 800db48:	6263      	str	r3, [r4, #36]	@ 0x24
 800db4a:	4b0d      	ldr	r3, [pc, #52]	@ (800db80 <std+0x5c>)
 800db4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800db4e:	4b0d      	ldr	r3, [pc, #52]	@ (800db84 <std+0x60>)
 800db50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800db52:	4b0d      	ldr	r3, [pc, #52]	@ (800db88 <std+0x64>)
 800db54:	6323      	str	r3, [r4, #48]	@ 0x30
 800db56:	4b0d      	ldr	r3, [pc, #52]	@ (800db8c <std+0x68>)
 800db58:	6224      	str	r4, [r4, #32]
 800db5a:	429c      	cmp	r4, r3
 800db5c:	d006      	beq.n	800db6c <std+0x48>
 800db5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800db62:	4294      	cmp	r4, r2
 800db64:	d002      	beq.n	800db6c <std+0x48>
 800db66:	33d0      	adds	r3, #208	@ 0xd0
 800db68:	429c      	cmp	r4, r3
 800db6a:	d105      	bne.n	800db78 <std+0x54>
 800db6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800db70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db74:	f000 b958 	b.w	800de28 <__retarget_lock_init_recursive>
 800db78:	bd10      	pop	{r4, pc}
 800db7a:	bf00      	nop
 800db7c:	0800dca9 	.word	0x0800dca9
 800db80:	0800dccb 	.word	0x0800dccb
 800db84:	0800dd03 	.word	0x0800dd03
 800db88:	0800dd27 	.word	0x0800dd27
 800db8c:	200022e4 	.word	0x200022e4

0800db90 <stdio_exit_handler>:
 800db90:	4a02      	ldr	r2, [pc, #8]	@ (800db9c <stdio_exit_handler+0xc>)
 800db92:	4903      	ldr	r1, [pc, #12]	@ (800dba0 <stdio_exit_handler+0x10>)
 800db94:	4803      	ldr	r0, [pc, #12]	@ (800dba4 <stdio_exit_handler+0x14>)
 800db96:	f000 b869 	b.w	800dc6c <_fwalk_sglue>
 800db9a:	bf00      	nop
 800db9c:	20000100 	.word	0x20000100
 800dba0:	0800f4d5 	.word	0x0800f4d5
 800dba4:	20000110 	.word	0x20000110

0800dba8 <cleanup_stdio>:
 800dba8:	6841      	ldr	r1, [r0, #4]
 800dbaa:	4b0c      	ldr	r3, [pc, #48]	@ (800dbdc <cleanup_stdio+0x34>)
 800dbac:	4299      	cmp	r1, r3
 800dbae:	b510      	push	{r4, lr}
 800dbb0:	4604      	mov	r4, r0
 800dbb2:	d001      	beq.n	800dbb8 <cleanup_stdio+0x10>
 800dbb4:	f001 fc8e 	bl	800f4d4 <_fflush_r>
 800dbb8:	68a1      	ldr	r1, [r4, #8]
 800dbba:	4b09      	ldr	r3, [pc, #36]	@ (800dbe0 <cleanup_stdio+0x38>)
 800dbbc:	4299      	cmp	r1, r3
 800dbbe:	d002      	beq.n	800dbc6 <cleanup_stdio+0x1e>
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	f001 fc87 	bl	800f4d4 <_fflush_r>
 800dbc6:	68e1      	ldr	r1, [r4, #12]
 800dbc8:	4b06      	ldr	r3, [pc, #24]	@ (800dbe4 <cleanup_stdio+0x3c>)
 800dbca:	4299      	cmp	r1, r3
 800dbcc:	d004      	beq.n	800dbd8 <cleanup_stdio+0x30>
 800dbce:	4620      	mov	r0, r4
 800dbd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbd4:	f001 bc7e 	b.w	800f4d4 <_fflush_r>
 800dbd8:	bd10      	pop	{r4, pc}
 800dbda:	bf00      	nop
 800dbdc:	200022e4 	.word	0x200022e4
 800dbe0:	2000234c 	.word	0x2000234c
 800dbe4:	200023b4 	.word	0x200023b4

0800dbe8 <global_stdio_init.part.0>:
 800dbe8:	b510      	push	{r4, lr}
 800dbea:	4b0b      	ldr	r3, [pc, #44]	@ (800dc18 <global_stdio_init.part.0+0x30>)
 800dbec:	4c0b      	ldr	r4, [pc, #44]	@ (800dc1c <global_stdio_init.part.0+0x34>)
 800dbee:	4a0c      	ldr	r2, [pc, #48]	@ (800dc20 <global_stdio_init.part.0+0x38>)
 800dbf0:	601a      	str	r2, [r3, #0]
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	2104      	movs	r1, #4
 800dbf8:	f7ff ff94 	bl	800db24 <std>
 800dbfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dc00:	2201      	movs	r2, #1
 800dc02:	2109      	movs	r1, #9
 800dc04:	f7ff ff8e 	bl	800db24 <std>
 800dc08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dc0c:	2202      	movs	r2, #2
 800dc0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc12:	2112      	movs	r1, #18
 800dc14:	f7ff bf86 	b.w	800db24 <std>
 800dc18:	2000241c 	.word	0x2000241c
 800dc1c:	200022e4 	.word	0x200022e4
 800dc20:	0800db91 	.word	0x0800db91

0800dc24 <__sfp_lock_acquire>:
 800dc24:	4801      	ldr	r0, [pc, #4]	@ (800dc2c <__sfp_lock_acquire+0x8>)
 800dc26:	f000 b900 	b.w	800de2a <__retarget_lock_acquire_recursive>
 800dc2a:	bf00      	nop
 800dc2c:	20002425 	.word	0x20002425

0800dc30 <__sfp_lock_release>:
 800dc30:	4801      	ldr	r0, [pc, #4]	@ (800dc38 <__sfp_lock_release+0x8>)
 800dc32:	f000 b8fb 	b.w	800de2c <__retarget_lock_release_recursive>
 800dc36:	bf00      	nop
 800dc38:	20002425 	.word	0x20002425

0800dc3c <__sinit>:
 800dc3c:	b510      	push	{r4, lr}
 800dc3e:	4604      	mov	r4, r0
 800dc40:	f7ff fff0 	bl	800dc24 <__sfp_lock_acquire>
 800dc44:	6a23      	ldr	r3, [r4, #32]
 800dc46:	b11b      	cbz	r3, 800dc50 <__sinit+0x14>
 800dc48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc4c:	f7ff bff0 	b.w	800dc30 <__sfp_lock_release>
 800dc50:	4b04      	ldr	r3, [pc, #16]	@ (800dc64 <__sinit+0x28>)
 800dc52:	6223      	str	r3, [r4, #32]
 800dc54:	4b04      	ldr	r3, [pc, #16]	@ (800dc68 <__sinit+0x2c>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d1f5      	bne.n	800dc48 <__sinit+0xc>
 800dc5c:	f7ff ffc4 	bl	800dbe8 <global_stdio_init.part.0>
 800dc60:	e7f2      	b.n	800dc48 <__sinit+0xc>
 800dc62:	bf00      	nop
 800dc64:	0800dba9 	.word	0x0800dba9
 800dc68:	2000241c 	.word	0x2000241c

0800dc6c <_fwalk_sglue>:
 800dc6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc70:	4607      	mov	r7, r0
 800dc72:	4688      	mov	r8, r1
 800dc74:	4614      	mov	r4, r2
 800dc76:	2600      	movs	r6, #0
 800dc78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc7c:	f1b9 0901 	subs.w	r9, r9, #1
 800dc80:	d505      	bpl.n	800dc8e <_fwalk_sglue+0x22>
 800dc82:	6824      	ldr	r4, [r4, #0]
 800dc84:	2c00      	cmp	r4, #0
 800dc86:	d1f7      	bne.n	800dc78 <_fwalk_sglue+0xc>
 800dc88:	4630      	mov	r0, r6
 800dc8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc8e:	89ab      	ldrh	r3, [r5, #12]
 800dc90:	2b01      	cmp	r3, #1
 800dc92:	d907      	bls.n	800dca4 <_fwalk_sglue+0x38>
 800dc94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dc98:	3301      	adds	r3, #1
 800dc9a:	d003      	beq.n	800dca4 <_fwalk_sglue+0x38>
 800dc9c:	4629      	mov	r1, r5
 800dc9e:	4638      	mov	r0, r7
 800dca0:	47c0      	blx	r8
 800dca2:	4306      	orrs	r6, r0
 800dca4:	3568      	adds	r5, #104	@ 0x68
 800dca6:	e7e9      	b.n	800dc7c <_fwalk_sglue+0x10>

0800dca8 <__sread>:
 800dca8:	b510      	push	{r4, lr}
 800dcaa:	460c      	mov	r4, r1
 800dcac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcb0:	f000 f86c 	bl	800dd8c <_read_r>
 800dcb4:	2800      	cmp	r0, #0
 800dcb6:	bfab      	itete	ge
 800dcb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dcba:	89a3      	ldrhlt	r3, [r4, #12]
 800dcbc:	181b      	addge	r3, r3, r0
 800dcbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dcc2:	bfac      	ite	ge
 800dcc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dcc6:	81a3      	strhlt	r3, [r4, #12]
 800dcc8:	bd10      	pop	{r4, pc}

0800dcca <__swrite>:
 800dcca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcce:	461f      	mov	r7, r3
 800dcd0:	898b      	ldrh	r3, [r1, #12]
 800dcd2:	05db      	lsls	r3, r3, #23
 800dcd4:	4605      	mov	r5, r0
 800dcd6:	460c      	mov	r4, r1
 800dcd8:	4616      	mov	r6, r2
 800dcda:	d505      	bpl.n	800dce8 <__swrite+0x1e>
 800dcdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dce0:	2302      	movs	r3, #2
 800dce2:	2200      	movs	r2, #0
 800dce4:	f000 f840 	bl	800dd68 <_lseek_r>
 800dce8:	89a3      	ldrh	r3, [r4, #12]
 800dcea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dcf2:	81a3      	strh	r3, [r4, #12]
 800dcf4:	4632      	mov	r2, r6
 800dcf6:	463b      	mov	r3, r7
 800dcf8:	4628      	mov	r0, r5
 800dcfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcfe:	f000 b857 	b.w	800ddb0 <_write_r>

0800dd02 <__sseek>:
 800dd02:	b510      	push	{r4, lr}
 800dd04:	460c      	mov	r4, r1
 800dd06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd0a:	f000 f82d 	bl	800dd68 <_lseek_r>
 800dd0e:	1c43      	adds	r3, r0, #1
 800dd10:	89a3      	ldrh	r3, [r4, #12]
 800dd12:	bf15      	itete	ne
 800dd14:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dd16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dd1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dd1e:	81a3      	strheq	r3, [r4, #12]
 800dd20:	bf18      	it	ne
 800dd22:	81a3      	strhne	r3, [r4, #12]
 800dd24:	bd10      	pop	{r4, pc}

0800dd26 <__sclose>:
 800dd26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd2a:	f000 b80d 	b.w	800dd48 <_close_r>

0800dd2e <memset>:
 800dd2e:	4402      	add	r2, r0
 800dd30:	4603      	mov	r3, r0
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d100      	bne.n	800dd38 <memset+0xa>
 800dd36:	4770      	bx	lr
 800dd38:	f803 1b01 	strb.w	r1, [r3], #1
 800dd3c:	e7f9      	b.n	800dd32 <memset+0x4>
	...

0800dd40 <_localeconv_r>:
 800dd40:	4800      	ldr	r0, [pc, #0]	@ (800dd44 <_localeconv_r+0x4>)
 800dd42:	4770      	bx	lr
 800dd44:	2000024c 	.word	0x2000024c

0800dd48 <_close_r>:
 800dd48:	b538      	push	{r3, r4, r5, lr}
 800dd4a:	4d06      	ldr	r5, [pc, #24]	@ (800dd64 <_close_r+0x1c>)
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	4604      	mov	r4, r0
 800dd50:	4608      	mov	r0, r1
 800dd52:	602b      	str	r3, [r5, #0]
 800dd54:	f7f4 fd70 	bl	8002838 <_close>
 800dd58:	1c43      	adds	r3, r0, #1
 800dd5a:	d102      	bne.n	800dd62 <_close_r+0x1a>
 800dd5c:	682b      	ldr	r3, [r5, #0]
 800dd5e:	b103      	cbz	r3, 800dd62 <_close_r+0x1a>
 800dd60:	6023      	str	r3, [r4, #0]
 800dd62:	bd38      	pop	{r3, r4, r5, pc}
 800dd64:	20002420 	.word	0x20002420

0800dd68 <_lseek_r>:
 800dd68:	b538      	push	{r3, r4, r5, lr}
 800dd6a:	4d07      	ldr	r5, [pc, #28]	@ (800dd88 <_lseek_r+0x20>)
 800dd6c:	4604      	mov	r4, r0
 800dd6e:	4608      	mov	r0, r1
 800dd70:	4611      	mov	r1, r2
 800dd72:	2200      	movs	r2, #0
 800dd74:	602a      	str	r2, [r5, #0]
 800dd76:	461a      	mov	r2, r3
 800dd78:	f7f4 fd85 	bl	8002886 <_lseek>
 800dd7c:	1c43      	adds	r3, r0, #1
 800dd7e:	d102      	bne.n	800dd86 <_lseek_r+0x1e>
 800dd80:	682b      	ldr	r3, [r5, #0]
 800dd82:	b103      	cbz	r3, 800dd86 <_lseek_r+0x1e>
 800dd84:	6023      	str	r3, [r4, #0]
 800dd86:	bd38      	pop	{r3, r4, r5, pc}
 800dd88:	20002420 	.word	0x20002420

0800dd8c <_read_r>:
 800dd8c:	b538      	push	{r3, r4, r5, lr}
 800dd8e:	4d07      	ldr	r5, [pc, #28]	@ (800ddac <_read_r+0x20>)
 800dd90:	4604      	mov	r4, r0
 800dd92:	4608      	mov	r0, r1
 800dd94:	4611      	mov	r1, r2
 800dd96:	2200      	movs	r2, #0
 800dd98:	602a      	str	r2, [r5, #0]
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	f7f4 fd13 	bl	80027c6 <_read>
 800dda0:	1c43      	adds	r3, r0, #1
 800dda2:	d102      	bne.n	800ddaa <_read_r+0x1e>
 800dda4:	682b      	ldr	r3, [r5, #0]
 800dda6:	b103      	cbz	r3, 800ddaa <_read_r+0x1e>
 800dda8:	6023      	str	r3, [r4, #0]
 800ddaa:	bd38      	pop	{r3, r4, r5, pc}
 800ddac:	20002420 	.word	0x20002420

0800ddb0 <_write_r>:
 800ddb0:	b538      	push	{r3, r4, r5, lr}
 800ddb2:	4d07      	ldr	r5, [pc, #28]	@ (800ddd0 <_write_r+0x20>)
 800ddb4:	4604      	mov	r4, r0
 800ddb6:	4608      	mov	r0, r1
 800ddb8:	4611      	mov	r1, r2
 800ddba:	2200      	movs	r2, #0
 800ddbc:	602a      	str	r2, [r5, #0]
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	f7f4 fd1e 	bl	8002800 <_write>
 800ddc4:	1c43      	adds	r3, r0, #1
 800ddc6:	d102      	bne.n	800ddce <_write_r+0x1e>
 800ddc8:	682b      	ldr	r3, [r5, #0]
 800ddca:	b103      	cbz	r3, 800ddce <_write_r+0x1e>
 800ddcc:	6023      	str	r3, [r4, #0]
 800ddce:	bd38      	pop	{r3, r4, r5, pc}
 800ddd0:	20002420 	.word	0x20002420

0800ddd4 <__errno>:
 800ddd4:	4b01      	ldr	r3, [pc, #4]	@ (800dddc <__errno+0x8>)
 800ddd6:	6818      	ldr	r0, [r3, #0]
 800ddd8:	4770      	bx	lr
 800ddda:	bf00      	nop
 800dddc:	2000010c 	.word	0x2000010c

0800dde0 <__libc_init_array>:
 800dde0:	b570      	push	{r4, r5, r6, lr}
 800dde2:	4d0d      	ldr	r5, [pc, #52]	@ (800de18 <__libc_init_array+0x38>)
 800dde4:	4c0d      	ldr	r4, [pc, #52]	@ (800de1c <__libc_init_array+0x3c>)
 800dde6:	1b64      	subs	r4, r4, r5
 800dde8:	10a4      	asrs	r4, r4, #2
 800ddea:	2600      	movs	r6, #0
 800ddec:	42a6      	cmp	r6, r4
 800ddee:	d109      	bne.n	800de04 <__libc_init_array+0x24>
 800ddf0:	4d0b      	ldr	r5, [pc, #44]	@ (800de20 <__libc_init_array+0x40>)
 800ddf2:	4c0c      	ldr	r4, [pc, #48]	@ (800de24 <__libc_init_array+0x44>)
 800ddf4:	f002 f9c2 	bl	801017c <_init>
 800ddf8:	1b64      	subs	r4, r4, r5
 800ddfa:	10a4      	asrs	r4, r4, #2
 800ddfc:	2600      	movs	r6, #0
 800ddfe:	42a6      	cmp	r6, r4
 800de00:	d105      	bne.n	800de0e <__libc_init_array+0x2e>
 800de02:	bd70      	pop	{r4, r5, r6, pc}
 800de04:	f855 3b04 	ldr.w	r3, [r5], #4
 800de08:	4798      	blx	r3
 800de0a:	3601      	adds	r6, #1
 800de0c:	e7ee      	b.n	800ddec <__libc_init_array+0xc>
 800de0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800de12:	4798      	blx	r3
 800de14:	3601      	adds	r6, #1
 800de16:	e7f2      	b.n	800ddfe <__libc_init_array+0x1e>
 800de18:	08010578 	.word	0x08010578
 800de1c:	08010578 	.word	0x08010578
 800de20:	08010578 	.word	0x08010578
 800de24:	0801057c 	.word	0x0801057c

0800de28 <__retarget_lock_init_recursive>:
 800de28:	4770      	bx	lr

0800de2a <__retarget_lock_acquire_recursive>:
 800de2a:	4770      	bx	lr

0800de2c <__retarget_lock_release_recursive>:
 800de2c:	4770      	bx	lr

0800de2e <quorem>:
 800de2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de32:	6903      	ldr	r3, [r0, #16]
 800de34:	690c      	ldr	r4, [r1, #16]
 800de36:	42a3      	cmp	r3, r4
 800de38:	4607      	mov	r7, r0
 800de3a:	db7e      	blt.n	800df3a <quorem+0x10c>
 800de3c:	3c01      	subs	r4, #1
 800de3e:	f101 0814 	add.w	r8, r1, #20
 800de42:	00a3      	lsls	r3, r4, #2
 800de44:	f100 0514 	add.w	r5, r0, #20
 800de48:	9300      	str	r3, [sp, #0]
 800de4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de4e:	9301      	str	r3, [sp, #4]
 800de50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800de54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de58:	3301      	adds	r3, #1
 800de5a:	429a      	cmp	r2, r3
 800de5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800de60:	fbb2 f6f3 	udiv	r6, r2, r3
 800de64:	d32e      	bcc.n	800dec4 <quorem+0x96>
 800de66:	f04f 0a00 	mov.w	sl, #0
 800de6a:	46c4      	mov	ip, r8
 800de6c:	46ae      	mov	lr, r5
 800de6e:	46d3      	mov	fp, sl
 800de70:	f85c 3b04 	ldr.w	r3, [ip], #4
 800de74:	b298      	uxth	r0, r3
 800de76:	fb06 a000 	mla	r0, r6, r0, sl
 800de7a:	0c02      	lsrs	r2, r0, #16
 800de7c:	0c1b      	lsrs	r3, r3, #16
 800de7e:	fb06 2303 	mla	r3, r6, r3, r2
 800de82:	f8de 2000 	ldr.w	r2, [lr]
 800de86:	b280      	uxth	r0, r0
 800de88:	b292      	uxth	r2, r2
 800de8a:	1a12      	subs	r2, r2, r0
 800de8c:	445a      	add	r2, fp
 800de8e:	f8de 0000 	ldr.w	r0, [lr]
 800de92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de96:	b29b      	uxth	r3, r3
 800de98:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800de9c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dea0:	b292      	uxth	r2, r2
 800dea2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dea6:	45e1      	cmp	r9, ip
 800dea8:	f84e 2b04 	str.w	r2, [lr], #4
 800deac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800deb0:	d2de      	bcs.n	800de70 <quorem+0x42>
 800deb2:	9b00      	ldr	r3, [sp, #0]
 800deb4:	58eb      	ldr	r3, [r5, r3]
 800deb6:	b92b      	cbnz	r3, 800dec4 <quorem+0x96>
 800deb8:	9b01      	ldr	r3, [sp, #4]
 800deba:	3b04      	subs	r3, #4
 800debc:	429d      	cmp	r5, r3
 800debe:	461a      	mov	r2, r3
 800dec0:	d32f      	bcc.n	800df22 <quorem+0xf4>
 800dec2:	613c      	str	r4, [r7, #16]
 800dec4:	4638      	mov	r0, r7
 800dec6:	f001 f979 	bl	800f1bc <__mcmp>
 800deca:	2800      	cmp	r0, #0
 800decc:	db25      	blt.n	800df1a <quorem+0xec>
 800dece:	4629      	mov	r1, r5
 800ded0:	2000      	movs	r0, #0
 800ded2:	f858 2b04 	ldr.w	r2, [r8], #4
 800ded6:	f8d1 c000 	ldr.w	ip, [r1]
 800deda:	fa1f fe82 	uxth.w	lr, r2
 800dede:	fa1f f38c 	uxth.w	r3, ip
 800dee2:	eba3 030e 	sub.w	r3, r3, lr
 800dee6:	4403      	add	r3, r0
 800dee8:	0c12      	lsrs	r2, r2, #16
 800deea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800deee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800def2:	b29b      	uxth	r3, r3
 800def4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800def8:	45c1      	cmp	r9, r8
 800defa:	f841 3b04 	str.w	r3, [r1], #4
 800defe:	ea4f 4022 	mov.w	r0, r2, asr #16
 800df02:	d2e6      	bcs.n	800ded2 <quorem+0xa4>
 800df04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800df0c:	b922      	cbnz	r2, 800df18 <quorem+0xea>
 800df0e:	3b04      	subs	r3, #4
 800df10:	429d      	cmp	r5, r3
 800df12:	461a      	mov	r2, r3
 800df14:	d30b      	bcc.n	800df2e <quorem+0x100>
 800df16:	613c      	str	r4, [r7, #16]
 800df18:	3601      	adds	r6, #1
 800df1a:	4630      	mov	r0, r6
 800df1c:	b003      	add	sp, #12
 800df1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df22:	6812      	ldr	r2, [r2, #0]
 800df24:	3b04      	subs	r3, #4
 800df26:	2a00      	cmp	r2, #0
 800df28:	d1cb      	bne.n	800dec2 <quorem+0x94>
 800df2a:	3c01      	subs	r4, #1
 800df2c:	e7c6      	b.n	800debc <quorem+0x8e>
 800df2e:	6812      	ldr	r2, [r2, #0]
 800df30:	3b04      	subs	r3, #4
 800df32:	2a00      	cmp	r2, #0
 800df34:	d1ef      	bne.n	800df16 <quorem+0xe8>
 800df36:	3c01      	subs	r4, #1
 800df38:	e7ea      	b.n	800df10 <quorem+0xe2>
 800df3a:	2000      	movs	r0, #0
 800df3c:	e7ee      	b.n	800df1c <quorem+0xee>
	...

0800df40 <_dtoa_r>:
 800df40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df44:	69c7      	ldr	r7, [r0, #28]
 800df46:	b099      	sub	sp, #100	@ 0x64
 800df48:	ed8d 0b02 	vstr	d0, [sp, #8]
 800df4c:	ec55 4b10 	vmov	r4, r5, d0
 800df50:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800df52:	9109      	str	r1, [sp, #36]	@ 0x24
 800df54:	4683      	mov	fp, r0
 800df56:	920e      	str	r2, [sp, #56]	@ 0x38
 800df58:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df5a:	b97f      	cbnz	r7, 800df7c <_dtoa_r+0x3c>
 800df5c:	2010      	movs	r0, #16
 800df5e:	f000 fdfd 	bl	800eb5c <malloc>
 800df62:	4602      	mov	r2, r0
 800df64:	f8cb 001c 	str.w	r0, [fp, #28]
 800df68:	b920      	cbnz	r0, 800df74 <_dtoa_r+0x34>
 800df6a:	4ba7      	ldr	r3, [pc, #668]	@ (800e208 <_dtoa_r+0x2c8>)
 800df6c:	21ef      	movs	r1, #239	@ 0xef
 800df6e:	48a7      	ldr	r0, [pc, #668]	@ (800e20c <_dtoa_r+0x2cc>)
 800df70:	f001 faf6 	bl	800f560 <__assert_func>
 800df74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800df78:	6007      	str	r7, [r0, #0]
 800df7a:	60c7      	str	r7, [r0, #12]
 800df7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800df80:	6819      	ldr	r1, [r3, #0]
 800df82:	b159      	cbz	r1, 800df9c <_dtoa_r+0x5c>
 800df84:	685a      	ldr	r2, [r3, #4]
 800df86:	604a      	str	r2, [r1, #4]
 800df88:	2301      	movs	r3, #1
 800df8a:	4093      	lsls	r3, r2
 800df8c:	608b      	str	r3, [r1, #8]
 800df8e:	4658      	mov	r0, fp
 800df90:	f000 feda 	bl	800ed48 <_Bfree>
 800df94:	f8db 301c 	ldr.w	r3, [fp, #28]
 800df98:	2200      	movs	r2, #0
 800df9a:	601a      	str	r2, [r3, #0]
 800df9c:	1e2b      	subs	r3, r5, #0
 800df9e:	bfb9      	ittee	lt
 800dfa0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dfa4:	9303      	strlt	r3, [sp, #12]
 800dfa6:	2300      	movge	r3, #0
 800dfa8:	6033      	strge	r3, [r6, #0]
 800dfaa:	9f03      	ldr	r7, [sp, #12]
 800dfac:	4b98      	ldr	r3, [pc, #608]	@ (800e210 <_dtoa_r+0x2d0>)
 800dfae:	bfbc      	itt	lt
 800dfb0:	2201      	movlt	r2, #1
 800dfb2:	6032      	strlt	r2, [r6, #0]
 800dfb4:	43bb      	bics	r3, r7
 800dfb6:	d112      	bne.n	800dfde <_dtoa_r+0x9e>
 800dfb8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dfba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dfbe:	6013      	str	r3, [r2, #0]
 800dfc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dfc4:	4323      	orrs	r3, r4
 800dfc6:	f000 854d 	beq.w	800ea64 <_dtoa_r+0xb24>
 800dfca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfcc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e224 <_dtoa_r+0x2e4>
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	f000 854f 	beq.w	800ea74 <_dtoa_r+0xb34>
 800dfd6:	f10a 0303 	add.w	r3, sl, #3
 800dfda:	f000 bd49 	b.w	800ea70 <_dtoa_r+0xb30>
 800dfde:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	ec51 0b17 	vmov	r0, r1, d7
 800dfe8:	2300      	movs	r3, #0
 800dfea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800dfee:	f7f2 fd6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800dff2:	4680      	mov	r8, r0
 800dff4:	b158      	cbz	r0, 800e00e <_dtoa_r+0xce>
 800dff6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dff8:	2301      	movs	r3, #1
 800dffa:	6013      	str	r3, [r2, #0]
 800dffc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dffe:	b113      	cbz	r3, 800e006 <_dtoa_r+0xc6>
 800e000:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e002:	4b84      	ldr	r3, [pc, #528]	@ (800e214 <_dtoa_r+0x2d4>)
 800e004:	6013      	str	r3, [r2, #0]
 800e006:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e228 <_dtoa_r+0x2e8>
 800e00a:	f000 bd33 	b.w	800ea74 <_dtoa_r+0xb34>
 800e00e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e012:	aa16      	add	r2, sp, #88	@ 0x58
 800e014:	a917      	add	r1, sp, #92	@ 0x5c
 800e016:	4658      	mov	r0, fp
 800e018:	f001 f980 	bl	800f31c <__d2b>
 800e01c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e020:	4681      	mov	r9, r0
 800e022:	2e00      	cmp	r6, #0
 800e024:	d077      	beq.n	800e116 <_dtoa_r+0x1d6>
 800e026:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e028:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e02c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e030:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e034:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e038:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e03c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e040:	4619      	mov	r1, r3
 800e042:	2200      	movs	r2, #0
 800e044:	4b74      	ldr	r3, [pc, #464]	@ (800e218 <_dtoa_r+0x2d8>)
 800e046:	f7f2 f91f 	bl	8000288 <__aeabi_dsub>
 800e04a:	a369      	add	r3, pc, #420	@ (adr r3, 800e1f0 <_dtoa_r+0x2b0>)
 800e04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e050:	f7f2 fad2 	bl	80005f8 <__aeabi_dmul>
 800e054:	a368      	add	r3, pc, #416	@ (adr r3, 800e1f8 <_dtoa_r+0x2b8>)
 800e056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05a:	f7f2 f917 	bl	800028c <__adddf3>
 800e05e:	4604      	mov	r4, r0
 800e060:	4630      	mov	r0, r6
 800e062:	460d      	mov	r5, r1
 800e064:	f7f2 fa5e 	bl	8000524 <__aeabi_i2d>
 800e068:	a365      	add	r3, pc, #404	@ (adr r3, 800e200 <_dtoa_r+0x2c0>)
 800e06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e06e:	f7f2 fac3 	bl	80005f8 <__aeabi_dmul>
 800e072:	4602      	mov	r2, r0
 800e074:	460b      	mov	r3, r1
 800e076:	4620      	mov	r0, r4
 800e078:	4629      	mov	r1, r5
 800e07a:	f7f2 f907 	bl	800028c <__adddf3>
 800e07e:	4604      	mov	r4, r0
 800e080:	460d      	mov	r5, r1
 800e082:	f7f2 fd69 	bl	8000b58 <__aeabi_d2iz>
 800e086:	2200      	movs	r2, #0
 800e088:	4607      	mov	r7, r0
 800e08a:	2300      	movs	r3, #0
 800e08c:	4620      	mov	r0, r4
 800e08e:	4629      	mov	r1, r5
 800e090:	f7f2 fd24 	bl	8000adc <__aeabi_dcmplt>
 800e094:	b140      	cbz	r0, 800e0a8 <_dtoa_r+0x168>
 800e096:	4638      	mov	r0, r7
 800e098:	f7f2 fa44 	bl	8000524 <__aeabi_i2d>
 800e09c:	4622      	mov	r2, r4
 800e09e:	462b      	mov	r3, r5
 800e0a0:	f7f2 fd12 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0a4:	b900      	cbnz	r0, 800e0a8 <_dtoa_r+0x168>
 800e0a6:	3f01      	subs	r7, #1
 800e0a8:	2f16      	cmp	r7, #22
 800e0aa:	d851      	bhi.n	800e150 <_dtoa_r+0x210>
 800e0ac:	4b5b      	ldr	r3, [pc, #364]	@ (800e21c <_dtoa_r+0x2dc>)
 800e0ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0ba:	f7f2 fd0f 	bl	8000adc <__aeabi_dcmplt>
 800e0be:	2800      	cmp	r0, #0
 800e0c0:	d048      	beq.n	800e154 <_dtoa_r+0x214>
 800e0c2:	3f01      	subs	r7, #1
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	9312      	str	r3, [sp, #72]	@ 0x48
 800e0c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e0ca:	1b9b      	subs	r3, r3, r6
 800e0cc:	1e5a      	subs	r2, r3, #1
 800e0ce:	bf44      	itt	mi
 800e0d0:	f1c3 0801 	rsbmi	r8, r3, #1
 800e0d4:	2300      	movmi	r3, #0
 800e0d6:	9208      	str	r2, [sp, #32]
 800e0d8:	bf54      	ite	pl
 800e0da:	f04f 0800 	movpl.w	r8, #0
 800e0de:	9308      	strmi	r3, [sp, #32]
 800e0e0:	2f00      	cmp	r7, #0
 800e0e2:	db39      	blt.n	800e158 <_dtoa_r+0x218>
 800e0e4:	9b08      	ldr	r3, [sp, #32]
 800e0e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e0e8:	443b      	add	r3, r7
 800e0ea:	9308      	str	r3, [sp, #32]
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800e0f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0f2:	2b09      	cmp	r3, #9
 800e0f4:	d864      	bhi.n	800e1c0 <_dtoa_r+0x280>
 800e0f6:	2b05      	cmp	r3, #5
 800e0f8:	bfc4      	itt	gt
 800e0fa:	3b04      	subgt	r3, #4
 800e0fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e100:	f1a3 0302 	sub.w	r3, r3, #2
 800e104:	bfcc      	ite	gt
 800e106:	2400      	movgt	r4, #0
 800e108:	2401      	movle	r4, #1
 800e10a:	2b03      	cmp	r3, #3
 800e10c:	d863      	bhi.n	800e1d6 <_dtoa_r+0x296>
 800e10e:	e8df f003 	tbb	[pc, r3]
 800e112:	372a      	.short	0x372a
 800e114:	5535      	.short	0x5535
 800e116:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e11a:	441e      	add	r6, r3
 800e11c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e120:	2b20      	cmp	r3, #32
 800e122:	bfc1      	itttt	gt
 800e124:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e128:	409f      	lslgt	r7, r3
 800e12a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e12e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e132:	bfd6      	itet	le
 800e134:	f1c3 0320 	rsble	r3, r3, #32
 800e138:	ea47 0003 	orrgt.w	r0, r7, r3
 800e13c:	fa04 f003 	lslle.w	r0, r4, r3
 800e140:	f7f2 f9e0 	bl	8000504 <__aeabi_ui2d>
 800e144:	2201      	movs	r2, #1
 800e146:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e14a:	3e01      	subs	r6, #1
 800e14c:	9214      	str	r2, [sp, #80]	@ 0x50
 800e14e:	e777      	b.n	800e040 <_dtoa_r+0x100>
 800e150:	2301      	movs	r3, #1
 800e152:	e7b8      	b.n	800e0c6 <_dtoa_r+0x186>
 800e154:	9012      	str	r0, [sp, #72]	@ 0x48
 800e156:	e7b7      	b.n	800e0c8 <_dtoa_r+0x188>
 800e158:	427b      	negs	r3, r7
 800e15a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e15c:	2300      	movs	r3, #0
 800e15e:	eba8 0807 	sub.w	r8, r8, r7
 800e162:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e164:	e7c4      	b.n	800e0f0 <_dtoa_r+0x1b0>
 800e166:	2300      	movs	r3, #0
 800e168:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e16a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	dc35      	bgt.n	800e1dc <_dtoa_r+0x29c>
 800e170:	2301      	movs	r3, #1
 800e172:	9300      	str	r3, [sp, #0]
 800e174:	9307      	str	r3, [sp, #28]
 800e176:	461a      	mov	r2, r3
 800e178:	920e      	str	r2, [sp, #56]	@ 0x38
 800e17a:	e00b      	b.n	800e194 <_dtoa_r+0x254>
 800e17c:	2301      	movs	r3, #1
 800e17e:	e7f3      	b.n	800e168 <_dtoa_r+0x228>
 800e180:	2300      	movs	r3, #0
 800e182:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e184:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e186:	18fb      	adds	r3, r7, r3
 800e188:	9300      	str	r3, [sp, #0]
 800e18a:	3301      	adds	r3, #1
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	9307      	str	r3, [sp, #28]
 800e190:	bfb8      	it	lt
 800e192:	2301      	movlt	r3, #1
 800e194:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e198:	2100      	movs	r1, #0
 800e19a:	2204      	movs	r2, #4
 800e19c:	f102 0514 	add.w	r5, r2, #20
 800e1a0:	429d      	cmp	r5, r3
 800e1a2:	d91f      	bls.n	800e1e4 <_dtoa_r+0x2a4>
 800e1a4:	6041      	str	r1, [r0, #4]
 800e1a6:	4658      	mov	r0, fp
 800e1a8:	f000 fd8e 	bl	800ecc8 <_Balloc>
 800e1ac:	4682      	mov	sl, r0
 800e1ae:	2800      	cmp	r0, #0
 800e1b0:	d13c      	bne.n	800e22c <_dtoa_r+0x2ec>
 800e1b2:	4b1b      	ldr	r3, [pc, #108]	@ (800e220 <_dtoa_r+0x2e0>)
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	f240 11af 	movw	r1, #431	@ 0x1af
 800e1ba:	e6d8      	b.n	800df6e <_dtoa_r+0x2e>
 800e1bc:	2301      	movs	r3, #1
 800e1be:	e7e0      	b.n	800e182 <_dtoa_r+0x242>
 800e1c0:	2401      	movs	r4, #1
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e1c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e1cc:	9300      	str	r3, [sp, #0]
 800e1ce:	9307      	str	r3, [sp, #28]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	2312      	movs	r3, #18
 800e1d4:	e7d0      	b.n	800e178 <_dtoa_r+0x238>
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e1da:	e7f5      	b.n	800e1c8 <_dtoa_r+0x288>
 800e1dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1de:	9300      	str	r3, [sp, #0]
 800e1e0:	9307      	str	r3, [sp, #28]
 800e1e2:	e7d7      	b.n	800e194 <_dtoa_r+0x254>
 800e1e4:	3101      	adds	r1, #1
 800e1e6:	0052      	lsls	r2, r2, #1
 800e1e8:	e7d8      	b.n	800e19c <_dtoa_r+0x25c>
 800e1ea:	bf00      	nop
 800e1ec:	f3af 8000 	nop.w
 800e1f0:	636f4361 	.word	0x636f4361
 800e1f4:	3fd287a7 	.word	0x3fd287a7
 800e1f8:	8b60c8b3 	.word	0x8b60c8b3
 800e1fc:	3fc68a28 	.word	0x3fc68a28
 800e200:	509f79fb 	.word	0x509f79fb
 800e204:	3fd34413 	.word	0x3fd34413
 800e208:	08010241 	.word	0x08010241
 800e20c:	08010258 	.word	0x08010258
 800e210:	7ff00000 	.word	0x7ff00000
 800e214:	08010211 	.word	0x08010211
 800e218:	3ff80000 	.word	0x3ff80000
 800e21c:	08010350 	.word	0x08010350
 800e220:	080102b0 	.word	0x080102b0
 800e224:	0801023d 	.word	0x0801023d
 800e228:	08010210 	.word	0x08010210
 800e22c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e230:	6018      	str	r0, [r3, #0]
 800e232:	9b07      	ldr	r3, [sp, #28]
 800e234:	2b0e      	cmp	r3, #14
 800e236:	f200 80a4 	bhi.w	800e382 <_dtoa_r+0x442>
 800e23a:	2c00      	cmp	r4, #0
 800e23c:	f000 80a1 	beq.w	800e382 <_dtoa_r+0x442>
 800e240:	2f00      	cmp	r7, #0
 800e242:	dd33      	ble.n	800e2ac <_dtoa_r+0x36c>
 800e244:	4bad      	ldr	r3, [pc, #692]	@ (800e4fc <_dtoa_r+0x5bc>)
 800e246:	f007 020f 	and.w	r2, r7, #15
 800e24a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e24e:	ed93 7b00 	vldr	d7, [r3]
 800e252:	05f8      	lsls	r0, r7, #23
 800e254:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e258:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e25c:	d516      	bpl.n	800e28c <_dtoa_r+0x34c>
 800e25e:	4ba8      	ldr	r3, [pc, #672]	@ (800e500 <_dtoa_r+0x5c0>)
 800e260:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e264:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e268:	f7f2 faf0 	bl	800084c <__aeabi_ddiv>
 800e26c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e270:	f004 040f 	and.w	r4, r4, #15
 800e274:	2603      	movs	r6, #3
 800e276:	4da2      	ldr	r5, [pc, #648]	@ (800e500 <_dtoa_r+0x5c0>)
 800e278:	b954      	cbnz	r4, 800e290 <_dtoa_r+0x350>
 800e27a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e27e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e282:	f7f2 fae3 	bl	800084c <__aeabi_ddiv>
 800e286:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e28a:	e028      	b.n	800e2de <_dtoa_r+0x39e>
 800e28c:	2602      	movs	r6, #2
 800e28e:	e7f2      	b.n	800e276 <_dtoa_r+0x336>
 800e290:	07e1      	lsls	r1, r4, #31
 800e292:	d508      	bpl.n	800e2a6 <_dtoa_r+0x366>
 800e294:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e298:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e29c:	f7f2 f9ac 	bl	80005f8 <__aeabi_dmul>
 800e2a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e2a4:	3601      	adds	r6, #1
 800e2a6:	1064      	asrs	r4, r4, #1
 800e2a8:	3508      	adds	r5, #8
 800e2aa:	e7e5      	b.n	800e278 <_dtoa_r+0x338>
 800e2ac:	f000 80d2 	beq.w	800e454 <_dtoa_r+0x514>
 800e2b0:	427c      	negs	r4, r7
 800e2b2:	4b92      	ldr	r3, [pc, #584]	@ (800e4fc <_dtoa_r+0x5bc>)
 800e2b4:	4d92      	ldr	r5, [pc, #584]	@ (800e500 <_dtoa_r+0x5c0>)
 800e2b6:	f004 020f 	and.w	r2, r4, #15
 800e2ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2c6:	f7f2 f997 	bl	80005f8 <__aeabi_dmul>
 800e2ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2ce:	1124      	asrs	r4, r4, #4
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	2602      	movs	r6, #2
 800e2d4:	2c00      	cmp	r4, #0
 800e2d6:	f040 80b2 	bne.w	800e43e <_dtoa_r+0x4fe>
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d1d3      	bne.n	800e286 <_dtoa_r+0x346>
 800e2de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e2e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	f000 80b7 	beq.w	800e458 <_dtoa_r+0x518>
 800e2ea:	4b86      	ldr	r3, [pc, #536]	@ (800e504 <_dtoa_r+0x5c4>)
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	4629      	mov	r1, r5
 800e2f2:	f7f2 fbf3 	bl	8000adc <__aeabi_dcmplt>
 800e2f6:	2800      	cmp	r0, #0
 800e2f8:	f000 80ae 	beq.w	800e458 <_dtoa_r+0x518>
 800e2fc:	9b07      	ldr	r3, [sp, #28]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	f000 80aa 	beq.w	800e458 <_dtoa_r+0x518>
 800e304:	9b00      	ldr	r3, [sp, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	dd37      	ble.n	800e37a <_dtoa_r+0x43a>
 800e30a:	1e7b      	subs	r3, r7, #1
 800e30c:	9304      	str	r3, [sp, #16]
 800e30e:	4620      	mov	r0, r4
 800e310:	4b7d      	ldr	r3, [pc, #500]	@ (800e508 <_dtoa_r+0x5c8>)
 800e312:	2200      	movs	r2, #0
 800e314:	4629      	mov	r1, r5
 800e316:	f7f2 f96f 	bl	80005f8 <__aeabi_dmul>
 800e31a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e31e:	9c00      	ldr	r4, [sp, #0]
 800e320:	3601      	adds	r6, #1
 800e322:	4630      	mov	r0, r6
 800e324:	f7f2 f8fe 	bl	8000524 <__aeabi_i2d>
 800e328:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e32c:	f7f2 f964 	bl	80005f8 <__aeabi_dmul>
 800e330:	4b76      	ldr	r3, [pc, #472]	@ (800e50c <_dtoa_r+0x5cc>)
 800e332:	2200      	movs	r2, #0
 800e334:	f7f1 ffaa 	bl	800028c <__adddf3>
 800e338:	4605      	mov	r5, r0
 800e33a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e33e:	2c00      	cmp	r4, #0
 800e340:	f040 808d 	bne.w	800e45e <_dtoa_r+0x51e>
 800e344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e348:	4b71      	ldr	r3, [pc, #452]	@ (800e510 <_dtoa_r+0x5d0>)
 800e34a:	2200      	movs	r2, #0
 800e34c:	f7f1 ff9c 	bl	8000288 <__aeabi_dsub>
 800e350:	4602      	mov	r2, r0
 800e352:	460b      	mov	r3, r1
 800e354:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e358:	462a      	mov	r2, r5
 800e35a:	4633      	mov	r3, r6
 800e35c:	f7f2 fbdc 	bl	8000b18 <__aeabi_dcmpgt>
 800e360:	2800      	cmp	r0, #0
 800e362:	f040 828b 	bne.w	800e87c <_dtoa_r+0x93c>
 800e366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e36a:	462a      	mov	r2, r5
 800e36c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e370:	f7f2 fbb4 	bl	8000adc <__aeabi_dcmplt>
 800e374:	2800      	cmp	r0, #0
 800e376:	f040 8128 	bne.w	800e5ca <_dtoa_r+0x68a>
 800e37a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e37e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e382:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e384:	2b00      	cmp	r3, #0
 800e386:	f2c0 815a 	blt.w	800e63e <_dtoa_r+0x6fe>
 800e38a:	2f0e      	cmp	r7, #14
 800e38c:	f300 8157 	bgt.w	800e63e <_dtoa_r+0x6fe>
 800e390:	4b5a      	ldr	r3, [pc, #360]	@ (800e4fc <_dtoa_r+0x5bc>)
 800e392:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e396:	ed93 7b00 	vldr	d7, [r3]
 800e39a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	ed8d 7b00 	vstr	d7, [sp]
 800e3a2:	da03      	bge.n	800e3ac <_dtoa_r+0x46c>
 800e3a4:	9b07      	ldr	r3, [sp, #28]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	f340 8101 	ble.w	800e5ae <_dtoa_r+0x66e>
 800e3ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e3b0:	4656      	mov	r6, sl
 800e3b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	4629      	mov	r1, r5
 800e3ba:	f7f2 fa47 	bl	800084c <__aeabi_ddiv>
 800e3be:	f7f2 fbcb 	bl	8000b58 <__aeabi_d2iz>
 800e3c2:	4680      	mov	r8, r0
 800e3c4:	f7f2 f8ae 	bl	8000524 <__aeabi_i2d>
 800e3c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3cc:	f7f2 f914 	bl	80005f8 <__aeabi_dmul>
 800e3d0:	4602      	mov	r2, r0
 800e3d2:	460b      	mov	r3, r1
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	4629      	mov	r1, r5
 800e3d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e3dc:	f7f1 ff54 	bl	8000288 <__aeabi_dsub>
 800e3e0:	f806 4b01 	strb.w	r4, [r6], #1
 800e3e4:	9d07      	ldr	r5, [sp, #28]
 800e3e6:	eba6 040a 	sub.w	r4, r6, sl
 800e3ea:	42a5      	cmp	r5, r4
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	f040 8117 	bne.w	800e622 <_dtoa_r+0x6e2>
 800e3f4:	f7f1 ff4a 	bl	800028c <__adddf3>
 800e3f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3fc:	4604      	mov	r4, r0
 800e3fe:	460d      	mov	r5, r1
 800e400:	f7f2 fb8a 	bl	8000b18 <__aeabi_dcmpgt>
 800e404:	2800      	cmp	r0, #0
 800e406:	f040 80f9 	bne.w	800e5fc <_dtoa_r+0x6bc>
 800e40a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e40e:	4620      	mov	r0, r4
 800e410:	4629      	mov	r1, r5
 800e412:	f7f2 fb59 	bl	8000ac8 <__aeabi_dcmpeq>
 800e416:	b118      	cbz	r0, 800e420 <_dtoa_r+0x4e0>
 800e418:	f018 0f01 	tst.w	r8, #1
 800e41c:	f040 80ee 	bne.w	800e5fc <_dtoa_r+0x6bc>
 800e420:	4649      	mov	r1, r9
 800e422:	4658      	mov	r0, fp
 800e424:	f000 fc90 	bl	800ed48 <_Bfree>
 800e428:	2300      	movs	r3, #0
 800e42a:	7033      	strb	r3, [r6, #0]
 800e42c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e42e:	3701      	adds	r7, #1
 800e430:	601f      	str	r7, [r3, #0]
 800e432:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e434:	2b00      	cmp	r3, #0
 800e436:	f000 831d 	beq.w	800ea74 <_dtoa_r+0xb34>
 800e43a:	601e      	str	r6, [r3, #0]
 800e43c:	e31a      	b.n	800ea74 <_dtoa_r+0xb34>
 800e43e:	07e2      	lsls	r2, r4, #31
 800e440:	d505      	bpl.n	800e44e <_dtoa_r+0x50e>
 800e442:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e446:	f7f2 f8d7 	bl	80005f8 <__aeabi_dmul>
 800e44a:	3601      	adds	r6, #1
 800e44c:	2301      	movs	r3, #1
 800e44e:	1064      	asrs	r4, r4, #1
 800e450:	3508      	adds	r5, #8
 800e452:	e73f      	b.n	800e2d4 <_dtoa_r+0x394>
 800e454:	2602      	movs	r6, #2
 800e456:	e742      	b.n	800e2de <_dtoa_r+0x39e>
 800e458:	9c07      	ldr	r4, [sp, #28]
 800e45a:	9704      	str	r7, [sp, #16]
 800e45c:	e761      	b.n	800e322 <_dtoa_r+0x3e2>
 800e45e:	4b27      	ldr	r3, [pc, #156]	@ (800e4fc <_dtoa_r+0x5bc>)
 800e460:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e462:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e466:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e46a:	4454      	add	r4, sl
 800e46c:	2900      	cmp	r1, #0
 800e46e:	d053      	beq.n	800e518 <_dtoa_r+0x5d8>
 800e470:	4928      	ldr	r1, [pc, #160]	@ (800e514 <_dtoa_r+0x5d4>)
 800e472:	2000      	movs	r0, #0
 800e474:	f7f2 f9ea 	bl	800084c <__aeabi_ddiv>
 800e478:	4633      	mov	r3, r6
 800e47a:	462a      	mov	r2, r5
 800e47c:	f7f1 ff04 	bl	8000288 <__aeabi_dsub>
 800e480:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e484:	4656      	mov	r6, sl
 800e486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e48a:	f7f2 fb65 	bl	8000b58 <__aeabi_d2iz>
 800e48e:	4605      	mov	r5, r0
 800e490:	f7f2 f848 	bl	8000524 <__aeabi_i2d>
 800e494:	4602      	mov	r2, r0
 800e496:	460b      	mov	r3, r1
 800e498:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e49c:	f7f1 fef4 	bl	8000288 <__aeabi_dsub>
 800e4a0:	3530      	adds	r5, #48	@ 0x30
 800e4a2:	4602      	mov	r2, r0
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e4aa:	f806 5b01 	strb.w	r5, [r6], #1
 800e4ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e4b2:	f7f2 fb13 	bl	8000adc <__aeabi_dcmplt>
 800e4b6:	2800      	cmp	r0, #0
 800e4b8:	d171      	bne.n	800e59e <_dtoa_r+0x65e>
 800e4ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e4be:	4911      	ldr	r1, [pc, #68]	@ (800e504 <_dtoa_r+0x5c4>)
 800e4c0:	2000      	movs	r0, #0
 800e4c2:	f7f1 fee1 	bl	8000288 <__aeabi_dsub>
 800e4c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e4ca:	f7f2 fb07 	bl	8000adc <__aeabi_dcmplt>
 800e4ce:	2800      	cmp	r0, #0
 800e4d0:	f040 8095 	bne.w	800e5fe <_dtoa_r+0x6be>
 800e4d4:	42a6      	cmp	r6, r4
 800e4d6:	f43f af50 	beq.w	800e37a <_dtoa_r+0x43a>
 800e4da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e4de:	4b0a      	ldr	r3, [pc, #40]	@ (800e508 <_dtoa_r+0x5c8>)
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	f7f2 f889 	bl	80005f8 <__aeabi_dmul>
 800e4e6:	4b08      	ldr	r3, [pc, #32]	@ (800e508 <_dtoa_r+0x5c8>)
 800e4e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4f2:	f7f2 f881 	bl	80005f8 <__aeabi_dmul>
 800e4f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4fa:	e7c4      	b.n	800e486 <_dtoa_r+0x546>
 800e4fc:	08010350 	.word	0x08010350
 800e500:	08010328 	.word	0x08010328
 800e504:	3ff00000 	.word	0x3ff00000
 800e508:	40240000 	.word	0x40240000
 800e50c:	401c0000 	.word	0x401c0000
 800e510:	40140000 	.word	0x40140000
 800e514:	3fe00000 	.word	0x3fe00000
 800e518:	4631      	mov	r1, r6
 800e51a:	4628      	mov	r0, r5
 800e51c:	f7f2 f86c 	bl	80005f8 <__aeabi_dmul>
 800e520:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e524:	9415      	str	r4, [sp, #84]	@ 0x54
 800e526:	4656      	mov	r6, sl
 800e528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e52c:	f7f2 fb14 	bl	8000b58 <__aeabi_d2iz>
 800e530:	4605      	mov	r5, r0
 800e532:	f7f1 fff7 	bl	8000524 <__aeabi_i2d>
 800e536:	4602      	mov	r2, r0
 800e538:	460b      	mov	r3, r1
 800e53a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e53e:	f7f1 fea3 	bl	8000288 <__aeabi_dsub>
 800e542:	3530      	adds	r5, #48	@ 0x30
 800e544:	f806 5b01 	strb.w	r5, [r6], #1
 800e548:	4602      	mov	r2, r0
 800e54a:	460b      	mov	r3, r1
 800e54c:	42a6      	cmp	r6, r4
 800e54e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e552:	f04f 0200 	mov.w	r2, #0
 800e556:	d124      	bne.n	800e5a2 <_dtoa_r+0x662>
 800e558:	4bac      	ldr	r3, [pc, #688]	@ (800e80c <_dtoa_r+0x8cc>)
 800e55a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e55e:	f7f1 fe95 	bl	800028c <__adddf3>
 800e562:	4602      	mov	r2, r0
 800e564:	460b      	mov	r3, r1
 800e566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e56a:	f7f2 fad5 	bl	8000b18 <__aeabi_dcmpgt>
 800e56e:	2800      	cmp	r0, #0
 800e570:	d145      	bne.n	800e5fe <_dtoa_r+0x6be>
 800e572:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e576:	49a5      	ldr	r1, [pc, #660]	@ (800e80c <_dtoa_r+0x8cc>)
 800e578:	2000      	movs	r0, #0
 800e57a:	f7f1 fe85 	bl	8000288 <__aeabi_dsub>
 800e57e:	4602      	mov	r2, r0
 800e580:	460b      	mov	r3, r1
 800e582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e586:	f7f2 faa9 	bl	8000adc <__aeabi_dcmplt>
 800e58a:	2800      	cmp	r0, #0
 800e58c:	f43f aef5 	beq.w	800e37a <_dtoa_r+0x43a>
 800e590:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e592:	1e73      	subs	r3, r6, #1
 800e594:	9315      	str	r3, [sp, #84]	@ 0x54
 800e596:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e59a:	2b30      	cmp	r3, #48	@ 0x30
 800e59c:	d0f8      	beq.n	800e590 <_dtoa_r+0x650>
 800e59e:	9f04      	ldr	r7, [sp, #16]
 800e5a0:	e73e      	b.n	800e420 <_dtoa_r+0x4e0>
 800e5a2:	4b9b      	ldr	r3, [pc, #620]	@ (800e810 <_dtoa_r+0x8d0>)
 800e5a4:	f7f2 f828 	bl	80005f8 <__aeabi_dmul>
 800e5a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5ac:	e7bc      	b.n	800e528 <_dtoa_r+0x5e8>
 800e5ae:	d10c      	bne.n	800e5ca <_dtoa_r+0x68a>
 800e5b0:	4b98      	ldr	r3, [pc, #608]	@ (800e814 <_dtoa_r+0x8d4>)
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5b8:	f7f2 f81e 	bl	80005f8 <__aeabi_dmul>
 800e5bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e5c0:	f7f2 faa0 	bl	8000b04 <__aeabi_dcmpge>
 800e5c4:	2800      	cmp	r0, #0
 800e5c6:	f000 8157 	beq.w	800e878 <_dtoa_r+0x938>
 800e5ca:	2400      	movs	r4, #0
 800e5cc:	4625      	mov	r5, r4
 800e5ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5d0:	43db      	mvns	r3, r3
 800e5d2:	9304      	str	r3, [sp, #16]
 800e5d4:	4656      	mov	r6, sl
 800e5d6:	2700      	movs	r7, #0
 800e5d8:	4621      	mov	r1, r4
 800e5da:	4658      	mov	r0, fp
 800e5dc:	f000 fbb4 	bl	800ed48 <_Bfree>
 800e5e0:	2d00      	cmp	r5, #0
 800e5e2:	d0dc      	beq.n	800e59e <_dtoa_r+0x65e>
 800e5e4:	b12f      	cbz	r7, 800e5f2 <_dtoa_r+0x6b2>
 800e5e6:	42af      	cmp	r7, r5
 800e5e8:	d003      	beq.n	800e5f2 <_dtoa_r+0x6b2>
 800e5ea:	4639      	mov	r1, r7
 800e5ec:	4658      	mov	r0, fp
 800e5ee:	f000 fbab 	bl	800ed48 <_Bfree>
 800e5f2:	4629      	mov	r1, r5
 800e5f4:	4658      	mov	r0, fp
 800e5f6:	f000 fba7 	bl	800ed48 <_Bfree>
 800e5fa:	e7d0      	b.n	800e59e <_dtoa_r+0x65e>
 800e5fc:	9704      	str	r7, [sp, #16]
 800e5fe:	4633      	mov	r3, r6
 800e600:	461e      	mov	r6, r3
 800e602:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e606:	2a39      	cmp	r2, #57	@ 0x39
 800e608:	d107      	bne.n	800e61a <_dtoa_r+0x6da>
 800e60a:	459a      	cmp	sl, r3
 800e60c:	d1f8      	bne.n	800e600 <_dtoa_r+0x6c0>
 800e60e:	9a04      	ldr	r2, [sp, #16]
 800e610:	3201      	adds	r2, #1
 800e612:	9204      	str	r2, [sp, #16]
 800e614:	2230      	movs	r2, #48	@ 0x30
 800e616:	f88a 2000 	strb.w	r2, [sl]
 800e61a:	781a      	ldrb	r2, [r3, #0]
 800e61c:	3201      	adds	r2, #1
 800e61e:	701a      	strb	r2, [r3, #0]
 800e620:	e7bd      	b.n	800e59e <_dtoa_r+0x65e>
 800e622:	4b7b      	ldr	r3, [pc, #492]	@ (800e810 <_dtoa_r+0x8d0>)
 800e624:	2200      	movs	r2, #0
 800e626:	f7f1 ffe7 	bl	80005f8 <__aeabi_dmul>
 800e62a:	2200      	movs	r2, #0
 800e62c:	2300      	movs	r3, #0
 800e62e:	4604      	mov	r4, r0
 800e630:	460d      	mov	r5, r1
 800e632:	f7f2 fa49 	bl	8000ac8 <__aeabi_dcmpeq>
 800e636:	2800      	cmp	r0, #0
 800e638:	f43f aebb 	beq.w	800e3b2 <_dtoa_r+0x472>
 800e63c:	e6f0      	b.n	800e420 <_dtoa_r+0x4e0>
 800e63e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e640:	2a00      	cmp	r2, #0
 800e642:	f000 80db 	beq.w	800e7fc <_dtoa_r+0x8bc>
 800e646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e648:	2a01      	cmp	r2, #1
 800e64a:	f300 80bf 	bgt.w	800e7cc <_dtoa_r+0x88c>
 800e64e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e650:	2a00      	cmp	r2, #0
 800e652:	f000 80b7 	beq.w	800e7c4 <_dtoa_r+0x884>
 800e656:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e65a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e65c:	4646      	mov	r6, r8
 800e65e:	9a08      	ldr	r2, [sp, #32]
 800e660:	2101      	movs	r1, #1
 800e662:	441a      	add	r2, r3
 800e664:	4658      	mov	r0, fp
 800e666:	4498      	add	r8, r3
 800e668:	9208      	str	r2, [sp, #32]
 800e66a:	f000 fc21 	bl	800eeb0 <__i2b>
 800e66e:	4605      	mov	r5, r0
 800e670:	b15e      	cbz	r6, 800e68a <_dtoa_r+0x74a>
 800e672:	9b08      	ldr	r3, [sp, #32]
 800e674:	2b00      	cmp	r3, #0
 800e676:	dd08      	ble.n	800e68a <_dtoa_r+0x74a>
 800e678:	42b3      	cmp	r3, r6
 800e67a:	9a08      	ldr	r2, [sp, #32]
 800e67c:	bfa8      	it	ge
 800e67e:	4633      	movge	r3, r6
 800e680:	eba8 0803 	sub.w	r8, r8, r3
 800e684:	1af6      	subs	r6, r6, r3
 800e686:	1ad3      	subs	r3, r2, r3
 800e688:	9308      	str	r3, [sp, #32]
 800e68a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e68c:	b1f3      	cbz	r3, 800e6cc <_dtoa_r+0x78c>
 800e68e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e690:	2b00      	cmp	r3, #0
 800e692:	f000 80b7 	beq.w	800e804 <_dtoa_r+0x8c4>
 800e696:	b18c      	cbz	r4, 800e6bc <_dtoa_r+0x77c>
 800e698:	4629      	mov	r1, r5
 800e69a:	4622      	mov	r2, r4
 800e69c:	4658      	mov	r0, fp
 800e69e:	f000 fcc7 	bl	800f030 <__pow5mult>
 800e6a2:	464a      	mov	r2, r9
 800e6a4:	4601      	mov	r1, r0
 800e6a6:	4605      	mov	r5, r0
 800e6a8:	4658      	mov	r0, fp
 800e6aa:	f000 fc17 	bl	800eedc <__multiply>
 800e6ae:	4649      	mov	r1, r9
 800e6b0:	9004      	str	r0, [sp, #16]
 800e6b2:	4658      	mov	r0, fp
 800e6b4:	f000 fb48 	bl	800ed48 <_Bfree>
 800e6b8:	9b04      	ldr	r3, [sp, #16]
 800e6ba:	4699      	mov	r9, r3
 800e6bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6be:	1b1a      	subs	r2, r3, r4
 800e6c0:	d004      	beq.n	800e6cc <_dtoa_r+0x78c>
 800e6c2:	4649      	mov	r1, r9
 800e6c4:	4658      	mov	r0, fp
 800e6c6:	f000 fcb3 	bl	800f030 <__pow5mult>
 800e6ca:	4681      	mov	r9, r0
 800e6cc:	2101      	movs	r1, #1
 800e6ce:	4658      	mov	r0, fp
 800e6d0:	f000 fbee 	bl	800eeb0 <__i2b>
 800e6d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6d6:	4604      	mov	r4, r0
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	f000 81cf 	beq.w	800ea7c <_dtoa_r+0xb3c>
 800e6de:	461a      	mov	r2, r3
 800e6e0:	4601      	mov	r1, r0
 800e6e2:	4658      	mov	r0, fp
 800e6e4:	f000 fca4 	bl	800f030 <__pow5mult>
 800e6e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6ea:	2b01      	cmp	r3, #1
 800e6ec:	4604      	mov	r4, r0
 800e6ee:	f300 8095 	bgt.w	800e81c <_dtoa_r+0x8dc>
 800e6f2:	9b02      	ldr	r3, [sp, #8]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	f040 8087 	bne.w	800e808 <_dtoa_r+0x8c8>
 800e6fa:	9b03      	ldr	r3, [sp, #12]
 800e6fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e700:	2b00      	cmp	r3, #0
 800e702:	f040 8089 	bne.w	800e818 <_dtoa_r+0x8d8>
 800e706:	9b03      	ldr	r3, [sp, #12]
 800e708:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e70c:	0d1b      	lsrs	r3, r3, #20
 800e70e:	051b      	lsls	r3, r3, #20
 800e710:	b12b      	cbz	r3, 800e71e <_dtoa_r+0x7de>
 800e712:	9b08      	ldr	r3, [sp, #32]
 800e714:	3301      	adds	r3, #1
 800e716:	9308      	str	r3, [sp, #32]
 800e718:	f108 0801 	add.w	r8, r8, #1
 800e71c:	2301      	movs	r3, #1
 800e71e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e720:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e722:	2b00      	cmp	r3, #0
 800e724:	f000 81b0 	beq.w	800ea88 <_dtoa_r+0xb48>
 800e728:	6923      	ldr	r3, [r4, #16]
 800e72a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e72e:	6918      	ldr	r0, [r3, #16]
 800e730:	f000 fb72 	bl	800ee18 <__hi0bits>
 800e734:	f1c0 0020 	rsb	r0, r0, #32
 800e738:	9b08      	ldr	r3, [sp, #32]
 800e73a:	4418      	add	r0, r3
 800e73c:	f010 001f 	ands.w	r0, r0, #31
 800e740:	d077      	beq.n	800e832 <_dtoa_r+0x8f2>
 800e742:	f1c0 0320 	rsb	r3, r0, #32
 800e746:	2b04      	cmp	r3, #4
 800e748:	dd6b      	ble.n	800e822 <_dtoa_r+0x8e2>
 800e74a:	9b08      	ldr	r3, [sp, #32]
 800e74c:	f1c0 001c 	rsb	r0, r0, #28
 800e750:	4403      	add	r3, r0
 800e752:	4480      	add	r8, r0
 800e754:	4406      	add	r6, r0
 800e756:	9308      	str	r3, [sp, #32]
 800e758:	f1b8 0f00 	cmp.w	r8, #0
 800e75c:	dd05      	ble.n	800e76a <_dtoa_r+0x82a>
 800e75e:	4649      	mov	r1, r9
 800e760:	4642      	mov	r2, r8
 800e762:	4658      	mov	r0, fp
 800e764:	f000 fcbe 	bl	800f0e4 <__lshift>
 800e768:	4681      	mov	r9, r0
 800e76a:	9b08      	ldr	r3, [sp, #32]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	dd05      	ble.n	800e77c <_dtoa_r+0x83c>
 800e770:	4621      	mov	r1, r4
 800e772:	461a      	mov	r2, r3
 800e774:	4658      	mov	r0, fp
 800e776:	f000 fcb5 	bl	800f0e4 <__lshift>
 800e77a:	4604      	mov	r4, r0
 800e77c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d059      	beq.n	800e836 <_dtoa_r+0x8f6>
 800e782:	4621      	mov	r1, r4
 800e784:	4648      	mov	r0, r9
 800e786:	f000 fd19 	bl	800f1bc <__mcmp>
 800e78a:	2800      	cmp	r0, #0
 800e78c:	da53      	bge.n	800e836 <_dtoa_r+0x8f6>
 800e78e:	1e7b      	subs	r3, r7, #1
 800e790:	9304      	str	r3, [sp, #16]
 800e792:	4649      	mov	r1, r9
 800e794:	2300      	movs	r3, #0
 800e796:	220a      	movs	r2, #10
 800e798:	4658      	mov	r0, fp
 800e79a:	f000 faf7 	bl	800ed8c <__multadd>
 800e79e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7a0:	4681      	mov	r9, r0
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	f000 8172 	beq.w	800ea8c <_dtoa_r+0xb4c>
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	4629      	mov	r1, r5
 800e7ac:	220a      	movs	r2, #10
 800e7ae:	4658      	mov	r0, fp
 800e7b0:	f000 faec 	bl	800ed8c <__multadd>
 800e7b4:	9b00      	ldr	r3, [sp, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	4605      	mov	r5, r0
 800e7ba:	dc67      	bgt.n	800e88c <_dtoa_r+0x94c>
 800e7bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7be:	2b02      	cmp	r3, #2
 800e7c0:	dc41      	bgt.n	800e846 <_dtoa_r+0x906>
 800e7c2:	e063      	b.n	800e88c <_dtoa_r+0x94c>
 800e7c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e7c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e7ca:	e746      	b.n	800e65a <_dtoa_r+0x71a>
 800e7cc:	9b07      	ldr	r3, [sp, #28]
 800e7ce:	1e5c      	subs	r4, r3, #1
 800e7d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7d2:	42a3      	cmp	r3, r4
 800e7d4:	bfbf      	itttt	lt
 800e7d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e7d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e7da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e7dc:	1ae3      	sublt	r3, r4, r3
 800e7de:	bfb4      	ite	lt
 800e7e0:	18d2      	addlt	r2, r2, r3
 800e7e2:	1b1c      	subge	r4, r3, r4
 800e7e4:	9b07      	ldr	r3, [sp, #28]
 800e7e6:	bfbc      	itt	lt
 800e7e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e7ea:	2400      	movlt	r4, #0
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	bfb5      	itete	lt
 800e7f0:	eba8 0603 	sublt.w	r6, r8, r3
 800e7f4:	9b07      	ldrge	r3, [sp, #28]
 800e7f6:	2300      	movlt	r3, #0
 800e7f8:	4646      	movge	r6, r8
 800e7fa:	e730      	b.n	800e65e <_dtoa_r+0x71e>
 800e7fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e7fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e800:	4646      	mov	r6, r8
 800e802:	e735      	b.n	800e670 <_dtoa_r+0x730>
 800e804:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e806:	e75c      	b.n	800e6c2 <_dtoa_r+0x782>
 800e808:	2300      	movs	r3, #0
 800e80a:	e788      	b.n	800e71e <_dtoa_r+0x7de>
 800e80c:	3fe00000 	.word	0x3fe00000
 800e810:	40240000 	.word	0x40240000
 800e814:	40140000 	.word	0x40140000
 800e818:	9b02      	ldr	r3, [sp, #8]
 800e81a:	e780      	b.n	800e71e <_dtoa_r+0x7de>
 800e81c:	2300      	movs	r3, #0
 800e81e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e820:	e782      	b.n	800e728 <_dtoa_r+0x7e8>
 800e822:	d099      	beq.n	800e758 <_dtoa_r+0x818>
 800e824:	9a08      	ldr	r2, [sp, #32]
 800e826:	331c      	adds	r3, #28
 800e828:	441a      	add	r2, r3
 800e82a:	4498      	add	r8, r3
 800e82c:	441e      	add	r6, r3
 800e82e:	9208      	str	r2, [sp, #32]
 800e830:	e792      	b.n	800e758 <_dtoa_r+0x818>
 800e832:	4603      	mov	r3, r0
 800e834:	e7f6      	b.n	800e824 <_dtoa_r+0x8e4>
 800e836:	9b07      	ldr	r3, [sp, #28]
 800e838:	9704      	str	r7, [sp, #16]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	dc20      	bgt.n	800e880 <_dtoa_r+0x940>
 800e83e:	9300      	str	r3, [sp, #0]
 800e840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e842:	2b02      	cmp	r3, #2
 800e844:	dd1e      	ble.n	800e884 <_dtoa_r+0x944>
 800e846:	9b00      	ldr	r3, [sp, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	f47f aec0 	bne.w	800e5ce <_dtoa_r+0x68e>
 800e84e:	4621      	mov	r1, r4
 800e850:	2205      	movs	r2, #5
 800e852:	4658      	mov	r0, fp
 800e854:	f000 fa9a 	bl	800ed8c <__multadd>
 800e858:	4601      	mov	r1, r0
 800e85a:	4604      	mov	r4, r0
 800e85c:	4648      	mov	r0, r9
 800e85e:	f000 fcad 	bl	800f1bc <__mcmp>
 800e862:	2800      	cmp	r0, #0
 800e864:	f77f aeb3 	ble.w	800e5ce <_dtoa_r+0x68e>
 800e868:	4656      	mov	r6, sl
 800e86a:	2331      	movs	r3, #49	@ 0x31
 800e86c:	f806 3b01 	strb.w	r3, [r6], #1
 800e870:	9b04      	ldr	r3, [sp, #16]
 800e872:	3301      	adds	r3, #1
 800e874:	9304      	str	r3, [sp, #16]
 800e876:	e6ae      	b.n	800e5d6 <_dtoa_r+0x696>
 800e878:	9c07      	ldr	r4, [sp, #28]
 800e87a:	9704      	str	r7, [sp, #16]
 800e87c:	4625      	mov	r5, r4
 800e87e:	e7f3      	b.n	800e868 <_dtoa_r+0x928>
 800e880:	9b07      	ldr	r3, [sp, #28]
 800e882:	9300      	str	r3, [sp, #0]
 800e884:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e886:	2b00      	cmp	r3, #0
 800e888:	f000 8104 	beq.w	800ea94 <_dtoa_r+0xb54>
 800e88c:	2e00      	cmp	r6, #0
 800e88e:	dd05      	ble.n	800e89c <_dtoa_r+0x95c>
 800e890:	4629      	mov	r1, r5
 800e892:	4632      	mov	r2, r6
 800e894:	4658      	mov	r0, fp
 800e896:	f000 fc25 	bl	800f0e4 <__lshift>
 800e89a:	4605      	mov	r5, r0
 800e89c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d05a      	beq.n	800e958 <_dtoa_r+0xa18>
 800e8a2:	6869      	ldr	r1, [r5, #4]
 800e8a4:	4658      	mov	r0, fp
 800e8a6:	f000 fa0f 	bl	800ecc8 <_Balloc>
 800e8aa:	4606      	mov	r6, r0
 800e8ac:	b928      	cbnz	r0, 800e8ba <_dtoa_r+0x97a>
 800e8ae:	4b84      	ldr	r3, [pc, #528]	@ (800eac0 <_dtoa_r+0xb80>)
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e8b6:	f7ff bb5a 	b.w	800df6e <_dtoa_r+0x2e>
 800e8ba:	692a      	ldr	r2, [r5, #16]
 800e8bc:	3202      	adds	r2, #2
 800e8be:	0092      	lsls	r2, r2, #2
 800e8c0:	f105 010c 	add.w	r1, r5, #12
 800e8c4:	300c      	adds	r0, #12
 800e8c6:	f000 fe3d 	bl	800f544 <memcpy>
 800e8ca:	2201      	movs	r2, #1
 800e8cc:	4631      	mov	r1, r6
 800e8ce:	4658      	mov	r0, fp
 800e8d0:	f000 fc08 	bl	800f0e4 <__lshift>
 800e8d4:	f10a 0301 	add.w	r3, sl, #1
 800e8d8:	9307      	str	r3, [sp, #28]
 800e8da:	9b00      	ldr	r3, [sp, #0]
 800e8dc:	4453      	add	r3, sl
 800e8de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e8e0:	9b02      	ldr	r3, [sp, #8]
 800e8e2:	f003 0301 	and.w	r3, r3, #1
 800e8e6:	462f      	mov	r7, r5
 800e8e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8ea:	4605      	mov	r5, r0
 800e8ec:	9b07      	ldr	r3, [sp, #28]
 800e8ee:	4621      	mov	r1, r4
 800e8f0:	3b01      	subs	r3, #1
 800e8f2:	4648      	mov	r0, r9
 800e8f4:	9300      	str	r3, [sp, #0]
 800e8f6:	f7ff fa9a 	bl	800de2e <quorem>
 800e8fa:	4639      	mov	r1, r7
 800e8fc:	9002      	str	r0, [sp, #8]
 800e8fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e902:	4648      	mov	r0, r9
 800e904:	f000 fc5a 	bl	800f1bc <__mcmp>
 800e908:	462a      	mov	r2, r5
 800e90a:	9008      	str	r0, [sp, #32]
 800e90c:	4621      	mov	r1, r4
 800e90e:	4658      	mov	r0, fp
 800e910:	f000 fc70 	bl	800f1f4 <__mdiff>
 800e914:	68c2      	ldr	r2, [r0, #12]
 800e916:	4606      	mov	r6, r0
 800e918:	bb02      	cbnz	r2, 800e95c <_dtoa_r+0xa1c>
 800e91a:	4601      	mov	r1, r0
 800e91c:	4648      	mov	r0, r9
 800e91e:	f000 fc4d 	bl	800f1bc <__mcmp>
 800e922:	4602      	mov	r2, r0
 800e924:	4631      	mov	r1, r6
 800e926:	4658      	mov	r0, fp
 800e928:	920e      	str	r2, [sp, #56]	@ 0x38
 800e92a:	f000 fa0d 	bl	800ed48 <_Bfree>
 800e92e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e930:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e932:	9e07      	ldr	r6, [sp, #28]
 800e934:	ea43 0102 	orr.w	r1, r3, r2
 800e938:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e93a:	4319      	orrs	r1, r3
 800e93c:	d110      	bne.n	800e960 <_dtoa_r+0xa20>
 800e93e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e942:	d029      	beq.n	800e998 <_dtoa_r+0xa58>
 800e944:	9b08      	ldr	r3, [sp, #32]
 800e946:	2b00      	cmp	r3, #0
 800e948:	dd02      	ble.n	800e950 <_dtoa_r+0xa10>
 800e94a:	9b02      	ldr	r3, [sp, #8]
 800e94c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e950:	9b00      	ldr	r3, [sp, #0]
 800e952:	f883 8000 	strb.w	r8, [r3]
 800e956:	e63f      	b.n	800e5d8 <_dtoa_r+0x698>
 800e958:	4628      	mov	r0, r5
 800e95a:	e7bb      	b.n	800e8d4 <_dtoa_r+0x994>
 800e95c:	2201      	movs	r2, #1
 800e95e:	e7e1      	b.n	800e924 <_dtoa_r+0x9e4>
 800e960:	9b08      	ldr	r3, [sp, #32]
 800e962:	2b00      	cmp	r3, #0
 800e964:	db04      	blt.n	800e970 <_dtoa_r+0xa30>
 800e966:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e968:	430b      	orrs	r3, r1
 800e96a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e96c:	430b      	orrs	r3, r1
 800e96e:	d120      	bne.n	800e9b2 <_dtoa_r+0xa72>
 800e970:	2a00      	cmp	r2, #0
 800e972:	dded      	ble.n	800e950 <_dtoa_r+0xa10>
 800e974:	4649      	mov	r1, r9
 800e976:	2201      	movs	r2, #1
 800e978:	4658      	mov	r0, fp
 800e97a:	f000 fbb3 	bl	800f0e4 <__lshift>
 800e97e:	4621      	mov	r1, r4
 800e980:	4681      	mov	r9, r0
 800e982:	f000 fc1b 	bl	800f1bc <__mcmp>
 800e986:	2800      	cmp	r0, #0
 800e988:	dc03      	bgt.n	800e992 <_dtoa_r+0xa52>
 800e98a:	d1e1      	bne.n	800e950 <_dtoa_r+0xa10>
 800e98c:	f018 0f01 	tst.w	r8, #1
 800e990:	d0de      	beq.n	800e950 <_dtoa_r+0xa10>
 800e992:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e996:	d1d8      	bne.n	800e94a <_dtoa_r+0xa0a>
 800e998:	9a00      	ldr	r2, [sp, #0]
 800e99a:	2339      	movs	r3, #57	@ 0x39
 800e99c:	7013      	strb	r3, [r2, #0]
 800e99e:	4633      	mov	r3, r6
 800e9a0:	461e      	mov	r6, r3
 800e9a2:	3b01      	subs	r3, #1
 800e9a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e9a8:	2a39      	cmp	r2, #57	@ 0x39
 800e9aa:	d052      	beq.n	800ea52 <_dtoa_r+0xb12>
 800e9ac:	3201      	adds	r2, #1
 800e9ae:	701a      	strb	r2, [r3, #0]
 800e9b0:	e612      	b.n	800e5d8 <_dtoa_r+0x698>
 800e9b2:	2a00      	cmp	r2, #0
 800e9b4:	dd07      	ble.n	800e9c6 <_dtoa_r+0xa86>
 800e9b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e9ba:	d0ed      	beq.n	800e998 <_dtoa_r+0xa58>
 800e9bc:	9a00      	ldr	r2, [sp, #0]
 800e9be:	f108 0301 	add.w	r3, r8, #1
 800e9c2:	7013      	strb	r3, [r2, #0]
 800e9c4:	e608      	b.n	800e5d8 <_dtoa_r+0x698>
 800e9c6:	9b07      	ldr	r3, [sp, #28]
 800e9c8:	9a07      	ldr	r2, [sp, #28]
 800e9ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e9ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	d028      	beq.n	800ea26 <_dtoa_r+0xae6>
 800e9d4:	4649      	mov	r1, r9
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	220a      	movs	r2, #10
 800e9da:	4658      	mov	r0, fp
 800e9dc:	f000 f9d6 	bl	800ed8c <__multadd>
 800e9e0:	42af      	cmp	r7, r5
 800e9e2:	4681      	mov	r9, r0
 800e9e4:	f04f 0300 	mov.w	r3, #0
 800e9e8:	f04f 020a 	mov.w	r2, #10
 800e9ec:	4639      	mov	r1, r7
 800e9ee:	4658      	mov	r0, fp
 800e9f0:	d107      	bne.n	800ea02 <_dtoa_r+0xac2>
 800e9f2:	f000 f9cb 	bl	800ed8c <__multadd>
 800e9f6:	4607      	mov	r7, r0
 800e9f8:	4605      	mov	r5, r0
 800e9fa:	9b07      	ldr	r3, [sp, #28]
 800e9fc:	3301      	adds	r3, #1
 800e9fe:	9307      	str	r3, [sp, #28]
 800ea00:	e774      	b.n	800e8ec <_dtoa_r+0x9ac>
 800ea02:	f000 f9c3 	bl	800ed8c <__multadd>
 800ea06:	4629      	mov	r1, r5
 800ea08:	4607      	mov	r7, r0
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	220a      	movs	r2, #10
 800ea0e:	4658      	mov	r0, fp
 800ea10:	f000 f9bc 	bl	800ed8c <__multadd>
 800ea14:	4605      	mov	r5, r0
 800ea16:	e7f0      	b.n	800e9fa <_dtoa_r+0xaba>
 800ea18:	9b00      	ldr	r3, [sp, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	bfcc      	ite	gt
 800ea1e:	461e      	movgt	r6, r3
 800ea20:	2601      	movle	r6, #1
 800ea22:	4456      	add	r6, sl
 800ea24:	2700      	movs	r7, #0
 800ea26:	4649      	mov	r1, r9
 800ea28:	2201      	movs	r2, #1
 800ea2a:	4658      	mov	r0, fp
 800ea2c:	f000 fb5a 	bl	800f0e4 <__lshift>
 800ea30:	4621      	mov	r1, r4
 800ea32:	4681      	mov	r9, r0
 800ea34:	f000 fbc2 	bl	800f1bc <__mcmp>
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	dcb0      	bgt.n	800e99e <_dtoa_r+0xa5e>
 800ea3c:	d102      	bne.n	800ea44 <_dtoa_r+0xb04>
 800ea3e:	f018 0f01 	tst.w	r8, #1
 800ea42:	d1ac      	bne.n	800e99e <_dtoa_r+0xa5e>
 800ea44:	4633      	mov	r3, r6
 800ea46:	461e      	mov	r6, r3
 800ea48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea4c:	2a30      	cmp	r2, #48	@ 0x30
 800ea4e:	d0fa      	beq.n	800ea46 <_dtoa_r+0xb06>
 800ea50:	e5c2      	b.n	800e5d8 <_dtoa_r+0x698>
 800ea52:	459a      	cmp	sl, r3
 800ea54:	d1a4      	bne.n	800e9a0 <_dtoa_r+0xa60>
 800ea56:	9b04      	ldr	r3, [sp, #16]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	9304      	str	r3, [sp, #16]
 800ea5c:	2331      	movs	r3, #49	@ 0x31
 800ea5e:	f88a 3000 	strb.w	r3, [sl]
 800ea62:	e5b9      	b.n	800e5d8 <_dtoa_r+0x698>
 800ea64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ea66:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800eac4 <_dtoa_r+0xb84>
 800ea6a:	b11b      	cbz	r3, 800ea74 <_dtoa_r+0xb34>
 800ea6c:	f10a 0308 	add.w	r3, sl, #8
 800ea70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ea72:	6013      	str	r3, [r2, #0]
 800ea74:	4650      	mov	r0, sl
 800ea76:	b019      	add	sp, #100	@ 0x64
 800ea78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	f77f ae37 	ble.w	800e6f2 <_dtoa_r+0x7b2>
 800ea84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea86:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea88:	2001      	movs	r0, #1
 800ea8a:	e655      	b.n	800e738 <_dtoa_r+0x7f8>
 800ea8c:	9b00      	ldr	r3, [sp, #0]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	f77f aed6 	ble.w	800e840 <_dtoa_r+0x900>
 800ea94:	4656      	mov	r6, sl
 800ea96:	4621      	mov	r1, r4
 800ea98:	4648      	mov	r0, r9
 800ea9a:	f7ff f9c8 	bl	800de2e <quorem>
 800ea9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800eaa2:	f806 8b01 	strb.w	r8, [r6], #1
 800eaa6:	9b00      	ldr	r3, [sp, #0]
 800eaa8:	eba6 020a 	sub.w	r2, r6, sl
 800eaac:	4293      	cmp	r3, r2
 800eaae:	ddb3      	ble.n	800ea18 <_dtoa_r+0xad8>
 800eab0:	4649      	mov	r1, r9
 800eab2:	2300      	movs	r3, #0
 800eab4:	220a      	movs	r2, #10
 800eab6:	4658      	mov	r0, fp
 800eab8:	f000 f968 	bl	800ed8c <__multadd>
 800eabc:	4681      	mov	r9, r0
 800eabe:	e7ea      	b.n	800ea96 <_dtoa_r+0xb56>
 800eac0:	080102b0 	.word	0x080102b0
 800eac4:	08010234 	.word	0x08010234

0800eac8 <_free_r>:
 800eac8:	b538      	push	{r3, r4, r5, lr}
 800eaca:	4605      	mov	r5, r0
 800eacc:	2900      	cmp	r1, #0
 800eace:	d041      	beq.n	800eb54 <_free_r+0x8c>
 800ead0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ead4:	1f0c      	subs	r4, r1, #4
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	bfb8      	it	lt
 800eada:	18e4      	addlt	r4, r4, r3
 800eadc:	f000 f8e8 	bl	800ecb0 <__malloc_lock>
 800eae0:	4a1d      	ldr	r2, [pc, #116]	@ (800eb58 <_free_r+0x90>)
 800eae2:	6813      	ldr	r3, [r2, #0]
 800eae4:	b933      	cbnz	r3, 800eaf4 <_free_r+0x2c>
 800eae6:	6063      	str	r3, [r4, #4]
 800eae8:	6014      	str	r4, [r2, #0]
 800eaea:	4628      	mov	r0, r5
 800eaec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eaf0:	f000 b8e4 	b.w	800ecbc <__malloc_unlock>
 800eaf4:	42a3      	cmp	r3, r4
 800eaf6:	d908      	bls.n	800eb0a <_free_r+0x42>
 800eaf8:	6820      	ldr	r0, [r4, #0]
 800eafa:	1821      	adds	r1, r4, r0
 800eafc:	428b      	cmp	r3, r1
 800eafe:	bf01      	itttt	eq
 800eb00:	6819      	ldreq	r1, [r3, #0]
 800eb02:	685b      	ldreq	r3, [r3, #4]
 800eb04:	1809      	addeq	r1, r1, r0
 800eb06:	6021      	streq	r1, [r4, #0]
 800eb08:	e7ed      	b.n	800eae6 <_free_r+0x1e>
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	b10b      	cbz	r3, 800eb14 <_free_r+0x4c>
 800eb10:	42a3      	cmp	r3, r4
 800eb12:	d9fa      	bls.n	800eb0a <_free_r+0x42>
 800eb14:	6811      	ldr	r1, [r2, #0]
 800eb16:	1850      	adds	r0, r2, r1
 800eb18:	42a0      	cmp	r0, r4
 800eb1a:	d10b      	bne.n	800eb34 <_free_r+0x6c>
 800eb1c:	6820      	ldr	r0, [r4, #0]
 800eb1e:	4401      	add	r1, r0
 800eb20:	1850      	adds	r0, r2, r1
 800eb22:	4283      	cmp	r3, r0
 800eb24:	6011      	str	r1, [r2, #0]
 800eb26:	d1e0      	bne.n	800eaea <_free_r+0x22>
 800eb28:	6818      	ldr	r0, [r3, #0]
 800eb2a:	685b      	ldr	r3, [r3, #4]
 800eb2c:	6053      	str	r3, [r2, #4]
 800eb2e:	4408      	add	r0, r1
 800eb30:	6010      	str	r0, [r2, #0]
 800eb32:	e7da      	b.n	800eaea <_free_r+0x22>
 800eb34:	d902      	bls.n	800eb3c <_free_r+0x74>
 800eb36:	230c      	movs	r3, #12
 800eb38:	602b      	str	r3, [r5, #0]
 800eb3a:	e7d6      	b.n	800eaea <_free_r+0x22>
 800eb3c:	6820      	ldr	r0, [r4, #0]
 800eb3e:	1821      	adds	r1, r4, r0
 800eb40:	428b      	cmp	r3, r1
 800eb42:	bf04      	itt	eq
 800eb44:	6819      	ldreq	r1, [r3, #0]
 800eb46:	685b      	ldreq	r3, [r3, #4]
 800eb48:	6063      	str	r3, [r4, #4]
 800eb4a:	bf04      	itt	eq
 800eb4c:	1809      	addeq	r1, r1, r0
 800eb4e:	6021      	streq	r1, [r4, #0]
 800eb50:	6054      	str	r4, [r2, #4]
 800eb52:	e7ca      	b.n	800eaea <_free_r+0x22>
 800eb54:	bd38      	pop	{r3, r4, r5, pc}
 800eb56:	bf00      	nop
 800eb58:	2000242c 	.word	0x2000242c

0800eb5c <malloc>:
 800eb5c:	4b02      	ldr	r3, [pc, #8]	@ (800eb68 <malloc+0xc>)
 800eb5e:	4601      	mov	r1, r0
 800eb60:	6818      	ldr	r0, [r3, #0]
 800eb62:	f000 b825 	b.w	800ebb0 <_malloc_r>
 800eb66:	bf00      	nop
 800eb68:	2000010c 	.word	0x2000010c

0800eb6c <sbrk_aligned>:
 800eb6c:	b570      	push	{r4, r5, r6, lr}
 800eb6e:	4e0f      	ldr	r6, [pc, #60]	@ (800ebac <sbrk_aligned+0x40>)
 800eb70:	460c      	mov	r4, r1
 800eb72:	6831      	ldr	r1, [r6, #0]
 800eb74:	4605      	mov	r5, r0
 800eb76:	b911      	cbnz	r1, 800eb7e <sbrk_aligned+0x12>
 800eb78:	f000 fcd4 	bl	800f524 <_sbrk_r>
 800eb7c:	6030      	str	r0, [r6, #0]
 800eb7e:	4621      	mov	r1, r4
 800eb80:	4628      	mov	r0, r5
 800eb82:	f000 fccf 	bl	800f524 <_sbrk_r>
 800eb86:	1c43      	adds	r3, r0, #1
 800eb88:	d103      	bne.n	800eb92 <sbrk_aligned+0x26>
 800eb8a:	f04f 34ff 	mov.w	r4, #4294967295
 800eb8e:	4620      	mov	r0, r4
 800eb90:	bd70      	pop	{r4, r5, r6, pc}
 800eb92:	1cc4      	adds	r4, r0, #3
 800eb94:	f024 0403 	bic.w	r4, r4, #3
 800eb98:	42a0      	cmp	r0, r4
 800eb9a:	d0f8      	beq.n	800eb8e <sbrk_aligned+0x22>
 800eb9c:	1a21      	subs	r1, r4, r0
 800eb9e:	4628      	mov	r0, r5
 800eba0:	f000 fcc0 	bl	800f524 <_sbrk_r>
 800eba4:	3001      	adds	r0, #1
 800eba6:	d1f2      	bne.n	800eb8e <sbrk_aligned+0x22>
 800eba8:	e7ef      	b.n	800eb8a <sbrk_aligned+0x1e>
 800ebaa:	bf00      	nop
 800ebac:	20002428 	.word	0x20002428

0800ebb0 <_malloc_r>:
 800ebb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebb4:	1ccd      	adds	r5, r1, #3
 800ebb6:	f025 0503 	bic.w	r5, r5, #3
 800ebba:	3508      	adds	r5, #8
 800ebbc:	2d0c      	cmp	r5, #12
 800ebbe:	bf38      	it	cc
 800ebc0:	250c      	movcc	r5, #12
 800ebc2:	2d00      	cmp	r5, #0
 800ebc4:	4606      	mov	r6, r0
 800ebc6:	db01      	blt.n	800ebcc <_malloc_r+0x1c>
 800ebc8:	42a9      	cmp	r1, r5
 800ebca:	d904      	bls.n	800ebd6 <_malloc_r+0x26>
 800ebcc:	230c      	movs	r3, #12
 800ebce:	6033      	str	r3, [r6, #0]
 800ebd0:	2000      	movs	r0, #0
 800ebd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ecac <_malloc_r+0xfc>
 800ebda:	f000 f869 	bl	800ecb0 <__malloc_lock>
 800ebde:	f8d8 3000 	ldr.w	r3, [r8]
 800ebe2:	461c      	mov	r4, r3
 800ebe4:	bb44      	cbnz	r4, 800ec38 <_malloc_r+0x88>
 800ebe6:	4629      	mov	r1, r5
 800ebe8:	4630      	mov	r0, r6
 800ebea:	f7ff ffbf 	bl	800eb6c <sbrk_aligned>
 800ebee:	1c43      	adds	r3, r0, #1
 800ebf0:	4604      	mov	r4, r0
 800ebf2:	d158      	bne.n	800eca6 <_malloc_r+0xf6>
 800ebf4:	f8d8 4000 	ldr.w	r4, [r8]
 800ebf8:	4627      	mov	r7, r4
 800ebfa:	2f00      	cmp	r7, #0
 800ebfc:	d143      	bne.n	800ec86 <_malloc_r+0xd6>
 800ebfe:	2c00      	cmp	r4, #0
 800ec00:	d04b      	beq.n	800ec9a <_malloc_r+0xea>
 800ec02:	6823      	ldr	r3, [r4, #0]
 800ec04:	4639      	mov	r1, r7
 800ec06:	4630      	mov	r0, r6
 800ec08:	eb04 0903 	add.w	r9, r4, r3
 800ec0c:	f000 fc8a 	bl	800f524 <_sbrk_r>
 800ec10:	4581      	cmp	r9, r0
 800ec12:	d142      	bne.n	800ec9a <_malloc_r+0xea>
 800ec14:	6821      	ldr	r1, [r4, #0]
 800ec16:	1a6d      	subs	r5, r5, r1
 800ec18:	4629      	mov	r1, r5
 800ec1a:	4630      	mov	r0, r6
 800ec1c:	f7ff ffa6 	bl	800eb6c <sbrk_aligned>
 800ec20:	3001      	adds	r0, #1
 800ec22:	d03a      	beq.n	800ec9a <_malloc_r+0xea>
 800ec24:	6823      	ldr	r3, [r4, #0]
 800ec26:	442b      	add	r3, r5
 800ec28:	6023      	str	r3, [r4, #0]
 800ec2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ec2e:	685a      	ldr	r2, [r3, #4]
 800ec30:	bb62      	cbnz	r2, 800ec8c <_malloc_r+0xdc>
 800ec32:	f8c8 7000 	str.w	r7, [r8]
 800ec36:	e00f      	b.n	800ec58 <_malloc_r+0xa8>
 800ec38:	6822      	ldr	r2, [r4, #0]
 800ec3a:	1b52      	subs	r2, r2, r5
 800ec3c:	d420      	bmi.n	800ec80 <_malloc_r+0xd0>
 800ec3e:	2a0b      	cmp	r2, #11
 800ec40:	d917      	bls.n	800ec72 <_malloc_r+0xc2>
 800ec42:	1961      	adds	r1, r4, r5
 800ec44:	42a3      	cmp	r3, r4
 800ec46:	6025      	str	r5, [r4, #0]
 800ec48:	bf18      	it	ne
 800ec4a:	6059      	strne	r1, [r3, #4]
 800ec4c:	6863      	ldr	r3, [r4, #4]
 800ec4e:	bf08      	it	eq
 800ec50:	f8c8 1000 	streq.w	r1, [r8]
 800ec54:	5162      	str	r2, [r4, r5]
 800ec56:	604b      	str	r3, [r1, #4]
 800ec58:	4630      	mov	r0, r6
 800ec5a:	f000 f82f 	bl	800ecbc <__malloc_unlock>
 800ec5e:	f104 000b 	add.w	r0, r4, #11
 800ec62:	1d23      	adds	r3, r4, #4
 800ec64:	f020 0007 	bic.w	r0, r0, #7
 800ec68:	1ac2      	subs	r2, r0, r3
 800ec6a:	bf1c      	itt	ne
 800ec6c:	1a1b      	subne	r3, r3, r0
 800ec6e:	50a3      	strne	r3, [r4, r2]
 800ec70:	e7af      	b.n	800ebd2 <_malloc_r+0x22>
 800ec72:	6862      	ldr	r2, [r4, #4]
 800ec74:	42a3      	cmp	r3, r4
 800ec76:	bf0c      	ite	eq
 800ec78:	f8c8 2000 	streq.w	r2, [r8]
 800ec7c:	605a      	strne	r2, [r3, #4]
 800ec7e:	e7eb      	b.n	800ec58 <_malloc_r+0xa8>
 800ec80:	4623      	mov	r3, r4
 800ec82:	6864      	ldr	r4, [r4, #4]
 800ec84:	e7ae      	b.n	800ebe4 <_malloc_r+0x34>
 800ec86:	463c      	mov	r4, r7
 800ec88:	687f      	ldr	r7, [r7, #4]
 800ec8a:	e7b6      	b.n	800ebfa <_malloc_r+0x4a>
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	685b      	ldr	r3, [r3, #4]
 800ec90:	42a3      	cmp	r3, r4
 800ec92:	d1fb      	bne.n	800ec8c <_malloc_r+0xdc>
 800ec94:	2300      	movs	r3, #0
 800ec96:	6053      	str	r3, [r2, #4]
 800ec98:	e7de      	b.n	800ec58 <_malloc_r+0xa8>
 800ec9a:	230c      	movs	r3, #12
 800ec9c:	6033      	str	r3, [r6, #0]
 800ec9e:	4630      	mov	r0, r6
 800eca0:	f000 f80c 	bl	800ecbc <__malloc_unlock>
 800eca4:	e794      	b.n	800ebd0 <_malloc_r+0x20>
 800eca6:	6005      	str	r5, [r0, #0]
 800eca8:	e7d6      	b.n	800ec58 <_malloc_r+0xa8>
 800ecaa:	bf00      	nop
 800ecac:	2000242c 	.word	0x2000242c

0800ecb0 <__malloc_lock>:
 800ecb0:	4801      	ldr	r0, [pc, #4]	@ (800ecb8 <__malloc_lock+0x8>)
 800ecb2:	f7ff b8ba 	b.w	800de2a <__retarget_lock_acquire_recursive>
 800ecb6:	bf00      	nop
 800ecb8:	20002424 	.word	0x20002424

0800ecbc <__malloc_unlock>:
 800ecbc:	4801      	ldr	r0, [pc, #4]	@ (800ecc4 <__malloc_unlock+0x8>)
 800ecbe:	f7ff b8b5 	b.w	800de2c <__retarget_lock_release_recursive>
 800ecc2:	bf00      	nop
 800ecc4:	20002424 	.word	0x20002424

0800ecc8 <_Balloc>:
 800ecc8:	b570      	push	{r4, r5, r6, lr}
 800ecca:	69c6      	ldr	r6, [r0, #28]
 800eccc:	4604      	mov	r4, r0
 800ecce:	460d      	mov	r5, r1
 800ecd0:	b976      	cbnz	r6, 800ecf0 <_Balloc+0x28>
 800ecd2:	2010      	movs	r0, #16
 800ecd4:	f7ff ff42 	bl	800eb5c <malloc>
 800ecd8:	4602      	mov	r2, r0
 800ecda:	61e0      	str	r0, [r4, #28]
 800ecdc:	b920      	cbnz	r0, 800ece8 <_Balloc+0x20>
 800ecde:	4b18      	ldr	r3, [pc, #96]	@ (800ed40 <_Balloc+0x78>)
 800ece0:	4818      	ldr	r0, [pc, #96]	@ (800ed44 <_Balloc+0x7c>)
 800ece2:	216b      	movs	r1, #107	@ 0x6b
 800ece4:	f000 fc3c 	bl	800f560 <__assert_func>
 800ece8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ecec:	6006      	str	r6, [r0, #0]
 800ecee:	60c6      	str	r6, [r0, #12]
 800ecf0:	69e6      	ldr	r6, [r4, #28]
 800ecf2:	68f3      	ldr	r3, [r6, #12]
 800ecf4:	b183      	cbz	r3, 800ed18 <_Balloc+0x50>
 800ecf6:	69e3      	ldr	r3, [r4, #28]
 800ecf8:	68db      	ldr	r3, [r3, #12]
 800ecfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ecfe:	b9b8      	cbnz	r0, 800ed30 <_Balloc+0x68>
 800ed00:	2101      	movs	r1, #1
 800ed02:	fa01 f605 	lsl.w	r6, r1, r5
 800ed06:	1d72      	adds	r2, r6, #5
 800ed08:	0092      	lsls	r2, r2, #2
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f000 fc46 	bl	800f59c <_calloc_r>
 800ed10:	b160      	cbz	r0, 800ed2c <_Balloc+0x64>
 800ed12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ed16:	e00e      	b.n	800ed36 <_Balloc+0x6e>
 800ed18:	2221      	movs	r2, #33	@ 0x21
 800ed1a:	2104      	movs	r1, #4
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	f000 fc3d 	bl	800f59c <_calloc_r>
 800ed22:	69e3      	ldr	r3, [r4, #28]
 800ed24:	60f0      	str	r0, [r6, #12]
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d1e4      	bne.n	800ecf6 <_Balloc+0x2e>
 800ed2c:	2000      	movs	r0, #0
 800ed2e:	bd70      	pop	{r4, r5, r6, pc}
 800ed30:	6802      	ldr	r2, [r0, #0]
 800ed32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ed36:	2300      	movs	r3, #0
 800ed38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ed3c:	e7f7      	b.n	800ed2e <_Balloc+0x66>
 800ed3e:	bf00      	nop
 800ed40:	08010241 	.word	0x08010241
 800ed44:	080102c1 	.word	0x080102c1

0800ed48 <_Bfree>:
 800ed48:	b570      	push	{r4, r5, r6, lr}
 800ed4a:	69c6      	ldr	r6, [r0, #28]
 800ed4c:	4605      	mov	r5, r0
 800ed4e:	460c      	mov	r4, r1
 800ed50:	b976      	cbnz	r6, 800ed70 <_Bfree+0x28>
 800ed52:	2010      	movs	r0, #16
 800ed54:	f7ff ff02 	bl	800eb5c <malloc>
 800ed58:	4602      	mov	r2, r0
 800ed5a:	61e8      	str	r0, [r5, #28]
 800ed5c:	b920      	cbnz	r0, 800ed68 <_Bfree+0x20>
 800ed5e:	4b09      	ldr	r3, [pc, #36]	@ (800ed84 <_Bfree+0x3c>)
 800ed60:	4809      	ldr	r0, [pc, #36]	@ (800ed88 <_Bfree+0x40>)
 800ed62:	218f      	movs	r1, #143	@ 0x8f
 800ed64:	f000 fbfc 	bl	800f560 <__assert_func>
 800ed68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed6c:	6006      	str	r6, [r0, #0]
 800ed6e:	60c6      	str	r6, [r0, #12]
 800ed70:	b13c      	cbz	r4, 800ed82 <_Bfree+0x3a>
 800ed72:	69eb      	ldr	r3, [r5, #28]
 800ed74:	6862      	ldr	r2, [r4, #4]
 800ed76:	68db      	ldr	r3, [r3, #12]
 800ed78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ed7c:	6021      	str	r1, [r4, #0]
 800ed7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ed82:	bd70      	pop	{r4, r5, r6, pc}
 800ed84:	08010241 	.word	0x08010241
 800ed88:	080102c1 	.word	0x080102c1

0800ed8c <__multadd>:
 800ed8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed90:	690d      	ldr	r5, [r1, #16]
 800ed92:	4607      	mov	r7, r0
 800ed94:	460c      	mov	r4, r1
 800ed96:	461e      	mov	r6, r3
 800ed98:	f101 0c14 	add.w	ip, r1, #20
 800ed9c:	2000      	movs	r0, #0
 800ed9e:	f8dc 3000 	ldr.w	r3, [ip]
 800eda2:	b299      	uxth	r1, r3
 800eda4:	fb02 6101 	mla	r1, r2, r1, r6
 800eda8:	0c1e      	lsrs	r6, r3, #16
 800edaa:	0c0b      	lsrs	r3, r1, #16
 800edac:	fb02 3306 	mla	r3, r2, r6, r3
 800edb0:	b289      	uxth	r1, r1
 800edb2:	3001      	adds	r0, #1
 800edb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800edb8:	4285      	cmp	r5, r0
 800edba:	f84c 1b04 	str.w	r1, [ip], #4
 800edbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800edc2:	dcec      	bgt.n	800ed9e <__multadd+0x12>
 800edc4:	b30e      	cbz	r6, 800ee0a <__multadd+0x7e>
 800edc6:	68a3      	ldr	r3, [r4, #8]
 800edc8:	42ab      	cmp	r3, r5
 800edca:	dc19      	bgt.n	800ee00 <__multadd+0x74>
 800edcc:	6861      	ldr	r1, [r4, #4]
 800edce:	4638      	mov	r0, r7
 800edd0:	3101      	adds	r1, #1
 800edd2:	f7ff ff79 	bl	800ecc8 <_Balloc>
 800edd6:	4680      	mov	r8, r0
 800edd8:	b928      	cbnz	r0, 800ede6 <__multadd+0x5a>
 800edda:	4602      	mov	r2, r0
 800eddc:	4b0c      	ldr	r3, [pc, #48]	@ (800ee10 <__multadd+0x84>)
 800edde:	480d      	ldr	r0, [pc, #52]	@ (800ee14 <__multadd+0x88>)
 800ede0:	21ba      	movs	r1, #186	@ 0xba
 800ede2:	f000 fbbd 	bl	800f560 <__assert_func>
 800ede6:	6922      	ldr	r2, [r4, #16]
 800ede8:	3202      	adds	r2, #2
 800edea:	f104 010c 	add.w	r1, r4, #12
 800edee:	0092      	lsls	r2, r2, #2
 800edf0:	300c      	adds	r0, #12
 800edf2:	f000 fba7 	bl	800f544 <memcpy>
 800edf6:	4621      	mov	r1, r4
 800edf8:	4638      	mov	r0, r7
 800edfa:	f7ff ffa5 	bl	800ed48 <_Bfree>
 800edfe:	4644      	mov	r4, r8
 800ee00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ee04:	3501      	adds	r5, #1
 800ee06:	615e      	str	r6, [r3, #20]
 800ee08:	6125      	str	r5, [r4, #16]
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee10:	080102b0 	.word	0x080102b0
 800ee14:	080102c1 	.word	0x080102c1

0800ee18 <__hi0bits>:
 800ee18:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	bf36      	itet	cc
 800ee20:	0403      	lslcc	r3, r0, #16
 800ee22:	2000      	movcs	r0, #0
 800ee24:	2010      	movcc	r0, #16
 800ee26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ee2a:	bf3c      	itt	cc
 800ee2c:	021b      	lslcc	r3, r3, #8
 800ee2e:	3008      	addcc	r0, #8
 800ee30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ee34:	bf3c      	itt	cc
 800ee36:	011b      	lslcc	r3, r3, #4
 800ee38:	3004      	addcc	r0, #4
 800ee3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee3e:	bf3c      	itt	cc
 800ee40:	009b      	lslcc	r3, r3, #2
 800ee42:	3002      	addcc	r0, #2
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	db05      	blt.n	800ee54 <__hi0bits+0x3c>
 800ee48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ee4c:	f100 0001 	add.w	r0, r0, #1
 800ee50:	bf08      	it	eq
 800ee52:	2020      	moveq	r0, #32
 800ee54:	4770      	bx	lr

0800ee56 <__lo0bits>:
 800ee56:	6803      	ldr	r3, [r0, #0]
 800ee58:	4602      	mov	r2, r0
 800ee5a:	f013 0007 	ands.w	r0, r3, #7
 800ee5e:	d00b      	beq.n	800ee78 <__lo0bits+0x22>
 800ee60:	07d9      	lsls	r1, r3, #31
 800ee62:	d421      	bmi.n	800eea8 <__lo0bits+0x52>
 800ee64:	0798      	lsls	r0, r3, #30
 800ee66:	bf49      	itett	mi
 800ee68:	085b      	lsrmi	r3, r3, #1
 800ee6a:	089b      	lsrpl	r3, r3, #2
 800ee6c:	2001      	movmi	r0, #1
 800ee6e:	6013      	strmi	r3, [r2, #0]
 800ee70:	bf5c      	itt	pl
 800ee72:	6013      	strpl	r3, [r2, #0]
 800ee74:	2002      	movpl	r0, #2
 800ee76:	4770      	bx	lr
 800ee78:	b299      	uxth	r1, r3
 800ee7a:	b909      	cbnz	r1, 800ee80 <__lo0bits+0x2a>
 800ee7c:	0c1b      	lsrs	r3, r3, #16
 800ee7e:	2010      	movs	r0, #16
 800ee80:	b2d9      	uxtb	r1, r3
 800ee82:	b909      	cbnz	r1, 800ee88 <__lo0bits+0x32>
 800ee84:	3008      	adds	r0, #8
 800ee86:	0a1b      	lsrs	r3, r3, #8
 800ee88:	0719      	lsls	r1, r3, #28
 800ee8a:	bf04      	itt	eq
 800ee8c:	091b      	lsreq	r3, r3, #4
 800ee8e:	3004      	addeq	r0, #4
 800ee90:	0799      	lsls	r1, r3, #30
 800ee92:	bf04      	itt	eq
 800ee94:	089b      	lsreq	r3, r3, #2
 800ee96:	3002      	addeq	r0, #2
 800ee98:	07d9      	lsls	r1, r3, #31
 800ee9a:	d403      	bmi.n	800eea4 <__lo0bits+0x4e>
 800ee9c:	085b      	lsrs	r3, r3, #1
 800ee9e:	f100 0001 	add.w	r0, r0, #1
 800eea2:	d003      	beq.n	800eeac <__lo0bits+0x56>
 800eea4:	6013      	str	r3, [r2, #0]
 800eea6:	4770      	bx	lr
 800eea8:	2000      	movs	r0, #0
 800eeaa:	4770      	bx	lr
 800eeac:	2020      	movs	r0, #32
 800eeae:	4770      	bx	lr

0800eeb0 <__i2b>:
 800eeb0:	b510      	push	{r4, lr}
 800eeb2:	460c      	mov	r4, r1
 800eeb4:	2101      	movs	r1, #1
 800eeb6:	f7ff ff07 	bl	800ecc8 <_Balloc>
 800eeba:	4602      	mov	r2, r0
 800eebc:	b928      	cbnz	r0, 800eeca <__i2b+0x1a>
 800eebe:	4b05      	ldr	r3, [pc, #20]	@ (800eed4 <__i2b+0x24>)
 800eec0:	4805      	ldr	r0, [pc, #20]	@ (800eed8 <__i2b+0x28>)
 800eec2:	f240 1145 	movw	r1, #325	@ 0x145
 800eec6:	f000 fb4b 	bl	800f560 <__assert_func>
 800eeca:	2301      	movs	r3, #1
 800eecc:	6144      	str	r4, [r0, #20]
 800eece:	6103      	str	r3, [r0, #16]
 800eed0:	bd10      	pop	{r4, pc}
 800eed2:	bf00      	nop
 800eed4:	080102b0 	.word	0x080102b0
 800eed8:	080102c1 	.word	0x080102c1

0800eedc <__multiply>:
 800eedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eee0:	4614      	mov	r4, r2
 800eee2:	690a      	ldr	r2, [r1, #16]
 800eee4:	6923      	ldr	r3, [r4, #16]
 800eee6:	429a      	cmp	r2, r3
 800eee8:	bfa8      	it	ge
 800eeea:	4623      	movge	r3, r4
 800eeec:	460f      	mov	r7, r1
 800eeee:	bfa4      	itt	ge
 800eef0:	460c      	movge	r4, r1
 800eef2:	461f      	movge	r7, r3
 800eef4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800eef8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800eefc:	68a3      	ldr	r3, [r4, #8]
 800eefe:	6861      	ldr	r1, [r4, #4]
 800ef00:	eb0a 0609 	add.w	r6, sl, r9
 800ef04:	42b3      	cmp	r3, r6
 800ef06:	b085      	sub	sp, #20
 800ef08:	bfb8      	it	lt
 800ef0a:	3101      	addlt	r1, #1
 800ef0c:	f7ff fedc 	bl	800ecc8 <_Balloc>
 800ef10:	b930      	cbnz	r0, 800ef20 <__multiply+0x44>
 800ef12:	4602      	mov	r2, r0
 800ef14:	4b44      	ldr	r3, [pc, #272]	@ (800f028 <__multiply+0x14c>)
 800ef16:	4845      	ldr	r0, [pc, #276]	@ (800f02c <__multiply+0x150>)
 800ef18:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ef1c:	f000 fb20 	bl	800f560 <__assert_func>
 800ef20:	f100 0514 	add.w	r5, r0, #20
 800ef24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ef28:	462b      	mov	r3, r5
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	4543      	cmp	r3, r8
 800ef2e:	d321      	bcc.n	800ef74 <__multiply+0x98>
 800ef30:	f107 0114 	add.w	r1, r7, #20
 800ef34:	f104 0214 	add.w	r2, r4, #20
 800ef38:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ef3c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ef40:	9302      	str	r3, [sp, #8]
 800ef42:	1b13      	subs	r3, r2, r4
 800ef44:	3b15      	subs	r3, #21
 800ef46:	f023 0303 	bic.w	r3, r3, #3
 800ef4a:	3304      	adds	r3, #4
 800ef4c:	f104 0715 	add.w	r7, r4, #21
 800ef50:	42ba      	cmp	r2, r7
 800ef52:	bf38      	it	cc
 800ef54:	2304      	movcc	r3, #4
 800ef56:	9301      	str	r3, [sp, #4]
 800ef58:	9b02      	ldr	r3, [sp, #8]
 800ef5a:	9103      	str	r1, [sp, #12]
 800ef5c:	428b      	cmp	r3, r1
 800ef5e:	d80c      	bhi.n	800ef7a <__multiply+0x9e>
 800ef60:	2e00      	cmp	r6, #0
 800ef62:	dd03      	ble.n	800ef6c <__multiply+0x90>
 800ef64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d05b      	beq.n	800f024 <__multiply+0x148>
 800ef6c:	6106      	str	r6, [r0, #16]
 800ef6e:	b005      	add	sp, #20
 800ef70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef74:	f843 2b04 	str.w	r2, [r3], #4
 800ef78:	e7d8      	b.n	800ef2c <__multiply+0x50>
 800ef7a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ef7e:	f1ba 0f00 	cmp.w	sl, #0
 800ef82:	d024      	beq.n	800efce <__multiply+0xf2>
 800ef84:	f104 0e14 	add.w	lr, r4, #20
 800ef88:	46a9      	mov	r9, r5
 800ef8a:	f04f 0c00 	mov.w	ip, #0
 800ef8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ef92:	f8d9 3000 	ldr.w	r3, [r9]
 800ef96:	fa1f fb87 	uxth.w	fp, r7
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	fb0a 330b 	mla	r3, sl, fp, r3
 800efa0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800efa4:	f8d9 7000 	ldr.w	r7, [r9]
 800efa8:	4463      	add	r3, ip
 800efaa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800efae:	fb0a c70b 	mla	r7, sl, fp, ip
 800efb2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800efbc:	4572      	cmp	r2, lr
 800efbe:	f849 3b04 	str.w	r3, [r9], #4
 800efc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800efc6:	d8e2      	bhi.n	800ef8e <__multiply+0xb2>
 800efc8:	9b01      	ldr	r3, [sp, #4]
 800efca:	f845 c003 	str.w	ip, [r5, r3]
 800efce:	9b03      	ldr	r3, [sp, #12]
 800efd0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800efd4:	3104      	adds	r1, #4
 800efd6:	f1b9 0f00 	cmp.w	r9, #0
 800efda:	d021      	beq.n	800f020 <__multiply+0x144>
 800efdc:	682b      	ldr	r3, [r5, #0]
 800efde:	f104 0c14 	add.w	ip, r4, #20
 800efe2:	46ae      	mov	lr, r5
 800efe4:	f04f 0a00 	mov.w	sl, #0
 800efe8:	f8bc b000 	ldrh.w	fp, [ip]
 800efec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800eff0:	fb09 770b 	mla	r7, r9, fp, r7
 800eff4:	4457      	add	r7, sl
 800eff6:	b29b      	uxth	r3, r3
 800eff8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800effc:	f84e 3b04 	str.w	r3, [lr], #4
 800f000:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f004:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f008:	f8be 3000 	ldrh.w	r3, [lr]
 800f00c:	fb09 330a 	mla	r3, r9, sl, r3
 800f010:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f014:	4562      	cmp	r2, ip
 800f016:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f01a:	d8e5      	bhi.n	800efe8 <__multiply+0x10c>
 800f01c:	9f01      	ldr	r7, [sp, #4]
 800f01e:	51eb      	str	r3, [r5, r7]
 800f020:	3504      	adds	r5, #4
 800f022:	e799      	b.n	800ef58 <__multiply+0x7c>
 800f024:	3e01      	subs	r6, #1
 800f026:	e79b      	b.n	800ef60 <__multiply+0x84>
 800f028:	080102b0 	.word	0x080102b0
 800f02c:	080102c1 	.word	0x080102c1

0800f030 <__pow5mult>:
 800f030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f034:	4615      	mov	r5, r2
 800f036:	f012 0203 	ands.w	r2, r2, #3
 800f03a:	4607      	mov	r7, r0
 800f03c:	460e      	mov	r6, r1
 800f03e:	d007      	beq.n	800f050 <__pow5mult+0x20>
 800f040:	4c25      	ldr	r4, [pc, #148]	@ (800f0d8 <__pow5mult+0xa8>)
 800f042:	3a01      	subs	r2, #1
 800f044:	2300      	movs	r3, #0
 800f046:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f04a:	f7ff fe9f 	bl	800ed8c <__multadd>
 800f04e:	4606      	mov	r6, r0
 800f050:	10ad      	asrs	r5, r5, #2
 800f052:	d03d      	beq.n	800f0d0 <__pow5mult+0xa0>
 800f054:	69fc      	ldr	r4, [r7, #28]
 800f056:	b97c      	cbnz	r4, 800f078 <__pow5mult+0x48>
 800f058:	2010      	movs	r0, #16
 800f05a:	f7ff fd7f 	bl	800eb5c <malloc>
 800f05e:	4602      	mov	r2, r0
 800f060:	61f8      	str	r0, [r7, #28]
 800f062:	b928      	cbnz	r0, 800f070 <__pow5mult+0x40>
 800f064:	4b1d      	ldr	r3, [pc, #116]	@ (800f0dc <__pow5mult+0xac>)
 800f066:	481e      	ldr	r0, [pc, #120]	@ (800f0e0 <__pow5mult+0xb0>)
 800f068:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f06c:	f000 fa78 	bl	800f560 <__assert_func>
 800f070:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f074:	6004      	str	r4, [r0, #0]
 800f076:	60c4      	str	r4, [r0, #12]
 800f078:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f07c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f080:	b94c      	cbnz	r4, 800f096 <__pow5mult+0x66>
 800f082:	f240 2171 	movw	r1, #625	@ 0x271
 800f086:	4638      	mov	r0, r7
 800f088:	f7ff ff12 	bl	800eeb0 <__i2b>
 800f08c:	2300      	movs	r3, #0
 800f08e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f092:	4604      	mov	r4, r0
 800f094:	6003      	str	r3, [r0, #0]
 800f096:	f04f 0900 	mov.w	r9, #0
 800f09a:	07eb      	lsls	r3, r5, #31
 800f09c:	d50a      	bpl.n	800f0b4 <__pow5mult+0x84>
 800f09e:	4631      	mov	r1, r6
 800f0a0:	4622      	mov	r2, r4
 800f0a2:	4638      	mov	r0, r7
 800f0a4:	f7ff ff1a 	bl	800eedc <__multiply>
 800f0a8:	4631      	mov	r1, r6
 800f0aa:	4680      	mov	r8, r0
 800f0ac:	4638      	mov	r0, r7
 800f0ae:	f7ff fe4b 	bl	800ed48 <_Bfree>
 800f0b2:	4646      	mov	r6, r8
 800f0b4:	106d      	asrs	r5, r5, #1
 800f0b6:	d00b      	beq.n	800f0d0 <__pow5mult+0xa0>
 800f0b8:	6820      	ldr	r0, [r4, #0]
 800f0ba:	b938      	cbnz	r0, 800f0cc <__pow5mult+0x9c>
 800f0bc:	4622      	mov	r2, r4
 800f0be:	4621      	mov	r1, r4
 800f0c0:	4638      	mov	r0, r7
 800f0c2:	f7ff ff0b 	bl	800eedc <__multiply>
 800f0c6:	6020      	str	r0, [r4, #0]
 800f0c8:	f8c0 9000 	str.w	r9, [r0]
 800f0cc:	4604      	mov	r4, r0
 800f0ce:	e7e4      	b.n	800f09a <__pow5mult+0x6a>
 800f0d0:	4630      	mov	r0, r6
 800f0d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0d6:	bf00      	nop
 800f0d8:	0801031c 	.word	0x0801031c
 800f0dc:	08010241 	.word	0x08010241
 800f0e0:	080102c1 	.word	0x080102c1

0800f0e4 <__lshift>:
 800f0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0e8:	460c      	mov	r4, r1
 800f0ea:	6849      	ldr	r1, [r1, #4]
 800f0ec:	6923      	ldr	r3, [r4, #16]
 800f0ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f0f2:	68a3      	ldr	r3, [r4, #8]
 800f0f4:	4607      	mov	r7, r0
 800f0f6:	4691      	mov	r9, r2
 800f0f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f0fc:	f108 0601 	add.w	r6, r8, #1
 800f100:	42b3      	cmp	r3, r6
 800f102:	db0b      	blt.n	800f11c <__lshift+0x38>
 800f104:	4638      	mov	r0, r7
 800f106:	f7ff fddf 	bl	800ecc8 <_Balloc>
 800f10a:	4605      	mov	r5, r0
 800f10c:	b948      	cbnz	r0, 800f122 <__lshift+0x3e>
 800f10e:	4602      	mov	r2, r0
 800f110:	4b28      	ldr	r3, [pc, #160]	@ (800f1b4 <__lshift+0xd0>)
 800f112:	4829      	ldr	r0, [pc, #164]	@ (800f1b8 <__lshift+0xd4>)
 800f114:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f118:	f000 fa22 	bl	800f560 <__assert_func>
 800f11c:	3101      	adds	r1, #1
 800f11e:	005b      	lsls	r3, r3, #1
 800f120:	e7ee      	b.n	800f100 <__lshift+0x1c>
 800f122:	2300      	movs	r3, #0
 800f124:	f100 0114 	add.w	r1, r0, #20
 800f128:	f100 0210 	add.w	r2, r0, #16
 800f12c:	4618      	mov	r0, r3
 800f12e:	4553      	cmp	r3, sl
 800f130:	db33      	blt.n	800f19a <__lshift+0xb6>
 800f132:	6920      	ldr	r0, [r4, #16]
 800f134:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f138:	f104 0314 	add.w	r3, r4, #20
 800f13c:	f019 091f 	ands.w	r9, r9, #31
 800f140:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f144:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f148:	d02b      	beq.n	800f1a2 <__lshift+0xbe>
 800f14a:	f1c9 0e20 	rsb	lr, r9, #32
 800f14e:	468a      	mov	sl, r1
 800f150:	2200      	movs	r2, #0
 800f152:	6818      	ldr	r0, [r3, #0]
 800f154:	fa00 f009 	lsl.w	r0, r0, r9
 800f158:	4310      	orrs	r0, r2
 800f15a:	f84a 0b04 	str.w	r0, [sl], #4
 800f15e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f162:	459c      	cmp	ip, r3
 800f164:	fa22 f20e 	lsr.w	r2, r2, lr
 800f168:	d8f3      	bhi.n	800f152 <__lshift+0x6e>
 800f16a:	ebac 0304 	sub.w	r3, ip, r4
 800f16e:	3b15      	subs	r3, #21
 800f170:	f023 0303 	bic.w	r3, r3, #3
 800f174:	3304      	adds	r3, #4
 800f176:	f104 0015 	add.w	r0, r4, #21
 800f17a:	4584      	cmp	ip, r0
 800f17c:	bf38      	it	cc
 800f17e:	2304      	movcc	r3, #4
 800f180:	50ca      	str	r2, [r1, r3]
 800f182:	b10a      	cbz	r2, 800f188 <__lshift+0xa4>
 800f184:	f108 0602 	add.w	r6, r8, #2
 800f188:	3e01      	subs	r6, #1
 800f18a:	4638      	mov	r0, r7
 800f18c:	612e      	str	r6, [r5, #16]
 800f18e:	4621      	mov	r1, r4
 800f190:	f7ff fdda 	bl	800ed48 <_Bfree>
 800f194:	4628      	mov	r0, r5
 800f196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f19a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f19e:	3301      	adds	r3, #1
 800f1a0:	e7c5      	b.n	800f12e <__lshift+0x4a>
 800f1a2:	3904      	subs	r1, #4
 800f1a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800f1ac:	459c      	cmp	ip, r3
 800f1ae:	d8f9      	bhi.n	800f1a4 <__lshift+0xc0>
 800f1b0:	e7ea      	b.n	800f188 <__lshift+0xa4>
 800f1b2:	bf00      	nop
 800f1b4:	080102b0 	.word	0x080102b0
 800f1b8:	080102c1 	.word	0x080102c1

0800f1bc <__mcmp>:
 800f1bc:	690a      	ldr	r2, [r1, #16]
 800f1be:	4603      	mov	r3, r0
 800f1c0:	6900      	ldr	r0, [r0, #16]
 800f1c2:	1a80      	subs	r0, r0, r2
 800f1c4:	b530      	push	{r4, r5, lr}
 800f1c6:	d10e      	bne.n	800f1e6 <__mcmp+0x2a>
 800f1c8:	3314      	adds	r3, #20
 800f1ca:	3114      	adds	r1, #20
 800f1cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f1d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f1d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f1d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f1dc:	4295      	cmp	r5, r2
 800f1de:	d003      	beq.n	800f1e8 <__mcmp+0x2c>
 800f1e0:	d205      	bcs.n	800f1ee <__mcmp+0x32>
 800f1e2:	f04f 30ff 	mov.w	r0, #4294967295
 800f1e6:	bd30      	pop	{r4, r5, pc}
 800f1e8:	42a3      	cmp	r3, r4
 800f1ea:	d3f3      	bcc.n	800f1d4 <__mcmp+0x18>
 800f1ec:	e7fb      	b.n	800f1e6 <__mcmp+0x2a>
 800f1ee:	2001      	movs	r0, #1
 800f1f0:	e7f9      	b.n	800f1e6 <__mcmp+0x2a>
	...

0800f1f4 <__mdiff>:
 800f1f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1f8:	4689      	mov	r9, r1
 800f1fa:	4606      	mov	r6, r0
 800f1fc:	4611      	mov	r1, r2
 800f1fe:	4648      	mov	r0, r9
 800f200:	4614      	mov	r4, r2
 800f202:	f7ff ffdb 	bl	800f1bc <__mcmp>
 800f206:	1e05      	subs	r5, r0, #0
 800f208:	d112      	bne.n	800f230 <__mdiff+0x3c>
 800f20a:	4629      	mov	r1, r5
 800f20c:	4630      	mov	r0, r6
 800f20e:	f7ff fd5b 	bl	800ecc8 <_Balloc>
 800f212:	4602      	mov	r2, r0
 800f214:	b928      	cbnz	r0, 800f222 <__mdiff+0x2e>
 800f216:	4b3f      	ldr	r3, [pc, #252]	@ (800f314 <__mdiff+0x120>)
 800f218:	f240 2137 	movw	r1, #567	@ 0x237
 800f21c:	483e      	ldr	r0, [pc, #248]	@ (800f318 <__mdiff+0x124>)
 800f21e:	f000 f99f 	bl	800f560 <__assert_func>
 800f222:	2301      	movs	r3, #1
 800f224:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f228:	4610      	mov	r0, r2
 800f22a:	b003      	add	sp, #12
 800f22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f230:	bfbc      	itt	lt
 800f232:	464b      	movlt	r3, r9
 800f234:	46a1      	movlt	r9, r4
 800f236:	4630      	mov	r0, r6
 800f238:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f23c:	bfba      	itte	lt
 800f23e:	461c      	movlt	r4, r3
 800f240:	2501      	movlt	r5, #1
 800f242:	2500      	movge	r5, #0
 800f244:	f7ff fd40 	bl	800ecc8 <_Balloc>
 800f248:	4602      	mov	r2, r0
 800f24a:	b918      	cbnz	r0, 800f254 <__mdiff+0x60>
 800f24c:	4b31      	ldr	r3, [pc, #196]	@ (800f314 <__mdiff+0x120>)
 800f24e:	f240 2145 	movw	r1, #581	@ 0x245
 800f252:	e7e3      	b.n	800f21c <__mdiff+0x28>
 800f254:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f258:	6926      	ldr	r6, [r4, #16]
 800f25a:	60c5      	str	r5, [r0, #12]
 800f25c:	f109 0310 	add.w	r3, r9, #16
 800f260:	f109 0514 	add.w	r5, r9, #20
 800f264:	f104 0e14 	add.w	lr, r4, #20
 800f268:	f100 0b14 	add.w	fp, r0, #20
 800f26c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f270:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f274:	9301      	str	r3, [sp, #4]
 800f276:	46d9      	mov	r9, fp
 800f278:	f04f 0c00 	mov.w	ip, #0
 800f27c:	9b01      	ldr	r3, [sp, #4]
 800f27e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f282:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f286:	9301      	str	r3, [sp, #4]
 800f288:	fa1f f38a 	uxth.w	r3, sl
 800f28c:	4619      	mov	r1, r3
 800f28e:	b283      	uxth	r3, r0
 800f290:	1acb      	subs	r3, r1, r3
 800f292:	0c00      	lsrs	r0, r0, #16
 800f294:	4463      	add	r3, ip
 800f296:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f29a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f29e:	b29b      	uxth	r3, r3
 800f2a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f2a4:	4576      	cmp	r6, lr
 800f2a6:	f849 3b04 	str.w	r3, [r9], #4
 800f2aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f2ae:	d8e5      	bhi.n	800f27c <__mdiff+0x88>
 800f2b0:	1b33      	subs	r3, r6, r4
 800f2b2:	3b15      	subs	r3, #21
 800f2b4:	f023 0303 	bic.w	r3, r3, #3
 800f2b8:	3415      	adds	r4, #21
 800f2ba:	3304      	adds	r3, #4
 800f2bc:	42a6      	cmp	r6, r4
 800f2be:	bf38      	it	cc
 800f2c0:	2304      	movcc	r3, #4
 800f2c2:	441d      	add	r5, r3
 800f2c4:	445b      	add	r3, fp
 800f2c6:	461e      	mov	r6, r3
 800f2c8:	462c      	mov	r4, r5
 800f2ca:	4544      	cmp	r4, r8
 800f2cc:	d30e      	bcc.n	800f2ec <__mdiff+0xf8>
 800f2ce:	f108 0103 	add.w	r1, r8, #3
 800f2d2:	1b49      	subs	r1, r1, r5
 800f2d4:	f021 0103 	bic.w	r1, r1, #3
 800f2d8:	3d03      	subs	r5, #3
 800f2da:	45a8      	cmp	r8, r5
 800f2dc:	bf38      	it	cc
 800f2de:	2100      	movcc	r1, #0
 800f2e0:	440b      	add	r3, r1
 800f2e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f2e6:	b191      	cbz	r1, 800f30e <__mdiff+0x11a>
 800f2e8:	6117      	str	r7, [r2, #16]
 800f2ea:	e79d      	b.n	800f228 <__mdiff+0x34>
 800f2ec:	f854 1b04 	ldr.w	r1, [r4], #4
 800f2f0:	46e6      	mov	lr, ip
 800f2f2:	0c08      	lsrs	r0, r1, #16
 800f2f4:	fa1c fc81 	uxtah	ip, ip, r1
 800f2f8:	4471      	add	r1, lr
 800f2fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f2fe:	b289      	uxth	r1, r1
 800f300:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f304:	f846 1b04 	str.w	r1, [r6], #4
 800f308:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f30c:	e7dd      	b.n	800f2ca <__mdiff+0xd6>
 800f30e:	3f01      	subs	r7, #1
 800f310:	e7e7      	b.n	800f2e2 <__mdiff+0xee>
 800f312:	bf00      	nop
 800f314:	080102b0 	.word	0x080102b0
 800f318:	080102c1 	.word	0x080102c1

0800f31c <__d2b>:
 800f31c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f320:	460f      	mov	r7, r1
 800f322:	2101      	movs	r1, #1
 800f324:	ec59 8b10 	vmov	r8, r9, d0
 800f328:	4616      	mov	r6, r2
 800f32a:	f7ff fccd 	bl	800ecc8 <_Balloc>
 800f32e:	4604      	mov	r4, r0
 800f330:	b930      	cbnz	r0, 800f340 <__d2b+0x24>
 800f332:	4602      	mov	r2, r0
 800f334:	4b23      	ldr	r3, [pc, #140]	@ (800f3c4 <__d2b+0xa8>)
 800f336:	4824      	ldr	r0, [pc, #144]	@ (800f3c8 <__d2b+0xac>)
 800f338:	f240 310f 	movw	r1, #783	@ 0x30f
 800f33c:	f000 f910 	bl	800f560 <__assert_func>
 800f340:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f344:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f348:	b10d      	cbz	r5, 800f34e <__d2b+0x32>
 800f34a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f34e:	9301      	str	r3, [sp, #4]
 800f350:	f1b8 0300 	subs.w	r3, r8, #0
 800f354:	d023      	beq.n	800f39e <__d2b+0x82>
 800f356:	4668      	mov	r0, sp
 800f358:	9300      	str	r3, [sp, #0]
 800f35a:	f7ff fd7c 	bl	800ee56 <__lo0bits>
 800f35e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f362:	b1d0      	cbz	r0, 800f39a <__d2b+0x7e>
 800f364:	f1c0 0320 	rsb	r3, r0, #32
 800f368:	fa02 f303 	lsl.w	r3, r2, r3
 800f36c:	430b      	orrs	r3, r1
 800f36e:	40c2      	lsrs	r2, r0
 800f370:	6163      	str	r3, [r4, #20]
 800f372:	9201      	str	r2, [sp, #4]
 800f374:	9b01      	ldr	r3, [sp, #4]
 800f376:	61a3      	str	r3, [r4, #24]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	bf0c      	ite	eq
 800f37c:	2201      	moveq	r2, #1
 800f37e:	2202      	movne	r2, #2
 800f380:	6122      	str	r2, [r4, #16]
 800f382:	b1a5      	cbz	r5, 800f3ae <__d2b+0x92>
 800f384:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f388:	4405      	add	r5, r0
 800f38a:	603d      	str	r5, [r7, #0]
 800f38c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f390:	6030      	str	r0, [r6, #0]
 800f392:	4620      	mov	r0, r4
 800f394:	b003      	add	sp, #12
 800f396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f39a:	6161      	str	r1, [r4, #20]
 800f39c:	e7ea      	b.n	800f374 <__d2b+0x58>
 800f39e:	a801      	add	r0, sp, #4
 800f3a0:	f7ff fd59 	bl	800ee56 <__lo0bits>
 800f3a4:	9b01      	ldr	r3, [sp, #4]
 800f3a6:	6163      	str	r3, [r4, #20]
 800f3a8:	3020      	adds	r0, #32
 800f3aa:	2201      	movs	r2, #1
 800f3ac:	e7e8      	b.n	800f380 <__d2b+0x64>
 800f3ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f3b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f3b6:	6038      	str	r0, [r7, #0]
 800f3b8:	6918      	ldr	r0, [r3, #16]
 800f3ba:	f7ff fd2d 	bl	800ee18 <__hi0bits>
 800f3be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f3c2:	e7e5      	b.n	800f390 <__d2b+0x74>
 800f3c4:	080102b0 	.word	0x080102b0
 800f3c8:	080102c1 	.word	0x080102c1

0800f3cc <__sflush_r>:
 800f3cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3d4:	0716      	lsls	r6, r2, #28
 800f3d6:	4605      	mov	r5, r0
 800f3d8:	460c      	mov	r4, r1
 800f3da:	d454      	bmi.n	800f486 <__sflush_r+0xba>
 800f3dc:	684b      	ldr	r3, [r1, #4]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	dc02      	bgt.n	800f3e8 <__sflush_r+0x1c>
 800f3e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	dd48      	ble.n	800f47a <__sflush_r+0xae>
 800f3e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f3ea:	2e00      	cmp	r6, #0
 800f3ec:	d045      	beq.n	800f47a <__sflush_r+0xae>
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f3f4:	682f      	ldr	r7, [r5, #0]
 800f3f6:	6a21      	ldr	r1, [r4, #32]
 800f3f8:	602b      	str	r3, [r5, #0]
 800f3fa:	d030      	beq.n	800f45e <__sflush_r+0x92>
 800f3fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f3fe:	89a3      	ldrh	r3, [r4, #12]
 800f400:	0759      	lsls	r1, r3, #29
 800f402:	d505      	bpl.n	800f410 <__sflush_r+0x44>
 800f404:	6863      	ldr	r3, [r4, #4]
 800f406:	1ad2      	subs	r2, r2, r3
 800f408:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f40a:	b10b      	cbz	r3, 800f410 <__sflush_r+0x44>
 800f40c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f40e:	1ad2      	subs	r2, r2, r3
 800f410:	2300      	movs	r3, #0
 800f412:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f414:	6a21      	ldr	r1, [r4, #32]
 800f416:	4628      	mov	r0, r5
 800f418:	47b0      	blx	r6
 800f41a:	1c43      	adds	r3, r0, #1
 800f41c:	89a3      	ldrh	r3, [r4, #12]
 800f41e:	d106      	bne.n	800f42e <__sflush_r+0x62>
 800f420:	6829      	ldr	r1, [r5, #0]
 800f422:	291d      	cmp	r1, #29
 800f424:	d82b      	bhi.n	800f47e <__sflush_r+0xb2>
 800f426:	4a2a      	ldr	r2, [pc, #168]	@ (800f4d0 <__sflush_r+0x104>)
 800f428:	410a      	asrs	r2, r1
 800f42a:	07d6      	lsls	r6, r2, #31
 800f42c:	d427      	bmi.n	800f47e <__sflush_r+0xb2>
 800f42e:	2200      	movs	r2, #0
 800f430:	6062      	str	r2, [r4, #4]
 800f432:	04d9      	lsls	r1, r3, #19
 800f434:	6922      	ldr	r2, [r4, #16]
 800f436:	6022      	str	r2, [r4, #0]
 800f438:	d504      	bpl.n	800f444 <__sflush_r+0x78>
 800f43a:	1c42      	adds	r2, r0, #1
 800f43c:	d101      	bne.n	800f442 <__sflush_r+0x76>
 800f43e:	682b      	ldr	r3, [r5, #0]
 800f440:	b903      	cbnz	r3, 800f444 <__sflush_r+0x78>
 800f442:	6560      	str	r0, [r4, #84]	@ 0x54
 800f444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f446:	602f      	str	r7, [r5, #0]
 800f448:	b1b9      	cbz	r1, 800f47a <__sflush_r+0xae>
 800f44a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f44e:	4299      	cmp	r1, r3
 800f450:	d002      	beq.n	800f458 <__sflush_r+0x8c>
 800f452:	4628      	mov	r0, r5
 800f454:	f7ff fb38 	bl	800eac8 <_free_r>
 800f458:	2300      	movs	r3, #0
 800f45a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f45c:	e00d      	b.n	800f47a <__sflush_r+0xae>
 800f45e:	2301      	movs	r3, #1
 800f460:	4628      	mov	r0, r5
 800f462:	47b0      	blx	r6
 800f464:	4602      	mov	r2, r0
 800f466:	1c50      	adds	r0, r2, #1
 800f468:	d1c9      	bne.n	800f3fe <__sflush_r+0x32>
 800f46a:	682b      	ldr	r3, [r5, #0]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d0c6      	beq.n	800f3fe <__sflush_r+0x32>
 800f470:	2b1d      	cmp	r3, #29
 800f472:	d001      	beq.n	800f478 <__sflush_r+0xac>
 800f474:	2b16      	cmp	r3, #22
 800f476:	d11e      	bne.n	800f4b6 <__sflush_r+0xea>
 800f478:	602f      	str	r7, [r5, #0]
 800f47a:	2000      	movs	r0, #0
 800f47c:	e022      	b.n	800f4c4 <__sflush_r+0xf8>
 800f47e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f482:	b21b      	sxth	r3, r3
 800f484:	e01b      	b.n	800f4be <__sflush_r+0xf2>
 800f486:	690f      	ldr	r7, [r1, #16]
 800f488:	2f00      	cmp	r7, #0
 800f48a:	d0f6      	beq.n	800f47a <__sflush_r+0xae>
 800f48c:	0793      	lsls	r3, r2, #30
 800f48e:	680e      	ldr	r6, [r1, #0]
 800f490:	bf08      	it	eq
 800f492:	694b      	ldreq	r3, [r1, #20]
 800f494:	600f      	str	r7, [r1, #0]
 800f496:	bf18      	it	ne
 800f498:	2300      	movne	r3, #0
 800f49a:	eba6 0807 	sub.w	r8, r6, r7
 800f49e:	608b      	str	r3, [r1, #8]
 800f4a0:	f1b8 0f00 	cmp.w	r8, #0
 800f4a4:	dde9      	ble.n	800f47a <__sflush_r+0xae>
 800f4a6:	6a21      	ldr	r1, [r4, #32]
 800f4a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f4aa:	4643      	mov	r3, r8
 800f4ac:	463a      	mov	r2, r7
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	47b0      	blx	r6
 800f4b2:	2800      	cmp	r0, #0
 800f4b4:	dc08      	bgt.n	800f4c8 <__sflush_r+0xfc>
 800f4b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4be:	81a3      	strh	r3, [r4, #12]
 800f4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4c8:	4407      	add	r7, r0
 800f4ca:	eba8 0800 	sub.w	r8, r8, r0
 800f4ce:	e7e7      	b.n	800f4a0 <__sflush_r+0xd4>
 800f4d0:	dfbffffe 	.word	0xdfbffffe

0800f4d4 <_fflush_r>:
 800f4d4:	b538      	push	{r3, r4, r5, lr}
 800f4d6:	690b      	ldr	r3, [r1, #16]
 800f4d8:	4605      	mov	r5, r0
 800f4da:	460c      	mov	r4, r1
 800f4dc:	b913      	cbnz	r3, 800f4e4 <_fflush_r+0x10>
 800f4de:	2500      	movs	r5, #0
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	bd38      	pop	{r3, r4, r5, pc}
 800f4e4:	b118      	cbz	r0, 800f4ee <_fflush_r+0x1a>
 800f4e6:	6a03      	ldr	r3, [r0, #32]
 800f4e8:	b90b      	cbnz	r3, 800f4ee <_fflush_r+0x1a>
 800f4ea:	f7fe fba7 	bl	800dc3c <__sinit>
 800f4ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d0f3      	beq.n	800f4de <_fflush_r+0xa>
 800f4f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f4f8:	07d0      	lsls	r0, r2, #31
 800f4fa:	d404      	bmi.n	800f506 <_fflush_r+0x32>
 800f4fc:	0599      	lsls	r1, r3, #22
 800f4fe:	d402      	bmi.n	800f506 <_fflush_r+0x32>
 800f500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f502:	f7fe fc92 	bl	800de2a <__retarget_lock_acquire_recursive>
 800f506:	4628      	mov	r0, r5
 800f508:	4621      	mov	r1, r4
 800f50a:	f7ff ff5f 	bl	800f3cc <__sflush_r>
 800f50e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f510:	07da      	lsls	r2, r3, #31
 800f512:	4605      	mov	r5, r0
 800f514:	d4e4      	bmi.n	800f4e0 <_fflush_r+0xc>
 800f516:	89a3      	ldrh	r3, [r4, #12]
 800f518:	059b      	lsls	r3, r3, #22
 800f51a:	d4e1      	bmi.n	800f4e0 <_fflush_r+0xc>
 800f51c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f51e:	f7fe fc85 	bl	800de2c <__retarget_lock_release_recursive>
 800f522:	e7dd      	b.n	800f4e0 <_fflush_r+0xc>

0800f524 <_sbrk_r>:
 800f524:	b538      	push	{r3, r4, r5, lr}
 800f526:	4d06      	ldr	r5, [pc, #24]	@ (800f540 <_sbrk_r+0x1c>)
 800f528:	2300      	movs	r3, #0
 800f52a:	4604      	mov	r4, r0
 800f52c:	4608      	mov	r0, r1
 800f52e:	602b      	str	r3, [r5, #0]
 800f530:	f7f3 f9b6 	bl	80028a0 <_sbrk>
 800f534:	1c43      	adds	r3, r0, #1
 800f536:	d102      	bne.n	800f53e <_sbrk_r+0x1a>
 800f538:	682b      	ldr	r3, [r5, #0]
 800f53a:	b103      	cbz	r3, 800f53e <_sbrk_r+0x1a>
 800f53c:	6023      	str	r3, [r4, #0]
 800f53e:	bd38      	pop	{r3, r4, r5, pc}
 800f540:	20002420 	.word	0x20002420

0800f544 <memcpy>:
 800f544:	440a      	add	r2, r1
 800f546:	4291      	cmp	r1, r2
 800f548:	f100 33ff 	add.w	r3, r0, #4294967295
 800f54c:	d100      	bne.n	800f550 <memcpy+0xc>
 800f54e:	4770      	bx	lr
 800f550:	b510      	push	{r4, lr}
 800f552:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f556:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f55a:	4291      	cmp	r1, r2
 800f55c:	d1f9      	bne.n	800f552 <memcpy+0xe>
 800f55e:	bd10      	pop	{r4, pc}

0800f560 <__assert_func>:
 800f560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f562:	4614      	mov	r4, r2
 800f564:	461a      	mov	r2, r3
 800f566:	4b09      	ldr	r3, [pc, #36]	@ (800f58c <__assert_func+0x2c>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	4605      	mov	r5, r0
 800f56c:	68d8      	ldr	r0, [r3, #12]
 800f56e:	b954      	cbnz	r4, 800f586 <__assert_func+0x26>
 800f570:	4b07      	ldr	r3, [pc, #28]	@ (800f590 <__assert_func+0x30>)
 800f572:	461c      	mov	r4, r3
 800f574:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f578:	9100      	str	r1, [sp, #0]
 800f57a:	462b      	mov	r3, r5
 800f57c:	4905      	ldr	r1, [pc, #20]	@ (800f594 <__assert_func+0x34>)
 800f57e:	f000 f841 	bl	800f604 <fiprintf>
 800f582:	f000 f851 	bl	800f628 <abort>
 800f586:	4b04      	ldr	r3, [pc, #16]	@ (800f598 <__assert_func+0x38>)
 800f588:	e7f4      	b.n	800f574 <__assert_func+0x14>
 800f58a:	bf00      	nop
 800f58c:	2000010c 	.word	0x2000010c
 800f590:	0801045d 	.word	0x0801045d
 800f594:	0801042f 	.word	0x0801042f
 800f598:	08010422 	.word	0x08010422

0800f59c <_calloc_r>:
 800f59c:	b570      	push	{r4, r5, r6, lr}
 800f59e:	fba1 5402 	umull	r5, r4, r1, r2
 800f5a2:	b93c      	cbnz	r4, 800f5b4 <_calloc_r+0x18>
 800f5a4:	4629      	mov	r1, r5
 800f5a6:	f7ff fb03 	bl	800ebb0 <_malloc_r>
 800f5aa:	4606      	mov	r6, r0
 800f5ac:	b928      	cbnz	r0, 800f5ba <_calloc_r+0x1e>
 800f5ae:	2600      	movs	r6, #0
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	bd70      	pop	{r4, r5, r6, pc}
 800f5b4:	220c      	movs	r2, #12
 800f5b6:	6002      	str	r2, [r0, #0]
 800f5b8:	e7f9      	b.n	800f5ae <_calloc_r+0x12>
 800f5ba:	462a      	mov	r2, r5
 800f5bc:	4621      	mov	r1, r4
 800f5be:	f7fe fbb6 	bl	800dd2e <memset>
 800f5c2:	e7f5      	b.n	800f5b0 <_calloc_r+0x14>

0800f5c4 <__ascii_mbtowc>:
 800f5c4:	b082      	sub	sp, #8
 800f5c6:	b901      	cbnz	r1, 800f5ca <__ascii_mbtowc+0x6>
 800f5c8:	a901      	add	r1, sp, #4
 800f5ca:	b142      	cbz	r2, 800f5de <__ascii_mbtowc+0x1a>
 800f5cc:	b14b      	cbz	r3, 800f5e2 <__ascii_mbtowc+0x1e>
 800f5ce:	7813      	ldrb	r3, [r2, #0]
 800f5d0:	600b      	str	r3, [r1, #0]
 800f5d2:	7812      	ldrb	r2, [r2, #0]
 800f5d4:	1e10      	subs	r0, r2, #0
 800f5d6:	bf18      	it	ne
 800f5d8:	2001      	movne	r0, #1
 800f5da:	b002      	add	sp, #8
 800f5dc:	4770      	bx	lr
 800f5de:	4610      	mov	r0, r2
 800f5e0:	e7fb      	b.n	800f5da <__ascii_mbtowc+0x16>
 800f5e2:	f06f 0001 	mvn.w	r0, #1
 800f5e6:	e7f8      	b.n	800f5da <__ascii_mbtowc+0x16>

0800f5e8 <__ascii_wctomb>:
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	4608      	mov	r0, r1
 800f5ec:	b141      	cbz	r1, 800f600 <__ascii_wctomb+0x18>
 800f5ee:	2aff      	cmp	r2, #255	@ 0xff
 800f5f0:	d904      	bls.n	800f5fc <__ascii_wctomb+0x14>
 800f5f2:	228a      	movs	r2, #138	@ 0x8a
 800f5f4:	601a      	str	r2, [r3, #0]
 800f5f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f5fa:	4770      	bx	lr
 800f5fc:	700a      	strb	r2, [r1, #0]
 800f5fe:	2001      	movs	r0, #1
 800f600:	4770      	bx	lr
	...

0800f604 <fiprintf>:
 800f604:	b40e      	push	{r1, r2, r3}
 800f606:	b503      	push	{r0, r1, lr}
 800f608:	4601      	mov	r1, r0
 800f60a:	ab03      	add	r3, sp, #12
 800f60c:	4805      	ldr	r0, [pc, #20]	@ (800f624 <fiprintf+0x20>)
 800f60e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f612:	6800      	ldr	r0, [r0, #0]
 800f614:	9301      	str	r3, [sp, #4]
 800f616:	f000 f837 	bl	800f688 <_vfiprintf_r>
 800f61a:	b002      	add	sp, #8
 800f61c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f620:	b003      	add	sp, #12
 800f622:	4770      	bx	lr
 800f624:	2000010c 	.word	0x2000010c

0800f628 <abort>:
 800f628:	b508      	push	{r3, lr}
 800f62a:	2006      	movs	r0, #6
 800f62c:	f000 fa00 	bl	800fa30 <raise>
 800f630:	2001      	movs	r0, #1
 800f632:	f7f3 f8bd 	bl	80027b0 <_exit>

0800f636 <__sfputc_r>:
 800f636:	6893      	ldr	r3, [r2, #8]
 800f638:	3b01      	subs	r3, #1
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	b410      	push	{r4}
 800f63e:	6093      	str	r3, [r2, #8]
 800f640:	da08      	bge.n	800f654 <__sfputc_r+0x1e>
 800f642:	6994      	ldr	r4, [r2, #24]
 800f644:	42a3      	cmp	r3, r4
 800f646:	db01      	blt.n	800f64c <__sfputc_r+0x16>
 800f648:	290a      	cmp	r1, #10
 800f64a:	d103      	bne.n	800f654 <__sfputc_r+0x1e>
 800f64c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f650:	f000 b932 	b.w	800f8b8 <__swbuf_r>
 800f654:	6813      	ldr	r3, [r2, #0]
 800f656:	1c58      	adds	r0, r3, #1
 800f658:	6010      	str	r0, [r2, #0]
 800f65a:	7019      	strb	r1, [r3, #0]
 800f65c:	4608      	mov	r0, r1
 800f65e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f662:	4770      	bx	lr

0800f664 <__sfputs_r>:
 800f664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f666:	4606      	mov	r6, r0
 800f668:	460f      	mov	r7, r1
 800f66a:	4614      	mov	r4, r2
 800f66c:	18d5      	adds	r5, r2, r3
 800f66e:	42ac      	cmp	r4, r5
 800f670:	d101      	bne.n	800f676 <__sfputs_r+0x12>
 800f672:	2000      	movs	r0, #0
 800f674:	e007      	b.n	800f686 <__sfputs_r+0x22>
 800f676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f67a:	463a      	mov	r2, r7
 800f67c:	4630      	mov	r0, r6
 800f67e:	f7ff ffda 	bl	800f636 <__sfputc_r>
 800f682:	1c43      	adds	r3, r0, #1
 800f684:	d1f3      	bne.n	800f66e <__sfputs_r+0xa>
 800f686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f688 <_vfiprintf_r>:
 800f688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f68c:	460d      	mov	r5, r1
 800f68e:	b09d      	sub	sp, #116	@ 0x74
 800f690:	4614      	mov	r4, r2
 800f692:	4698      	mov	r8, r3
 800f694:	4606      	mov	r6, r0
 800f696:	b118      	cbz	r0, 800f6a0 <_vfiprintf_r+0x18>
 800f698:	6a03      	ldr	r3, [r0, #32]
 800f69a:	b90b      	cbnz	r3, 800f6a0 <_vfiprintf_r+0x18>
 800f69c:	f7fe face 	bl	800dc3c <__sinit>
 800f6a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f6a2:	07d9      	lsls	r1, r3, #31
 800f6a4:	d405      	bmi.n	800f6b2 <_vfiprintf_r+0x2a>
 800f6a6:	89ab      	ldrh	r3, [r5, #12]
 800f6a8:	059a      	lsls	r2, r3, #22
 800f6aa:	d402      	bmi.n	800f6b2 <_vfiprintf_r+0x2a>
 800f6ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f6ae:	f7fe fbbc 	bl	800de2a <__retarget_lock_acquire_recursive>
 800f6b2:	89ab      	ldrh	r3, [r5, #12]
 800f6b4:	071b      	lsls	r3, r3, #28
 800f6b6:	d501      	bpl.n	800f6bc <_vfiprintf_r+0x34>
 800f6b8:	692b      	ldr	r3, [r5, #16]
 800f6ba:	b99b      	cbnz	r3, 800f6e4 <_vfiprintf_r+0x5c>
 800f6bc:	4629      	mov	r1, r5
 800f6be:	4630      	mov	r0, r6
 800f6c0:	f000 f938 	bl	800f934 <__swsetup_r>
 800f6c4:	b170      	cbz	r0, 800f6e4 <_vfiprintf_r+0x5c>
 800f6c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f6c8:	07dc      	lsls	r4, r3, #31
 800f6ca:	d504      	bpl.n	800f6d6 <_vfiprintf_r+0x4e>
 800f6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f6d0:	b01d      	add	sp, #116	@ 0x74
 800f6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6d6:	89ab      	ldrh	r3, [r5, #12]
 800f6d8:	0598      	lsls	r0, r3, #22
 800f6da:	d4f7      	bmi.n	800f6cc <_vfiprintf_r+0x44>
 800f6dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f6de:	f7fe fba5 	bl	800de2c <__retarget_lock_release_recursive>
 800f6e2:	e7f3      	b.n	800f6cc <_vfiprintf_r+0x44>
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6e8:	2320      	movs	r3, #32
 800f6ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f6ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6f2:	2330      	movs	r3, #48	@ 0x30
 800f6f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f8a4 <_vfiprintf_r+0x21c>
 800f6f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f6fc:	f04f 0901 	mov.w	r9, #1
 800f700:	4623      	mov	r3, r4
 800f702:	469a      	mov	sl, r3
 800f704:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f708:	b10a      	cbz	r2, 800f70e <_vfiprintf_r+0x86>
 800f70a:	2a25      	cmp	r2, #37	@ 0x25
 800f70c:	d1f9      	bne.n	800f702 <_vfiprintf_r+0x7a>
 800f70e:	ebba 0b04 	subs.w	fp, sl, r4
 800f712:	d00b      	beq.n	800f72c <_vfiprintf_r+0xa4>
 800f714:	465b      	mov	r3, fp
 800f716:	4622      	mov	r2, r4
 800f718:	4629      	mov	r1, r5
 800f71a:	4630      	mov	r0, r6
 800f71c:	f7ff ffa2 	bl	800f664 <__sfputs_r>
 800f720:	3001      	adds	r0, #1
 800f722:	f000 80a7 	beq.w	800f874 <_vfiprintf_r+0x1ec>
 800f726:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f728:	445a      	add	r2, fp
 800f72a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f72c:	f89a 3000 	ldrb.w	r3, [sl]
 800f730:	2b00      	cmp	r3, #0
 800f732:	f000 809f 	beq.w	800f874 <_vfiprintf_r+0x1ec>
 800f736:	2300      	movs	r3, #0
 800f738:	f04f 32ff 	mov.w	r2, #4294967295
 800f73c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f740:	f10a 0a01 	add.w	sl, sl, #1
 800f744:	9304      	str	r3, [sp, #16]
 800f746:	9307      	str	r3, [sp, #28]
 800f748:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f74c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f74e:	4654      	mov	r4, sl
 800f750:	2205      	movs	r2, #5
 800f752:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f756:	4853      	ldr	r0, [pc, #332]	@ (800f8a4 <_vfiprintf_r+0x21c>)
 800f758:	f7f0 fd3a 	bl	80001d0 <memchr>
 800f75c:	9a04      	ldr	r2, [sp, #16]
 800f75e:	b9d8      	cbnz	r0, 800f798 <_vfiprintf_r+0x110>
 800f760:	06d1      	lsls	r1, r2, #27
 800f762:	bf44      	itt	mi
 800f764:	2320      	movmi	r3, #32
 800f766:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f76a:	0713      	lsls	r3, r2, #28
 800f76c:	bf44      	itt	mi
 800f76e:	232b      	movmi	r3, #43	@ 0x2b
 800f770:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f774:	f89a 3000 	ldrb.w	r3, [sl]
 800f778:	2b2a      	cmp	r3, #42	@ 0x2a
 800f77a:	d015      	beq.n	800f7a8 <_vfiprintf_r+0x120>
 800f77c:	9a07      	ldr	r2, [sp, #28]
 800f77e:	4654      	mov	r4, sl
 800f780:	2000      	movs	r0, #0
 800f782:	f04f 0c0a 	mov.w	ip, #10
 800f786:	4621      	mov	r1, r4
 800f788:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f78c:	3b30      	subs	r3, #48	@ 0x30
 800f78e:	2b09      	cmp	r3, #9
 800f790:	d94b      	bls.n	800f82a <_vfiprintf_r+0x1a2>
 800f792:	b1b0      	cbz	r0, 800f7c2 <_vfiprintf_r+0x13a>
 800f794:	9207      	str	r2, [sp, #28]
 800f796:	e014      	b.n	800f7c2 <_vfiprintf_r+0x13a>
 800f798:	eba0 0308 	sub.w	r3, r0, r8
 800f79c:	fa09 f303 	lsl.w	r3, r9, r3
 800f7a0:	4313      	orrs	r3, r2
 800f7a2:	9304      	str	r3, [sp, #16]
 800f7a4:	46a2      	mov	sl, r4
 800f7a6:	e7d2      	b.n	800f74e <_vfiprintf_r+0xc6>
 800f7a8:	9b03      	ldr	r3, [sp, #12]
 800f7aa:	1d19      	adds	r1, r3, #4
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	9103      	str	r1, [sp, #12]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	bfbb      	ittet	lt
 800f7b4:	425b      	neglt	r3, r3
 800f7b6:	f042 0202 	orrlt.w	r2, r2, #2
 800f7ba:	9307      	strge	r3, [sp, #28]
 800f7bc:	9307      	strlt	r3, [sp, #28]
 800f7be:	bfb8      	it	lt
 800f7c0:	9204      	strlt	r2, [sp, #16]
 800f7c2:	7823      	ldrb	r3, [r4, #0]
 800f7c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f7c6:	d10a      	bne.n	800f7de <_vfiprintf_r+0x156>
 800f7c8:	7863      	ldrb	r3, [r4, #1]
 800f7ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800f7cc:	d132      	bne.n	800f834 <_vfiprintf_r+0x1ac>
 800f7ce:	9b03      	ldr	r3, [sp, #12]
 800f7d0:	1d1a      	adds	r2, r3, #4
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	9203      	str	r2, [sp, #12]
 800f7d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f7da:	3402      	adds	r4, #2
 800f7dc:	9305      	str	r3, [sp, #20]
 800f7de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f8b4 <_vfiprintf_r+0x22c>
 800f7e2:	7821      	ldrb	r1, [r4, #0]
 800f7e4:	2203      	movs	r2, #3
 800f7e6:	4650      	mov	r0, sl
 800f7e8:	f7f0 fcf2 	bl	80001d0 <memchr>
 800f7ec:	b138      	cbz	r0, 800f7fe <_vfiprintf_r+0x176>
 800f7ee:	9b04      	ldr	r3, [sp, #16]
 800f7f0:	eba0 000a 	sub.w	r0, r0, sl
 800f7f4:	2240      	movs	r2, #64	@ 0x40
 800f7f6:	4082      	lsls	r2, r0
 800f7f8:	4313      	orrs	r3, r2
 800f7fa:	3401      	adds	r4, #1
 800f7fc:	9304      	str	r3, [sp, #16]
 800f7fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f802:	4829      	ldr	r0, [pc, #164]	@ (800f8a8 <_vfiprintf_r+0x220>)
 800f804:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f808:	2206      	movs	r2, #6
 800f80a:	f7f0 fce1 	bl	80001d0 <memchr>
 800f80e:	2800      	cmp	r0, #0
 800f810:	d03f      	beq.n	800f892 <_vfiprintf_r+0x20a>
 800f812:	4b26      	ldr	r3, [pc, #152]	@ (800f8ac <_vfiprintf_r+0x224>)
 800f814:	bb1b      	cbnz	r3, 800f85e <_vfiprintf_r+0x1d6>
 800f816:	9b03      	ldr	r3, [sp, #12]
 800f818:	3307      	adds	r3, #7
 800f81a:	f023 0307 	bic.w	r3, r3, #7
 800f81e:	3308      	adds	r3, #8
 800f820:	9303      	str	r3, [sp, #12]
 800f822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f824:	443b      	add	r3, r7
 800f826:	9309      	str	r3, [sp, #36]	@ 0x24
 800f828:	e76a      	b.n	800f700 <_vfiprintf_r+0x78>
 800f82a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f82e:	460c      	mov	r4, r1
 800f830:	2001      	movs	r0, #1
 800f832:	e7a8      	b.n	800f786 <_vfiprintf_r+0xfe>
 800f834:	2300      	movs	r3, #0
 800f836:	3401      	adds	r4, #1
 800f838:	9305      	str	r3, [sp, #20]
 800f83a:	4619      	mov	r1, r3
 800f83c:	f04f 0c0a 	mov.w	ip, #10
 800f840:	4620      	mov	r0, r4
 800f842:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f846:	3a30      	subs	r2, #48	@ 0x30
 800f848:	2a09      	cmp	r2, #9
 800f84a:	d903      	bls.n	800f854 <_vfiprintf_r+0x1cc>
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d0c6      	beq.n	800f7de <_vfiprintf_r+0x156>
 800f850:	9105      	str	r1, [sp, #20]
 800f852:	e7c4      	b.n	800f7de <_vfiprintf_r+0x156>
 800f854:	fb0c 2101 	mla	r1, ip, r1, r2
 800f858:	4604      	mov	r4, r0
 800f85a:	2301      	movs	r3, #1
 800f85c:	e7f0      	b.n	800f840 <_vfiprintf_r+0x1b8>
 800f85e:	ab03      	add	r3, sp, #12
 800f860:	9300      	str	r3, [sp, #0]
 800f862:	462a      	mov	r2, r5
 800f864:	4b12      	ldr	r3, [pc, #72]	@ (800f8b0 <_vfiprintf_r+0x228>)
 800f866:	a904      	add	r1, sp, #16
 800f868:	4630      	mov	r0, r6
 800f86a:	f7fd fda3 	bl	800d3b4 <_printf_float>
 800f86e:	4607      	mov	r7, r0
 800f870:	1c78      	adds	r0, r7, #1
 800f872:	d1d6      	bne.n	800f822 <_vfiprintf_r+0x19a>
 800f874:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f876:	07d9      	lsls	r1, r3, #31
 800f878:	d405      	bmi.n	800f886 <_vfiprintf_r+0x1fe>
 800f87a:	89ab      	ldrh	r3, [r5, #12]
 800f87c:	059a      	lsls	r2, r3, #22
 800f87e:	d402      	bmi.n	800f886 <_vfiprintf_r+0x1fe>
 800f880:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f882:	f7fe fad3 	bl	800de2c <__retarget_lock_release_recursive>
 800f886:	89ab      	ldrh	r3, [r5, #12]
 800f888:	065b      	lsls	r3, r3, #25
 800f88a:	f53f af1f 	bmi.w	800f6cc <_vfiprintf_r+0x44>
 800f88e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f890:	e71e      	b.n	800f6d0 <_vfiprintf_r+0x48>
 800f892:	ab03      	add	r3, sp, #12
 800f894:	9300      	str	r3, [sp, #0]
 800f896:	462a      	mov	r2, r5
 800f898:	4b05      	ldr	r3, [pc, #20]	@ (800f8b0 <_vfiprintf_r+0x228>)
 800f89a:	a904      	add	r1, sp, #16
 800f89c:	4630      	mov	r0, r6
 800f89e:	f7fe f821 	bl	800d8e4 <_printf_i>
 800f8a2:	e7e4      	b.n	800f86e <_vfiprintf_r+0x1e6>
 800f8a4:	0801055f 	.word	0x0801055f
 800f8a8:	08010569 	.word	0x08010569
 800f8ac:	0800d3b5 	.word	0x0800d3b5
 800f8b0:	0800f665 	.word	0x0800f665
 800f8b4:	08010565 	.word	0x08010565

0800f8b8 <__swbuf_r>:
 800f8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ba:	460e      	mov	r6, r1
 800f8bc:	4614      	mov	r4, r2
 800f8be:	4605      	mov	r5, r0
 800f8c0:	b118      	cbz	r0, 800f8ca <__swbuf_r+0x12>
 800f8c2:	6a03      	ldr	r3, [r0, #32]
 800f8c4:	b90b      	cbnz	r3, 800f8ca <__swbuf_r+0x12>
 800f8c6:	f7fe f9b9 	bl	800dc3c <__sinit>
 800f8ca:	69a3      	ldr	r3, [r4, #24]
 800f8cc:	60a3      	str	r3, [r4, #8]
 800f8ce:	89a3      	ldrh	r3, [r4, #12]
 800f8d0:	071a      	lsls	r2, r3, #28
 800f8d2:	d501      	bpl.n	800f8d8 <__swbuf_r+0x20>
 800f8d4:	6923      	ldr	r3, [r4, #16]
 800f8d6:	b943      	cbnz	r3, 800f8ea <__swbuf_r+0x32>
 800f8d8:	4621      	mov	r1, r4
 800f8da:	4628      	mov	r0, r5
 800f8dc:	f000 f82a 	bl	800f934 <__swsetup_r>
 800f8e0:	b118      	cbz	r0, 800f8ea <__swbuf_r+0x32>
 800f8e2:	f04f 37ff 	mov.w	r7, #4294967295
 800f8e6:	4638      	mov	r0, r7
 800f8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8ea:	6823      	ldr	r3, [r4, #0]
 800f8ec:	6922      	ldr	r2, [r4, #16]
 800f8ee:	1a98      	subs	r0, r3, r2
 800f8f0:	6963      	ldr	r3, [r4, #20]
 800f8f2:	b2f6      	uxtb	r6, r6
 800f8f4:	4283      	cmp	r3, r0
 800f8f6:	4637      	mov	r7, r6
 800f8f8:	dc05      	bgt.n	800f906 <__swbuf_r+0x4e>
 800f8fa:	4621      	mov	r1, r4
 800f8fc:	4628      	mov	r0, r5
 800f8fe:	f7ff fde9 	bl	800f4d4 <_fflush_r>
 800f902:	2800      	cmp	r0, #0
 800f904:	d1ed      	bne.n	800f8e2 <__swbuf_r+0x2a>
 800f906:	68a3      	ldr	r3, [r4, #8]
 800f908:	3b01      	subs	r3, #1
 800f90a:	60a3      	str	r3, [r4, #8]
 800f90c:	6823      	ldr	r3, [r4, #0]
 800f90e:	1c5a      	adds	r2, r3, #1
 800f910:	6022      	str	r2, [r4, #0]
 800f912:	701e      	strb	r6, [r3, #0]
 800f914:	6962      	ldr	r2, [r4, #20]
 800f916:	1c43      	adds	r3, r0, #1
 800f918:	429a      	cmp	r2, r3
 800f91a:	d004      	beq.n	800f926 <__swbuf_r+0x6e>
 800f91c:	89a3      	ldrh	r3, [r4, #12]
 800f91e:	07db      	lsls	r3, r3, #31
 800f920:	d5e1      	bpl.n	800f8e6 <__swbuf_r+0x2e>
 800f922:	2e0a      	cmp	r6, #10
 800f924:	d1df      	bne.n	800f8e6 <__swbuf_r+0x2e>
 800f926:	4621      	mov	r1, r4
 800f928:	4628      	mov	r0, r5
 800f92a:	f7ff fdd3 	bl	800f4d4 <_fflush_r>
 800f92e:	2800      	cmp	r0, #0
 800f930:	d0d9      	beq.n	800f8e6 <__swbuf_r+0x2e>
 800f932:	e7d6      	b.n	800f8e2 <__swbuf_r+0x2a>

0800f934 <__swsetup_r>:
 800f934:	b538      	push	{r3, r4, r5, lr}
 800f936:	4b29      	ldr	r3, [pc, #164]	@ (800f9dc <__swsetup_r+0xa8>)
 800f938:	4605      	mov	r5, r0
 800f93a:	6818      	ldr	r0, [r3, #0]
 800f93c:	460c      	mov	r4, r1
 800f93e:	b118      	cbz	r0, 800f948 <__swsetup_r+0x14>
 800f940:	6a03      	ldr	r3, [r0, #32]
 800f942:	b90b      	cbnz	r3, 800f948 <__swsetup_r+0x14>
 800f944:	f7fe f97a 	bl	800dc3c <__sinit>
 800f948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f94c:	0719      	lsls	r1, r3, #28
 800f94e:	d422      	bmi.n	800f996 <__swsetup_r+0x62>
 800f950:	06da      	lsls	r2, r3, #27
 800f952:	d407      	bmi.n	800f964 <__swsetup_r+0x30>
 800f954:	2209      	movs	r2, #9
 800f956:	602a      	str	r2, [r5, #0]
 800f958:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f95c:	81a3      	strh	r3, [r4, #12]
 800f95e:	f04f 30ff 	mov.w	r0, #4294967295
 800f962:	e033      	b.n	800f9cc <__swsetup_r+0x98>
 800f964:	0758      	lsls	r0, r3, #29
 800f966:	d512      	bpl.n	800f98e <__swsetup_r+0x5a>
 800f968:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f96a:	b141      	cbz	r1, 800f97e <__swsetup_r+0x4a>
 800f96c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f970:	4299      	cmp	r1, r3
 800f972:	d002      	beq.n	800f97a <__swsetup_r+0x46>
 800f974:	4628      	mov	r0, r5
 800f976:	f7ff f8a7 	bl	800eac8 <_free_r>
 800f97a:	2300      	movs	r3, #0
 800f97c:	6363      	str	r3, [r4, #52]	@ 0x34
 800f97e:	89a3      	ldrh	r3, [r4, #12]
 800f980:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f984:	81a3      	strh	r3, [r4, #12]
 800f986:	2300      	movs	r3, #0
 800f988:	6063      	str	r3, [r4, #4]
 800f98a:	6923      	ldr	r3, [r4, #16]
 800f98c:	6023      	str	r3, [r4, #0]
 800f98e:	89a3      	ldrh	r3, [r4, #12]
 800f990:	f043 0308 	orr.w	r3, r3, #8
 800f994:	81a3      	strh	r3, [r4, #12]
 800f996:	6923      	ldr	r3, [r4, #16]
 800f998:	b94b      	cbnz	r3, 800f9ae <__swsetup_r+0x7a>
 800f99a:	89a3      	ldrh	r3, [r4, #12]
 800f99c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f9a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f9a4:	d003      	beq.n	800f9ae <__swsetup_r+0x7a>
 800f9a6:	4621      	mov	r1, r4
 800f9a8:	4628      	mov	r0, r5
 800f9aa:	f000 f883 	bl	800fab4 <__smakebuf_r>
 800f9ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9b2:	f013 0201 	ands.w	r2, r3, #1
 800f9b6:	d00a      	beq.n	800f9ce <__swsetup_r+0x9a>
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	60a2      	str	r2, [r4, #8]
 800f9bc:	6962      	ldr	r2, [r4, #20]
 800f9be:	4252      	negs	r2, r2
 800f9c0:	61a2      	str	r2, [r4, #24]
 800f9c2:	6922      	ldr	r2, [r4, #16]
 800f9c4:	b942      	cbnz	r2, 800f9d8 <__swsetup_r+0xa4>
 800f9c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f9ca:	d1c5      	bne.n	800f958 <__swsetup_r+0x24>
 800f9cc:	bd38      	pop	{r3, r4, r5, pc}
 800f9ce:	0799      	lsls	r1, r3, #30
 800f9d0:	bf58      	it	pl
 800f9d2:	6962      	ldrpl	r2, [r4, #20]
 800f9d4:	60a2      	str	r2, [r4, #8]
 800f9d6:	e7f4      	b.n	800f9c2 <__swsetup_r+0x8e>
 800f9d8:	2000      	movs	r0, #0
 800f9da:	e7f7      	b.n	800f9cc <__swsetup_r+0x98>
 800f9dc:	2000010c 	.word	0x2000010c

0800f9e0 <_raise_r>:
 800f9e0:	291f      	cmp	r1, #31
 800f9e2:	b538      	push	{r3, r4, r5, lr}
 800f9e4:	4605      	mov	r5, r0
 800f9e6:	460c      	mov	r4, r1
 800f9e8:	d904      	bls.n	800f9f4 <_raise_r+0x14>
 800f9ea:	2316      	movs	r3, #22
 800f9ec:	6003      	str	r3, [r0, #0]
 800f9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f9f2:	bd38      	pop	{r3, r4, r5, pc}
 800f9f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f9f6:	b112      	cbz	r2, 800f9fe <_raise_r+0x1e>
 800f9f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f9fc:	b94b      	cbnz	r3, 800fa12 <_raise_r+0x32>
 800f9fe:	4628      	mov	r0, r5
 800fa00:	f000 f830 	bl	800fa64 <_getpid_r>
 800fa04:	4622      	mov	r2, r4
 800fa06:	4601      	mov	r1, r0
 800fa08:	4628      	mov	r0, r5
 800fa0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa0e:	f000 b817 	b.w	800fa40 <_kill_r>
 800fa12:	2b01      	cmp	r3, #1
 800fa14:	d00a      	beq.n	800fa2c <_raise_r+0x4c>
 800fa16:	1c59      	adds	r1, r3, #1
 800fa18:	d103      	bne.n	800fa22 <_raise_r+0x42>
 800fa1a:	2316      	movs	r3, #22
 800fa1c:	6003      	str	r3, [r0, #0]
 800fa1e:	2001      	movs	r0, #1
 800fa20:	e7e7      	b.n	800f9f2 <_raise_r+0x12>
 800fa22:	2100      	movs	r1, #0
 800fa24:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fa28:	4620      	mov	r0, r4
 800fa2a:	4798      	blx	r3
 800fa2c:	2000      	movs	r0, #0
 800fa2e:	e7e0      	b.n	800f9f2 <_raise_r+0x12>

0800fa30 <raise>:
 800fa30:	4b02      	ldr	r3, [pc, #8]	@ (800fa3c <raise+0xc>)
 800fa32:	4601      	mov	r1, r0
 800fa34:	6818      	ldr	r0, [r3, #0]
 800fa36:	f7ff bfd3 	b.w	800f9e0 <_raise_r>
 800fa3a:	bf00      	nop
 800fa3c:	2000010c 	.word	0x2000010c

0800fa40 <_kill_r>:
 800fa40:	b538      	push	{r3, r4, r5, lr}
 800fa42:	4d07      	ldr	r5, [pc, #28]	@ (800fa60 <_kill_r+0x20>)
 800fa44:	2300      	movs	r3, #0
 800fa46:	4604      	mov	r4, r0
 800fa48:	4608      	mov	r0, r1
 800fa4a:	4611      	mov	r1, r2
 800fa4c:	602b      	str	r3, [r5, #0]
 800fa4e:	f7f2 fe9f 	bl	8002790 <_kill>
 800fa52:	1c43      	adds	r3, r0, #1
 800fa54:	d102      	bne.n	800fa5c <_kill_r+0x1c>
 800fa56:	682b      	ldr	r3, [r5, #0]
 800fa58:	b103      	cbz	r3, 800fa5c <_kill_r+0x1c>
 800fa5a:	6023      	str	r3, [r4, #0]
 800fa5c:	bd38      	pop	{r3, r4, r5, pc}
 800fa5e:	bf00      	nop
 800fa60:	20002420 	.word	0x20002420

0800fa64 <_getpid_r>:
 800fa64:	f7f2 be8c 	b.w	8002780 <_getpid>

0800fa68 <__swhatbuf_r>:
 800fa68:	b570      	push	{r4, r5, r6, lr}
 800fa6a:	460c      	mov	r4, r1
 800fa6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa70:	2900      	cmp	r1, #0
 800fa72:	b096      	sub	sp, #88	@ 0x58
 800fa74:	4615      	mov	r5, r2
 800fa76:	461e      	mov	r6, r3
 800fa78:	da0d      	bge.n	800fa96 <__swhatbuf_r+0x2e>
 800fa7a:	89a3      	ldrh	r3, [r4, #12]
 800fa7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fa80:	f04f 0100 	mov.w	r1, #0
 800fa84:	bf14      	ite	ne
 800fa86:	2340      	movne	r3, #64	@ 0x40
 800fa88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fa8c:	2000      	movs	r0, #0
 800fa8e:	6031      	str	r1, [r6, #0]
 800fa90:	602b      	str	r3, [r5, #0]
 800fa92:	b016      	add	sp, #88	@ 0x58
 800fa94:	bd70      	pop	{r4, r5, r6, pc}
 800fa96:	466a      	mov	r2, sp
 800fa98:	f000 f848 	bl	800fb2c <_fstat_r>
 800fa9c:	2800      	cmp	r0, #0
 800fa9e:	dbec      	blt.n	800fa7a <__swhatbuf_r+0x12>
 800faa0:	9901      	ldr	r1, [sp, #4]
 800faa2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800faa6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800faaa:	4259      	negs	r1, r3
 800faac:	4159      	adcs	r1, r3
 800faae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fab2:	e7eb      	b.n	800fa8c <__swhatbuf_r+0x24>

0800fab4 <__smakebuf_r>:
 800fab4:	898b      	ldrh	r3, [r1, #12]
 800fab6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fab8:	079d      	lsls	r5, r3, #30
 800faba:	4606      	mov	r6, r0
 800fabc:	460c      	mov	r4, r1
 800fabe:	d507      	bpl.n	800fad0 <__smakebuf_r+0x1c>
 800fac0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fac4:	6023      	str	r3, [r4, #0]
 800fac6:	6123      	str	r3, [r4, #16]
 800fac8:	2301      	movs	r3, #1
 800faca:	6163      	str	r3, [r4, #20]
 800facc:	b003      	add	sp, #12
 800face:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fad0:	ab01      	add	r3, sp, #4
 800fad2:	466a      	mov	r2, sp
 800fad4:	f7ff ffc8 	bl	800fa68 <__swhatbuf_r>
 800fad8:	9f00      	ldr	r7, [sp, #0]
 800fada:	4605      	mov	r5, r0
 800fadc:	4639      	mov	r1, r7
 800fade:	4630      	mov	r0, r6
 800fae0:	f7ff f866 	bl	800ebb0 <_malloc_r>
 800fae4:	b948      	cbnz	r0, 800fafa <__smakebuf_r+0x46>
 800fae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800faea:	059a      	lsls	r2, r3, #22
 800faec:	d4ee      	bmi.n	800facc <__smakebuf_r+0x18>
 800faee:	f023 0303 	bic.w	r3, r3, #3
 800faf2:	f043 0302 	orr.w	r3, r3, #2
 800faf6:	81a3      	strh	r3, [r4, #12]
 800faf8:	e7e2      	b.n	800fac0 <__smakebuf_r+0xc>
 800fafa:	89a3      	ldrh	r3, [r4, #12]
 800fafc:	6020      	str	r0, [r4, #0]
 800fafe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb02:	81a3      	strh	r3, [r4, #12]
 800fb04:	9b01      	ldr	r3, [sp, #4]
 800fb06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fb0a:	b15b      	cbz	r3, 800fb24 <__smakebuf_r+0x70>
 800fb0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb10:	4630      	mov	r0, r6
 800fb12:	f000 f81d 	bl	800fb50 <_isatty_r>
 800fb16:	b128      	cbz	r0, 800fb24 <__smakebuf_r+0x70>
 800fb18:	89a3      	ldrh	r3, [r4, #12]
 800fb1a:	f023 0303 	bic.w	r3, r3, #3
 800fb1e:	f043 0301 	orr.w	r3, r3, #1
 800fb22:	81a3      	strh	r3, [r4, #12]
 800fb24:	89a3      	ldrh	r3, [r4, #12]
 800fb26:	431d      	orrs	r5, r3
 800fb28:	81a5      	strh	r5, [r4, #12]
 800fb2a:	e7cf      	b.n	800facc <__smakebuf_r+0x18>

0800fb2c <_fstat_r>:
 800fb2c:	b538      	push	{r3, r4, r5, lr}
 800fb2e:	4d07      	ldr	r5, [pc, #28]	@ (800fb4c <_fstat_r+0x20>)
 800fb30:	2300      	movs	r3, #0
 800fb32:	4604      	mov	r4, r0
 800fb34:	4608      	mov	r0, r1
 800fb36:	4611      	mov	r1, r2
 800fb38:	602b      	str	r3, [r5, #0]
 800fb3a:	f7f2 fe89 	bl	8002850 <_fstat>
 800fb3e:	1c43      	adds	r3, r0, #1
 800fb40:	d102      	bne.n	800fb48 <_fstat_r+0x1c>
 800fb42:	682b      	ldr	r3, [r5, #0]
 800fb44:	b103      	cbz	r3, 800fb48 <_fstat_r+0x1c>
 800fb46:	6023      	str	r3, [r4, #0]
 800fb48:	bd38      	pop	{r3, r4, r5, pc}
 800fb4a:	bf00      	nop
 800fb4c:	20002420 	.word	0x20002420

0800fb50 <_isatty_r>:
 800fb50:	b538      	push	{r3, r4, r5, lr}
 800fb52:	4d06      	ldr	r5, [pc, #24]	@ (800fb6c <_isatty_r+0x1c>)
 800fb54:	2300      	movs	r3, #0
 800fb56:	4604      	mov	r4, r0
 800fb58:	4608      	mov	r0, r1
 800fb5a:	602b      	str	r3, [r5, #0]
 800fb5c:	f7f2 fe88 	bl	8002870 <_isatty>
 800fb60:	1c43      	adds	r3, r0, #1
 800fb62:	d102      	bne.n	800fb6a <_isatty_r+0x1a>
 800fb64:	682b      	ldr	r3, [r5, #0]
 800fb66:	b103      	cbz	r3, 800fb6a <_isatty_r+0x1a>
 800fb68:	6023      	str	r3, [r4, #0]
 800fb6a:	bd38      	pop	{r3, r4, r5, pc}
 800fb6c:	20002420 	.word	0x20002420

0800fb70 <log>:
 800fb70:	b538      	push	{r3, r4, r5, lr}
 800fb72:	ed2d 8b02 	vpush	{d8}
 800fb76:	ec55 4b10 	vmov	r4, r5, d0
 800fb7a:	f000 f949 	bl	800fe10 <__ieee754_log>
 800fb7e:	4622      	mov	r2, r4
 800fb80:	462b      	mov	r3, r5
 800fb82:	4620      	mov	r0, r4
 800fb84:	4629      	mov	r1, r5
 800fb86:	eeb0 8a40 	vmov.f32	s16, s0
 800fb8a:	eef0 8a60 	vmov.f32	s17, s1
 800fb8e:	f7f0 ffcd 	bl	8000b2c <__aeabi_dcmpun>
 800fb92:	b998      	cbnz	r0, 800fbbc <log+0x4c>
 800fb94:	2200      	movs	r2, #0
 800fb96:	2300      	movs	r3, #0
 800fb98:	4620      	mov	r0, r4
 800fb9a:	4629      	mov	r1, r5
 800fb9c:	f7f0 ffbc 	bl	8000b18 <__aeabi_dcmpgt>
 800fba0:	b960      	cbnz	r0, 800fbbc <log+0x4c>
 800fba2:	2200      	movs	r2, #0
 800fba4:	2300      	movs	r3, #0
 800fba6:	4620      	mov	r0, r4
 800fba8:	4629      	mov	r1, r5
 800fbaa:	f7f0 ff8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800fbae:	b160      	cbz	r0, 800fbca <log+0x5a>
 800fbb0:	f7fe f910 	bl	800ddd4 <__errno>
 800fbb4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800fbe0 <log+0x70>
 800fbb8:	2322      	movs	r3, #34	@ 0x22
 800fbba:	6003      	str	r3, [r0, #0]
 800fbbc:	eeb0 0a48 	vmov.f32	s0, s16
 800fbc0:	eef0 0a68 	vmov.f32	s1, s17
 800fbc4:	ecbd 8b02 	vpop	{d8}
 800fbc8:	bd38      	pop	{r3, r4, r5, pc}
 800fbca:	f7fe f903 	bl	800ddd4 <__errno>
 800fbce:	ecbd 8b02 	vpop	{d8}
 800fbd2:	2321      	movs	r3, #33	@ 0x21
 800fbd4:	6003      	str	r3, [r0, #0]
 800fbd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbda:	4803      	ldr	r0, [pc, #12]	@ (800fbe8 <log+0x78>)
 800fbdc:	f000 b834 	b.w	800fc48 <nan>
 800fbe0:	00000000 	.word	0x00000000
 800fbe4:	fff00000 	.word	0xfff00000
 800fbe8:	0801045d 	.word	0x0801045d

0800fbec <sqrt>:
 800fbec:	b538      	push	{r3, r4, r5, lr}
 800fbee:	ed2d 8b02 	vpush	{d8}
 800fbf2:	ec55 4b10 	vmov	r4, r5, d0
 800fbf6:	f000 f82f 	bl	800fc58 <__ieee754_sqrt>
 800fbfa:	4622      	mov	r2, r4
 800fbfc:	462b      	mov	r3, r5
 800fbfe:	4620      	mov	r0, r4
 800fc00:	4629      	mov	r1, r5
 800fc02:	eeb0 8a40 	vmov.f32	s16, s0
 800fc06:	eef0 8a60 	vmov.f32	s17, s1
 800fc0a:	f7f0 ff8f 	bl	8000b2c <__aeabi_dcmpun>
 800fc0e:	b990      	cbnz	r0, 800fc36 <sqrt+0x4a>
 800fc10:	2200      	movs	r2, #0
 800fc12:	2300      	movs	r3, #0
 800fc14:	4620      	mov	r0, r4
 800fc16:	4629      	mov	r1, r5
 800fc18:	f7f0 ff60 	bl	8000adc <__aeabi_dcmplt>
 800fc1c:	b158      	cbz	r0, 800fc36 <sqrt+0x4a>
 800fc1e:	f7fe f8d9 	bl	800ddd4 <__errno>
 800fc22:	2321      	movs	r3, #33	@ 0x21
 800fc24:	6003      	str	r3, [r0, #0]
 800fc26:	2200      	movs	r2, #0
 800fc28:	2300      	movs	r3, #0
 800fc2a:	4610      	mov	r0, r2
 800fc2c:	4619      	mov	r1, r3
 800fc2e:	f7f0 fe0d 	bl	800084c <__aeabi_ddiv>
 800fc32:	ec41 0b18 	vmov	d8, r0, r1
 800fc36:	eeb0 0a48 	vmov.f32	s0, s16
 800fc3a:	eef0 0a68 	vmov.f32	s1, s17
 800fc3e:	ecbd 8b02 	vpop	{d8}
 800fc42:	bd38      	pop	{r3, r4, r5, pc}
 800fc44:	0000      	movs	r0, r0
	...

0800fc48 <nan>:
 800fc48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fc50 <nan+0x8>
 800fc4c:	4770      	bx	lr
 800fc4e:	bf00      	nop
 800fc50:	00000000 	.word	0x00000000
 800fc54:	7ff80000 	.word	0x7ff80000

0800fc58 <__ieee754_sqrt>:
 800fc58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc5c:	4a68      	ldr	r2, [pc, #416]	@ (800fe00 <__ieee754_sqrt+0x1a8>)
 800fc5e:	ec55 4b10 	vmov	r4, r5, d0
 800fc62:	43aa      	bics	r2, r5
 800fc64:	462b      	mov	r3, r5
 800fc66:	4621      	mov	r1, r4
 800fc68:	d110      	bne.n	800fc8c <__ieee754_sqrt+0x34>
 800fc6a:	4622      	mov	r2, r4
 800fc6c:	4620      	mov	r0, r4
 800fc6e:	4629      	mov	r1, r5
 800fc70:	f7f0 fcc2 	bl	80005f8 <__aeabi_dmul>
 800fc74:	4602      	mov	r2, r0
 800fc76:	460b      	mov	r3, r1
 800fc78:	4620      	mov	r0, r4
 800fc7a:	4629      	mov	r1, r5
 800fc7c:	f7f0 fb06 	bl	800028c <__adddf3>
 800fc80:	4604      	mov	r4, r0
 800fc82:	460d      	mov	r5, r1
 800fc84:	ec45 4b10 	vmov	d0, r4, r5
 800fc88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc8c:	2d00      	cmp	r5, #0
 800fc8e:	dc0e      	bgt.n	800fcae <__ieee754_sqrt+0x56>
 800fc90:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800fc94:	4322      	orrs	r2, r4
 800fc96:	d0f5      	beq.n	800fc84 <__ieee754_sqrt+0x2c>
 800fc98:	b19d      	cbz	r5, 800fcc2 <__ieee754_sqrt+0x6a>
 800fc9a:	4622      	mov	r2, r4
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	4629      	mov	r1, r5
 800fca0:	f7f0 faf2 	bl	8000288 <__aeabi_dsub>
 800fca4:	4602      	mov	r2, r0
 800fca6:	460b      	mov	r3, r1
 800fca8:	f7f0 fdd0 	bl	800084c <__aeabi_ddiv>
 800fcac:	e7e8      	b.n	800fc80 <__ieee754_sqrt+0x28>
 800fcae:	152a      	asrs	r2, r5, #20
 800fcb0:	d115      	bne.n	800fcde <__ieee754_sqrt+0x86>
 800fcb2:	2000      	movs	r0, #0
 800fcb4:	e009      	b.n	800fcca <__ieee754_sqrt+0x72>
 800fcb6:	0acb      	lsrs	r3, r1, #11
 800fcb8:	3a15      	subs	r2, #21
 800fcba:	0549      	lsls	r1, r1, #21
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d0fa      	beq.n	800fcb6 <__ieee754_sqrt+0x5e>
 800fcc0:	e7f7      	b.n	800fcb2 <__ieee754_sqrt+0x5a>
 800fcc2:	462a      	mov	r2, r5
 800fcc4:	e7fa      	b.n	800fcbc <__ieee754_sqrt+0x64>
 800fcc6:	005b      	lsls	r3, r3, #1
 800fcc8:	3001      	adds	r0, #1
 800fcca:	02dc      	lsls	r4, r3, #11
 800fccc:	d5fb      	bpl.n	800fcc6 <__ieee754_sqrt+0x6e>
 800fcce:	1e44      	subs	r4, r0, #1
 800fcd0:	1b12      	subs	r2, r2, r4
 800fcd2:	f1c0 0420 	rsb	r4, r0, #32
 800fcd6:	fa21 f404 	lsr.w	r4, r1, r4
 800fcda:	4323      	orrs	r3, r4
 800fcdc:	4081      	lsls	r1, r0
 800fcde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fce2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800fce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fcea:	07d2      	lsls	r2, r2, #31
 800fcec:	bf5c      	itt	pl
 800fcee:	005b      	lslpl	r3, r3, #1
 800fcf0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800fcf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fcf8:	bf58      	it	pl
 800fcfa:	0049      	lslpl	r1, r1, #1
 800fcfc:	2600      	movs	r6, #0
 800fcfe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800fd02:	106d      	asrs	r5, r5, #1
 800fd04:	0049      	lsls	r1, r1, #1
 800fd06:	2016      	movs	r0, #22
 800fd08:	4632      	mov	r2, r6
 800fd0a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800fd0e:	1917      	adds	r7, r2, r4
 800fd10:	429f      	cmp	r7, r3
 800fd12:	bfde      	ittt	le
 800fd14:	193a      	addle	r2, r7, r4
 800fd16:	1bdb      	suble	r3, r3, r7
 800fd18:	1936      	addle	r6, r6, r4
 800fd1a:	0fcf      	lsrs	r7, r1, #31
 800fd1c:	3801      	subs	r0, #1
 800fd1e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800fd22:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fd26:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800fd2a:	d1f0      	bne.n	800fd0e <__ieee754_sqrt+0xb6>
 800fd2c:	4604      	mov	r4, r0
 800fd2e:	2720      	movs	r7, #32
 800fd30:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800fd34:	429a      	cmp	r2, r3
 800fd36:	eb00 0e0c 	add.w	lr, r0, ip
 800fd3a:	db02      	blt.n	800fd42 <__ieee754_sqrt+0xea>
 800fd3c:	d113      	bne.n	800fd66 <__ieee754_sqrt+0x10e>
 800fd3e:	458e      	cmp	lr, r1
 800fd40:	d811      	bhi.n	800fd66 <__ieee754_sqrt+0x10e>
 800fd42:	f1be 0f00 	cmp.w	lr, #0
 800fd46:	eb0e 000c 	add.w	r0, lr, ip
 800fd4a:	da42      	bge.n	800fdd2 <__ieee754_sqrt+0x17a>
 800fd4c:	2800      	cmp	r0, #0
 800fd4e:	db40      	blt.n	800fdd2 <__ieee754_sqrt+0x17a>
 800fd50:	f102 0801 	add.w	r8, r2, #1
 800fd54:	1a9b      	subs	r3, r3, r2
 800fd56:	458e      	cmp	lr, r1
 800fd58:	bf88      	it	hi
 800fd5a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fd5e:	eba1 010e 	sub.w	r1, r1, lr
 800fd62:	4464      	add	r4, ip
 800fd64:	4642      	mov	r2, r8
 800fd66:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800fd6a:	3f01      	subs	r7, #1
 800fd6c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800fd70:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fd74:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800fd78:	d1dc      	bne.n	800fd34 <__ieee754_sqrt+0xdc>
 800fd7a:	4319      	orrs	r1, r3
 800fd7c:	d01b      	beq.n	800fdb6 <__ieee754_sqrt+0x15e>
 800fd7e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800fe04 <__ieee754_sqrt+0x1ac>
 800fd82:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800fe08 <__ieee754_sqrt+0x1b0>
 800fd86:	e9da 0100 	ldrd	r0, r1, [sl]
 800fd8a:	e9db 2300 	ldrd	r2, r3, [fp]
 800fd8e:	f7f0 fa7b 	bl	8000288 <__aeabi_dsub>
 800fd92:	e9da 8900 	ldrd	r8, r9, [sl]
 800fd96:	4602      	mov	r2, r0
 800fd98:	460b      	mov	r3, r1
 800fd9a:	4640      	mov	r0, r8
 800fd9c:	4649      	mov	r1, r9
 800fd9e:	f7f0 fea7 	bl	8000af0 <__aeabi_dcmple>
 800fda2:	b140      	cbz	r0, 800fdb6 <__ieee754_sqrt+0x15e>
 800fda4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800fda8:	e9da 0100 	ldrd	r0, r1, [sl]
 800fdac:	e9db 2300 	ldrd	r2, r3, [fp]
 800fdb0:	d111      	bne.n	800fdd6 <__ieee754_sqrt+0x17e>
 800fdb2:	3601      	adds	r6, #1
 800fdb4:	463c      	mov	r4, r7
 800fdb6:	1072      	asrs	r2, r6, #1
 800fdb8:	0863      	lsrs	r3, r4, #1
 800fdba:	07f1      	lsls	r1, r6, #31
 800fdbc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800fdc0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800fdc4:	bf48      	it	mi
 800fdc6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800fdca:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800fdce:	4618      	mov	r0, r3
 800fdd0:	e756      	b.n	800fc80 <__ieee754_sqrt+0x28>
 800fdd2:	4690      	mov	r8, r2
 800fdd4:	e7be      	b.n	800fd54 <__ieee754_sqrt+0xfc>
 800fdd6:	f7f0 fa59 	bl	800028c <__adddf3>
 800fdda:	e9da 8900 	ldrd	r8, r9, [sl]
 800fdde:	4602      	mov	r2, r0
 800fde0:	460b      	mov	r3, r1
 800fde2:	4640      	mov	r0, r8
 800fde4:	4649      	mov	r1, r9
 800fde6:	f7f0 fe79 	bl	8000adc <__aeabi_dcmplt>
 800fdea:	b120      	cbz	r0, 800fdf6 <__ieee754_sqrt+0x19e>
 800fdec:	1ca0      	adds	r0, r4, #2
 800fdee:	bf08      	it	eq
 800fdf0:	3601      	addeq	r6, #1
 800fdf2:	3402      	adds	r4, #2
 800fdf4:	e7df      	b.n	800fdb6 <__ieee754_sqrt+0x15e>
 800fdf6:	1c63      	adds	r3, r4, #1
 800fdf8:	f023 0401 	bic.w	r4, r3, #1
 800fdfc:	e7db      	b.n	800fdb6 <__ieee754_sqrt+0x15e>
 800fdfe:	bf00      	nop
 800fe00:	7ff00000 	.word	0x7ff00000
 800fe04:	200002d0 	.word	0x200002d0
 800fe08:	200002c8 	.word	0x200002c8
 800fe0c:	00000000 	.word	0x00000000

0800fe10 <__ieee754_log>:
 800fe10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe14:	ec51 0b10 	vmov	r0, r1, d0
 800fe18:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800fe1c:	b087      	sub	sp, #28
 800fe1e:	460d      	mov	r5, r1
 800fe20:	da26      	bge.n	800fe70 <__ieee754_log+0x60>
 800fe22:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fe26:	4303      	orrs	r3, r0
 800fe28:	4602      	mov	r2, r0
 800fe2a:	d10a      	bne.n	800fe42 <__ieee754_log+0x32>
 800fe2c:	49ce      	ldr	r1, [pc, #824]	@ (8010168 <__ieee754_log+0x358>)
 800fe2e:	2200      	movs	r2, #0
 800fe30:	2300      	movs	r3, #0
 800fe32:	2000      	movs	r0, #0
 800fe34:	f7f0 fd0a 	bl	800084c <__aeabi_ddiv>
 800fe38:	ec41 0b10 	vmov	d0, r0, r1
 800fe3c:	b007      	add	sp, #28
 800fe3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe42:	2900      	cmp	r1, #0
 800fe44:	da05      	bge.n	800fe52 <__ieee754_log+0x42>
 800fe46:	460b      	mov	r3, r1
 800fe48:	f7f0 fa1e 	bl	8000288 <__aeabi_dsub>
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	2300      	movs	r3, #0
 800fe50:	e7f0      	b.n	800fe34 <__ieee754_log+0x24>
 800fe52:	4bc6      	ldr	r3, [pc, #792]	@ (801016c <__ieee754_log+0x35c>)
 800fe54:	2200      	movs	r2, #0
 800fe56:	f7f0 fbcf 	bl	80005f8 <__aeabi_dmul>
 800fe5a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800fe5e:	460d      	mov	r5, r1
 800fe60:	4ac3      	ldr	r2, [pc, #780]	@ (8010170 <__ieee754_log+0x360>)
 800fe62:	4295      	cmp	r5, r2
 800fe64:	dd06      	ble.n	800fe74 <__ieee754_log+0x64>
 800fe66:	4602      	mov	r2, r0
 800fe68:	460b      	mov	r3, r1
 800fe6a:	f7f0 fa0f 	bl	800028c <__adddf3>
 800fe6e:	e7e3      	b.n	800fe38 <__ieee754_log+0x28>
 800fe70:	2300      	movs	r3, #0
 800fe72:	e7f5      	b.n	800fe60 <__ieee754_log+0x50>
 800fe74:	152c      	asrs	r4, r5, #20
 800fe76:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800fe7a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800fe7e:	441c      	add	r4, r3
 800fe80:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800fe84:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800fe88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fe8c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800fe90:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800fe94:	ea42 0105 	orr.w	r1, r2, r5
 800fe98:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	4bb5      	ldr	r3, [pc, #724]	@ (8010174 <__ieee754_log+0x364>)
 800fea0:	f7f0 f9f2 	bl	8000288 <__aeabi_dsub>
 800fea4:	1cab      	adds	r3, r5, #2
 800fea6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800feaa:	2b02      	cmp	r3, #2
 800feac:	4682      	mov	sl, r0
 800feae:	468b      	mov	fp, r1
 800feb0:	f04f 0200 	mov.w	r2, #0
 800feb4:	dc53      	bgt.n	800ff5e <__ieee754_log+0x14e>
 800feb6:	2300      	movs	r3, #0
 800feb8:	f7f0 fe06 	bl	8000ac8 <__aeabi_dcmpeq>
 800febc:	b1d0      	cbz	r0, 800fef4 <__ieee754_log+0xe4>
 800febe:	2c00      	cmp	r4, #0
 800fec0:	f000 8120 	beq.w	8010104 <__ieee754_log+0x2f4>
 800fec4:	4620      	mov	r0, r4
 800fec6:	f7f0 fb2d 	bl	8000524 <__aeabi_i2d>
 800feca:	a391      	add	r3, pc, #580	@ (adr r3, 8010110 <__ieee754_log+0x300>)
 800fecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed0:	4606      	mov	r6, r0
 800fed2:	460f      	mov	r7, r1
 800fed4:	f7f0 fb90 	bl	80005f8 <__aeabi_dmul>
 800fed8:	a38f      	add	r3, pc, #572	@ (adr r3, 8010118 <__ieee754_log+0x308>)
 800feda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fede:	4604      	mov	r4, r0
 800fee0:	460d      	mov	r5, r1
 800fee2:	4630      	mov	r0, r6
 800fee4:	4639      	mov	r1, r7
 800fee6:	f7f0 fb87 	bl	80005f8 <__aeabi_dmul>
 800feea:	4602      	mov	r2, r0
 800feec:	460b      	mov	r3, r1
 800feee:	4620      	mov	r0, r4
 800fef0:	4629      	mov	r1, r5
 800fef2:	e7ba      	b.n	800fe6a <__ieee754_log+0x5a>
 800fef4:	a38a      	add	r3, pc, #552	@ (adr r3, 8010120 <__ieee754_log+0x310>)
 800fef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fefa:	4650      	mov	r0, sl
 800fefc:	4659      	mov	r1, fp
 800fefe:	f7f0 fb7b 	bl	80005f8 <__aeabi_dmul>
 800ff02:	4602      	mov	r2, r0
 800ff04:	460b      	mov	r3, r1
 800ff06:	2000      	movs	r0, #0
 800ff08:	499b      	ldr	r1, [pc, #620]	@ (8010178 <__ieee754_log+0x368>)
 800ff0a:	f7f0 f9bd 	bl	8000288 <__aeabi_dsub>
 800ff0e:	4652      	mov	r2, sl
 800ff10:	4606      	mov	r6, r0
 800ff12:	460f      	mov	r7, r1
 800ff14:	465b      	mov	r3, fp
 800ff16:	4650      	mov	r0, sl
 800ff18:	4659      	mov	r1, fp
 800ff1a:	f7f0 fb6d 	bl	80005f8 <__aeabi_dmul>
 800ff1e:	4602      	mov	r2, r0
 800ff20:	460b      	mov	r3, r1
 800ff22:	4630      	mov	r0, r6
 800ff24:	4639      	mov	r1, r7
 800ff26:	f7f0 fb67 	bl	80005f8 <__aeabi_dmul>
 800ff2a:	4606      	mov	r6, r0
 800ff2c:	460f      	mov	r7, r1
 800ff2e:	b914      	cbnz	r4, 800ff36 <__ieee754_log+0x126>
 800ff30:	4632      	mov	r2, r6
 800ff32:	463b      	mov	r3, r7
 800ff34:	e0a0      	b.n	8010078 <__ieee754_log+0x268>
 800ff36:	4620      	mov	r0, r4
 800ff38:	f7f0 faf4 	bl	8000524 <__aeabi_i2d>
 800ff3c:	a374      	add	r3, pc, #464	@ (adr r3, 8010110 <__ieee754_log+0x300>)
 800ff3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff42:	4680      	mov	r8, r0
 800ff44:	4689      	mov	r9, r1
 800ff46:	f7f0 fb57 	bl	80005f8 <__aeabi_dmul>
 800ff4a:	a373      	add	r3, pc, #460	@ (adr r3, 8010118 <__ieee754_log+0x308>)
 800ff4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff50:	4604      	mov	r4, r0
 800ff52:	460d      	mov	r5, r1
 800ff54:	4640      	mov	r0, r8
 800ff56:	4649      	mov	r1, r9
 800ff58:	f7f0 fb4e 	bl	80005f8 <__aeabi_dmul>
 800ff5c:	e0a5      	b.n	80100aa <__ieee754_log+0x29a>
 800ff5e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ff62:	f7f0 f993 	bl	800028c <__adddf3>
 800ff66:	4602      	mov	r2, r0
 800ff68:	460b      	mov	r3, r1
 800ff6a:	4650      	mov	r0, sl
 800ff6c:	4659      	mov	r1, fp
 800ff6e:	f7f0 fc6d 	bl	800084c <__aeabi_ddiv>
 800ff72:	e9cd 0100 	strd	r0, r1, [sp]
 800ff76:	4620      	mov	r0, r4
 800ff78:	f7f0 fad4 	bl	8000524 <__aeabi_i2d>
 800ff7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff84:	4610      	mov	r0, r2
 800ff86:	4619      	mov	r1, r3
 800ff88:	f7f0 fb36 	bl	80005f8 <__aeabi_dmul>
 800ff8c:	4602      	mov	r2, r0
 800ff8e:	460b      	mov	r3, r1
 800ff90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ff94:	f7f0 fb30 	bl	80005f8 <__aeabi_dmul>
 800ff98:	a363      	add	r3, pc, #396	@ (adr r3, 8010128 <__ieee754_log+0x318>)
 800ff9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff9e:	4680      	mov	r8, r0
 800ffa0:	4689      	mov	r9, r1
 800ffa2:	f7f0 fb29 	bl	80005f8 <__aeabi_dmul>
 800ffa6:	a362      	add	r3, pc, #392	@ (adr r3, 8010130 <__ieee754_log+0x320>)
 800ffa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffac:	f7f0 f96e 	bl	800028c <__adddf3>
 800ffb0:	4642      	mov	r2, r8
 800ffb2:	464b      	mov	r3, r9
 800ffb4:	f7f0 fb20 	bl	80005f8 <__aeabi_dmul>
 800ffb8:	a35f      	add	r3, pc, #380	@ (adr r3, 8010138 <__ieee754_log+0x328>)
 800ffba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffbe:	f7f0 f965 	bl	800028c <__adddf3>
 800ffc2:	4642      	mov	r2, r8
 800ffc4:	464b      	mov	r3, r9
 800ffc6:	f7f0 fb17 	bl	80005f8 <__aeabi_dmul>
 800ffca:	a35d      	add	r3, pc, #372	@ (adr r3, 8010140 <__ieee754_log+0x330>)
 800ffcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd0:	f7f0 f95c 	bl	800028c <__adddf3>
 800ffd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ffd8:	f7f0 fb0e 	bl	80005f8 <__aeabi_dmul>
 800ffdc:	a35a      	add	r3, pc, #360	@ (adr r3, 8010148 <__ieee754_log+0x338>)
 800ffde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ffe6:	4640      	mov	r0, r8
 800ffe8:	4649      	mov	r1, r9
 800ffea:	f7f0 fb05 	bl	80005f8 <__aeabi_dmul>
 800ffee:	a358      	add	r3, pc, #352	@ (adr r3, 8010150 <__ieee754_log+0x340>)
 800fff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff4:	f7f0 f94a 	bl	800028c <__adddf3>
 800fff8:	4642      	mov	r2, r8
 800fffa:	464b      	mov	r3, r9
 800fffc:	f7f0 fafc 	bl	80005f8 <__aeabi_dmul>
 8010000:	a355      	add	r3, pc, #340	@ (adr r3, 8010158 <__ieee754_log+0x348>)
 8010002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010006:	f7f0 f941 	bl	800028c <__adddf3>
 801000a:	4642      	mov	r2, r8
 801000c:	464b      	mov	r3, r9
 801000e:	f7f0 faf3 	bl	80005f8 <__aeabi_dmul>
 8010012:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8010016:	4602      	mov	r2, r0
 8010018:	460b      	mov	r3, r1
 801001a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 801001e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010022:	f7f0 f933 	bl	800028c <__adddf3>
 8010026:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 801002a:	3551      	adds	r5, #81	@ 0x51
 801002c:	4335      	orrs	r5, r6
 801002e:	2d00      	cmp	r5, #0
 8010030:	4680      	mov	r8, r0
 8010032:	4689      	mov	r9, r1
 8010034:	dd48      	ble.n	80100c8 <__ieee754_log+0x2b8>
 8010036:	4b50      	ldr	r3, [pc, #320]	@ (8010178 <__ieee754_log+0x368>)
 8010038:	2200      	movs	r2, #0
 801003a:	4650      	mov	r0, sl
 801003c:	4659      	mov	r1, fp
 801003e:	f7f0 fadb 	bl	80005f8 <__aeabi_dmul>
 8010042:	4652      	mov	r2, sl
 8010044:	465b      	mov	r3, fp
 8010046:	f7f0 fad7 	bl	80005f8 <__aeabi_dmul>
 801004a:	4602      	mov	r2, r0
 801004c:	460b      	mov	r3, r1
 801004e:	4606      	mov	r6, r0
 8010050:	460f      	mov	r7, r1
 8010052:	4640      	mov	r0, r8
 8010054:	4649      	mov	r1, r9
 8010056:	f7f0 f919 	bl	800028c <__adddf3>
 801005a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801005e:	f7f0 facb 	bl	80005f8 <__aeabi_dmul>
 8010062:	4680      	mov	r8, r0
 8010064:	4689      	mov	r9, r1
 8010066:	b964      	cbnz	r4, 8010082 <__ieee754_log+0x272>
 8010068:	4602      	mov	r2, r0
 801006a:	460b      	mov	r3, r1
 801006c:	4630      	mov	r0, r6
 801006e:	4639      	mov	r1, r7
 8010070:	f7f0 f90a 	bl	8000288 <__aeabi_dsub>
 8010074:	4602      	mov	r2, r0
 8010076:	460b      	mov	r3, r1
 8010078:	4650      	mov	r0, sl
 801007a:	4659      	mov	r1, fp
 801007c:	f7f0 f904 	bl	8000288 <__aeabi_dsub>
 8010080:	e6da      	b.n	800fe38 <__ieee754_log+0x28>
 8010082:	a323      	add	r3, pc, #140	@ (adr r3, 8010110 <__ieee754_log+0x300>)
 8010084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801008c:	f7f0 fab4 	bl	80005f8 <__aeabi_dmul>
 8010090:	a321      	add	r3, pc, #132	@ (adr r3, 8010118 <__ieee754_log+0x308>)
 8010092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010096:	4604      	mov	r4, r0
 8010098:	460d      	mov	r5, r1
 801009a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801009e:	f7f0 faab 	bl	80005f8 <__aeabi_dmul>
 80100a2:	4642      	mov	r2, r8
 80100a4:	464b      	mov	r3, r9
 80100a6:	f7f0 f8f1 	bl	800028c <__adddf3>
 80100aa:	4602      	mov	r2, r0
 80100ac:	460b      	mov	r3, r1
 80100ae:	4630      	mov	r0, r6
 80100b0:	4639      	mov	r1, r7
 80100b2:	f7f0 f8e9 	bl	8000288 <__aeabi_dsub>
 80100b6:	4652      	mov	r2, sl
 80100b8:	465b      	mov	r3, fp
 80100ba:	f7f0 f8e5 	bl	8000288 <__aeabi_dsub>
 80100be:	4602      	mov	r2, r0
 80100c0:	460b      	mov	r3, r1
 80100c2:	4620      	mov	r0, r4
 80100c4:	4629      	mov	r1, r5
 80100c6:	e7d9      	b.n	801007c <__ieee754_log+0x26c>
 80100c8:	4602      	mov	r2, r0
 80100ca:	460b      	mov	r3, r1
 80100cc:	4650      	mov	r0, sl
 80100ce:	4659      	mov	r1, fp
 80100d0:	f7f0 f8da 	bl	8000288 <__aeabi_dsub>
 80100d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100d8:	f7f0 fa8e 	bl	80005f8 <__aeabi_dmul>
 80100dc:	4606      	mov	r6, r0
 80100de:	460f      	mov	r7, r1
 80100e0:	2c00      	cmp	r4, #0
 80100e2:	f43f af25 	beq.w	800ff30 <__ieee754_log+0x120>
 80100e6:	a30a      	add	r3, pc, #40	@ (adr r3, 8010110 <__ieee754_log+0x300>)
 80100e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100f0:	f7f0 fa82 	bl	80005f8 <__aeabi_dmul>
 80100f4:	a308      	add	r3, pc, #32	@ (adr r3, 8010118 <__ieee754_log+0x308>)
 80100f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fa:	4604      	mov	r4, r0
 80100fc:	460d      	mov	r5, r1
 80100fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010102:	e729      	b.n	800ff58 <__ieee754_log+0x148>
 8010104:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8010160 <__ieee754_log+0x350>
 8010108:	e698      	b.n	800fe3c <__ieee754_log+0x2c>
 801010a:	bf00      	nop
 801010c:	f3af 8000 	nop.w
 8010110:	fee00000 	.word	0xfee00000
 8010114:	3fe62e42 	.word	0x3fe62e42
 8010118:	35793c76 	.word	0x35793c76
 801011c:	3dea39ef 	.word	0x3dea39ef
 8010120:	55555555 	.word	0x55555555
 8010124:	3fd55555 	.word	0x3fd55555
 8010128:	df3e5244 	.word	0xdf3e5244
 801012c:	3fc2f112 	.word	0x3fc2f112
 8010130:	96cb03de 	.word	0x96cb03de
 8010134:	3fc74664 	.word	0x3fc74664
 8010138:	94229359 	.word	0x94229359
 801013c:	3fd24924 	.word	0x3fd24924
 8010140:	55555593 	.word	0x55555593
 8010144:	3fe55555 	.word	0x3fe55555
 8010148:	d078c69f 	.word	0xd078c69f
 801014c:	3fc39a09 	.word	0x3fc39a09
 8010150:	1d8e78af 	.word	0x1d8e78af
 8010154:	3fcc71c5 	.word	0x3fcc71c5
 8010158:	9997fa04 	.word	0x9997fa04
 801015c:	3fd99999 	.word	0x3fd99999
	...
 8010168:	c3500000 	.word	0xc3500000
 801016c:	43500000 	.word	0x43500000
 8010170:	7fefffff 	.word	0x7fefffff
 8010174:	3ff00000 	.word	0x3ff00000
 8010178:	3fe00000 	.word	0x3fe00000

0801017c <_init>:
 801017c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801017e:	bf00      	nop
 8010180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010182:	bc08      	pop	{r3}
 8010184:	469e      	mov	lr, r3
 8010186:	4770      	bx	lr

08010188 <_fini>:
 8010188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801018a:	bf00      	nop
 801018c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801018e:	bc08      	pop	{r3}
 8010190:	469e      	mov	lr, r3
 8010192:	4770      	bx	lr
