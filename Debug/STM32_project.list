
STM32_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800e488  0800e488  0000f488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb80  0800eb80  000102d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb80  0800eb80  0000fb80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb88  0800eb88  000102d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb88  0800eb88  0000fb88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eb8c  0800eb8c  0000fb8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  0800eb90  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102d8  2**0
                  CONTENTS
 10 .bss          00002084  200002d8  200002d8  000102d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000235c  2000235c  000102d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019cb0  00000000  00000000  00010308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004377  00000000  00000000  00029fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  0002e330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010e5  00000000  00000000  0002f940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261cd  00000000  00000000  00030a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f0bb  00000000  00000000  00056bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cffc5  00000000  00000000  00075cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145c72  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006dc4  00000000  00000000  00145cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  0014ca7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e46c 	.word	0x0800e46c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	0800e46c 	.word	0x0800e46c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <dcRemoval>:

#include "filter.h"


DC_FILTER_T dcRemoval(float x, float prev_w, float alpha)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b08b      	sub	sp, #44	@ 0x2c
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000f82:	edc7 0a04 	vstr	s1, [r7, #16]
 8000f86:	ed87 1a03 	vstr	s2, [r7, #12]
  DC_FILTER_T filtered;
  filtered.w = x + alpha * prev_w;
 8000f8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f96:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9e:	edc7 7a06 	vstr	s15, [r7, #24]
  filtered.result = filtered.w - prev_w;
 8000fa2:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fae:	edc7 7a07 	vstr	s15, [r7, #28]

  return filtered;
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	f107 0218 	add.w	r2, r7, #24
 8000fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fbe:	e883 0003 	stmia.w	r3, {r0, r1}
 8000fc2:	6a3a      	ldr	r2, [r7, #32]
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc6:	ee07 2a10 	vmov	s14, r2
 8000fca:	ee07 3a90 	vmov	s15, r3
}
 8000fce:	eeb0 0a47 	vmov.f32	s0, s14
 8000fd2:	eef0 0a67 	vmov.f32	s1, s15
 8000fd6:	372c      	adds	r7, #44	@ 0x2c
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <lowPassButterworthFilter>:

//Low pass butterworth filter order=1 alpha1=0.1
void lowPassButterworthFilter(float x, BUTTERWORTH_FILTER_T * filterResult)
{
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fea:	6038      	str	r0, [r7, #0]
	filterResult->v[0] = filterResult->v[1];
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	601a      	str	r2, [r3, #0]

    //Fs = 100Hz and Fc = 10Hz
    filterResult->v[1] = (2.452372752527856026e-1 * x) + (0.50952544949442879485 * filterResult->v[0]);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff faa7 	bl	8000548 <__aeabi_f2d>
 8000ffa:	a319      	add	r3, pc, #100	@ (adr r3, 8001060 <lowPassButterworthFilter+0x80>)
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	f7ff fafa 	bl	80005f8 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4614      	mov	r4, r2
 800100a:	461d      	mov	r5, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa99 	bl	8000548 <__aeabi_f2d>
 8001016:	a314      	add	r3, pc, #80	@ (adr r3, 8001068 <lowPassButterworthFilter+0x88>)
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	f7ff faec 	bl	80005f8 <__aeabi_dmul>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4620      	mov	r0, r4
 8001026:	4629      	mov	r1, r5
 8001028:	f7ff f930 	bl	800028c <__adddf3>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fdd8 	bl	8000be8 <__aeabi_d2f>
 8001038:	4602      	mov	r2, r0
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	605a      	str	r2, [r3, #4]

    //Fs = 100Hz and Fc = 4Hz
    //filterResult->v[1] = (1.367287359973195227e-1 * x) + (0.72654252800536101020 * filterResult->v[0]); //Very precise butterworth filter

    filterResult->result = filterResult->v[0] + filterResult->v[1];
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	ed93 7a00 	vldr	s14, [r3]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	edd3 7a01 	vldr	s15, [r3, #4]
 800104a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bdb0      	pop	{r4, r5, r7, pc}
 800105c:	f3af 8000 	nop.w
 8001060:	5e7c4548 	.word	0x5e7c4548
 8001064:	3fcf63ef 	.word	0x3fcf63ef
 8001068:	50c1dd5c 	.word	0x50c1dd5c
 800106c:	3fe04e08 	.word	0x3fe04e08

08001070 <meanDiff>:

float meanDiff(float M, MEAN_DIFF_FILTER_T* filterValues)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	ed87 0a01 	vstr	s0, [r7, #4]
 800107a:	6038      	str	r0, [r7, #0]
  float avg = 0;
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]

  filterValues->sum -= filterValues->values[filterValues->index];
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
  filterValues->values[filterValues->index] = M;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	601a      	str	r2, [r3, #0]
  filterValues->sum += filterValues->values[filterValues->index];
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	edd3 7a00 	vldr	s15, [r3]
 80010c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

  filterValues->index++;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010d8:	3301      	adds	r3, #1
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  filterValues->index = filterValues->index % MEAN_FILTER_SIZE;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 80010e8:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <meanDiff+0xe0>)
 80010ea:	fba3 1302 	umull	r1, r3, r3, r2
 80010ee:	08d9      	lsrs	r1, r3, #3
 80010f0:	460b      	mov	r3, r1
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	1a5b      	subs	r3, r3, r1
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(filterValues->count < MEAN_FILTER_SIZE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001106:	2b0e      	cmp	r3, #14
 8001108:	d807      	bhi.n	800111a <meanDiff+0xaa>
    filterValues->count++;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001110:	3301      	adds	r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  avg = filterValues->sum / filterValues->count;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800112e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001132:	edc7 7a03 	vstr	s15, [r7, #12]
  return avg - M;
 8001136:	ed97 7a03 	vldr	s14, [r7, #12]
 800113a:	edd7 7a01 	vldr	s15, [r7, #4]
 800113e:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001142:	eeb0 0a67 	vmov.f32	s0, s15
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	88888889 	.word	0x88888889

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	b5b0      	push	{r4, r5, r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115a:	f001 fb11 	bl	8002780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115e:	f000 f87b 	bl	8001258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001162:	f000 f9a1 	bl	80014a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001166:	f000 f8e1 	bl	800132c <MX_I2C1_Init>
  MX_I2S3_Init();
 800116a:	f000 f90d 	bl	8001388 <MX_I2S3_Init>
  MX_SPI1_Init();
 800116e:	f000 f93b 	bl	80013e8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001172:	f000 f96f 	bl	8001454 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001176:	f009 fb2b 	bl	800a7d0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	//uint8_t message[] = "Hello PC! STM32 is sending data...\r\n";

	OLED_Init();                // Initialize the OLED display
 800117a:	f000 ff27 	bl	8001fcc <OLED_Init>
	OLED_Clear();               // Clear the OLED screen
 800117e:	f000 ff98 	bl	80020b2 <OLED_Clear>
	HAL_Delay(100);
 8001182:	2064      	movs	r0, #100	@ 0x64
 8001184:	f001 fb6e 	bl	8002864 <HAL_Delay>

    if (MAX30102_Init() != HAL_OK) {
 8001188:	f000 fafc 	bl	8001784 <MAX30102_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d005      	beq.n	800119e <main+0x4a>
        OLED_ShowString(0, 0, "MAX30102 OK");
 8001192:	4a2b      	ldr	r2, [pc, #172]	@ (8001240 <main+0xec>)
 8001194:	2100      	movs	r1, #0
 8001196:	2000      	movs	r0, #0
 8001198:	f001 f800 	bl	800219c <OLED_ShowString>
 800119c:	e004      	b.n	80011a8 <main+0x54>
    } else {
        OLED_ShowString(0, 0, "MAX30102 ERROR");
 800119e:	4a29      	ldr	r2, [pc, #164]	@ (8001244 <main+0xf0>)
 80011a0:	2100      	movs	r1, #0
 80011a2:	2000      	movs	r0, #0
 80011a4:	f000 fffa 	bl	800219c <OLED_ShowString>
    }

	long currentMillis = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
	long lastMillis = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]

	currentMillis = millis();
 80011b0:	f001 faa2 	bl	80026f8 <millis>
 80011b4:	4603      	mov	r3, r0
 80011b6:	60bb      	str	r3, [r7, #8]

		while(!pulseOximiterIntFlag) {}
			*/


		if( pulseOximiterIntFlag )
 80011b8:	4b23      	ldr	r3, [pc, #140]	@ (8001248 <main+0xf4>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d009      	beq.n	80011d6 <main+0x82>
		{
			if (MAX30102_DumpFifo() == HAL_OK) {
 80011c2:	f000 fb6f 	bl	80018a4 <MAX30102_DumpFifo>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d104      	bne.n	80011d6 <main+0x82>

				pulseOximiterIntFlag = 0;
 80011cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001248 <main+0xf4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]

				MAX30102_ProcessData();
 80011d2:	f000 fb79 	bl	80018c8 <MAX30102_ProcessData>
		}



		// Display the data over the built in USB every second
		currentMillis = millis();
 80011d6:	f001 fa8f 	bl	80026f8 <millis>
 80011da:	4603      	mov	r3, r0
 80011dc:	60bb      	str	r3, [r7, #8]
		if( currentMillis - lastMillis > 5000 )
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011e8:	4293      	cmp	r3, r2
 80011ea:	dde5      	ble.n	80011b8 <main+0x64>
		{
			//MAX30102_DumpFifo();
			//MAX30102_ProcessData();


			float bpm = MAX30102_getBPM();
 80011ec:	f000 feb6 	bl	8001f5c <MAX30102_getBPM>
 80011f0:	ed87 0a01 	vstr	s0, [r7, #4]
			float spo2 = MAX30102_getSPO2();
 80011f4:	f000 fec0 	bl	8001f78 <MAX30102_getSPO2>
 80011f8:	ed87 0a00 	vstr	s0, [r7]
			//sprintf(message, "HR: %.2f   SPO2: %.2f \n", bpm, spo2);
			//CDC_Transmit_FS((uint8_t *)message, strlen(message));

			HAL_GPIO_TogglePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin);		//LED blinking
 80011fc:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001200:	4812      	ldr	r0, [pc, #72]	@ (800124c <main+0xf8>)
 8001202:	f001 fe1a 	bl	8002e3a <HAL_GPIO_TogglePin>

			OLED_Clear();
 8001206:	f000 ff54 	bl	80020b2 <OLED_Clear>
			sprintf(message, "%.2f   %.2f", bpm, spo2);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff f99c 	bl	8000548 <__aeabi_f2d>
 8001210:	4604      	mov	r4, r0
 8001212:	460d      	mov	r5, r1
 8001214:	6838      	ldr	r0, [r7, #0]
 8001216:	f7ff f997 	bl	8000548 <__aeabi_f2d>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	e9cd 2300 	strd	r2, r3, [sp]
 8001222:	4622      	mov	r2, r4
 8001224:	462b      	mov	r3, r5
 8001226:	490a      	ldr	r1, [pc, #40]	@ (8001250 <main+0xfc>)
 8001228:	480a      	ldr	r0, [pc, #40]	@ (8001254 <main+0x100>)
 800122a:	f00a fced 	bl	800bc08 <siprintf>
			//sprintf(message, "%.2f", );
			OLED_ShowString(0, 0, message);
 800122e:	4a09      	ldr	r2, [pc, #36]	@ (8001254 <main+0x100>)
 8001230:	2100      	movs	r1, #0
 8001232:	2000      	movs	r0, #0
 8001234:	f000 ffb2 	bl	800219c <OLED_ShowString>
			//MAX30102_readTemperature();


			lastMillis = currentMillis;
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60fb      	str	r3, [r7, #12]
		if( pulseOximiterIntFlag )
 800123c:	e7bc      	b.n	80011b8 <main+0x64>
 800123e:	bf00      	nop
 8001240:	0800e488 	.word	0x0800e488
 8001244:	0800e494 	.word	0x0800e494
 8001248:	20000470 	.word	0x20000470
 800124c:	40020c00 	.word	0x40020c00
 8001250:	0800e4a4 	.word	0x0800e4a4
 8001254:	20000430 	.word	0x20000430

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b094      	sub	sp, #80	@ 0x50
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	2230      	movs	r2, #48	@ 0x30
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f00a fd31 	bl	800bcce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	4b28      	ldr	r3, [pc, #160]	@ (8001324 <SystemClock_Config+0xcc>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001284:	4a27      	ldr	r2, [pc, #156]	@ (8001324 <SystemClock_Config+0xcc>)
 8001286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800128a:	6413      	str	r3, [r2, #64]	@ 0x40
 800128c:	4b25      	ldr	r3, [pc, #148]	@ (8001324 <SystemClock_Config+0xcc>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	4b22      	ldr	r3, [pc, #136]	@ (8001328 <SystemClock_Config+0xd0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a21      	ldr	r2, [pc, #132]	@ (8001328 <SystemClock_Config+0xd0>)
 80012a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001328 <SystemClock_Config+0xd0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b4:	2301      	movs	r3, #1
 80012b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012be:	2302      	movs	r3, #2
 80012c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012c8:	2308      	movs	r3, #8
 80012ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d2:	2302      	movs	r3, #2
 80012d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012d6:	2307      	movs	r3, #7
 80012d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012da:	f107 0320 	add.w	r3, r7, #32
 80012de:	4618      	mov	r0, r3
 80012e0:	f004 fe74 	bl	8005fcc <HAL_RCC_OscConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012ea:	f000 f9f5 	bl	80016d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ee:	230f      	movs	r3, #15
 80012f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f2:	2302      	movs	r3, #2
 80012f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001300:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001304:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	2105      	movs	r1, #5
 800130c:	4618      	mov	r0, r3
 800130e:	f005 f8d5 	bl	80064bc <HAL_RCC_ClockConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001318:	f000 f9de 	bl	80016d8 <Error_Handler>
  }
}
 800131c:	bf00      	nop
 800131e:	3750      	adds	r7, #80	@ 0x50
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	40007000 	.word	0x40007000

0800132c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <MX_I2C1_Init+0x50>)
 8001332:	4a13      	ldr	r2, [pc, #76]	@ (8001380 <MX_I2C1_Init+0x54>)
 8001334:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001336:	4b11      	ldr	r3, [pc, #68]	@ (800137c <MX_I2C1_Init+0x50>)
 8001338:	4a12      	ldr	r2, [pc, #72]	@ (8001384 <MX_I2C1_Init+0x58>)
 800133a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800133c:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001348:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <MX_I2C1_Init+0x50>)
 800134a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800134e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001350:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <MX_I2C1_Init+0x50>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001356:	4b09      	ldr	r3, [pc, #36]	@ (800137c <MX_I2C1_Init+0x50>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800135c:	4b07      	ldr	r3, [pc, #28]	@ (800137c <MX_I2C1_Init+0x50>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <MX_I2C1_Init+0x50>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	@ (800137c <MX_I2C1_Init+0x50>)
 800136a:	f001 fd99 	bl	8002ea0 <HAL_I2C_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001374:	f000 f9b0 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200002f4 	.word	0x200002f4
 8001380:	40005400 	.word	0x40005400
 8001384:	000186a0 	.word	0x000186a0

08001388 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800138c:	4b13      	ldr	r3, [pc, #76]	@ (80013dc <MX_I2S3_Init+0x54>)
 800138e:	4a14      	ldr	r2, [pc, #80]	@ (80013e0 <MX_I2S3_Init+0x58>)
 8001390:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001392:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <MX_I2S3_Init+0x54>)
 8001394:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001398:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800139a:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <MX_I2S3_Init+0x54>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80013a0:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <MX_I2S3_Init+0x54>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80013a6:	4b0d      	ldr	r3, [pc, #52]	@ (80013dc <MX_I2S3_Init+0x54>)
 80013a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013ac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <MX_I2S3_Init+0x54>)
 80013b0:	4a0c      	ldr	r2, [pc, #48]	@ (80013e4 <MX_I2S3_Init+0x5c>)
 80013b2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80013b4:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <MX_I2S3_Init+0x54>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80013ba:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <MX_I2S3_Init+0x54>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <MX_I2S3_Init+0x54>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_I2S3_Init+0x54>)
 80013c8:	f002 ff0e 	bl	80041e8 <HAL_I2S_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80013d2:	f000 f981 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000348 	.word	0x20000348
 80013e0:	40003c00 	.word	0x40003c00
 80013e4:	00017700 	.word	0x00017700

080013e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013ec:	4b17      	ldr	r3, [pc, #92]	@ (800144c <MX_SPI1_Init+0x64>)
 80013ee:	4a18      	ldr	r2, [pc, #96]	@ (8001450 <MX_SPI1_Init+0x68>)
 80013f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013f2:	4b16      	ldr	r3, [pc, #88]	@ (800144c <MX_SPI1_Init+0x64>)
 80013f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013fa:	4b14      	ldr	r3, [pc, #80]	@ (800144c <MX_SPI1_Init+0x64>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <MX_SPI1_Init+0x64>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001406:	4b11      	ldr	r3, [pc, #68]	@ (800144c <MX_SPI1_Init+0x64>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800140c:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <MX_SPI1_Init+0x64>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001412:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <MX_SPI1_Init+0x64>)
 8001414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001418:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800141a:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <MX_SPI1_Init+0x64>)
 800141c:	2200      	movs	r2, #0
 800141e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001420:	4b0a      	ldr	r3, [pc, #40]	@ (800144c <MX_SPI1_Init+0x64>)
 8001422:	2200      	movs	r2, #0
 8001424:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <MX_SPI1_Init+0x64>)
 8001428:	2200      	movs	r2, #0
 800142a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800142c:	4b07      	ldr	r3, [pc, #28]	@ (800144c <MX_SPI1_Init+0x64>)
 800142e:	2200      	movs	r2, #0
 8001430:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <MX_SPI1_Init+0x64>)
 8001434:	220a      	movs	r2, #10
 8001436:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001438:	4804      	ldr	r0, [pc, #16]	@ (800144c <MX_SPI1_Init+0x64>)
 800143a:	f005 fba1 	bl	8006b80 <HAL_SPI_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001444:	f000 f948 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000390 	.word	0x20000390
 8001450:	40013000 	.word	0x40013000

08001454 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <MX_USART2_UART_Init+0x4c>)
 800145a:	4a12      	ldr	r2, [pc, #72]	@ (80014a4 <MX_USART2_UART_Init+0x50>)
 800145c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <MX_USART2_UART_Init+0x4c>)
 8001460:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001464:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001466:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <MX_USART2_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800146c:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <MX_USART2_UART_Init+0x4c>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001472:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <MX_USART2_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001478:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <MX_USART2_UART_Init+0x4c>)
 800147a:	220c      	movs	r2, #12
 800147c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147e:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <MX_USART2_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001484:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <MX_USART2_UART_Init+0x4c>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800148a:	4805      	ldr	r0, [pc, #20]	@ (80014a0 <MX_USART2_UART_Init+0x4c>)
 800148c:	f005 fc01 	bl	8006c92 <HAL_UART_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001496:	f000 f91f 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200003e8 	.word	0x200003e8
 80014a4:	40004400 	.word	0x40004400

080014a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	@ 0x30
 80014ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
 80014c2:	4b76      	ldr	r3, [pc, #472]	@ (800169c <MX_GPIO_Init+0x1f4>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	4a75      	ldr	r2, [pc, #468]	@ (800169c <MX_GPIO_Init+0x1f4>)
 80014c8:	f043 0310 	orr.w	r3, r3, #16
 80014cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ce:	4b73      	ldr	r3, [pc, #460]	@ (800169c <MX_GPIO_Init+0x1f4>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	61bb      	str	r3, [r7, #24]
 80014d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	4b6f      	ldr	r3, [pc, #444]	@ (800169c <MX_GPIO_Init+0x1f4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	4a6e      	ldr	r2, [pc, #440]	@ (800169c <MX_GPIO_Init+0x1f4>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ea:	4b6c      	ldr	r3, [pc, #432]	@ (800169c <MX_GPIO_Init+0x1f4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b68      	ldr	r3, [pc, #416]	@ (800169c <MX_GPIO_Init+0x1f4>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	4a67      	ldr	r2, [pc, #412]	@ (800169c <MX_GPIO_Init+0x1f4>)
 8001500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001504:	6313      	str	r3, [r2, #48]	@ 0x30
 8001506:	4b65      	ldr	r3, [pc, #404]	@ (800169c <MX_GPIO_Init+0x1f4>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b61      	ldr	r3, [pc, #388]	@ (800169c <MX_GPIO_Init+0x1f4>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a60      	ldr	r2, [pc, #384]	@ (800169c <MX_GPIO_Init+0x1f4>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b5e      	ldr	r3, [pc, #376]	@ (800169c <MX_GPIO_Init+0x1f4>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b5a      	ldr	r3, [pc, #360]	@ (800169c <MX_GPIO_Init+0x1f4>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	4a59      	ldr	r2, [pc, #356]	@ (800169c <MX_GPIO_Init+0x1f4>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6313      	str	r3, [r2, #48]	@ 0x30
 800153e:	4b57      	ldr	r3, [pc, #348]	@ (800169c <MX_GPIO_Init+0x1f4>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b53      	ldr	r3, [pc, #332]	@ (800169c <MX_GPIO_Init+0x1f4>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	4a52      	ldr	r2, [pc, #328]	@ (800169c <MX_GPIO_Init+0x1f4>)
 8001554:	f043 0308 	orr.w	r3, r3, #8
 8001558:	6313      	str	r3, [r2, #48]	@ 0x30
 800155a:	4b50      	ldr	r3, [pc, #320]	@ (800169c <MX_GPIO_Init+0x1f4>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2108      	movs	r1, #8
 800156a:	484d      	ldr	r0, [pc, #308]	@ (80016a0 <MX_GPIO_Init+0x1f8>)
 800156c:	f001 fc4c 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001570:	2201      	movs	r2, #1
 8001572:	2101      	movs	r1, #1
 8001574:	484b      	ldr	r0, [pc, #300]	@ (80016a4 <MX_GPIO_Init+0x1fc>)
 8001576:	f001 fc47 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800157a:	2200      	movs	r2, #0
 800157c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001580:	4849      	ldr	r0, [pc, #292]	@ (80016a8 <MX_GPIO_Init+0x200>)
 8001582:	f001 fc41 	bl	8002e08 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001586:	2308      	movs	r3, #8
 8001588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158a:	2301      	movs	r3, #1
 800158c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4619      	mov	r1, r3
 800159c:	4840      	ldr	r0, [pc, #256]	@ (80016a0 <MX_GPIO_Init+0x1f8>)
 800159e:	f001 fa97 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80015a2:	2301      	movs	r3, #1
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	4619      	mov	r1, r3
 80015b8:	483a      	ldr	r0, [pc, #232]	@ (80016a4 <MX_GPIO_Init+0x1fc>)
 80015ba:	f001 fa89 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80015be:	2308      	movs	r3, #8
 80015c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015ce:	2305      	movs	r3, #5
 80015d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	4619      	mov	r1, r3
 80015d8:	4832      	ldr	r0, [pc, #200]	@ (80016a4 <MX_GPIO_Init+0x1fc>)
 80015da:	f001 fa79 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pulse_Oximeter_Int_Pin */
  GPIO_InitStruct.Pin = Pulse_Oximeter_Int_Pin;
 80015de:	2301      	movs	r3, #1
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Pulse_Oximeter_Int_GPIO_Port, &GPIO_InitStruct);
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	4619      	mov	r1, r3
 80015f2:	482e      	ldr	r0, [pc, #184]	@ (80016ac <MX_GPIO_Init+0x204>)
 80015f4:	f001 fa6c 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80015f8:	2304      	movs	r3, #4
 80015fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	4619      	mov	r1, r3
 800160a:	4828      	ldr	r0, [pc, #160]	@ (80016ac <MX_GPIO_Init+0x204>)
 800160c:	f001 fa60 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001610:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001622:	2305      	movs	r3, #5
 8001624:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	4619      	mov	r1, r3
 800162c:	481f      	ldr	r0, [pc, #124]	@ (80016ac <MX_GPIO_Init+0x204>)
 800162e:	f001 fa4f 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001632:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001636:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	4817      	ldr	r0, [pc, #92]	@ (80016a8 <MX_GPIO_Init+0x200>)
 800164c:	f001 fa40 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001650:	2320      	movs	r3, #32
 8001652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	4619      	mov	r1, r3
 8001662:	4811      	ldr	r0, [pc, #68]	@ (80016a8 <MX_GPIO_Init+0x200>)
 8001664:	f001 fa34 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001668:	2302      	movs	r3, #2
 800166a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800166c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	4619      	mov	r1, r3
 800167c:	4808      	ldr	r0, [pc, #32]	@ (80016a0 <MX_GPIO_Init+0x1f8>)
 800167e:	f001 fa27 	bl	8002ad0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	2006      	movs	r0, #6
 8001688:	f001 f9eb 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800168c:	2006      	movs	r0, #6
 800168e:	f001 fa04 	bl	8002a9a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001692:	bf00      	nop
 8001694:	3730      	adds	r7, #48	@ 0x30
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40020800 	.word	0x40020800
 80016a8:	40020c00 	.word	0x40020c00
 80016ac:	40020400 	.word	0x40020400

080016b0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Pulse_Oximeter_Int_Pin)
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d102      	bne.n	80016c6 <HAL_GPIO_EXTI_Callback+0x16>
	{
		pulseOximiterIntFlag = 1;
 80016c0:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <HAL_GPIO_EXTI_Callback+0x24>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
	}
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000470 	.word	0x20000470

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <Error_Handler+0x8>

080016e4 <MAX30102_WriteRegister>:
uint8_t max30102_sensor_data[6 * MAX30102_SAMPLES_PER_BURST] = {0};


/* USER CODE BEGIN 0 */
// I2C write to register
HAL_StatusTypeDef MAX30102_WriteRegister(uint8_t reg, uint8_t value) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af04      	add	r7, sp, #16
 80016ea:	4603      	mov	r3, r0
 80016ec:	460a      	mov	r2, r1
 80016ee:	71fb      	strb	r3, [r7, #7]
 80016f0:	4613      	mov	r3, r2
 80016f2:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(&hi2c1, (MAX30102_ADDRESS << 1), reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 100);
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	2364      	movs	r3, #100	@ 0x64
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	2301      	movs	r3, #1
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	1dbb      	adds	r3, r7, #6
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	2301      	movs	r3, #1
 8001706:	21ae      	movs	r1, #174	@ 0xae
 8001708:	4803      	ldr	r0, [pc, #12]	@ (8001718 <MAX30102_WriteRegister+0x34>)
 800170a:	f001 fe0b 	bl	8003324 <HAL_I2C_Mem_Write>
 800170e:	4603      	mov	r3, r0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200002f4 	.word	0x200002f4

0800171c <MAX30102_ReadRegister>:

// I2C read from register
HAL_StatusTypeDef MAX30102_ReadRegister(uint8_t reg, uint8_t *value) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af04      	add	r7, sp, #16
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Read(&hi2c1, (MAX30102_ADDRESS << 1), reg, I2C_MEMADD_SIZE_8BIT, value, 1, 100);
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	b29a      	uxth	r2, r3
 800172c:	2364      	movs	r3, #100	@ 0x64
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	2301      	movs	r3, #1
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2301      	movs	r3, #1
 800173a:	21ae      	movs	r1, #174	@ 0xae
 800173c:	4803      	ldr	r0, [pc, #12]	@ (800174c <MAX30102_ReadRegister+0x30>)
 800173e:	f001 feeb 	bl	8003518 <HAL_I2C_Mem_Read>
 8001742:	4603      	mov	r3, r0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200002f4 	.word	0x200002f4

08001750 <MAX30102_ReadFIFO>:

// Read FIFO data
uint8_t MAX30102_ReadFIFO(uint8_t *buffer, uint8_t length) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af04      	add	r7, sp, #16
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Read(&hi2c1, (MAX30102_ADDRESS << 1), REG_FIFO_DATA, I2C_MEMADD_SIZE_8BIT, buffer, length, 100);
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	b29b      	uxth	r3, r3
 8001760:	2264      	movs	r2, #100	@ 0x64
 8001762:	9202      	str	r2, [sp, #8]
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2301      	movs	r3, #1
 800176c:	2207      	movs	r2, #7
 800176e:	21ae      	movs	r1, #174	@ 0xae
 8001770:	4803      	ldr	r0, [pc, #12]	@ (8001780 <MAX30102_ReadFIFO+0x30>)
 8001772:	f001 fed1 	bl	8003518 <HAL_I2C_Mem_Read>
 8001776:	4603      	mov	r3, r0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200002f4 	.word	0x200002f4

08001784 <MAX30102_Init>:

// MAX30102 initialization
uint8_t MAX30102_Init(void) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
    uint8_t part_id = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	71bb      	strb	r3, [r7, #6]

    // Read MAX30102 ID to verify device presence
    if (MAX30102_ReadRegister(REG_PART_ID, &part_id) != HAL_OK || part_id != 0x15) {
 800178e:	1dbb      	adds	r3, r7, #6
 8001790:	4619      	mov	r1, r3
 8001792:	20ff      	movs	r0, #255	@ 0xff
 8001794:	f7ff ffc2 	bl	800171c <MAX30102_ReadRegister>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <MAX30102_Init+0x20>
 800179e:	79bb      	ldrb	r3, [r7, #6]
 80017a0:	2b15      	cmp	r3, #21
 80017a2:	d001      	beq.n	80017a8 <MAX30102_Init+0x24>
        return 0;  // Device not found
 80017a4:	2300      	movs	r3, #0
 80017a6:	e02f      	b.n	8001808 <MAX30102_Init+0x84>
    }

    // Reset MAX30102
    MAX30102_WriteRegister(REG_MODE_CONFIG, (1 << 6));  // Reset MAX30102  (bit 6)
 80017a8:	2140      	movs	r1, #64	@ 0x40
 80017aa:	2009      	movs	r0, #9
 80017ac:	f7ff ff9a 	bl	80016e4 <MAX30102_WriteRegister>
    HAL_Delay(10);
 80017b0:	200a      	movs	r0, #10
 80017b2:	f001 f857 	bl	8002864 <HAL_Delay>

    // Configure SPO2 mode
    MAX30102_WriteRegister(REG_MODE_CONFIG, 0b011 << BIT_MODE);  // Use heart rate mode only (or 0x07 to enable SPO2)
 80017b6:	2103      	movs	r1, #3
 80017b8:	2009      	movs	r0, #9
 80017ba:	f7ff ff93 	bl	80016e4 <MAX30102_WriteRegister>
    uint8_t spo2_bits = (0b01 << BIT_SPO2_ADC_RGE) |  (0b000 << BIT_SPO2_SR) | (0b01 << BIT_LED_PW); //pw of 11 browns out supply
 80017be:	2321      	movs	r3, #33	@ 0x21
 80017c0:	71fb      	strb	r3, [r7, #7]
    MAX30102_WriteRegister(REG_SPO2_CONFIG, spo2_bits);  // Set ADC range and sampling rate
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	4619      	mov	r1, r3
 80017c6:	200a      	movs	r0, #10
 80017c8:	f7ff ff8c 	bl	80016e4 <MAX30102_WriteRegister>

    // Set LED brightness (0x24 represents medium brightness, adjustable)
    redLEDCurrent = 30;
 80017cc:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <MAX30102_Init+0x8c>)
 80017ce:	221e      	movs	r2, #30
 80017d0:	701a      	strb	r2, [r3, #0]
    MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 80017d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <MAX30102_Init+0x8c>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017de:	eeb0 0a67 	vmov.f32	s0, s15
 80017e2:	2001      	movs	r0, #1
 80017e4:	f000 f824 	bl	8001830 <MAX30102_setLedCurrent>
    MAX30102_setLedCurrent(IR_LED, 10);
 80017e8:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80017ec:	2002      	movs	r0, #2
 80017ee:	f000 f81f 	bl	8001830 <MAX30102_setLedCurrent>
    //MAX30102_WriteRegister(REG_LED1_PA, 0x24);  // LED1 (Red)
    //MAX30102_WriteRegister(REG_LED2_PA, 0x24);  // LED2 (Infrared)

    // interrupts
    MAX30102_WriteRegister(REG_FIFO_CONFIG, ((32 - MAX30102_SAMPLES_PER_BURST) << BIT_FIFO_A_FULL_VAL)); // max value is 15 min is 0
 80017f2:	2100      	movs	r1, #0
 80017f4:	2008      	movs	r0, #8
 80017f6:	f7ff ff75 	bl	80016e4 <MAX30102_WriteRegister>
    MAX30102_WriteRegister(REG_INT1_EN, 1 << BIT_EN_A_FULL_INT);
 80017fa:	2180      	movs	r1, #128	@ 0x80
 80017fc:	2002      	movs	r0, #2
 80017fe:	f7ff ff71 	bl	80016e4 <MAX30102_WriteRegister>

    MAX30102_ClearInterrupt();
 8001802:	f000 f807 	bl	8001814 <MAX30102_ClearInterrupt>

    return 1;  // Initialization successful
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000548 	.word	0x20000548

08001814 <MAX30102_ClearInterrupt>:

void MAX30102_ClearInterrupt(void) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
	uint8_t reset = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	71fb      	strb	r3, [r7, #7]
	MAX30102_ReadRegister(REG_STATUS, &reset); // clears initial interrupt
 800181e:	1dfb      	adds	r3, r7, #7
 8001820:	4619      	mov	r1, r3
 8001822:	2000      	movs	r0, #0
 8001824:	f7ff ff7a 	bl	800171c <MAX30102_ReadRegister>
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <MAX30102_setLedCurrent>:
	return 1;
}


uint8_t MAX30102_setLedCurrent(uint8_t led, float currentLevel)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	ed87 0a00 	vstr	s0, [r7]
 800183c:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	73bb      	strb	r3, [r7, #14]
	uint8_t ledRegister = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]

	switch(led){
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d002      	beq.n	8001852 <MAX30102_setLedCurrent+0x22>
 800184c:	2b02      	cmp	r3, #2
 800184e:	d003      	beq.n	8001858 <MAX30102_setLedCurrent+0x28>
 8001850:	e005      	b.n	800185e <MAX30102_setLedCurrent+0x2e>
	case RED_LED: 	ledRegister = REG_LED1_PA; break;
 8001852:	230c      	movs	r3, #12
 8001854:	73fb      	strb	r3, [r7, #15]
 8001856:	e002      	b.n	800185e <MAX30102_setLedCurrent+0x2e>
	case IR_LED:	ledRegister = REG_LED2_PA; break;
 8001858:	230d      	movs	r3, #13
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	bf00      	nop
	}

	// slope derived from MAX30102 DataSheet
	value = (uint8_t)(5.0 * currentLevel);
 800185e:	6838      	ldr	r0, [r7, #0]
 8001860:	f7fe fe72 	bl	8000548 <__aeabi_f2d>
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <MAX30102_setLedCurrent+0x70>)
 800186a:	f7fe fec5 	bl	80005f8 <__aeabi_dmul>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	f7ff f997 	bl	8000ba8 <__aeabi_d2uiz>
 800187a:	4603      	mov	r3, r0
 800187c:	73bb      	strb	r3, [r7, #14]

	if( MAX30102_WriteRegister(ledRegister, value) != HAL_OK){
 800187e:	7bba      	ldrb	r2, [r7, #14]
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff2d 	bl	80016e4 <MAX30102_WriteRegister>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MAX30102_setLedCurrent+0x64>
		return 0;
 8001890:	2300      	movs	r3, #0
 8001892:	e000      	b.n	8001896 <MAX30102_setLedCurrent+0x66>
	}
	return 1;
 8001894:	2301      	movs	r3, #1
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40140000 	.word	0x40140000

080018a4 <MAX30102_DumpFifo>:

uint8_t MAX30102_DumpFifo() {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
	uint8_t retval = MAX30102_ReadFIFO(max30102_sensor_data, 6 * MAX30102_SAMPLES_PER_BURST);
 80018aa:	21c0      	movs	r1, #192	@ 0xc0
 80018ac:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <MAX30102_DumpFifo+0x20>)
 80018ae:	f7ff ff4f 	bl	8001750 <MAX30102_ReadFIFO>
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
	MAX30102_ClearInterrupt();
 80018b6:	f7ff ffad 	bl	8001814 <MAX30102_ClearInterrupt>
	return retval;
 80018ba:	79fb      	ldrb	r3, [r7, #7]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000554 	.word	0x20000554

080018c8 <MAX30102_ProcessData>:

void MAX30102_ProcessData() {
 80018c8:	b5b0      	push	{r4, r5, r7, lr}
 80018ca:	b08e      	sub	sp, #56	@ 0x38
 80018cc:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < MAX30102_SAMPLES_PER_BURST; i++) {
 80018ce:	2300      	movs	r3, #0
 80018d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80018d2:	e048      	b.n	8001966 <MAX30102_ProcessData+0x9e>
		// heart rate mode only needs red, so only save red data initially long term
		FIFO_LED_DATA rawData = {0};
 80018d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
		uint8_t n = i*6;
 80018de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	0052      	lsls	r2, r2, #1
 80018e6:	4413      	add	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		rawData.redLedRaw = ((max30102_sensor_data[n+0] << 16)) | (max30102_sensor_data[n+1] << 8) | max30102_sensor_data[n+2];
 80018ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80018f2:	4a21      	ldr	r2, [pc, #132]	@ (8001978 <MAX30102_ProcessData+0xb0>)
 80018f4:	5cd3      	ldrb	r3, [r2, r3]
 80018f6:	041a      	lsls	r2, r3, #16
 80018f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80018fc:	3301      	adds	r3, #1
 80018fe:	491e      	ldr	r1, [pc, #120]	@ (8001978 <MAX30102_ProcessData+0xb0>)
 8001900:	5ccb      	ldrb	r3, [r1, r3]
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	4313      	orrs	r3, r2
 8001906:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800190a:	3202      	adds	r2, #2
 800190c:	491a      	ldr	r1, [pc, #104]	@ (8001978 <MAX30102_ProcessData+0xb0>)
 800190e:	5c8a      	ldrb	r2, [r1, r2]
 8001910:	4313      	orrs	r3, r2
 8001912:	62bb      	str	r3, [r7, #40]	@ 0x28
		rawData.irLedRaw = 	((max30102_sensor_data[n+3] << 16)) | (max30102_sensor_data[n+4] << 8) | max30102_sensor_data[n+5];
 8001914:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001918:	3303      	adds	r3, #3
 800191a:	4a17      	ldr	r2, [pc, #92]	@ (8001978 <MAX30102_ProcessData+0xb0>)
 800191c:	5cd3      	ldrb	r3, [r2, r3]
 800191e:	041a      	lsls	r2, r3, #16
 8001920:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001924:	3304      	adds	r3, #4
 8001926:	4914      	ldr	r1, [pc, #80]	@ (8001978 <MAX30102_ProcessData+0xb0>)
 8001928:	5ccb      	ldrb	r3, [r1, r3]
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	4313      	orrs	r3, r2
 800192e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001932:	3205      	adds	r2, #5
 8001934:	4910      	ldr	r1, [pc, #64]	@ (8001978 <MAX30102_ProcessData+0xb0>)
 8001936:	5c8a      	ldrb	r2, [r1, r2]
 8001938:	4313      	orrs	r3, r2
 800193a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		pulseOximeter = pulseOximeter_update(rawData);
 800193c:	4c0f      	ldr	r4, [pc, #60]	@ (800197c <MAX30102_ProcessData+0xb4>)
 800193e:	4638      	mov	r0, r7
 8001940:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001944:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001948:	f000 f99c 	bl	8001c84 <pulseOximeter_update>
 800194c:	4625      	mov	r5, r4
 800194e:	463c      	mov	r4, r7
 8001950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001958:	e894 0003 	ldmia.w	r4, {r0, r1}
 800195c:	e885 0003 	stmia.w	r5, {r0, r1}
	for (int i = 0 ; i < MAX30102_SAMPLES_PER_BURST; i++) {
 8001960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001962:	3301      	adds	r3, #1
 8001964:	637b      	str	r3, [r7, #52]	@ 0x34
 8001966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001968:	2b1f      	cmp	r3, #31
 800196a:	ddb3      	ble.n	80018d4 <MAX30102_ProcessData+0xc>

	}
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3738      	adds	r7, #56	@ 0x38
 8001972:	46bd      	mov	sp, r7
 8001974:	bdb0      	pop	{r4, r5, r7, pc}
 8001976:	bf00      	nop
 8001978:	20000554 	.word	0x20000554
 800197c:	20000474 	.word	0x20000474

08001980 <detectPulse>:
	currentTemperature = temperature;
}


bool detectPulse(float sensor_value)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	ed87 0a01 	vstr	s0, [r7, #4]
  static float prev_sensor_value = 0;
  static uint8_t values_went_down = 0;
  static uint32_t currentBeat = 0;
  static uint32_t lastBeat = 0;

  if(sensor_value > PULSE_MAX_THRESHOLD)
 800198a:	edd7 7a01 	vldr	s15, [r7, #4]
 800198e:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8001b5c <detectPulse+0x1dc>
 8001992:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199a:	dd14      	ble.n	80019c6 <detectPulse+0x46>
  {
    currentPulseDetectorState = PULSE_IDLE;
 800199c:	4b70      	ldr	r3, [pc, #448]	@ (8001b60 <detectPulse+0x1e0>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
    prev_sensor_value = 0;
 80019a2:	4b70      	ldr	r3, [pc, #448]	@ (8001b64 <detectPulse+0x1e4>)
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
    lastBeat = 0;
 80019aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001b68 <detectPulse+0x1e8>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
    currentBeat = 0;
 80019b0:	4b6e      	ldr	r3, [pc, #440]	@ (8001b6c <detectPulse+0x1ec>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
    values_went_down = 0;
 80019b6:	4b6e      	ldr	r3, [pc, #440]	@ (8001b70 <detectPulse+0x1f0>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
    lastBeatThreshold = 0;
 80019bc:	4b6d      	ldr	r3, [pc, #436]	@ (8001b74 <detectPulse+0x1f4>)
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
    return false;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e0c5      	b.n	8001b52 <detectPulse+0x1d2>
  }

  switch(currentPulseDetectorState)
 80019c6:	4b66      	ldr	r3, [pc, #408]	@ (8001b60 <detectPulse+0x1e0>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	f000 809f 	beq.w	8001b0e <detectPulse+0x18e>
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	f300 80ba 	bgt.w	8001b4a <detectPulse+0x1ca>
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <detectPulse+0x60>
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d011      	beq.n	8001a02 <detectPulse+0x82>
 80019de:	e0b4      	b.n	8001b4a <detectPulse+0x1ca>
  {
    case PULSE_IDLE:
      if(sensor_value >= PULSE_MIN_THRESHOLD) {
 80019e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80019e4:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8001b78 <detectPulse+0x1f8>
 80019e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f0:	da00      	bge.n	80019f4 <detectPulse+0x74>
        currentPulseDetectorState = PULSE_TRACE_UP;
        values_went_down = 0;
      }
      break;
 80019f2:	e0aa      	b.n	8001b4a <detectPulse+0x1ca>
        currentPulseDetectorState = PULSE_TRACE_UP;
 80019f4:	4b5a      	ldr	r3, [pc, #360]	@ (8001b60 <detectPulse+0x1e0>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
        values_went_down = 0;
 80019fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001b70 <detectPulse+0x1f0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
      break;
 8001a00:	e0a3      	b.n	8001b4a <detectPulse+0x1ca>

    case PULSE_TRACE_UP:
      if(sensor_value > prev_sensor_value)
 8001a02:	4b58      	ldr	r3, [pc, #352]	@ (8001b64 <detectPulse+0x1e4>)
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	dd0d      	ble.n	8001a32 <detectPulse+0xb2>
      {
        currentBeat = millis();
 8001a16:	f000 fe6f 	bl	80026f8 <millis>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4a53      	ldr	r2, [pc, #332]	@ (8001b6c <detectPulse+0x1ec>)
 8001a1e:	6013      	str	r3, [r2, #0]
        lastBeatThreshold = sensor_value;
 8001a20:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a28:	ee17 2a90 	vmov	r2, s15
 8001a2c:	4b51      	ldr	r3, [pc, #324]	@ (8001b74 <detectPulse+0x1f4>)
 8001a2e:	601a      	str	r2, [r3, #0]

        currentPulseDetectorState = PULSE_TRACE_DOWN;

        return true;
      }
      break;
 8001a30:	e08b      	b.n	8001b4a <detectPulse+0x1ca>
    	uint32_t beatDuration = currentBeat - lastBeat;
 8001a32:	4b4e      	ldr	r3, [pc, #312]	@ (8001b6c <detectPulse+0x1ec>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4b4c      	ldr	r3, [pc, #304]	@ (8001b68 <detectPulse+0x1e8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	60fb      	str	r3, [r7, #12]
        lastBeat = currentBeat;
 8001a3e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b6c <detectPulse+0x1ec>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a49      	ldr	r2, [pc, #292]	@ (8001b68 <detectPulse+0x1e8>)
 8001a44:	6013      	str	r3, [r2, #0]
        float rawBPM = 0;
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
        if(beatDuration > 0)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00a      	beq.n	8001a68 <detectPulse+0xe8>
          rawBPM = 60000.0 / (float)beatDuration;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	ee07 3a90 	vmov	s15, r3
 8001a58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a5c:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8001b7c <detectPulse+0x1fc>
 8001a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a64:	edc7 7a05 	vstr	s15, [r7, #20]
        valuesBPM[bpmIndex] = rawBPM;
 8001a68:	4b45      	ldr	r3, [pc, #276]	@ (8001b80 <detectPulse+0x200>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	4a45      	ldr	r2, [pc, #276]	@ (8001b84 <detectPulse+0x204>)
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	601a      	str	r2, [r3, #0]
        valuesBPMSum = 0;
 8001a76:	4b44      	ldr	r3, [pc, #272]	@ (8001b88 <detectPulse+0x208>)
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
        for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	e010      	b.n	8001aa6 <detectPulse+0x126>
          valuesBPMSum += valuesBPM[i];
 8001a84:	4a3f      	ldr	r2, [pc, #252]	@ (8001b84 <detectPulse+0x204>)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	ed93 7a00 	vldr	s14, [r3]
 8001a90:	4b3d      	ldr	r3, [pc, #244]	@ (8001b88 <detectPulse+0x208>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b88 <detectPulse+0x208>)
 8001a9c:	edc3 7a00 	vstr	s15, [r3]
        for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	2b09      	cmp	r3, #9
 8001aaa:	ddeb      	ble.n	8001a84 <detectPulse+0x104>
        bpmIndex++;
 8001aac:	4b34      	ldr	r3, [pc, #208]	@ (8001b80 <detectPulse+0x200>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	4b32      	ldr	r3, [pc, #200]	@ (8001b80 <detectPulse+0x200>)
 8001ab6:	701a      	strb	r2, [r3, #0]
        bpmIndex = bpmIndex % PULSE_BPM_SAMPLE_SIZE;
 8001ab8:	4b31      	ldr	r3, [pc, #196]	@ (8001b80 <detectPulse+0x200>)
 8001aba:	781a      	ldrb	r2, [r3, #0]
 8001abc:	4b33      	ldr	r3, [pc, #204]	@ (8001b8c <detectPulse+0x20c>)
 8001abe:	fba3 1302 	umull	r1, r3, r3, r2
 8001ac2:	08d9      	lsrs	r1, r3, #3
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b80 <detectPulse+0x200>)
 8001ad2:	701a      	strb	r2, [r3, #0]
        if(valuesBPMCount < PULSE_BPM_SAMPLE_SIZE)
 8001ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b90 <detectPulse+0x210>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b09      	cmp	r3, #9
 8001ada:	d805      	bhi.n	8001ae8 <detectPulse+0x168>
          valuesBPMCount++;
 8001adc:	4b2c      	ldr	r3, [pc, #176]	@ (8001b90 <detectPulse+0x210>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b90 <detectPulse+0x210>)
 8001ae6:	701a      	strb	r2, [r3, #0]
        currentBPM = valuesBPMSum / valuesBPMCount;
 8001ae8:	4b27      	ldr	r3, [pc, #156]	@ (8001b88 <detectPulse+0x208>)
 8001aea:	edd3 6a00 	vldr	s13, [r3]
 8001aee:	4b28      	ldr	r3, [pc, #160]	@ (8001b90 <detectPulse+0x210>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001afe:	4b25      	ldr	r3, [pc, #148]	@ (8001b94 <detectPulse+0x214>)
 8001b00:	edc3 7a00 	vstr	s15, [r3]
        currentPulseDetectorState = PULSE_TRACE_DOWN;
 8001b04:	4b16      	ldr	r3, [pc, #88]	@ (8001b60 <detectPulse+0x1e0>)
 8001b06:	2202      	movs	r2, #2
 8001b08:	701a      	strb	r2, [r3, #0]
        return true;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e021      	b.n	8001b52 <detectPulse+0x1d2>

    case PULSE_TRACE_DOWN:
      if(sensor_value < prev_sensor_value)
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <detectPulse+0x1e4>)
 8001b10:	edd3 7a00 	vldr	s15, [r3]
 8001b14:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b20:	d505      	bpl.n	8001b2e <detectPulse+0x1ae>
      {
        values_went_down++;
 8001b22:	4b13      	ldr	r3, [pc, #76]	@ (8001b70 <detectPulse+0x1f0>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	3301      	adds	r3, #1
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <detectPulse+0x1f0>)
 8001b2c:	701a      	strb	r2, [r3, #0]
      }


      if(sensor_value < PULSE_MIN_THRESHOLD)
 8001b2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b32:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001b78 <detectPulse+0x1f8>
 8001b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3e:	d400      	bmi.n	8001b42 <detectPulse+0x1c2>
      {
        currentPulseDetectorState = PULSE_IDLE;
      }
      break;
 8001b40:	e002      	b.n	8001b48 <detectPulse+0x1c8>
        currentPulseDetectorState = PULSE_IDLE;
 8001b42:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <detectPulse+0x1e0>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
      break;
 8001b48:	bf00      	nop
  }

  prev_sensor_value = sensor_value;
 8001b4a:	4a06      	ldr	r2, [pc, #24]	@ (8001b64 <detectPulse+0x1e4>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6013      	str	r3, [r2, #0]
  return false;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	44fa0000 	.word	0x44fa0000
 8001b60:	20000550 	.word	0x20000550
 8001b64:	20000614 	.word	0x20000614
 8001b68:	20000618 	.word	0x20000618
 8001b6c:	2000061c 	.word	0x2000061c
 8001b70:	20000620 	.word	0x20000620
 8001b74:	20000534 	.word	0x20000534
 8001b78:	42c80000 	.word	0x42c80000
 8001b7c:	476a6000 	.word	0x476a6000
 8001b80:	20000531 	.word	0x20000531
 8001b84:	20000504 	.word	0x20000504
 8001b88:	2000052c 	.word	0x2000052c
 8001b8c:	cccccccd 	.word	0xcccccccd
 8001b90:	20000530 	.word	0x20000530
 8001b94:	20000500 	.word	0x20000500

08001b98 <balanceIntesities>:

void balanceIntesities( float redLedDC, float IRLedDC )
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ba2:	edc7 0a00 	vstr	s1, [r7]
	uint32_t currentTime = millis();
 8001ba6:	f000 fda7 	bl	80026f8 <millis>
 8001baa:	60f8      	str	r0, [r7, #12]
  if( currentTime - lastREDLedCurrentCheck >= RED_LED_CURRENT_ADJUSTMENT_MS)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	ee07 3a90 	vmov	s15, r3
 8001bb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8001c74 <balanceIntesities+0xdc>)
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc0:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001c78 <balanceIntesities+0xe0>
 8001bc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bcc:	da00      	bge.n	8001bd0 <balanceIntesities+0x38>
      //MAX30102_setLedCurrent(IR_LED, IrLedCurrent);
    }

    lastREDLedCurrentCheck = millis();
  }
}
 8001bce:	e04d      	b.n	8001c6c <balanceIntesities+0xd4>
	if( IRLedDC - redLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent < 51)
 8001bd0:	ed97 7a00 	vldr	s14, [r7]
 8001bd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bdc:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001c7c <balanceIntesities+0xe4>
 8001be0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be8:	dd15      	ble.n	8001c16 <balanceIntesities+0x7e>
 8001bea:	4b25      	ldr	r3, [pc, #148]	@ (8001c80 <balanceIntesities+0xe8>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b32      	cmp	r3, #50	@ 0x32
 8001bf0:	d811      	bhi.n	8001c16 <balanceIntesities+0x7e>
      redLEDCurrent++;
 8001bf2:	4b23      	ldr	r3, [pc, #140]	@ (8001c80 <balanceIntesities+0xe8>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4b21      	ldr	r3, [pc, #132]	@ (8001c80 <balanceIntesities+0xe8>)
 8001bfc:	701a      	strb	r2, [r3, #0]
      MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8001bfe:	4b20      	ldr	r3, [pc, #128]	@ (8001c80 <balanceIntesities+0xe8>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	ee07 3a90 	vmov	s15, r3
 8001c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f7ff fe0e 	bl	8001830 <MAX30102_setLedCurrent>
 8001c14:	e021      	b.n	8001c5a <balanceIntesities+0xc2>
    else if(redLedDC - IRLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent > 0)
 8001c16:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c1a:	edd7 7a00 	vldr	s15, [r7]
 8001c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c22:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001c7c <balanceIntesities+0xe4>
 8001c26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2e:	dd14      	ble.n	8001c5a <balanceIntesities+0xc2>
 8001c30:	4b13      	ldr	r3, [pc, #76]	@ (8001c80 <balanceIntesities+0xe8>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d010      	beq.n	8001c5a <balanceIntesities+0xc2>
      redLEDCurrent--;
 8001c38:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <balanceIntesities+0xe8>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <balanceIntesities+0xe8>)
 8001c42:	701a      	strb	r2, [r3, #0]
      MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8001c44:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <balanceIntesities+0xe8>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	ee07 3a90 	vmov	s15, r3
 8001c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c50:	eeb0 0a67 	vmov.f32	s0, s15
 8001c54:	2001      	movs	r0, #1
 8001c56:	f7ff fdeb 	bl	8001830 <MAX30102_setLedCurrent>
    lastREDLedCurrentCheck = millis();
 8001c5a:	f000 fd4d 	bl	80026f8 <millis>
 8001c5e:	ee07 0a90 	vmov	s15, r0
 8001c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c66:	4b03      	ldr	r3, [pc, #12]	@ (8001c74 <balanceIntesities+0xdc>)
 8001c68:	edc3 7a00 	vstr	s15, [r3]
}
 8001c6c:	bf00      	nop
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	2000054c 	.word	0x2000054c
 8001c78:	43fa0000 	.word	0x43fa0000
 8001c7c:	477de800 	.word	0x477de800
 8001c80:	20000548 	.word	0x20000548

08001c84 <pulseOximeter_update>:

MAX30102 pulseOximeter_update(FIFO_LED_DATA m_fifoData)
	{
 8001c84:	b5b0      	push	{r4, r5, r7, lr}
 8001c86:	b090      	sub	sp, #64	@ 0x40
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	e883 0006 	stmia.w	r3, {r1, r2}
		MAX30102 result = {
 8001c92:	2300      	movs	r3, #0
 8001c94:	743b      	strb	r3, [r7, #16]
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
 8001cae:	4b9c      	ldr	r3, [pc, #624]	@ (8001f20 <pulseOximeter_update+0x29c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cc4:	4b97      	ldr	r3, [pc, #604]	@ (8001f24 <pulseOximeter_update+0x2a0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	637b      	str	r3, [r7, #52]	@ 0x34
		/*float dcFilteredIR*/ 0.0,
		/*float dcFilteredRed*/ 0.0,
		/*float temperature;*/ currentTemperature
	};

	dcFilterIR = dcRemoval( (float)m_fifoData.irLedRaw, dcFilterIR.w, ALPHA );
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	ee07 3a90 	vmov	s15, r3
 8001cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cd4:	4b94      	ldr	r3, [pc, #592]	@ (8001f28 <pulseOximeter_update+0x2a4>)
 8001cd6:	ed93 7a00 	vldr	s14, [r3]
 8001cda:	ed9f 1a94 	vldr	s2, [pc, #592]	@ 8001f2c <pulseOximeter_update+0x2a8>
 8001cde:	eef0 0a47 	vmov.f32	s1, s14
 8001ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce6:	f7ff f947 	bl	8000f78 <dcRemoval>
 8001cea:	eeb0 7a40 	vmov.f32	s14, s0
 8001cee:	eef0 7a60 	vmov.f32	s15, s1
 8001cf2:	4b8d      	ldr	r3, [pc, #564]	@ (8001f28 <pulseOximeter_update+0x2a4>)
 8001cf4:	ed83 7a00 	vstr	s14, [r3]
 8001cf8:	edc3 7a01 	vstr	s15, [r3, #4]
	dcFilterRed = dcRemoval( (float)m_fifoData.redLedRaw, dcFilterRed.w, ALPHA );
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d06:	4b8a      	ldr	r3, [pc, #552]	@ (8001f30 <pulseOximeter_update+0x2ac>)
 8001d08:	ed93 7a00 	vldr	s14, [r3]
 8001d0c:	ed9f 1a87 	vldr	s2, [pc, #540]	@ 8001f2c <pulseOximeter_update+0x2a8>
 8001d10:	eef0 0a47 	vmov.f32	s1, s14
 8001d14:	eeb0 0a67 	vmov.f32	s0, s15
 8001d18:	f7ff f92e 	bl	8000f78 <dcRemoval>
 8001d1c:	eeb0 7a40 	vmov.f32	s14, s0
 8001d20:	eef0 7a60 	vmov.f32	s15, s1
 8001d24:	4b82      	ldr	r3, [pc, #520]	@ (8001f30 <pulseOximeter_update+0x2ac>)
 8001d26:	ed83 7a00 	vstr	s14, [r3]
 8001d2a:	edc3 7a01 	vstr	s15, [r3, #4]

	float meanDiffResIR = meanDiff( dcFilterIR.result, &meanDiffIR);
 8001d2e:	4b7e      	ldr	r3, [pc, #504]	@ (8001f28 <pulseOximeter_update+0x2a4>)
 8001d30:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d34:	487f      	ldr	r0, [pc, #508]	@ (8001f34 <pulseOximeter_update+0x2b0>)
 8001d36:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3a:	f7ff f999 	bl	8001070 <meanDiff>
 8001d3e:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
	lowPassButterworthFilter( meanDiffResIR/*-dcFilterIR.result*/, &lpbFilterIR );
 8001d42:	487d      	ldr	r0, [pc, #500]	@ (8001f38 <pulseOximeter_update+0x2b4>)
 8001d44:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8001d48:	f7ff f94a 	bl	8000fe0 <lowPassButterworthFilter>

	irACValueSqSum += dcFilterIR.result * dcFilterIR.result;
 8001d4c:	4b76      	ldr	r3, [pc, #472]	@ (8001f28 <pulseOximeter_update+0x2a4>)
 8001d4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d52:	4b75      	ldr	r3, [pc, #468]	@ (8001f28 <pulseOximeter_update+0x2a4>)
 8001d54:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d5c:	4b77      	ldr	r3, [pc, #476]	@ (8001f3c <pulseOximeter_update+0x2b8>)
 8001d5e:	edd3 7a00 	vldr	s15, [r3]
 8001d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d66:	4b75      	ldr	r3, [pc, #468]	@ (8001f3c <pulseOximeter_update+0x2b8>)
 8001d68:	edc3 7a00 	vstr	s15, [r3]
	redACValueSqSum += dcFilterRed.result * dcFilterRed.result;
 8001d6c:	4b70      	ldr	r3, [pc, #448]	@ (8001f30 <pulseOximeter_update+0x2ac>)
 8001d6e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d72:	4b6f      	ldr	r3, [pc, #444]	@ (8001f30 <pulseOximeter_update+0x2ac>)
 8001d74:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d7c:	4b70      	ldr	r3, [pc, #448]	@ (8001f40 <pulseOximeter_update+0x2bc>)
 8001d7e:	edd3 7a00 	vldr	s15, [r3]
 8001d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d86:	4b6e      	ldr	r3, [pc, #440]	@ (8001f40 <pulseOximeter_update+0x2bc>)
 8001d88:	edc3 7a00 	vstr	s15, [r3]
	samplesRecorded++;
 8001d8c:	4b6d      	ldr	r3, [pc, #436]	@ (8001f44 <pulseOximeter_update+0x2c0>)
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	4b6b      	ldr	r3, [pc, #428]	@ (8001f44 <pulseOximeter_update+0x2c0>)
 8001d96:	801a      	strh	r2, [r3, #0]

	if( detectPulse( lpbFilterIR.result ) && samplesRecorded > 0 )
 8001d98:	4b67      	ldr	r3, [pc, #412]	@ (8001f38 <pulseOximeter_update+0x2b4>)
 8001d9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001da2:	f7ff fded 	bl	8001980 <detectPulse>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 8088 	beq.w	8001ebe <pulseOximeter_update+0x23a>
 8001dae:	4b65      	ldr	r3, [pc, #404]	@ (8001f44 <pulseOximeter_update+0x2c0>)
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 8083 	beq.w	8001ebe <pulseOximeter_update+0x23a>
	{
		result.pulseDetected=true;
 8001db8:	2301      	movs	r3, #1
 8001dba:	743b      	strb	r3, [r7, #16]
		pulsesDetected++;
 8001dbc:	4b62      	ldr	r3, [pc, #392]	@ (8001f48 <pulseOximeter_update+0x2c4>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b60      	ldr	r3, [pc, #384]	@ (8001f48 <pulseOximeter_update+0x2c4>)
 8001dc6:	801a      	strh	r2, [r3, #0]

		float ratioRMS = log( sqrt(redACValueSqSum/samplesRecorded) ) / log( sqrt(irACValueSqSum/samplesRecorded) );
 8001dc8:	4b5d      	ldr	r3, [pc, #372]	@ (8001f40 <pulseOximeter_update+0x2bc>)
 8001dca:	ed93 7a00 	vldr	s14, [r3]
 8001dce:	4b5d      	ldr	r3, [pc, #372]	@ (8001f44 <pulseOximeter_update+0x2c0>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	ee07 3a90 	vmov	s15, r3
 8001dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dda:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001dde:	ee16 0a90 	vmov	r0, s13
 8001de2:	f7fe fbb1 	bl	8000548 <__aeabi_f2d>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	ec43 2b10 	vmov	d0, r2, r3
 8001dee:	f00c f875 	bl	800dedc <sqrt>
 8001df2:	eeb0 7a40 	vmov.f32	s14, s0
 8001df6:	eef0 7a60 	vmov.f32	s15, s1
 8001dfa:	eeb0 0a47 	vmov.f32	s0, s14
 8001dfe:	eef0 0a67 	vmov.f32	s1, s15
 8001e02:	f00c f82d 	bl	800de60 <log>
 8001e06:	ec55 4b10 	vmov	r4, r5, d0
 8001e0a:	4b4c      	ldr	r3, [pc, #304]	@ (8001f3c <pulseOximeter_update+0x2b8>)
 8001e0c:	ed93 7a00 	vldr	s14, [r3]
 8001e10:	4b4c      	ldr	r3, [pc, #304]	@ (8001f44 <pulseOximeter_update+0x2c0>)
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	ee07 3a90 	vmov	s15, r3
 8001e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e1c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e20:	ee16 0a90 	vmov	r0, s13
 8001e24:	f7fe fb90 	bl	8000548 <__aeabi_f2d>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	ec43 2b10 	vmov	d0, r2, r3
 8001e30:	f00c f854 	bl	800dedc <sqrt>
 8001e34:	eeb0 7a40 	vmov.f32	s14, s0
 8001e38:	eef0 7a60 	vmov.f32	s15, s1
 8001e3c:	eeb0 0a47 	vmov.f32	s0, s14
 8001e40:	eef0 0a67 	vmov.f32	s1, s15
 8001e44:	f00c f80c 	bl	800de60 <log>
 8001e48:	ec53 2b10 	vmov	r2, r3, d0
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	4629      	mov	r1, r5
 8001e50:	f7fe fcfc 	bl	800084c <__aeabi_ddiv>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f7fe fec4 	bl	8000be8 <__aeabi_d2f>
 8001e60:	4603      	mov	r3, r0
 8001e62:	63bb      	str	r3, [r7, #56]	@ 0x38

		//This is my adjusted standard model, so it shows 0.89 as 94% saturation. It is probably far from correct, requires proper empircal calibration
		currentSpO2Value = 110.0 - 18.0 * ratioRMS;
 8001e64:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001e66:	f7fe fb6f 	bl	8000548 <__aeabi_f2d>
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	4b37      	ldr	r3, [pc, #220]	@ (8001f4c <pulseOximeter_update+0x2c8>)
 8001e70:	f7fe fbc2 	bl	80005f8 <__aeabi_dmul>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	f04f 0000 	mov.w	r0, #0
 8001e7c:	4934      	ldr	r1, [pc, #208]	@ (8001f50 <pulseOximeter_update+0x2cc>)
 8001e7e:	f7fe fa03 	bl	8000288 <__aeabi_dsub>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f7fe fead 	bl	8000be8 <__aeabi_d2f>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4a23      	ldr	r2, [pc, #140]	@ (8001f20 <pulseOximeter_update+0x29c>)
 8001e92:	6013      	str	r3, [r2, #0]
		result.SpO2 = currentSpO2Value;
 8001e94:	4b22      	ldr	r3, [pc, #136]	@ (8001f20 <pulseOximeter_update+0x29c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	627b      	str	r3, [r7, #36]	@ 0x24

		if( pulsesDetected % RESET_SPO2_EVERY_N_PULSES == 0)
 8001e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f48 <pulseOximeter_update+0x2c4>)
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10a      	bne.n	8001ebe <pulseOximeter_update+0x23a>
		{
			irACValueSqSum = 0;
 8001ea8:	4b24      	ldr	r3, [pc, #144]	@ (8001f3c <pulseOximeter_update+0x2b8>)
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
			redACValueSqSum = 0;
 8001eb0:	4b23      	ldr	r3, [pc, #140]	@ (8001f40 <pulseOximeter_update+0x2bc>)
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
			samplesRecorded = 0;
 8001eb8:	4b22      	ldr	r3, [pc, #136]	@ (8001f44 <pulseOximeter_update+0x2c0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	801a      	strh	r2, [r3, #0]
		}
	}

	balanceIntesities( dcFilterRed.w, dcFilterIR.w );
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8001f30 <pulseOximeter_update+0x2ac>)
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	4b18      	ldr	r3, [pc, #96]	@ (8001f28 <pulseOximeter_update+0x2a4>)
 8001ec6:	ed93 7a00 	vldr	s14, [r3]
 8001eca:	eef0 0a47 	vmov.f32	s1, s14
 8001ece:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed2:	f7ff fe61 	bl	8001b98 <balanceIntesities>

	result.heartBPM = currentBPM;
 8001ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f54 <pulseOximeter_update+0x2d0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	617b      	str	r3, [r7, #20]
	result.irCardiogram = lpbFilterIR.result;
 8001edc:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <pulseOximeter_update+0x2b4>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	61bb      	str	r3, [r7, #24]
	result.irDcValue = dcFilterIR.w;
 8001ee2:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <pulseOximeter_update+0x2a4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	61fb      	str	r3, [r7, #28]
	result.redDcValue = dcFilterRed.w;
 8001ee8:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <pulseOximeter_update+0x2ac>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	623b      	str	r3, [r7, #32]
	result.lastBeatThreshold = lastBeatThreshold;
 8001eee:	4b1a      	ldr	r3, [pc, #104]	@ (8001f58 <pulseOximeter_update+0x2d4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
	result.dcFilteredIR = dcFilterIR.result;
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <pulseOximeter_update+0x2a4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	result.dcFilteredRed = dcFilterRed.result;
 8001efa:	4b0d      	ldr	r3, [pc, #52]	@ (8001f30 <pulseOximeter_update+0x2ac>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	633b      	str	r3, [r7, #48]	@ 0x30

	return result;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	461d      	mov	r5, r3
 8001f04:	f107 0410 	add.w	r4, r7, #16
 8001f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f14:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	3740      	adds	r7, #64	@ 0x40
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f20:	20000544 	.word	0x20000544
 8001f24:	20000000 	.word	0x20000000
 8001f28:	2000049c 	.word	0x2000049c
 8001f2c:	3f733333 	.word	0x3f733333
 8001f30:	200004a4 	.word	0x200004a4
 8001f34:	200004ac 	.word	0x200004ac
 8001f38:	200004f4 	.word	0x200004f4
 8001f3c:	20000538 	.word	0x20000538
 8001f40:	2000053c 	.word	0x2000053c
 8001f44:	20000540 	.word	0x20000540
 8001f48:	20000542 	.word	0x20000542
 8001f4c:	40320000 	.word	0x40320000
 8001f50:	405b8000 	.word	0x405b8000
 8001f54:	20000500 	.word	0x20000500
 8001f58:	20000534 	.word	0x20000534

08001f5c <MAX30102_getBPM>:

float MAX30102_getBPM(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
	return pulseOximeter.heartBPM;
 8001f60:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <MAX30102_getBPM+0x18>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	ee07 3a90 	vmov	s15, r3
}
 8001f68:	eeb0 0a67 	vmov.f32	s0, s15
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	20000474 	.word	0x20000474

08001f78 <MAX30102_getSPO2>:
float MAX30102_getSPO2(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
	return pulseOximeter.SpO2;
 8001f7c:	4b04      	ldr	r3, [pc, #16]	@ (8001f90 <MAX30102_getSPO2+0x18>)
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	ee07 3a90 	vmov	s15, r3
}
 8001f84:	eeb0 0a67 	vmov.f32	s0, s15
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	20000474 	.word	0x20000474

08001f94 <OLED_Write>:
/**
 * @brief Send a command or data to the OLED
 * @param mode OLED_CMD indicates command mode, OLED_DATA indicates data mode
 * @param data The byte to be sent
 */
void OLED_Write(uint8_t mode, uint8_t data) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	460a      	mov	r2, r1
 8001f9e:	71fb      	strb	r3, [r7, #7]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2];
    buffer[0] = mode;  // Control byte
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	733b      	strb	r3, [r7, #12]
    buffer[1] = data;  // Data
 8001fa8:	79bb      	ldrb	r3, [r7, #6]
 8001faa:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8001fac:	f107 020c 	add.w	r2, r7, #12
 8001fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	2178      	movs	r1, #120	@ 0x78
 8001fba:	4803      	ldr	r0, [pc, #12]	@ (8001fc8 <OLED_Write+0x34>)
 8001fbc:	f001 f8b4 	bl	8003128 <HAL_I2C_Master_Transmit>
}
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	200002f4 	.word	0x200002f4

08001fcc <OLED_Init>:

/**
 * @brief Initialize the OLED
 */
void OLED_Init(void) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
    HAL_Delay(100); // Wait for the screen to power up and stabilize
 8001fd0:	2064      	movs	r0, #100	@ 0x64
 8001fd2:	f000 fc47 	bl	8002864 <HAL_Delay>

    // Initialization commands (based on the SSD1306 datasheet)
    OLED_Write(OLED_CMD, 0xAE); // Turn off display
 8001fd6:	21ae      	movs	r1, #174	@ 0xae
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7ff ffdb 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0x20); // Set memory addressing mode
 8001fde:	2120      	movs	r1, #32
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7ff ffd7 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0x10); // Use horizontal addressing mode
 8001fe6:	2110      	movs	r1, #16
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f7ff ffd3 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0xB0); // Set page start address
 8001fee:	21b0      	movs	r1, #176	@ 0xb0
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f7ff ffcf 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0xC8); // Set COM output scan direction (from top to bottom)
 8001ff6:	21c8      	movs	r1, #200	@ 0xc8
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f7ff ffcb 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0x00); // Set lower column address
 8001ffe:	2100      	movs	r1, #0
 8002000:	2000      	movs	r0, #0
 8002002:	f7ff ffc7 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0x10); // Set higher column address
 8002006:	2110      	movs	r1, #16
 8002008:	2000      	movs	r0, #0
 800200a:	f7ff ffc3 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0x40); // Set display start line
 800200e:	2140      	movs	r1, #64	@ 0x40
 8002010:	2000      	movs	r0, #0
 8002012:	f7ff ffbf 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0x81); // Set contrast control
 8002016:	2181      	movs	r1, #129	@ 0x81
 8002018:	2000      	movs	r0, #0
 800201a:	f7ff ffbb 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0xFF); // Maximum contrast
 800201e:	21ff      	movs	r1, #255	@ 0xff
 8002020:	2000      	movs	r0, #0
 8002022:	f7ff ffb7 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0xA1); // Set segment re-map (left to right)
 8002026:	21a1      	movs	r1, #161	@ 0xa1
 8002028:	2000      	movs	r0, #0
 800202a:	f7ff ffb3 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0xA6); // Set normal display mode
 800202e:	21a6      	movs	r1, #166	@ 0xa6
 8002030:	2000      	movs	r0, #0
 8002032:	f7ff ffaf 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0xA8); // Set multiplex ratio
 8002036:	21a8      	movs	r1, #168	@ 0xa8
 8002038:	2000      	movs	r0, #0
 800203a:	f7ff ffab 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0x3F); // 1/64 duty cycle
 800203e:	213f      	movs	r1, #63	@ 0x3f
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff ffa7 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0xD3); // Set display offset
 8002046:	21d3      	movs	r1, #211	@ 0xd3
 8002048:	2000      	movs	r0, #0
 800204a:	f7ff ffa3 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0x00); // No offset
 800204e:	2100      	movs	r1, #0
 8002050:	2000      	movs	r0, #0
 8002052:	f7ff ff9f 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0xD5); // Set display clock divide ratio
 8002056:	21d5      	movs	r1, #213	@ 0xd5
 8002058:	2000      	movs	r0, #0
 800205a:	f7ff ff9b 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0xF0); // Set to default value
 800205e:	21f0      	movs	r1, #240	@ 0xf0
 8002060:	2000      	movs	r0, #0
 8002062:	f7ff ff97 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0xD9); // Set pre-charge period
 8002066:	21d9      	movs	r1, #217	@ 0xd9
 8002068:	2000      	movs	r0, #0
 800206a:	f7ff ff93 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0x22); //
 800206e:	2122      	movs	r1, #34	@ 0x22
 8002070:	2000      	movs	r0, #0
 8002072:	f7ff ff8f 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0xDA); // Set COM hardware configuration
 8002076:	21da      	movs	r1, #218	@ 0xda
 8002078:	2000      	movs	r0, #0
 800207a:	f7ff ff8b 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0x12); //
 800207e:	2112      	movs	r1, #18
 8002080:	2000      	movs	r0, #0
 8002082:	f7ff ff87 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0xDB); // Set VCOMH deselect level
 8002086:	21db      	movs	r1, #219	@ 0xdb
 8002088:	2000      	movs	r0, #0
 800208a:	f7ff ff83 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0x20); // ~0.77×VCC
 800208e:	2120      	movs	r1, #32
 8002090:	2000      	movs	r0, #0
 8002092:	f7ff ff7f 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0x8D); // Set charge pump
 8002096:	218d      	movs	r1, #141	@ 0x8d
 8002098:	2000      	movs	r0, #0
 800209a:	f7ff ff7b 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0x14); // Enable charge pump
 800209e:	2114      	movs	r1, #20
 80020a0:	2000      	movs	r0, #0
 80020a2:	f7ff ff77 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0xAF); // Turn on display
 80020a6:	21af      	movs	r1, #175	@ 0xaf
 80020a8:	2000      	movs	r0, #0
 80020aa:	f7ff ff73 	bl	8001f94 <OLED_Write>
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <OLED_Clear>:

/**
 * @brief Clear the OLED display
 */
void OLED_Clear(void) {
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++) {
 80020b8:	2300      	movs	r3, #0
 80020ba:	71fb      	strb	r3, [r7, #7]
 80020bc:	e01f      	b.n	80020fe <OLED_Clear+0x4c>
        OLED_Write(OLED_CMD, 0xB0 + page); // Set page address
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	3b50      	subs	r3, #80	@ 0x50
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	4619      	mov	r1, r3
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7ff ff64 	bl	8001f94 <OLED_Write>
        OLED_Write(OLED_CMD, 0x00);        // Set lower column address
 80020cc:	2100      	movs	r1, #0
 80020ce:	2000      	movs	r0, #0
 80020d0:	f7ff ff60 	bl	8001f94 <OLED_Write>
        OLED_Write(OLED_CMD, 0x10);        // Set higher column address
 80020d4:	2110      	movs	r1, #16
 80020d6:	2000      	movs	r0, #0
 80020d8:	f7ff ff5c 	bl	8001f94 <OLED_Write>
        for (uint8_t col = 0; col < 128; col++) {
 80020dc:	2300      	movs	r3, #0
 80020de:	71bb      	strb	r3, [r7, #6]
 80020e0:	e006      	b.n	80020f0 <OLED_Clear+0x3e>
            OLED_Write(OLED_DATA, 0x00); // Clear display
 80020e2:	2100      	movs	r1, #0
 80020e4:	2040      	movs	r0, #64	@ 0x40
 80020e6:	f7ff ff55 	bl	8001f94 <OLED_Write>
        for (uint8_t col = 0; col < 128; col++) {
 80020ea:	79bb      	ldrb	r3, [r7, #6]
 80020ec:	3301      	adds	r3, #1
 80020ee:	71bb      	strb	r3, [r7, #6]
 80020f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	daf4      	bge.n	80020e2 <OLED_Clear+0x30>
    for (uint8_t page = 0; page < 8; page++) {
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	3301      	adds	r3, #1
 80020fc:	71fb      	strb	r3, [r7, #7]
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	2b07      	cmp	r3, #7
 8002102:	d9dc      	bls.n	80020be <OLED_Clear+0xc>
        }
    }
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <OLED_ShowChar>:
 * @brief Display a character at a specified position
 * @param x X-coordinate (column address, 0~127)
 * @param y Page address (row number, 0~7)
 * @param ch Character to display
 */
void OLED_ShowChar(uint8_t x, uint8_t y, char ch) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
 800211a:	460b      	mov	r3, r1
 800211c:	71bb      	strb	r3, [r7, #6]
 800211e:	4613      	mov	r3, r2
 8002120:	717b      	strb	r3, [r7, #5]
    if (ch < 32 || ch > 127) return; // Character out of range
 8002122:	797b      	ldrb	r3, [r7, #5]
 8002124:	2b1f      	cmp	r3, #31
 8002126:	d933      	bls.n	8002190 <OLED_ShowChar+0x80>
 8002128:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800212c:	2b00      	cmp	r3, #0
 800212e:	db2f      	blt.n	8002190 <OLED_ShowChar+0x80>

    OLED_Write(OLED_CMD, 0xB0 + y);         // Set page address
 8002130:	79bb      	ldrb	r3, [r7, #6]
 8002132:	3b50      	subs	r3, #80	@ 0x50
 8002134:	b2db      	uxtb	r3, r3
 8002136:	4619      	mov	r1, r3
 8002138:	2000      	movs	r0, #0
 800213a:	f7ff ff2b 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0x00 + (x & 0x0F)); // Set lower column address
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	b2db      	uxtb	r3, r3
 8002146:	4619      	mov	r1, r3
 8002148:	2000      	movs	r0, #0
 800214a:	f7ff ff23 	bl	8001f94 <OLED_Write>
    OLED_Write(OLED_CMD, 0x10 + ((x >> 4) & 0x0F)); // Set higher column address
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	b2db      	uxtb	r3, r3
 8002154:	3310      	adds	r3, #16
 8002156:	b2db      	uxtb	r3, r3
 8002158:	4619      	mov	r1, r3
 800215a:	2000      	movs	r0, #0
 800215c:	f7ff ff1a 	bl	8001f94 <OLED_Write>

    const uint8_t *font_data = Font8x8[ch - 32]; // Get character dot matrix data
 8002160:	797b      	ldrb	r3, [r7, #5]
 8002162:	3b20      	subs	r3, #32
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4a0c      	ldr	r2, [pc, #48]	@ (8002198 <OLED_ShowChar+0x88>)
 8002168:	4413      	add	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < 8; i++) {
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	e00a      	b.n	8002188 <OLED_ShowChar+0x78>
        OLED_Write(OLED_DATA, font_data[i]); // Write character dot matrix data
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	4413      	add	r3, r2
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	4619      	mov	r1, r3
 800217c:	2040      	movs	r0, #64	@ 0x40
 800217e:	f7ff ff09 	bl	8001f94 <OLED_Write>
    for (int i = 0; i < 8; i++) {
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	3301      	adds	r3, #1
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b07      	cmp	r3, #7
 800218c:	ddf1      	ble.n	8002172 <OLED_ShowChar+0x62>
 800218e:	e000      	b.n	8002192 <OLED_ShowChar+0x82>
    if (ch < 32 || ch > 127) return; // Character out of range
 8002190:	bf00      	nop
    }
}
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	0800e4f8 	.word	0x0800e4f8

0800219c <OLED_ShowString>:
 * @brief Display a string at a specified position
 * @param x Starting X-coordinate (column address)
 * @param y Starting page address (row number)
 * @param str String to display
 */
void OLED_ShowString(uint8_t x, uint8_t y, char* str) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	603a      	str	r2, [r7, #0]
 80021a6:	71fb      	strb	r3, [r7, #7]
 80021a8:	460b      	mov	r3, r1
 80021aa:	71bb      	strb	r3, [r7, #6]
    while (*str) {
 80021ac:	e014      	b.n	80021d8 <OLED_ShowString+0x3c>
        OLED_ShowChar(x, y, *str); // Display individual character
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	781a      	ldrb	r2, [r3, #0]
 80021b2:	79b9      	ldrb	r1, [r7, #6]
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ffaa 	bl	8002110 <OLED_ShowChar>
        x += 8;                    // Each character occupies 8 columns
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	3308      	adds	r3, #8
 80021c0:	71fb      	strb	r3, [r7, #7]
        if (x > 120) {             // Wrap to the next line if exceeding screen width
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	2b78      	cmp	r3, #120	@ 0x78
 80021c6:	d904      	bls.n	80021d2 <OLED_ShowString+0x36>
            x = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	71fb      	strb	r3, [r7, #7]
            y++;
 80021cc:	79bb      	ldrb	r3, [r7, #6]
 80021ce:	3301      	adds	r3, #1
 80021d0:	71bb      	strb	r3, [r7, #6]
        }
        str++;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	3301      	adds	r3, #1
 80021d6:	603b      	str	r3, [r7, #0]
    while (*str) {
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1e6      	bne.n	80021ae <OLED_ShowString+0x12>
    }
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	4b10      	ldr	r3, [pc, #64]	@ (8002238 <HAL_MspInit+0x4c>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fa:	4a0f      	ldr	r2, [pc, #60]	@ (8002238 <HAL_MspInit+0x4c>)
 80021fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002200:	6453      	str	r3, [r2, #68]	@ 0x44
 8002202:	4b0d      	ldr	r3, [pc, #52]	@ (8002238 <HAL_MspInit+0x4c>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	4b09      	ldr	r3, [pc, #36]	@ (8002238 <HAL_MspInit+0x4c>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	4a08      	ldr	r2, [pc, #32]	@ (8002238 <HAL_MspInit+0x4c>)
 8002218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800221c:	6413      	str	r3, [r2, #64]	@ 0x40
 800221e:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <HAL_MspInit+0x4c>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800222a:	2007      	movs	r0, #7
 800222c:	f000 fc0e 	bl	8002a4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40023800 	.word	0x40023800

0800223c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	@ 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a19      	ldr	r2, [pc, #100]	@ (80022c0 <HAL_I2C_MspInit+0x84>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d12c      	bne.n	80022b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	4b18      	ldr	r3, [pc, #96]	@ (80022c4 <HAL_I2C_MspInit+0x88>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	4a17      	ldr	r2, [pc, #92]	@ (80022c4 <HAL_I2C_MspInit+0x88>)
 8002268:	f043 0302 	orr.w	r3, r3, #2
 800226c:	6313      	str	r3, [r2, #48]	@ 0x30
 800226e:	4b15      	ldr	r3, [pc, #84]	@ (80022c4 <HAL_I2C_MspInit+0x88>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800227a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800227e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002280:	2312      	movs	r3, #18
 8002282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002284:	2301      	movs	r3, #1
 8002286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002288:	2300      	movs	r3, #0
 800228a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800228c:	2304      	movs	r3, #4
 800228e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	4619      	mov	r1, r3
 8002296:	480c      	ldr	r0, [pc, #48]	@ (80022c8 <HAL_I2C_MspInit+0x8c>)
 8002298:	f000 fc1a 	bl	8002ad0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	4b08      	ldr	r3, [pc, #32]	@ (80022c4 <HAL_I2C_MspInit+0x88>)
 80022a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a4:	4a07      	ldr	r2, [pc, #28]	@ (80022c4 <HAL_I2C_MspInit+0x88>)
 80022a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ac:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <HAL_I2C_MspInit+0x88>)
 80022ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80022b8:	bf00      	nop
 80022ba:	3728      	adds	r7, #40	@ 0x28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40005400 	.word	0x40005400
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40020400 	.word	0x40020400

080022cc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08e      	sub	sp, #56	@ 0x38
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a31      	ldr	r2, [pc, #196]	@ (80023bc <HAL_I2S_MspInit+0xf0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d15a      	bne.n	80023b2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80022fc:	2301      	movs	r3, #1
 80022fe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002300:	23c0      	movs	r3, #192	@ 0xc0
 8002302:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002304:	2302      	movs	r3, #2
 8002306:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4618      	mov	r0, r3
 800230e:	f004 faf5 	bl	80068fc <HAL_RCCEx_PeriphCLKConfig>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002318:	f7ff f9de 	bl	80016d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800231c:	2300      	movs	r3, #0
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	4b27      	ldr	r3, [pc, #156]	@ (80023c0 <HAL_I2S_MspInit+0xf4>)
 8002322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002324:	4a26      	ldr	r2, [pc, #152]	@ (80023c0 <HAL_I2S_MspInit+0xf4>)
 8002326:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800232a:	6413      	str	r3, [r2, #64]	@ 0x40
 800232c:	4b24      	ldr	r3, [pc, #144]	@ (80023c0 <HAL_I2S_MspInit+0xf4>)
 800232e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002330:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	4b20      	ldr	r3, [pc, #128]	@ (80023c0 <HAL_I2S_MspInit+0xf4>)
 800233e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002340:	4a1f      	ldr	r2, [pc, #124]	@ (80023c0 <HAL_I2S_MspInit+0xf4>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6313      	str	r3, [r2, #48]	@ 0x30
 8002348:	4b1d      	ldr	r3, [pc, #116]	@ (80023c0 <HAL_I2S_MspInit+0xf4>)
 800234a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	4b19      	ldr	r3, [pc, #100]	@ (80023c0 <HAL_I2S_MspInit+0xf4>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235c:	4a18      	ldr	r2, [pc, #96]	@ (80023c0 <HAL_I2S_MspInit+0xf4>)
 800235e:	f043 0304 	orr.w	r3, r3, #4
 8002362:	6313      	str	r3, [r2, #48]	@ 0x30
 8002364:	4b16      	ldr	r3, [pc, #88]	@ (80023c0 <HAL_I2S_MspInit+0xf4>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002370:	2310      	movs	r3, #16
 8002372:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002380:	2306      	movs	r3, #6
 8002382:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002384:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002388:	4619      	mov	r1, r3
 800238a:	480e      	ldr	r0, [pc, #56]	@ (80023c4 <HAL_I2S_MspInit+0xf8>)
 800238c:	f000 fba0 	bl	8002ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002390:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80023a2:	2306      	movs	r3, #6
 80023a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023aa:	4619      	mov	r1, r3
 80023ac:	4806      	ldr	r0, [pc, #24]	@ (80023c8 <HAL_I2S_MspInit+0xfc>)
 80023ae:	f000 fb8f 	bl	8002ad0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80023b2:	bf00      	nop
 80023b4:	3738      	adds	r7, #56	@ 0x38
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40003c00 	.word	0x40003c00
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40020000 	.word	0x40020000
 80023c8:	40020800 	.word	0x40020800

080023cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	@ 0x28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a19      	ldr	r2, [pc, #100]	@ (8002450 <HAL_SPI_MspInit+0x84>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d12b      	bne.n	8002446 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	4b18      	ldr	r3, [pc, #96]	@ (8002454 <HAL_SPI_MspInit+0x88>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f6:	4a17      	ldr	r2, [pc, #92]	@ (8002454 <HAL_SPI_MspInit+0x88>)
 80023f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023fe:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <HAL_SPI_MspInit+0x88>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	4b11      	ldr	r3, [pc, #68]	@ (8002454 <HAL_SPI_MspInit+0x88>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002412:	4a10      	ldr	r2, [pc, #64]	@ (8002454 <HAL_SPI_MspInit+0x88>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6313      	str	r3, [r2, #48]	@ 0x30
 800241a:	4b0e      	ldr	r3, [pc, #56]	@ (8002454 <HAL_SPI_MspInit+0x88>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002426:	23e0      	movs	r3, #224	@ 0xe0
 8002428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002436:	2305      	movs	r3, #5
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4619      	mov	r1, r3
 8002440:	4805      	ldr	r0, [pc, #20]	@ (8002458 <HAL_SPI_MspInit+0x8c>)
 8002442:	f000 fb45 	bl	8002ad0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002446:	bf00      	nop
 8002448:	3728      	adds	r7, #40	@ 0x28
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40013000 	.word	0x40013000
 8002454:	40023800 	.word	0x40023800
 8002458:	40020000 	.word	0x40020000

0800245c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	@ 0x28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a19      	ldr	r2, [pc, #100]	@ (80024e0 <HAL_UART_MspInit+0x84>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d12b      	bne.n	80024d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	4b18      	ldr	r3, [pc, #96]	@ (80024e4 <HAL_UART_MspInit+0x88>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	4a17      	ldr	r2, [pc, #92]	@ (80024e4 <HAL_UART_MspInit+0x88>)
 8002488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800248c:	6413      	str	r3, [r2, #64]	@ 0x40
 800248e:	4b15      	ldr	r3, [pc, #84]	@ (80024e4 <HAL_UART_MspInit+0x88>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b11      	ldr	r3, [pc, #68]	@ (80024e4 <HAL_UART_MspInit+0x88>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	4a10      	ldr	r2, [pc, #64]	@ (80024e4 <HAL_UART_MspInit+0x88>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024aa:	4b0e      	ldr	r3, [pc, #56]	@ (80024e4 <HAL_UART_MspInit+0x88>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024b6:	230c      	movs	r3, #12
 80024b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c2:	2303      	movs	r3, #3
 80024c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024c6:	2307      	movs	r3, #7
 80024c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	4619      	mov	r1, r3
 80024d0:	4805      	ldr	r0, [pc, #20]	@ (80024e8 <HAL_UART_MspInit+0x8c>)
 80024d2:	f000 fafd 	bl	8002ad0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80024d6:	bf00      	nop
 80024d8:	3728      	adds	r7, #40	@ 0x28
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40004400 	.word	0x40004400
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40020000 	.word	0x40020000

080024ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024f0:	bf00      	nop
 80024f2:	e7fd      	b.n	80024f0 <NMI_Handler+0x4>

080024f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024f8:	bf00      	nop
 80024fa:	e7fd      	b.n	80024f8 <HardFault_Handler+0x4>

080024fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002500:	bf00      	nop
 8002502:	e7fd      	b.n	8002500 <MemManage_Handler+0x4>

08002504 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002508:	bf00      	nop
 800250a:	e7fd      	b.n	8002508 <BusFault_Handler+0x4>

0800250c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002510:	bf00      	nop
 8002512:	e7fd      	b.n	8002510 <UsageFault_Handler+0x4>

08002514 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002542:	f000 f96f 	bl	8002824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}

0800254a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pulse_Oximeter_Int_Pin);
 800254e:	2001      	movs	r0, #1
 8002550:	f000 fc8e 	bl	8002e70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}

08002558 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800255c:	4802      	ldr	r0, [pc, #8]	@ (8002568 <OTG_FS_IRQHandler+0x10>)
 800255e:	f002 fc27 	bl	8004db0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20001b0c 	.word	0x20001b0c

0800256c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return 1;
 8002570:	2301      	movs	r3, #1
}
 8002572:	4618      	mov	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <_kill>:

int _kill(int pid, int sig)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002586:	f009 fbf5 	bl	800bd74 <__errno>
 800258a:	4603      	mov	r3, r0
 800258c:	2216      	movs	r2, #22
 800258e:	601a      	str	r2, [r3, #0]
  return -1;
 8002590:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <_exit>:

void _exit (int status)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025a4:	f04f 31ff 	mov.w	r1, #4294967295
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff ffe7 	bl	800257c <_kill>
  while (1) {}    /* Make sure we hang here */
 80025ae:	bf00      	nop
 80025b0:	e7fd      	b.n	80025ae <_exit+0x12>

080025b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	e00a      	b.n	80025da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025c4:	f3af 8000 	nop.w
 80025c8:	4601      	mov	r1, r0
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	60ba      	str	r2, [r7, #8]
 80025d0:	b2ca      	uxtb	r2, r1
 80025d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3301      	adds	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	429a      	cmp	r2, r3
 80025e0:	dbf0      	blt.n	80025c4 <_read+0x12>
  }

  return len;
 80025e2:	687b      	ldr	r3, [r7, #4]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	e009      	b.n	8002612 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	60ba      	str	r2, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	3301      	adds	r3, #1
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	429a      	cmp	r2, r3
 8002618:	dbf1      	blt.n	80025fe <_write+0x12>
  }
  return len;
 800261a:	687b      	ldr	r3, [r7, #4]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <_close>:

int _close(int file)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800262c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800264c:	605a      	str	r2, [r3, #4]
  return 0;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <_isatty>:

int _isatty(int file)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002664:	2301      	movs	r3, #1
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002672:	b480      	push	{r7}
 8002674:	b085      	sub	sp, #20
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002694:	4a14      	ldr	r2, [pc, #80]	@ (80026e8 <_sbrk+0x5c>)
 8002696:	4b15      	ldr	r3, [pc, #84]	@ (80026ec <_sbrk+0x60>)
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026a0:	4b13      	ldr	r3, [pc, #76]	@ (80026f0 <_sbrk+0x64>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d102      	bne.n	80026ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a8:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <_sbrk+0x64>)
 80026aa:	4a12      	ldr	r2, [pc, #72]	@ (80026f4 <_sbrk+0x68>)
 80026ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ae:	4b10      	ldr	r3, [pc, #64]	@ (80026f0 <_sbrk+0x64>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d207      	bcs.n	80026cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026bc:	f009 fb5a 	bl	800bd74 <__errno>
 80026c0:	4603      	mov	r3, r0
 80026c2:	220c      	movs	r2, #12
 80026c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ca:	e009      	b.n	80026e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026cc:	4b08      	ldr	r3, [pc, #32]	@ (80026f0 <_sbrk+0x64>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026d2:	4b07      	ldr	r3, [pc, #28]	@ (80026f0 <_sbrk+0x64>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	4a05      	ldr	r2, [pc, #20]	@ (80026f0 <_sbrk+0x64>)
 80026dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026de:	68fb      	ldr	r3, [r7, #12]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20020000 	.word	0x20020000
 80026ec:	00000400 	.word	0x00000400
 80026f0:	20000624 	.word	0x20000624
 80026f4:	20002360 	.word	0x20002360

080026f8 <millis>:
  }
}

// Get number of elapsed milliseconds
uint32_t millis(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80026fc:	f000 f8a6 	bl	800284c <HAL_GetTick>
 8002700:	4603      	mov	r3, r0
}
 8002702:	4618      	mov	r0, r3
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800270c:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <SystemInit+0x20>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002712:	4a05      	ldr	r2, [pc, #20]	@ (8002728 <SystemInit+0x20>)
 8002714:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002718:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800272c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002764 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002730:	f7ff ffea 	bl	8002708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002734:	480c      	ldr	r0, [pc, #48]	@ (8002768 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002736:	490d      	ldr	r1, [pc, #52]	@ (800276c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002738:	4a0d      	ldr	r2, [pc, #52]	@ (8002770 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800273c:	e002      	b.n	8002744 <LoopCopyDataInit>

0800273e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800273e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002742:	3304      	adds	r3, #4

08002744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002748:	d3f9      	bcc.n	800273e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274a:	4a0a      	ldr	r2, [pc, #40]	@ (8002774 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800274c:	4c0a      	ldr	r4, [pc, #40]	@ (8002778 <LoopFillZerobss+0x22>)
  movs r3, #0
 800274e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002750:	e001      	b.n	8002756 <LoopFillZerobss>

08002752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002754:	3204      	adds	r2, #4

08002756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002758:	d3fb      	bcc.n	8002752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800275a:	f009 fb11 	bl	800bd80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800275e:	f7fe fcf9 	bl	8001154 <main>
  bx  lr    
 8002762:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002764:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800276c:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8002770:	0800eb90 	.word	0x0800eb90
  ldr r2, =_sbss
 8002774:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8002778:	2000235c 	.word	0x2000235c

0800277c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800277c:	e7fe      	b.n	800277c <ADC_IRQHandler>
	...

08002780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002784:	4b0e      	ldr	r3, [pc, #56]	@ (80027c0 <HAL_Init+0x40>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0d      	ldr	r2, [pc, #52]	@ (80027c0 <HAL_Init+0x40>)
 800278a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800278e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002790:	4b0b      	ldr	r3, [pc, #44]	@ (80027c0 <HAL_Init+0x40>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0a      	ldr	r2, [pc, #40]	@ (80027c0 <HAL_Init+0x40>)
 8002796:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800279a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800279c:	4b08      	ldr	r3, [pc, #32]	@ (80027c0 <HAL_Init+0x40>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a07      	ldr	r2, [pc, #28]	@ (80027c0 <HAL_Init+0x40>)
 80027a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a8:	2003      	movs	r0, #3
 80027aa:	f000 f94f 	bl	8002a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ae:	2000      	movs	r0, #0
 80027b0:	f000 f808 	bl	80027c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027b4:	f7ff fd1a 	bl	80021ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40023c00 	.word	0x40023c00

080027c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027cc:	4b12      	ldr	r3, [pc, #72]	@ (8002818 <HAL_InitTick+0x54>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b12      	ldr	r3, [pc, #72]	@ (800281c <HAL_InitTick+0x58>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	4619      	mov	r1, r3
 80027d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027da:	fbb3 f3f1 	udiv	r3, r3, r1
 80027de:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f967 	bl	8002ab6 <HAL_SYSTICK_Config>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e00e      	b.n	8002810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b0f      	cmp	r3, #15
 80027f6:	d80a      	bhi.n	800280e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f8:	2200      	movs	r2, #0
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	f000 f92f 	bl	8002a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002804:	4a06      	ldr	r2, [pc, #24]	@ (8002820 <HAL_InitTick+0x5c>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	e000      	b.n	8002810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
}
 8002810:	4618      	mov	r0, r3
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20000004 	.word	0x20000004
 800281c:	2000000c 	.word	0x2000000c
 8002820:	20000008 	.word	0x20000008

08002824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002828:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <HAL_IncTick+0x20>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <HAL_IncTick+0x24>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4413      	add	r3, r2
 8002834:	4a04      	ldr	r2, [pc, #16]	@ (8002848 <HAL_IncTick+0x24>)
 8002836:	6013      	str	r3, [r2, #0]
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	2000000c 	.word	0x2000000c
 8002848:	20000628 	.word	0x20000628

0800284c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return uwTick;
 8002850:	4b03      	ldr	r3, [pc, #12]	@ (8002860 <HAL_GetTick+0x14>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	20000628 	.word	0x20000628

08002864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800286c:	f7ff ffee 	bl	800284c <HAL_GetTick>
 8002870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287c:	d005      	beq.n	800288a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800287e:	4b0a      	ldr	r3, [pc, #40]	@ (80028a8 <HAL_Delay+0x44>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4413      	add	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800288a:	bf00      	nop
 800288c:	f7ff ffde 	bl	800284c <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	429a      	cmp	r2, r3
 800289a:	d8f7      	bhi.n	800288c <HAL_Delay+0x28>
  {
  }
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	2000000c 	.word	0x2000000c

080028ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028bc:	4b0c      	ldr	r3, [pc, #48]	@ (80028f0 <__NVIC_SetPriorityGrouping+0x44>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028c8:	4013      	ands	r3, r2
 80028ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028de:	4a04      	ldr	r2, [pc, #16]	@ (80028f0 <__NVIC_SetPriorityGrouping+0x44>)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	60d3      	str	r3, [r2, #12]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f8:	4b04      	ldr	r3, [pc, #16]	@ (800290c <__NVIC_GetPriorityGrouping+0x18>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	f003 0307 	and.w	r3, r3, #7
}
 8002902:	4618      	mov	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	2b00      	cmp	r3, #0
 8002920:	db0b      	blt.n	800293a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	f003 021f 	and.w	r2, r3, #31
 8002928:	4907      	ldr	r1, [pc, #28]	@ (8002948 <__NVIC_EnableIRQ+0x38>)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	2001      	movs	r0, #1
 8002932:	fa00 f202 	lsl.w	r2, r0, r2
 8002936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000e100 	.word	0xe000e100

0800294c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	6039      	str	r1, [r7, #0]
 8002956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295c:	2b00      	cmp	r3, #0
 800295e:	db0a      	blt.n	8002976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	b2da      	uxtb	r2, r3
 8002964:	490c      	ldr	r1, [pc, #48]	@ (8002998 <__NVIC_SetPriority+0x4c>)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	0112      	lsls	r2, r2, #4
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	440b      	add	r3, r1
 8002970:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002974:	e00a      	b.n	800298c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4908      	ldr	r1, [pc, #32]	@ (800299c <__NVIC_SetPriority+0x50>)
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	3b04      	subs	r3, #4
 8002984:	0112      	lsls	r2, r2, #4
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	440b      	add	r3, r1
 800298a:	761a      	strb	r2, [r3, #24]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000e100 	.word	0xe000e100
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	@ 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f1c3 0307 	rsb	r3, r3, #7
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	bf28      	it	cs
 80029be:	2304      	movcs	r3, #4
 80029c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3304      	adds	r3, #4
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	d902      	bls.n	80029d0 <NVIC_EncodePriority+0x30>
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3b03      	subs	r3, #3
 80029ce:	e000      	b.n	80029d2 <NVIC_EncodePriority+0x32>
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d4:	f04f 32ff 	mov.w	r2, #4294967295
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43da      	mvns	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	401a      	ands	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa01 f303 	lsl.w	r3, r1, r3
 80029f2:	43d9      	mvns	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f8:	4313      	orrs	r3, r2
         );
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3724      	adds	r7, #36	@ 0x24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a18:	d301      	bcc.n	8002a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e00f      	b.n	8002a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a48 <SysTick_Config+0x40>)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a26:	210f      	movs	r1, #15
 8002a28:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2c:	f7ff ff8e 	bl	800294c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a30:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <SysTick_Config+0x40>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a36:	4b04      	ldr	r3, [pc, #16]	@ (8002a48 <SysTick_Config+0x40>)
 8002a38:	2207      	movs	r2, #7
 8002a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	e000e010 	.word	0xe000e010

08002a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ff29 	bl	80028ac <__NVIC_SetPriorityGrouping>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b086      	sub	sp, #24
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a74:	f7ff ff3e 	bl	80028f4 <__NVIC_GetPriorityGrouping>
 8002a78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	6978      	ldr	r0, [r7, #20]
 8002a80:	f7ff ff8e 	bl	80029a0 <NVIC_EncodePriority>
 8002a84:	4602      	mov	r2, r0
 8002a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff5d 	bl	800294c <__NVIC_SetPriority>
}
 8002a92:	bf00      	nop
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff31 	bl	8002910 <__NVIC_EnableIRQ>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff ffa2 	bl	8002a08 <SysTick_Config>
 8002ac4:	4603      	mov	r3, r0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	@ 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	e16b      	b.n	8002dc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aec:	2201      	movs	r2, #1
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	f040 815a 	bne.w	8002dbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d005      	beq.n	8002b22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d130      	bne.n	8002b84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b58:	2201      	movs	r2, #1
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 0201 	and.w	r2, r3, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d017      	beq.n	8002bc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d123      	bne.n	8002c14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	08da      	lsrs	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3208      	adds	r2, #8
 8002bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	220f      	movs	r2, #15
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	08da      	lsrs	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3208      	adds	r2, #8
 8002c0e:	69b9      	ldr	r1, [r7, #24]
 8002c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2203      	movs	r2, #3
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0203 	and.w	r2, r3, #3
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80b4 	beq.w	8002dbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	4b60      	ldr	r3, [pc, #384]	@ (8002ddc <HAL_GPIO_Init+0x30c>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5e:	4a5f      	ldr	r2, [pc, #380]	@ (8002ddc <HAL_GPIO_Init+0x30c>)
 8002c60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c66:	4b5d      	ldr	r3, [pc, #372]	@ (8002ddc <HAL_GPIO_Init+0x30c>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c72:	4a5b      	ldr	r2, [pc, #364]	@ (8002de0 <HAL_GPIO_Init+0x310>)
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	089b      	lsrs	r3, r3, #2
 8002c78:	3302      	adds	r3, #2
 8002c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	220f      	movs	r2, #15
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4013      	ands	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a52      	ldr	r2, [pc, #328]	@ (8002de4 <HAL_GPIO_Init+0x314>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d02b      	beq.n	8002cf6 <HAL_GPIO_Init+0x226>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a51      	ldr	r2, [pc, #324]	@ (8002de8 <HAL_GPIO_Init+0x318>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d025      	beq.n	8002cf2 <HAL_GPIO_Init+0x222>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a50      	ldr	r2, [pc, #320]	@ (8002dec <HAL_GPIO_Init+0x31c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d01f      	beq.n	8002cee <HAL_GPIO_Init+0x21e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4f      	ldr	r2, [pc, #316]	@ (8002df0 <HAL_GPIO_Init+0x320>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d019      	beq.n	8002cea <HAL_GPIO_Init+0x21a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4e      	ldr	r2, [pc, #312]	@ (8002df4 <HAL_GPIO_Init+0x324>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <HAL_GPIO_Init+0x216>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a4d      	ldr	r2, [pc, #308]	@ (8002df8 <HAL_GPIO_Init+0x328>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00d      	beq.n	8002ce2 <HAL_GPIO_Init+0x212>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4c      	ldr	r2, [pc, #304]	@ (8002dfc <HAL_GPIO_Init+0x32c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d007      	beq.n	8002cde <HAL_GPIO_Init+0x20e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4b      	ldr	r2, [pc, #300]	@ (8002e00 <HAL_GPIO_Init+0x330>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <HAL_GPIO_Init+0x20a>
 8002cd6:	2307      	movs	r3, #7
 8002cd8:	e00e      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002cda:	2308      	movs	r3, #8
 8002cdc:	e00c      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002cde:	2306      	movs	r3, #6
 8002ce0:	e00a      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002ce2:	2305      	movs	r3, #5
 8002ce4:	e008      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	e006      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002cea:	2303      	movs	r3, #3
 8002cec:	e004      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e002      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	f002 0203 	and.w	r2, r2, #3
 8002cfe:	0092      	lsls	r2, r2, #2
 8002d00:	4093      	lsls	r3, r2
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d08:	4935      	ldr	r1, [pc, #212]	@ (8002de0 <HAL_GPIO_Init+0x310>)
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	3302      	adds	r3, #2
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d16:	4b3b      	ldr	r3, [pc, #236]	@ (8002e04 <HAL_GPIO_Init+0x334>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d3a:	4a32      	ldr	r2, [pc, #200]	@ (8002e04 <HAL_GPIO_Init+0x334>)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d40:	4b30      	ldr	r3, [pc, #192]	@ (8002e04 <HAL_GPIO_Init+0x334>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d64:	4a27      	ldr	r2, [pc, #156]	@ (8002e04 <HAL_GPIO_Init+0x334>)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d6a:	4b26      	ldr	r3, [pc, #152]	@ (8002e04 <HAL_GPIO_Init+0x334>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002e04 <HAL_GPIO_Init+0x334>)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d94:	4b1b      	ldr	r3, [pc, #108]	@ (8002e04 <HAL_GPIO_Init+0x334>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002db8:	4a12      	ldr	r2, [pc, #72]	@ (8002e04 <HAL_GPIO_Init+0x334>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	61fb      	str	r3, [r7, #28]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	2b0f      	cmp	r3, #15
 8002dc8:	f67f ae90 	bls.w	8002aec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dcc:	bf00      	nop
 8002dce:	bf00      	nop
 8002dd0:	3724      	adds	r7, #36	@ 0x24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40013800 	.word	0x40013800
 8002de4:	40020000 	.word	0x40020000
 8002de8:	40020400 	.word	0x40020400
 8002dec:	40020800 	.word	0x40020800
 8002df0:	40020c00 	.word	0x40020c00
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40021400 	.word	0x40021400
 8002dfc:	40021800 	.word	0x40021800
 8002e00:	40021c00 	.word	0x40021c00
 8002e04:	40013c00 	.word	0x40013c00

08002e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
 8002e14:	4613      	mov	r3, r2
 8002e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e18:	787b      	ldrb	r3, [r7, #1]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e1e:	887a      	ldrh	r2, [r7, #2]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e24:	e003      	b.n	8002e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e26:	887b      	ldrh	r3, [r7, #2]
 8002e28:	041a      	lsls	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	619a      	str	r2, [r3, #24]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e4c:	887a      	ldrh	r2, [r7, #2]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4013      	ands	r3, r2
 8002e52:	041a      	lsls	r2, r3, #16
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	43d9      	mvns	r1, r3
 8002e58:	887b      	ldrh	r3, [r7, #2]
 8002e5a:	400b      	ands	r3, r1
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	619a      	str	r2, [r3, #24]
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e7a:	4b08      	ldr	r3, [pc, #32]	@ (8002e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d006      	beq.n	8002e94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e86:	4a05      	ldr	r2, [pc, #20]	@ (8002e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e88:	88fb      	ldrh	r3, [r7, #6]
 8002e8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe fc0e 	bl	80016b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40013c00 	.word	0x40013c00

08002ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e12b      	b.n	800310a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff f9b8 	bl	800223c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2224      	movs	r2, #36	@ 0x24
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0201 	bic.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ef2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f04:	f003 fcd2 	bl	80068ac <HAL_RCC_GetPCLK1Freq>
 8002f08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4a81      	ldr	r2, [pc, #516]	@ (8003114 <HAL_I2C_Init+0x274>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d807      	bhi.n	8002f24 <HAL_I2C_Init+0x84>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4a80      	ldr	r2, [pc, #512]	@ (8003118 <HAL_I2C_Init+0x278>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	bf94      	ite	ls
 8002f1c:	2301      	movls	r3, #1
 8002f1e:	2300      	movhi	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	e006      	b.n	8002f32 <HAL_I2C_Init+0x92>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4a7d      	ldr	r2, [pc, #500]	@ (800311c <HAL_I2C_Init+0x27c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	bf94      	ite	ls
 8002f2c:	2301      	movls	r3, #1
 8002f2e:	2300      	movhi	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e0e7      	b.n	800310a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4a78      	ldr	r2, [pc, #480]	@ (8003120 <HAL_I2C_Init+0x280>)
 8002f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f42:	0c9b      	lsrs	r3, r3, #18
 8002f44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4a6a      	ldr	r2, [pc, #424]	@ (8003114 <HAL_I2C_Init+0x274>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d802      	bhi.n	8002f74 <HAL_I2C_Init+0xd4>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	3301      	adds	r3, #1
 8002f72:	e009      	b.n	8002f88 <HAL_I2C_Init+0xe8>
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	4a69      	ldr	r2, [pc, #420]	@ (8003124 <HAL_I2C_Init+0x284>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	099b      	lsrs	r3, r3, #6
 8002f86:	3301      	adds	r3, #1
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	495c      	ldr	r1, [pc, #368]	@ (8003114 <HAL_I2C_Init+0x274>)
 8002fa4:	428b      	cmp	r3, r1
 8002fa6:	d819      	bhi.n	8002fdc <HAL_I2C_Init+0x13c>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1e59      	subs	r1, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fb6:	1c59      	adds	r1, r3, #1
 8002fb8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fbc:	400b      	ands	r3, r1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_I2C_Init+0x138>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1e59      	subs	r1, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd6:	e051      	b.n	800307c <HAL_I2C_Init+0x1dc>
 8002fd8:	2304      	movs	r3, #4
 8002fda:	e04f      	b.n	800307c <HAL_I2C_Init+0x1dc>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d111      	bne.n	8003008 <HAL_I2C_Init+0x168>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1e58      	subs	r0, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6859      	ldr	r1, [r3, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	440b      	add	r3, r1
 8002ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	e012      	b.n	800302e <HAL_I2C_Init+0x18e>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1e58      	subs	r0, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	0099      	lsls	r1, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	fbb0 f3f3 	udiv	r3, r0, r3
 800301e:	3301      	adds	r3, #1
 8003020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003024:	2b00      	cmp	r3, #0
 8003026:	bf0c      	ite	eq
 8003028:	2301      	moveq	r3, #1
 800302a:	2300      	movne	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_I2C_Init+0x196>
 8003032:	2301      	movs	r3, #1
 8003034:	e022      	b.n	800307c <HAL_I2C_Init+0x1dc>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10e      	bne.n	800305c <HAL_I2C_Init+0x1bc>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1e58      	subs	r0, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6859      	ldr	r1, [r3, #4]
 8003046:	460b      	mov	r3, r1
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	440b      	add	r3, r1
 800304c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003050:	3301      	adds	r3, #1
 8003052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800305a:	e00f      	b.n	800307c <HAL_I2C_Init+0x1dc>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1e58      	subs	r0, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6859      	ldr	r1, [r3, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	0099      	lsls	r1, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003072:	3301      	adds	r3, #1
 8003074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003078:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	6809      	ldr	r1, [r1, #0]
 8003080:	4313      	orrs	r3, r2
 8003082:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69da      	ldr	r2, [r3, #28]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6911      	ldr	r1, [r2, #16]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68d2      	ldr	r2, [r2, #12]
 80030b6:	4311      	orrs	r1, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	430b      	orrs	r3, r1
 80030be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	000186a0 	.word	0x000186a0
 8003118:	001e847f 	.word	0x001e847f
 800311c:	003d08ff 	.word	0x003d08ff
 8003120:	431bde83 	.word	0x431bde83
 8003124:	10624dd3 	.word	0x10624dd3

08003128 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af02      	add	r7, sp, #8
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	607a      	str	r2, [r7, #4]
 8003132:	461a      	mov	r2, r3
 8003134:	460b      	mov	r3, r1
 8003136:	817b      	strh	r3, [r7, #10]
 8003138:	4613      	mov	r3, r2
 800313a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800313c:	f7ff fb86 	bl	800284c <HAL_GetTick>
 8003140:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b20      	cmp	r3, #32
 800314c:	f040 80e0 	bne.w	8003310 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2319      	movs	r3, #25
 8003156:	2201      	movs	r2, #1
 8003158:	4970      	ldr	r1, [pc, #448]	@ (800331c <HAL_I2C_Master_Transmit+0x1f4>)
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fe0e 	bl	8003d7c <I2C_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003166:	2302      	movs	r3, #2
 8003168:	e0d3      	b.n	8003312 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_I2C_Master_Transmit+0x50>
 8003174:	2302      	movs	r3, #2
 8003176:	e0cc      	b.n	8003312 <HAL_I2C_Master_Transmit+0x1ea>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b01      	cmp	r3, #1
 800318c:	d007      	beq.n	800319e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 0201 	orr.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2221      	movs	r2, #33	@ 0x21
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2210      	movs	r2, #16
 80031ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	893a      	ldrh	r2, [r7, #8]
 80031ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4a50      	ldr	r2, [pc, #320]	@ (8003320 <HAL_I2C_Master_Transmit+0x1f8>)
 80031de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031e0:	8979      	ldrh	r1, [r7, #10]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	6a3a      	ldr	r2, [r7, #32]
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 fbc8 	bl	800397c <I2C_MasterRequestWrite>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e08d      	b.n	8003312 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f6:	2300      	movs	r3, #0
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800320c:	e066      	b.n	80032dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	6a39      	ldr	r1, [r7, #32]
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 fecc 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00d      	beq.n	800323a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	2b04      	cmp	r3, #4
 8003224:	d107      	bne.n	8003236 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003234:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e06b      	b.n	8003312 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323e:	781a      	ldrb	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003262:	3b01      	subs	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b04      	cmp	r3, #4
 8003276:	d11b      	bne.n	80032b0 <HAL_I2C_Master_Transmit+0x188>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327c:	2b00      	cmp	r3, #0
 800327e:	d017      	beq.n	80032b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003284:	781a      	ldrb	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329a:	b29b      	uxth	r3, r3
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	6a39      	ldr	r1, [r7, #32]
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 fec3 	bl	8004040 <I2C_WaitOnBTFFlagUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00d      	beq.n	80032dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d107      	bne.n	80032d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e01a      	b.n	8003312 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d194      	bne.n	800320e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	e000      	b.n	8003312 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003310:	2302      	movs	r3, #2
  }
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	00100002 	.word	0x00100002
 8003320:	ffff0000 	.word	0xffff0000

08003324 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af02      	add	r7, sp, #8
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	4608      	mov	r0, r1
 800332e:	4611      	mov	r1, r2
 8003330:	461a      	mov	r2, r3
 8003332:	4603      	mov	r3, r0
 8003334:	817b      	strh	r3, [r7, #10]
 8003336:	460b      	mov	r3, r1
 8003338:	813b      	strh	r3, [r7, #8]
 800333a:	4613      	mov	r3, r2
 800333c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800333e:	f7ff fa85 	bl	800284c <HAL_GetTick>
 8003342:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b20      	cmp	r3, #32
 800334e:	f040 80d9 	bne.w	8003504 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	2319      	movs	r3, #25
 8003358:	2201      	movs	r2, #1
 800335a:	496d      	ldr	r1, [pc, #436]	@ (8003510 <HAL_I2C_Mem_Write+0x1ec>)
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 fd0d 	bl	8003d7c <I2C_WaitOnFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003368:	2302      	movs	r3, #2
 800336a:	e0cc      	b.n	8003506 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_I2C_Mem_Write+0x56>
 8003376:	2302      	movs	r3, #2
 8003378:	e0c5      	b.n	8003506 <HAL_I2C_Mem_Write+0x1e2>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b01      	cmp	r3, #1
 800338e:	d007      	beq.n	80033a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2221      	movs	r2, #33	@ 0x21
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2240      	movs	r2, #64	@ 0x40
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a3a      	ldr	r2, [r7, #32]
 80033ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80033d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4a4d      	ldr	r2, [pc, #308]	@ (8003514 <HAL_I2C_Mem_Write+0x1f0>)
 80033e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033e2:	88f8      	ldrh	r0, [r7, #6]
 80033e4:	893a      	ldrh	r2, [r7, #8]
 80033e6:	8979      	ldrh	r1, [r7, #10]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	9301      	str	r3, [sp, #4]
 80033ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	4603      	mov	r3, r0
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 fb44 	bl	8003a80 <I2C_RequestMemoryWrite>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d052      	beq.n	80034a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e081      	b.n	8003506 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 fdd2 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00d      	beq.n	800342e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	2b04      	cmp	r3, #4
 8003418:	d107      	bne.n	800342a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003428:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e06b      	b.n	8003506 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003432:	781a      	ldrb	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b04      	cmp	r3, #4
 800346a:	d11b      	bne.n	80034a4 <HAL_I2C_Mem_Write+0x180>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	d017      	beq.n	80034a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	781a      	ldrb	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1aa      	bne.n	8003402 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fdc5 	bl	8004040 <I2C_WaitOnBTFFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00d      	beq.n	80034d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d107      	bne.n	80034d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e016      	b.n	8003506 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	e000      	b.n	8003506 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003504:	2302      	movs	r3, #2
  }
}
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	00100002 	.word	0x00100002
 8003514:	ffff0000 	.word	0xffff0000

08003518 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08c      	sub	sp, #48	@ 0x30
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	4608      	mov	r0, r1
 8003522:	4611      	mov	r1, r2
 8003524:	461a      	mov	r2, r3
 8003526:	4603      	mov	r3, r0
 8003528:	817b      	strh	r3, [r7, #10]
 800352a:	460b      	mov	r3, r1
 800352c:	813b      	strh	r3, [r7, #8]
 800352e:	4613      	mov	r3, r2
 8003530:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003532:	f7ff f98b 	bl	800284c <HAL_GetTick>
 8003536:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b20      	cmp	r3, #32
 8003542:	f040 8214 	bne.w	800396e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2319      	movs	r3, #25
 800354c:	2201      	movs	r2, #1
 800354e:	497b      	ldr	r1, [pc, #492]	@ (800373c <HAL_I2C_Mem_Read+0x224>)
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 fc13 	bl	8003d7c <I2C_WaitOnFlagUntilTimeout>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800355c:	2302      	movs	r3, #2
 800355e:	e207      	b.n	8003970 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_I2C_Mem_Read+0x56>
 800356a:	2302      	movs	r3, #2
 800356c:	e200      	b.n	8003970 <HAL_I2C_Mem_Read+0x458>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b01      	cmp	r3, #1
 8003582:	d007      	beq.n	8003594 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2222      	movs	r2, #34	@ 0x22
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2240      	movs	r2, #64	@ 0x40
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80035c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4a5b      	ldr	r2, [pc, #364]	@ (8003740 <HAL_I2C_Mem_Read+0x228>)
 80035d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035d6:	88f8      	ldrh	r0, [r7, #6]
 80035d8:	893a      	ldrh	r2, [r7, #8]
 80035da:	8979      	ldrh	r1, [r7, #10]
 80035dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035de:	9301      	str	r3, [sp, #4]
 80035e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	4603      	mov	r3, r0
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 fae0 	bl	8003bac <I2C_RequestMemoryRead>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e1bc      	b.n	8003970 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d113      	bne.n	8003626 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035fe:	2300      	movs	r3, #0
 8003600:	623b      	str	r3, [r7, #32]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	623b      	str	r3, [r7, #32]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	623b      	str	r3, [r7, #32]
 8003612:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	e190      	b.n	8003948 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362a:	2b01      	cmp	r3, #1
 800362c:	d11b      	bne.n	8003666 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800363c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	61fb      	str	r3, [r7, #28]
 8003652:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	e170      	b.n	8003948 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800366a:	2b02      	cmp	r3, #2
 800366c:	d11b      	bne.n	80036a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800367c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800368c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368e:	2300      	movs	r3, #0
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	e150      	b.n	8003948 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036bc:	e144      	b.n	8003948 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	f200 80f1 	bhi.w	80038aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d123      	bne.n	8003718 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 fcfb 	bl	80040d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e145      	b.n	8003970 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003716:	e117      	b.n	8003948 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371c:	2b02      	cmp	r3, #2
 800371e:	d14e      	bne.n	80037be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003726:	2200      	movs	r2, #0
 8003728:	4906      	ldr	r1, [pc, #24]	@ (8003744 <HAL_I2C_Mem_Read+0x22c>)
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 fb26 	bl	8003d7c <I2C_WaitOnFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e11a      	b.n	8003970 <HAL_I2C_Mem_Read+0x458>
 800373a:	bf00      	nop
 800373c:	00100002 	.word	0x00100002
 8003740:	ffff0000 	.word	0xffff0000
 8003744:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003756:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	3b01      	subs	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037bc:	e0c4      	b.n	8003948 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c4:	2200      	movs	r2, #0
 80037c6:	496c      	ldr	r1, [pc, #432]	@ (8003978 <HAL_I2C_Mem_Read+0x460>)
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 fad7 	bl	8003d7c <I2C_WaitOnFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0cb      	b.n	8003970 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003820:	2200      	movs	r2, #0
 8003822:	4955      	ldr	r1, [pc, #340]	@ (8003978 <HAL_I2C_Mem_Read+0x460>)
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 faa9 	bl	8003d7c <I2C_WaitOnFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e09d      	b.n	8003970 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003842:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691a      	ldr	r2, [r3, #16]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038a8:	e04e      	b.n	8003948 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 fc0e 	bl	80040d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e058      	b.n	8003970 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d124      	bne.n	8003948 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003902:	2b03      	cmp	r3, #3
 8003904:	d107      	bne.n	8003916 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003914:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800394c:	2b00      	cmp	r3, #0
 800394e:	f47f aeb6 	bne.w	80036be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	e000      	b.n	8003970 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800396e:	2302      	movs	r3, #2
  }
}
 8003970:	4618      	mov	r0, r3
 8003972:	3728      	adds	r7, #40	@ 0x28
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	00010004 	.word	0x00010004

0800397c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af02      	add	r7, sp, #8
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	460b      	mov	r3, r1
 800398a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003990:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d006      	beq.n	80039a6 <I2C_MasterRequestWrite+0x2a>
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d003      	beq.n	80039a6 <I2C_MasterRequestWrite+0x2a>
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039a4:	d108      	bne.n	80039b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	e00b      	b.n	80039d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039bc:	2b12      	cmp	r3, #18
 80039be:	d107      	bne.n	80039d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f9cd 	bl	8003d7c <I2C_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00d      	beq.n	8003a04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039f6:	d103      	bne.n	8003a00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e035      	b.n	8003a70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a0c:	d108      	bne.n	8003a20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a0e:	897b      	ldrh	r3, [r7, #10]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a1c:	611a      	str	r2, [r3, #16]
 8003a1e:	e01b      	b.n	8003a58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a20:	897b      	ldrh	r3, [r7, #10]
 8003a22:	11db      	asrs	r3, r3, #7
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f003 0306 	and.w	r3, r3, #6
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f063 030f 	orn	r3, r3, #15
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	490e      	ldr	r1, [pc, #56]	@ (8003a78 <I2C_MasterRequestWrite+0xfc>)
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 fa16 	bl	8003e70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e010      	b.n	8003a70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a4e:	897b      	ldrh	r3, [r7, #10]
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	4907      	ldr	r1, [pc, #28]	@ (8003a7c <I2C_MasterRequestWrite+0x100>)
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 fa06 	bl	8003e70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	00010008 	.word	0x00010008
 8003a7c:	00010002 	.word	0x00010002

08003a80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	4608      	mov	r0, r1
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4603      	mov	r3, r0
 8003a90:	817b      	strh	r3, [r7, #10]
 8003a92:	460b      	mov	r3, r1
 8003a94:	813b      	strh	r3, [r7, #8]
 8003a96:	4613      	mov	r3, r2
 8003a98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aa8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f960 	bl	8003d7c <I2C_WaitOnFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00d      	beq.n	8003ade <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003acc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ad0:	d103      	bne.n	8003ada <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ad8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e05f      	b.n	8003b9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ade:	897b      	ldrh	r3, [r7, #10]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003aec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af0:	6a3a      	ldr	r2, [r7, #32]
 8003af2:	492d      	ldr	r1, [pc, #180]	@ (8003ba8 <I2C_RequestMemoryWrite+0x128>)
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f9bb 	bl	8003e70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e04c      	b.n	8003b9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b1c:	6a39      	ldr	r1, [r7, #32]
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 fa46 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00d      	beq.n	8003b46 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d107      	bne.n	8003b42 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e02b      	b.n	8003b9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b46:	88fb      	ldrh	r3, [r7, #6]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d105      	bne.n	8003b58 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b4c:	893b      	ldrh	r3, [r7, #8]
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	611a      	str	r2, [r3, #16]
 8003b56:	e021      	b.n	8003b9c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b58:	893b      	ldrh	r3, [r7, #8]
 8003b5a:	0a1b      	lsrs	r3, r3, #8
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b68:	6a39      	ldr	r1, [r7, #32]
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fa20 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00d      	beq.n	8003b92 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d107      	bne.n	8003b8e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e005      	b.n	8003b9e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b92:	893b      	ldrh	r3, [r7, #8]
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	00010002 	.word	0x00010002

08003bac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	4608      	mov	r0, r1
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4603      	mov	r3, r0
 8003bbc:	817b      	strh	r3, [r7, #10]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	813b      	strh	r3, [r7, #8]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003bd4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003be4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f8c2 	bl	8003d7c <I2C_WaitOnFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00d      	beq.n	8003c1a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c0c:	d103      	bne.n	8003c16 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c14:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e0aa      	b.n	8003d70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c1a:	897b      	ldrh	r3, [r7, #10]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2c:	6a3a      	ldr	r2, [r7, #32]
 8003c2e:	4952      	ldr	r1, [pc, #328]	@ (8003d78 <I2C_RequestMemoryRead+0x1cc>)
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 f91d 	bl	8003e70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e097      	b.n	8003d70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c58:	6a39      	ldr	r1, [r7, #32]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f9a8 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d107      	bne.n	8003c7e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e076      	b.n	8003d70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c88:	893b      	ldrh	r3, [r7, #8]
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	611a      	str	r2, [r3, #16]
 8003c92:	e021      	b.n	8003cd8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c94:	893b      	ldrh	r3, [r7, #8]
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca4:	6a39      	ldr	r1, [r7, #32]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f982 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00d      	beq.n	8003cce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d107      	bne.n	8003cca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e050      	b.n	8003d70 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cce:	893b      	ldrh	r3, [r7, #8]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cda:	6a39      	ldr	r1, [r7, #32]
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 f967 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00d      	beq.n	8003d04 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d107      	bne.n	8003d00 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cfe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e035      	b.n	8003d70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d12:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f82b 	bl	8003d7c <I2C_WaitOnFlagUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00d      	beq.n	8003d48 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d3a:	d103      	bne.n	8003d44 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e013      	b.n	8003d70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d48:	897b      	ldrh	r3, [r7, #10]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5a:	6a3a      	ldr	r2, [r7, #32]
 8003d5c:	4906      	ldr	r1, [pc, #24]	@ (8003d78 <I2C_RequestMemoryRead+0x1cc>)
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f886 	bl	8003e70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	00010002 	.word	0x00010002

08003d7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d8c:	e048      	b.n	8003e20 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d94:	d044      	beq.n	8003e20 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d96:	f7fe fd59 	bl	800284c <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d302      	bcc.n	8003dac <I2C_WaitOnFlagUntilTimeout+0x30>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d139      	bne.n	8003e20 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	0c1b      	lsrs	r3, r3, #16
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d10d      	bne.n	8003dd2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	43da      	mvns	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	e00c      	b.n	8003dec <I2C_WaitOnFlagUntilTimeout+0x70>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	43da      	mvns	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	bf0c      	ite	eq
 8003de4:	2301      	moveq	r3, #1
 8003de6:	2300      	movne	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	461a      	mov	r2, r3
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d116      	bne.n	8003e20 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0c:	f043 0220 	orr.w	r2, r3, #32
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e023      	b.n	8003e68 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	0c1b      	lsrs	r3, r3, #16
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d10d      	bne.n	8003e46 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	43da      	mvns	r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4013      	ands	r3, r2
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2301      	moveq	r3, #1
 8003e3e:	2300      	movne	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	e00c      	b.n	8003e60 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	43da      	mvns	r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4013      	ands	r3, r2
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	bf0c      	ite	eq
 8003e58:	2301      	moveq	r3, #1
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d093      	beq.n	8003d8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e7e:	e071      	b.n	8003f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e8e:	d123      	bne.n	8003ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e9e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ea8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec4:	f043 0204 	orr.w	r2, r3, #4
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e067      	b.n	8003fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d041      	beq.n	8003f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee0:	f7fe fcb4 	bl	800284c <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d302      	bcc.n	8003ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d136      	bne.n	8003f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	0c1b      	lsrs	r3, r3, #16
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d10c      	bne.n	8003f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	43da      	mvns	r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	bf14      	ite	ne
 8003f12:	2301      	movne	r3, #1
 8003f14:	2300      	moveq	r3, #0
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	e00b      	b.n	8003f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	43da      	mvns	r2, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4013      	ands	r3, r2
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bf14      	ite	ne
 8003f2c:	2301      	movne	r3, #1
 8003f2e:	2300      	moveq	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d016      	beq.n	8003f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f50:	f043 0220 	orr.w	r2, r3, #32
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e021      	b.n	8003fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	0c1b      	lsrs	r3, r3, #16
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d10c      	bne.n	8003f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	43da      	mvns	r2, r3
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	bf14      	ite	ne
 8003f80:	2301      	movne	r3, #1
 8003f82:	2300      	moveq	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	e00b      	b.n	8003fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	43da      	mvns	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4013      	ands	r3, r2
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bf14      	ite	ne
 8003f9a:	2301      	movne	r3, #1
 8003f9c:	2300      	moveq	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f47f af6d 	bne.w	8003e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fbc:	e034      	b.n	8004028 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f8e3 	bl	800418a <I2C_IsAcknowledgeFailed>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e034      	b.n	8004038 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	d028      	beq.n	8004028 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd6:	f7fe fc39 	bl	800284c <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d302      	bcc.n	8003fec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d11d      	bne.n	8004028 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff6:	2b80      	cmp	r3, #128	@ 0x80
 8003ff8:	d016      	beq.n	8004028 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004014:	f043 0220 	orr.w	r2, r3, #32
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e007      	b.n	8004038 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004032:	2b80      	cmp	r3, #128	@ 0x80
 8004034:	d1c3      	bne.n	8003fbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800404c:	e034      	b.n	80040b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 f89b 	bl	800418a <I2C_IsAcknowledgeFailed>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e034      	b.n	80040c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004064:	d028      	beq.n	80040b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004066:	f7fe fbf1 	bl	800284c <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	429a      	cmp	r2, r3
 8004074:	d302      	bcc.n	800407c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d11d      	bne.n	80040b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	2b04      	cmp	r3, #4
 8004088:	d016      	beq.n	80040b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a4:	f043 0220 	orr.w	r2, r3, #32
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e007      	b.n	80040c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d1c3      	bne.n	800404e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040dc:	e049      	b.n	8004172 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2b10      	cmp	r3, #16
 80040ea:	d119      	bne.n	8004120 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f06f 0210 	mvn.w	r2, #16
 80040f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e030      	b.n	8004182 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004120:	f7fe fb94 	bl	800284c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	429a      	cmp	r2, r3
 800412e:	d302      	bcc.n	8004136 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d11d      	bne.n	8004172 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004140:	2b40      	cmp	r3, #64	@ 0x40
 8004142:	d016      	beq.n	8004172 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2220      	movs	r2, #32
 800414e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	f043 0220 	orr.w	r2, r3, #32
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e007      	b.n	8004182 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417c:	2b40      	cmp	r3, #64	@ 0x40
 800417e:	d1ae      	bne.n	80040de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800419c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041a0:	d11b      	bne.n	80041da <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041aa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c6:	f043 0204 	orr.w	r2, r3, #4
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e128      	b.n	800444c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d109      	bne.n	800421a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a90      	ldr	r2, [pc, #576]	@ (8004454 <HAL_I2S_Init+0x26c>)
 8004212:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7fe f859 	bl	80022cc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2202      	movs	r2, #2
 800421e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6812      	ldr	r2, [r2, #0]
 800422c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004230:	f023 030f 	bic.w	r3, r3, #15
 8004234:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2202      	movs	r2, #2
 800423c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d060      	beq.n	8004308 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800424e:	2310      	movs	r3, #16
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	e001      	b.n	8004258 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004254:	2320      	movs	r3, #32
 8004256:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b20      	cmp	r3, #32
 800425e:	d802      	bhi.n	8004266 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004266:	2001      	movs	r0, #1
 8004268:	f002 fc2a 	bl	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq>
 800426c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004276:	d125      	bne.n	80042c4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d010      	beq.n	80042a2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	fbb2 f2f3 	udiv	r2, r2, r3
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	461a      	mov	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	fbb2 f3f3 	udiv	r3, r2, r3
 800429c:	3305      	adds	r3, #5
 800429e:	613b      	str	r3, [r7, #16]
 80042a0:	e01f      	b.n	80042e2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042ac:	4613      	mov	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	461a      	mov	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80042be:	3305      	adds	r3, #5
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	e00e      	b.n	80042e2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	461a      	mov	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	fbb2 f3f3 	udiv	r3, r2, r3
 80042de:	3305      	adds	r3, #5
 80042e0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4a5c      	ldr	r2, [pc, #368]	@ (8004458 <HAL_I2S_Init+0x270>)
 80042e6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ea:	08db      	lsrs	r3, r3, #3
 80042ec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	085b      	lsrs	r3, r3, #1
 80042fe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	61bb      	str	r3, [r7, #24]
 8004306:	e003      	b.n	8004310 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004308:	2302      	movs	r3, #2
 800430a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d902      	bls.n	800431c <HAL_I2S_Init+0x134>
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	2bff      	cmp	r3, #255	@ 0xff
 800431a:	d907      	bls.n	800432c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004320:	f043 0210 	orr.w	r2, r3, #16
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e08f      	b.n	800444c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	ea42 0103 	orr.w	r1, r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	430a      	orrs	r2, r1
 800433e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800434a:	f023 030f 	bic.w	r3, r3, #15
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6851      	ldr	r1, [r2, #4]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6892      	ldr	r2, [r2, #8]
 8004356:	4311      	orrs	r1, r2
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	68d2      	ldr	r2, [r2, #12]
 800435c:	4311      	orrs	r1, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6992      	ldr	r2, [r2, #24]
 8004362:	430a      	orrs	r2, r1
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800436e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d161      	bne.n	800443c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a38      	ldr	r2, [pc, #224]	@ (800445c <HAL_I2S_Init+0x274>)
 800437c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a37      	ldr	r2, [pc, #220]	@ (8004460 <HAL_I2S_Init+0x278>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d101      	bne.n	800438c <HAL_I2S_Init+0x1a4>
 8004388:	4b36      	ldr	r3, [pc, #216]	@ (8004464 <HAL_I2S_Init+0x27c>)
 800438a:	e001      	b.n	8004390 <HAL_I2S_Init+0x1a8>
 800438c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	4932      	ldr	r1, [pc, #200]	@ (8004460 <HAL_I2S_Init+0x278>)
 8004398:	428a      	cmp	r2, r1
 800439a:	d101      	bne.n	80043a0 <HAL_I2S_Init+0x1b8>
 800439c:	4a31      	ldr	r2, [pc, #196]	@ (8004464 <HAL_I2S_Init+0x27c>)
 800439e:	e001      	b.n	80043a4 <HAL_I2S_Init+0x1bc>
 80043a0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80043a4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80043a8:	f023 030f 	bic.w	r3, r3, #15
 80043ac:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004460 <HAL_I2S_Init+0x278>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d101      	bne.n	80043bc <HAL_I2S_Init+0x1d4>
 80043b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004464 <HAL_I2S_Init+0x27c>)
 80043ba:	e001      	b.n	80043c0 <HAL_I2S_Init+0x1d8>
 80043bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043c0:	2202      	movs	r2, #2
 80043c2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a25      	ldr	r2, [pc, #148]	@ (8004460 <HAL_I2S_Init+0x278>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d101      	bne.n	80043d2 <HAL_I2S_Init+0x1ea>
 80043ce:	4b25      	ldr	r3, [pc, #148]	@ (8004464 <HAL_I2S_Init+0x27c>)
 80043d0:	e001      	b.n	80043d6 <HAL_I2S_Init+0x1ee>
 80043d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043e2:	d003      	beq.n	80043ec <HAL_I2S_Init+0x204>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d103      	bne.n	80043f4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80043ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	e001      	b.n	80043f8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80043f4:	2300      	movs	r3, #0
 80043f6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004402:	4313      	orrs	r3, r2
 8004404:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800440c:	4313      	orrs	r3, r2
 800440e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004416:	4313      	orrs	r3, r2
 8004418:	b29a      	uxth	r2, r3
 800441a:	897b      	ldrh	r3, [r7, #10]
 800441c:	4313      	orrs	r3, r2
 800441e:	b29b      	uxth	r3, r3
 8004420:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004424:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a0d      	ldr	r2, [pc, #52]	@ (8004460 <HAL_I2S_Init+0x278>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d101      	bne.n	8004434 <HAL_I2S_Init+0x24c>
 8004430:	4b0c      	ldr	r3, [pc, #48]	@ (8004464 <HAL_I2S_Init+0x27c>)
 8004432:	e001      	b.n	8004438 <HAL_I2S_Init+0x250>
 8004434:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004438:	897a      	ldrh	r2, [r7, #10]
 800443a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3720      	adds	r7, #32
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	0800455f 	.word	0x0800455f
 8004458:	cccccccd 	.word	0xcccccccd
 800445c:	08004675 	.word	0x08004675
 8004460:	40003800 	.word	0x40003800
 8004464:	40003400 	.word	0x40003400

08004468 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b0:	881a      	ldrh	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044bc:	1c9a      	adds	r2, r3, #2
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10e      	bne.n	80044f8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044e8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff ffb8 	bl	8004468 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80044f8:	bf00      	nop
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004512:	b292      	uxth	r2, r2
 8004514:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451a:	1c9a      	adds	r2, r3, #2
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10e      	bne.n	8004556 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004546:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff ff93 	bl	800447c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b086      	sub	sp, #24
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b04      	cmp	r3, #4
 8004578:	d13a      	bne.n	80045f0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b01      	cmp	r3, #1
 8004582:	d109      	bne.n	8004598 <I2S_IRQHandler+0x3a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800458e:	2b40      	cmp	r3, #64	@ 0x40
 8004590:	d102      	bne.n	8004598 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff ffb4 	bl	8004500 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800459e:	2b40      	cmp	r3, #64	@ 0x40
 80045a0:	d126      	bne.n	80045f0 <I2S_IRQHandler+0x92>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d11f      	bne.n	80045f0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80045c0:	2300      	movs	r3, #0
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	613b      	str	r3, [r7, #16]
 80045d4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e2:	f043 0202 	orr.w	r2, r3, #2
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff ff50 	bl	8004490 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d136      	bne.n	800466a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b02      	cmp	r3, #2
 8004604:	d109      	bne.n	800461a <I2S_IRQHandler+0xbc>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004610:	2b80      	cmp	r3, #128	@ 0x80
 8004612:	d102      	bne.n	800461a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff ff45 	bl	80044a4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b08      	cmp	r3, #8
 8004622:	d122      	bne.n	800466a <I2S_IRQHandler+0x10c>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b20      	cmp	r3, #32
 8004630:	d11b      	bne.n	800466a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004640:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004642:	2300      	movs	r3, #0
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465c:	f043 0204 	orr.w	r2, r3, #4
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff ff13 	bl	8004490 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800466a:	bf00      	nop
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a92      	ldr	r2, [pc, #584]	@ (80048d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d101      	bne.n	8004692 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800468e:	4b92      	ldr	r3, [pc, #584]	@ (80048d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004690:	e001      	b.n	8004696 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004692:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a8b      	ldr	r2, [pc, #556]	@ (80048d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d101      	bne.n	80046b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80046ac:	4b8a      	ldr	r3, [pc, #552]	@ (80048d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046ae:	e001      	b.n	80046b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80046b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046c0:	d004      	beq.n	80046cc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f040 8099 	bne.w	80047fe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d107      	bne.n	80046e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f925 	bl	8004930 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d107      	bne.n	8004700 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f9c8 	bl	8004a90 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004706:	2b40      	cmp	r3, #64	@ 0x40
 8004708:	d13a      	bne.n	8004780 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f003 0320 	and.w	r3, r3, #32
 8004710:	2b00      	cmp	r3, #0
 8004712:	d035      	beq.n	8004780 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a6e      	ldr	r2, [pc, #440]	@ (80048d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d101      	bne.n	8004722 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800471e:	4b6e      	ldr	r3, [pc, #440]	@ (80048d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004720:	e001      	b.n	8004726 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004722:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4969      	ldr	r1, [pc, #420]	@ (80048d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800472e:	428b      	cmp	r3, r1
 8004730:	d101      	bne.n	8004736 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004732:	4b69      	ldr	r3, [pc, #420]	@ (80048d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004734:	e001      	b.n	800473a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004736:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800473a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800473e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800474e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004772:	f043 0202 	orr.w	r2, r3, #2
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff fe88 	bl	8004490 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b08      	cmp	r3, #8
 8004788:	f040 80c3 	bne.w	8004912 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 80bd 	beq.w	8004912 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a49      	ldr	r2, [pc, #292]	@ (80048d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d101      	bne.n	80047b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80047b2:	4b49      	ldr	r3, [pc, #292]	@ (80048d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047b4:	e001      	b.n	80047ba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80047b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4944      	ldr	r1, [pc, #272]	@ (80048d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047c2:	428b      	cmp	r3, r1
 80047c4:	d101      	bne.n	80047ca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80047c6:	4b44      	ldr	r3, [pc, #272]	@ (80048d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047c8:	e001      	b.n	80047ce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80047ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047ce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047d2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80047d4:	2300      	movs	r3, #0
 80047d6:	60bb      	str	r3, [r7, #8]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	60bb      	str	r3, [r7, #8]
 80047e0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ee:	f043 0204 	orr.w	r2, r3, #4
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7ff fe4a 	bl	8004490 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80047fc:	e089      	b.n	8004912 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b02      	cmp	r3, #2
 8004806:	d107      	bne.n	8004818 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f8be 	bl	8004994 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b01      	cmp	r3, #1
 8004820:	d107      	bne.n	8004832 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f8fd 	bl	8004a2c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004838:	2b40      	cmp	r3, #64	@ 0x40
 800483a:	d12f      	bne.n	800489c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b00      	cmp	r3, #0
 8004844:	d02a      	beq.n	800489c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004854:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a1e      	ldr	r2, [pc, #120]	@ (80048d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d101      	bne.n	8004864 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004860:	4b1d      	ldr	r3, [pc, #116]	@ (80048d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004862:	e001      	b.n	8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004864:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4919      	ldr	r1, [pc, #100]	@ (80048d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004870:	428b      	cmp	r3, r1
 8004872:	d101      	bne.n	8004878 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004874:	4b18      	ldr	r3, [pc, #96]	@ (80048d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004876:	e001      	b.n	800487c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004878:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800487c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004880:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488e:	f043 0202 	orr.w	r2, r3, #2
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff fdfa 	bl	8004490 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d136      	bne.n	8004914 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d031      	beq.n	8004914 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a07      	ldr	r2, [pc, #28]	@ (80048d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d101      	bne.n	80048be <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80048ba:	4b07      	ldr	r3, [pc, #28]	@ (80048d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048bc:	e001      	b.n	80048c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80048be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4902      	ldr	r1, [pc, #8]	@ (80048d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048ca:	428b      	cmp	r3, r1
 80048cc:	d106      	bne.n	80048dc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80048ce:	4b02      	ldr	r3, [pc, #8]	@ (80048d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048d0:	e006      	b.n	80048e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80048d2:	bf00      	nop
 80048d4:	40003800 	.word	0x40003800
 80048d8:	40003400 	.word	0x40003400
 80048dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048e4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80048f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004902:	f043 0204 	orr.w	r2, r3, #4
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7ff fdc0 	bl	8004490 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004910:	e000      	b.n	8004914 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004912:	bf00      	nop
}
 8004914:	bf00      	nop
 8004916:	3720      	adds	r7, #32
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493c:	1c99      	adds	r1, r3, #2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6251      	str	r1, [r2, #36]	@ 0x24
 8004942:	881a      	ldrh	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d113      	bne.n	800498a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004970:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004976:	b29b      	uxth	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d106      	bne.n	800498a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff ffc9 	bl	800491c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a0:	1c99      	adds	r1, r3, #2
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6251      	str	r1, [r2, #36]	@ 0x24
 80049a6:	8819      	ldrh	r1, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004a24 <I2SEx_TxISR_I2SExt+0x90>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d101      	bne.n	80049b6 <I2SEx_TxISR_I2SExt+0x22>
 80049b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004a28 <I2SEx_TxISR_I2SExt+0x94>)
 80049b4:	e001      	b.n	80049ba <I2SEx_TxISR_I2SExt+0x26>
 80049b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049ba:	460a      	mov	r2, r1
 80049bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d121      	bne.n	8004a1a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a12      	ldr	r2, [pc, #72]	@ (8004a24 <I2SEx_TxISR_I2SExt+0x90>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d101      	bne.n	80049e4 <I2SEx_TxISR_I2SExt+0x50>
 80049e0:	4b11      	ldr	r3, [pc, #68]	@ (8004a28 <I2SEx_TxISR_I2SExt+0x94>)
 80049e2:	e001      	b.n	80049e8 <I2SEx_TxISR_I2SExt+0x54>
 80049e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	490d      	ldr	r1, [pc, #52]	@ (8004a24 <I2SEx_TxISR_I2SExt+0x90>)
 80049f0:	428b      	cmp	r3, r1
 80049f2:	d101      	bne.n	80049f8 <I2SEx_TxISR_I2SExt+0x64>
 80049f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a28 <I2SEx_TxISR_I2SExt+0x94>)
 80049f6:	e001      	b.n	80049fc <I2SEx_TxISR_I2SExt+0x68>
 80049f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d106      	bne.n	8004a1a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff ff81 	bl	800491c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a1a:	bf00      	nop
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40003800 	.word	0x40003800
 8004a28:	40003400 	.word	0x40003400

08004a2c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68d8      	ldr	r0, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3e:	1c99      	adds	r1, r3, #2
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004a44:	b282      	uxth	r2, r0
 8004a46:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d113      	bne.n	8004a88 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a6e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff ff4a 	bl	800491c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a88:	bf00      	nop
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a20      	ldr	r2, [pc, #128]	@ (8004b20 <I2SEx_RxISR_I2SExt+0x90>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d101      	bne.n	8004aa6 <I2SEx_RxISR_I2SExt+0x16>
 8004aa2:	4b20      	ldr	r3, [pc, #128]	@ (8004b24 <I2SEx_RxISR_I2SExt+0x94>)
 8004aa4:	e001      	b.n	8004aaa <I2SEx_RxISR_I2SExt+0x1a>
 8004aa6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004aaa:	68d8      	ldr	r0, [r3, #12]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab0:	1c99      	adds	r1, r3, #2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004ab6:	b282      	uxth	r2, r0
 8004ab8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d121      	bne.n	8004b16 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a12      	ldr	r2, [pc, #72]	@ (8004b20 <I2SEx_RxISR_I2SExt+0x90>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d101      	bne.n	8004ae0 <I2SEx_RxISR_I2SExt+0x50>
 8004adc:	4b11      	ldr	r3, [pc, #68]	@ (8004b24 <I2SEx_RxISR_I2SExt+0x94>)
 8004ade:	e001      	b.n	8004ae4 <I2SEx_RxISR_I2SExt+0x54>
 8004ae0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	490d      	ldr	r1, [pc, #52]	@ (8004b20 <I2SEx_RxISR_I2SExt+0x90>)
 8004aec:	428b      	cmp	r3, r1
 8004aee:	d101      	bne.n	8004af4 <I2SEx_RxISR_I2SExt+0x64>
 8004af0:	4b0c      	ldr	r3, [pc, #48]	@ (8004b24 <I2SEx_RxISR_I2SExt+0x94>)
 8004af2:	e001      	b.n	8004af8 <I2SEx_RxISR_I2SExt+0x68>
 8004af4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004af8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004afc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d106      	bne.n	8004b16 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff ff03 	bl	800491c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	40003800 	.word	0x40003800
 8004b24:	40003400 	.word	0x40003400

08004b28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e101      	b.n	8004d3e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d106      	bne.n	8004b5a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f006 f81b 	bl	800ab90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2203      	movs	r2, #3
 8004b5e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b68:	d102      	bne.n	8004b70 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f002 fc68 	bl	800744a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6818      	ldr	r0, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	7c1a      	ldrb	r2, [r3, #16]
 8004b82:	f88d 2000 	strb.w	r2, [sp]
 8004b86:	3304      	adds	r3, #4
 8004b88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b8a:	f002 fb47 	bl	800721c <USB_CoreInit>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d005      	beq.n	8004ba0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0ce      	b.n	8004d3e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f002 fc60 	bl	800746c <USB_SetCurrentMode>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e0bf      	b.n	8004d3e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	73fb      	strb	r3, [r7, #15]
 8004bc2:	e04a      	b.n	8004c5a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004bc4:	7bfa      	ldrb	r2, [r7, #15]
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	4413      	add	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	3315      	adds	r3, #21
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004bd8:	7bfa      	ldrb	r2, [r7, #15]
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	3314      	adds	r3, #20
 8004be8:	7bfa      	ldrb	r2, [r7, #15]
 8004bea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004bec:	7bfa      	ldrb	r2, [r7, #15]
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	b298      	uxth	r0, r3
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	332e      	adds	r3, #46	@ 0x2e
 8004c00:	4602      	mov	r2, r0
 8004c02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c04:	7bfa      	ldrb	r2, [r7, #15]
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	3318      	adds	r3, #24
 8004c14:	2200      	movs	r2, #0
 8004c16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c18:	7bfa      	ldrb	r2, [r7, #15]
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	331c      	adds	r3, #28
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c2c:	7bfa      	ldrb	r2, [r7, #15]
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	4613      	mov	r3, r2
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	440b      	add	r3, r1
 8004c3a:	3320      	adds	r3, #32
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c40:	7bfa      	ldrb	r2, [r7, #15]
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	3324      	adds	r3, #36	@ 0x24
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
 8004c56:	3301      	adds	r3, #1
 8004c58:	73fb      	strb	r3, [r7, #15]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	791b      	ldrb	r3, [r3, #4]
 8004c5e:	7bfa      	ldrb	r2, [r7, #15]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d3af      	bcc.n	8004bc4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c64:	2300      	movs	r3, #0
 8004c66:	73fb      	strb	r3, [r7, #15]
 8004c68:	e044      	b.n	8004cf4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c6a:	7bfa      	ldrb	r2, [r7, #15]
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c80:	7bfa      	ldrb	r2, [r7, #15]
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	4613      	mov	r3, r2
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004c92:	7bfa      	ldrb	r2, [r7, #15]
 8004c94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c96:	7bfa      	ldrb	r2, [r7, #15]
 8004c98:	6879      	ldr	r1, [r7, #4]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	4413      	add	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	440b      	add	r3, r1
 8004ca4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004ca8:	2200      	movs	r2, #0
 8004caa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004cac:	7bfa      	ldrb	r2, [r7, #15]
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004cc2:	7bfa      	ldrb	r2, [r7, #15]
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cd8:	7bfa      	ldrb	r2, [r7, #15]
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	73fb      	strb	r3, [r7, #15]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	791b      	ldrb	r3, [r3, #4]
 8004cf8:	7bfa      	ldrb	r2, [r7, #15]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d3b5      	bcc.n	8004c6a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	7c1a      	ldrb	r2, [r3, #16]
 8004d06:	f88d 2000 	strb.w	r2, [sp]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d0e:	f002 fbf9 	bl	8007504 <USB_DevInit>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e00c      	b.n	8004d3e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f003 fc43 	bl	80085c2 <USB_DevDisconnect>

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b084      	sub	sp, #16
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d101      	bne.n	8004d62 <HAL_PCD_Start+0x1c>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e022      	b.n	8004da8 <HAL_PCD_Start+0x62>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d009      	beq.n	8004d8a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d105      	bne.n	8004d8a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d82:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f002 fb4a 	bl	8007428 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f003 fbf1 	bl	8008580 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004db0:	b590      	push	{r4, r7, lr}
 8004db2:	b08d      	sub	sp, #52	@ 0x34
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f003 fcaf 	bl	800872a <USB_GetMode>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f040 848c 	bne.w	80056ec <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f003 fc13 	bl	8008604 <USB_ReadInterrupts>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 8482 	beq.w	80056ea <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	0a1b      	lsrs	r3, r3, #8
 8004df0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f003 fc00 	bl	8008604 <USB_ReadInterrupts>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d107      	bne.n	8004e1e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695a      	ldr	r2, [r3, #20]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f002 0202 	and.w	r2, r2, #2
 8004e1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f003 fbee 	bl	8008604 <USB_ReadInterrupts>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	2b10      	cmp	r3, #16
 8004e30:	d161      	bne.n	8004ef6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	699a      	ldr	r2, [r3, #24]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0210 	bic.w	r2, r2, #16
 8004e40:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	f003 020f 	and.w	r2, r3, #15
 8004e4e:	4613      	mov	r3, r2
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	4413      	add	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	3304      	adds	r3, #4
 8004e60:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	0c5b      	lsrs	r3, r3, #17
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d124      	bne.n	8004eb8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004e74:	4013      	ands	r3, r2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d035      	beq.n	8004ee6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	091b      	lsrs	r3, r3, #4
 8004e82:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	6a38      	ldr	r0, [r7, #32]
 8004e8e:	f003 fa25 	bl	80082dc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	091b      	lsrs	r3, r3, #4
 8004e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e9e:	441a      	add	r2, r3
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	695a      	ldr	r2, [r3, #20]
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	091b      	lsrs	r3, r3, #4
 8004eac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004eb0:	441a      	add	r2, r3
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	615a      	str	r2, [r3, #20]
 8004eb6:	e016      	b.n	8004ee6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	0c5b      	lsrs	r3, r3, #17
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	2b06      	cmp	r3, #6
 8004ec2:	d110      	bne.n	8004ee6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004eca:	2208      	movs	r2, #8
 8004ecc:	4619      	mov	r1, r3
 8004ece:	6a38      	ldr	r0, [r7, #32]
 8004ed0:	f003 fa04 	bl	80082dc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	695a      	ldr	r2, [r3, #20]
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	091b      	lsrs	r3, r3, #4
 8004edc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ee0:	441a      	add	r2, r3
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699a      	ldr	r2, [r3, #24]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 0210 	orr.w	r2, r2, #16
 8004ef4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f003 fb82 	bl	8008604 <USB_ReadInterrupts>
 8004f00:	4603      	mov	r3, r0
 8004f02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f06:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f0a:	f040 80a7 	bne.w	800505c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f003 fb87 	bl	800862a <USB_ReadDevAllOutEpInterrupt>
 8004f1c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004f1e:	e099      	b.n	8005054 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 808e 	beq.w	8005048 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	4611      	mov	r1, r2
 8004f36:	4618      	mov	r0, r3
 8004f38:	f003 fbab 	bl	8008692 <USB_ReadDevOutEPInterrupt>
 8004f3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00c      	beq.n	8004f62 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f54:	461a      	mov	r2, r3
 8004f56:	2301      	movs	r3, #1
 8004f58:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004f5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fea3 	bl	8005ca8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00c      	beq.n	8004f86 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f78:	461a      	mov	r2, r3
 8004f7a:	2308      	movs	r3, #8
 8004f7c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004f7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 ff79 	bl	8005e78 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f003 0310 	and.w	r3, r3, #16
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	2310      	movs	r3, #16
 8004fa0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d030      	beq.n	800500e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb4:	2b80      	cmp	r3, #128	@ 0x80
 8004fb6:	d109      	bne.n	8004fcc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	69fa      	ldr	r2, [r7, #28]
 8004fc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fce:	4613      	mov	r3, r2
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	4413      	add	r3, r2
 8004fde:	3304      	adds	r3, #4
 8004fe0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	78db      	ldrb	r3, [r3, #3]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d108      	bne.n	8004ffc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2200      	movs	r2, #0
 8004fee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f005 fede 	bl	800adb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005008:	461a      	mov	r2, r3
 800500a:	2302      	movs	r3, #2
 800500c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f003 0320 	and.w	r3, r3, #32
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005024:	461a      	mov	r2, r3
 8005026:	2320      	movs	r3, #32
 8005028:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d009      	beq.n	8005048 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005040:	461a      	mov	r2, r3
 8005042:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005046:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504a:	3301      	adds	r3, #1
 800504c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800504e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005050:	085b      	lsrs	r3, r3, #1
 8005052:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005056:	2b00      	cmp	r3, #0
 8005058:	f47f af62 	bne.w	8004f20 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f003 facf 	bl	8008604 <USB_ReadInterrupts>
 8005066:	4603      	mov	r3, r0
 8005068:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800506c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005070:	f040 80db 	bne.w	800522a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4618      	mov	r0, r3
 800507a:	f003 faf0 	bl	800865e <USB_ReadDevAllInEpInterrupt>
 800507e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005084:	e0cd      	b.n	8005222 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 80c2 	beq.w	8005216 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	4611      	mov	r1, r2
 800509c:	4618      	mov	r0, r3
 800509e:	f003 fb16 	bl	80086ce <USB_ReadDevInEPInterrupt>
 80050a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d057      	beq.n	800515e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	2201      	movs	r2, #1
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	43db      	mvns	r3, r3
 80050c8:	69f9      	ldr	r1, [r7, #28]
 80050ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050ce:	4013      	ands	r3, r2
 80050d0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80050d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050de:	461a      	mov	r2, r3
 80050e0:	2301      	movs	r3, #1
 80050e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	799b      	ldrb	r3, [r3, #6]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d132      	bne.n	8005152 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050f0:	4613      	mov	r3, r2
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	4413      	add	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	440b      	add	r3, r1
 80050fa:	3320      	adds	r3, #32
 80050fc:	6819      	ldr	r1, [r3, #0]
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005102:	4613      	mov	r3, r2
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	4413      	add	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4403      	add	r3, r0
 800510c:	331c      	adds	r3, #28
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4419      	add	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005116:	4613      	mov	r3, r2
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	4413      	add	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4403      	add	r3, r0
 8005120:	3320      	adds	r3, #32
 8005122:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	2b00      	cmp	r3, #0
 8005128:	d113      	bne.n	8005152 <HAL_PCD_IRQHandler+0x3a2>
 800512a:	6879      	ldr	r1, [r7, #4]
 800512c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800512e:	4613      	mov	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	3324      	adds	r3, #36	@ 0x24
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d108      	bne.n	8005152 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6818      	ldr	r0, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800514a:	461a      	mov	r2, r3
 800514c:	2101      	movs	r1, #1
 800514e:	f003 fb1d 	bl	800878c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005154:	b2db      	uxtb	r3, r3
 8005156:	4619      	mov	r1, r3
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f005 fda8 	bl	800acae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b00      	cmp	r3, #0
 8005166:	d008      	beq.n	800517a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005174:	461a      	mov	r2, r3
 8005176:	2308      	movs	r3, #8
 8005178:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f003 0310 	and.w	r3, r3, #16
 8005180:	2b00      	cmp	r3, #0
 8005182:	d008      	beq.n	8005196 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005190:	461a      	mov	r2, r3
 8005192:	2310      	movs	r3, #16
 8005194:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800519c:	2b00      	cmp	r3, #0
 800519e:	d008      	beq.n	80051b2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80051a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ac:	461a      	mov	r2, r3
 80051ae:	2340      	movs	r3, #64	@ 0x40
 80051b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d023      	beq.n	8005204 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80051bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051be:	6a38      	ldr	r0, [r7, #32]
 80051c0:	f002 fb04 	bl	80077cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80051c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051c6:	4613      	mov	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	3310      	adds	r3, #16
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	4413      	add	r3, r2
 80051d4:	3304      	adds	r3, #4
 80051d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	78db      	ldrb	r3, [r3, #3]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d108      	bne.n	80051f2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2200      	movs	r2, #0
 80051e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80051e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	4619      	mov	r1, r3
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f005 fdf5 	bl	800addc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051fe:	461a      	mov	r2, r3
 8005200:	2302      	movs	r3, #2
 8005202:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800520e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fcbd 	bl	8005b90 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005218:	3301      	adds	r3, #1
 800521a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800521c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521e:	085b      	lsrs	r3, r3, #1
 8005220:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005224:	2b00      	cmp	r3, #0
 8005226:	f47f af2e 	bne.w	8005086 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4618      	mov	r0, r3
 8005230:	f003 f9e8 	bl	8008604 <USB_ReadInterrupts>
 8005234:	4603      	mov	r3, r0
 8005236:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800523a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800523e:	d122      	bne.n	8005286 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	69fa      	ldr	r2, [r7, #28]
 800524a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800524e:	f023 0301 	bic.w	r3, r3, #1
 8005252:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800525a:	2b01      	cmp	r3, #1
 800525c:	d108      	bne.n	8005270 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005266:	2100      	movs	r1, #0
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fea3 	bl	8005fb4 <HAL_PCDEx_LPM_Callback>
 800526e:	e002      	b.n	8005276 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f005 fd93 	bl	800ad9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695a      	ldr	r2, [r3, #20]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005284:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f003 f9ba 	bl	8008604 <USB_ReadInterrupts>
 8005290:	4603      	mov	r3, r0
 8005292:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005296:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800529a:	d112      	bne.n	80052c2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d102      	bne.n	80052b2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f005 fd4f 	bl	800ad50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695a      	ldr	r2, [r3, #20]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80052c0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f003 f99c 	bl	8008604 <USB_ReadInterrupts>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052d6:	f040 80b7 	bne.w	8005448 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052e8:	f023 0301 	bic.w	r3, r3, #1
 80052ec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2110      	movs	r1, #16
 80052f4:	4618      	mov	r0, r3
 80052f6:	f002 fa69 	bl	80077cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052fa:	2300      	movs	r3, #0
 80052fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052fe:	e046      	b.n	800538e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800530c:	461a      	mov	r2, r3
 800530e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005312:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005324:	0151      	lsls	r1, r2, #5
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	440a      	add	r2, r1
 800532a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800532e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005332:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005340:	461a      	mov	r2, r3
 8005342:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005346:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005358:	0151      	lsls	r1, r2, #5
 800535a:	69fa      	ldr	r2, [r7, #28]
 800535c:	440a      	add	r2, r1
 800535e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005362:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005366:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005378:	0151      	lsls	r1, r2, #5
 800537a:	69fa      	ldr	r2, [r7, #28]
 800537c:	440a      	add	r2, r1
 800537e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005382:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005386:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538a:	3301      	adds	r3, #1
 800538c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	791b      	ldrb	r3, [r3, #4]
 8005392:	461a      	mov	r2, r3
 8005394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005396:	4293      	cmp	r3, r2
 8005398:	d3b2      	bcc.n	8005300 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053a8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80053ac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	7bdb      	ldrb	r3, [r3, #15]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d016      	beq.n	80053e4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053c0:	69fa      	ldr	r2, [r7, #28]
 80053c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053c6:	f043 030b 	orr.w	r3, r3, #11
 80053ca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d6:	69fa      	ldr	r2, [r7, #28]
 80053d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053dc:	f043 030b 	orr.w	r3, r3, #11
 80053e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80053e2:	e015      	b.n	8005410 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80053f6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80053fa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800540a:	f043 030b 	orr.w	r3, r3, #11
 800540e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	69fa      	ldr	r2, [r7, #28]
 800541a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800541e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005422:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005432:	461a      	mov	r2, r3
 8005434:	f003 f9aa 	bl	800878c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695a      	ldr	r2, [r3, #20]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005446:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4618      	mov	r0, r3
 800544e:	f003 f8d9 	bl	8008604 <USB_ReadInterrupts>
 8005452:	4603      	mov	r3, r0
 8005454:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005458:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800545c:	d123      	bne.n	80054a6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f003 f96f 	bl	8008746 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4618      	mov	r0, r3
 800546e:	f002 fa26 	bl	80078be <USB_GetDevSpeed>
 8005472:	4603      	mov	r3, r0
 8005474:	461a      	mov	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681c      	ldr	r4, [r3, #0]
 800547e:	f001 fa09 	bl	8006894 <HAL_RCC_GetHCLKFreq>
 8005482:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005488:	461a      	mov	r2, r3
 800548a:	4620      	mov	r0, r4
 800548c:	f001 ff2a 	bl	80072e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f005 fc34 	bl	800acfe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695a      	ldr	r2, [r3, #20]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80054a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f003 f8aa 	bl	8008604 <USB_ReadInterrupts>
 80054b0:	4603      	mov	r3, r0
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d10a      	bne.n	80054d0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f005 fc11 	bl	800ace2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695a      	ldr	r2, [r3, #20]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f002 0208 	and.w	r2, r2, #8
 80054ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f003 f895 	bl	8008604 <USB_ReadInterrupts>
 80054da:	4603      	mov	r3, r0
 80054dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e0:	2b80      	cmp	r3, #128	@ 0x80
 80054e2:	d123      	bne.n	800552c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054f0:	2301      	movs	r3, #1
 80054f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054f4:	e014      	b.n	8005520 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054fa:	4613      	mov	r3, r2
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	440b      	add	r3, r1
 8005504:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d105      	bne.n	800551a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005510:	b2db      	uxtb	r3, r3
 8005512:	4619      	mov	r1, r3
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fb0a 	bl	8005b2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551c:	3301      	adds	r3, #1
 800551e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	791b      	ldrb	r3, [r3, #4]
 8005524:	461a      	mov	r2, r3
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	4293      	cmp	r3, r2
 800552a:	d3e4      	bcc.n	80054f6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4618      	mov	r0, r3
 8005532:	f003 f867 	bl	8008604 <USB_ReadInterrupts>
 8005536:	4603      	mov	r3, r0
 8005538:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800553c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005540:	d13c      	bne.n	80055bc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005542:	2301      	movs	r3, #1
 8005544:	627b      	str	r3, [r7, #36]	@ 0x24
 8005546:	e02b      	b.n	80055a0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800555c:	4613      	mov	r3, r2
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	4413      	add	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	440b      	add	r3, r1
 8005566:	3318      	adds	r3, #24
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d115      	bne.n	800559a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800556e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005570:	2b00      	cmp	r3, #0
 8005572:	da12      	bge.n	800559a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005574:	6879      	ldr	r1, [r7, #4]
 8005576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005578:	4613      	mov	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	3317      	adds	r3, #23
 8005584:	2201      	movs	r2, #1
 8005586:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558a:	b2db      	uxtb	r3, r3
 800558c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005590:	b2db      	uxtb	r3, r3
 8005592:	4619      	mov	r1, r3
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 faca 	bl	8005b2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800559a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559c:	3301      	adds	r3, #1
 800559e:	627b      	str	r3, [r7, #36]	@ 0x24
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	791b      	ldrb	r3, [r3, #4]
 80055a4:	461a      	mov	r2, r3
 80055a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d3cd      	bcc.n	8005548 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695a      	ldr	r2, [r3, #20]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80055ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f003 f81f 	bl	8008604 <USB_ReadInterrupts>
 80055c6:	4603      	mov	r3, r0
 80055c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055d0:	d156      	bne.n	8005680 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055d2:	2301      	movs	r3, #1
 80055d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80055d6:	e045      	b.n	8005664 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80055d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ec:	4613      	mov	r3, r2
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	440b      	add	r3, r1
 80055f6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d12e      	bne.n	800565e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005600:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005602:	2b00      	cmp	r3, #0
 8005604:	da2b      	bge.n	800565e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005612:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005616:	429a      	cmp	r2, r3
 8005618:	d121      	bne.n	800565e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800561e:	4613      	mov	r3, r2
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	4413      	add	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	440b      	add	r3, r1
 8005628:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800562c:	2201      	movs	r2, #1
 800562e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005656:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800565a:	6053      	str	r3, [r2, #4]
            break;
 800565c:	e008      	b.n	8005670 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800565e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005660:	3301      	adds	r3, #1
 8005662:	627b      	str	r3, [r7, #36]	@ 0x24
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	791b      	ldrb	r3, [r3, #4]
 8005668:	461a      	mov	r2, r3
 800566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566c:	4293      	cmp	r3, r2
 800566e:	d3b3      	bcc.n	80055d8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695a      	ldr	r2, [r3, #20]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800567e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4618      	mov	r0, r3
 8005686:	f002 ffbd 	bl	8008604 <USB_ReadInterrupts>
 800568a:	4603      	mov	r3, r0
 800568c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005694:	d10a      	bne.n	80056ac <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f005 fbb2 	bl	800ae00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695a      	ldr	r2, [r3, #20]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80056aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f002 ffa7 	bl	8008604 <USB_ReadInterrupts>
 80056b6:	4603      	mov	r3, r0
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b04      	cmp	r3, #4
 80056be:	d115      	bne.n	80056ec <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	f003 0304 	and.w	r3, r3, #4
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f005 fba2 	bl	800ae1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6859      	ldr	r1, [r3, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	605a      	str	r2, [r3, #4]
 80056e8:	e000      	b.n	80056ec <HAL_PCD_IRQHandler+0x93c>
      return;
 80056ea:	bf00      	nop
    }
  }
}
 80056ec:	3734      	adds	r7, #52	@ 0x34
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd90      	pop	{r4, r7, pc}

080056f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b082      	sub	sp, #8
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	460b      	mov	r3, r1
 80056fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_PCD_SetAddress+0x1a>
 8005708:	2302      	movs	r3, #2
 800570a:	e012      	b.n	8005732 <HAL_PCD_SetAddress+0x40>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	78fa      	ldrb	r2, [r7, #3]
 8005718:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	78fa      	ldrb	r2, [r7, #3]
 8005720:	4611      	mov	r1, r2
 8005722:	4618      	mov	r0, r3
 8005724:	f002 ff06 	bl	8008534 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b084      	sub	sp, #16
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	4608      	mov	r0, r1
 8005744:	4611      	mov	r1, r2
 8005746:	461a      	mov	r2, r3
 8005748:	4603      	mov	r3, r0
 800574a:	70fb      	strb	r3, [r7, #3]
 800574c:	460b      	mov	r3, r1
 800574e:	803b      	strh	r3, [r7, #0]
 8005750:	4613      	mov	r3, r2
 8005752:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005758:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800575c:	2b00      	cmp	r3, #0
 800575e:	da0f      	bge.n	8005780 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005760:	78fb      	ldrb	r3, [r7, #3]
 8005762:	f003 020f 	and.w	r2, r3, #15
 8005766:	4613      	mov	r3, r2
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	4413      	add	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	3310      	adds	r3, #16
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	4413      	add	r3, r2
 8005774:	3304      	adds	r3, #4
 8005776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2201      	movs	r2, #1
 800577c:	705a      	strb	r2, [r3, #1]
 800577e:	e00f      	b.n	80057a0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005780:	78fb      	ldrb	r3, [r7, #3]
 8005782:	f003 020f 	and.w	r2, r3, #15
 8005786:	4613      	mov	r3, r2
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	4413      	add	r3, r2
 8005796:	3304      	adds	r3, #4
 8005798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80057ac:	883b      	ldrh	r3, [r7, #0]
 80057ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	78ba      	ldrb	r2, [r7, #2]
 80057ba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	785b      	ldrb	r3, [r3, #1]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d004      	beq.n	80057ce <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	461a      	mov	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80057ce:	78bb      	ldrb	r3, [r7, #2]
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d102      	bne.n	80057da <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <HAL_PCD_EP_Open+0xae>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e00e      	b.n	8005806 <HAL_PCD_EP_Open+0xcc>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68f9      	ldr	r1, [r7, #12]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f002 f886 	bl	8007908 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005804:	7afb      	ldrb	r3, [r7, #11]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	460b      	mov	r3, r1
 8005818:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800581a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800581e:	2b00      	cmp	r3, #0
 8005820:	da0f      	bge.n	8005842 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005822:	78fb      	ldrb	r3, [r7, #3]
 8005824:	f003 020f 	and.w	r2, r3, #15
 8005828:	4613      	mov	r3, r2
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	3310      	adds	r3, #16
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	4413      	add	r3, r2
 8005836:	3304      	adds	r3, #4
 8005838:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	705a      	strb	r2, [r3, #1]
 8005840:	e00f      	b.n	8005862 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005842:	78fb      	ldrb	r3, [r7, #3]
 8005844:	f003 020f 	and.w	r2, r3, #15
 8005848:	4613      	mov	r3, r2
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	4413      	add	r3, r2
 8005858:	3304      	adds	r3, #4
 800585a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005862:	78fb      	ldrb	r3, [r7, #3]
 8005864:	f003 030f 	and.w	r3, r3, #15
 8005868:	b2da      	uxtb	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_PCD_EP_Close+0x6e>
 8005878:	2302      	movs	r3, #2
 800587a:	e00e      	b.n	800589a <HAL_PCD_EP_Close+0x8c>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68f9      	ldr	r1, [r7, #12]
 800588a:	4618      	mov	r0, r3
 800588c:	f002 f8c4 	bl	8007a18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b086      	sub	sp, #24
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	603b      	str	r3, [r7, #0]
 80058ae:	460b      	mov	r3, r1
 80058b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058b2:	7afb      	ldrb	r3, [r7, #11]
 80058b4:	f003 020f 	and.w	r2, r3, #15
 80058b8:	4613      	mov	r3, r2
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	4413      	add	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4413      	add	r3, r2
 80058c8:	3304      	adds	r3, #4
 80058ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2200      	movs	r2, #0
 80058dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2200      	movs	r2, #0
 80058e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058e4:	7afb      	ldrb	r3, [r7, #11]
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	799b      	ldrb	r3, [r3, #6]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d102      	bne.n	80058fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	799b      	ldrb	r3, [r3, #6]
 8005906:	461a      	mov	r2, r3
 8005908:	6979      	ldr	r1, [r7, #20]
 800590a:	f002 f961 	bl	8007bd0 <USB_EPStartXfer>

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	f003 020f 	and.w	r2, r3, #15
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	4613      	mov	r3, r2
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	4413      	add	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800593a:	681b      	ldr	r3, [r3, #0]
}
 800593c:	4618      	mov	r0, r3
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	607a      	str	r2, [r7, #4]
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	460b      	mov	r3, r1
 8005956:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005958:	7afb      	ldrb	r3, [r7, #11]
 800595a:	f003 020f 	and.w	r2, r3, #15
 800595e:	4613      	mov	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	3310      	adds	r3, #16
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	4413      	add	r3, r2
 800596c:	3304      	adds	r3, #4
 800596e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2200      	movs	r2, #0
 8005980:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2201      	movs	r2, #1
 8005986:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005988:	7afb      	ldrb	r3, [r7, #11]
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	b2da      	uxtb	r2, r3
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	799b      	ldrb	r3, [r3, #6]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d102      	bne.n	80059a2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6818      	ldr	r0, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	799b      	ldrb	r3, [r3, #6]
 80059aa:	461a      	mov	r2, r3
 80059ac:	6979      	ldr	r1, [r7, #20]
 80059ae:	f002 f90f 	bl	8007bd0 <USB_EPStartXfer>

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3718      	adds	r7, #24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	460b      	mov	r3, r1
 80059c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80059c8:	78fb      	ldrb	r3, [r7, #3]
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	7912      	ldrb	r2, [r2, #4]
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d901      	bls.n	80059da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e04f      	b.n	8005a7a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	da0f      	bge.n	8005a02 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059e2:	78fb      	ldrb	r3, [r7, #3]
 80059e4:	f003 020f 	and.w	r2, r3, #15
 80059e8:	4613      	mov	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	4413      	add	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	3310      	adds	r3, #16
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	4413      	add	r3, r2
 80059f6:	3304      	adds	r3, #4
 80059f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2201      	movs	r2, #1
 80059fe:	705a      	strb	r2, [r3, #1]
 8005a00:	e00d      	b.n	8005a1e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a02:	78fa      	ldrb	r2, [r7, #3]
 8005a04:	4613      	mov	r3, r2
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	4413      	add	r3, r2
 8005a14:	3304      	adds	r3, #4
 8005a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2201      	movs	r2, #1
 8005a22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a24:	78fb      	ldrb	r3, [r7, #3]
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <HAL_PCD_EP_SetStall+0x82>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e01d      	b.n	8005a7a <HAL_PCD_EP_SetStall+0xbe>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68f9      	ldr	r1, [r7, #12]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f002 fc9d 	bl	800838c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a52:	78fb      	ldrb	r3, [r7, #3]
 8005a54:	f003 030f 	and.w	r3, r3, #15
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d109      	bne.n	8005a70 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6818      	ldr	r0, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	7999      	ldrb	r1, [r3, #6]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f002 fe8e 	bl	800878c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005a8e:	78fb      	ldrb	r3, [r7, #3]
 8005a90:	f003 030f 	and.w	r3, r3, #15
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	7912      	ldrb	r2, [r2, #4]
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e042      	b.n	8005b26 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005aa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	da0f      	bge.n	8005ac8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005aa8:	78fb      	ldrb	r3, [r7, #3]
 8005aaa:	f003 020f 	and.w	r2, r3, #15
 8005aae:	4613      	mov	r3, r2
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	3310      	adds	r3, #16
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	4413      	add	r3, r2
 8005abc:	3304      	adds	r3, #4
 8005abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	705a      	strb	r2, [r3, #1]
 8005ac6:	e00f      	b.n	8005ae8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	f003 020f 	and.w	r2, r3, #15
 8005ace:	4613      	mov	r3, r2
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	4413      	add	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	4413      	add	r3, r2
 8005ade:	3304      	adds	r3, #4
 8005ae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005aee:	78fb      	ldrb	r3, [r7, #3]
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_PCD_EP_ClrStall+0x86>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e00e      	b.n	8005b26 <HAL_PCD_EP_ClrStall+0xa4>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68f9      	ldr	r1, [r7, #12]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f002 fca6 	bl	8008468 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	460b      	mov	r3, r1
 8005b38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005b3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	da0c      	bge.n	8005b5c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b42:	78fb      	ldrb	r3, [r7, #3]
 8005b44:	f003 020f 	and.w	r2, r3, #15
 8005b48:	4613      	mov	r3, r2
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	3310      	adds	r3, #16
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	4413      	add	r3, r2
 8005b56:	3304      	adds	r3, #4
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	e00c      	b.n	8005b76 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b5c:	78fb      	ldrb	r3, [r7, #3]
 8005b5e:	f003 020f 	and.w	r2, r3, #15
 8005b62:	4613      	mov	r3, r2
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	4413      	add	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	4413      	add	r3, r2
 8005b72:	3304      	adds	r3, #4
 8005b74:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68f9      	ldr	r1, [r7, #12]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f002 fac5 	bl	800810c <USB_EPStopXfer>
 8005b82:	4603      	mov	r3, r0
 8005b84:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005b86:	7afb      	ldrb	r3, [r7, #11]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08a      	sub	sp, #40	@ 0x28
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	4413      	add	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	3310      	adds	r3, #16
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	695a      	ldr	r2, [r3, #20]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d901      	bls.n	8005bc8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e06b      	b.n	8005ca0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	69fa      	ldr	r2, [r7, #28]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d902      	bls.n	8005be4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	3303      	adds	r3, #3
 8005be8:	089b      	lsrs	r3, r3, #2
 8005bea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005bec:	e02a      	b.n	8005c44 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	691a      	ldr	r2, [r3, #16]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d902      	bls.n	8005c0a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	3303      	adds	r3, #3
 8005c0e:	089b      	lsrs	r3, r3, #2
 8005c10:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	68d9      	ldr	r1, [r3, #12]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	4603      	mov	r3, r0
 8005c26:	6978      	ldr	r0, [r7, #20]
 8005c28:	f002 fb1a 	bl	8008260 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	68da      	ldr	r2, [r3, #12]
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	441a      	add	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	695a      	ldr	r2, [r3, #20]
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	441a      	add	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d809      	bhi.n	8005c6e <PCD_WriteEmptyTxFifo+0xde>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	695a      	ldr	r2, [r3, #20]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d203      	bcs.n	8005c6e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1bf      	bne.n	8005bee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	691a      	ldr	r2, [r3, #16]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d811      	bhi.n	8005c9e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	f003 030f 	and.w	r3, r3, #15
 8005c80:	2201      	movs	r2, #1
 8005c82:	fa02 f303 	lsl.w	r3, r2, r3
 8005c86:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	43db      	mvns	r3, r3
 8005c94:	6939      	ldr	r1, [r7, #16]
 8005c96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3720      	adds	r7, #32
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	333c      	adds	r3, #60	@ 0x3c
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	799b      	ldrb	r3, [r3, #6]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d17b      	bne.n	8005dd6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f003 0308 	and.w	r3, r3, #8
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d015      	beq.n	8005d14 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	4a61      	ldr	r2, [pc, #388]	@ (8005e70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	f240 80b9 	bls.w	8005e64 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 80b3 	beq.w	8005e64 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d10:	6093      	str	r3, [r2, #8]
 8005d12:	e0a7      	b.n	8005e64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f003 0320 	and.w	r3, r3, #32
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d009      	beq.n	8005d32 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	2320      	movs	r3, #32
 8005d2e:	6093      	str	r3, [r2, #8]
 8005d30:	e098      	b.n	8005e64 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f040 8093 	bne.w	8005e64 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	4a4b      	ldr	r2, [pc, #300]	@ (8005e70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d90f      	bls.n	8005d66 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d62:	6093      	str	r3, [r2, #8]
 8005d64:	e07e      	b.n	8005e64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	4413      	add	r3, r2
 8005d78:	3304      	adds	r3, #4
 8005d7a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a1a      	ldr	r2, [r3, #32]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	0159      	lsls	r1, r3, #5
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	440b      	add	r3, r1
 8005d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d92:	1ad2      	subs	r2, r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d114      	bne.n	8005dc8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6818      	ldr	r0, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005db0:	461a      	mov	r2, r3
 8005db2:	2101      	movs	r1, #1
 8005db4:	f002 fcea 	bl	800878c <USB_EP0_OutStart>
 8005db8:	e006      	b.n	8005dc8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	441a      	add	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	4619      	mov	r1, r3
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f004 ff52 	bl	800ac78 <HAL_PCD_DataOutStageCallback>
 8005dd4:	e046      	b.n	8005e64 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	4a26      	ldr	r2, [pc, #152]	@ (8005e74 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d124      	bne.n	8005e28 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00a      	beq.n	8005dfe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df4:	461a      	mov	r2, r3
 8005df6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dfa:	6093      	str	r3, [r2, #8]
 8005dfc:	e032      	b.n	8005e64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f003 0320 	and.w	r3, r3, #32
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d008      	beq.n	8005e1a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e14:	461a      	mov	r2, r3
 8005e16:	2320      	movs	r3, #32
 8005e18:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	4619      	mov	r1, r3
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f004 ff29 	bl	800ac78 <HAL_PCD_DataOutStageCallback>
 8005e26:	e01d      	b.n	8005e64 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d114      	bne.n	8005e58 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005e2e:	6879      	ldr	r1, [r7, #4]
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	4613      	mov	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d108      	bne.n	8005e58 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6818      	ldr	r0, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e50:	461a      	mov	r2, r3
 8005e52:	2100      	movs	r1, #0
 8005e54:	f002 fc9a 	bl	800878c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f004 ff0a 	bl	800ac78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3720      	adds	r7, #32
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	4f54300a 	.word	0x4f54300a
 8005e74:	4f54310a 	.word	0x4f54310a

08005e78 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	333c      	adds	r3, #60	@ 0x3c
 8005e90:	3304      	adds	r3, #4
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4a15      	ldr	r2, [pc, #84]	@ (8005f00 <PCD_EP_OutSetupPacket_int+0x88>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d90e      	bls.n	8005ecc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d009      	beq.n	8005ecc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f004 fec1 	bl	800ac54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8005f00 <PCD_EP_OutSetupPacket_int+0x88>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d90c      	bls.n	8005ef4 <PCD_EP_OutSetupPacket_int+0x7c>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	799b      	ldrb	r3, [r3, #6]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d108      	bne.n	8005ef4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005eec:	461a      	mov	r2, r3
 8005eee:	2101      	movs	r1, #1
 8005ef0:	f002 fc4c 	bl	800878c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	4f54300a 	.word	0x4f54300a

08005f04 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	70fb      	strb	r3, [r7, #3]
 8005f10:	4613      	mov	r3, r2
 8005f12:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d107      	bne.n	8005f32 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005f22:	883b      	ldrh	r3, [r7, #0]
 8005f24:	0419      	lsls	r1, r3, #16
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f30:	e028      	b.n	8005f84 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f38:	0c1b      	lsrs	r3, r3, #16
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f40:	2300      	movs	r3, #0
 8005f42:	73fb      	strb	r3, [r7, #15]
 8005f44:	e00d      	b.n	8005f62 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
 8005f4c:	3340      	adds	r3, #64	@ 0x40
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	0c1b      	lsrs	r3, r3, #16
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	4413      	add	r3, r2
 8005f5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	73fb      	strb	r3, [r7, #15]
 8005f62:	7bfa      	ldrb	r2, [r7, #15]
 8005f64:	78fb      	ldrb	r3, [r7, #3]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d3ec      	bcc.n	8005f46 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005f6c:	883b      	ldrh	r3, [r7, #0]
 8005f6e:	0418      	lsls	r0, r3, #16
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6819      	ldr	r1, [r3, #0]
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	4302      	orrs	r2, r0
 8005f7c:	3340      	adds	r3, #64	@ 0x40
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	440b      	add	r3, r1
 8005f82:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	887a      	ldrh	r2, [r7, #2]
 8005fa4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e267      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d075      	beq.n	80060d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005fea:	4b88      	ldr	r3, [pc, #544]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 030c 	and.w	r3, r3, #12
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d00c      	beq.n	8006010 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ff6:	4b85      	ldr	r3, [pc, #532]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005ffe:	2b08      	cmp	r3, #8
 8006000:	d112      	bne.n	8006028 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006002:	4b82      	ldr	r3, [pc, #520]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800600a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800600e:	d10b      	bne.n	8006028 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006010:	4b7e      	ldr	r3, [pc, #504]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d05b      	beq.n	80060d4 <HAL_RCC_OscConfig+0x108>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d157      	bne.n	80060d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e242      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006030:	d106      	bne.n	8006040 <HAL_RCC_OscConfig+0x74>
 8006032:	4b76      	ldr	r3, [pc, #472]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a75      	ldr	r2, [pc, #468]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	e01d      	b.n	800607c <HAL_RCC_OscConfig+0xb0>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006048:	d10c      	bne.n	8006064 <HAL_RCC_OscConfig+0x98>
 800604a:	4b70      	ldr	r3, [pc, #448]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a6f      	ldr	r2, [pc, #444]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006050:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	4b6d      	ldr	r3, [pc, #436]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a6c      	ldr	r2, [pc, #432]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 800605c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	e00b      	b.n	800607c <HAL_RCC_OscConfig+0xb0>
 8006064:	4b69      	ldr	r3, [pc, #420]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a68      	ldr	r2, [pc, #416]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 800606a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	4b66      	ldr	r3, [pc, #408]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a65      	ldr	r2, [pc, #404]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006076:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800607a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d013      	beq.n	80060ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006084:	f7fc fbe2 	bl	800284c <HAL_GetTick>
 8006088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800608a:	e008      	b.n	800609e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800608c:	f7fc fbde 	bl	800284c <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b64      	cmp	r3, #100	@ 0x64
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e207      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800609e:	4b5b      	ldr	r3, [pc, #364]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d0f0      	beq.n	800608c <HAL_RCC_OscConfig+0xc0>
 80060aa:	e014      	b.n	80060d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ac:	f7fc fbce 	bl	800284c <HAL_GetTick>
 80060b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060b4:	f7fc fbca 	bl	800284c <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b64      	cmp	r3, #100	@ 0x64
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e1f3      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060c6:	4b51      	ldr	r3, [pc, #324]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1f0      	bne.n	80060b4 <HAL_RCC_OscConfig+0xe8>
 80060d2:	e000      	b.n	80060d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d063      	beq.n	80061aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80060e2:	4b4a      	ldr	r3, [pc, #296]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 030c 	and.w	r3, r3, #12
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00b      	beq.n	8006106 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060ee:	4b47      	ldr	r3, [pc, #284]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80060f6:	2b08      	cmp	r3, #8
 80060f8:	d11c      	bne.n	8006134 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060fa:	4b44      	ldr	r3, [pc, #272]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d116      	bne.n	8006134 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006106:	4b41      	ldr	r3, [pc, #260]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d005      	beq.n	800611e <HAL_RCC_OscConfig+0x152>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d001      	beq.n	800611e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e1c7      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800611e:	4b3b      	ldr	r3, [pc, #236]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	4937      	ldr	r1, [pc, #220]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 800612e:	4313      	orrs	r3, r2
 8006130:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006132:	e03a      	b.n	80061aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d020      	beq.n	800617e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800613c:	4b34      	ldr	r3, [pc, #208]	@ (8006210 <HAL_RCC_OscConfig+0x244>)
 800613e:	2201      	movs	r2, #1
 8006140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006142:	f7fc fb83 	bl	800284c <HAL_GetTick>
 8006146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006148:	e008      	b.n	800615c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800614a:	f7fc fb7f 	bl	800284c <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b02      	cmp	r3, #2
 8006156:	d901      	bls.n	800615c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e1a8      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800615c:	4b2b      	ldr	r3, [pc, #172]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0f0      	beq.n	800614a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006168:	4b28      	ldr	r3, [pc, #160]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	4925      	ldr	r1, [pc, #148]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006178:	4313      	orrs	r3, r2
 800617a:	600b      	str	r3, [r1, #0]
 800617c:	e015      	b.n	80061aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800617e:	4b24      	ldr	r3, [pc, #144]	@ (8006210 <HAL_RCC_OscConfig+0x244>)
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006184:	f7fc fb62 	bl	800284c <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800618c:	f7fc fb5e 	bl	800284c <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b02      	cmp	r3, #2
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e187      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800619e:	4b1b      	ldr	r3, [pc, #108]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1f0      	bne.n	800618c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d036      	beq.n	8006224 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d016      	beq.n	80061ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061be:	4b15      	ldr	r3, [pc, #84]	@ (8006214 <HAL_RCC_OscConfig+0x248>)
 80061c0:	2201      	movs	r2, #1
 80061c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c4:	f7fc fb42 	bl	800284c <HAL_GetTick>
 80061c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061ca:	e008      	b.n	80061de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061cc:	f7fc fb3e 	bl	800284c <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e167      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061de:	4b0b      	ldr	r3, [pc, #44]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 80061e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0f0      	beq.n	80061cc <HAL_RCC_OscConfig+0x200>
 80061ea:	e01b      	b.n	8006224 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061ec:	4b09      	ldr	r3, [pc, #36]	@ (8006214 <HAL_RCC_OscConfig+0x248>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061f2:	f7fc fb2b 	bl	800284c <HAL_GetTick>
 80061f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061f8:	e00e      	b.n	8006218 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061fa:	f7fc fb27 	bl	800284c <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b02      	cmp	r3, #2
 8006206:	d907      	bls.n	8006218 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e150      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
 800620c:	40023800 	.word	0x40023800
 8006210:	42470000 	.word	0x42470000
 8006214:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006218:	4b88      	ldr	r3, [pc, #544]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 800621a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1ea      	bne.n	80061fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 8097 	beq.w	8006360 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006232:	2300      	movs	r3, #0
 8006234:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006236:	4b81      	ldr	r3, [pc, #516]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 8006238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10f      	bne.n	8006262 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006242:	2300      	movs	r3, #0
 8006244:	60bb      	str	r3, [r7, #8]
 8006246:	4b7d      	ldr	r3, [pc, #500]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 8006248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624a:	4a7c      	ldr	r2, [pc, #496]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 800624c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006250:	6413      	str	r3, [r2, #64]	@ 0x40
 8006252:	4b7a      	ldr	r3, [pc, #488]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 8006254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800625a:	60bb      	str	r3, [r7, #8]
 800625c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800625e:	2301      	movs	r3, #1
 8006260:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006262:	4b77      	ldr	r3, [pc, #476]	@ (8006440 <HAL_RCC_OscConfig+0x474>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800626a:	2b00      	cmp	r3, #0
 800626c:	d118      	bne.n	80062a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800626e:	4b74      	ldr	r3, [pc, #464]	@ (8006440 <HAL_RCC_OscConfig+0x474>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a73      	ldr	r2, [pc, #460]	@ (8006440 <HAL_RCC_OscConfig+0x474>)
 8006274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800627a:	f7fc fae7 	bl	800284c <HAL_GetTick>
 800627e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006280:	e008      	b.n	8006294 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006282:	f7fc fae3 	bl	800284c <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	2b02      	cmp	r3, #2
 800628e:	d901      	bls.n	8006294 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e10c      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006294:	4b6a      	ldr	r3, [pc, #424]	@ (8006440 <HAL_RCC_OscConfig+0x474>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0f0      	beq.n	8006282 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d106      	bne.n	80062b6 <HAL_RCC_OscConfig+0x2ea>
 80062a8:	4b64      	ldr	r3, [pc, #400]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80062aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ac:	4a63      	ldr	r2, [pc, #396]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80062ae:	f043 0301 	orr.w	r3, r3, #1
 80062b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80062b4:	e01c      	b.n	80062f0 <HAL_RCC_OscConfig+0x324>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	2b05      	cmp	r3, #5
 80062bc:	d10c      	bne.n	80062d8 <HAL_RCC_OscConfig+0x30c>
 80062be:	4b5f      	ldr	r3, [pc, #380]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80062c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c2:	4a5e      	ldr	r2, [pc, #376]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80062c4:	f043 0304 	orr.w	r3, r3, #4
 80062c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80062ca:	4b5c      	ldr	r3, [pc, #368]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80062cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ce:	4a5b      	ldr	r2, [pc, #364]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80062d0:	f043 0301 	orr.w	r3, r3, #1
 80062d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80062d6:	e00b      	b.n	80062f0 <HAL_RCC_OscConfig+0x324>
 80062d8:	4b58      	ldr	r3, [pc, #352]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80062da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062dc:	4a57      	ldr	r2, [pc, #348]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80062de:	f023 0301 	bic.w	r3, r3, #1
 80062e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80062e4:	4b55      	ldr	r3, [pc, #340]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80062e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e8:	4a54      	ldr	r2, [pc, #336]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80062ea:	f023 0304 	bic.w	r3, r3, #4
 80062ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d015      	beq.n	8006324 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f8:	f7fc faa8 	bl	800284c <HAL_GetTick>
 80062fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062fe:	e00a      	b.n	8006316 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006300:	f7fc faa4 	bl	800284c <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800630e:	4293      	cmp	r3, r2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e0cb      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006316:	4b49      	ldr	r3, [pc, #292]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 8006318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0ee      	beq.n	8006300 <HAL_RCC_OscConfig+0x334>
 8006322:	e014      	b.n	800634e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006324:	f7fc fa92 	bl	800284c <HAL_GetTick>
 8006328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800632a:	e00a      	b.n	8006342 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800632c:	f7fc fa8e 	bl	800284c <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800633a:	4293      	cmp	r3, r2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e0b5      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006342:	4b3e      	ldr	r3, [pc, #248]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 8006344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1ee      	bne.n	800632c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800634e:	7dfb      	ldrb	r3, [r7, #23]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d105      	bne.n	8006360 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006354:	4b39      	ldr	r3, [pc, #228]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 8006356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006358:	4a38      	ldr	r2, [pc, #224]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 800635a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800635e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 80a1 	beq.w	80064ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800636a:	4b34      	ldr	r3, [pc, #208]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 030c 	and.w	r3, r3, #12
 8006372:	2b08      	cmp	r3, #8
 8006374:	d05c      	beq.n	8006430 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	2b02      	cmp	r3, #2
 800637c:	d141      	bne.n	8006402 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800637e:	4b31      	ldr	r3, [pc, #196]	@ (8006444 <HAL_RCC_OscConfig+0x478>)
 8006380:	2200      	movs	r2, #0
 8006382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006384:	f7fc fa62 	bl	800284c <HAL_GetTick>
 8006388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800638c:	f7fc fa5e 	bl	800284c <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b02      	cmp	r3, #2
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e087      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800639e:	4b27      	ldr	r3, [pc, #156]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1f0      	bne.n	800638c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69da      	ldr	r2, [r3, #28]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	431a      	orrs	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b8:	019b      	lsls	r3, r3, #6
 80063ba:	431a      	orrs	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c0:	085b      	lsrs	r3, r3, #1
 80063c2:	3b01      	subs	r3, #1
 80063c4:	041b      	lsls	r3, r3, #16
 80063c6:	431a      	orrs	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063cc:	061b      	lsls	r3, r3, #24
 80063ce:	491b      	ldr	r1, [pc, #108]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006444 <HAL_RCC_OscConfig+0x478>)
 80063d6:	2201      	movs	r2, #1
 80063d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063da:	f7fc fa37 	bl	800284c <HAL_GetTick>
 80063de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063e0:	e008      	b.n	80063f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063e2:	f7fc fa33 	bl	800284c <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d901      	bls.n	80063f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e05c      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063f4:	4b11      	ldr	r3, [pc, #68]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d0f0      	beq.n	80063e2 <HAL_RCC_OscConfig+0x416>
 8006400:	e054      	b.n	80064ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006402:	4b10      	ldr	r3, [pc, #64]	@ (8006444 <HAL_RCC_OscConfig+0x478>)
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006408:	f7fc fa20 	bl	800284c <HAL_GetTick>
 800640c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800640e:	e008      	b.n	8006422 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006410:	f7fc fa1c 	bl	800284c <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e045      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006422:	4b06      	ldr	r3, [pc, #24]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1f0      	bne.n	8006410 <HAL_RCC_OscConfig+0x444>
 800642e:	e03d      	b.n	80064ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d107      	bne.n	8006448 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e038      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
 800643c:	40023800 	.word	0x40023800
 8006440:	40007000 	.word	0x40007000
 8006444:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006448:	4b1b      	ldr	r3, [pc, #108]	@ (80064b8 <HAL_RCC_OscConfig+0x4ec>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d028      	beq.n	80064a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006460:	429a      	cmp	r2, r3
 8006462:	d121      	bne.n	80064a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800646e:	429a      	cmp	r2, r3
 8006470:	d11a      	bne.n	80064a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006478:	4013      	ands	r3, r2
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800647e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006480:	4293      	cmp	r3, r2
 8006482:	d111      	bne.n	80064a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800648e:	085b      	lsrs	r3, r3, #1
 8006490:	3b01      	subs	r3, #1
 8006492:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006494:	429a      	cmp	r2, r3
 8006496:	d107      	bne.n	80064a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d001      	beq.n	80064ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e000      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	40023800 	.word	0x40023800

080064bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e0cc      	b.n	800666a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064d0:	4b68      	ldr	r3, [pc, #416]	@ (8006674 <HAL_RCC_ClockConfig+0x1b8>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0307 	and.w	r3, r3, #7
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d90c      	bls.n	80064f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064de:	4b65      	ldr	r3, [pc, #404]	@ (8006674 <HAL_RCC_ClockConfig+0x1b8>)
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064e6:	4b63      	ldr	r3, [pc, #396]	@ (8006674 <HAL_RCC_ClockConfig+0x1b8>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d001      	beq.n	80064f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e0b8      	b.n	800666a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d020      	beq.n	8006546 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	d005      	beq.n	800651c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006510:	4b59      	ldr	r3, [pc, #356]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	4a58      	ldr	r2, [pc, #352]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 8006516:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800651a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0308 	and.w	r3, r3, #8
 8006524:	2b00      	cmp	r3, #0
 8006526:	d005      	beq.n	8006534 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006528:	4b53      	ldr	r3, [pc, #332]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	4a52      	ldr	r2, [pc, #328]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 800652e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006532:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006534:	4b50      	ldr	r3, [pc, #320]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	494d      	ldr	r1, [pc, #308]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 8006542:	4313      	orrs	r3, r2
 8006544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d044      	beq.n	80065dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d107      	bne.n	800656a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800655a:	4b47      	ldr	r3, [pc, #284]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d119      	bne.n	800659a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e07f      	b.n	800666a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2b02      	cmp	r3, #2
 8006570:	d003      	beq.n	800657a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006576:	2b03      	cmp	r3, #3
 8006578:	d107      	bne.n	800658a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800657a:	4b3f      	ldr	r3, [pc, #252]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d109      	bne.n	800659a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e06f      	b.n	800666a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800658a:	4b3b      	ldr	r3, [pc, #236]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e067      	b.n	800666a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800659a:	4b37      	ldr	r3, [pc, #220]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f023 0203 	bic.w	r2, r3, #3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	4934      	ldr	r1, [pc, #208]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065ac:	f7fc f94e 	bl	800284c <HAL_GetTick>
 80065b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065b2:	e00a      	b.n	80065ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065b4:	f7fc f94a 	bl	800284c <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e04f      	b.n	800666a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ca:	4b2b      	ldr	r3, [pc, #172]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 020c 	and.w	r2, r3, #12
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	429a      	cmp	r2, r3
 80065da:	d1eb      	bne.n	80065b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065dc:	4b25      	ldr	r3, [pc, #148]	@ (8006674 <HAL_RCC_ClockConfig+0x1b8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0307 	and.w	r3, r3, #7
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d20c      	bcs.n	8006604 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ea:	4b22      	ldr	r3, [pc, #136]	@ (8006674 <HAL_RCC_ClockConfig+0x1b8>)
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	b2d2      	uxtb	r2, r2
 80065f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065f2:	4b20      	ldr	r3, [pc, #128]	@ (8006674 <HAL_RCC_ClockConfig+0x1b8>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0307 	and.w	r3, r3, #7
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d001      	beq.n	8006604 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e032      	b.n	800666a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d008      	beq.n	8006622 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006610:	4b19      	ldr	r3, [pc, #100]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	4916      	ldr	r1, [pc, #88]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 800661e:	4313      	orrs	r3, r2
 8006620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0308 	and.w	r3, r3, #8
 800662a:	2b00      	cmp	r3, #0
 800662c:	d009      	beq.n	8006642 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800662e:	4b12      	ldr	r3, [pc, #72]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	490e      	ldr	r1, [pc, #56]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 800663e:	4313      	orrs	r3, r2
 8006640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006642:	f000 f821 	bl	8006688 <HAL_RCC_GetSysClockFreq>
 8006646:	4602      	mov	r2, r0
 8006648:	4b0b      	ldr	r3, [pc, #44]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	091b      	lsrs	r3, r3, #4
 800664e:	f003 030f 	and.w	r3, r3, #15
 8006652:	490a      	ldr	r1, [pc, #40]	@ (800667c <HAL_RCC_ClockConfig+0x1c0>)
 8006654:	5ccb      	ldrb	r3, [r1, r3]
 8006656:	fa22 f303 	lsr.w	r3, r2, r3
 800665a:	4a09      	ldr	r2, [pc, #36]	@ (8006680 <HAL_RCC_ClockConfig+0x1c4>)
 800665c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800665e:	4b09      	ldr	r3, [pc, #36]	@ (8006684 <HAL_RCC_ClockConfig+0x1c8>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4618      	mov	r0, r3
 8006664:	f7fc f8ae 	bl	80027c4 <HAL_InitTick>

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	40023c00 	.word	0x40023c00
 8006678:	40023800 	.word	0x40023800
 800667c:	0800e7f8 	.word	0x0800e7f8
 8006680:	20000004 	.word	0x20000004
 8006684:	20000008 	.word	0x20000008

08006688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800668c:	b094      	sub	sp, #80	@ 0x50
 800668e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006694:	2300      	movs	r3, #0
 8006696:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006698:	2300      	movs	r3, #0
 800669a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066a0:	4b79      	ldr	r3, [pc, #484]	@ (8006888 <HAL_RCC_GetSysClockFreq+0x200>)
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f003 030c 	and.w	r3, r3, #12
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d00d      	beq.n	80066c8 <HAL_RCC_GetSysClockFreq+0x40>
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	f200 80e1 	bhi.w	8006874 <HAL_RCC_GetSysClockFreq+0x1ec>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <HAL_RCC_GetSysClockFreq+0x34>
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d003      	beq.n	80066c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80066ba:	e0db      	b.n	8006874 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066bc:	4b73      	ldr	r3, [pc, #460]	@ (800688c <HAL_RCC_GetSysClockFreq+0x204>)
 80066be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066c0:	e0db      	b.n	800687a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066c2:	4b73      	ldr	r3, [pc, #460]	@ (8006890 <HAL_RCC_GetSysClockFreq+0x208>)
 80066c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066c6:	e0d8      	b.n	800687a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066c8:	4b6f      	ldr	r3, [pc, #444]	@ (8006888 <HAL_RCC_GetSysClockFreq+0x200>)
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066d2:	4b6d      	ldr	r3, [pc, #436]	@ (8006888 <HAL_RCC_GetSysClockFreq+0x200>)
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d063      	beq.n	80067a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066de:	4b6a      	ldr	r3, [pc, #424]	@ (8006888 <HAL_RCC_GetSysClockFreq+0x200>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	099b      	lsrs	r3, r3, #6
 80066e4:	2200      	movs	r2, #0
 80066e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80066ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80066f2:	2300      	movs	r3, #0
 80066f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80066f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80066fa:	4622      	mov	r2, r4
 80066fc:	462b      	mov	r3, r5
 80066fe:	f04f 0000 	mov.w	r0, #0
 8006702:	f04f 0100 	mov.w	r1, #0
 8006706:	0159      	lsls	r1, r3, #5
 8006708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800670c:	0150      	lsls	r0, r2, #5
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	4621      	mov	r1, r4
 8006714:	1a51      	subs	r1, r2, r1
 8006716:	6139      	str	r1, [r7, #16]
 8006718:	4629      	mov	r1, r5
 800671a:	eb63 0301 	sbc.w	r3, r3, r1
 800671e:	617b      	str	r3, [r7, #20]
 8006720:	f04f 0200 	mov.w	r2, #0
 8006724:	f04f 0300 	mov.w	r3, #0
 8006728:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800672c:	4659      	mov	r1, fp
 800672e:	018b      	lsls	r3, r1, #6
 8006730:	4651      	mov	r1, sl
 8006732:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006736:	4651      	mov	r1, sl
 8006738:	018a      	lsls	r2, r1, #6
 800673a:	4651      	mov	r1, sl
 800673c:	ebb2 0801 	subs.w	r8, r2, r1
 8006740:	4659      	mov	r1, fp
 8006742:	eb63 0901 	sbc.w	r9, r3, r1
 8006746:	f04f 0200 	mov.w	r2, #0
 800674a:	f04f 0300 	mov.w	r3, #0
 800674e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006752:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006756:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800675a:	4690      	mov	r8, r2
 800675c:	4699      	mov	r9, r3
 800675e:	4623      	mov	r3, r4
 8006760:	eb18 0303 	adds.w	r3, r8, r3
 8006764:	60bb      	str	r3, [r7, #8]
 8006766:	462b      	mov	r3, r5
 8006768:	eb49 0303 	adc.w	r3, r9, r3
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	f04f 0200 	mov.w	r2, #0
 8006772:	f04f 0300 	mov.w	r3, #0
 8006776:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800677a:	4629      	mov	r1, r5
 800677c:	024b      	lsls	r3, r1, #9
 800677e:	4621      	mov	r1, r4
 8006780:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006784:	4621      	mov	r1, r4
 8006786:	024a      	lsls	r2, r1, #9
 8006788:	4610      	mov	r0, r2
 800678a:	4619      	mov	r1, r3
 800678c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800678e:	2200      	movs	r2, #0
 8006790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006792:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006794:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006798:	f7fa fa76 	bl	8000c88 <__aeabi_uldivmod>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	4613      	mov	r3, r2
 80067a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067a4:	e058      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067a6:	4b38      	ldr	r3, [pc, #224]	@ (8006888 <HAL_RCC_GetSysClockFreq+0x200>)
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	099b      	lsrs	r3, r3, #6
 80067ac:	2200      	movs	r2, #0
 80067ae:	4618      	mov	r0, r3
 80067b0:	4611      	mov	r1, r2
 80067b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80067b6:	623b      	str	r3, [r7, #32]
 80067b8:	2300      	movs	r3, #0
 80067ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80067bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80067c0:	4642      	mov	r2, r8
 80067c2:	464b      	mov	r3, r9
 80067c4:	f04f 0000 	mov.w	r0, #0
 80067c8:	f04f 0100 	mov.w	r1, #0
 80067cc:	0159      	lsls	r1, r3, #5
 80067ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067d2:	0150      	lsls	r0, r2, #5
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	4641      	mov	r1, r8
 80067da:	ebb2 0a01 	subs.w	sl, r2, r1
 80067de:	4649      	mov	r1, r9
 80067e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80067e4:	f04f 0200 	mov.w	r2, #0
 80067e8:	f04f 0300 	mov.w	r3, #0
 80067ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80067f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80067f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80067f8:	ebb2 040a 	subs.w	r4, r2, sl
 80067fc:	eb63 050b 	sbc.w	r5, r3, fp
 8006800:	f04f 0200 	mov.w	r2, #0
 8006804:	f04f 0300 	mov.w	r3, #0
 8006808:	00eb      	lsls	r3, r5, #3
 800680a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800680e:	00e2      	lsls	r2, r4, #3
 8006810:	4614      	mov	r4, r2
 8006812:	461d      	mov	r5, r3
 8006814:	4643      	mov	r3, r8
 8006816:	18e3      	adds	r3, r4, r3
 8006818:	603b      	str	r3, [r7, #0]
 800681a:	464b      	mov	r3, r9
 800681c:	eb45 0303 	adc.w	r3, r5, r3
 8006820:	607b      	str	r3, [r7, #4]
 8006822:	f04f 0200 	mov.w	r2, #0
 8006826:	f04f 0300 	mov.w	r3, #0
 800682a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800682e:	4629      	mov	r1, r5
 8006830:	028b      	lsls	r3, r1, #10
 8006832:	4621      	mov	r1, r4
 8006834:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006838:	4621      	mov	r1, r4
 800683a:	028a      	lsls	r2, r1, #10
 800683c:	4610      	mov	r0, r2
 800683e:	4619      	mov	r1, r3
 8006840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006842:	2200      	movs	r2, #0
 8006844:	61bb      	str	r3, [r7, #24]
 8006846:	61fa      	str	r2, [r7, #28]
 8006848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800684c:	f7fa fa1c 	bl	8000c88 <__aeabi_uldivmod>
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	4613      	mov	r3, r2
 8006856:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006858:	4b0b      	ldr	r3, [pc, #44]	@ (8006888 <HAL_RCC_GetSysClockFreq+0x200>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	0c1b      	lsrs	r3, r3, #16
 800685e:	f003 0303 	and.w	r3, r3, #3
 8006862:	3301      	adds	r3, #1
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006868:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800686a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800686c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006870:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006872:	e002      	b.n	800687a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006874:	4b05      	ldr	r3, [pc, #20]	@ (800688c <HAL_RCC_GetSysClockFreq+0x204>)
 8006876:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800687a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800687c:	4618      	mov	r0, r3
 800687e:	3750      	adds	r7, #80	@ 0x50
 8006880:	46bd      	mov	sp, r7
 8006882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006886:	bf00      	nop
 8006888:	40023800 	.word	0x40023800
 800688c:	00f42400 	.word	0x00f42400
 8006890:	007a1200 	.word	0x007a1200

08006894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006898:	4b03      	ldr	r3, [pc, #12]	@ (80068a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800689a:	681b      	ldr	r3, [r3, #0]
}
 800689c:	4618      	mov	r0, r3
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	20000004 	.word	0x20000004

080068ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80068b0:	f7ff fff0 	bl	8006894 <HAL_RCC_GetHCLKFreq>
 80068b4:	4602      	mov	r2, r0
 80068b6:	4b05      	ldr	r3, [pc, #20]	@ (80068cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	0a9b      	lsrs	r3, r3, #10
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	4903      	ldr	r1, [pc, #12]	@ (80068d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068c2:	5ccb      	ldrb	r3, [r1, r3]
 80068c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	40023800 	.word	0x40023800
 80068d0:	0800e808 	.word	0x0800e808

080068d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80068d8:	f7ff ffdc 	bl	8006894 <HAL_RCC_GetHCLKFreq>
 80068dc:	4602      	mov	r2, r0
 80068de:	4b05      	ldr	r3, [pc, #20]	@ (80068f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	0b5b      	lsrs	r3, r3, #13
 80068e4:	f003 0307 	and.w	r3, r3, #7
 80068e8:	4903      	ldr	r1, [pc, #12]	@ (80068f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068ea:	5ccb      	ldrb	r3, [r1, r3]
 80068ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	40023800 	.word	0x40023800
 80068f8:	0800e808 	.word	0x0800e808

080068fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006904:	2300      	movs	r3, #0
 8006906:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b00      	cmp	r3, #0
 8006916:	d105      	bne.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006920:	2b00      	cmp	r3, #0
 8006922:	d035      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006924:	4b62      	ldr	r3, [pc, #392]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800692a:	f7fb ff8f 	bl	800284c <HAL_GetTick>
 800692e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006930:	e008      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006932:	f7fb ff8b 	bl	800284c <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d901      	bls.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e0b0      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006944:	4b5b      	ldr	r3, [pc, #364]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1f0      	bne.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	019a      	lsls	r2, r3, #6
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	071b      	lsls	r3, r3, #28
 800695c:	4955      	ldr	r1, [pc, #340]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800695e:	4313      	orrs	r3, r2
 8006960:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006964:	4b52      	ldr	r3, [pc, #328]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006966:	2201      	movs	r2, #1
 8006968:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800696a:	f7fb ff6f 	bl	800284c <HAL_GetTick>
 800696e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006970:	e008      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006972:	f7fb ff6b 	bl	800284c <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	d901      	bls.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e090      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006984:	4b4b      	ldr	r3, [pc, #300]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d0f0      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 8083 	beq.w	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800699e:	2300      	movs	r3, #0
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	4b44      	ldr	r3, [pc, #272]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a6:	4a43      	ldr	r2, [pc, #268]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80069ae:	4b41      	ldr	r3, [pc, #260]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80069ba:	4b3f      	ldr	r3, [pc, #252]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a3e      	ldr	r2, [pc, #248]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80069c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80069c6:	f7fb ff41 	bl	800284c <HAL_GetTick>
 80069ca:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80069cc:	e008      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069ce:	f7fb ff3d 	bl	800284c <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d901      	bls.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e062      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80069e0:	4b35      	ldr	r3, [pc, #212]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d0f0      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069ec:	4b31      	ldr	r3, [pc, #196]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069f4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d02f      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d028      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a12:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a14:	4b29      	ldr	r3, [pc, #164]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006a16:	2201      	movs	r2, #1
 8006a18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a1a:	4b28      	ldr	r3, [pc, #160]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006a20:	4a24      	ldr	r2, [pc, #144]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a26:	4b23      	ldr	r3, [pc, #140]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d114      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006a32:	f7fb ff0b 	bl	800284c <HAL_GetTick>
 8006a36:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a38:	e00a      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a3a:	f7fb ff07 	bl	800284c <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d901      	bls.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e02a      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a50:	4b18      	ldr	r3, [pc, #96]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d0ee      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a68:	d10d      	bne.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006a6a:	4b12      	ldr	r3, [pc, #72]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006a7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a7e:	490d      	ldr	r1, [pc, #52]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	608b      	str	r3, [r1, #8]
 8006a84:	e005      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006a86:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a8c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006a90:	6093      	str	r3, [r2, #8]
 8006a92:	4b08      	ldr	r3, [pc, #32]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a94:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a9e:	4905      	ldr	r1, [pc, #20]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	42470068 	.word	0x42470068
 8006ab4:	40023800 	.word	0x40023800
 8006ab8:	40007000 	.word	0x40007000
 8006abc:	42470e40 	.word	0x42470e40

08006ac0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d13f      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006ade:	4b24      	ldr	r3, [pc, #144]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d006      	beq.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006af4:	d12f      	bne.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006af6:	4b1f      	ldr	r3, [pc, #124]	@ (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006af8:	617b      	str	r3, [r7, #20]
          break;
 8006afa:	e02f      	b.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006afc:	4b1c      	ldr	r3, [pc, #112]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b08:	d108      	bne.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b0a:	4b19      	ldr	r3, [pc, #100]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b12:	4a19      	ldr	r2, [pc, #100]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b18:	613b      	str	r3, [r7, #16]
 8006b1a:	e007      	b.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b1c:	4b14      	ldr	r3, [pc, #80]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b24:	4a15      	ldr	r2, [pc, #84]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006b2c:	4b10      	ldr	r3, [pc, #64]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b32:	099b      	lsrs	r3, r3, #6
 8006b34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	fb02 f303 	mul.w	r3, r2, r3
 8006b3e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006b40:	4b0b      	ldr	r3, [pc, #44]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b46:	0f1b      	lsrs	r3, r3, #28
 8006b48:	f003 0307 	and.w	r3, r3, #7
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b52:	617b      	str	r3, [r7, #20]
          break;
 8006b54:	e002      	b.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	617b      	str	r3, [r7, #20]
          break;
 8006b5a:	bf00      	nop
        }
      }
      break;
 8006b5c:	e000      	b.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006b5e:	bf00      	nop
    }
  }
  return frequency;
 8006b60:	697b      	ldr	r3, [r7, #20]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	371c      	adds	r7, #28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	40023800 	.word	0x40023800
 8006b74:	00bb8000 	.word	0x00bb8000
 8006b78:	007a1200 	.word	0x007a1200
 8006b7c:	00f42400 	.word	0x00f42400

08006b80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e07b      	b.n	8006c8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d108      	bne.n	8006bac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ba2:	d009      	beq.n	8006bb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	61da      	str	r2, [r3, #28]
 8006baa:	e005      	b.n	8006bb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d106      	bne.n	8006bd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7fb fbfa 	bl	80023cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c00:	431a      	orrs	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	431a      	orrs	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c32:	431a      	orrs	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c3c:	ea42 0103 	orr.w	r1, r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c44:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	0c1b      	lsrs	r3, r3, #16
 8006c56:	f003 0104 	and.w	r1, r3, #4
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c5e:	f003 0210 	and.w	r2, r3, #16
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69da      	ldr	r2, [r3, #28]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b082      	sub	sp, #8
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e042      	b.n	8006d2a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d106      	bne.n	8006cbe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7fb fbcf 	bl	800245c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2224      	movs	r2, #36	@ 0x24
 8006cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68da      	ldr	r2, [r3, #12]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006cd4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f82c 	bl	8006d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	691a      	ldr	r2, [r3, #16]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006cea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	695a      	ldr	r2, [r3, #20]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006cfa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d0a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d38:	b0c0      	sub	sp, #256	@ 0x100
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d50:	68d9      	ldr	r1, [r3, #12]
 8006d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	ea40 0301 	orr.w	r3, r0, r1
 8006d5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	431a      	orrs	r2, r3
 8006d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006d8c:	f021 010c 	bic.w	r1, r1, #12
 8006d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d9a:	430b      	orrs	r3, r1
 8006d9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dae:	6999      	ldr	r1, [r3, #24]
 8006db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	ea40 0301 	orr.w	r3, r0, r1
 8006dba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	4b8f      	ldr	r3, [pc, #572]	@ (8007000 <UART_SetConfig+0x2cc>)
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d005      	beq.n	8006dd4 <UART_SetConfig+0xa0>
 8006dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	4b8d      	ldr	r3, [pc, #564]	@ (8007004 <UART_SetConfig+0x2d0>)
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d104      	bne.n	8006dde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006dd4:	f7ff fd7e 	bl	80068d4 <HAL_RCC_GetPCLK2Freq>
 8006dd8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006ddc:	e003      	b.n	8006de6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006dde:	f7ff fd65 	bl	80068ac <HAL_RCC_GetPCLK1Freq>
 8006de2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dea:	69db      	ldr	r3, [r3, #28]
 8006dec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006df0:	f040 810c 	bne.w	800700c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006dfe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e06:	4622      	mov	r2, r4
 8006e08:	462b      	mov	r3, r5
 8006e0a:	1891      	adds	r1, r2, r2
 8006e0c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006e0e:	415b      	adcs	r3, r3
 8006e10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e16:	4621      	mov	r1, r4
 8006e18:	eb12 0801 	adds.w	r8, r2, r1
 8006e1c:	4629      	mov	r1, r5
 8006e1e:	eb43 0901 	adc.w	r9, r3, r1
 8006e22:	f04f 0200 	mov.w	r2, #0
 8006e26:	f04f 0300 	mov.w	r3, #0
 8006e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e36:	4690      	mov	r8, r2
 8006e38:	4699      	mov	r9, r3
 8006e3a:	4623      	mov	r3, r4
 8006e3c:	eb18 0303 	adds.w	r3, r8, r3
 8006e40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e44:	462b      	mov	r3, r5
 8006e46:	eb49 0303 	adc.w	r3, r9, r3
 8006e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006e5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006e62:	460b      	mov	r3, r1
 8006e64:	18db      	adds	r3, r3, r3
 8006e66:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e68:	4613      	mov	r3, r2
 8006e6a:	eb42 0303 	adc.w	r3, r2, r3
 8006e6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006e74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006e78:	f7f9 ff06 	bl	8000c88 <__aeabi_uldivmod>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4b61      	ldr	r3, [pc, #388]	@ (8007008 <UART_SetConfig+0x2d4>)
 8006e82:	fba3 2302 	umull	r2, r3, r3, r2
 8006e86:	095b      	lsrs	r3, r3, #5
 8006e88:	011c      	lsls	r4, r3, #4
 8006e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006e98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006e9c:	4642      	mov	r2, r8
 8006e9e:	464b      	mov	r3, r9
 8006ea0:	1891      	adds	r1, r2, r2
 8006ea2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ea4:	415b      	adcs	r3, r3
 8006ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ea8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006eac:	4641      	mov	r1, r8
 8006eae:	eb12 0a01 	adds.w	sl, r2, r1
 8006eb2:	4649      	mov	r1, r9
 8006eb4:	eb43 0b01 	adc.w	fp, r3, r1
 8006eb8:	f04f 0200 	mov.w	r2, #0
 8006ebc:	f04f 0300 	mov.w	r3, #0
 8006ec0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ec4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ec8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ecc:	4692      	mov	sl, r2
 8006ece:	469b      	mov	fp, r3
 8006ed0:	4643      	mov	r3, r8
 8006ed2:	eb1a 0303 	adds.w	r3, sl, r3
 8006ed6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006eda:	464b      	mov	r3, r9
 8006edc:	eb4b 0303 	adc.w	r3, fp, r3
 8006ee0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ef0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006ef4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	18db      	adds	r3, r3, r3
 8006efc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006efe:	4613      	mov	r3, r2
 8006f00:	eb42 0303 	adc.w	r3, r2, r3
 8006f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006f0e:	f7f9 febb 	bl	8000c88 <__aeabi_uldivmod>
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	4611      	mov	r1, r2
 8006f18:	4b3b      	ldr	r3, [pc, #236]	@ (8007008 <UART_SetConfig+0x2d4>)
 8006f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8006f1e:	095b      	lsrs	r3, r3, #5
 8006f20:	2264      	movs	r2, #100	@ 0x64
 8006f22:	fb02 f303 	mul.w	r3, r2, r3
 8006f26:	1acb      	subs	r3, r1, r3
 8006f28:	00db      	lsls	r3, r3, #3
 8006f2a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006f2e:	4b36      	ldr	r3, [pc, #216]	@ (8007008 <UART_SetConfig+0x2d4>)
 8006f30:	fba3 2302 	umull	r2, r3, r3, r2
 8006f34:	095b      	lsrs	r3, r3, #5
 8006f36:	005b      	lsls	r3, r3, #1
 8006f38:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006f3c:	441c      	add	r4, r3
 8006f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f48:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006f4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006f50:	4642      	mov	r2, r8
 8006f52:	464b      	mov	r3, r9
 8006f54:	1891      	adds	r1, r2, r2
 8006f56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006f58:	415b      	adcs	r3, r3
 8006f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006f60:	4641      	mov	r1, r8
 8006f62:	1851      	adds	r1, r2, r1
 8006f64:	6339      	str	r1, [r7, #48]	@ 0x30
 8006f66:	4649      	mov	r1, r9
 8006f68:	414b      	adcs	r3, r1
 8006f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f6c:	f04f 0200 	mov.w	r2, #0
 8006f70:	f04f 0300 	mov.w	r3, #0
 8006f74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006f78:	4659      	mov	r1, fp
 8006f7a:	00cb      	lsls	r3, r1, #3
 8006f7c:	4651      	mov	r1, sl
 8006f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f82:	4651      	mov	r1, sl
 8006f84:	00ca      	lsls	r2, r1, #3
 8006f86:	4610      	mov	r0, r2
 8006f88:	4619      	mov	r1, r3
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	4642      	mov	r2, r8
 8006f8e:	189b      	adds	r3, r3, r2
 8006f90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f94:	464b      	mov	r3, r9
 8006f96:	460a      	mov	r2, r1
 8006f98:	eb42 0303 	adc.w	r3, r2, r3
 8006f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006fac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006fb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	18db      	adds	r3, r3, r3
 8006fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fba:	4613      	mov	r3, r2
 8006fbc:	eb42 0303 	adc.w	r3, r2, r3
 8006fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006fc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006fca:	f7f9 fe5d 	bl	8000c88 <__aeabi_uldivmod>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007008 <UART_SetConfig+0x2d4>)
 8006fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8006fd8:	095b      	lsrs	r3, r3, #5
 8006fda:	2164      	movs	r1, #100	@ 0x64
 8006fdc:	fb01 f303 	mul.w	r3, r1, r3
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	3332      	adds	r3, #50	@ 0x32
 8006fe6:	4a08      	ldr	r2, [pc, #32]	@ (8007008 <UART_SetConfig+0x2d4>)
 8006fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fec:	095b      	lsrs	r3, r3, #5
 8006fee:	f003 0207 	and.w	r2, r3, #7
 8006ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4422      	add	r2, r4
 8006ffa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ffc:	e106      	b.n	800720c <UART_SetConfig+0x4d8>
 8006ffe:	bf00      	nop
 8007000:	40011000 	.word	0x40011000
 8007004:	40011400 	.word	0x40011400
 8007008:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800700c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007010:	2200      	movs	r2, #0
 8007012:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007016:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800701a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800701e:	4642      	mov	r2, r8
 8007020:	464b      	mov	r3, r9
 8007022:	1891      	adds	r1, r2, r2
 8007024:	6239      	str	r1, [r7, #32]
 8007026:	415b      	adcs	r3, r3
 8007028:	627b      	str	r3, [r7, #36]	@ 0x24
 800702a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800702e:	4641      	mov	r1, r8
 8007030:	1854      	adds	r4, r2, r1
 8007032:	4649      	mov	r1, r9
 8007034:	eb43 0501 	adc.w	r5, r3, r1
 8007038:	f04f 0200 	mov.w	r2, #0
 800703c:	f04f 0300 	mov.w	r3, #0
 8007040:	00eb      	lsls	r3, r5, #3
 8007042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007046:	00e2      	lsls	r2, r4, #3
 8007048:	4614      	mov	r4, r2
 800704a:	461d      	mov	r5, r3
 800704c:	4643      	mov	r3, r8
 800704e:	18e3      	adds	r3, r4, r3
 8007050:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007054:	464b      	mov	r3, r9
 8007056:	eb45 0303 	adc.w	r3, r5, r3
 800705a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800705e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800706a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800706e:	f04f 0200 	mov.w	r2, #0
 8007072:	f04f 0300 	mov.w	r3, #0
 8007076:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800707a:	4629      	mov	r1, r5
 800707c:	008b      	lsls	r3, r1, #2
 800707e:	4621      	mov	r1, r4
 8007080:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007084:	4621      	mov	r1, r4
 8007086:	008a      	lsls	r2, r1, #2
 8007088:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800708c:	f7f9 fdfc 	bl	8000c88 <__aeabi_uldivmod>
 8007090:	4602      	mov	r2, r0
 8007092:	460b      	mov	r3, r1
 8007094:	4b60      	ldr	r3, [pc, #384]	@ (8007218 <UART_SetConfig+0x4e4>)
 8007096:	fba3 2302 	umull	r2, r3, r3, r2
 800709a:	095b      	lsrs	r3, r3, #5
 800709c:	011c      	lsls	r4, r3, #4
 800709e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070a2:	2200      	movs	r2, #0
 80070a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80070ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80070b0:	4642      	mov	r2, r8
 80070b2:	464b      	mov	r3, r9
 80070b4:	1891      	adds	r1, r2, r2
 80070b6:	61b9      	str	r1, [r7, #24]
 80070b8:	415b      	adcs	r3, r3
 80070ba:	61fb      	str	r3, [r7, #28]
 80070bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070c0:	4641      	mov	r1, r8
 80070c2:	1851      	adds	r1, r2, r1
 80070c4:	6139      	str	r1, [r7, #16]
 80070c6:	4649      	mov	r1, r9
 80070c8:	414b      	adcs	r3, r1
 80070ca:	617b      	str	r3, [r7, #20]
 80070cc:	f04f 0200 	mov.w	r2, #0
 80070d0:	f04f 0300 	mov.w	r3, #0
 80070d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070d8:	4659      	mov	r1, fp
 80070da:	00cb      	lsls	r3, r1, #3
 80070dc:	4651      	mov	r1, sl
 80070de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070e2:	4651      	mov	r1, sl
 80070e4:	00ca      	lsls	r2, r1, #3
 80070e6:	4610      	mov	r0, r2
 80070e8:	4619      	mov	r1, r3
 80070ea:	4603      	mov	r3, r0
 80070ec:	4642      	mov	r2, r8
 80070ee:	189b      	adds	r3, r3, r2
 80070f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80070f4:	464b      	mov	r3, r9
 80070f6:	460a      	mov	r2, r1
 80070f8:	eb42 0303 	adc.w	r3, r2, r3
 80070fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	67bb      	str	r3, [r7, #120]	@ 0x78
 800710a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800710c:	f04f 0200 	mov.w	r2, #0
 8007110:	f04f 0300 	mov.w	r3, #0
 8007114:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007118:	4649      	mov	r1, r9
 800711a:	008b      	lsls	r3, r1, #2
 800711c:	4641      	mov	r1, r8
 800711e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007122:	4641      	mov	r1, r8
 8007124:	008a      	lsls	r2, r1, #2
 8007126:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800712a:	f7f9 fdad 	bl	8000c88 <__aeabi_uldivmod>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	4611      	mov	r1, r2
 8007134:	4b38      	ldr	r3, [pc, #224]	@ (8007218 <UART_SetConfig+0x4e4>)
 8007136:	fba3 2301 	umull	r2, r3, r3, r1
 800713a:	095b      	lsrs	r3, r3, #5
 800713c:	2264      	movs	r2, #100	@ 0x64
 800713e:	fb02 f303 	mul.w	r3, r2, r3
 8007142:	1acb      	subs	r3, r1, r3
 8007144:	011b      	lsls	r3, r3, #4
 8007146:	3332      	adds	r3, #50	@ 0x32
 8007148:	4a33      	ldr	r2, [pc, #204]	@ (8007218 <UART_SetConfig+0x4e4>)
 800714a:	fba2 2303 	umull	r2, r3, r2, r3
 800714e:	095b      	lsrs	r3, r3, #5
 8007150:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007154:	441c      	add	r4, r3
 8007156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800715a:	2200      	movs	r2, #0
 800715c:	673b      	str	r3, [r7, #112]	@ 0x70
 800715e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007160:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007164:	4642      	mov	r2, r8
 8007166:	464b      	mov	r3, r9
 8007168:	1891      	adds	r1, r2, r2
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	415b      	adcs	r3, r3
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007174:	4641      	mov	r1, r8
 8007176:	1851      	adds	r1, r2, r1
 8007178:	6039      	str	r1, [r7, #0]
 800717a:	4649      	mov	r1, r9
 800717c:	414b      	adcs	r3, r1
 800717e:	607b      	str	r3, [r7, #4]
 8007180:	f04f 0200 	mov.w	r2, #0
 8007184:	f04f 0300 	mov.w	r3, #0
 8007188:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800718c:	4659      	mov	r1, fp
 800718e:	00cb      	lsls	r3, r1, #3
 8007190:	4651      	mov	r1, sl
 8007192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007196:	4651      	mov	r1, sl
 8007198:	00ca      	lsls	r2, r1, #3
 800719a:	4610      	mov	r0, r2
 800719c:	4619      	mov	r1, r3
 800719e:	4603      	mov	r3, r0
 80071a0:	4642      	mov	r2, r8
 80071a2:	189b      	adds	r3, r3, r2
 80071a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071a6:	464b      	mov	r3, r9
 80071a8:	460a      	mov	r2, r1
 80071aa:	eb42 0303 	adc.w	r3, r2, r3
 80071ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80071ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80071bc:	f04f 0200 	mov.w	r2, #0
 80071c0:	f04f 0300 	mov.w	r3, #0
 80071c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80071c8:	4649      	mov	r1, r9
 80071ca:	008b      	lsls	r3, r1, #2
 80071cc:	4641      	mov	r1, r8
 80071ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071d2:	4641      	mov	r1, r8
 80071d4:	008a      	lsls	r2, r1, #2
 80071d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80071da:	f7f9 fd55 	bl	8000c88 <__aeabi_uldivmod>
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007218 <UART_SetConfig+0x4e4>)
 80071e4:	fba3 1302 	umull	r1, r3, r3, r2
 80071e8:	095b      	lsrs	r3, r3, #5
 80071ea:	2164      	movs	r1, #100	@ 0x64
 80071ec:	fb01 f303 	mul.w	r3, r1, r3
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	011b      	lsls	r3, r3, #4
 80071f4:	3332      	adds	r3, #50	@ 0x32
 80071f6:	4a08      	ldr	r2, [pc, #32]	@ (8007218 <UART_SetConfig+0x4e4>)
 80071f8:	fba2 2303 	umull	r2, r3, r2, r3
 80071fc:	095b      	lsrs	r3, r3, #5
 80071fe:	f003 020f 	and.w	r2, r3, #15
 8007202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4422      	add	r2, r4
 800720a:	609a      	str	r2, [r3, #8]
}
 800720c:	bf00      	nop
 800720e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007212:	46bd      	mov	sp, r7
 8007214:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007218:	51eb851f 	.word	0x51eb851f

0800721c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800721c:	b084      	sub	sp, #16
 800721e:	b580      	push	{r7, lr}
 8007220:	b084      	sub	sp, #16
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	f107 001c 	add.w	r0, r7, #28
 800722a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800722e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007232:	2b01      	cmp	r3, #1
 8007234:	d123      	bne.n	800727e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800724a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800725e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007262:	2b01      	cmp	r3, #1
 8007264:	d105      	bne.n	8007272 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f001 fae8 	bl	8008848 <USB_CoreReset>
 8007278:	4603      	mov	r3, r0
 800727a:	73fb      	strb	r3, [r7, #15]
 800727c:	e01b      	b.n	80072b6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 fadc 	bl	8008848 <USB_CoreReset>
 8007290:	4603      	mov	r3, r0
 8007292:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007294:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007298:	2b00      	cmp	r3, #0
 800729a:	d106      	bne.n	80072aa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80072a8:	e005      	b.n	80072b6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80072b6:	7fbb      	ldrb	r3, [r7, #30]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d10b      	bne.n	80072d4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f043 0206 	orr.w	r2, r3, #6
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f043 0220 	orr.w	r2, r3, #32
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80072d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072e0:	b004      	add	sp, #16
 80072e2:	4770      	bx	lr

080072e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	4613      	mov	r3, r2
 80072f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80072f2:	79fb      	ldrb	r3, [r7, #7]
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d165      	bne.n	80073c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	4a41      	ldr	r2, [pc, #260]	@ (8007400 <USB_SetTurnaroundTime+0x11c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d906      	bls.n	800730e <USB_SetTurnaroundTime+0x2a>
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	4a40      	ldr	r2, [pc, #256]	@ (8007404 <USB_SetTurnaroundTime+0x120>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d202      	bcs.n	800730e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007308:	230f      	movs	r3, #15
 800730a:	617b      	str	r3, [r7, #20]
 800730c:	e062      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	4a3c      	ldr	r2, [pc, #240]	@ (8007404 <USB_SetTurnaroundTime+0x120>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d306      	bcc.n	8007324 <USB_SetTurnaroundTime+0x40>
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	4a3b      	ldr	r2, [pc, #236]	@ (8007408 <USB_SetTurnaroundTime+0x124>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d202      	bcs.n	8007324 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800731e:	230e      	movs	r3, #14
 8007320:	617b      	str	r3, [r7, #20]
 8007322:	e057      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	4a38      	ldr	r2, [pc, #224]	@ (8007408 <USB_SetTurnaroundTime+0x124>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d306      	bcc.n	800733a <USB_SetTurnaroundTime+0x56>
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	4a37      	ldr	r2, [pc, #220]	@ (800740c <USB_SetTurnaroundTime+0x128>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d202      	bcs.n	800733a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007334:	230d      	movs	r3, #13
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	e04c      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	4a33      	ldr	r2, [pc, #204]	@ (800740c <USB_SetTurnaroundTime+0x128>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d306      	bcc.n	8007350 <USB_SetTurnaroundTime+0x6c>
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	4a32      	ldr	r2, [pc, #200]	@ (8007410 <USB_SetTurnaroundTime+0x12c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d802      	bhi.n	8007350 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800734a:	230c      	movs	r3, #12
 800734c:	617b      	str	r3, [r7, #20]
 800734e:	e041      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	4a2f      	ldr	r2, [pc, #188]	@ (8007410 <USB_SetTurnaroundTime+0x12c>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d906      	bls.n	8007366 <USB_SetTurnaroundTime+0x82>
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	4a2e      	ldr	r2, [pc, #184]	@ (8007414 <USB_SetTurnaroundTime+0x130>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d802      	bhi.n	8007366 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007360:	230b      	movs	r3, #11
 8007362:	617b      	str	r3, [r7, #20]
 8007364:	e036      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	4a2a      	ldr	r2, [pc, #168]	@ (8007414 <USB_SetTurnaroundTime+0x130>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d906      	bls.n	800737c <USB_SetTurnaroundTime+0x98>
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	4a29      	ldr	r2, [pc, #164]	@ (8007418 <USB_SetTurnaroundTime+0x134>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d802      	bhi.n	800737c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007376:	230a      	movs	r3, #10
 8007378:	617b      	str	r3, [r7, #20]
 800737a:	e02b      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	4a26      	ldr	r2, [pc, #152]	@ (8007418 <USB_SetTurnaroundTime+0x134>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d906      	bls.n	8007392 <USB_SetTurnaroundTime+0xae>
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	4a25      	ldr	r2, [pc, #148]	@ (800741c <USB_SetTurnaroundTime+0x138>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d202      	bcs.n	8007392 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800738c:	2309      	movs	r3, #9
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	e020      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	4a21      	ldr	r2, [pc, #132]	@ (800741c <USB_SetTurnaroundTime+0x138>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d306      	bcc.n	80073a8 <USB_SetTurnaroundTime+0xc4>
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	4a20      	ldr	r2, [pc, #128]	@ (8007420 <USB_SetTurnaroundTime+0x13c>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d802      	bhi.n	80073a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80073a2:	2308      	movs	r3, #8
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	e015      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	4a1d      	ldr	r2, [pc, #116]	@ (8007420 <USB_SetTurnaroundTime+0x13c>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d906      	bls.n	80073be <USB_SetTurnaroundTime+0xda>
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	4a1c      	ldr	r2, [pc, #112]	@ (8007424 <USB_SetTurnaroundTime+0x140>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d202      	bcs.n	80073be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80073b8:	2307      	movs	r3, #7
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	e00a      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80073be:	2306      	movs	r3, #6
 80073c0:	617b      	str	r3, [r7, #20]
 80073c2:	e007      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80073c4:	79fb      	ldrb	r3, [r7, #7]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d102      	bne.n	80073d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80073ca:	2309      	movs	r3, #9
 80073cc:	617b      	str	r3, [r7, #20]
 80073ce:	e001      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80073d0:	2309      	movs	r3, #9
 80073d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	029b      	lsls	r3, r3, #10
 80073e8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80073ec:	431a      	orrs	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	371c      	adds	r7, #28
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	00d8acbf 	.word	0x00d8acbf
 8007404:	00e4e1c0 	.word	0x00e4e1c0
 8007408:	00f42400 	.word	0x00f42400
 800740c:	01067380 	.word	0x01067380
 8007410:	011a499f 	.word	0x011a499f
 8007414:	01312cff 	.word	0x01312cff
 8007418:	014ca43f 	.word	0x014ca43f
 800741c:	016e3600 	.word	0x016e3600
 8007420:	01a6ab1f 	.word	0x01a6ab1f
 8007424:	01e84800 	.word	0x01e84800

08007428 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f043 0201 	orr.w	r2, r3, #1
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f023 0201 	bic.w	r2, r3, #1
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	460b      	mov	r3, r1
 8007476:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007488:	78fb      	ldrb	r3, [r7, #3]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d115      	bne.n	80074ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800749a:	200a      	movs	r0, #10
 800749c:	f7fb f9e2 	bl	8002864 <HAL_Delay>
      ms += 10U;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	330a      	adds	r3, #10
 80074a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f001 f93f 	bl	800872a <USB_GetMode>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d01e      	beq.n	80074f0 <USB_SetCurrentMode+0x84>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2bc7      	cmp	r3, #199	@ 0xc7
 80074b6:	d9f0      	bls.n	800749a <USB_SetCurrentMode+0x2e>
 80074b8:	e01a      	b.n	80074f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80074ba:	78fb      	ldrb	r3, [r7, #3]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d115      	bne.n	80074ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80074cc:	200a      	movs	r0, #10
 80074ce:	f7fb f9c9 	bl	8002864 <HAL_Delay>
      ms += 10U;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	330a      	adds	r3, #10
 80074d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f001 f926 	bl	800872a <USB_GetMode>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d005      	beq.n	80074f0 <USB_SetCurrentMode+0x84>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2bc7      	cmp	r3, #199	@ 0xc7
 80074e8:	d9f0      	bls.n	80074cc <USB_SetCurrentMode+0x60>
 80074ea:	e001      	b.n	80074f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e005      	b.n	80074fc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2bc8      	cmp	r3, #200	@ 0xc8
 80074f4:	d101      	bne.n	80074fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e000      	b.n	80074fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007504:	b084      	sub	sp, #16
 8007506:	b580      	push	{r7, lr}
 8007508:	b086      	sub	sp, #24
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800751e:	2300      	movs	r3, #0
 8007520:	613b      	str	r3, [r7, #16]
 8007522:	e009      	b.n	8007538 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	3340      	adds	r3, #64	@ 0x40
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	2200      	movs	r2, #0
 8007530:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	3301      	adds	r3, #1
 8007536:	613b      	str	r3, [r7, #16]
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	2b0e      	cmp	r3, #14
 800753c:	d9f2      	bls.n	8007524 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800753e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007542:	2b00      	cmp	r3, #0
 8007544:	d11c      	bne.n	8007580 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007554:	f043 0302 	orr.w	r3, r3, #2
 8007558:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800755e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800756a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007576:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	639a      	str	r2, [r3, #56]	@ 0x38
 800757e:	e00b      	b.n	8007598 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007584:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007590:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800759e:	461a      	mov	r2, r3
 80075a0:	2300      	movs	r3, #0
 80075a2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075a4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d10d      	bne.n	80075c8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80075ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d104      	bne.n	80075be <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80075b4:	2100      	movs	r1, #0
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f968 	bl	800788c <USB_SetDevSpeed>
 80075bc:	e008      	b.n	80075d0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80075be:	2101      	movs	r1, #1
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f963 	bl	800788c <USB_SetDevSpeed>
 80075c6:	e003      	b.n	80075d0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80075c8:	2103      	movs	r1, #3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f95e 	bl	800788c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075d0:	2110      	movs	r1, #16
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f8fa 	bl	80077cc <USB_FlushTxFifo>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f924 	bl	8007830 <USB_FlushRxFifo>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075f8:	461a      	mov	r2, r3
 80075fa:	2300      	movs	r3, #0
 80075fc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007604:	461a      	mov	r2, r3
 8007606:	2300      	movs	r3, #0
 8007608:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007610:	461a      	mov	r2, r3
 8007612:	2300      	movs	r3, #0
 8007614:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007616:	2300      	movs	r3, #0
 8007618:	613b      	str	r3, [r7, #16]
 800761a:	e043      	b.n	80076a4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	015a      	lsls	r2, r3, #5
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	4413      	add	r3, r2
 8007624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800762e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007632:	d118      	bne.n	8007666 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10a      	bne.n	8007650 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	4413      	add	r3, r2
 8007642:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007646:	461a      	mov	r2, r3
 8007648:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800764c:	6013      	str	r3, [r2, #0]
 800764e:	e013      	b.n	8007678 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800765c:	461a      	mov	r2, r3
 800765e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	e008      	b.n	8007678 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	015a      	lsls	r2, r3, #5
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	4413      	add	r3, r2
 800766e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007672:	461a      	mov	r2, r3
 8007674:	2300      	movs	r3, #0
 8007676:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007684:	461a      	mov	r2, r3
 8007686:	2300      	movs	r3, #0
 8007688:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007696:	461a      	mov	r2, r3
 8007698:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800769c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	3301      	adds	r3, #1
 80076a2:	613b      	str	r3, [r7, #16]
 80076a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80076a8:	461a      	mov	r2, r3
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d3b5      	bcc.n	800761c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076b0:	2300      	movs	r3, #0
 80076b2:	613b      	str	r3, [r7, #16]
 80076b4:	e043      	b.n	800773e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076cc:	d118      	bne.n	8007700 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10a      	bne.n	80076ea <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	015a      	lsls	r2, r3, #5
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	4413      	add	r3, r2
 80076dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076e0:	461a      	mov	r2, r3
 80076e2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	e013      	b.n	8007712 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	015a      	lsls	r2, r3, #5
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	4413      	add	r3, r2
 80076f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076f6:	461a      	mov	r2, r3
 80076f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80076fc:	6013      	str	r3, [r2, #0]
 80076fe:	e008      	b.n	8007712 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4413      	add	r3, r2
 8007708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800770c:	461a      	mov	r2, r3
 800770e:	2300      	movs	r3, #0
 8007710:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	4413      	add	r3, r2
 800771a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800771e:	461a      	mov	r2, r3
 8007720:	2300      	movs	r3, #0
 8007722:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4413      	add	r3, r2
 800772c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007730:	461a      	mov	r2, r3
 8007732:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007736:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	3301      	adds	r3, #1
 800773c:	613b      	str	r3, [r7, #16]
 800773e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007742:	461a      	mov	r2, r3
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	4293      	cmp	r3, r2
 8007748:	d3b5      	bcc.n	80076b6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007758:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800775c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800776a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800776c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007770:	2b00      	cmp	r3, #0
 8007772:	d105      	bne.n	8007780 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	f043 0210 	orr.w	r2, r3, #16
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	699a      	ldr	r2, [r3, #24]
 8007784:	4b10      	ldr	r3, [pc, #64]	@ (80077c8 <USB_DevInit+0x2c4>)
 8007786:	4313      	orrs	r3, r2
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800778c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007790:	2b00      	cmp	r3, #0
 8007792:	d005      	beq.n	80077a0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	f043 0208 	orr.w	r2, r3, #8
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80077a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d107      	bne.n	80077b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077b0:	f043 0304 	orr.w	r3, r3, #4
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077c4:	b004      	add	sp, #16
 80077c6:	4770      	bx	lr
 80077c8:	803c3800 	.word	0x803c3800

080077cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	3301      	adds	r3, #1
 80077de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077e6:	d901      	bls.n	80077ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e01b      	b.n	8007824 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	daf2      	bge.n	80077da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	019b      	lsls	r3, r3, #6
 80077fc:	f043 0220 	orr.w	r2, r3, #32
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	3301      	adds	r3, #1
 8007808:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007810:	d901      	bls.n	8007816 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e006      	b.n	8007824 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	f003 0320 	and.w	r3, r3, #32
 800781e:	2b20      	cmp	r3, #32
 8007820:	d0f0      	beq.n	8007804 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	3301      	adds	r3, #1
 8007840:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007848:	d901      	bls.n	800784e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e018      	b.n	8007880 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	daf2      	bge.n	800783c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2210      	movs	r2, #16
 800785e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	3301      	adds	r3, #1
 8007864:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800786c:	d901      	bls.n	8007872 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e006      	b.n	8007880 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	f003 0310 	and.w	r3, r3, #16
 800787a:	2b10      	cmp	r3, #16
 800787c:	d0f0      	beq.n	8007860 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	460b      	mov	r3, r1
 8007896:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	78fb      	ldrb	r3, [r7, #3]
 80078a6:	68f9      	ldr	r1, [r7, #12]
 80078a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078ac:	4313      	orrs	r3, r2
 80078ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80078be:	b480      	push	{r7}
 80078c0:	b087      	sub	sp, #28
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f003 0306 	and.w	r3, r3, #6
 80078d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d102      	bne.n	80078e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80078de:	2300      	movs	r3, #0
 80078e0:	75fb      	strb	r3, [r7, #23]
 80078e2:	e00a      	b.n	80078fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d002      	beq.n	80078f0 <USB_GetDevSpeed+0x32>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2b06      	cmp	r3, #6
 80078ee:	d102      	bne.n	80078f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80078f0:	2302      	movs	r3, #2
 80078f2:	75fb      	strb	r3, [r7, #23]
 80078f4:	e001      	b.n	80078fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80078f6:	230f      	movs	r3, #15
 80078f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80078fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	371c      	adds	r7, #28
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	785b      	ldrb	r3, [r3, #1]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d13a      	bne.n	800799a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800792a:	69da      	ldr	r2, [r3, #28]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	f003 030f 	and.w	r3, r3, #15
 8007934:	2101      	movs	r1, #1
 8007936:	fa01 f303 	lsl.w	r3, r1, r3
 800793a:	b29b      	uxth	r3, r3
 800793c:	68f9      	ldr	r1, [r7, #12]
 800793e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007942:	4313      	orrs	r3, r2
 8007944:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	4413      	add	r3, r2
 800794e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d155      	bne.n	8007a08 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	791b      	ldrb	r3, [r3, #4]
 8007976:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007978:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	059b      	lsls	r3, r3, #22
 800797e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007980:	4313      	orrs	r3, r2
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	0151      	lsls	r1, r2, #5
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	440a      	add	r2, r1
 800798a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800798e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007992:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007996:	6013      	str	r3, [r2, #0]
 8007998:	e036      	b.n	8007a08 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079a0:	69da      	ldr	r2, [r3, #28]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	f003 030f 	and.w	r3, r3, #15
 80079aa:	2101      	movs	r1, #1
 80079ac:	fa01 f303 	lsl.w	r3, r1, r3
 80079b0:	041b      	lsls	r3, r3, #16
 80079b2:	68f9      	ldr	r1, [r7, #12]
 80079b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079b8:	4313      	orrs	r3, r2
 80079ba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d11a      	bne.n	8007a08 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	791b      	ldrb	r3, [r3, #4]
 80079ec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80079ee:	430b      	orrs	r3, r1
 80079f0:	4313      	orrs	r3, r2
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	0151      	lsls	r1, r2, #5
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	440a      	add	r2, r1
 80079fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a06:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
	...

08007a18 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	785b      	ldrb	r3, [r3, #1]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d161      	bne.n	8007af8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a4a:	d11f      	bne.n	8007a8c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	0151      	lsls	r1, r2, #5
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	440a      	add	r2, r1
 8007a62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a66:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a6a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	015a      	lsls	r2, r3, #5
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	0151      	lsls	r1, r2, #5
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	440a      	add	r2, r1
 8007a82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	f003 030f 	and.w	r3, r3, #15
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	43db      	mvns	r3, r3
 8007aa6:	68f9      	ldr	r1, [r7, #12]
 8007aa8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007aac:	4013      	ands	r3, r2
 8007aae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ab6:	69da      	ldr	r2, [r3, #28]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	f003 030f 	and.w	r3, r3, #15
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	43db      	mvns	r3, r3
 8007aca:	68f9      	ldr	r1, [r7, #12]
 8007acc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	015a      	lsls	r2, r3, #5
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	0159      	lsls	r1, r3, #5
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	440b      	add	r3, r1
 8007aea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aee:	4619      	mov	r1, r3
 8007af0:	4b35      	ldr	r3, [pc, #212]	@ (8007bc8 <USB_DeactivateEndpoint+0x1b0>)
 8007af2:	4013      	ands	r3, r2
 8007af4:	600b      	str	r3, [r1, #0]
 8007af6:	e060      	b.n	8007bba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b0e:	d11f      	bne.n	8007b50 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	0151      	lsls	r1, r2, #5
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	440a      	add	r2, r1
 8007b26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b2a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007b2e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	0151      	lsls	r1, r2, #5
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	440a      	add	r2, r1
 8007b46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	f003 030f 	and.w	r3, r3, #15
 8007b60:	2101      	movs	r1, #1
 8007b62:	fa01 f303 	lsl.w	r3, r1, r3
 8007b66:	041b      	lsls	r3, r3, #16
 8007b68:	43db      	mvns	r3, r3
 8007b6a:	68f9      	ldr	r1, [r7, #12]
 8007b6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b70:	4013      	ands	r3, r2
 8007b72:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b7a:	69da      	ldr	r2, [r3, #28]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	f003 030f 	and.w	r3, r3, #15
 8007b84:	2101      	movs	r1, #1
 8007b86:	fa01 f303 	lsl.w	r3, r1, r3
 8007b8a:	041b      	lsls	r3, r3, #16
 8007b8c:	43db      	mvns	r3, r3
 8007b8e:	68f9      	ldr	r1, [r7, #12]
 8007b90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b94:	4013      	ands	r3, r2
 8007b96:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	015a      	lsls	r2, r3, #5
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	0159      	lsls	r1, r3, #5
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	440b      	add	r3, r1
 8007bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4b05      	ldr	r3, [pc, #20]	@ (8007bcc <USB_DeactivateEndpoint+0x1b4>)
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	ec337800 	.word	0xec337800
 8007bcc:	eff37800 	.word	0xeff37800

08007bd0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b08a      	sub	sp, #40	@ 0x28
 8007bd4:	af02      	add	r7, sp, #8
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	785b      	ldrb	r3, [r3, #1]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	f040 817f 	bne.w	8007ef0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d132      	bne.n	8007c60 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	015a      	lsls	r2, r3, #5
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	4413      	add	r3, r2
 8007c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	69ba      	ldr	r2, [r7, #24]
 8007c0a:	0151      	lsls	r1, r2, #5
 8007c0c:	69fa      	ldr	r2, [r7, #28]
 8007c0e:	440a      	add	r2, r1
 8007c10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c14:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007c18:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007c1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	0151      	lsls	r1, r2, #5
 8007c30:	69fa      	ldr	r2, [r7, #28]
 8007c32:	440a      	add	r2, r1
 8007c34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	0151      	lsls	r1, r2, #5
 8007c50:	69fa      	ldr	r2, [r7, #28]
 8007c52:	440a      	add	r2, r1
 8007c54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c58:	0cdb      	lsrs	r3, r3, #19
 8007c5a:	04db      	lsls	r3, r3, #19
 8007c5c:	6113      	str	r3, [r2, #16]
 8007c5e:	e097      	b.n	8007d90 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	0151      	lsls	r1, r2, #5
 8007c72:	69fa      	ldr	r2, [r7, #28]
 8007c74:	440a      	add	r2, r1
 8007c76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c7a:	0cdb      	lsrs	r3, r3, #19
 8007c7c:	04db      	lsls	r3, r3, #19
 8007c7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	0151      	lsls	r1, r2, #5
 8007c92:	69fa      	ldr	r2, [r7, #28]
 8007c94:	440a      	add	r2, r1
 8007c96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c9a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007c9e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007ca2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d11a      	bne.n	8007ce0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	691a      	ldr	r2, [r3, #16]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d903      	bls.n	8007cbe <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	689a      	ldr	r2, [r3, #8]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	69ba      	ldr	r2, [r7, #24]
 8007cce:	0151      	lsls	r1, r2, #5
 8007cd0:	69fa      	ldr	r2, [r7, #28]
 8007cd2:	440a      	add	r2, r1
 8007cd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007cdc:	6113      	str	r3, [r2, #16]
 8007cde:	e044      	b.n	8007d6a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	691a      	ldr	r2, [r3, #16]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	4413      	add	r3, r2
 8007cea:	1e5a      	subs	r2, r3, #1
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d02:	691a      	ldr	r2, [r3, #16]
 8007d04:	8afb      	ldrh	r3, [r7, #22]
 8007d06:	04d9      	lsls	r1, r3, #19
 8007d08:	4ba4      	ldr	r3, [pc, #656]	@ (8007f9c <USB_EPStartXfer+0x3cc>)
 8007d0a:	400b      	ands	r3, r1
 8007d0c:	69b9      	ldr	r1, [r7, #24]
 8007d0e:	0148      	lsls	r0, r1, #5
 8007d10:	69f9      	ldr	r1, [r7, #28]
 8007d12:	4401      	add	r1, r0
 8007d14:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	791b      	ldrb	r3, [r3, #4]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d122      	bne.n	8007d6a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	0151      	lsls	r1, r2, #5
 8007d36:	69fa      	ldr	r2, [r7, #28]
 8007d38:	440a      	add	r2, r1
 8007d3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d3e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007d42:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d50:	691a      	ldr	r2, [r3, #16]
 8007d52:	8afb      	ldrh	r3, [r7, #22]
 8007d54:	075b      	lsls	r3, r3, #29
 8007d56:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007d5a:	69b9      	ldr	r1, [r7, #24]
 8007d5c:	0148      	lsls	r0, r1, #5
 8007d5e:	69f9      	ldr	r1, [r7, #28]
 8007d60:	4401      	add	r1, r0
 8007d62:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007d66:	4313      	orrs	r3, r2
 8007d68:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d76:	691a      	ldr	r2, [r3, #16]
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d80:	69b9      	ldr	r1, [r7, #24]
 8007d82:	0148      	lsls	r0, r1, #5
 8007d84:	69f9      	ldr	r1, [r7, #28]
 8007d86:	4401      	add	r1, r0
 8007d88:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d90:	79fb      	ldrb	r3, [r7, #7]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d14b      	bne.n	8007e2e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	69db      	ldr	r3, [r3, #28]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d009      	beq.n	8007db2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	015a      	lsls	r2, r3, #5
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	4413      	add	r3, r2
 8007da6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007daa:	461a      	mov	r2, r3
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	69db      	ldr	r3, [r3, #28]
 8007db0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	791b      	ldrb	r3, [r3, #4]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d128      	bne.n	8007e0c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d110      	bne.n	8007dec <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	69ba      	ldr	r2, [r7, #24]
 8007dda:	0151      	lsls	r1, r2, #5
 8007ddc:	69fa      	ldr	r2, [r7, #28]
 8007dde:	440a      	add	r2, r1
 8007de0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007de4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007de8:	6013      	str	r3, [r2, #0]
 8007dea:	e00f      	b.n	8007e0c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	0151      	lsls	r1, r2, #5
 8007dfe:	69fa      	ldr	r2, [r7, #28]
 8007e00:	440a      	add	r2, r1
 8007e02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e0a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	69ba      	ldr	r2, [r7, #24]
 8007e1c:	0151      	lsls	r1, r2, #5
 8007e1e:	69fa      	ldr	r2, [r7, #28]
 8007e20:	440a      	add	r2, r1
 8007e22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e26:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007e2a:	6013      	str	r3, [r2, #0]
 8007e2c:	e166      	b.n	80080fc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	0151      	lsls	r1, r2, #5
 8007e40:	69fa      	ldr	r2, [r7, #28]
 8007e42:	440a      	add	r2, r1
 8007e44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e48:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007e4c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	791b      	ldrb	r3, [r3, #4]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d015      	beq.n	8007e82 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f000 814e 	beq.w	80080fc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	f003 030f 	and.w	r3, r3, #15
 8007e70:	2101      	movs	r1, #1
 8007e72:	fa01 f303 	lsl.w	r3, r1, r3
 8007e76:	69f9      	ldr	r1, [r7, #28]
 8007e78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	634b      	str	r3, [r1, #52]	@ 0x34
 8007e80:	e13c      	b.n	80080fc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d110      	bne.n	8007eb4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	015a      	lsls	r2, r3, #5
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	69ba      	ldr	r2, [r7, #24]
 8007ea2:	0151      	lsls	r1, r2, #5
 8007ea4:	69fa      	ldr	r2, [r7, #28]
 8007ea6:	440a      	add	r2, r1
 8007ea8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007eac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007eb0:	6013      	str	r3, [r2, #0]
 8007eb2:	e00f      	b.n	8007ed4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	015a      	lsls	r2, r3, #5
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	4413      	add	r3, r2
 8007ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	0151      	lsls	r1, r2, #5
 8007ec6:	69fa      	ldr	r2, [r7, #28]
 8007ec8:	440a      	add	r2, r1
 8007eca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ece:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ed2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	68d9      	ldr	r1, [r3, #12]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	781a      	ldrb	r2, [r3, #0]
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	b298      	uxth	r0, r3
 8007ee2:	79fb      	ldrb	r3, [r7, #7]
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f000 f9b9 	bl	8008260 <USB_WritePacket>
 8007eee:	e105      	b.n	80080fc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	015a      	lsls	r2, r3, #5
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	69ba      	ldr	r2, [r7, #24]
 8007f00:	0151      	lsls	r1, r2, #5
 8007f02:	69fa      	ldr	r2, [r7, #28]
 8007f04:	440a      	add	r2, r1
 8007f06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f0a:	0cdb      	lsrs	r3, r3, #19
 8007f0c:	04db      	lsls	r3, r3, #19
 8007f0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	015a      	lsls	r2, r3, #5
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	4413      	add	r3, r2
 8007f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	0151      	lsls	r1, r2, #5
 8007f22:	69fa      	ldr	r2, [r7, #28]
 8007f24:	440a      	add	r2, r1
 8007f26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f2a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007f2e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007f32:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d132      	bne.n	8007fa0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	689a      	ldr	r2, [r3, #8]
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	689a      	ldr	r2, [r3, #8]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f5e:	691a      	ldr	r2, [r3, #16]
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f68:	69b9      	ldr	r1, [r7, #24]
 8007f6a:	0148      	lsls	r0, r1, #5
 8007f6c:	69f9      	ldr	r1, [r7, #28]
 8007f6e:	4401      	add	r1, r0
 8007f70:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007f74:	4313      	orrs	r3, r2
 8007f76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	69ba      	ldr	r2, [r7, #24]
 8007f88:	0151      	lsls	r1, r2, #5
 8007f8a:	69fa      	ldr	r2, [r7, #28]
 8007f8c:	440a      	add	r2, r1
 8007f8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f96:	6113      	str	r3, [r2, #16]
 8007f98:	e062      	b.n	8008060 <USB_EPStartXfer+0x490>
 8007f9a:	bf00      	nop
 8007f9c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d123      	bne.n	8007ff0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fb4:	691a      	ldr	r2, [r3, #16]
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fbe:	69b9      	ldr	r1, [r7, #24]
 8007fc0:	0148      	lsls	r0, r1, #5
 8007fc2:	69f9      	ldr	r1, [r7, #28]
 8007fc4:	4401      	add	r1, r0
 8007fc6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	69ba      	ldr	r2, [r7, #24]
 8007fde:	0151      	lsls	r1, r2, #5
 8007fe0:	69fa      	ldr	r2, [r7, #28]
 8007fe2:	440a      	add	r2, r1
 8007fe4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fe8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007fec:	6113      	str	r3, [r2, #16]
 8007fee:	e037      	b.n	8008060 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	691a      	ldr	r2, [r3, #16]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	1e5a      	subs	r2, r3, #1
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	fbb2 f3f3 	udiv	r3, r2, r3
 8008004:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	8afa      	ldrh	r2, [r7, #22]
 800800c:	fb03 f202 	mul.w	r2, r3, r2
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	015a      	lsls	r2, r3, #5
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	4413      	add	r3, r2
 800801c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008020:	691a      	ldr	r2, [r3, #16]
 8008022:	8afb      	ldrh	r3, [r7, #22]
 8008024:	04d9      	lsls	r1, r3, #19
 8008026:	4b38      	ldr	r3, [pc, #224]	@ (8008108 <USB_EPStartXfer+0x538>)
 8008028:	400b      	ands	r3, r1
 800802a:	69b9      	ldr	r1, [r7, #24]
 800802c:	0148      	lsls	r0, r1, #5
 800802e:	69f9      	ldr	r1, [r7, #28]
 8008030:	4401      	add	r1, r0
 8008032:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008036:	4313      	orrs	r3, r2
 8008038:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	015a      	lsls	r2, r3, #5
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	4413      	add	r3, r2
 8008042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008046:	691a      	ldr	r2, [r3, #16]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	6a1b      	ldr	r3, [r3, #32]
 800804c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008050:	69b9      	ldr	r1, [r7, #24]
 8008052:	0148      	lsls	r0, r1, #5
 8008054:	69f9      	ldr	r1, [r7, #28]
 8008056:	4401      	add	r1, r0
 8008058:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800805c:	4313      	orrs	r3, r2
 800805e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008060:	79fb      	ldrb	r3, [r7, #7]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d10d      	bne.n	8008082 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d009      	beq.n	8008082 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	68d9      	ldr	r1, [r3, #12]
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	4413      	add	r3, r2
 800807a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800807e:	460a      	mov	r2, r1
 8008080:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	791b      	ldrb	r3, [r3, #4]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d128      	bne.n	80080dc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008096:	2b00      	cmp	r3, #0
 8008098:	d110      	bne.n	80080bc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	015a      	lsls	r2, r3, #5
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	4413      	add	r3, r2
 80080a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	0151      	lsls	r1, r2, #5
 80080ac:	69fa      	ldr	r2, [r7, #28]
 80080ae:	440a      	add	r2, r1
 80080b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80080b8:	6013      	str	r3, [r2, #0]
 80080ba:	e00f      	b.n	80080dc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	0151      	lsls	r1, r2, #5
 80080ce:	69fa      	ldr	r2, [r7, #28]
 80080d0:	440a      	add	r2, r1
 80080d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	69ba      	ldr	r2, [r7, #24]
 80080ec:	0151      	lsls	r1, r2, #5
 80080ee:	69fa      	ldr	r2, [r7, #28]
 80080f0:	440a      	add	r2, r1
 80080f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080f6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80080fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3720      	adds	r7, #32
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	1ff80000 	.word	0x1ff80000

0800810c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800810c:	b480      	push	{r7}
 800810e:	b087      	sub	sp, #28
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	785b      	ldrb	r3, [r3, #1]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d14a      	bne.n	80081c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800813e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008142:	f040 8086 	bne.w	8008252 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	015a      	lsls	r2, r3, #5
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	4413      	add	r3, r2
 8008150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	7812      	ldrb	r2, [r2, #0]
 800815a:	0151      	lsls	r1, r2, #5
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	440a      	add	r2, r1
 8008160:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008164:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008168:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	7812      	ldrb	r2, [r2, #0]
 800817e:	0151      	lsls	r1, r2, #5
 8008180:	693a      	ldr	r2, [r7, #16]
 8008182:	440a      	add	r2, r1
 8008184:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008188:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800818c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	3301      	adds	r3, #1
 8008192:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f242 7210 	movw	r2, #10000	@ 0x2710
 800819a:	4293      	cmp	r3, r2
 800819c:	d902      	bls.n	80081a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	75fb      	strb	r3, [r7, #23]
          break;
 80081a2:	e056      	b.n	8008252 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081bc:	d0e7      	beq.n	800818e <USB_EPStopXfer+0x82>
 80081be:	e048      	b.n	8008252 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	015a      	lsls	r2, r3, #5
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	4413      	add	r3, r2
 80081ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081d8:	d13b      	bne.n	8008252 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	015a      	lsls	r2, r3, #5
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	4413      	add	r3, r2
 80081e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	7812      	ldrb	r2, [r2, #0]
 80081ee:	0151      	lsls	r1, r2, #5
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	440a      	add	r2, r1
 80081f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80081fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	015a      	lsls	r2, r3, #5
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	4413      	add	r3, r2
 8008208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	7812      	ldrb	r2, [r2, #0]
 8008212:	0151      	lsls	r1, r2, #5
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	440a      	add	r2, r1
 8008218:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800821c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008220:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	3301      	adds	r3, #1
 8008226:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800822e:	4293      	cmp	r3, r2
 8008230:	d902      	bls.n	8008238 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	75fb      	strb	r3, [r7, #23]
          break;
 8008236:	e00c      	b.n	8008252 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	4413      	add	r3, r2
 8008242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800824c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008250:	d0e7      	beq.n	8008222 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008252:	7dfb      	ldrb	r3, [r7, #23]
}
 8008254:	4618      	mov	r0, r3
 8008256:	371c      	adds	r7, #28
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008260:	b480      	push	{r7}
 8008262:	b089      	sub	sp, #36	@ 0x24
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	4611      	mov	r1, r2
 800826c:	461a      	mov	r2, r3
 800826e:	460b      	mov	r3, r1
 8008270:	71fb      	strb	r3, [r7, #7]
 8008272:	4613      	mov	r3, r2
 8008274:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800827e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008282:	2b00      	cmp	r3, #0
 8008284:	d123      	bne.n	80082ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008286:	88bb      	ldrh	r3, [r7, #4]
 8008288:	3303      	adds	r3, #3
 800828a:	089b      	lsrs	r3, r3, #2
 800828c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800828e:	2300      	movs	r3, #0
 8008290:	61bb      	str	r3, [r7, #24]
 8008292:	e018      	b.n	80082c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008294:	79fb      	ldrb	r3, [r7, #7]
 8008296:	031a      	lsls	r2, r3, #12
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	4413      	add	r3, r2
 800829c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082a0:	461a      	mov	r2, r3
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	3301      	adds	r3, #1
 80082ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	3301      	adds	r3, #1
 80082b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	3301      	adds	r3, #1
 80082b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	3301      	adds	r3, #1
 80082be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	3301      	adds	r3, #1
 80082c4:	61bb      	str	r3, [r7, #24]
 80082c6:	69ba      	ldr	r2, [r7, #24]
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d3e2      	bcc.n	8008294 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3724      	adds	r7, #36	@ 0x24
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80082dc:	b480      	push	{r7}
 80082de:	b08b      	sub	sp, #44	@ 0x2c
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	4613      	mov	r3, r2
 80082e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80082f2:	88fb      	ldrh	r3, [r7, #6]
 80082f4:	089b      	lsrs	r3, r3, #2
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80082fa:	88fb      	ldrh	r3, [r7, #6]
 80082fc:	f003 0303 	and.w	r3, r3, #3
 8008300:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008302:	2300      	movs	r3, #0
 8008304:	623b      	str	r3, [r7, #32]
 8008306:	e014      	b.n	8008332 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008312:	601a      	str	r2, [r3, #0]
    pDest++;
 8008314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008316:	3301      	adds	r3, #1
 8008318:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800831a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831c:	3301      	adds	r3, #1
 800831e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008322:	3301      	adds	r3, #1
 8008324:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008328:	3301      	adds	r3, #1
 800832a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	3301      	adds	r3, #1
 8008330:	623b      	str	r3, [r7, #32]
 8008332:	6a3a      	ldr	r2, [r7, #32]
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	429a      	cmp	r2, r3
 8008338:	d3e6      	bcc.n	8008308 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800833a:	8bfb      	ldrh	r3, [r7, #30]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d01e      	beq.n	800837e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008340:	2300      	movs	r3, #0
 8008342:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800834a:	461a      	mov	r2, r3
 800834c:	f107 0310 	add.w	r3, r7, #16
 8008350:	6812      	ldr	r2, [r2, #0]
 8008352:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	b2db      	uxtb	r3, r3
 800835a:	00db      	lsls	r3, r3, #3
 800835c:	fa22 f303 	lsr.w	r3, r2, r3
 8008360:	b2da      	uxtb	r2, r3
 8008362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008364:	701a      	strb	r2, [r3, #0]
      i++;
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	3301      	adds	r3, #1
 800836a:	623b      	str	r3, [r7, #32]
      pDest++;
 800836c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836e:	3301      	adds	r3, #1
 8008370:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008372:	8bfb      	ldrh	r3, [r7, #30]
 8008374:	3b01      	subs	r3, #1
 8008376:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008378:	8bfb      	ldrh	r3, [r7, #30]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1ea      	bne.n	8008354 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800837e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008380:	4618      	mov	r0, r3
 8008382:	372c      	adds	r7, #44	@ 0x2c
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	785b      	ldrb	r3, [r3, #1]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d12c      	bne.n	8008402 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	015a      	lsls	r2, r3, #5
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	4413      	add	r3, r2
 80083b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	db12      	blt.n	80083e0 <USB_EPSetStall+0x54>
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00f      	beq.n	80083e0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	0151      	lsls	r1, r2, #5
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	440a      	add	r2, r1
 80083d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80083de:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	0151      	lsls	r1, r2, #5
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	440a      	add	r2, r1
 80083f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80083fe:	6013      	str	r3, [r2, #0]
 8008400:	e02b      	b.n	800845a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	015a      	lsls	r2, r3, #5
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	4413      	add	r3, r2
 800840a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	db12      	blt.n	800843a <USB_EPSetStall+0xae>
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00f      	beq.n	800843a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	015a      	lsls	r2, r3, #5
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	4413      	add	r3, r2
 8008422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	0151      	lsls	r1, r2, #5
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	440a      	add	r2, r1
 8008430:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008434:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008438:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	4413      	add	r3, r2
 8008442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	0151      	lsls	r1, r2, #5
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	440a      	add	r2, r1
 8008450:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008454:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008458:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	785b      	ldrb	r3, [r3, #1]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d128      	bne.n	80084d6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	4413      	add	r3, r2
 800848c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	0151      	lsls	r1, r2, #5
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	440a      	add	r2, r1
 800849a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800849e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80084a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	791b      	ldrb	r3, [r3, #4]
 80084a8:	2b03      	cmp	r3, #3
 80084aa:	d003      	beq.n	80084b4 <USB_EPClearStall+0x4c>
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	791b      	ldrb	r3, [r3, #4]
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d138      	bne.n	8008526 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	0151      	lsls	r1, r2, #5
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	440a      	add	r2, r1
 80084ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	e027      	b.n	8008526 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	0151      	lsls	r1, r2, #5
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	440a      	add	r2, r1
 80084ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80084f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	791b      	ldrb	r3, [r3, #4]
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d003      	beq.n	8008506 <USB_EPClearStall+0x9e>
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	791b      	ldrb	r3, [r3, #4]
 8008502:	2b02      	cmp	r3, #2
 8008504:	d10f      	bne.n	8008526 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	4413      	add	r3, r2
 800850e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	0151      	lsls	r1, r2, #5
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	440a      	add	r2, r1
 800851c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008524:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	460b      	mov	r3, r1
 800853e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008552:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008556:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	78fb      	ldrb	r3, [r7, #3]
 8008562:	011b      	lsls	r3, r3, #4
 8008564:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008568:	68f9      	ldr	r1, [r7, #12]
 800856a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800856e:	4313      	orrs	r3, r2
 8008570:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800859a:	f023 0303 	bic.w	r3, r3, #3
 800859e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085ae:	f023 0302 	bic.w	r3, r3, #2
 80085b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3714      	adds	r7, #20
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b085      	sub	sp, #20
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80085dc:	f023 0303 	bic.w	r3, r3, #3
 80085e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085f0:	f043 0302 	orr.w	r3, r3, #2
 80085f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	4013      	ands	r3, r2
 800861a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800861c:	68fb      	ldr	r3, [r7, #12]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800862a:	b480      	push	{r7}
 800862c:	b085      	sub	sp, #20
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	4013      	ands	r3, r2
 800864c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	0c1b      	lsrs	r3, r3, #16
}
 8008652:	4618      	mov	r0, r3
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr

0800865e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800865e:	b480      	push	{r7}
 8008660:	b085      	sub	sp, #20
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800867a:	69db      	ldr	r3, [r3, #28]
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	4013      	ands	r3, r2
 8008680:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	b29b      	uxth	r3, r3
}
 8008686:	4618      	mov	r0, r3
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008692:	b480      	push	{r7}
 8008694:	b085      	sub	sp, #20
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	460b      	mov	r3, r1
 800869c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80086a2:	78fb      	ldrb	r3, [r7, #3]
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	4013      	ands	r3, r2
 80086be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80086c0:	68bb      	ldr	r3, [r7, #8]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b087      	sub	sp, #28
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	460b      	mov	r3, r1
 80086d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086f0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80086f2:	78fb      	ldrb	r3, [r7, #3]
 80086f4:	f003 030f 	and.w	r3, r3, #15
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	fa22 f303 	lsr.w	r3, r2, r3
 80086fe:	01db      	lsls	r3, r3, #7
 8008700:	b2db      	uxtb	r3, r3
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	4313      	orrs	r3, r2
 8008706:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008708:	78fb      	ldrb	r3, [r7, #3]
 800870a:	015a      	lsls	r2, r3, #5
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	4413      	add	r3, r2
 8008710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	4013      	ands	r3, r2
 800871a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800871c:	68bb      	ldr	r3, [r7, #8]
}
 800871e:	4618      	mov	r0, r3
 8008720:	371c      	adds	r7, #28
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr

0800872a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800872a:	b480      	push	{r7}
 800872c:	b083      	sub	sp, #12
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	f003 0301 	and.w	r3, r3, #1
}
 800873a:	4618      	mov	r0, r3
 800873c:	370c      	adds	r7, #12
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008746:	b480      	push	{r7}
 8008748:	b085      	sub	sp, #20
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008760:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008764:	f023 0307 	bic.w	r3, r3, #7
 8008768:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800877c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3714      	adds	r7, #20
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	460b      	mov	r3, r1
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	333c      	adds	r3, #60	@ 0x3c
 80087a2:	3304      	adds	r3, #4
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	4a26      	ldr	r2, [pc, #152]	@ (8008844 <USB_EP0_OutStart+0xb8>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d90a      	bls.n	80087c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087c0:	d101      	bne.n	80087c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	e037      	b.n	8008836 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087cc:	461a      	mov	r2, r3
 80087ce:	2300      	movs	r3, #0
 80087d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80087e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087f4:	f043 0318 	orr.w	r3, r3, #24
 80087f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	697a      	ldr	r2, [r7, #20]
 8008804:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008808:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800880c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800880e:	7afb      	ldrb	r3, [r7, #11]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d10f      	bne.n	8008834 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800881a:	461a      	mov	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800882e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008832:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	371c      	adds	r7, #28
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	4f54300a 	.word	0x4f54300a

08008848 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	3301      	adds	r3, #1
 8008858:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008860:	d901      	bls.n	8008866 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e01b      	b.n	800889e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	daf2      	bge.n	8008854 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800886e:	2300      	movs	r3, #0
 8008870:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	f043 0201 	orr.w	r2, r3, #1
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	3301      	adds	r3, #1
 8008882:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800888a:	d901      	bls.n	8008890 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e006      	b.n	800889e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	f003 0301 	and.w	r3, r3, #1
 8008898:	2b01      	cmp	r3, #1
 800889a:	d0f0      	beq.n	800887e <USB_CoreReset+0x36>

  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3714      	adds	r7, #20
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
	...

080088ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	460b      	mov	r3, r1
 80088b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80088b8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80088bc:	f002 fc46 	bl	800b14c <USBD_static_malloc>
 80088c0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d109      	bne.n	80088dc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	32b0      	adds	r2, #176	@ 0xb0
 80088d2:	2100      	movs	r1, #0
 80088d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80088d8:	2302      	movs	r3, #2
 80088da:	e0d4      	b.n	8008a86 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80088dc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80088e0:	2100      	movs	r1, #0
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f003 f9f3 	bl	800bcce <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	32b0      	adds	r2, #176	@ 0xb0
 80088f2:	68f9      	ldr	r1, [r7, #12]
 80088f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	32b0      	adds	r2, #176	@ 0xb0
 8008902:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	7c1b      	ldrb	r3, [r3, #16]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d138      	bne.n	8008986 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008914:	4b5e      	ldr	r3, [pc, #376]	@ (8008a90 <USBD_CDC_Init+0x1e4>)
 8008916:	7819      	ldrb	r1, [r3, #0]
 8008918:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800891c:	2202      	movs	r2, #2
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f002 faf1 	bl	800af06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008924:	4b5a      	ldr	r3, [pc, #360]	@ (8008a90 <USBD_CDC_Init+0x1e4>)
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	f003 020f 	and.w	r2, r3, #15
 800892c:	6879      	ldr	r1, [r7, #4]
 800892e:	4613      	mov	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	440b      	add	r3, r1
 8008938:	3324      	adds	r3, #36	@ 0x24
 800893a:	2201      	movs	r2, #1
 800893c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800893e:	4b55      	ldr	r3, [pc, #340]	@ (8008a94 <USBD_CDC_Init+0x1e8>)
 8008940:	7819      	ldrb	r1, [r3, #0]
 8008942:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008946:	2202      	movs	r2, #2
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f002 fadc 	bl	800af06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800894e:	4b51      	ldr	r3, [pc, #324]	@ (8008a94 <USBD_CDC_Init+0x1e8>)
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	f003 020f 	and.w	r2, r3, #15
 8008956:	6879      	ldr	r1, [r7, #4]
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	440b      	add	r3, r1
 8008962:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008966:	2201      	movs	r2, #1
 8008968:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800896a:	4b4b      	ldr	r3, [pc, #300]	@ (8008a98 <USBD_CDC_Init+0x1ec>)
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	f003 020f 	and.w	r2, r3, #15
 8008972:	6879      	ldr	r1, [r7, #4]
 8008974:	4613      	mov	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	440b      	add	r3, r1
 800897e:	3326      	adds	r3, #38	@ 0x26
 8008980:	2210      	movs	r2, #16
 8008982:	801a      	strh	r2, [r3, #0]
 8008984:	e035      	b.n	80089f2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008986:	4b42      	ldr	r3, [pc, #264]	@ (8008a90 <USBD_CDC_Init+0x1e4>)
 8008988:	7819      	ldrb	r1, [r3, #0]
 800898a:	2340      	movs	r3, #64	@ 0x40
 800898c:	2202      	movs	r2, #2
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f002 fab9 	bl	800af06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008994:	4b3e      	ldr	r3, [pc, #248]	@ (8008a90 <USBD_CDC_Init+0x1e4>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	f003 020f 	and.w	r2, r3, #15
 800899c:	6879      	ldr	r1, [r7, #4]
 800899e:	4613      	mov	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	440b      	add	r3, r1
 80089a8:	3324      	adds	r3, #36	@ 0x24
 80089aa:	2201      	movs	r2, #1
 80089ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80089ae:	4b39      	ldr	r3, [pc, #228]	@ (8008a94 <USBD_CDC_Init+0x1e8>)
 80089b0:	7819      	ldrb	r1, [r3, #0]
 80089b2:	2340      	movs	r3, #64	@ 0x40
 80089b4:	2202      	movs	r2, #2
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f002 faa5 	bl	800af06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80089bc:	4b35      	ldr	r3, [pc, #212]	@ (8008a94 <USBD_CDC_Init+0x1e8>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	f003 020f 	and.w	r2, r3, #15
 80089c4:	6879      	ldr	r1, [r7, #4]
 80089c6:	4613      	mov	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4413      	add	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	440b      	add	r3, r1
 80089d0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80089d4:	2201      	movs	r2, #1
 80089d6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80089d8:	4b2f      	ldr	r3, [pc, #188]	@ (8008a98 <USBD_CDC_Init+0x1ec>)
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	f003 020f 	and.w	r2, r3, #15
 80089e0:	6879      	ldr	r1, [r7, #4]
 80089e2:	4613      	mov	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4413      	add	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	440b      	add	r3, r1
 80089ec:	3326      	adds	r3, #38	@ 0x26
 80089ee:	2210      	movs	r2, #16
 80089f0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80089f2:	4b29      	ldr	r3, [pc, #164]	@ (8008a98 <USBD_CDC_Init+0x1ec>)
 80089f4:	7819      	ldrb	r1, [r3, #0]
 80089f6:	2308      	movs	r3, #8
 80089f8:	2203      	movs	r2, #3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f002 fa83 	bl	800af06 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008a00:	4b25      	ldr	r3, [pc, #148]	@ (8008a98 <USBD_CDC_Init+0x1ec>)
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	f003 020f 	and.w	r2, r3, #15
 8008a08:	6879      	ldr	r1, [r7, #4]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4413      	add	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	440b      	add	r3, r1
 8008a14:	3324      	adds	r3, #36	@ 0x24
 8008a16:	2201      	movs	r2, #1
 8008a18:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	33b0      	adds	r3, #176	@ 0xb0
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008a50:	2302      	movs	r3, #2
 8008a52:	e018      	b.n	8008a86 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	7c1b      	ldrb	r3, [r3, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10a      	bne.n	8008a72 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8008a94 <USBD_CDC_Init+0x1e8>)
 8008a5e:	7819      	ldrb	r1, [r3, #0]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008a66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f002 fb3a 	bl	800b0e4 <USBD_LL_PrepareReceive>
 8008a70:	e008      	b.n	8008a84 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a72:	4b08      	ldr	r3, [pc, #32]	@ (8008a94 <USBD_CDC_Init+0x1e8>)
 8008a74:	7819      	ldrb	r1, [r3, #0]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008a7c:	2340      	movs	r3, #64	@ 0x40
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f002 fb30 	bl	800b0e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	20000097 	.word	0x20000097
 8008a94:	20000098 	.word	0x20000098
 8008a98:	20000099 	.word	0x20000099

08008a9c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008aa8:	4b3a      	ldr	r3, [pc, #232]	@ (8008b94 <USBD_CDC_DeInit+0xf8>)
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	4619      	mov	r1, r3
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f002 fa4f 	bl	800af52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008ab4:	4b37      	ldr	r3, [pc, #220]	@ (8008b94 <USBD_CDC_DeInit+0xf8>)
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	f003 020f 	and.w	r2, r3, #15
 8008abc:	6879      	ldr	r1, [r7, #4]
 8008abe:	4613      	mov	r3, r2
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4413      	add	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	440b      	add	r3, r1
 8008ac8:	3324      	adds	r3, #36	@ 0x24
 8008aca:	2200      	movs	r2, #0
 8008acc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008ace:	4b32      	ldr	r3, [pc, #200]	@ (8008b98 <USBD_CDC_DeInit+0xfc>)
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f002 fa3c 	bl	800af52 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008ada:	4b2f      	ldr	r3, [pc, #188]	@ (8008b98 <USBD_CDC_DeInit+0xfc>)
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	f003 020f 	and.w	r2, r3, #15
 8008ae2:	6879      	ldr	r1, [r7, #4]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	440b      	add	r3, r1
 8008aee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008af2:	2200      	movs	r2, #0
 8008af4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008af6:	4b29      	ldr	r3, [pc, #164]	@ (8008b9c <USBD_CDC_DeInit+0x100>)
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f002 fa28 	bl	800af52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008b02:	4b26      	ldr	r3, [pc, #152]	@ (8008b9c <USBD_CDC_DeInit+0x100>)
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	f003 020f 	and.w	r2, r3, #15
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4413      	add	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	440b      	add	r3, r1
 8008b16:	3324      	adds	r3, #36	@ 0x24
 8008b18:	2200      	movs	r2, #0
 8008b1a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8008b9c <USBD_CDC_DeInit+0x100>)
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	f003 020f 	and.w	r2, r3, #15
 8008b24:	6879      	ldr	r1, [r7, #4]
 8008b26:	4613      	mov	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	440b      	add	r3, r1
 8008b30:	3326      	adds	r3, #38	@ 0x26
 8008b32:	2200      	movs	r2, #0
 8008b34:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	32b0      	adds	r2, #176	@ 0xb0
 8008b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d01f      	beq.n	8008b88 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	33b0      	adds	r3, #176	@ 0xb0
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	4413      	add	r3, r2
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	32b0      	adds	r2, #176	@ 0xb0
 8008b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f002 fafc 	bl	800b168 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	32b0      	adds	r2, #176	@ 0xb0
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	20000097 	.word	0x20000097
 8008b98:	20000098 	.word	0x20000098
 8008b9c:	20000099 	.word	0x20000099

08008ba0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	32b0      	adds	r2, #176	@ 0xb0
 8008bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e0bf      	b.n	8008d50 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d050      	beq.n	8008c7e <USBD_CDC_Setup+0xde>
 8008bdc:	2b20      	cmp	r3, #32
 8008bde:	f040 80af 	bne.w	8008d40 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	88db      	ldrh	r3, [r3, #6]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d03a      	beq.n	8008c60 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	b25b      	sxtb	r3, r3
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	da1b      	bge.n	8008c2c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	33b0      	adds	r3, #176	@ 0xb0
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	4413      	add	r3, r2
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008c0a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c0c:	683a      	ldr	r2, [r7, #0]
 8008c0e:	88d2      	ldrh	r2, [r2, #6]
 8008c10:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	88db      	ldrh	r3, [r3, #6]
 8008c16:	2b07      	cmp	r3, #7
 8008c18:	bf28      	it	cs
 8008c1a:	2307      	movcs	r3, #7
 8008c1c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	89fa      	ldrh	r2, [r7, #14]
 8008c22:	4619      	mov	r1, r3
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f001 fd53 	bl	800a6d0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008c2a:	e090      	b.n	8008d4e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	785a      	ldrb	r2, [r3, #1]
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	88db      	ldrh	r3, [r3, #6]
 8008c3a:	2b3f      	cmp	r3, #63	@ 0x3f
 8008c3c:	d803      	bhi.n	8008c46 <USBD_CDC_Setup+0xa6>
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	88db      	ldrh	r3, [r3, #6]
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	e000      	b.n	8008c48 <USBD_CDC_Setup+0xa8>
 8008c46:	2240      	movs	r2, #64	@ 0x40
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008c4e:	6939      	ldr	r1, [r7, #16]
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008c56:	461a      	mov	r2, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f001 fd65 	bl	800a728 <USBD_CtlPrepareRx>
      break;
 8008c5e:	e076      	b.n	8008d4e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	33b0      	adds	r3, #176	@ 0xb0
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	7850      	ldrb	r0, [r2, #1]
 8008c76:	2200      	movs	r2, #0
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	4798      	blx	r3
      break;
 8008c7c:	e067      	b.n	8008d4e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	785b      	ldrb	r3, [r3, #1]
 8008c82:	2b0b      	cmp	r3, #11
 8008c84:	d851      	bhi.n	8008d2a <USBD_CDC_Setup+0x18a>
 8008c86:	a201      	add	r2, pc, #4	@ (adr r2, 8008c8c <USBD_CDC_Setup+0xec>)
 8008c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8c:	08008cbd 	.word	0x08008cbd
 8008c90:	08008d39 	.word	0x08008d39
 8008c94:	08008d2b 	.word	0x08008d2b
 8008c98:	08008d2b 	.word	0x08008d2b
 8008c9c:	08008d2b 	.word	0x08008d2b
 8008ca0:	08008d2b 	.word	0x08008d2b
 8008ca4:	08008d2b 	.word	0x08008d2b
 8008ca8:	08008d2b 	.word	0x08008d2b
 8008cac:	08008d2b 	.word	0x08008d2b
 8008cb0:	08008d2b 	.word	0x08008d2b
 8008cb4:	08008ce7 	.word	0x08008ce7
 8008cb8:	08008d11 	.word	0x08008d11
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	2b03      	cmp	r3, #3
 8008cc6:	d107      	bne.n	8008cd8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008cc8:	f107 030a 	add.w	r3, r7, #10
 8008ccc:	2202      	movs	r2, #2
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f001 fcfd 	bl	800a6d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cd6:	e032      	b.n	8008d3e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f001 fc7b 	bl	800a5d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	75fb      	strb	r3, [r7, #23]
          break;
 8008ce4:	e02b      	b.n	8008d3e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	d107      	bne.n	8008d02 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008cf2:	f107 030d 	add.w	r3, r7, #13
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f001 fce8 	bl	800a6d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d00:	e01d      	b.n	8008d3e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f001 fc66 	bl	800a5d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d0e:	e016      	b.n	8008d3e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	2b03      	cmp	r3, #3
 8008d1a:	d00f      	beq.n	8008d3c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f001 fc59 	bl	800a5d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d24:	2303      	movs	r3, #3
 8008d26:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008d28:	e008      	b.n	8008d3c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f001 fc52 	bl	800a5d6 <USBD_CtlError>
          ret = USBD_FAIL;
 8008d32:	2303      	movs	r3, #3
 8008d34:	75fb      	strb	r3, [r7, #23]
          break;
 8008d36:	e002      	b.n	8008d3e <USBD_CDC_Setup+0x19e>
          break;
 8008d38:	bf00      	nop
 8008d3a:	e008      	b.n	8008d4e <USBD_CDC_Setup+0x1ae>
          break;
 8008d3c:	bf00      	nop
      }
      break;
 8008d3e:	e006      	b.n	8008d4e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008d40:	6839      	ldr	r1, [r7, #0]
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f001 fc47 	bl	800a5d6 <USBD_CtlError>
      ret = USBD_FAIL;
 8008d48:	2303      	movs	r3, #3
 8008d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d4c:	bf00      	nop
  }

  return (uint8_t)ret;
 8008d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3718      	adds	r7, #24
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	460b      	mov	r3, r1
 8008d62:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d6a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	32b0      	adds	r2, #176	@ 0xb0
 8008d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d101      	bne.n	8008d82 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e065      	b.n	8008e4e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	32b0      	adds	r2, #176	@ 0xb0
 8008d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d90:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d92:	78fb      	ldrb	r3, [r7, #3]
 8008d94:	f003 020f 	and.w	r2, r3, #15
 8008d98:	6879      	ldr	r1, [r7, #4]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	440b      	add	r3, r1
 8008da4:	3318      	adds	r3, #24
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d02f      	beq.n	8008e0c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008dac:	78fb      	ldrb	r3, [r7, #3]
 8008dae:	f003 020f 	and.w	r2, r3, #15
 8008db2:	6879      	ldr	r1, [r7, #4]
 8008db4:	4613      	mov	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	440b      	add	r3, r1
 8008dbe:	3318      	adds	r3, #24
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	78fb      	ldrb	r3, [r7, #3]
 8008dc4:	f003 010f 	and.w	r1, r3, #15
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	460b      	mov	r3, r1
 8008dcc:	00db      	lsls	r3, r3, #3
 8008dce:	440b      	add	r3, r1
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4403      	add	r3, r0
 8008dd4:	331c      	adds	r3, #28
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	fbb2 f1f3 	udiv	r1, r2, r3
 8008ddc:	fb01 f303 	mul.w	r3, r1, r3
 8008de0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d112      	bne.n	8008e0c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008de6:	78fb      	ldrb	r3, [r7, #3]
 8008de8:	f003 020f 	and.w	r2, r3, #15
 8008dec:	6879      	ldr	r1, [r7, #4]
 8008dee:	4613      	mov	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	440b      	add	r3, r1
 8008df8:	3318      	adds	r3, #24
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008dfe:	78f9      	ldrb	r1, [r7, #3]
 8008e00:	2300      	movs	r3, #0
 8008e02:	2200      	movs	r2, #0
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f002 f94c 	bl	800b0a2 <USBD_LL_Transmit>
 8008e0a:	e01f      	b.n	8008e4c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	33b0      	adds	r3, #176	@ 0xb0
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4413      	add	r3, r2
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d010      	beq.n	8008e4c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	33b0      	adds	r3, #176	@ 0xb0
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	4413      	add	r3, r2
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008e48:	78fa      	ldrb	r2, [r7, #3]
 8008e4a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b084      	sub	sp, #16
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	460b      	mov	r3, r1
 8008e60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	32b0      	adds	r2, #176	@ 0xb0
 8008e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e70:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	32b0      	adds	r2, #176	@ 0xb0
 8008e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d101      	bne.n	8008e88 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008e84:	2303      	movs	r3, #3
 8008e86:	e01a      	b.n	8008ebe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008e88:	78fb      	ldrb	r3, [r7, #3]
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f002 f94a 	bl	800b126 <USBD_LL_GetRxDataSize>
 8008e92:	4602      	mov	r2, r0
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	33b0      	adds	r3, #176	@ 0xb0
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	4413      	add	r3, r2
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008eb8:	4611      	mov	r1, r2
 8008eba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	32b0      	adds	r2, #176	@ 0xb0
 8008ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008edc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d101      	bne.n	8008ee8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e024      	b.n	8008f32 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	33b0      	adds	r3, #176	@ 0xb0
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d019      	beq.n	8008f30 <USBD_CDC_EP0_RxReady+0x6a>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008f02:	2bff      	cmp	r3, #255	@ 0xff
 8008f04:	d014      	beq.n	8008f30 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	33b0      	adds	r3, #176	@ 0xb0
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008f1e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f26:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	22ff      	movs	r2, #255	@ 0xff
 8008f2c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
	...

08008f3c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f44:	2182      	movs	r1, #130	@ 0x82
 8008f46:	4818      	ldr	r0, [pc, #96]	@ (8008fa8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f48:	f000 fd0f 	bl	800996a <USBD_GetEpDesc>
 8008f4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f4e:	2101      	movs	r1, #1
 8008f50:	4815      	ldr	r0, [pc, #84]	@ (8008fa8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f52:	f000 fd0a 	bl	800996a <USBD_GetEpDesc>
 8008f56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f58:	2181      	movs	r1, #129	@ 0x81
 8008f5a:	4813      	ldr	r0, [pc, #76]	@ (8008fa8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f5c:	f000 fd05 	bl	800996a <USBD_GetEpDesc>
 8008f60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d002      	beq.n	8008f6e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	2210      	movs	r2, #16
 8008f6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d006      	beq.n	8008f82 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f7c:	711a      	strb	r2, [r3, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d006      	beq.n	8008f96 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f90:	711a      	strb	r2, [r3, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2243      	movs	r2, #67	@ 0x43
 8008f9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f9c:	4b02      	ldr	r3, [pc, #8]	@ (8008fa8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3718      	adds	r7, #24
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20000054 	.word	0x20000054

08008fac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008fb4:	2182      	movs	r1, #130	@ 0x82
 8008fb6:	4818      	ldr	r0, [pc, #96]	@ (8009018 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008fb8:	f000 fcd7 	bl	800996a <USBD_GetEpDesc>
 8008fbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	4815      	ldr	r0, [pc, #84]	@ (8009018 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008fc2:	f000 fcd2 	bl	800996a <USBD_GetEpDesc>
 8008fc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008fc8:	2181      	movs	r1, #129	@ 0x81
 8008fca:	4813      	ldr	r0, [pc, #76]	@ (8009018 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008fcc:	f000 fccd 	bl	800996a <USBD_GetEpDesc>
 8008fd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	2210      	movs	r2, #16
 8008fdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d006      	beq.n	8008ff2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	711a      	strb	r2, [r3, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f042 0202 	orr.w	r2, r2, #2
 8008ff0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d006      	beq.n	8009006 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	711a      	strb	r2, [r3, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f042 0202 	orr.w	r2, r2, #2
 8009004:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2243      	movs	r2, #67	@ 0x43
 800900a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800900c:	4b02      	ldr	r3, [pc, #8]	@ (8009018 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800900e:	4618      	mov	r0, r3
 8009010:	3718      	adds	r7, #24
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	20000054 	.word	0x20000054

0800901c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009024:	2182      	movs	r1, #130	@ 0x82
 8009026:	4818      	ldr	r0, [pc, #96]	@ (8009088 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009028:	f000 fc9f 	bl	800996a <USBD_GetEpDesc>
 800902c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800902e:	2101      	movs	r1, #1
 8009030:	4815      	ldr	r0, [pc, #84]	@ (8009088 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009032:	f000 fc9a 	bl	800996a <USBD_GetEpDesc>
 8009036:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009038:	2181      	movs	r1, #129	@ 0x81
 800903a:	4813      	ldr	r0, [pc, #76]	@ (8009088 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800903c:	f000 fc95 	bl	800996a <USBD_GetEpDesc>
 8009040:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d002      	beq.n	800904e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2210      	movs	r2, #16
 800904c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d006      	beq.n	8009062 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	2200      	movs	r2, #0
 8009058:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800905c:	711a      	strb	r2, [r3, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d006      	beq.n	8009076 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009070:	711a      	strb	r2, [r3, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2243      	movs	r2, #67	@ 0x43
 800907a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800907c:	4b02      	ldr	r3, [pc, #8]	@ (8009088 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800907e:	4618      	mov	r0, r3
 8009080:	3718      	adds	r7, #24
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	20000054 	.word	0x20000054

0800908c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	220a      	movs	r2, #10
 8009098:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800909a:	4b03      	ldr	r3, [pc, #12]	@ (80090a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr
 80090a8:	20000010 	.word	0x20000010

080090ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d101      	bne.n	80090c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80090bc:	2303      	movs	r3, #3
 80090be:	e009      	b.n	80090d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	33b0      	adds	r3, #176	@ 0xb0
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b087      	sub	sp, #28
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	32b0      	adds	r2, #176	@ 0xb0
 80090f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090fa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d101      	bne.n	8009106 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009102:	2303      	movs	r3, #3
 8009104:	e008      	b.n	8009118 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	68ba      	ldr	r2, [r7, #8]
 800910a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	371c      	adds	r7, #28
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	32b0      	adds	r2, #176	@ 0xb0
 8009138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800913c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d101      	bne.n	8009148 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009144:	2303      	movs	r3, #3
 8009146:	e004      	b.n	8009152 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3714      	adds	r7, #20
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
	...

08009160 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	32b0      	adds	r2, #176	@ 0xb0
 8009172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009176:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	32b0      	adds	r2, #176	@ 0xb0
 8009182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d101      	bne.n	800918e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800918a:	2303      	movs	r3, #3
 800918c:	e018      	b.n	80091c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	7c1b      	ldrb	r3, [r3, #16]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10a      	bne.n	80091ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009196:	4b0c      	ldr	r3, [pc, #48]	@ (80091c8 <USBD_CDC_ReceivePacket+0x68>)
 8009198:	7819      	ldrb	r1, [r3, #0]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f001 ff9d 	bl	800b0e4 <USBD_LL_PrepareReceive>
 80091aa:	e008      	b.n	80091be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80091ac:	4b06      	ldr	r3, [pc, #24]	@ (80091c8 <USBD_CDC_ReceivePacket+0x68>)
 80091ae:	7819      	ldrb	r1, [r3, #0]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091b6:	2340      	movs	r3, #64	@ 0x40
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f001 ff93 	bl	800b0e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	20000098 	.word	0x20000098

080091cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b086      	sub	sp, #24
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	4613      	mov	r3, r2
 80091d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d101      	bne.n	80091e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80091e0:	2303      	movs	r3, #3
 80091e2:	e01f      	b.n	8009224 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2201      	movs	r2, #1
 800920e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	79fa      	ldrb	r2, [r7, #7]
 8009216:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f001 fe0d 	bl	800ae38 <USBD_LL_Init>
 800921e:	4603      	mov	r3, r0
 8009220:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009222:	7dfb      	ldrb	r3, [r7, #23]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3718      	adds	r7, #24
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009236:	2300      	movs	r3, #0
 8009238:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d101      	bne.n	8009244 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009240:	2303      	movs	r3, #3
 8009242:	e025      	b.n	8009290 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	32ae      	adds	r2, #174	@ 0xae
 8009256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800925a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00f      	beq.n	8009280 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	32ae      	adds	r2, #174	@ 0xae
 800926a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800926e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009270:	f107 020e 	add.w	r2, r7, #14
 8009274:	4610      	mov	r0, r2
 8009276:	4798      	blx	r3
 8009278:	4602      	mov	r2, r0
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009286:	1c5a      	adds	r2, r3, #1
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f001 fe15 	bl	800aed0 <USBD_LL_Start>
 80092a6:	4603      	mov	r3, r0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	370c      	adds	r7, #12
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b084      	sub	sp, #16
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	460b      	mov	r3, r1
 80092d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d009      	beq.n	80092f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	78fa      	ldrb	r2, [r7, #3]
 80092ea:	4611      	mov	r1, r2
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	4798      	blx	r3
 80092f0:	4603      	mov	r3, r0
 80092f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80092f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b084      	sub	sp, #16
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	460b      	mov	r3, r1
 8009308:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	78fa      	ldrb	r2, [r7, #3]
 8009318:	4611      	mov	r1, r2
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	4798      	blx	r3
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009324:	2303      	movs	r3, #3
 8009326:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009328:	7bfb      	ldrb	r3, [r7, #15]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b084      	sub	sp, #16
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
 800933a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009342:	6839      	ldr	r1, [r7, #0]
 8009344:	4618      	mov	r0, r3
 8009346:	f001 f90c 	bl	800a562 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2201      	movs	r2, #1
 800934e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009358:	461a      	mov	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009366:	f003 031f 	and.w	r3, r3, #31
 800936a:	2b02      	cmp	r3, #2
 800936c:	d01a      	beq.n	80093a4 <USBD_LL_SetupStage+0x72>
 800936e:	2b02      	cmp	r3, #2
 8009370:	d822      	bhi.n	80093b8 <USBD_LL_SetupStage+0x86>
 8009372:	2b00      	cmp	r3, #0
 8009374:	d002      	beq.n	800937c <USBD_LL_SetupStage+0x4a>
 8009376:	2b01      	cmp	r3, #1
 8009378:	d00a      	beq.n	8009390 <USBD_LL_SetupStage+0x5e>
 800937a:	e01d      	b.n	80093b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009382:	4619      	mov	r1, r3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fb63 	bl	8009a50 <USBD_StdDevReq>
 800938a:	4603      	mov	r3, r0
 800938c:	73fb      	strb	r3, [r7, #15]
      break;
 800938e:	e020      	b.n	80093d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 fbcb 	bl	8009b34 <USBD_StdItfReq>
 800939e:	4603      	mov	r3, r0
 80093a0:	73fb      	strb	r3, [r7, #15]
      break;
 80093a2:	e016      	b.n	80093d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fc2d 	bl	8009c0c <USBD_StdEPReq>
 80093b2:	4603      	mov	r3, r0
 80093b4:	73fb      	strb	r3, [r7, #15]
      break;
 80093b6:	e00c      	b.n	80093d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80093be:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	4619      	mov	r1, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f001 fde2 	bl	800af90 <USBD_LL_StallEP>
 80093cc:	4603      	mov	r3, r0
 80093ce:	73fb      	strb	r3, [r7, #15]
      break;
 80093d0:	bf00      	nop
  }

  return ret;
 80093d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	460b      	mov	r3, r1
 80093e6:	607a      	str	r2, [r7, #4]
 80093e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80093ee:	7afb      	ldrb	r3, [r7, #11]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d16e      	bne.n	80094d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80093fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009402:	2b03      	cmp	r3, #3
 8009404:	f040 8098 	bne.w	8009538 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	689a      	ldr	r2, [r3, #8]
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	429a      	cmp	r2, r3
 8009412:	d913      	bls.n	800943c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	689a      	ldr	r2, [r3, #8]
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	1ad2      	subs	r2, r2, r3
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	68da      	ldr	r2, [r3, #12]
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	4293      	cmp	r3, r2
 800942c:	bf28      	it	cs
 800942e:	4613      	movcs	r3, r2
 8009430:	461a      	mov	r2, r3
 8009432:	6879      	ldr	r1, [r7, #4]
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f001 f994 	bl	800a762 <USBD_CtlContinueRx>
 800943a:	e07d      	b.n	8009538 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009442:	f003 031f 	and.w	r3, r3, #31
 8009446:	2b02      	cmp	r3, #2
 8009448:	d014      	beq.n	8009474 <USBD_LL_DataOutStage+0x98>
 800944a:	2b02      	cmp	r3, #2
 800944c:	d81d      	bhi.n	800948a <USBD_LL_DataOutStage+0xae>
 800944e:	2b00      	cmp	r3, #0
 8009450:	d002      	beq.n	8009458 <USBD_LL_DataOutStage+0x7c>
 8009452:	2b01      	cmp	r3, #1
 8009454:	d003      	beq.n	800945e <USBD_LL_DataOutStage+0x82>
 8009456:	e018      	b.n	800948a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009458:	2300      	movs	r3, #0
 800945a:	75bb      	strb	r3, [r7, #22]
            break;
 800945c:	e018      	b.n	8009490 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009464:	b2db      	uxtb	r3, r3
 8009466:	4619      	mov	r1, r3
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f000 fa64 	bl	8009936 <USBD_CoreFindIF>
 800946e:	4603      	mov	r3, r0
 8009470:	75bb      	strb	r3, [r7, #22]
            break;
 8009472:	e00d      	b.n	8009490 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800947a:	b2db      	uxtb	r3, r3
 800947c:	4619      	mov	r1, r3
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f000 fa66 	bl	8009950 <USBD_CoreFindEP>
 8009484:	4603      	mov	r3, r0
 8009486:	75bb      	strb	r3, [r7, #22]
            break;
 8009488:	e002      	b.n	8009490 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800948a:	2300      	movs	r3, #0
 800948c:	75bb      	strb	r3, [r7, #22]
            break;
 800948e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009490:	7dbb      	ldrb	r3, [r7, #22]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d119      	bne.n	80094ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800949c:	b2db      	uxtb	r3, r3
 800949e:	2b03      	cmp	r3, #3
 80094a0:	d113      	bne.n	80094ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80094a2:	7dba      	ldrb	r2, [r7, #22]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	32ae      	adds	r2, #174	@ 0xae
 80094a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00b      	beq.n	80094ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80094b2:	7dba      	ldrb	r2, [r7, #22]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80094ba:	7dba      	ldrb	r2, [r7, #22]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	32ae      	adds	r2, #174	@ 0xae
 80094c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c4:	691b      	ldr	r3, [r3, #16]
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f001 f95a 	bl	800a784 <USBD_CtlSendStatus>
 80094d0:	e032      	b.n	8009538 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80094d2:	7afb      	ldrb	r3, [r7, #11]
 80094d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	4619      	mov	r1, r3
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f000 fa37 	bl	8009950 <USBD_CoreFindEP>
 80094e2:	4603      	mov	r3, r0
 80094e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094e6:	7dbb      	ldrb	r3, [r7, #22]
 80094e8:	2bff      	cmp	r3, #255	@ 0xff
 80094ea:	d025      	beq.n	8009538 <USBD_LL_DataOutStage+0x15c>
 80094ec:	7dbb      	ldrb	r3, [r7, #22]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d122      	bne.n	8009538 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d117      	bne.n	800952e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80094fe:	7dba      	ldrb	r2, [r7, #22]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	32ae      	adds	r2, #174	@ 0xae
 8009504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009508:	699b      	ldr	r3, [r3, #24]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00f      	beq.n	800952e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800950e:	7dba      	ldrb	r2, [r7, #22]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009516:	7dba      	ldrb	r2, [r7, #22]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	32ae      	adds	r2, #174	@ 0xae
 800951c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	7afa      	ldrb	r2, [r7, #11]
 8009524:	4611      	mov	r1, r2
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	4798      	blx	r3
 800952a:	4603      	mov	r3, r0
 800952c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800952e:	7dfb      	ldrb	r3, [r7, #23]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d001      	beq.n	8009538 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009534:	7dfb      	ldrb	r3, [r7, #23]
 8009536:	e000      	b.n	800953a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3718      	adds	r7, #24
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b086      	sub	sp, #24
 8009546:	af00      	add	r7, sp, #0
 8009548:	60f8      	str	r0, [r7, #12]
 800954a:	460b      	mov	r3, r1
 800954c:	607a      	str	r2, [r7, #4]
 800954e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009550:	7afb      	ldrb	r3, [r7, #11]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d16f      	bne.n	8009636 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	3314      	adds	r3, #20
 800955a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009562:	2b02      	cmp	r3, #2
 8009564:	d15a      	bne.n	800961c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	689a      	ldr	r2, [r3, #8]
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	429a      	cmp	r2, r3
 8009570:	d914      	bls.n	800959c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	689a      	ldr	r2, [r3, #8]
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	1ad2      	subs	r2, r2, r3
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	461a      	mov	r2, r3
 8009586:	6879      	ldr	r1, [r7, #4]
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f001 f8bc 	bl	800a706 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800958e:	2300      	movs	r3, #0
 8009590:	2200      	movs	r2, #0
 8009592:	2100      	movs	r1, #0
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f001 fda5 	bl	800b0e4 <USBD_LL_PrepareReceive>
 800959a:	e03f      	b.n	800961c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	68da      	ldr	r2, [r3, #12]
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d11c      	bne.n	80095e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d316      	bcc.n	80095e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	685a      	ldr	r2, [r3, #4]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80095be:	429a      	cmp	r2, r3
 80095c0:	d20f      	bcs.n	80095e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80095c2:	2200      	movs	r2, #0
 80095c4:	2100      	movs	r1, #0
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f001 f89d 	bl	800a706 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095d4:	2300      	movs	r3, #0
 80095d6:	2200      	movs	r2, #0
 80095d8:	2100      	movs	r1, #0
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f001 fd82 	bl	800b0e4 <USBD_LL_PrepareReceive>
 80095e0:	e01c      	b.n	800961c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	2b03      	cmp	r3, #3
 80095ec:	d10f      	bne.n	800960e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d009      	beq.n	800960e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800960e:	2180      	movs	r1, #128	@ 0x80
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f001 fcbd 	bl	800af90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f001 f8c7 	bl	800a7aa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d03a      	beq.n	800969c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f7ff fe42 	bl	80092b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009634:	e032      	b.n	800969c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009636:	7afb      	ldrb	r3, [r7, #11]
 8009638:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800963c:	b2db      	uxtb	r3, r3
 800963e:	4619      	mov	r1, r3
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f000 f985 	bl	8009950 <USBD_CoreFindEP>
 8009646:	4603      	mov	r3, r0
 8009648:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800964a:	7dfb      	ldrb	r3, [r7, #23]
 800964c:	2bff      	cmp	r3, #255	@ 0xff
 800964e:	d025      	beq.n	800969c <USBD_LL_DataInStage+0x15a>
 8009650:	7dfb      	ldrb	r3, [r7, #23]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d122      	bne.n	800969c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800965c:	b2db      	uxtb	r3, r3
 800965e:	2b03      	cmp	r3, #3
 8009660:	d11c      	bne.n	800969c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009662:	7dfa      	ldrb	r2, [r7, #23]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	32ae      	adds	r2, #174	@ 0xae
 8009668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d014      	beq.n	800969c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009672:	7dfa      	ldrb	r2, [r7, #23]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800967a:	7dfa      	ldrb	r2, [r7, #23]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	32ae      	adds	r2, #174	@ 0xae
 8009680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	7afa      	ldrb	r2, [r7, #11]
 8009688:	4611      	mov	r1, r2
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	4798      	blx	r3
 800968e:	4603      	mov	r3, r0
 8009690:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009692:	7dbb      	ldrb	r3, [r7, #22]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d001      	beq.n	800969c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009698:	7dbb      	ldrb	r3, [r7, #22]
 800969a:	e000      	b.n	800969e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3718      	adds	r7, #24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b084      	sub	sp, #16
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80096ae:	2300      	movs	r3, #0
 80096b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d014      	beq.n	800970c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00e      	beq.n	800970c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	6852      	ldr	r2, [r2, #4]
 80096fa:	b2d2      	uxtb	r2, r2
 80096fc:	4611      	mov	r1, r2
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	4798      	blx	r3
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d001      	beq.n	800970c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009708:	2303      	movs	r3, #3
 800970a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800970c:	2340      	movs	r3, #64	@ 0x40
 800970e:	2200      	movs	r2, #0
 8009710:	2100      	movs	r1, #0
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f001 fbf7 	bl	800af06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2240      	movs	r2, #64	@ 0x40
 8009724:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009728:	2340      	movs	r3, #64	@ 0x40
 800972a:	2200      	movs	r2, #0
 800972c:	2180      	movs	r1, #128	@ 0x80
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f001 fbe9 	bl	800af06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2240      	movs	r2, #64	@ 0x40
 800973e:	621a      	str	r2, [r3, #32]

  return ret;
 8009740:	7bfb      	ldrb	r3, [r7, #15]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800974a:	b480      	push	{r7}
 800974c:	b083      	sub	sp, #12
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	460b      	mov	r3, r1
 8009754:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	78fa      	ldrb	r2, [r7, #3]
 800975a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	370c      	adds	r7, #12
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr

0800976a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800976a:	b480      	push	{r7}
 800976c:	b083      	sub	sp, #12
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009778:	b2db      	uxtb	r3, r3
 800977a:	2b04      	cmp	r3, #4
 800977c:	d006      	beq.n	800978c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009784:	b2da      	uxtb	r2, r3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2204      	movs	r2, #4
 8009790:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	370c      	adds	r7, #12
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr

080097a2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80097a2:	b480      	push	{r7}
 80097a4:	b083      	sub	sp, #12
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	2b04      	cmp	r3, #4
 80097b4:	d106      	bne.n	80097c4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	370c      	adds	r7, #12
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b082      	sub	sp, #8
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b03      	cmp	r3, #3
 80097e4:	d110      	bne.n	8009808 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00b      	beq.n	8009808 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097f6:	69db      	ldr	r3, [r3, #28]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d005      	beq.n	8009808 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009802:	69db      	ldr	r3, [r3, #28]
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3708      	adds	r7, #8
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b082      	sub	sp, #8
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	460b      	mov	r3, r1
 800981c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	32ae      	adds	r2, #174	@ 0xae
 8009828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d101      	bne.n	8009834 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009830:	2303      	movs	r3, #3
 8009832:	e01c      	b.n	800986e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b03      	cmp	r3, #3
 800983e:	d115      	bne.n	800986c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	32ae      	adds	r2, #174	@ 0xae
 800984a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800984e:	6a1b      	ldr	r3, [r3, #32]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00b      	beq.n	800986c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	32ae      	adds	r2, #174	@ 0xae
 800985e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009862:	6a1b      	ldr	r3, [r3, #32]
 8009864:	78fa      	ldrb	r2, [r7, #3]
 8009866:	4611      	mov	r1, r2
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	460b      	mov	r3, r1
 8009880:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	32ae      	adds	r2, #174	@ 0xae
 800988c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d101      	bne.n	8009898 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009894:	2303      	movs	r3, #3
 8009896:	e01c      	b.n	80098d2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b03      	cmp	r3, #3
 80098a2:	d115      	bne.n	80098d0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	32ae      	adds	r2, #174	@ 0xae
 80098ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00b      	beq.n	80098d0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	32ae      	adds	r2, #174	@ 0xae
 80098c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098c8:	78fa      	ldrb	r2, [r7, #3]
 80098ca:	4611      	mov	r1, r2
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80098da:	b480      	push	{r7}
 80098dc:	b083      	sub	sp, #12
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00e      	beq.n	800992c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	6852      	ldr	r2, [r2, #4]
 800991a:	b2d2      	uxtb	r2, r2
 800991c:	4611      	mov	r1, r2
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	4798      	blx	r3
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d001      	beq.n	800992c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009928:	2303      	movs	r3, #3
 800992a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800992c:	7bfb      	ldrb	r3, [r7, #15]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009936:	b480      	push	{r7}
 8009938:	b083      	sub	sp, #12
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	460b      	mov	r3, r1
 8009940:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009942:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009944:	4618      	mov	r0, r3
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	460b      	mov	r3, r1
 800995a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800995c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800995e:	4618      	mov	r0, r3
 8009960:	370c      	adds	r7, #12
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr

0800996a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b086      	sub	sp, #24
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
 8009972:	460b      	mov	r3, r1
 8009974:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800997e:	2300      	movs	r3, #0
 8009980:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	885b      	ldrh	r3, [r3, #2]
 8009986:	b29b      	uxth	r3, r3
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	7812      	ldrb	r2, [r2, #0]
 800998c:	4293      	cmp	r3, r2
 800998e:	d91f      	bls.n	80099d0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009996:	e013      	b.n	80099c0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009998:	f107 030a 	add.w	r3, r7, #10
 800999c:	4619      	mov	r1, r3
 800999e:	6978      	ldr	r0, [r7, #20]
 80099a0:	f000 f81b 	bl	80099da <USBD_GetNextDesc>
 80099a4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	785b      	ldrb	r3, [r3, #1]
 80099aa:	2b05      	cmp	r3, #5
 80099ac:	d108      	bne.n	80099c0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	789b      	ldrb	r3, [r3, #2]
 80099b6:	78fa      	ldrb	r2, [r7, #3]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d008      	beq.n	80099ce <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80099bc:	2300      	movs	r3, #0
 80099be:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	885b      	ldrh	r3, [r3, #2]
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	897b      	ldrh	r3, [r7, #10]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d8e5      	bhi.n	8009998 <USBD_GetEpDesc+0x2e>
 80099cc:	e000      	b.n	80099d0 <USBD_GetEpDesc+0x66>
          break;
 80099ce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80099d0:	693b      	ldr	r3, [r7, #16]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3718      	adds	r7, #24
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80099da:	b480      	push	{r7}
 80099dc:	b085      	sub	sp, #20
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
 80099e2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	881b      	ldrh	r3, [r3, #0]
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	7812      	ldrb	r2, [r2, #0]
 80099f0:	4413      	add	r3, r2
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	461a      	mov	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4413      	add	r3, r2
 8009a02:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009a04:	68fb      	ldr	r3, [r7, #12]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3714      	adds	r7, #20
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr

08009a12 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009a12:	b480      	push	{r7}
 8009a14:	b087      	sub	sp, #28
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	3301      	adds	r3, #1
 8009a28:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009a30:	8a3b      	ldrh	r3, [r7, #16]
 8009a32:	021b      	lsls	r3, r3, #8
 8009a34:	b21a      	sxth	r2, r3
 8009a36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	b21b      	sxth	r3, r3
 8009a3e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009a40:	89fb      	ldrh	r3, [r7, #14]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	371c      	adds	r7, #28
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
	...

08009a50 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a66:	2b40      	cmp	r3, #64	@ 0x40
 8009a68:	d005      	beq.n	8009a76 <USBD_StdDevReq+0x26>
 8009a6a:	2b40      	cmp	r3, #64	@ 0x40
 8009a6c:	d857      	bhi.n	8009b1e <USBD_StdDevReq+0xce>
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00f      	beq.n	8009a92 <USBD_StdDevReq+0x42>
 8009a72:	2b20      	cmp	r3, #32
 8009a74:	d153      	bne.n	8009b1e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	32ae      	adds	r2, #174	@ 0xae
 8009a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	6839      	ldr	r1, [r7, #0]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	4798      	blx	r3
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a90:	e04a      	b.n	8009b28 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	785b      	ldrb	r3, [r3, #1]
 8009a96:	2b09      	cmp	r3, #9
 8009a98:	d83b      	bhi.n	8009b12 <USBD_StdDevReq+0xc2>
 8009a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8009aa0 <USBD_StdDevReq+0x50>)
 8009a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa0:	08009af5 	.word	0x08009af5
 8009aa4:	08009b09 	.word	0x08009b09
 8009aa8:	08009b13 	.word	0x08009b13
 8009aac:	08009aff 	.word	0x08009aff
 8009ab0:	08009b13 	.word	0x08009b13
 8009ab4:	08009ad3 	.word	0x08009ad3
 8009ab8:	08009ac9 	.word	0x08009ac9
 8009abc:	08009b13 	.word	0x08009b13
 8009ac0:	08009aeb 	.word	0x08009aeb
 8009ac4:	08009add 	.word	0x08009add
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009ac8:	6839      	ldr	r1, [r7, #0]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fa3c 	bl	8009f48 <USBD_GetDescriptor>
          break;
 8009ad0:	e024      	b.n	8009b1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009ad2:	6839      	ldr	r1, [r7, #0]
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fba1 	bl	800a21c <USBD_SetAddress>
          break;
 8009ada:	e01f      	b.n	8009b1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009adc:	6839      	ldr	r1, [r7, #0]
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fbe0 	bl	800a2a4 <USBD_SetConfig>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	73fb      	strb	r3, [r7, #15]
          break;
 8009ae8:	e018      	b.n	8009b1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009aea:	6839      	ldr	r1, [r7, #0]
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 fc83 	bl	800a3f8 <USBD_GetConfig>
          break;
 8009af2:	e013      	b.n	8009b1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009af4:	6839      	ldr	r1, [r7, #0]
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 fcb4 	bl	800a464 <USBD_GetStatus>
          break;
 8009afc:	e00e      	b.n	8009b1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009afe:	6839      	ldr	r1, [r7, #0]
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fce3 	bl	800a4cc <USBD_SetFeature>
          break;
 8009b06:	e009      	b.n	8009b1c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fd07 	bl	800a51e <USBD_ClrFeature>
          break;
 8009b10:	e004      	b.n	8009b1c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fd5e 	bl	800a5d6 <USBD_CtlError>
          break;
 8009b1a:	bf00      	nop
      }
      break;
 8009b1c:	e004      	b.n	8009b28 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009b1e:	6839      	ldr	r1, [r7, #0]
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 fd58 	bl	800a5d6 <USBD_CtlError>
      break;
 8009b26:	bf00      	nop
  }

  return ret;
 8009b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop

08009b34 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b4a:	2b40      	cmp	r3, #64	@ 0x40
 8009b4c:	d005      	beq.n	8009b5a <USBD_StdItfReq+0x26>
 8009b4e:	2b40      	cmp	r3, #64	@ 0x40
 8009b50:	d852      	bhi.n	8009bf8 <USBD_StdItfReq+0xc4>
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d001      	beq.n	8009b5a <USBD_StdItfReq+0x26>
 8009b56:	2b20      	cmp	r3, #32
 8009b58:	d14e      	bne.n	8009bf8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	3b01      	subs	r3, #1
 8009b64:	2b02      	cmp	r3, #2
 8009b66:	d840      	bhi.n	8009bea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	889b      	ldrh	r3, [r3, #4]
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d836      	bhi.n	8009be0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	889b      	ldrh	r3, [r3, #4]
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	4619      	mov	r1, r3
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f7ff fedb 	bl	8009936 <USBD_CoreFindIF>
 8009b80:	4603      	mov	r3, r0
 8009b82:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b84:	7bbb      	ldrb	r3, [r7, #14]
 8009b86:	2bff      	cmp	r3, #255	@ 0xff
 8009b88:	d01d      	beq.n	8009bc6 <USBD_StdItfReq+0x92>
 8009b8a:	7bbb      	ldrb	r3, [r7, #14]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d11a      	bne.n	8009bc6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009b90:	7bba      	ldrb	r2, [r7, #14]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	32ae      	adds	r2, #174	@ 0xae
 8009b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00f      	beq.n	8009bc0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009ba0:	7bba      	ldrb	r2, [r7, #14]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009ba8:	7bba      	ldrb	r2, [r7, #14]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	32ae      	adds	r2, #174	@ 0xae
 8009bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	4798      	blx	r3
 8009bba:	4603      	mov	r3, r0
 8009bbc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009bbe:	e004      	b.n	8009bca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009bc4:	e001      	b.n	8009bca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009bc6:	2303      	movs	r3, #3
 8009bc8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	88db      	ldrh	r3, [r3, #6]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d110      	bne.n	8009bf4 <USBD_StdItfReq+0xc0>
 8009bd2:	7bfb      	ldrb	r3, [r7, #15]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d10d      	bne.n	8009bf4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 fdd3 	bl	800a784 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009bde:	e009      	b.n	8009bf4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fcf7 	bl	800a5d6 <USBD_CtlError>
          break;
 8009be8:	e004      	b.n	8009bf4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009bea:	6839      	ldr	r1, [r7, #0]
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 fcf2 	bl	800a5d6 <USBD_CtlError>
          break;
 8009bf2:	e000      	b.n	8009bf6 <USBD_StdItfReq+0xc2>
          break;
 8009bf4:	bf00      	nop
      }
      break;
 8009bf6:	e004      	b.n	8009c02 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fceb 	bl	800a5d6 <USBD_CtlError>
      break;
 8009c00:	bf00      	nop
  }

  return ret;
 8009c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	889b      	ldrh	r3, [r3, #4]
 8009c1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c28:	2b40      	cmp	r3, #64	@ 0x40
 8009c2a:	d007      	beq.n	8009c3c <USBD_StdEPReq+0x30>
 8009c2c:	2b40      	cmp	r3, #64	@ 0x40
 8009c2e:	f200 817f 	bhi.w	8009f30 <USBD_StdEPReq+0x324>
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d02a      	beq.n	8009c8c <USBD_StdEPReq+0x80>
 8009c36:	2b20      	cmp	r3, #32
 8009c38:	f040 817a 	bne.w	8009f30 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009c3c:	7bbb      	ldrb	r3, [r7, #14]
 8009c3e:	4619      	mov	r1, r3
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7ff fe85 	bl	8009950 <USBD_CoreFindEP>
 8009c46:	4603      	mov	r3, r0
 8009c48:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c4a:	7b7b      	ldrb	r3, [r7, #13]
 8009c4c:	2bff      	cmp	r3, #255	@ 0xff
 8009c4e:	f000 8174 	beq.w	8009f3a <USBD_StdEPReq+0x32e>
 8009c52:	7b7b      	ldrb	r3, [r7, #13]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f040 8170 	bne.w	8009f3a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009c5a:	7b7a      	ldrb	r2, [r7, #13]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009c62:	7b7a      	ldrb	r2, [r7, #13]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	32ae      	adds	r2, #174	@ 0xae
 8009c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f000 8163 	beq.w	8009f3a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009c74:	7b7a      	ldrb	r2, [r7, #13]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	32ae      	adds	r2, #174	@ 0xae
 8009c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	6839      	ldr	r1, [r7, #0]
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	4798      	blx	r3
 8009c86:	4603      	mov	r3, r0
 8009c88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009c8a:	e156      	b.n	8009f3a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	785b      	ldrb	r3, [r3, #1]
 8009c90:	2b03      	cmp	r3, #3
 8009c92:	d008      	beq.n	8009ca6 <USBD_StdEPReq+0x9a>
 8009c94:	2b03      	cmp	r3, #3
 8009c96:	f300 8145 	bgt.w	8009f24 <USBD_StdEPReq+0x318>
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f000 809b 	beq.w	8009dd6 <USBD_StdEPReq+0x1ca>
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d03c      	beq.n	8009d1e <USBD_StdEPReq+0x112>
 8009ca4:	e13e      	b.n	8009f24 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	d002      	beq.n	8009cb8 <USBD_StdEPReq+0xac>
 8009cb2:	2b03      	cmp	r3, #3
 8009cb4:	d016      	beq.n	8009ce4 <USBD_StdEPReq+0xd8>
 8009cb6:	e02c      	b.n	8009d12 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cb8:	7bbb      	ldrb	r3, [r7, #14]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00d      	beq.n	8009cda <USBD_StdEPReq+0xce>
 8009cbe:	7bbb      	ldrb	r3, [r7, #14]
 8009cc0:	2b80      	cmp	r3, #128	@ 0x80
 8009cc2:	d00a      	beq.n	8009cda <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009cc4:	7bbb      	ldrb	r3, [r7, #14]
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f001 f961 	bl	800af90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cce:	2180      	movs	r1, #128	@ 0x80
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f001 f95d 	bl	800af90 <USBD_LL_StallEP>
 8009cd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009cd8:	e020      	b.n	8009d1c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fc7a 	bl	800a5d6 <USBD_CtlError>
              break;
 8009ce2:	e01b      	b.n	8009d1c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	885b      	ldrh	r3, [r3, #2]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10e      	bne.n	8009d0a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009cec:	7bbb      	ldrb	r3, [r7, #14]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00b      	beq.n	8009d0a <USBD_StdEPReq+0xfe>
 8009cf2:	7bbb      	ldrb	r3, [r7, #14]
 8009cf4:	2b80      	cmp	r3, #128	@ 0x80
 8009cf6:	d008      	beq.n	8009d0a <USBD_StdEPReq+0xfe>
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	88db      	ldrh	r3, [r3, #6]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d104      	bne.n	8009d0a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d00:	7bbb      	ldrb	r3, [r7, #14]
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f001 f943 	bl	800af90 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 fd3a 	bl	800a784 <USBD_CtlSendStatus>

              break;
 8009d10:	e004      	b.n	8009d1c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fc5e 	bl	800a5d6 <USBD_CtlError>
              break;
 8009d1a:	bf00      	nop
          }
          break;
 8009d1c:	e107      	b.n	8009f2e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d002      	beq.n	8009d30 <USBD_StdEPReq+0x124>
 8009d2a:	2b03      	cmp	r3, #3
 8009d2c:	d016      	beq.n	8009d5c <USBD_StdEPReq+0x150>
 8009d2e:	e04b      	b.n	8009dc8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d30:	7bbb      	ldrb	r3, [r7, #14]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00d      	beq.n	8009d52 <USBD_StdEPReq+0x146>
 8009d36:	7bbb      	ldrb	r3, [r7, #14]
 8009d38:	2b80      	cmp	r3, #128	@ 0x80
 8009d3a:	d00a      	beq.n	8009d52 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d3c:	7bbb      	ldrb	r3, [r7, #14]
 8009d3e:	4619      	mov	r1, r3
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f001 f925 	bl	800af90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d46:	2180      	movs	r1, #128	@ 0x80
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f001 f921 	bl	800af90 <USBD_LL_StallEP>
 8009d4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d50:	e040      	b.n	8009dd4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009d52:	6839      	ldr	r1, [r7, #0]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fc3e 	bl	800a5d6 <USBD_CtlError>
              break;
 8009d5a:	e03b      	b.n	8009dd4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	885b      	ldrh	r3, [r3, #2]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d136      	bne.n	8009dd2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d64:	7bbb      	ldrb	r3, [r7, #14]
 8009d66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d004      	beq.n	8009d78 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d6e:	7bbb      	ldrb	r3, [r7, #14]
 8009d70:	4619      	mov	r1, r3
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f001 f92b 	bl	800afce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fd03 	bl	800a784 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d7e:	7bbb      	ldrb	r3, [r7, #14]
 8009d80:	4619      	mov	r1, r3
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7ff fde4 	bl	8009950 <USBD_CoreFindEP>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d8c:	7b7b      	ldrb	r3, [r7, #13]
 8009d8e:	2bff      	cmp	r3, #255	@ 0xff
 8009d90:	d01f      	beq.n	8009dd2 <USBD_StdEPReq+0x1c6>
 8009d92:	7b7b      	ldrb	r3, [r7, #13]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d11c      	bne.n	8009dd2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009d98:	7b7a      	ldrb	r2, [r7, #13]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009da0:	7b7a      	ldrb	r2, [r7, #13]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	32ae      	adds	r2, #174	@ 0xae
 8009da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d010      	beq.n	8009dd2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009db0:	7b7a      	ldrb	r2, [r7, #13]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	32ae      	adds	r2, #174	@ 0xae
 8009db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	6839      	ldr	r1, [r7, #0]
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	4798      	blx	r3
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009dc6:	e004      	b.n	8009dd2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009dc8:	6839      	ldr	r1, [r7, #0]
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 fc03 	bl	800a5d6 <USBD_CtlError>
              break;
 8009dd0:	e000      	b.n	8009dd4 <USBD_StdEPReq+0x1c8>
              break;
 8009dd2:	bf00      	nop
          }
          break;
 8009dd4:	e0ab      	b.n	8009f2e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	d002      	beq.n	8009de8 <USBD_StdEPReq+0x1dc>
 8009de2:	2b03      	cmp	r3, #3
 8009de4:	d032      	beq.n	8009e4c <USBD_StdEPReq+0x240>
 8009de6:	e097      	b.n	8009f18 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009de8:	7bbb      	ldrb	r3, [r7, #14]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d007      	beq.n	8009dfe <USBD_StdEPReq+0x1f2>
 8009dee:	7bbb      	ldrb	r3, [r7, #14]
 8009df0:	2b80      	cmp	r3, #128	@ 0x80
 8009df2:	d004      	beq.n	8009dfe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009df4:	6839      	ldr	r1, [r7, #0]
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 fbed 	bl	800a5d6 <USBD_CtlError>
                break;
 8009dfc:	e091      	b.n	8009f22 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009dfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	da0b      	bge.n	8009e1e <USBD_StdEPReq+0x212>
 8009e06:	7bbb      	ldrb	r3, [r7, #14]
 8009e08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	4413      	add	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	3310      	adds	r3, #16
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	4413      	add	r3, r2
 8009e1a:	3304      	adds	r3, #4
 8009e1c:	e00b      	b.n	8009e36 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e1e:	7bbb      	ldrb	r3, [r7, #14]
 8009e20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e24:	4613      	mov	r3, r2
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4413      	add	r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	4413      	add	r3, r2
 8009e34:	3304      	adds	r3, #4
 8009e36:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	2202      	movs	r2, #2
 8009e42:	4619      	mov	r1, r3
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 fc43 	bl	800a6d0 <USBD_CtlSendData>
              break;
 8009e4a:	e06a      	b.n	8009f22 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009e4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	da11      	bge.n	8009e78 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009e54:	7bbb      	ldrb	r3, [r7, #14]
 8009e56:	f003 020f 	and.w	r2, r3, #15
 8009e5a:	6879      	ldr	r1, [r7, #4]
 8009e5c:	4613      	mov	r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	4413      	add	r3, r2
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	440b      	add	r3, r1
 8009e66:	3324      	adds	r3, #36	@ 0x24
 8009e68:	881b      	ldrh	r3, [r3, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d117      	bne.n	8009e9e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e6e:	6839      	ldr	r1, [r7, #0]
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 fbb0 	bl	800a5d6 <USBD_CtlError>
                  break;
 8009e76:	e054      	b.n	8009f22 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e78:	7bbb      	ldrb	r3, [r7, #14]
 8009e7a:	f003 020f 	and.w	r2, r3, #15
 8009e7e:	6879      	ldr	r1, [r7, #4]
 8009e80:	4613      	mov	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4413      	add	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	440b      	add	r3, r1
 8009e8a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009e8e:	881b      	ldrh	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d104      	bne.n	8009e9e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e94:	6839      	ldr	r1, [r7, #0]
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fb9d 	bl	800a5d6 <USBD_CtlError>
                  break;
 8009e9c:	e041      	b.n	8009f22 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	da0b      	bge.n	8009ebe <USBD_StdEPReq+0x2b2>
 8009ea6:	7bbb      	ldrb	r3, [r7, #14]
 8009ea8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009eac:	4613      	mov	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	3310      	adds	r3, #16
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	4413      	add	r3, r2
 8009eba:	3304      	adds	r3, #4
 8009ebc:	e00b      	b.n	8009ed6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ebe:	7bbb      	ldrb	r3, [r7, #14]
 8009ec0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ed8:	7bbb      	ldrb	r3, [r7, #14]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d002      	beq.n	8009ee4 <USBD_StdEPReq+0x2d8>
 8009ede:	7bbb      	ldrb	r3, [r7, #14]
 8009ee0:	2b80      	cmp	r3, #128	@ 0x80
 8009ee2:	d103      	bne.n	8009eec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	601a      	str	r2, [r3, #0]
 8009eea:	e00e      	b.n	8009f0a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009eec:	7bbb      	ldrb	r3, [r7, #14]
 8009eee:	4619      	mov	r1, r3
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f001 f88b 	bl	800b00c <USBD_LL_IsStallEP>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d003      	beq.n	8009f04 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	2201      	movs	r2, #1
 8009f00:	601a      	str	r2, [r3, #0]
 8009f02:	e002      	b.n	8009f0a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	2200      	movs	r2, #0
 8009f08:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	2202      	movs	r2, #2
 8009f0e:	4619      	mov	r1, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fbdd 	bl	800a6d0 <USBD_CtlSendData>
              break;
 8009f16:	e004      	b.n	8009f22 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009f18:	6839      	ldr	r1, [r7, #0]
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fb5b 	bl	800a5d6 <USBD_CtlError>
              break;
 8009f20:	bf00      	nop
          }
          break;
 8009f22:	e004      	b.n	8009f2e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 fb55 	bl	800a5d6 <USBD_CtlError>
          break;
 8009f2c:	bf00      	nop
      }
      break;
 8009f2e:	e005      	b.n	8009f3c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 fb4f 	bl	800a5d6 <USBD_CtlError>
      break;
 8009f38:	e000      	b.n	8009f3c <USBD_StdEPReq+0x330>
      break;
 8009f3a:	bf00      	nop
  }

  return ret;
 8009f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
	...

08009f48 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f52:	2300      	movs	r3, #0
 8009f54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009f56:	2300      	movs	r3, #0
 8009f58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	885b      	ldrh	r3, [r3, #2]
 8009f62:	0a1b      	lsrs	r3, r3, #8
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	3b01      	subs	r3, #1
 8009f68:	2b06      	cmp	r3, #6
 8009f6a:	f200 8128 	bhi.w	800a1be <USBD_GetDescriptor+0x276>
 8009f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f74 <USBD_GetDescriptor+0x2c>)
 8009f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f74:	08009f91 	.word	0x08009f91
 8009f78:	08009fa9 	.word	0x08009fa9
 8009f7c:	08009fe9 	.word	0x08009fe9
 8009f80:	0800a1bf 	.word	0x0800a1bf
 8009f84:	0800a1bf 	.word	0x0800a1bf
 8009f88:	0800a15f 	.word	0x0800a15f
 8009f8c:	0800a18b 	.word	0x0800a18b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	7c12      	ldrb	r2, [r2, #16]
 8009f9c:	f107 0108 	add.w	r1, r7, #8
 8009fa0:	4610      	mov	r0, r2
 8009fa2:	4798      	blx	r3
 8009fa4:	60f8      	str	r0, [r7, #12]
      break;
 8009fa6:	e112      	b.n	800a1ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	7c1b      	ldrb	r3, [r3, #16]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d10d      	bne.n	8009fcc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fb8:	f107 0208 	add.w	r2, r7, #8
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	4798      	blx	r3
 8009fc0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	2202      	movs	r2, #2
 8009fc8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009fca:	e100      	b.n	800a1ce <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd4:	f107 0208 	add.w	r2, r7, #8
 8009fd8:	4610      	mov	r0, r2
 8009fda:	4798      	blx	r3
 8009fdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	701a      	strb	r2, [r3, #0]
      break;
 8009fe6:	e0f2      	b.n	800a1ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	885b      	ldrh	r3, [r3, #2]
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	2b05      	cmp	r3, #5
 8009ff0:	f200 80ac 	bhi.w	800a14c <USBD_GetDescriptor+0x204>
 8009ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8009ffc <USBD_GetDescriptor+0xb4>)
 8009ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffa:	bf00      	nop
 8009ffc:	0800a015 	.word	0x0800a015
 800a000:	0800a049 	.word	0x0800a049
 800a004:	0800a07d 	.word	0x0800a07d
 800a008:	0800a0b1 	.word	0x0800a0b1
 800a00c:	0800a0e5 	.word	0x0800a0e5
 800a010:	0800a119 	.word	0x0800a119
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00b      	beq.n	800a038 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	7c12      	ldrb	r2, [r2, #16]
 800a02c:	f107 0108 	add.w	r1, r7, #8
 800a030:	4610      	mov	r0, r2
 800a032:	4798      	blx	r3
 800a034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a036:	e091      	b.n	800a15c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a038:	6839      	ldr	r1, [r7, #0]
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 facb 	bl	800a5d6 <USBD_CtlError>
            err++;
 800a040:	7afb      	ldrb	r3, [r7, #11]
 800a042:	3301      	adds	r3, #1
 800a044:	72fb      	strb	r3, [r7, #11]
          break;
 800a046:	e089      	b.n	800a15c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00b      	beq.n	800a06c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	7c12      	ldrb	r2, [r2, #16]
 800a060:	f107 0108 	add.w	r1, r7, #8
 800a064:	4610      	mov	r0, r2
 800a066:	4798      	blx	r3
 800a068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a06a:	e077      	b.n	800a15c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a06c:	6839      	ldr	r1, [r7, #0]
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fab1 	bl	800a5d6 <USBD_CtlError>
            err++;
 800a074:	7afb      	ldrb	r3, [r7, #11]
 800a076:	3301      	adds	r3, #1
 800a078:	72fb      	strb	r3, [r7, #11]
          break;
 800a07a:	e06f      	b.n	800a15c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00b      	beq.n	800a0a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	7c12      	ldrb	r2, [r2, #16]
 800a094:	f107 0108 	add.w	r1, r7, #8
 800a098:	4610      	mov	r0, r2
 800a09a:	4798      	blx	r3
 800a09c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a09e:	e05d      	b.n	800a15c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0a0:	6839      	ldr	r1, [r7, #0]
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fa97 	bl	800a5d6 <USBD_CtlError>
            err++;
 800a0a8:	7afb      	ldrb	r3, [r7, #11]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a0ae:	e055      	b.n	800a15c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0b6:	691b      	ldr	r3, [r3, #16]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d00b      	beq.n	800a0d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	7c12      	ldrb	r2, [r2, #16]
 800a0c8:	f107 0108 	add.w	r1, r7, #8
 800a0cc:	4610      	mov	r0, r2
 800a0ce:	4798      	blx	r3
 800a0d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0d2:	e043      	b.n	800a15c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0d4:	6839      	ldr	r1, [r7, #0]
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 fa7d 	bl	800a5d6 <USBD_CtlError>
            err++;
 800a0dc:	7afb      	ldrb	r3, [r7, #11]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0e2:	e03b      	b.n	800a15c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0ea:	695b      	ldr	r3, [r3, #20]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00b      	beq.n	800a108 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0f6:	695b      	ldr	r3, [r3, #20]
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	7c12      	ldrb	r2, [r2, #16]
 800a0fc:	f107 0108 	add.w	r1, r7, #8
 800a100:	4610      	mov	r0, r2
 800a102:	4798      	blx	r3
 800a104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a106:	e029      	b.n	800a15c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a108:	6839      	ldr	r1, [r7, #0]
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 fa63 	bl	800a5d6 <USBD_CtlError>
            err++;
 800a110:	7afb      	ldrb	r3, [r7, #11]
 800a112:	3301      	adds	r3, #1
 800a114:	72fb      	strb	r3, [r7, #11]
          break;
 800a116:	e021      	b.n	800a15c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00b      	beq.n	800a13c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a12a:	699b      	ldr	r3, [r3, #24]
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	7c12      	ldrb	r2, [r2, #16]
 800a130:	f107 0108 	add.w	r1, r7, #8
 800a134:	4610      	mov	r0, r2
 800a136:	4798      	blx	r3
 800a138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a13a:	e00f      	b.n	800a15c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a13c:	6839      	ldr	r1, [r7, #0]
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 fa49 	bl	800a5d6 <USBD_CtlError>
            err++;
 800a144:	7afb      	ldrb	r3, [r7, #11]
 800a146:	3301      	adds	r3, #1
 800a148:	72fb      	strb	r3, [r7, #11]
          break;
 800a14a:	e007      	b.n	800a15c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a14c:	6839      	ldr	r1, [r7, #0]
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 fa41 	bl	800a5d6 <USBD_CtlError>
          err++;
 800a154:	7afb      	ldrb	r3, [r7, #11]
 800a156:	3301      	adds	r3, #1
 800a158:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a15a:	bf00      	nop
      }
      break;
 800a15c:	e037      	b.n	800a1ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	7c1b      	ldrb	r3, [r3, #16]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d109      	bne.n	800a17a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a16c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a16e:	f107 0208 	add.w	r2, r7, #8
 800a172:	4610      	mov	r0, r2
 800a174:	4798      	blx	r3
 800a176:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a178:	e029      	b.n	800a1ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a17a:	6839      	ldr	r1, [r7, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 fa2a 	bl	800a5d6 <USBD_CtlError>
        err++;
 800a182:	7afb      	ldrb	r3, [r7, #11]
 800a184:	3301      	adds	r3, #1
 800a186:	72fb      	strb	r3, [r7, #11]
      break;
 800a188:	e021      	b.n	800a1ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	7c1b      	ldrb	r3, [r3, #16]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10d      	bne.n	800a1ae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a19a:	f107 0208 	add.w	r2, r7, #8
 800a19e:	4610      	mov	r0, r2
 800a1a0:	4798      	blx	r3
 800a1a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	2207      	movs	r2, #7
 800a1aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1ac:	e00f      	b.n	800a1ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a1ae:	6839      	ldr	r1, [r7, #0]
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 fa10 	bl	800a5d6 <USBD_CtlError>
        err++;
 800a1b6:	7afb      	ldrb	r3, [r7, #11]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	72fb      	strb	r3, [r7, #11]
      break;
 800a1bc:	e007      	b.n	800a1ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a1be:	6839      	ldr	r1, [r7, #0]
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 fa08 	bl	800a5d6 <USBD_CtlError>
      err++;
 800a1c6:	7afb      	ldrb	r3, [r7, #11]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	72fb      	strb	r3, [r7, #11]
      break;
 800a1cc:	bf00      	nop
  }

  if (err != 0U)
 800a1ce:	7afb      	ldrb	r3, [r7, #11]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d11e      	bne.n	800a212 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	88db      	ldrh	r3, [r3, #6]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d016      	beq.n	800a20a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a1dc:	893b      	ldrh	r3, [r7, #8]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00e      	beq.n	800a200 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	88da      	ldrh	r2, [r3, #6]
 800a1e6:	893b      	ldrh	r3, [r7, #8]
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	bf28      	it	cs
 800a1ec:	4613      	movcs	r3, r2
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a1f2:	893b      	ldrh	r3, [r7, #8]
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	68f9      	ldr	r1, [r7, #12]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 fa69 	bl	800a6d0 <USBD_CtlSendData>
 800a1fe:	e009      	b.n	800a214 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a200:	6839      	ldr	r1, [r7, #0]
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f9e7 	bl	800a5d6 <USBD_CtlError>
 800a208:	e004      	b.n	800a214 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 faba 	bl	800a784 <USBD_CtlSendStatus>
 800a210:	e000      	b.n	800a214 <USBD_GetDescriptor+0x2cc>
    return;
 800a212:	bf00      	nop
  }
}
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop

0800a21c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	889b      	ldrh	r3, [r3, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d131      	bne.n	800a292 <USBD_SetAddress+0x76>
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	88db      	ldrh	r3, [r3, #6]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d12d      	bne.n	800a292 <USBD_SetAddress+0x76>
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	885b      	ldrh	r3, [r3, #2]
 800a23a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a23c:	d829      	bhi.n	800a292 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	885b      	ldrh	r3, [r3, #2]
 800a242:	b2db      	uxtb	r3, r3
 800a244:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a248:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a250:	b2db      	uxtb	r3, r3
 800a252:	2b03      	cmp	r3, #3
 800a254:	d104      	bne.n	800a260 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a256:	6839      	ldr	r1, [r7, #0]
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 f9bc 	bl	800a5d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a25e:	e01d      	b.n	800a29c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	7bfa      	ldrb	r2, [r7, #15]
 800a264:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a268:	7bfb      	ldrb	r3, [r7, #15]
 800a26a:	4619      	mov	r1, r3
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 fef9 	bl	800b064 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fa86 	bl	800a784 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a278:	7bfb      	ldrb	r3, [r7, #15]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d004      	beq.n	800a288 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2202      	movs	r2, #2
 800a282:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a286:	e009      	b.n	800a29c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a290:	e004      	b.n	800a29c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a292:	6839      	ldr	r1, [r7, #0]
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 f99e 	bl	800a5d6 <USBD_CtlError>
  }
}
 800a29a:	bf00      	nop
 800a29c:	bf00      	nop
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	885b      	ldrh	r3, [r3, #2]
 800a2b6:	b2da      	uxtb	r2, r3
 800a2b8:	4b4e      	ldr	r3, [pc, #312]	@ (800a3f4 <USBD_SetConfig+0x150>)
 800a2ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a2bc:	4b4d      	ldr	r3, [pc, #308]	@ (800a3f4 <USBD_SetConfig+0x150>)
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d905      	bls.n	800a2d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a2c4:	6839      	ldr	r1, [r7, #0]
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 f985 	bl	800a5d6 <USBD_CtlError>
    return USBD_FAIL;
 800a2cc:	2303      	movs	r3, #3
 800a2ce:	e08c      	b.n	800a3ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	d002      	beq.n	800a2e2 <USBD_SetConfig+0x3e>
 800a2dc:	2b03      	cmp	r3, #3
 800a2de:	d029      	beq.n	800a334 <USBD_SetConfig+0x90>
 800a2e0:	e075      	b.n	800a3ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a2e2:	4b44      	ldr	r3, [pc, #272]	@ (800a3f4 <USBD_SetConfig+0x150>)
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d020      	beq.n	800a32c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a2ea:	4b42      	ldr	r3, [pc, #264]	@ (800a3f4 <USBD_SetConfig+0x150>)
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a2f4:	4b3f      	ldr	r3, [pc, #252]	@ (800a3f4 <USBD_SetConfig+0x150>)
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f7fe ffe3 	bl	80092c6 <USBD_SetClassConfig>
 800a300:	4603      	mov	r3, r0
 800a302:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a304:	7bfb      	ldrb	r3, [r7, #15]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d008      	beq.n	800a31c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a30a:	6839      	ldr	r1, [r7, #0]
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 f962 	bl	800a5d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2202      	movs	r2, #2
 800a316:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a31a:	e065      	b.n	800a3e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 fa31 	bl	800a784 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2203      	movs	r2, #3
 800a326:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a32a:	e05d      	b.n	800a3e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fa29 	bl	800a784 <USBD_CtlSendStatus>
      break;
 800a332:	e059      	b.n	800a3e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a334:	4b2f      	ldr	r3, [pc, #188]	@ (800a3f4 <USBD_SetConfig+0x150>)
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d112      	bne.n	800a362 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2202      	movs	r2, #2
 800a340:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a344:	4b2b      	ldr	r3, [pc, #172]	@ (800a3f4 <USBD_SetConfig+0x150>)
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	461a      	mov	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a34e:	4b29      	ldr	r3, [pc, #164]	@ (800a3f4 <USBD_SetConfig+0x150>)
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	4619      	mov	r1, r3
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f7fe ffd2 	bl	80092fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 fa12 	bl	800a784 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a360:	e042      	b.n	800a3e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a362:	4b24      	ldr	r3, [pc, #144]	@ (800a3f4 <USBD_SetConfig+0x150>)
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	461a      	mov	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d02a      	beq.n	800a3c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	b2db      	uxtb	r3, r3
 800a376:	4619      	mov	r1, r3
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f7fe ffc0 	bl	80092fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a37e:	4b1d      	ldr	r3, [pc, #116]	@ (800a3f4 <USBD_SetConfig+0x150>)
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	461a      	mov	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a388:	4b1a      	ldr	r3, [pc, #104]	@ (800a3f4 <USBD_SetConfig+0x150>)
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	4619      	mov	r1, r3
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f7fe ff99 	bl	80092c6 <USBD_SetClassConfig>
 800a394:	4603      	mov	r3, r0
 800a396:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a398:	7bfb      	ldrb	r3, [r7, #15]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00f      	beq.n	800a3be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a39e:	6839      	ldr	r1, [r7, #0]
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f918 	bl	800a5d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7fe ffa5 	bl	80092fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2202      	movs	r2, #2
 800a3b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a3bc:	e014      	b.n	800a3e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f9e0 	bl	800a784 <USBD_CtlSendStatus>
      break;
 800a3c4:	e010      	b.n	800a3e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f9dc 	bl	800a784 <USBD_CtlSendStatus>
      break;
 800a3cc:	e00c      	b.n	800a3e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a3ce:	6839      	ldr	r1, [r7, #0]
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 f900 	bl	800a5d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3d6:	4b07      	ldr	r3, [pc, #28]	@ (800a3f4 <USBD_SetConfig+0x150>)
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	4619      	mov	r1, r3
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7fe ff8e 	bl	80092fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a3e2:	2303      	movs	r3, #3
 800a3e4:	73fb      	strb	r3, [r7, #15]
      break;
 800a3e6:	bf00      	nop
  }

  return ret;
 800a3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	2000062c 	.word	0x2000062c

0800a3f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	88db      	ldrh	r3, [r3, #6]
 800a406:	2b01      	cmp	r3, #1
 800a408:	d004      	beq.n	800a414 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a40a:	6839      	ldr	r1, [r7, #0]
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 f8e2 	bl	800a5d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a412:	e023      	b.n	800a45c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	dc02      	bgt.n	800a426 <USBD_GetConfig+0x2e>
 800a420:	2b00      	cmp	r3, #0
 800a422:	dc03      	bgt.n	800a42c <USBD_GetConfig+0x34>
 800a424:	e015      	b.n	800a452 <USBD_GetConfig+0x5a>
 800a426:	2b03      	cmp	r3, #3
 800a428:	d00b      	beq.n	800a442 <USBD_GetConfig+0x4a>
 800a42a:	e012      	b.n	800a452 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	3308      	adds	r3, #8
 800a436:	2201      	movs	r2, #1
 800a438:	4619      	mov	r1, r3
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 f948 	bl	800a6d0 <USBD_CtlSendData>
        break;
 800a440:	e00c      	b.n	800a45c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	3304      	adds	r3, #4
 800a446:	2201      	movs	r2, #1
 800a448:	4619      	mov	r1, r3
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 f940 	bl	800a6d0 <USBD_CtlSendData>
        break;
 800a450:	e004      	b.n	800a45c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a452:	6839      	ldr	r1, [r7, #0]
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 f8be 	bl	800a5d6 <USBD_CtlError>
        break;
 800a45a:	bf00      	nop
}
 800a45c:	bf00      	nop
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a474:	b2db      	uxtb	r3, r3
 800a476:	3b01      	subs	r3, #1
 800a478:	2b02      	cmp	r3, #2
 800a47a:	d81e      	bhi.n	800a4ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	88db      	ldrh	r3, [r3, #6]
 800a480:	2b02      	cmp	r3, #2
 800a482:	d004      	beq.n	800a48e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a484:	6839      	ldr	r1, [r7, #0]
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 f8a5 	bl	800a5d6 <USBD_CtlError>
        break;
 800a48c:	e01a      	b.n	800a4c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2201      	movs	r2, #1
 800a492:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d005      	beq.n	800a4aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	f043 0202 	orr.w	r2, r3, #2
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	330c      	adds	r3, #12
 800a4ae:	2202      	movs	r2, #2
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 f90c 	bl	800a6d0 <USBD_CtlSendData>
      break;
 800a4b8:	e004      	b.n	800a4c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a4ba:	6839      	ldr	r1, [r7, #0]
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 f88a 	bl	800a5d6 <USBD_CtlError>
      break;
 800a4c2:	bf00      	nop
  }
}
 800a4c4:	bf00      	nop
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	885b      	ldrh	r3, [r3, #2]
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d107      	bne.n	800a4ee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f94c 	bl	800a784 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a4ec:	e013      	b.n	800a516 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	885b      	ldrh	r3, [r3, #2]
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	d10b      	bne.n	800a50e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	889b      	ldrh	r3, [r3, #4]
 800a4fa:	0a1b      	lsrs	r3, r3, #8
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	b2da      	uxtb	r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 f93c 	bl	800a784 <USBD_CtlSendStatus>
}
 800a50c:	e003      	b.n	800a516 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a50e:	6839      	ldr	r1, [r7, #0]
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 f860 	bl	800a5d6 <USBD_CtlError>
}
 800a516:	bf00      	nop
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b082      	sub	sp, #8
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
 800a526:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	3b01      	subs	r3, #1
 800a532:	2b02      	cmp	r3, #2
 800a534:	d80b      	bhi.n	800a54e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	885b      	ldrh	r3, [r3, #2]
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d10c      	bne.n	800a558 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f91c 	bl	800a784 <USBD_CtlSendStatus>
      }
      break;
 800a54c:	e004      	b.n	800a558 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a54e:	6839      	ldr	r1, [r7, #0]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 f840 	bl	800a5d6 <USBD_CtlError>
      break;
 800a556:	e000      	b.n	800a55a <USBD_ClrFeature+0x3c>
      break;
 800a558:	bf00      	nop
  }
}
 800a55a:	bf00      	nop
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b084      	sub	sp, #16
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	781a      	ldrb	r2, [r3, #0]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	3301      	adds	r3, #1
 800a57c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	781a      	ldrb	r2, [r3, #0]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	3301      	adds	r3, #1
 800a58a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f7ff fa40 	bl	8009a12 <SWAPBYTE>
 800a592:	4603      	mov	r3, r0
 800a594:	461a      	mov	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	3301      	adds	r3, #1
 800a59e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f7ff fa33 	bl	8009a12 <SWAPBYTE>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f7ff fa26 	bl	8009a12 <SWAPBYTE>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	80da      	strh	r2, [r3, #6]
}
 800a5ce:	bf00      	nop
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b082      	sub	sp, #8
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
 800a5de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5e0:	2180      	movs	r1, #128	@ 0x80
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 fcd4 	bl	800af90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 fcd0 	bl	800af90 <USBD_LL_StallEP>
}
 800a5f0:	bf00      	nop
 800a5f2:	3708      	adds	r7, #8
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b086      	sub	sp, #24
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a604:	2300      	movs	r3, #0
 800a606:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d042      	beq.n	800a694 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a612:	6938      	ldr	r0, [r7, #16]
 800a614:	f000 f842 	bl	800a69c <USBD_GetLen>
 800a618:	4603      	mov	r3, r0
 800a61a:	3301      	adds	r3, #1
 800a61c:	005b      	lsls	r3, r3, #1
 800a61e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a622:	d808      	bhi.n	800a636 <USBD_GetString+0x3e>
 800a624:	6938      	ldr	r0, [r7, #16]
 800a626:	f000 f839 	bl	800a69c <USBD_GetLen>
 800a62a:	4603      	mov	r3, r0
 800a62c:	3301      	adds	r3, #1
 800a62e:	b29b      	uxth	r3, r3
 800a630:	005b      	lsls	r3, r3, #1
 800a632:	b29a      	uxth	r2, r3
 800a634:	e001      	b.n	800a63a <USBD_GetString+0x42>
 800a636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a63e:	7dfb      	ldrb	r3, [r7, #23]
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	4413      	add	r3, r2
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	7812      	ldrb	r2, [r2, #0]
 800a648:	701a      	strb	r2, [r3, #0]
  idx++;
 800a64a:	7dfb      	ldrb	r3, [r7, #23]
 800a64c:	3301      	adds	r3, #1
 800a64e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a650:	7dfb      	ldrb	r3, [r7, #23]
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	4413      	add	r3, r2
 800a656:	2203      	movs	r2, #3
 800a658:	701a      	strb	r2, [r3, #0]
  idx++;
 800a65a:	7dfb      	ldrb	r3, [r7, #23]
 800a65c:	3301      	adds	r3, #1
 800a65e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a660:	e013      	b.n	800a68a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a662:	7dfb      	ldrb	r3, [r7, #23]
 800a664:	68ba      	ldr	r2, [r7, #8]
 800a666:	4413      	add	r3, r2
 800a668:	693a      	ldr	r2, [r7, #16]
 800a66a:	7812      	ldrb	r2, [r2, #0]
 800a66c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	3301      	adds	r3, #1
 800a672:	613b      	str	r3, [r7, #16]
    idx++;
 800a674:	7dfb      	ldrb	r3, [r7, #23]
 800a676:	3301      	adds	r3, #1
 800a678:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a67a:	7dfb      	ldrb	r3, [r7, #23]
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	4413      	add	r3, r2
 800a680:	2200      	movs	r2, #0
 800a682:	701a      	strb	r2, [r3, #0]
    idx++;
 800a684:	7dfb      	ldrb	r3, [r7, #23]
 800a686:	3301      	adds	r3, #1
 800a688:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d1e7      	bne.n	800a662 <USBD_GetString+0x6a>
 800a692:	e000      	b.n	800a696 <USBD_GetString+0x9e>
    return;
 800a694:	bf00      	nop
  }
}
 800a696:	3718      	adds	r7, #24
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b085      	sub	sp, #20
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a6ac:	e005      	b.n	800a6ba <USBD_GetLen+0x1e>
  {
    len++;
 800a6ae:	7bfb      	ldrb	r3, [r7, #15]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1f5      	bne.n	800a6ae <USBD_GetLen+0x12>
  }

  return len;
 800a6c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3714      	adds	r7, #20
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2202      	movs	r2, #2
 800a6e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f000 fcd3 	bl	800b0a2 <USBD_LL_Transmit>

  return USBD_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b084      	sub	sp, #16
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	60f8      	str	r0, [r7, #12]
 800a70e:	60b9      	str	r1, [r7, #8]
 800a710:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	68ba      	ldr	r2, [r7, #8]
 800a716:	2100      	movs	r1, #0
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 fcc2 	bl	800b0a2 <USBD_LL_Transmit>

  return USBD_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2203      	movs	r2, #3
 800a738:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	68ba      	ldr	r2, [r7, #8]
 800a750:	2100      	movs	r1, #0
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f000 fcc6 	bl	800b0e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3710      	adds	r7, #16
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b084      	sub	sp, #16
 800a766:	af00      	add	r7, sp, #0
 800a768:	60f8      	str	r0, [r7, #12]
 800a76a:	60b9      	str	r1, [r7, #8]
 800a76c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	2100      	movs	r1, #0
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f000 fcb5 	bl	800b0e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a77a:	2300      	movs	r3, #0
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3710      	adds	r7, #16
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2204      	movs	r2, #4
 800a790:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a794:	2300      	movs	r3, #0
 800a796:	2200      	movs	r2, #0
 800a798:	2100      	movs	r1, #0
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 fc81 	bl	800b0a2 <USBD_LL_Transmit>

  return USBD_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3708      	adds	r7, #8
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b082      	sub	sp, #8
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2205      	movs	r2, #5
 800a7b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	2200      	movs	r2, #0
 800a7be:	2100      	movs	r1, #0
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 fc8f 	bl	800b0e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	4912      	ldr	r1, [pc, #72]	@ (800a820 <MX_USB_DEVICE_Init+0x50>)
 800a7d8:	4812      	ldr	r0, [pc, #72]	@ (800a824 <MX_USB_DEVICE_Init+0x54>)
 800a7da:	f7fe fcf7 	bl	80091cc <USBD_Init>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d001      	beq.n	800a7e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a7e4:	f7f6 ff78 	bl	80016d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a7e8:	490f      	ldr	r1, [pc, #60]	@ (800a828 <MX_USB_DEVICE_Init+0x58>)
 800a7ea:	480e      	ldr	r0, [pc, #56]	@ (800a824 <MX_USB_DEVICE_Init+0x54>)
 800a7ec:	f7fe fd1e 	bl	800922c <USBD_RegisterClass>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d001      	beq.n	800a7fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a7f6:	f7f6 ff6f 	bl	80016d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a7fa:	490c      	ldr	r1, [pc, #48]	@ (800a82c <MX_USB_DEVICE_Init+0x5c>)
 800a7fc:	4809      	ldr	r0, [pc, #36]	@ (800a824 <MX_USB_DEVICE_Init+0x54>)
 800a7fe:	f7fe fc55 	bl	80090ac <USBD_CDC_RegisterInterface>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d001      	beq.n	800a80c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a808:	f7f6 ff66 	bl	80016d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a80c:	4805      	ldr	r0, [pc, #20]	@ (800a824 <MX_USB_DEVICE_Init+0x54>)
 800a80e:	f7fe fd43 	bl	8009298 <USBD_Start>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d001      	beq.n	800a81c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a818:	f7f6 ff5e 	bl	80016d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a81c:	bf00      	nop
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	200000b0 	.word	0x200000b0
 800a824:	20000630 	.word	0x20000630
 800a828:	2000001c 	.word	0x2000001c
 800a82c:	2000009c 	.word	0x2000009c

0800a830 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a834:	2200      	movs	r2, #0
 800a836:	4905      	ldr	r1, [pc, #20]	@ (800a84c <CDC_Init_FS+0x1c>)
 800a838:	4805      	ldr	r0, [pc, #20]	@ (800a850 <CDC_Init_FS+0x20>)
 800a83a:	f7fe fc51 	bl	80090e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a83e:	4905      	ldr	r1, [pc, #20]	@ (800a854 <CDC_Init_FS+0x24>)
 800a840:	4803      	ldr	r0, [pc, #12]	@ (800a850 <CDC_Init_FS+0x20>)
 800a842:	f7fe fc6f 	bl	8009124 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a846:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a848:	4618      	mov	r0, r3
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	2000110c 	.word	0x2000110c
 800a850:	20000630 	.word	0x20000630
 800a854:	2000090c 	.word	0x2000090c

0800a858 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a858:	b480      	push	{r7}
 800a85a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a85c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a85e:	4618      	mov	r0, r3
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	4603      	mov	r3, r0
 800a870:	6039      	str	r1, [r7, #0]
 800a872:	71fb      	strb	r3, [r7, #7]
 800a874:	4613      	mov	r3, r2
 800a876:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a878:	79fb      	ldrb	r3, [r7, #7]
 800a87a:	2b23      	cmp	r3, #35	@ 0x23
 800a87c:	d84a      	bhi.n	800a914 <CDC_Control_FS+0xac>
 800a87e:	a201      	add	r2, pc, #4	@ (adr r2, 800a884 <CDC_Control_FS+0x1c>)
 800a880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a884:	0800a915 	.word	0x0800a915
 800a888:	0800a915 	.word	0x0800a915
 800a88c:	0800a915 	.word	0x0800a915
 800a890:	0800a915 	.word	0x0800a915
 800a894:	0800a915 	.word	0x0800a915
 800a898:	0800a915 	.word	0x0800a915
 800a89c:	0800a915 	.word	0x0800a915
 800a8a0:	0800a915 	.word	0x0800a915
 800a8a4:	0800a915 	.word	0x0800a915
 800a8a8:	0800a915 	.word	0x0800a915
 800a8ac:	0800a915 	.word	0x0800a915
 800a8b0:	0800a915 	.word	0x0800a915
 800a8b4:	0800a915 	.word	0x0800a915
 800a8b8:	0800a915 	.word	0x0800a915
 800a8bc:	0800a915 	.word	0x0800a915
 800a8c0:	0800a915 	.word	0x0800a915
 800a8c4:	0800a915 	.word	0x0800a915
 800a8c8:	0800a915 	.word	0x0800a915
 800a8cc:	0800a915 	.word	0x0800a915
 800a8d0:	0800a915 	.word	0x0800a915
 800a8d4:	0800a915 	.word	0x0800a915
 800a8d8:	0800a915 	.word	0x0800a915
 800a8dc:	0800a915 	.word	0x0800a915
 800a8e0:	0800a915 	.word	0x0800a915
 800a8e4:	0800a915 	.word	0x0800a915
 800a8e8:	0800a915 	.word	0x0800a915
 800a8ec:	0800a915 	.word	0x0800a915
 800a8f0:	0800a915 	.word	0x0800a915
 800a8f4:	0800a915 	.word	0x0800a915
 800a8f8:	0800a915 	.word	0x0800a915
 800a8fc:	0800a915 	.word	0x0800a915
 800a900:	0800a915 	.word	0x0800a915
 800a904:	0800a915 	.word	0x0800a915
 800a908:	0800a915 	.word	0x0800a915
 800a90c:	0800a915 	.word	0x0800a915
 800a910:	0800a915 	.word	0x0800a915
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a914:	bf00      	nop
  }

  return (USBD_OK);
 800a916:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a918:	4618      	mov	r0, r3
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a92e:	6879      	ldr	r1, [r7, #4]
 800a930:	4805      	ldr	r0, [pc, #20]	@ (800a948 <CDC_Receive_FS+0x24>)
 800a932:	f7fe fbf7 	bl	8009124 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a936:	4804      	ldr	r0, [pc, #16]	@ (800a948 <CDC_Receive_FS+0x24>)
 800a938:	f7fe fc12 	bl	8009160 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a93c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3708      	adds	r7, #8
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	20000630 	.word	0x20000630

0800a94c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	4613      	mov	r3, r2
 800a958:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a95a:	2300      	movs	r3, #0
 800a95c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a95e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a962:	4618      	mov	r0, r3
 800a964:	371c      	adds	r7, #28
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
	...

0800a970 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	4603      	mov	r3, r0
 800a978:	6039      	str	r1, [r7, #0]
 800a97a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	2212      	movs	r2, #18
 800a980:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a982:	4b03      	ldr	r3, [pc, #12]	@ (800a990 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a984:	4618      	mov	r0, r3
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	200000cc 	.word	0x200000cc

0800a994 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	4603      	mov	r3, r0
 800a99c:	6039      	str	r1, [r7, #0]
 800a99e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	2204      	movs	r2, #4
 800a9a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a9a6:	4b03      	ldr	r3, [pc, #12]	@ (800a9b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr
 800a9b4:	200000e0 	.word	0x200000e0

0800a9b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	4603      	mov	r3, r0
 800a9c0:	6039      	str	r1, [r7, #0]
 800a9c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9c4:	79fb      	ldrb	r3, [r7, #7]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d105      	bne.n	800a9d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a9ca:	683a      	ldr	r2, [r7, #0]
 800a9cc:	4907      	ldr	r1, [pc, #28]	@ (800a9ec <USBD_FS_ProductStrDescriptor+0x34>)
 800a9ce:	4808      	ldr	r0, [pc, #32]	@ (800a9f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a9d0:	f7ff fe12 	bl	800a5f8 <USBD_GetString>
 800a9d4:	e004      	b.n	800a9e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a9d6:	683a      	ldr	r2, [r7, #0]
 800a9d8:	4904      	ldr	r1, [pc, #16]	@ (800a9ec <USBD_FS_ProductStrDescriptor+0x34>)
 800a9da:	4805      	ldr	r0, [pc, #20]	@ (800a9f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a9dc:	f7ff fe0c 	bl	800a5f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9e0:	4b02      	ldr	r3, [pc, #8]	@ (800a9ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	2000190c 	.word	0x2000190c
 800a9f0:	0800e4b0 	.word	0x0800e4b0

0800a9f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	6039      	str	r1, [r7, #0]
 800a9fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa00:	683a      	ldr	r2, [r7, #0]
 800aa02:	4904      	ldr	r1, [pc, #16]	@ (800aa14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa04:	4804      	ldr	r0, [pc, #16]	@ (800aa18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa06:	f7ff fdf7 	bl	800a5f8 <USBD_GetString>
  return USBD_StrDesc;
 800aa0a:	4b02      	ldr	r3, [pc, #8]	@ (800aa14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3708      	adds	r7, #8
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	2000190c 	.word	0x2000190c
 800aa18:	0800e4c8 	.word	0x0800e4c8

0800aa1c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	4603      	mov	r3, r0
 800aa24:	6039      	str	r1, [r7, #0]
 800aa26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	221a      	movs	r2, #26
 800aa2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa2e:	f000 f843 	bl	800aab8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aa32:	4b02      	ldr	r3, [pc, #8]	@ (800aa3c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3708      	adds	r7, #8
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	200000e4 	.word	0x200000e4

0800aa40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	4603      	mov	r3, r0
 800aa48:	6039      	str	r1, [r7, #0]
 800aa4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aa4c:	79fb      	ldrb	r3, [r7, #7]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d105      	bne.n	800aa5e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa52:	683a      	ldr	r2, [r7, #0]
 800aa54:	4907      	ldr	r1, [pc, #28]	@ (800aa74 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa56:	4808      	ldr	r0, [pc, #32]	@ (800aa78 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa58:	f7ff fdce 	bl	800a5f8 <USBD_GetString>
 800aa5c:	e004      	b.n	800aa68 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa5e:	683a      	ldr	r2, [r7, #0]
 800aa60:	4904      	ldr	r1, [pc, #16]	@ (800aa74 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa62:	4805      	ldr	r0, [pc, #20]	@ (800aa78 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa64:	f7ff fdc8 	bl	800a5f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa68:	4b02      	ldr	r3, [pc, #8]	@ (800aa74 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3708      	adds	r7, #8
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	2000190c 	.word	0x2000190c
 800aa78:	0800e4dc 	.word	0x0800e4dc

0800aa7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	4603      	mov	r3, r0
 800aa84:	6039      	str	r1, [r7, #0]
 800aa86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa88:	79fb      	ldrb	r3, [r7, #7]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d105      	bne.n	800aa9a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	4907      	ldr	r1, [pc, #28]	@ (800aab0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa92:	4808      	ldr	r0, [pc, #32]	@ (800aab4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa94:	f7ff fdb0 	bl	800a5f8 <USBD_GetString>
 800aa98:	e004      	b.n	800aaa4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa9a:	683a      	ldr	r2, [r7, #0]
 800aa9c:	4904      	ldr	r1, [pc, #16]	@ (800aab0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa9e:	4805      	ldr	r0, [pc, #20]	@ (800aab4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aaa0:	f7ff fdaa 	bl	800a5f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aaa4:	4b02      	ldr	r3, [pc, #8]	@ (800aab0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	2000190c 	.word	0x2000190c
 800aab4:	0800e4e8 	.word	0x0800e4e8

0800aab8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aabe:	4b0f      	ldr	r3, [pc, #60]	@ (800aafc <Get_SerialNum+0x44>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aac4:	4b0e      	ldr	r3, [pc, #56]	@ (800ab00 <Get_SerialNum+0x48>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aaca:	4b0e      	ldr	r3, [pc, #56]	@ (800ab04 <Get_SerialNum+0x4c>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4413      	add	r3, r2
 800aad6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d009      	beq.n	800aaf2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aade:	2208      	movs	r2, #8
 800aae0:	4909      	ldr	r1, [pc, #36]	@ (800ab08 <Get_SerialNum+0x50>)
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f000 f814 	bl	800ab10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aae8:	2204      	movs	r2, #4
 800aaea:	4908      	ldr	r1, [pc, #32]	@ (800ab0c <Get_SerialNum+0x54>)
 800aaec:	68b8      	ldr	r0, [r7, #8]
 800aaee:	f000 f80f 	bl	800ab10 <IntToUnicode>
  }
}
 800aaf2:	bf00      	nop
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	1fff7a10 	.word	0x1fff7a10
 800ab00:	1fff7a14 	.word	0x1fff7a14
 800ab04:	1fff7a18 	.word	0x1fff7a18
 800ab08:	200000e6 	.word	0x200000e6
 800ab0c:	200000f6 	.word	0x200000f6

0800ab10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b087      	sub	sp, #28
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ab22:	2300      	movs	r3, #0
 800ab24:	75fb      	strb	r3, [r7, #23]
 800ab26:	e027      	b.n	800ab78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	0f1b      	lsrs	r3, r3, #28
 800ab2c:	2b09      	cmp	r3, #9
 800ab2e:	d80b      	bhi.n	800ab48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	0f1b      	lsrs	r3, r3, #28
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	7dfb      	ldrb	r3, [r7, #23]
 800ab38:	005b      	lsls	r3, r3, #1
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	440b      	add	r3, r1
 800ab40:	3230      	adds	r2, #48	@ 0x30
 800ab42:	b2d2      	uxtb	r2, r2
 800ab44:	701a      	strb	r2, [r3, #0]
 800ab46:	e00a      	b.n	800ab5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	0f1b      	lsrs	r3, r3, #28
 800ab4c:	b2da      	uxtb	r2, r3
 800ab4e:	7dfb      	ldrb	r3, [r7, #23]
 800ab50:	005b      	lsls	r3, r3, #1
 800ab52:	4619      	mov	r1, r3
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	440b      	add	r3, r1
 800ab58:	3237      	adds	r2, #55	@ 0x37
 800ab5a:	b2d2      	uxtb	r2, r2
 800ab5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	011b      	lsls	r3, r3, #4
 800ab62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ab64:	7dfb      	ldrb	r3, [r7, #23]
 800ab66:	005b      	lsls	r3, r3, #1
 800ab68:	3301      	adds	r3, #1
 800ab6a:	68ba      	ldr	r2, [r7, #8]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	2200      	movs	r2, #0
 800ab70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ab72:	7dfb      	ldrb	r3, [r7, #23]
 800ab74:	3301      	adds	r3, #1
 800ab76:	75fb      	strb	r3, [r7, #23]
 800ab78:	7dfa      	ldrb	r2, [r7, #23]
 800ab7a:	79fb      	ldrb	r3, [r7, #7]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d3d3      	bcc.n	800ab28 <IntToUnicode+0x18>
  }
}
 800ab80:	bf00      	nop
 800ab82:	bf00      	nop
 800ab84:	371c      	adds	r7, #28
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
	...

0800ab90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b08a      	sub	sp, #40	@ 0x28
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab98:	f107 0314 	add.w	r3, r7, #20
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	601a      	str	r2, [r3, #0]
 800aba0:	605a      	str	r2, [r3, #4]
 800aba2:	609a      	str	r2, [r3, #8]
 800aba4:	60da      	str	r2, [r3, #12]
 800aba6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abb0:	d147      	bne.n	800ac42 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800abb2:	2300      	movs	r3, #0
 800abb4:	613b      	str	r3, [r7, #16]
 800abb6:	4b25      	ldr	r3, [pc, #148]	@ (800ac4c <HAL_PCD_MspInit+0xbc>)
 800abb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abba:	4a24      	ldr	r2, [pc, #144]	@ (800ac4c <HAL_PCD_MspInit+0xbc>)
 800abbc:	f043 0301 	orr.w	r3, r3, #1
 800abc0:	6313      	str	r3, [r2, #48]	@ 0x30
 800abc2:	4b22      	ldr	r3, [pc, #136]	@ (800ac4c <HAL_PCD_MspInit+0xbc>)
 800abc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abc6:	f003 0301 	and.w	r3, r3, #1
 800abca:	613b      	str	r3, [r7, #16]
 800abcc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800abce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800abd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800abd4:	2300      	movs	r3, #0
 800abd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abd8:	2300      	movs	r3, #0
 800abda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800abdc:	f107 0314 	add.w	r3, r7, #20
 800abe0:	4619      	mov	r1, r3
 800abe2:	481b      	ldr	r0, [pc, #108]	@ (800ac50 <HAL_PCD_MspInit+0xc0>)
 800abe4:	f7f7 ff74 	bl	8002ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800abe8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800abec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abee:	2302      	movs	r3, #2
 800abf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abf2:	2300      	movs	r3, #0
 800abf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abf6:	2300      	movs	r3, #0
 800abf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800abfa:	230a      	movs	r3, #10
 800abfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abfe:	f107 0314 	add.w	r3, r7, #20
 800ac02:	4619      	mov	r1, r3
 800ac04:	4812      	ldr	r0, [pc, #72]	@ (800ac50 <HAL_PCD_MspInit+0xc0>)
 800ac06:	f7f7 ff63 	bl	8002ad0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ac0a:	4b10      	ldr	r3, [pc, #64]	@ (800ac4c <HAL_PCD_MspInit+0xbc>)
 800ac0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac0e:	4a0f      	ldr	r2, [pc, #60]	@ (800ac4c <HAL_PCD_MspInit+0xbc>)
 800ac10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac14:	6353      	str	r3, [r2, #52]	@ 0x34
 800ac16:	2300      	movs	r3, #0
 800ac18:	60fb      	str	r3, [r7, #12]
 800ac1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ac4c <HAL_PCD_MspInit+0xbc>)
 800ac1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac1e:	4a0b      	ldr	r2, [pc, #44]	@ (800ac4c <HAL_PCD_MspInit+0xbc>)
 800ac20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ac24:	6453      	str	r3, [r2, #68]	@ 0x44
 800ac26:	4b09      	ldr	r3, [pc, #36]	@ (800ac4c <HAL_PCD_MspInit+0xbc>)
 800ac28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac2e:	60fb      	str	r3, [r7, #12]
 800ac30:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ac32:	2200      	movs	r2, #0
 800ac34:	2100      	movs	r1, #0
 800ac36:	2043      	movs	r0, #67	@ 0x43
 800ac38:	f7f7 ff13 	bl	8002a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ac3c:	2043      	movs	r0, #67	@ 0x43
 800ac3e:	f7f7 ff2c 	bl	8002a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ac42:	bf00      	nop
 800ac44:	3728      	adds	r7, #40	@ 0x28
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	40023800 	.word	0x40023800
 800ac50:	40020000 	.word	0x40020000

0800ac54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ac68:	4619      	mov	r1, r3
 800ac6a:	4610      	mov	r0, r2
 800ac6c:	f7fe fb61 	bl	8009332 <USBD_LL_SetupStage>
}
 800ac70:	bf00      	nop
 800ac72:	3708      	adds	r7, #8
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b082      	sub	sp, #8
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	460b      	mov	r3, r1
 800ac82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ac8a:	78fa      	ldrb	r2, [r7, #3]
 800ac8c:	6879      	ldr	r1, [r7, #4]
 800ac8e:	4613      	mov	r3, r2
 800ac90:	00db      	lsls	r3, r3, #3
 800ac92:	4413      	add	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	440b      	add	r3, r1
 800ac98:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	78fb      	ldrb	r3, [r7, #3]
 800aca0:	4619      	mov	r1, r3
 800aca2:	f7fe fb9b 	bl	80093dc <USBD_LL_DataOutStage>
}
 800aca6:	bf00      	nop
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b082      	sub	sp, #8
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
 800acb6:	460b      	mov	r3, r1
 800acb8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800acc0:	78fa      	ldrb	r2, [r7, #3]
 800acc2:	6879      	ldr	r1, [r7, #4]
 800acc4:	4613      	mov	r3, r2
 800acc6:	00db      	lsls	r3, r3, #3
 800acc8:	4413      	add	r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	440b      	add	r3, r1
 800acce:	3320      	adds	r3, #32
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	78fb      	ldrb	r3, [r7, #3]
 800acd4:	4619      	mov	r1, r3
 800acd6:	f7fe fc34 	bl	8009542 <USBD_LL_DataInStage>
}
 800acda:	bf00      	nop
 800acdc:	3708      	adds	r7, #8
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b082      	sub	sp, #8
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7fe fd6e 	bl	80097d2 <USBD_LL_SOF>
}
 800acf6:	bf00      	nop
 800acf8:	3708      	adds	r7, #8
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b084      	sub	sp, #16
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ad06:	2301      	movs	r3, #1
 800ad08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	79db      	ldrb	r3, [r3, #7]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d102      	bne.n	800ad18 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ad12:	2300      	movs	r3, #0
 800ad14:	73fb      	strb	r3, [r7, #15]
 800ad16:	e008      	b.n	800ad2a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	79db      	ldrb	r3, [r3, #7]
 800ad1c:	2b02      	cmp	r3, #2
 800ad1e:	d102      	bne.n	800ad26 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ad20:	2301      	movs	r3, #1
 800ad22:	73fb      	strb	r3, [r7, #15]
 800ad24:	e001      	b.n	800ad2a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ad26:	f7f6 fcd7 	bl	80016d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad30:	7bfa      	ldrb	r2, [r7, #15]
 800ad32:	4611      	mov	r1, r2
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7fe fd08 	bl	800974a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7fe fcb0 	bl	80096a6 <USBD_LL_Reset>
}
 800ad46:	bf00      	nop
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
	...

0800ad50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7fe fd03 	bl	800976a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	6812      	ldr	r2, [r2, #0]
 800ad72:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ad76:	f043 0301 	orr.w	r3, r3, #1
 800ad7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	7adb      	ldrb	r3, [r3, #11]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d005      	beq.n	800ad90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad84:	4b04      	ldr	r3, [pc, #16]	@ (800ad98 <HAL_PCD_SuspendCallback+0x48>)
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	4a03      	ldr	r2, [pc, #12]	@ (800ad98 <HAL_PCD_SuspendCallback+0x48>)
 800ad8a:	f043 0306 	orr.w	r3, r3, #6
 800ad8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ad90:	bf00      	nop
 800ad92:	3708      	adds	r7, #8
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	e000ed00 	.word	0xe000ed00

0800ad9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800adaa:	4618      	mov	r0, r3
 800adac:	f7fe fcf9 	bl	80097a2 <USBD_LL_Resume>
}
 800adb0:	bf00      	nop
 800adb2:	3708      	adds	r7, #8
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	460b      	mov	r3, r1
 800adc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800adca:	78fa      	ldrb	r2, [r7, #3]
 800adcc:	4611      	mov	r1, r2
 800adce:	4618      	mov	r0, r3
 800add0:	f7fe fd51 	bl	8009876 <USBD_LL_IsoOUTIncomplete>
}
 800add4:	bf00      	nop
 800add6:	3708      	adds	r7, #8
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	460b      	mov	r3, r1
 800ade6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800adee:	78fa      	ldrb	r2, [r7, #3]
 800adf0:	4611      	mov	r1, r2
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fe fd0d 	bl	8009812 <USBD_LL_IsoINIncomplete>
}
 800adf8:	bf00      	nop
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fe fd63 	bl	80098da <USBD_LL_DevConnected>
}
 800ae14:	bf00      	nop
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7fe fd60 	bl	80098f0 <USBD_LL_DevDisconnected>
}
 800ae30:	bf00      	nop
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d13c      	bne.n	800aec2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ae48:	4a20      	ldr	r2, [pc, #128]	@ (800aecc <USBD_LL_Init+0x94>)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4a1e      	ldr	r2, [pc, #120]	@ (800aecc <USBD_LL_Init+0x94>)
 800ae54:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ae58:	4b1c      	ldr	r3, [pc, #112]	@ (800aecc <USBD_LL_Init+0x94>)
 800ae5a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ae5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ae60:	4b1a      	ldr	r3, [pc, #104]	@ (800aecc <USBD_LL_Init+0x94>)
 800ae62:	2204      	movs	r2, #4
 800ae64:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ae66:	4b19      	ldr	r3, [pc, #100]	@ (800aecc <USBD_LL_Init+0x94>)
 800ae68:	2202      	movs	r2, #2
 800ae6a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ae6c:	4b17      	ldr	r3, [pc, #92]	@ (800aecc <USBD_LL_Init+0x94>)
 800ae6e:	2200      	movs	r2, #0
 800ae70:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ae72:	4b16      	ldr	r3, [pc, #88]	@ (800aecc <USBD_LL_Init+0x94>)
 800ae74:	2202      	movs	r2, #2
 800ae76:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ae78:	4b14      	ldr	r3, [pc, #80]	@ (800aecc <USBD_LL_Init+0x94>)
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ae7e:	4b13      	ldr	r3, [pc, #76]	@ (800aecc <USBD_LL_Init+0x94>)
 800ae80:	2200      	movs	r2, #0
 800ae82:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ae84:	4b11      	ldr	r3, [pc, #68]	@ (800aecc <USBD_LL_Init+0x94>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800ae8a:	4b10      	ldr	r3, [pc, #64]	@ (800aecc <USBD_LL_Init+0x94>)
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ae90:	4b0e      	ldr	r3, [pc, #56]	@ (800aecc <USBD_LL_Init+0x94>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ae96:	480d      	ldr	r0, [pc, #52]	@ (800aecc <USBD_LL_Init+0x94>)
 800ae98:	f7f9 fe46 	bl	8004b28 <HAL_PCD_Init>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d001      	beq.n	800aea6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800aea2:	f7f6 fc19 	bl	80016d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aea6:	2180      	movs	r1, #128	@ 0x80
 800aea8:	4808      	ldr	r0, [pc, #32]	@ (800aecc <USBD_LL_Init+0x94>)
 800aeaa:	f7fb f872 	bl	8005f92 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800aeae:	2240      	movs	r2, #64	@ 0x40
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	4806      	ldr	r0, [pc, #24]	@ (800aecc <USBD_LL_Init+0x94>)
 800aeb4:	f7fb f826 	bl	8005f04 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800aeb8:	2280      	movs	r2, #128	@ 0x80
 800aeba:	2101      	movs	r1, #1
 800aebc:	4803      	ldr	r0, [pc, #12]	@ (800aecc <USBD_LL_Init+0x94>)
 800aebe:	f7fb f821 	bl	8005f04 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3708      	adds	r7, #8
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	20001b0c 	.word	0x20001b0c

0800aed0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aed8:	2300      	movs	r3, #0
 800aeda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aedc:	2300      	movs	r3, #0
 800aede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7f9 ff2d 	bl	8004d46 <HAL_PCD_Start>
 800aeec:	4603      	mov	r3, r0
 800aeee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aef0:	7bfb      	ldrb	r3, [r7, #15]
 800aef2:	4618      	mov	r0, r3
 800aef4:	f000 f942 	bl	800b17c <USBD_Get_USB_Status>
 800aef8:	4603      	mov	r3, r0
 800aefa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aefc:	7bbb      	ldrb	r3, [r7, #14]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b084      	sub	sp, #16
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
 800af0e:	4608      	mov	r0, r1
 800af10:	4611      	mov	r1, r2
 800af12:	461a      	mov	r2, r3
 800af14:	4603      	mov	r3, r0
 800af16:	70fb      	strb	r3, [r7, #3]
 800af18:	460b      	mov	r3, r1
 800af1a:	70bb      	strb	r3, [r7, #2]
 800af1c:	4613      	mov	r3, r2
 800af1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af20:	2300      	movs	r3, #0
 800af22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af24:	2300      	movs	r3, #0
 800af26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800af2e:	78bb      	ldrb	r3, [r7, #2]
 800af30:	883a      	ldrh	r2, [r7, #0]
 800af32:	78f9      	ldrb	r1, [r7, #3]
 800af34:	f7fa fc01 	bl	800573a <HAL_PCD_EP_Open>
 800af38:	4603      	mov	r3, r0
 800af3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
 800af3e:	4618      	mov	r0, r3
 800af40:	f000 f91c 	bl	800b17c <USBD_Get_USB_Status>
 800af44:	4603      	mov	r3, r0
 800af46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af48:	7bbb      	ldrb	r3, [r7, #14]
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b084      	sub	sp, #16
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
 800af5a:	460b      	mov	r3, r1
 800af5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af5e:	2300      	movs	r3, #0
 800af60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af62:	2300      	movs	r3, #0
 800af64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af6c:	78fa      	ldrb	r2, [r7, #3]
 800af6e:	4611      	mov	r1, r2
 800af70:	4618      	mov	r0, r3
 800af72:	f7fa fc4c 	bl	800580e <HAL_PCD_EP_Close>
 800af76:	4603      	mov	r3, r0
 800af78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af7a:	7bfb      	ldrb	r3, [r7, #15]
 800af7c:	4618      	mov	r0, r3
 800af7e:	f000 f8fd 	bl	800b17c <USBD_Get_USB_Status>
 800af82:	4603      	mov	r3, r0
 800af84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af86:	7bbb      	ldrb	r3, [r7, #14]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3710      	adds	r7, #16
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	460b      	mov	r3, r1
 800af9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af9c:	2300      	movs	r3, #0
 800af9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800afaa:	78fa      	ldrb	r2, [r7, #3]
 800afac:	4611      	mov	r1, r2
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fa fd04 	bl	80059bc <HAL_PCD_EP_SetStall>
 800afb4:	4603      	mov	r3, r0
 800afb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
 800afba:	4618      	mov	r0, r3
 800afbc:	f000 f8de 	bl	800b17c <USBD_Get_USB_Status>
 800afc0:	4603      	mov	r3, r0
 800afc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b084      	sub	sp, #16
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
 800afd6:	460b      	mov	r3, r1
 800afd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afda:	2300      	movs	r3, #0
 800afdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afde:	2300      	movs	r3, #0
 800afe0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800afe8:	78fa      	ldrb	r2, [r7, #3]
 800afea:	4611      	mov	r1, r2
 800afec:	4618      	mov	r0, r3
 800afee:	f7fa fd48 	bl	8005a82 <HAL_PCD_EP_ClrStall>
 800aff2:	4603      	mov	r3, r0
 800aff4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aff6:	7bfb      	ldrb	r3, [r7, #15]
 800aff8:	4618      	mov	r0, r3
 800affa:	f000 f8bf 	bl	800b17c <USBD_Get_USB_Status>
 800affe:	4603      	mov	r3, r0
 800b000:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b002:	7bbb      	ldrb	r3, [r7, #14]
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	460b      	mov	r3, r1
 800b016:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b01e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b020:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b024:	2b00      	cmp	r3, #0
 800b026:	da0b      	bge.n	800b040 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b028:	78fb      	ldrb	r3, [r7, #3]
 800b02a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b02e:	68f9      	ldr	r1, [r7, #12]
 800b030:	4613      	mov	r3, r2
 800b032:	00db      	lsls	r3, r3, #3
 800b034:	4413      	add	r3, r2
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	440b      	add	r3, r1
 800b03a:	3316      	adds	r3, #22
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	e00b      	b.n	800b058 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b040:	78fb      	ldrb	r3, [r7, #3]
 800b042:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b046:	68f9      	ldr	r1, [r7, #12]
 800b048:	4613      	mov	r3, r2
 800b04a:	00db      	lsls	r3, r3, #3
 800b04c:	4413      	add	r3, r2
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	440b      	add	r3, r1
 800b052:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b056:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3714      	adds	r7, #20
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	460b      	mov	r3, r1
 800b06e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b070:	2300      	movs	r3, #0
 800b072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b074:	2300      	movs	r3, #0
 800b076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b07e:	78fa      	ldrb	r2, [r7, #3]
 800b080:	4611      	mov	r1, r2
 800b082:	4618      	mov	r0, r3
 800b084:	f7fa fb35 	bl	80056f2 <HAL_PCD_SetAddress>
 800b088:	4603      	mov	r3, r0
 800b08a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
 800b08e:	4618      	mov	r0, r3
 800b090:	f000 f874 	bl	800b17c <USBD_Get_USB_Status>
 800b094:	4603      	mov	r3, r0
 800b096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b098:	7bbb      	ldrb	r3, [r7, #14]
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3710      	adds	r7, #16
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b086      	sub	sp, #24
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	60f8      	str	r0, [r7, #12]
 800b0aa:	607a      	str	r2, [r7, #4]
 800b0ac:	603b      	str	r3, [r7, #0]
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b0c0:	7af9      	ldrb	r1, [r7, #11]
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	f7fa fc3f 	bl	8005948 <HAL_PCD_EP_Transmit>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0ce:	7dfb      	ldrb	r3, [r7, #23]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f000 f853 	bl	800b17c <USBD_Get_USB_Status>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b0da:	7dbb      	ldrb	r3, [r7, #22]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3718      	adds	r7, #24
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b086      	sub	sp, #24
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	607a      	str	r2, [r7, #4]
 800b0ee:	603b      	str	r3, [r7, #0]
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b102:	7af9      	ldrb	r1, [r7, #11]
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	f7fa fbcb 	bl	80058a2 <HAL_PCD_EP_Receive>
 800b10c:	4603      	mov	r3, r0
 800b10e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b110:	7dfb      	ldrb	r3, [r7, #23]
 800b112:	4618      	mov	r0, r3
 800b114:	f000 f832 	bl	800b17c <USBD_Get_USB_Status>
 800b118:	4603      	mov	r3, r0
 800b11a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b11c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3718      	adds	r7, #24
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b082      	sub	sp, #8
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	460b      	mov	r3, r1
 800b130:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b138:	78fa      	ldrb	r2, [r7, #3]
 800b13a:	4611      	mov	r1, r2
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7fa fbeb 	bl	8005918 <HAL_PCD_EP_GetRxCount>
 800b142:	4603      	mov	r3, r0
}
 800b144:	4618      	mov	r0, r3
 800b146:	3708      	adds	r7, #8
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b154:	4b03      	ldr	r3, [pc, #12]	@ (800b164 <USBD_static_malloc+0x18>)
}
 800b156:	4618      	mov	r0, r3
 800b158:	370c      	adds	r7, #12
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	20001ff0 	.word	0x20001ff0

0800b168 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]

}
 800b170:	bf00      	nop
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
 800b182:	4603      	mov	r3, r0
 800b184:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b186:	2300      	movs	r3, #0
 800b188:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b18a:	79fb      	ldrb	r3, [r7, #7]
 800b18c:	2b03      	cmp	r3, #3
 800b18e:	d817      	bhi.n	800b1c0 <USBD_Get_USB_Status+0x44>
 800b190:	a201      	add	r2, pc, #4	@ (adr r2, 800b198 <USBD_Get_USB_Status+0x1c>)
 800b192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b196:	bf00      	nop
 800b198:	0800b1a9 	.word	0x0800b1a9
 800b19c:	0800b1af 	.word	0x0800b1af
 800b1a0:	0800b1b5 	.word	0x0800b1b5
 800b1a4:	0800b1bb 	.word	0x0800b1bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b1ac:	e00b      	b.n	800b1c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b1ae:	2303      	movs	r3, #3
 800b1b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b1b2:	e008      	b.n	800b1c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b1b8:	e005      	b.n	800b1c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b1ba:	2303      	movs	r3, #3
 800b1bc:	73fb      	strb	r3, [r7, #15]
    break;
 800b1be:	e002      	b.n	800b1c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b1c0:	2303      	movs	r3, #3
 800b1c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b1c4:	bf00      	nop
  }
  return usb_status;
 800b1c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3714      	adds	r7, #20
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <__cvt>:
 800b1d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d8:	ec57 6b10 	vmov	r6, r7, d0
 800b1dc:	2f00      	cmp	r7, #0
 800b1de:	460c      	mov	r4, r1
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	463b      	mov	r3, r7
 800b1e4:	bfbb      	ittet	lt
 800b1e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b1ea:	461f      	movlt	r7, r3
 800b1ec:	2300      	movge	r3, #0
 800b1ee:	232d      	movlt	r3, #45	@ 0x2d
 800b1f0:	700b      	strb	r3, [r1, #0]
 800b1f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b1f8:	4691      	mov	r9, r2
 800b1fa:	f023 0820 	bic.w	r8, r3, #32
 800b1fe:	bfbc      	itt	lt
 800b200:	4632      	movlt	r2, r6
 800b202:	4616      	movlt	r6, r2
 800b204:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b208:	d005      	beq.n	800b216 <__cvt+0x42>
 800b20a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b20e:	d100      	bne.n	800b212 <__cvt+0x3e>
 800b210:	3401      	adds	r4, #1
 800b212:	2102      	movs	r1, #2
 800b214:	e000      	b.n	800b218 <__cvt+0x44>
 800b216:	2103      	movs	r1, #3
 800b218:	ab03      	add	r3, sp, #12
 800b21a:	9301      	str	r3, [sp, #4]
 800b21c:	ab02      	add	r3, sp, #8
 800b21e:	9300      	str	r3, [sp, #0]
 800b220:	ec47 6b10 	vmov	d0, r6, r7
 800b224:	4653      	mov	r3, sl
 800b226:	4622      	mov	r2, r4
 800b228:	f000 fe5a 	bl	800bee0 <_dtoa_r>
 800b22c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b230:	4605      	mov	r5, r0
 800b232:	d119      	bne.n	800b268 <__cvt+0x94>
 800b234:	f019 0f01 	tst.w	r9, #1
 800b238:	d00e      	beq.n	800b258 <__cvt+0x84>
 800b23a:	eb00 0904 	add.w	r9, r0, r4
 800b23e:	2200      	movs	r2, #0
 800b240:	2300      	movs	r3, #0
 800b242:	4630      	mov	r0, r6
 800b244:	4639      	mov	r1, r7
 800b246:	f7f5 fc3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b24a:	b108      	cbz	r0, 800b250 <__cvt+0x7c>
 800b24c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b250:	2230      	movs	r2, #48	@ 0x30
 800b252:	9b03      	ldr	r3, [sp, #12]
 800b254:	454b      	cmp	r3, r9
 800b256:	d31e      	bcc.n	800b296 <__cvt+0xc2>
 800b258:	9b03      	ldr	r3, [sp, #12]
 800b25a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b25c:	1b5b      	subs	r3, r3, r5
 800b25e:	4628      	mov	r0, r5
 800b260:	6013      	str	r3, [r2, #0]
 800b262:	b004      	add	sp, #16
 800b264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b268:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b26c:	eb00 0904 	add.w	r9, r0, r4
 800b270:	d1e5      	bne.n	800b23e <__cvt+0x6a>
 800b272:	7803      	ldrb	r3, [r0, #0]
 800b274:	2b30      	cmp	r3, #48	@ 0x30
 800b276:	d10a      	bne.n	800b28e <__cvt+0xba>
 800b278:	2200      	movs	r2, #0
 800b27a:	2300      	movs	r3, #0
 800b27c:	4630      	mov	r0, r6
 800b27e:	4639      	mov	r1, r7
 800b280:	f7f5 fc22 	bl	8000ac8 <__aeabi_dcmpeq>
 800b284:	b918      	cbnz	r0, 800b28e <__cvt+0xba>
 800b286:	f1c4 0401 	rsb	r4, r4, #1
 800b28a:	f8ca 4000 	str.w	r4, [sl]
 800b28e:	f8da 3000 	ldr.w	r3, [sl]
 800b292:	4499      	add	r9, r3
 800b294:	e7d3      	b.n	800b23e <__cvt+0x6a>
 800b296:	1c59      	adds	r1, r3, #1
 800b298:	9103      	str	r1, [sp, #12]
 800b29a:	701a      	strb	r2, [r3, #0]
 800b29c:	e7d9      	b.n	800b252 <__cvt+0x7e>

0800b29e <__exponent>:
 800b29e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2a0:	2900      	cmp	r1, #0
 800b2a2:	bfba      	itte	lt
 800b2a4:	4249      	neglt	r1, r1
 800b2a6:	232d      	movlt	r3, #45	@ 0x2d
 800b2a8:	232b      	movge	r3, #43	@ 0x2b
 800b2aa:	2909      	cmp	r1, #9
 800b2ac:	7002      	strb	r2, [r0, #0]
 800b2ae:	7043      	strb	r3, [r0, #1]
 800b2b0:	dd29      	ble.n	800b306 <__exponent+0x68>
 800b2b2:	f10d 0307 	add.w	r3, sp, #7
 800b2b6:	461d      	mov	r5, r3
 800b2b8:	270a      	movs	r7, #10
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	fbb1 f6f7 	udiv	r6, r1, r7
 800b2c0:	fb07 1416 	mls	r4, r7, r6, r1
 800b2c4:	3430      	adds	r4, #48	@ 0x30
 800b2c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b2ca:	460c      	mov	r4, r1
 800b2cc:	2c63      	cmp	r4, #99	@ 0x63
 800b2ce:	f103 33ff 	add.w	r3, r3, #4294967295
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	dcf1      	bgt.n	800b2ba <__exponent+0x1c>
 800b2d6:	3130      	adds	r1, #48	@ 0x30
 800b2d8:	1e94      	subs	r4, r2, #2
 800b2da:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b2de:	1c41      	adds	r1, r0, #1
 800b2e0:	4623      	mov	r3, r4
 800b2e2:	42ab      	cmp	r3, r5
 800b2e4:	d30a      	bcc.n	800b2fc <__exponent+0x5e>
 800b2e6:	f10d 0309 	add.w	r3, sp, #9
 800b2ea:	1a9b      	subs	r3, r3, r2
 800b2ec:	42ac      	cmp	r4, r5
 800b2ee:	bf88      	it	hi
 800b2f0:	2300      	movhi	r3, #0
 800b2f2:	3302      	adds	r3, #2
 800b2f4:	4403      	add	r3, r0
 800b2f6:	1a18      	subs	r0, r3, r0
 800b2f8:	b003      	add	sp, #12
 800b2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b300:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b304:	e7ed      	b.n	800b2e2 <__exponent+0x44>
 800b306:	2330      	movs	r3, #48	@ 0x30
 800b308:	3130      	adds	r1, #48	@ 0x30
 800b30a:	7083      	strb	r3, [r0, #2]
 800b30c:	70c1      	strb	r1, [r0, #3]
 800b30e:	1d03      	adds	r3, r0, #4
 800b310:	e7f1      	b.n	800b2f6 <__exponent+0x58>
	...

0800b314 <_printf_float>:
 800b314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b318:	b08d      	sub	sp, #52	@ 0x34
 800b31a:	460c      	mov	r4, r1
 800b31c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b320:	4616      	mov	r6, r2
 800b322:	461f      	mov	r7, r3
 800b324:	4605      	mov	r5, r0
 800b326:	f000 fcdb 	bl	800bce0 <_localeconv_r>
 800b32a:	6803      	ldr	r3, [r0, #0]
 800b32c:	9304      	str	r3, [sp, #16]
 800b32e:	4618      	mov	r0, r3
 800b330:	f7f4 ff9e 	bl	8000270 <strlen>
 800b334:	2300      	movs	r3, #0
 800b336:	930a      	str	r3, [sp, #40]	@ 0x28
 800b338:	f8d8 3000 	ldr.w	r3, [r8]
 800b33c:	9005      	str	r0, [sp, #20]
 800b33e:	3307      	adds	r3, #7
 800b340:	f023 0307 	bic.w	r3, r3, #7
 800b344:	f103 0208 	add.w	r2, r3, #8
 800b348:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b34c:	f8d4 b000 	ldr.w	fp, [r4]
 800b350:	f8c8 2000 	str.w	r2, [r8]
 800b354:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b358:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b35c:	9307      	str	r3, [sp, #28]
 800b35e:	f8cd 8018 	str.w	r8, [sp, #24]
 800b362:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b366:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b36a:	4b9c      	ldr	r3, [pc, #624]	@ (800b5dc <_printf_float+0x2c8>)
 800b36c:	f04f 32ff 	mov.w	r2, #4294967295
 800b370:	f7f5 fbdc 	bl	8000b2c <__aeabi_dcmpun>
 800b374:	bb70      	cbnz	r0, 800b3d4 <_printf_float+0xc0>
 800b376:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b37a:	4b98      	ldr	r3, [pc, #608]	@ (800b5dc <_printf_float+0x2c8>)
 800b37c:	f04f 32ff 	mov.w	r2, #4294967295
 800b380:	f7f5 fbb6 	bl	8000af0 <__aeabi_dcmple>
 800b384:	bb30      	cbnz	r0, 800b3d4 <_printf_float+0xc0>
 800b386:	2200      	movs	r2, #0
 800b388:	2300      	movs	r3, #0
 800b38a:	4640      	mov	r0, r8
 800b38c:	4649      	mov	r1, r9
 800b38e:	f7f5 fba5 	bl	8000adc <__aeabi_dcmplt>
 800b392:	b110      	cbz	r0, 800b39a <_printf_float+0x86>
 800b394:	232d      	movs	r3, #45	@ 0x2d
 800b396:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b39a:	4a91      	ldr	r2, [pc, #580]	@ (800b5e0 <_printf_float+0x2cc>)
 800b39c:	4b91      	ldr	r3, [pc, #580]	@ (800b5e4 <_printf_float+0x2d0>)
 800b39e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b3a2:	bf94      	ite	ls
 800b3a4:	4690      	movls	r8, r2
 800b3a6:	4698      	movhi	r8, r3
 800b3a8:	2303      	movs	r3, #3
 800b3aa:	6123      	str	r3, [r4, #16]
 800b3ac:	f02b 0304 	bic.w	r3, fp, #4
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	f04f 0900 	mov.w	r9, #0
 800b3b6:	9700      	str	r7, [sp, #0]
 800b3b8:	4633      	mov	r3, r6
 800b3ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b3bc:	4621      	mov	r1, r4
 800b3be:	4628      	mov	r0, r5
 800b3c0:	f000 f9d2 	bl	800b768 <_printf_common>
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	f040 808d 	bne.w	800b4e4 <_printf_float+0x1d0>
 800b3ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ce:	b00d      	add	sp, #52	@ 0x34
 800b3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d4:	4642      	mov	r2, r8
 800b3d6:	464b      	mov	r3, r9
 800b3d8:	4640      	mov	r0, r8
 800b3da:	4649      	mov	r1, r9
 800b3dc:	f7f5 fba6 	bl	8000b2c <__aeabi_dcmpun>
 800b3e0:	b140      	cbz	r0, 800b3f4 <_printf_float+0xe0>
 800b3e2:	464b      	mov	r3, r9
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	bfbc      	itt	lt
 800b3e8:	232d      	movlt	r3, #45	@ 0x2d
 800b3ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b3ee:	4a7e      	ldr	r2, [pc, #504]	@ (800b5e8 <_printf_float+0x2d4>)
 800b3f0:	4b7e      	ldr	r3, [pc, #504]	@ (800b5ec <_printf_float+0x2d8>)
 800b3f2:	e7d4      	b.n	800b39e <_printf_float+0x8a>
 800b3f4:	6863      	ldr	r3, [r4, #4]
 800b3f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b3fa:	9206      	str	r2, [sp, #24]
 800b3fc:	1c5a      	adds	r2, r3, #1
 800b3fe:	d13b      	bne.n	800b478 <_printf_float+0x164>
 800b400:	2306      	movs	r3, #6
 800b402:	6063      	str	r3, [r4, #4]
 800b404:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b408:	2300      	movs	r3, #0
 800b40a:	6022      	str	r2, [r4, #0]
 800b40c:	9303      	str	r3, [sp, #12]
 800b40e:	ab0a      	add	r3, sp, #40	@ 0x28
 800b410:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b414:	ab09      	add	r3, sp, #36	@ 0x24
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	6861      	ldr	r1, [r4, #4]
 800b41a:	ec49 8b10 	vmov	d0, r8, r9
 800b41e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b422:	4628      	mov	r0, r5
 800b424:	f7ff fed6 	bl	800b1d4 <__cvt>
 800b428:	9b06      	ldr	r3, [sp, #24]
 800b42a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b42c:	2b47      	cmp	r3, #71	@ 0x47
 800b42e:	4680      	mov	r8, r0
 800b430:	d129      	bne.n	800b486 <_printf_float+0x172>
 800b432:	1cc8      	adds	r0, r1, #3
 800b434:	db02      	blt.n	800b43c <_printf_float+0x128>
 800b436:	6863      	ldr	r3, [r4, #4]
 800b438:	4299      	cmp	r1, r3
 800b43a:	dd41      	ble.n	800b4c0 <_printf_float+0x1ac>
 800b43c:	f1aa 0a02 	sub.w	sl, sl, #2
 800b440:	fa5f fa8a 	uxtb.w	sl, sl
 800b444:	3901      	subs	r1, #1
 800b446:	4652      	mov	r2, sl
 800b448:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b44c:	9109      	str	r1, [sp, #36]	@ 0x24
 800b44e:	f7ff ff26 	bl	800b29e <__exponent>
 800b452:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b454:	1813      	adds	r3, r2, r0
 800b456:	2a01      	cmp	r2, #1
 800b458:	4681      	mov	r9, r0
 800b45a:	6123      	str	r3, [r4, #16]
 800b45c:	dc02      	bgt.n	800b464 <_printf_float+0x150>
 800b45e:	6822      	ldr	r2, [r4, #0]
 800b460:	07d2      	lsls	r2, r2, #31
 800b462:	d501      	bpl.n	800b468 <_printf_float+0x154>
 800b464:	3301      	adds	r3, #1
 800b466:	6123      	str	r3, [r4, #16]
 800b468:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d0a2      	beq.n	800b3b6 <_printf_float+0xa2>
 800b470:	232d      	movs	r3, #45	@ 0x2d
 800b472:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b476:	e79e      	b.n	800b3b6 <_printf_float+0xa2>
 800b478:	9a06      	ldr	r2, [sp, #24]
 800b47a:	2a47      	cmp	r2, #71	@ 0x47
 800b47c:	d1c2      	bne.n	800b404 <_printf_float+0xf0>
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1c0      	bne.n	800b404 <_printf_float+0xf0>
 800b482:	2301      	movs	r3, #1
 800b484:	e7bd      	b.n	800b402 <_printf_float+0xee>
 800b486:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b48a:	d9db      	bls.n	800b444 <_printf_float+0x130>
 800b48c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b490:	d118      	bne.n	800b4c4 <_printf_float+0x1b0>
 800b492:	2900      	cmp	r1, #0
 800b494:	6863      	ldr	r3, [r4, #4]
 800b496:	dd0b      	ble.n	800b4b0 <_printf_float+0x19c>
 800b498:	6121      	str	r1, [r4, #16]
 800b49a:	b913      	cbnz	r3, 800b4a2 <_printf_float+0x18e>
 800b49c:	6822      	ldr	r2, [r4, #0]
 800b49e:	07d0      	lsls	r0, r2, #31
 800b4a0:	d502      	bpl.n	800b4a8 <_printf_float+0x194>
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	440b      	add	r3, r1
 800b4a6:	6123      	str	r3, [r4, #16]
 800b4a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b4aa:	f04f 0900 	mov.w	r9, #0
 800b4ae:	e7db      	b.n	800b468 <_printf_float+0x154>
 800b4b0:	b913      	cbnz	r3, 800b4b8 <_printf_float+0x1a4>
 800b4b2:	6822      	ldr	r2, [r4, #0]
 800b4b4:	07d2      	lsls	r2, r2, #31
 800b4b6:	d501      	bpl.n	800b4bc <_printf_float+0x1a8>
 800b4b8:	3302      	adds	r3, #2
 800b4ba:	e7f4      	b.n	800b4a6 <_printf_float+0x192>
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e7f2      	b.n	800b4a6 <_printf_float+0x192>
 800b4c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b4c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4c6:	4299      	cmp	r1, r3
 800b4c8:	db05      	blt.n	800b4d6 <_printf_float+0x1c2>
 800b4ca:	6823      	ldr	r3, [r4, #0]
 800b4cc:	6121      	str	r1, [r4, #16]
 800b4ce:	07d8      	lsls	r0, r3, #31
 800b4d0:	d5ea      	bpl.n	800b4a8 <_printf_float+0x194>
 800b4d2:	1c4b      	adds	r3, r1, #1
 800b4d4:	e7e7      	b.n	800b4a6 <_printf_float+0x192>
 800b4d6:	2900      	cmp	r1, #0
 800b4d8:	bfd4      	ite	le
 800b4da:	f1c1 0202 	rsble	r2, r1, #2
 800b4de:	2201      	movgt	r2, #1
 800b4e0:	4413      	add	r3, r2
 800b4e2:	e7e0      	b.n	800b4a6 <_printf_float+0x192>
 800b4e4:	6823      	ldr	r3, [r4, #0]
 800b4e6:	055a      	lsls	r2, r3, #21
 800b4e8:	d407      	bmi.n	800b4fa <_printf_float+0x1e6>
 800b4ea:	6923      	ldr	r3, [r4, #16]
 800b4ec:	4642      	mov	r2, r8
 800b4ee:	4631      	mov	r1, r6
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	47b8      	blx	r7
 800b4f4:	3001      	adds	r0, #1
 800b4f6:	d12b      	bne.n	800b550 <_printf_float+0x23c>
 800b4f8:	e767      	b.n	800b3ca <_printf_float+0xb6>
 800b4fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b4fe:	f240 80dd 	bls.w	800b6bc <_printf_float+0x3a8>
 800b502:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b506:	2200      	movs	r2, #0
 800b508:	2300      	movs	r3, #0
 800b50a:	f7f5 fadd 	bl	8000ac8 <__aeabi_dcmpeq>
 800b50e:	2800      	cmp	r0, #0
 800b510:	d033      	beq.n	800b57a <_printf_float+0x266>
 800b512:	4a37      	ldr	r2, [pc, #220]	@ (800b5f0 <_printf_float+0x2dc>)
 800b514:	2301      	movs	r3, #1
 800b516:	4631      	mov	r1, r6
 800b518:	4628      	mov	r0, r5
 800b51a:	47b8      	blx	r7
 800b51c:	3001      	adds	r0, #1
 800b51e:	f43f af54 	beq.w	800b3ca <_printf_float+0xb6>
 800b522:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b526:	4543      	cmp	r3, r8
 800b528:	db02      	blt.n	800b530 <_printf_float+0x21c>
 800b52a:	6823      	ldr	r3, [r4, #0]
 800b52c:	07d8      	lsls	r0, r3, #31
 800b52e:	d50f      	bpl.n	800b550 <_printf_float+0x23c>
 800b530:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b534:	4631      	mov	r1, r6
 800b536:	4628      	mov	r0, r5
 800b538:	47b8      	blx	r7
 800b53a:	3001      	adds	r0, #1
 800b53c:	f43f af45 	beq.w	800b3ca <_printf_float+0xb6>
 800b540:	f04f 0900 	mov.w	r9, #0
 800b544:	f108 38ff 	add.w	r8, r8, #4294967295
 800b548:	f104 0a1a 	add.w	sl, r4, #26
 800b54c:	45c8      	cmp	r8, r9
 800b54e:	dc09      	bgt.n	800b564 <_printf_float+0x250>
 800b550:	6823      	ldr	r3, [r4, #0]
 800b552:	079b      	lsls	r3, r3, #30
 800b554:	f100 8103 	bmi.w	800b75e <_printf_float+0x44a>
 800b558:	68e0      	ldr	r0, [r4, #12]
 800b55a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b55c:	4298      	cmp	r0, r3
 800b55e:	bfb8      	it	lt
 800b560:	4618      	movlt	r0, r3
 800b562:	e734      	b.n	800b3ce <_printf_float+0xba>
 800b564:	2301      	movs	r3, #1
 800b566:	4652      	mov	r2, sl
 800b568:	4631      	mov	r1, r6
 800b56a:	4628      	mov	r0, r5
 800b56c:	47b8      	blx	r7
 800b56e:	3001      	adds	r0, #1
 800b570:	f43f af2b 	beq.w	800b3ca <_printf_float+0xb6>
 800b574:	f109 0901 	add.w	r9, r9, #1
 800b578:	e7e8      	b.n	800b54c <_printf_float+0x238>
 800b57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	dc39      	bgt.n	800b5f4 <_printf_float+0x2e0>
 800b580:	4a1b      	ldr	r2, [pc, #108]	@ (800b5f0 <_printf_float+0x2dc>)
 800b582:	2301      	movs	r3, #1
 800b584:	4631      	mov	r1, r6
 800b586:	4628      	mov	r0, r5
 800b588:	47b8      	blx	r7
 800b58a:	3001      	adds	r0, #1
 800b58c:	f43f af1d 	beq.w	800b3ca <_printf_float+0xb6>
 800b590:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b594:	ea59 0303 	orrs.w	r3, r9, r3
 800b598:	d102      	bne.n	800b5a0 <_printf_float+0x28c>
 800b59a:	6823      	ldr	r3, [r4, #0]
 800b59c:	07d9      	lsls	r1, r3, #31
 800b59e:	d5d7      	bpl.n	800b550 <_printf_float+0x23c>
 800b5a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5a4:	4631      	mov	r1, r6
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	47b8      	blx	r7
 800b5aa:	3001      	adds	r0, #1
 800b5ac:	f43f af0d 	beq.w	800b3ca <_printf_float+0xb6>
 800b5b0:	f04f 0a00 	mov.w	sl, #0
 800b5b4:	f104 0b1a 	add.w	fp, r4, #26
 800b5b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ba:	425b      	negs	r3, r3
 800b5bc:	4553      	cmp	r3, sl
 800b5be:	dc01      	bgt.n	800b5c4 <_printf_float+0x2b0>
 800b5c0:	464b      	mov	r3, r9
 800b5c2:	e793      	b.n	800b4ec <_printf_float+0x1d8>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	465a      	mov	r2, fp
 800b5c8:	4631      	mov	r1, r6
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	47b8      	blx	r7
 800b5ce:	3001      	adds	r0, #1
 800b5d0:	f43f aefb 	beq.w	800b3ca <_printf_float+0xb6>
 800b5d4:	f10a 0a01 	add.w	sl, sl, #1
 800b5d8:	e7ee      	b.n	800b5b8 <_printf_float+0x2a4>
 800b5da:	bf00      	nop
 800b5dc:	7fefffff 	.word	0x7fefffff
 800b5e0:	0800e810 	.word	0x0800e810
 800b5e4:	0800e814 	.word	0x0800e814
 800b5e8:	0800e818 	.word	0x0800e818
 800b5ec:	0800e81c 	.word	0x0800e81c
 800b5f0:	0800e820 	.word	0x0800e820
 800b5f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b5f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b5fa:	4553      	cmp	r3, sl
 800b5fc:	bfa8      	it	ge
 800b5fe:	4653      	movge	r3, sl
 800b600:	2b00      	cmp	r3, #0
 800b602:	4699      	mov	r9, r3
 800b604:	dc36      	bgt.n	800b674 <_printf_float+0x360>
 800b606:	f04f 0b00 	mov.w	fp, #0
 800b60a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b60e:	f104 021a 	add.w	r2, r4, #26
 800b612:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b614:	9306      	str	r3, [sp, #24]
 800b616:	eba3 0309 	sub.w	r3, r3, r9
 800b61a:	455b      	cmp	r3, fp
 800b61c:	dc31      	bgt.n	800b682 <_printf_float+0x36e>
 800b61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b620:	459a      	cmp	sl, r3
 800b622:	dc3a      	bgt.n	800b69a <_printf_float+0x386>
 800b624:	6823      	ldr	r3, [r4, #0]
 800b626:	07da      	lsls	r2, r3, #31
 800b628:	d437      	bmi.n	800b69a <_printf_float+0x386>
 800b62a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b62c:	ebaa 0903 	sub.w	r9, sl, r3
 800b630:	9b06      	ldr	r3, [sp, #24]
 800b632:	ebaa 0303 	sub.w	r3, sl, r3
 800b636:	4599      	cmp	r9, r3
 800b638:	bfa8      	it	ge
 800b63a:	4699      	movge	r9, r3
 800b63c:	f1b9 0f00 	cmp.w	r9, #0
 800b640:	dc33      	bgt.n	800b6aa <_printf_float+0x396>
 800b642:	f04f 0800 	mov.w	r8, #0
 800b646:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b64a:	f104 0b1a 	add.w	fp, r4, #26
 800b64e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b650:	ebaa 0303 	sub.w	r3, sl, r3
 800b654:	eba3 0309 	sub.w	r3, r3, r9
 800b658:	4543      	cmp	r3, r8
 800b65a:	f77f af79 	ble.w	800b550 <_printf_float+0x23c>
 800b65e:	2301      	movs	r3, #1
 800b660:	465a      	mov	r2, fp
 800b662:	4631      	mov	r1, r6
 800b664:	4628      	mov	r0, r5
 800b666:	47b8      	blx	r7
 800b668:	3001      	adds	r0, #1
 800b66a:	f43f aeae 	beq.w	800b3ca <_printf_float+0xb6>
 800b66e:	f108 0801 	add.w	r8, r8, #1
 800b672:	e7ec      	b.n	800b64e <_printf_float+0x33a>
 800b674:	4642      	mov	r2, r8
 800b676:	4631      	mov	r1, r6
 800b678:	4628      	mov	r0, r5
 800b67a:	47b8      	blx	r7
 800b67c:	3001      	adds	r0, #1
 800b67e:	d1c2      	bne.n	800b606 <_printf_float+0x2f2>
 800b680:	e6a3      	b.n	800b3ca <_printf_float+0xb6>
 800b682:	2301      	movs	r3, #1
 800b684:	4631      	mov	r1, r6
 800b686:	4628      	mov	r0, r5
 800b688:	9206      	str	r2, [sp, #24]
 800b68a:	47b8      	blx	r7
 800b68c:	3001      	adds	r0, #1
 800b68e:	f43f ae9c 	beq.w	800b3ca <_printf_float+0xb6>
 800b692:	9a06      	ldr	r2, [sp, #24]
 800b694:	f10b 0b01 	add.w	fp, fp, #1
 800b698:	e7bb      	b.n	800b612 <_printf_float+0x2fe>
 800b69a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b69e:	4631      	mov	r1, r6
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	47b8      	blx	r7
 800b6a4:	3001      	adds	r0, #1
 800b6a6:	d1c0      	bne.n	800b62a <_printf_float+0x316>
 800b6a8:	e68f      	b.n	800b3ca <_printf_float+0xb6>
 800b6aa:	9a06      	ldr	r2, [sp, #24]
 800b6ac:	464b      	mov	r3, r9
 800b6ae:	4442      	add	r2, r8
 800b6b0:	4631      	mov	r1, r6
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	47b8      	blx	r7
 800b6b6:	3001      	adds	r0, #1
 800b6b8:	d1c3      	bne.n	800b642 <_printf_float+0x32e>
 800b6ba:	e686      	b.n	800b3ca <_printf_float+0xb6>
 800b6bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b6c0:	f1ba 0f01 	cmp.w	sl, #1
 800b6c4:	dc01      	bgt.n	800b6ca <_printf_float+0x3b6>
 800b6c6:	07db      	lsls	r3, r3, #31
 800b6c8:	d536      	bpl.n	800b738 <_printf_float+0x424>
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	4642      	mov	r2, r8
 800b6ce:	4631      	mov	r1, r6
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	47b8      	blx	r7
 800b6d4:	3001      	adds	r0, #1
 800b6d6:	f43f ae78 	beq.w	800b3ca <_printf_float+0xb6>
 800b6da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6de:	4631      	mov	r1, r6
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	47b8      	blx	r7
 800b6e4:	3001      	adds	r0, #1
 800b6e6:	f43f ae70 	beq.w	800b3ca <_printf_float+0xb6>
 800b6ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6f6:	f7f5 f9e7 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6fa:	b9c0      	cbnz	r0, 800b72e <_printf_float+0x41a>
 800b6fc:	4653      	mov	r3, sl
 800b6fe:	f108 0201 	add.w	r2, r8, #1
 800b702:	4631      	mov	r1, r6
 800b704:	4628      	mov	r0, r5
 800b706:	47b8      	blx	r7
 800b708:	3001      	adds	r0, #1
 800b70a:	d10c      	bne.n	800b726 <_printf_float+0x412>
 800b70c:	e65d      	b.n	800b3ca <_printf_float+0xb6>
 800b70e:	2301      	movs	r3, #1
 800b710:	465a      	mov	r2, fp
 800b712:	4631      	mov	r1, r6
 800b714:	4628      	mov	r0, r5
 800b716:	47b8      	blx	r7
 800b718:	3001      	adds	r0, #1
 800b71a:	f43f ae56 	beq.w	800b3ca <_printf_float+0xb6>
 800b71e:	f108 0801 	add.w	r8, r8, #1
 800b722:	45d0      	cmp	r8, sl
 800b724:	dbf3      	blt.n	800b70e <_printf_float+0x3fa>
 800b726:	464b      	mov	r3, r9
 800b728:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b72c:	e6df      	b.n	800b4ee <_printf_float+0x1da>
 800b72e:	f04f 0800 	mov.w	r8, #0
 800b732:	f104 0b1a 	add.w	fp, r4, #26
 800b736:	e7f4      	b.n	800b722 <_printf_float+0x40e>
 800b738:	2301      	movs	r3, #1
 800b73a:	4642      	mov	r2, r8
 800b73c:	e7e1      	b.n	800b702 <_printf_float+0x3ee>
 800b73e:	2301      	movs	r3, #1
 800b740:	464a      	mov	r2, r9
 800b742:	4631      	mov	r1, r6
 800b744:	4628      	mov	r0, r5
 800b746:	47b8      	blx	r7
 800b748:	3001      	adds	r0, #1
 800b74a:	f43f ae3e 	beq.w	800b3ca <_printf_float+0xb6>
 800b74e:	f108 0801 	add.w	r8, r8, #1
 800b752:	68e3      	ldr	r3, [r4, #12]
 800b754:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b756:	1a5b      	subs	r3, r3, r1
 800b758:	4543      	cmp	r3, r8
 800b75a:	dcf0      	bgt.n	800b73e <_printf_float+0x42a>
 800b75c:	e6fc      	b.n	800b558 <_printf_float+0x244>
 800b75e:	f04f 0800 	mov.w	r8, #0
 800b762:	f104 0919 	add.w	r9, r4, #25
 800b766:	e7f4      	b.n	800b752 <_printf_float+0x43e>

0800b768 <_printf_common>:
 800b768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b76c:	4616      	mov	r6, r2
 800b76e:	4698      	mov	r8, r3
 800b770:	688a      	ldr	r2, [r1, #8]
 800b772:	690b      	ldr	r3, [r1, #16]
 800b774:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b778:	4293      	cmp	r3, r2
 800b77a:	bfb8      	it	lt
 800b77c:	4613      	movlt	r3, r2
 800b77e:	6033      	str	r3, [r6, #0]
 800b780:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b784:	4607      	mov	r7, r0
 800b786:	460c      	mov	r4, r1
 800b788:	b10a      	cbz	r2, 800b78e <_printf_common+0x26>
 800b78a:	3301      	adds	r3, #1
 800b78c:	6033      	str	r3, [r6, #0]
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	0699      	lsls	r1, r3, #26
 800b792:	bf42      	ittt	mi
 800b794:	6833      	ldrmi	r3, [r6, #0]
 800b796:	3302      	addmi	r3, #2
 800b798:	6033      	strmi	r3, [r6, #0]
 800b79a:	6825      	ldr	r5, [r4, #0]
 800b79c:	f015 0506 	ands.w	r5, r5, #6
 800b7a0:	d106      	bne.n	800b7b0 <_printf_common+0x48>
 800b7a2:	f104 0a19 	add.w	sl, r4, #25
 800b7a6:	68e3      	ldr	r3, [r4, #12]
 800b7a8:	6832      	ldr	r2, [r6, #0]
 800b7aa:	1a9b      	subs	r3, r3, r2
 800b7ac:	42ab      	cmp	r3, r5
 800b7ae:	dc26      	bgt.n	800b7fe <_printf_common+0x96>
 800b7b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b7b4:	6822      	ldr	r2, [r4, #0]
 800b7b6:	3b00      	subs	r3, #0
 800b7b8:	bf18      	it	ne
 800b7ba:	2301      	movne	r3, #1
 800b7bc:	0692      	lsls	r2, r2, #26
 800b7be:	d42b      	bmi.n	800b818 <_printf_common+0xb0>
 800b7c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b7c4:	4641      	mov	r1, r8
 800b7c6:	4638      	mov	r0, r7
 800b7c8:	47c8      	blx	r9
 800b7ca:	3001      	adds	r0, #1
 800b7cc:	d01e      	beq.n	800b80c <_printf_common+0xa4>
 800b7ce:	6823      	ldr	r3, [r4, #0]
 800b7d0:	6922      	ldr	r2, [r4, #16]
 800b7d2:	f003 0306 	and.w	r3, r3, #6
 800b7d6:	2b04      	cmp	r3, #4
 800b7d8:	bf02      	ittt	eq
 800b7da:	68e5      	ldreq	r5, [r4, #12]
 800b7dc:	6833      	ldreq	r3, [r6, #0]
 800b7de:	1aed      	subeq	r5, r5, r3
 800b7e0:	68a3      	ldr	r3, [r4, #8]
 800b7e2:	bf0c      	ite	eq
 800b7e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7e8:	2500      	movne	r5, #0
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	bfc4      	itt	gt
 800b7ee:	1a9b      	subgt	r3, r3, r2
 800b7f0:	18ed      	addgt	r5, r5, r3
 800b7f2:	2600      	movs	r6, #0
 800b7f4:	341a      	adds	r4, #26
 800b7f6:	42b5      	cmp	r5, r6
 800b7f8:	d11a      	bne.n	800b830 <_printf_common+0xc8>
 800b7fa:	2000      	movs	r0, #0
 800b7fc:	e008      	b.n	800b810 <_printf_common+0xa8>
 800b7fe:	2301      	movs	r3, #1
 800b800:	4652      	mov	r2, sl
 800b802:	4641      	mov	r1, r8
 800b804:	4638      	mov	r0, r7
 800b806:	47c8      	blx	r9
 800b808:	3001      	adds	r0, #1
 800b80a:	d103      	bne.n	800b814 <_printf_common+0xac>
 800b80c:	f04f 30ff 	mov.w	r0, #4294967295
 800b810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b814:	3501      	adds	r5, #1
 800b816:	e7c6      	b.n	800b7a6 <_printf_common+0x3e>
 800b818:	18e1      	adds	r1, r4, r3
 800b81a:	1c5a      	adds	r2, r3, #1
 800b81c:	2030      	movs	r0, #48	@ 0x30
 800b81e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b822:	4422      	add	r2, r4
 800b824:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b828:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b82c:	3302      	adds	r3, #2
 800b82e:	e7c7      	b.n	800b7c0 <_printf_common+0x58>
 800b830:	2301      	movs	r3, #1
 800b832:	4622      	mov	r2, r4
 800b834:	4641      	mov	r1, r8
 800b836:	4638      	mov	r0, r7
 800b838:	47c8      	blx	r9
 800b83a:	3001      	adds	r0, #1
 800b83c:	d0e6      	beq.n	800b80c <_printf_common+0xa4>
 800b83e:	3601      	adds	r6, #1
 800b840:	e7d9      	b.n	800b7f6 <_printf_common+0x8e>
	...

0800b844 <_printf_i>:
 800b844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b848:	7e0f      	ldrb	r7, [r1, #24]
 800b84a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b84c:	2f78      	cmp	r7, #120	@ 0x78
 800b84e:	4691      	mov	r9, r2
 800b850:	4680      	mov	r8, r0
 800b852:	460c      	mov	r4, r1
 800b854:	469a      	mov	sl, r3
 800b856:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b85a:	d807      	bhi.n	800b86c <_printf_i+0x28>
 800b85c:	2f62      	cmp	r7, #98	@ 0x62
 800b85e:	d80a      	bhi.n	800b876 <_printf_i+0x32>
 800b860:	2f00      	cmp	r7, #0
 800b862:	f000 80d2 	beq.w	800ba0a <_printf_i+0x1c6>
 800b866:	2f58      	cmp	r7, #88	@ 0x58
 800b868:	f000 80b9 	beq.w	800b9de <_printf_i+0x19a>
 800b86c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b870:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b874:	e03a      	b.n	800b8ec <_printf_i+0xa8>
 800b876:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b87a:	2b15      	cmp	r3, #21
 800b87c:	d8f6      	bhi.n	800b86c <_printf_i+0x28>
 800b87e:	a101      	add	r1, pc, #4	@ (adr r1, 800b884 <_printf_i+0x40>)
 800b880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b884:	0800b8dd 	.word	0x0800b8dd
 800b888:	0800b8f1 	.word	0x0800b8f1
 800b88c:	0800b86d 	.word	0x0800b86d
 800b890:	0800b86d 	.word	0x0800b86d
 800b894:	0800b86d 	.word	0x0800b86d
 800b898:	0800b86d 	.word	0x0800b86d
 800b89c:	0800b8f1 	.word	0x0800b8f1
 800b8a0:	0800b86d 	.word	0x0800b86d
 800b8a4:	0800b86d 	.word	0x0800b86d
 800b8a8:	0800b86d 	.word	0x0800b86d
 800b8ac:	0800b86d 	.word	0x0800b86d
 800b8b0:	0800b9f1 	.word	0x0800b9f1
 800b8b4:	0800b91b 	.word	0x0800b91b
 800b8b8:	0800b9ab 	.word	0x0800b9ab
 800b8bc:	0800b86d 	.word	0x0800b86d
 800b8c0:	0800b86d 	.word	0x0800b86d
 800b8c4:	0800ba13 	.word	0x0800ba13
 800b8c8:	0800b86d 	.word	0x0800b86d
 800b8cc:	0800b91b 	.word	0x0800b91b
 800b8d0:	0800b86d 	.word	0x0800b86d
 800b8d4:	0800b86d 	.word	0x0800b86d
 800b8d8:	0800b9b3 	.word	0x0800b9b3
 800b8dc:	6833      	ldr	r3, [r6, #0]
 800b8de:	1d1a      	adds	r2, r3, #4
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	6032      	str	r2, [r6, #0]
 800b8e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e09d      	b.n	800ba2c <_printf_i+0x1e8>
 800b8f0:	6833      	ldr	r3, [r6, #0]
 800b8f2:	6820      	ldr	r0, [r4, #0]
 800b8f4:	1d19      	adds	r1, r3, #4
 800b8f6:	6031      	str	r1, [r6, #0]
 800b8f8:	0606      	lsls	r6, r0, #24
 800b8fa:	d501      	bpl.n	800b900 <_printf_i+0xbc>
 800b8fc:	681d      	ldr	r5, [r3, #0]
 800b8fe:	e003      	b.n	800b908 <_printf_i+0xc4>
 800b900:	0645      	lsls	r5, r0, #25
 800b902:	d5fb      	bpl.n	800b8fc <_printf_i+0xb8>
 800b904:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b908:	2d00      	cmp	r5, #0
 800b90a:	da03      	bge.n	800b914 <_printf_i+0xd0>
 800b90c:	232d      	movs	r3, #45	@ 0x2d
 800b90e:	426d      	negs	r5, r5
 800b910:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b914:	4859      	ldr	r0, [pc, #356]	@ (800ba7c <_printf_i+0x238>)
 800b916:	230a      	movs	r3, #10
 800b918:	e011      	b.n	800b93e <_printf_i+0xfa>
 800b91a:	6821      	ldr	r1, [r4, #0]
 800b91c:	6833      	ldr	r3, [r6, #0]
 800b91e:	0608      	lsls	r0, r1, #24
 800b920:	f853 5b04 	ldr.w	r5, [r3], #4
 800b924:	d402      	bmi.n	800b92c <_printf_i+0xe8>
 800b926:	0649      	lsls	r1, r1, #25
 800b928:	bf48      	it	mi
 800b92a:	b2ad      	uxthmi	r5, r5
 800b92c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b92e:	4853      	ldr	r0, [pc, #332]	@ (800ba7c <_printf_i+0x238>)
 800b930:	6033      	str	r3, [r6, #0]
 800b932:	bf14      	ite	ne
 800b934:	230a      	movne	r3, #10
 800b936:	2308      	moveq	r3, #8
 800b938:	2100      	movs	r1, #0
 800b93a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b93e:	6866      	ldr	r6, [r4, #4]
 800b940:	60a6      	str	r6, [r4, #8]
 800b942:	2e00      	cmp	r6, #0
 800b944:	bfa2      	ittt	ge
 800b946:	6821      	ldrge	r1, [r4, #0]
 800b948:	f021 0104 	bicge.w	r1, r1, #4
 800b94c:	6021      	strge	r1, [r4, #0]
 800b94e:	b90d      	cbnz	r5, 800b954 <_printf_i+0x110>
 800b950:	2e00      	cmp	r6, #0
 800b952:	d04b      	beq.n	800b9ec <_printf_i+0x1a8>
 800b954:	4616      	mov	r6, r2
 800b956:	fbb5 f1f3 	udiv	r1, r5, r3
 800b95a:	fb03 5711 	mls	r7, r3, r1, r5
 800b95e:	5dc7      	ldrb	r7, [r0, r7]
 800b960:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b964:	462f      	mov	r7, r5
 800b966:	42bb      	cmp	r3, r7
 800b968:	460d      	mov	r5, r1
 800b96a:	d9f4      	bls.n	800b956 <_printf_i+0x112>
 800b96c:	2b08      	cmp	r3, #8
 800b96e:	d10b      	bne.n	800b988 <_printf_i+0x144>
 800b970:	6823      	ldr	r3, [r4, #0]
 800b972:	07df      	lsls	r7, r3, #31
 800b974:	d508      	bpl.n	800b988 <_printf_i+0x144>
 800b976:	6923      	ldr	r3, [r4, #16]
 800b978:	6861      	ldr	r1, [r4, #4]
 800b97a:	4299      	cmp	r1, r3
 800b97c:	bfde      	ittt	le
 800b97e:	2330      	movle	r3, #48	@ 0x30
 800b980:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b984:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b988:	1b92      	subs	r2, r2, r6
 800b98a:	6122      	str	r2, [r4, #16]
 800b98c:	f8cd a000 	str.w	sl, [sp]
 800b990:	464b      	mov	r3, r9
 800b992:	aa03      	add	r2, sp, #12
 800b994:	4621      	mov	r1, r4
 800b996:	4640      	mov	r0, r8
 800b998:	f7ff fee6 	bl	800b768 <_printf_common>
 800b99c:	3001      	adds	r0, #1
 800b99e:	d14a      	bne.n	800ba36 <_printf_i+0x1f2>
 800b9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a4:	b004      	add	sp, #16
 800b9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9aa:	6823      	ldr	r3, [r4, #0]
 800b9ac:	f043 0320 	orr.w	r3, r3, #32
 800b9b0:	6023      	str	r3, [r4, #0]
 800b9b2:	4833      	ldr	r0, [pc, #204]	@ (800ba80 <_printf_i+0x23c>)
 800b9b4:	2778      	movs	r7, #120	@ 0x78
 800b9b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b9ba:	6823      	ldr	r3, [r4, #0]
 800b9bc:	6831      	ldr	r1, [r6, #0]
 800b9be:	061f      	lsls	r7, r3, #24
 800b9c0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b9c4:	d402      	bmi.n	800b9cc <_printf_i+0x188>
 800b9c6:	065f      	lsls	r7, r3, #25
 800b9c8:	bf48      	it	mi
 800b9ca:	b2ad      	uxthmi	r5, r5
 800b9cc:	6031      	str	r1, [r6, #0]
 800b9ce:	07d9      	lsls	r1, r3, #31
 800b9d0:	bf44      	itt	mi
 800b9d2:	f043 0320 	orrmi.w	r3, r3, #32
 800b9d6:	6023      	strmi	r3, [r4, #0]
 800b9d8:	b11d      	cbz	r5, 800b9e2 <_printf_i+0x19e>
 800b9da:	2310      	movs	r3, #16
 800b9dc:	e7ac      	b.n	800b938 <_printf_i+0xf4>
 800b9de:	4827      	ldr	r0, [pc, #156]	@ (800ba7c <_printf_i+0x238>)
 800b9e0:	e7e9      	b.n	800b9b6 <_printf_i+0x172>
 800b9e2:	6823      	ldr	r3, [r4, #0]
 800b9e4:	f023 0320 	bic.w	r3, r3, #32
 800b9e8:	6023      	str	r3, [r4, #0]
 800b9ea:	e7f6      	b.n	800b9da <_printf_i+0x196>
 800b9ec:	4616      	mov	r6, r2
 800b9ee:	e7bd      	b.n	800b96c <_printf_i+0x128>
 800b9f0:	6833      	ldr	r3, [r6, #0]
 800b9f2:	6825      	ldr	r5, [r4, #0]
 800b9f4:	6961      	ldr	r1, [r4, #20]
 800b9f6:	1d18      	adds	r0, r3, #4
 800b9f8:	6030      	str	r0, [r6, #0]
 800b9fa:	062e      	lsls	r6, r5, #24
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	d501      	bpl.n	800ba04 <_printf_i+0x1c0>
 800ba00:	6019      	str	r1, [r3, #0]
 800ba02:	e002      	b.n	800ba0a <_printf_i+0x1c6>
 800ba04:	0668      	lsls	r0, r5, #25
 800ba06:	d5fb      	bpl.n	800ba00 <_printf_i+0x1bc>
 800ba08:	8019      	strh	r1, [r3, #0]
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	6123      	str	r3, [r4, #16]
 800ba0e:	4616      	mov	r6, r2
 800ba10:	e7bc      	b.n	800b98c <_printf_i+0x148>
 800ba12:	6833      	ldr	r3, [r6, #0]
 800ba14:	1d1a      	adds	r2, r3, #4
 800ba16:	6032      	str	r2, [r6, #0]
 800ba18:	681e      	ldr	r6, [r3, #0]
 800ba1a:	6862      	ldr	r2, [r4, #4]
 800ba1c:	2100      	movs	r1, #0
 800ba1e:	4630      	mov	r0, r6
 800ba20:	f7f4 fbd6 	bl	80001d0 <memchr>
 800ba24:	b108      	cbz	r0, 800ba2a <_printf_i+0x1e6>
 800ba26:	1b80      	subs	r0, r0, r6
 800ba28:	6060      	str	r0, [r4, #4]
 800ba2a:	6863      	ldr	r3, [r4, #4]
 800ba2c:	6123      	str	r3, [r4, #16]
 800ba2e:	2300      	movs	r3, #0
 800ba30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba34:	e7aa      	b.n	800b98c <_printf_i+0x148>
 800ba36:	6923      	ldr	r3, [r4, #16]
 800ba38:	4632      	mov	r2, r6
 800ba3a:	4649      	mov	r1, r9
 800ba3c:	4640      	mov	r0, r8
 800ba3e:	47d0      	blx	sl
 800ba40:	3001      	adds	r0, #1
 800ba42:	d0ad      	beq.n	800b9a0 <_printf_i+0x15c>
 800ba44:	6823      	ldr	r3, [r4, #0]
 800ba46:	079b      	lsls	r3, r3, #30
 800ba48:	d413      	bmi.n	800ba72 <_printf_i+0x22e>
 800ba4a:	68e0      	ldr	r0, [r4, #12]
 800ba4c:	9b03      	ldr	r3, [sp, #12]
 800ba4e:	4298      	cmp	r0, r3
 800ba50:	bfb8      	it	lt
 800ba52:	4618      	movlt	r0, r3
 800ba54:	e7a6      	b.n	800b9a4 <_printf_i+0x160>
 800ba56:	2301      	movs	r3, #1
 800ba58:	4632      	mov	r2, r6
 800ba5a:	4649      	mov	r1, r9
 800ba5c:	4640      	mov	r0, r8
 800ba5e:	47d0      	blx	sl
 800ba60:	3001      	adds	r0, #1
 800ba62:	d09d      	beq.n	800b9a0 <_printf_i+0x15c>
 800ba64:	3501      	adds	r5, #1
 800ba66:	68e3      	ldr	r3, [r4, #12]
 800ba68:	9903      	ldr	r1, [sp, #12]
 800ba6a:	1a5b      	subs	r3, r3, r1
 800ba6c:	42ab      	cmp	r3, r5
 800ba6e:	dcf2      	bgt.n	800ba56 <_printf_i+0x212>
 800ba70:	e7eb      	b.n	800ba4a <_printf_i+0x206>
 800ba72:	2500      	movs	r5, #0
 800ba74:	f104 0619 	add.w	r6, r4, #25
 800ba78:	e7f5      	b.n	800ba66 <_printf_i+0x222>
 800ba7a:	bf00      	nop
 800ba7c:	0800e822 	.word	0x0800e822
 800ba80:	0800e833 	.word	0x0800e833

0800ba84 <std>:
 800ba84:	2300      	movs	r3, #0
 800ba86:	b510      	push	{r4, lr}
 800ba88:	4604      	mov	r4, r0
 800ba8a:	e9c0 3300 	strd	r3, r3, [r0]
 800ba8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba92:	6083      	str	r3, [r0, #8]
 800ba94:	8181      	strh	r1, [r0, #12]
 800ba96:	6643      	str	r3, [r0, #100]	@ 0x64
 800ba98:	81c2      	strh	r2, [r0, #14]
 800ba9a:	6183      	str	r3, [r0, #24]
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	2208      	movs	r2, #8
 800baa0:	305c      	adds	r0, #92	@ 0x5c
 800baa2:	f000 f914 	bl	800bcce <memset>
 800baa6:	4b0d      	ldr	r3, [pc, #52]	@ (800badc <std+0x58>)
 800baa8:	6263      	str	r3, [r4, #36]	@ 0x24
 800baaa:	4b0d      	ldr	r3, [pc, #52]	@ (800bae0 <std+0x5c>)
 800baac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800baae:	4b0d      	ldr	r3, [pc, #52]	@ (800bae4 <std+0x60>)
 800bab0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bab2:	4b0d      	ldr	r3, [pc, #52]	@ (800bae8 <std+0x64>)
 800bab4:	6323      	str	r3, [r4, #48]	@ 0x30
 800bab6:	4b0d      	ldr	r3, [pc, #52]	@ (800baec <std+0x68>)
 800bab8:	6224      	str	r4, [r4, #32]
 800baba:	429c      	cmp	r4, r3
 800babc:	d006      	beq.n	800bacc <std+0x48>
 800babe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bac2:	4294      	cmp	r4, r2
 800bac4:	d002      	beq.n	800bacc <std+0x48>
 800bac6:	33d0      	adds	r3, #208	@ 0xd0
 800bac8:	429c      	cmp	r4, r3
 800baca:	d105      	bne.n	800bad8 <std+0x54>
 800bacc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bad4:	f000 b978 	b.w	800bdc8 <__retarget_lock_init_recursive>
 800bad8:	bd10      	pop	{r4, pc}
 800bada:	bf00      	nop
 800badc:	0800bc49 	.word	0x0800bc49
 800bae0:	0800bc6b 	.word	0x0800bc6b
 800bae4:	0800bca3 	.word	0x0800bca3
 800bae8:	0800bcc7 	.word	0x0800bcc7
 800baec:	20002210 	.word	0x20002210

0800baf0 <stdio_exit_handler>:
 800baf0:	4a02      	ldr	r2, [pc, #8]	@ (800bafc <stdio_exit_handler+0xc>)
 800baf2:	4903      	ldr	r1, [pc, #12]	@ (800bb00 <stdio_exit_handler+0x10>)
 800baf4:	4803      	ldr	r0, [pc, #12]	@ (800bb04 <stdio_exit_handler+0x14>)
 800baf6:	f000 b869 	b.w	800bbcc <_fwalk_sglue>
 800bafa:	bf00      	nop
 800bafc:	20000100 	.word	0x20000100
 800bb00:	0800d725 	.word	0x0800d725
 800bb04:	20000110 	.word	0x20000110

0800bb08 <cleanup_stdio>:
 800bb08:	6841      	ldr	r1, [r0, #4]
 800bb0a:	4b0c      	ldr	r3, [pc, #48]	@ (800bb3c <cleanup_stdio+0x34>)
 800bb0c:	4299      	cmp	r1, r3
 800bb0e:	b510      	push	{r4, lr}
 800bb10:	4604      	mov	r4, r0
 800bb12:	d001      	beq.n	800bb18 <cleanup_stdio+0x10>
 800bb14:	f001 fe06 	bl	800d724 <_fflush_r>
 800bb18:	68a1      	ldr	r1, [r4, #8]
 800bb1a:	4b09      	ldr	r3, [pc, #36]	@ (800bb40 <cleanup_stdio+0x38>)
 800bb1c:	4299      	cmp	r1, r3
 800bb1e:	d002      	beq.n	800bb26 <cleanup_stdio+0x1e>
 800bb20:	4620      	mov	r0, r4
 800bb22:	f001 fdff 	bl	800d724 <_fflush_r>
 800bb26:	68e1      	ldr	r1, [r4, #12]
 800bb28:	4b06      	ldr	r3, [pc, #24]	@ (800bb44 <cleanup_stdio+0x3c>)
 800bb2a:	4299      	cmp	r1, r3
 800bb2c:	d004      	beq.n	800bb38 <cleanup_stdio+0x30>
 800bb2e:	4620      	mov	r0, r4
 800bb30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb34:	f001 bdf6 	b.w	800d724 <_fflush_r>
 800bb38:	bd10      	pop	{r4, pc}
 800bb3a:	bf00      	nop
 800bb3c:	20002210 	.word	0x20002210
 800bb40:	20002278 	.word	0x20002278
 800bb44:	200022e0 	.word	0x200022e0

0800bb48 <global_stdio_init.part.0>:
 800bb48:	b510      	push	{r4, lr}
 800bb4a:	4b0b      	ldr	r3, [pc, #44]	@ (800bb78 <global_stdio_init.part.0+0x30>)
 800bb4c:	4c0b      	ldr	r4, [pc, #44]	@ (800bb7c <global_stdio_init.part.0+0x34>)
 800bb4e:	4a0c      	ldr	r2, [pc, #48]	@ (800bb80 <global_stdio_init.part.0+0x38>)
 800bb50:	601a      	str	r2, [r3, #0]
 800bb52:	4620      	mov	r0, r4
 800bb54:	2200      	movs	r2, #0
 800bb56:	2104      	movs	r1, #4
 800bb58:	f7ff ff94 	bl	800ba84 <std>
 800bb5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bb60:	2201      	movs	r2, #1
 800bb62:	2109      	movs	r1, #9
 800bb64:	f7ff ff8e 	bl	800ba84 <std>
 800bb68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bb6c:	2202      	movs	r2, #2
 800bb6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb72:	2112      	movs	r1, #18
 800bb74:	f7ff bf86 	b.w	800ba84 <std>
 800bb78:	20002348 	.word	0x20002348
 800bb7c:	20002210 	.word	0x20002210
 800bb80:	0800baf1 	.word	0x0800baf1

0800bb84 <__sfp_lock_acquire>:
 800bb84:	4801      	ldr	r0, [pc, #4]	@ (800bb8c <__sfp_lock_acquire+0x8>)
 800bb86:	f000 b920 	b.w	800bdca <__retarget_lock_acquire_recursive>
 800bb8a:	bf00      	nop
 800bb8c:	20002351 	.word	0x20002351

0800bb90 <__sfp_lock_release>:
 800bb90:	4801      	ldr	r0, [pc, #4]	@ (800bb98 <__sfp_lock_release+0x8>)
 800bb92:	f000 b91b 	b.w	800bdcc <__retarget_lock_release_recursive>
 800bb96:	bf00      	nop
 800bb98:	20002351 	.word	0x20002351

0800bb9c <__sinit>:
 800bb9c:	b510      	push	{r4, lr}
 800bb9e:	4604      	mov	r4, r0
 800bba0:	f7ff fff0 	bl	800bb84 <__sfp_lock_acquire>
 800bba4:	6a23      	ldr	r3, [r4, #32]
 800bba6:	b11b      	cbz	r3, 800bbb0 <__sinit+0x14>
 800bba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbac:	f7ff bff0 	b.w	800bb90 <__sfp_lock_release>
 800bbb0:	4b04      	ldr	r3, [pc, #16]	@ (800bbc4 <__sinit+0x28>)
 800bbb2:	6223      	str	r3, [r4, #32]
 800bbb4:	4b04      	ldr	r3, [pc, #16]	@ (800bbc8 <__sinit+0x2c>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d1f5      	bne.n	800bba8 <__sinit+0xc>
 800bbbc:	f7ff ffc4 	bl	800bb48 <global_stdio_init.part.0>
 800bbc0:	e7f2      	b.n	800bba8 <__sinit+0xc>
 800bbc2:	bf00      	nop
 800bbc4:	0800bb09 	.word	0x0800bb09
 800bbc8:	20002348 	.word	0x20002348

0800bbcc <_fwalk_sglue>:
 800bbcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbd0:	4607      	mov	r7, r0
 800bbd2:	4688      	mov	r8, r1
 800bbd4:	4614      	mov	r4, r2
 800bbd6:	2600      	movs	r6, #0
 800bbd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bbdc:	f1b9 0901 	subs.w	r9, r9, #1
 800bbe0:	d505      	bpl.n	800bbee <_fwalk_sglue+0x22>
 800bbe2:	6824      	ldr	r4, [r4, #0]
 800bbe4:	2c00      	cmp	r4, #0
 800bbe6:	d1f7      	bne.n	800bbd8 <_fwalk_sglue+0xc>
 800bbe8:	4630      	mov	r0, r6
 800bbea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbee:	89ab      	ldrh	r3, [r5, #12]
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d907      	bls.n	800bc04 <_fwalk_sglue+0x38>
 800bbf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	d003      	beq.n	800bc04 <_fwalk_sglue+0x38>
 800bbfc:	4629      	mov	r1, r5
 800bbfe:	4638      	mov	r0, r7
 800bc00:	47c0      	blx	r8
 800bc02:	4306      	orrs	r6, r0
 800bc04:	3568      	adds	r5, #104	@ 0x68
 800bc06:	e7e9      	b.n	800bbdc <_fwalk_sglue+0x10>

0800bc08 <siprintf>:
 800bc08:	b40e      	push	{r1, r2, r3}
 800bc0a:	b500      	push	{lr}
 800bc0c:	b09c      	sub	sp, #112	@ 0x70
 800bc0e:	ab1d      	add	r3, sp, #116	@ 0x74
 800bc10:	9002      	str	r0, [sp, #8]
 800bc12:	9006      	str	r0, [sp, #24]
 800bc14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bc18:	4809      	ldr	r0, [pc, #36]	@ (800bc40 <siprintf+0x38>)
 800bc1a:	9107      	str	r1, [sp, #28]
 800bc1c:	9104      	str	r1, [sp, #16]
 800bc1e:	4909      	ldr	r1, [pc, #36]	@ (800bc44 <siprintf+0x3c>)
 800bc20:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc24:	9105      	str	r1, [sp, #20]
 800bc26:	6800      	ldr	r0, [r0, #0]
 800bc28:	9301      	str	r3, [sp, #4]
 800bc2a:	a902      	add	r1, sp, #8
 800bc2c:	f001 fbfa 	bl	800d424 <_svfiprintf_r>
 800bc30:	9b02      	ldr	r3, [sp, #8]
 800bc32:	2200      	movs	r2, #0
 800bc34:	701a      	strb	r2, [r3, #0]
 800bc36:	b01c      	add	sp, #112	@ 0x70
 800bc38:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc3c:	b003      	add	sp, #12
 800bc3e:	4770      	bx	lr
 800bc40:	2000010c 	.word	0x2000010c
 800bc44:	ffff0208 	.word	0xffff0208

0800bc48 <__sread>:
 800bc48:	b510      	push	{r4, lr}
 800bc4a:	460c      	mov	r4, r1
 800bc4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc50:	f000 f86c 	bl	800bd2c <_read_r>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	bfab      	itete	ge
 800bc58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bc5a:	89a3      	ldrhlt	r3, [r4, #12]
 800bc5c:	181b      	addge	r3, r3, r0
 800bc5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bc62:	bfac      	ite	ge
 800bc64:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bc66:	81a3      	strhlt	r3, [r4, #12]
 800bc68:	bd10      	pop	{r4, pc}

0800bc6a <__swrite>:
 800bc6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc6e:	461f      	mov	r7, r3
 800bc70:	898b      	ldrh	r3, [r1, #12]
 800bc72:	05db      	lsls	r3, r3, #23
 800bc74:	4605      	mov	r5, r0
 800bc76:	460c      	mov	r4, r1
 800bc78:	4616      	mov	r6, r2
 800bc7a:	d505      	bpl.n	800bc88 <__swrite+0x1e>
 800bc7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc80:	2302      	movs	r3, #2
 800bc82:	2200      	movs	r2, #0
 800bc84:	f000 f840 	bl	800bd08 <_lseek_r>
 800bc88:	89a3      	ldrh	r3, [r4, #12]
 800bc8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bc92:	81a3      	strh	r3, [r4, #12]
 800bc94:	4632      	mov	r2, r6
 800bc96:	463b      	mov	r3, r7
 800bc98:	4628      	mov	r0, r5
 800bc9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc9e:	f000 b857 	b.w	800bd50 <_write_r>

0800bca2 <__sseek>:
 800bca2:	b510      	push	{r4, lr}
 800bca4:	460c      	mov	r4, r1
 800bca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcaa:	f000 f82d 	bl	800bd08 <_lseek_r>
 800bcae:	1c43      	adds	r3, r0, #1
 800bcb0:	89a3      	ldrh	r3, [r4, #12]
 800bcb2:	bf15      	itete	ne
 800bcb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bcb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bcba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bcbe:	81a3      	strheq	r3, [r4, #12]
 800bcc0:	bf18      	it	ne
 800bcc2:	81a3      	strhne	r3, [r4, #12]
 800bcc4:	bd10      	pop	{r4, pc}

0800bcc6 <__sclose>:
 800bcc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcca:	f000 b80d 	b.w	800bce8 <_close_r>

0800bcce <memset>:
 800bcce:	4402      	add	r2, r0
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d100      	bne.n	800bcd8 <memset+0xa>
 800bcd6:	4770      	bx	lr
 800bcd8:	f803 1b01 	strb.w	r1, [r3], #1
 800bcdc:	e7f9      	b.n	800bcd2 <memset+0x4>
	...

0800bce0 <_localeconv_r>:
 800bce0:	4800      	ldr	r0, [pc, #0]	@ (800bce4 <_localeconv_r+0x4>)
 800bce2:	4770      	bx	lr
 800bce4:	2000024c 	.word	0x2000024c

0800bce8 <_close_r>:
 800bce8:	b538      	push	{r3, r4, r5, lr}
 800bcea:	4d06      	ldr	r5, [pc, #24]	@ (800bd04 <_close_r+0x1c>)
 800bcec:	2300      	movs	r3, #0
 800bcee:	4604      	mov	r4, r0
 800bcf0:	4608      	mov	r0, r1
 800bcf2:	602b      	str	r3, [r5, #0]
 800bcf4:	f7f6 fc96 	bl	8002624 <_close>
 800bcf8:	1c43      	adds	r3, r0, #1
 800bcfa:	d102      	bne.n	800bd02 <_close_r+0x1a>
 800bcfc:	682b      	ldr	r3, [r5, #0]
 800bcfe:	b103      	cbz	r3, 800bd02 <_close_r+0x1a>
 800bd00:	6023      	str	r3, [r4, #0]
 800bd02:	bd38      	pop	{r3, r4, r5, pc}
 800bd04:	2000234c 	.word	0x2000234c

0800bd08 <_lseek_r>:
 800bd08:	b538      	push	{r3, r4, r5, lr}
 800bd0a:	4d07      	ldr	r5, [pc, #28]	@ (800bd28 <_lseek_r+0x20>)
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	4608      	mov	r0, r1
 800bd10:	4611      	mov	r1, r2
 800bd12:	2200      	movs	r2, #0
 800bd14:	602a      	str	r2, [r5, #0]
 800bd16:	461a      	mov	r2, r3
 800bd18:	f7f6 fcab 	bl	8002672 <_lseek>
 800bd1c:	1c43      	adds	r3, r0, #1
 800bd1e:	d102      	bne.n	800bd26 <_lseek_r+0x1e>
 800bd20:	682b      	ldr	r3, [r5, #0]
 800bd22:	b103      	cbz	r3, 800bd26 <_lseek_r+0x1e>
 800bd24:	6023      	str	r3, [r4, #0]
 800bd26:	bd38      	pop	{r3, r4, r5, pc}
 800bd28:	2000234c 	.word	0x2000234c

0800bd2c <_read_r>:
 800bd2c:	b538      	push	{r3, r4, r5, lr}
 800bd2e:	4d07      	ldr	r5, [pc, #28]	@ (800bd4c <_read_r+0x20>)
 800bd30:	4604      	mov	r4, r0
 800bd32:	4608      	mov	r0, r1
 800bd34:	4611      	mov	r1, r2
 800bd36:	2200      	movs	r2, #0
 800bd38:	602a      	str	r2, [r5, #0]
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	f7f6 fc39 	bl	80025b2 <_read>
 800bd40:	1c43      	adds	r3, r0, #1
 800bd42:	d102      	bne.n	800bd4a <_read_r+0x1e>
 800bd44:	682b      	ldr	r3, [r5, #0]
 800bd46:	b103      	cbz	r3, 800bd4a <_read_r+0x1e>
 800bd48:	6023      	str	r3, [r4, #0]
 800bd4a:	bd38      	pop	{r3, r4, r5, pc}
 800bd4c:	2000234c 	.word	0x2000234c

0800bd50 <_write_r>:
 800bd50:	b538      	push	{r3, r4, r5, lr}
 800bd52:	4d07      	ldr	r5, [pc, #28]	@ (800bd70 <_write_r+0x20>)
 800bd54:	4604      	mov	r4, r0
 800bd56:	4608      	mov	r0, r1
 800bd58:	4611      	mov	r1, r2
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	602a      	str	r2, [r5, #0]
 800bd5e:	461a      	mov	r2, r3
 800bd60:	f7f6 fc44 	bl	80025ec <_write>
 800bd64:	1c43      	adds	r3, r0, #1
 800bd66:	d102      	bne.n	800bd6e <_write_r+0x1e>
 800bd68:	682b      	ldr	r3, [r5, #0]
 800bd6a:	b103      	cbz	r3, 800bd6e <_write_r+0x1e>
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	bd38      	pop	{r3, r4, r5, pc}
 800bd70:	2000234c 	.word	0x2000234c

0800bd74 <__errno>:
 800bd74:	4b01      	ldr	r3, [pc, #4]	@ (800bd7c <__errno+0x8>)
 800bd76:	6818      	ldr	r0, [r3, #0]
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop
 800bd7c:	2000010c 	.word	0x2000010c

0800bd80 <__libc_init_array>:
 800bd80:	b570      	push	{r4, r5, r6, lr}
 800bd82:	4d0d      	ldr	r5, [pc, #52]	@ (800bdb8 <__libc_init_array+0x38>)
 800bd84:	4c0d      	ldr	r4, [pc, #52]	@ (800bdbc <__libc_init_array+0x3c>)
 800bd86:	1b64      	subs	r4, r4, r5
 800bd88:	10a4      	asrs	r4, r4, #2
 800bd8a:	2600      	movs	r6, #0
 800bd8c:	42a6      	cmp	r6, r4
 800bd8e:	d109      	bne.n	800bda4 <__libc_init_array+0x24>
 800bd90:	4d0b      	ldr	r5, [pc, #44]	@ (800bdc0 <__libc_init_array+0x40>)
 800bd92:	4c0c      	ldr	r4, [pc, #48]	@ (800bdc4 <__libc_init_array+0x44>)
 800bd94:	f002 fb6a 	bl	800e46c <_init>
 800bd98:	1b64      	subs	r4, r4, r5
 800bd9a:	10a4      	asrs	r4, r4, #2
 800bd9c:	2600      	movs	r6, #0
 800bd9e:	42a6      	cmp	r6, r4
 800bda0:	d105      	bne.n	800bdae <__libc_init_array+0x2e>
 800bda2:	bd70      	pop	{r4, r5, r6, pc}
 800bda4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bda8:	4798      	blx	r3
 800bdaa:	3601      	adds	r6, #1
 800bdac:	e7ee      	b.n	800bd8c <__libc_init_array+0xc>
 800bdae:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdb2:	4798      	blx	r3
 800bdb4:	3601      	adds	r6, #1
 800bdb6:	e7f2      	b.n	800bd9e <__libc_init_array+0x1e>
 800bdb8:	0800eb88 	.word	0x0800eb88
 800bdbc:	0800eb88 	.word	0x0800eb88
 800bdc0:	0800eb88 	.word	0x0800eb88
 800bdc4:	0800eb8c 	.word	0x0800eb8c

0800bdc8 <__retarget_lock_init_recursive>:
 800bdc8:	4770      	bx	lr

0800bdca <__retarget_lock_acquire_recursive>:
 800bdca:	4770      	bx	lr

0800bdcc <__retarget_lock_release_recursive>:
 800bdcc:	4770      	bx	lr

0800bdce <quorem>:
 800bdce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd2:	6903      	ldr	r3, [r0, #16]
 800bdd4:	690c      	ldr	r4, [r1, #16]
 800bdd6:	42a3      	cmp	r3, r4
 800bdd8:	4607      	mov	r7, r0
 800bdda:	db7e      	blt.n	800beda <quorem+0x10c>
 800bddc:	3c01      	subs	r4, #1
 800bdde:	f101 0814 	add.w	r8, r1, #20
 800bde2:	00a3      	lsls	r3, r4, #2
 800bde4:	f100 0514 	add.w	r5, r0, #20
 800bde8:	9300      	str	r3, [sp, #0]
 800bdea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdee:	9301      	str	r3, [sp, #4]
 800bdf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bdf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800be00:	fbb2 f6f3 	udiv	r6, r2, r3
 800be04:	d32e      	bcc.n	800be64 <quorem+0x96>
 800be06:	f04f 0a00 	mov.w	sl, #0
 800be0a:	46c4      	mov	ip, r8
 800be0c:	46ae      	mov	lr, r5
 800be0e:	46d3      	mov	fp, sl
 800be10:	f85c 3b04 	ldr.w	r3, [ip], #4
 800be14:	b298      	uxth	r0, r3
 800be16:	fb06 a000 	mla	r0, r6, r0, sl
 800be1a:	0c02      	lsrs	r2, r0, #16
 800be1c:	0c1b      	lsrs	r3, r3, #16
 800be1e:	fb06 2303 	mla	r3, r6, r3, r2
 800be22:	f8de 2000 	ldr.w	r2, [lr]
 800be26:	b280      	uxth	r0, r0
 800be28:	b292      	uxth	r2, r2
 800be2a:	1a12      	subs	r2, r2, r0
 800be2c:	445a      	add	r2, fp
 800be2e:	f8de 0000 	ldr.w	r0, [lr]
 800be32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be36:	b29b      	uxth	r3, r3
 800be38:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800be3c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800be40:	b292      	uxth	r2, r2
 800be42:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800be46:	45e1      	cmp	r9, ip
 800be48:	f84e 2b04 	str.w	r2, [lr], #4
 800be4c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800be50:	d2de      	bcs.n	800be10 <quorem+0x42>
 800be52:	9b00      	ldr	r3, [sp, #0]
 800be54:	58eb      	ldr	r3, [r5, r3]
 800be56:	b92b      	cbnz	r3, 800be64 <quorem+0x96>
 800be58:	9b01      	ldr	r3, [sp, #4]
 800be5a:	3b04      	subs	r3, #4
 800be5c:	429d      	cmp	r5, r3
 800be5e:	461a      	mov	r2, r3
 800be60:	d32f      	bcc.n	800bec2 <quorem+0xf4>
 800be62:	613c      	str	r4, [r7, #16]
 800be64:	4638      	mov	r0, r7
 800be66:	f001 f979 	bl	800d15c <__mcmp>
 800be6a:	2800      	cmp	r0, #0
 800be6c:	db25      	blt.n	800beba <quorem+0xec>
 800be6e:	4629      	mov	r1, r5
 800be70:	2000      	movs	r0, #0
 800be72:	f858 2b04 	ldr.w	r2, [r8], #4
 800be76:	f8d1 c000 	ldr.w	ip, [r1]
 800be7a:	fa1f fe82 	uxth.w	lr, r2
 800be7e:	fa1f f38c 	uxth.w	r3, ip
 800be82:	eba3 030e 	sub.w	r3, r3, lr
 800be86:	4403      	add	r3, r0
 800be88:	0c12      	lsrs	r2, r2, #16
 800be8a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800be8e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800be92:	b29b      	uxth	r3, r3
 800be94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be98:	45c1      	cmp	r9, r8
 800be9a:	f841 3b04 	str.w	r3, [r1], #4
 800be9e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bea2:	d2e6      	bcs.n	800be72 <quorem+0xa4>
 800bea4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bea8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800beac:	b922      	cbnz	r2, 800beb8 <quorem+0xea>
 800beae:	3b04      	subs	r3, #4
 800beb0:	429d      	cmp	r5, r3
 800beb2:	461a      	mov	r2, r3
 800beb4:	d30b      	bcc.n	800bece <quorem+0x100>
 800beb6:	613c      	str	r4, [r7, #16]
 800beb8:	3601      	adds	r6, #1
 800beba:	4630      	mov	r0, r6
 800bebc:	b003      	add	sp, #12
 800bebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec2:	6812      	ldr	r2, [r2, #0]
 800bec4:	3b04      	subs	r3, #4
 800bec6:	2a00      	cmp	r2, #0
 800bec8:	d1cb      	bne.n	800be62 <quorem+0x94>
 800beca:	3c01      	subs	r4, #1
 800becc:	e7c6      	b.n	800be5c <quorem+0x8e>
 800bece:	6812      	ldr	r2, [r2, #0]
 800bed0:	3b04      	subs	r3, #4
 800bed2:	2a00      	cmp	r2, #0
 800bed4:	d1ef      	bne.n	800beb6 <quorem+0xe8>
 800bed6:	3c01      	subs	r4, #1
 800bed8:	e7ea      	b.n	800beb0 <quorem+0xe2>
 800beda:	2000      	movs	r0, #0
 800bedc:	e7ee      	b.n	800bebc <quorem+0xee>
	...

0800bee0 <_dtoa_r>:
 800bee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee4:	69c7      	ldr	r7, [r0, #28]
 800bee6:	b099      	sub	sp, #100	@ 0x64
 800bee8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800beec:	ec55 4b10 	vmov	r4, r5, d0
 800bef0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bef2:	9109      	str	r1, [sp, #36]	@ 0x24
 800bef4:	4683      	mov	fp, r0
 800bef6:	920e      	str	r2, [sp, #56]	@ 0x38
 800bef8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800befa:	b97f      	cbnz	r7, 800bf1c <_dtoa_r+0x3c>
 800befc:	2010      	movs	r0, #16
 800befe:	f000 fdfd 	bl	800cafc <malloc>
 800bf02:	4602      	mov	r2, r0
 800bf04:	f8cb 001c 	str.w	r0, [fp, #28]
 800bf08:	b920      	cbnz	r0, 800bf14 <_dtoa_r+0x34>
 800bf0a:	4ba7      	ldr	r3, [pc, #668]	@ (800c1a8 <_dtoa_r+0x2c8>)
 800bf0c:	21ef      	movs	r1, #239	@ 0xef
 800bf0e:	48a7      	ldr	r0, [pc, #668]	@ (800c1ac <_dtoa_r+0x2cc>)
 800bf10:	f001 fc68 	bl	800d7e4 <__assert_func>
 800bf14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bf18:	6007      	str	r7, [r0, #0]
 800bf1a:	60c7      	str	r7, [r0, #12]
 800bf1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bf20:	6819      	ldr	r1, [r3, #0]
 800bf22:	b159      	cbz	r1, 800bf3c <_dtoa_r+0x5c>
 800bf24:	685a      	ldr	r2, [r3, #4]
 800bf26:	604a      	str	r2, [r1, #4]
 800bf28:	2301      	movs	r3, #1
 800bf2a:	4093      	lsls	r3, r2
 800bf2c:	608b      	str	r3, [r1, #8]
 800bf2e:	4658      	mov	r0, fp
 800bf30:	f000 feda 	bl	800cce8 <_Bfree>
 800bf34:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	601a      	str	r2, [r3, #0]
 800bf3c:	1e2b      	subs	r3, r5, #0
 800bf3e:	bfb9      	ittee	lt
 800bf40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bf44:	9303      	strlt	r3, [sp, #12]
 800bf46:	2300      	movge	r3, #0
 800bf48:	6033      	strge	r3, [r6, #0]
 800bf4a:	9f03      	ldr	r7, [sp, #12]
 800bf4c:	4b98      	ldr	r3, [pc, #608]	@ (800c1b0 <_dtoa_r+0x2d0>)
 800bf4e:	bfbc      	itt	lt
 800bf50:	2201      	movlt	r2, #1
 800bf52:	6032      	strlt	r2, [r6, #0]
 800bf54:	43bb      	bics	r3, r7
 800bf56:	d112      	bne.n	800bf7e <_dtoa_r+0x9e>
 800bf58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bf5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bf5e:	6013      	str	r3, [r2, #0]
 800bf60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bf64:	4323      	orrs	r3, r4
 800bf66:	f000 854d 	beq.w	800ca04 <_dtoa_r+0xb24>
 800bf6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bf6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c1c4 <_dtoa_r+0x2e4>
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f000 854f 	beq.w	800ca14 <_dtoa_r+0xb34>
 800bf76:	f10a 0303 	add.w	r3, sl, #3
 800bf7a:	f000 bd49 	b.w	800ca10 <_dtoa_r+0xb30>
 800bf7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf82:	2200      	movs	r2, #0
 800bf84:	ec51 0b17 	vmov	r0, r1, d7
 800bf88:	2300      	movs	r3, #0
 800bf8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bf8e:	f7f4 fd9b 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf92:	4680      	mov	r8, r0
 800bf94:	b158      	cbz	r0, 800bfae <_dtoa_r+0xce>
 800bf96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bf98:	2301      	movs	r3, #1
 800bf9a:	6013      	str	r3, [r2, #0]
 800bf9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bf9e:	b113      	cbz	r3, 800bfa6 <_dtoa_r+0xc6>
 800bfa0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bfa2:	4b84      	ldr	r3, [pc, #528]	@ (800c1b4 <_dtoa_r+0x2d4>)
 800bfa4:	6013      	str	r3, [r2, #0]
 800bfa6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c1c8 <_dtoa_r+0x2e8>
 800bfaa:	f000 bd33 	b.w	800ca14 <_dtoa_r+0xb34>
 800bfae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bfb2:	aa16      	add	r2, sp, #88	@ 0x58
 800bfb4:	a917      	add	r1, sp, #92	@ 0x5c
 800bfb6:	4658      	mov	r0, fp
 800bfb8:	f001 f980 	bl	800d2bc <__d2b>
 800bfbc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bfc0:	4681      	mov	r9, r0
 800bfc2:	2e00      	cmp	r6, #0
 800bfc4:	d077      	beq.n	800c0b6 <_dtoa_r+0x1d6>
 800bfc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bfc8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bfcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfd4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bfd8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bfdc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	4b74      	ldr	r3, [pc, #464]	@ (800c1b8 <_dtoa_r+0x2d8>)
 800bfe6:	f7f4 f94f 	bl	8000288 <__aeabi_dsub>
 800bfea:	a369      	add	r3, pc, #420	@ (adr r3, 800c190 <_dtoa_r+0x2b0>)
 800bfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff0:	f7f4 fb02 	bl	80005f8 <__aeabi_dmul>
 800bff4:	a368      	add	r3, pc, #416	@ (adr r3, 800c198 <_dtoa_r+0x2b8>)
 800bff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffa:	f7f4 f947 	bl	800028c <__adddf3>
 800bffe:	4604      	mov	r4, r0
 800c000:	4630      	mov	r0, r6
 800c002:	460d      	mov	r5, r1
 800c004:	f7f4 fa8e 	bl	8000524 <__aeabi_i2d>
 800c008:	a365      	add	r3, pc, #404	@ (adr r3, 800c1a0 <_dtoa_r+0x2c0>)
 800c00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00e:	f7f4 faf3 	bl	80005f8 <__aeabi_dmul>
 800c012:	4602      	mov	r2, r0
 800c014:	460b      	mov	r3, r1
 800c016:	4620      	mov	r0, r4
 800c018:	4629      	mov	r1, r5
 800c01a:	f7f4 f937 	bl	800028c <__adddf3>
 800c01e:	4604      	mov	r4, r0
 800c020:	460d      	mov	r5, r1
 800c022:	f7f4 fd99 	bl	8000b58 <__aeabi_d2iz>
 800c026:	2200      	movs	r2, #0
 800c028:	4607      	mov	r7, r0
 800c02a:	2300      	movs	r3, #0
 800c02c:	4620      	mov	r0, r4
 800c02e:	4629      	mov	r1, r5
 800c030:	f7f4 fd54 	bl	8000adc <__aeabi_dcmplt>
 800c034:	b140      	cbz	r0, 800c048 <_dtoa_r+0x168>
 800c036:	4638      	mov	r0, r7
 800c038:	f7f4 fa74 	bl	8000524 <__aeabi_i2d>
 800c03c:	4622      	mov	r2, r4
 800c03e:	462b      	mov	r3, r5
 800c040:	f7f4 fd42 	bl	8000ac8 <__aeabi_dcmpeq>
 800c044:	b900      	cbnz	r0, 800c048 <_dtoa_r+0x168>
 800c046:	3f01      	subs	r7, #1
 800c048:	2f16      	cmp	r7, #22
 800c04a:	d851      	bhi.n	800c0f0 <_dtoa_r+0x210>
 800c04c:	4b5b      	ldr	r3, [pc, #364]	@ (800c1bc <_dtoa_r+0x2dc>)
 800c04e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c056:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c05a:	f7f4 fd3f 	bl	8000adc <__aeabi_dcmplt>
 800c05e:	2800      	cmp	r0, #0
 800c060:	d048      	beq.n	800c0f4 <_dtoa_r+0x214>
 800c062:	3f01      	subs	r7, #1
 800c064:	2300      	movs	r3, #0
 800c066:	9312      	str	r3, [sp, #72]	@ 0x48
 800c068:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c06a:	1b9b      	subs	r3, r3, r6
 800c06c:	1e5a      	subs	r2, r3, #1
 800c06e:	bf44      	itt	mi
 800c070:	f1c3 0801 	rsbmi	r8, r3, #1
 800c074:	2300      	movmi	r3, #0
 800c076:	9208      	str	r2, [sp, #32]
 800c078:	bf54      	ite	pl
 800c07a:	f04f 0800 	movpl.w	r8, #0
 800c07e:	9308      	strmi	r3, [sp, #32]
 800c080:	2f00      	cmp	r7, #0
 800c082:	db39      	blt.n	800c0f8 <_dtoa_r+0x218>
 800c084:	9b08      	ldr	r3, [sp, #32]
 800c086:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c088:	443b      	add	r3, r7
 800c08a:	9308      	str	r3, [sp, #32]
 800c08c:	2300      	movs	r3, #0
 800c08e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c092:	2b09      	cmp	r3, #9
 800c094:	d864      	bhi.n	800c160 <_dtoa_r+0x280>
 800c096:	2b05      	cmp	r3, #5
 800c098:	bfc4      	itt	gt
 800c09a:	3b04      	subgt	r3, #4
 800c09c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c09e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0a0:	f1a3 0302 	sub.w	r3, r3, #2
 800c0a4:	bfcc      	ite	gt
 800c0a6:	2400      	movgt	r4, #0
 800c0a8:	2401      	movle	r4, #1
 800c0aa:	2b03      	cmp	r3, #3
 800c0ac:	d863      	bhi.n	800c176 <_dtoa_r+0x296>
 800c0ae:	e8df f003 	tbb	[pc, r3]
 800c0b2:	372a      	.short	0x372a
 800c0b4:	5535      	.short	0x5535
 800c0b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c0ba:	441e      	add	r6, r3
 800c0bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c0c0:	2b20      	cmp	r3, #32
 800c0c2:	bfc1      	itttt	gt
 800c0c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c0c8:	409f      	lslgt	r7, r3
 800c0ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c0ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c0d2:	bfd6      	itet	le
 800c0d4:	f1c3 0320 	rsble	r3, r3, #32
 800c0d8:	ea47 0003 	orrgt.w	r0, r7, r3
 800c0dc:	fa04 f003 	lslle.w	r0, r4, r3
 800c0e0:	f7f4 fa10 	bl	8000504 <__aeabi_ui2d>
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c0ea:	3e01      	subs	r6, #1
 800c0ec:	9214      	str	r2, [sp, #80]	@ 0x50
 800c0ee:	e777      	b.n	800bfe0 <_dtoa_r+0x100>
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	e7b8      	b.n	800c066 <_dtoa_r+0x186>
 800c0f4:	9012      	str	r0, [sp, #72]	@ 0x48
 800c0f6:	e7b7      	b.n	800c068 <_dtoa_r+0x188>
 800c0f8:	427b      	negs	r3, r7
 800c0fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	eba8 0807 	sub.w	r8, r8, r7
 800c102:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c104:	e7c4      	b.n	800c090 <_dtoa_r+0x1b0>
 800c106:	2300      	movs	r3, #0
 800c108:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c10a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	dc35      	bgt.n	800c17c <_dtoa_r+0x29c>
 800c110:	2301      	movs	r3, #1
 800c112:	9300      	str	r3, [sp, #0]
 800c114:	9307      	str	r3, [sp, #28]
 800c116:	461a      	mov	r2, r3
 800c118:	920e      	str	r2, [sp, #56]	@ 0x38
 800c11a:	e00b      	b.n	800c134 <_dtoa_r+0x254>
 800c11c:	2301      	movs	r3, #1
 800c11e:	e7f3      	b.n	800c108 <_dtoa_r+0x228>
 800c120:	2300      	movs	r3, #0
 800c122:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c124:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c126:	18fb      	adds	r3, r7, r3
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	3301      	adds	r3, #1
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	9307      	str	r3, [sp, #28]
 800c130:	bfb8      	it	lt
 800c132:	2301      	movlt	r3, #1
 800c134:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c138:	2100      	movs	r1, #0
 800c13a:	2204      	movs	r2, #4
 800c13c:	f102 0514 	add.w	r5, r2, #20
 800c140:	429d      	cmp	r5, r3
 800c142:	d91f      	bls.n	800c184 <_dtoa_r+0x2a4>
 800c144:	6041      	str	r1, [r0, #4]
 800c146:	4658      	mov	r0, fp
 800c148:	f000 fd8e 	bl	800cc68 <_Balloc>
 800c14c:	4682      	mov	sl, r0
 800c14e:	2800      	cmp	r0, #0
 800c150:	d13c      	bne.n	800c1cc <_dtoa_r+0x2ec>
 800c152:	4b1b      	ldr	r3, [pc, #108]	@ (800c1c0 <_dtoa_r+0x2e0>)
 800c154:	4602      	mov	r2, r0
 800c156:	f240 11af 	movw	r1, #431	@ 0x1af
 800c15a:	e6d8      	b.n	800bf0e <_dtoa_r+0x2e>
 800c15c:	2301      	movs	r3, #1
 800c15e:	e7e0      	b.n	800c122 <_dtoa_r+0x242>
 800c160:	2401      	movs	r4, #1
 800c162:	2300      	movs	r3, #0
 800c164:	9309      	str	r3, [sp, #36]	@ 0x24
 800c166:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c168:	f04f 33ff 	mov.w	r3, #4294967295
 800c16c:	9300      	str	r3, [sp, #0]
 800c16e:	9307      	str	r3, [sp, #28]
 800c170:	2200      	movs	r2, #0
 800c172:	2312      	movs	r3, #18
 800c174:	e7d0      	b.n	800c118 <_dtoa_r+0x238>
 800c176:	2301      	movs	r3, #1
 800c178:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c17a:	e7f5      	b.n	800c168 <_dtoa_r+0x288>
 800c17c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c17e:	9300      	str	r3, [sp, #0]
 800c180:	9307      	str	r3, [sp, #28]
 800c182:	e7d7      	b.n	800c134 <_dtoa_r+0x254>
 800c184:	3101      	adds	r1, #1
 800c186:	0052      	lsls	r2, r2, #1
 800c188:	e7d8      	b.n	800c13c <_dtoa_r+0x25c>
 800c18a:	bf00      	nop
 800c18c:	f3af 8000 	nop.w
 800c190:	636f4361 	.word	0x636f4361
 800c194:	3fd287a7 	.word	0x3fd287a7
 800c198:	8b60c8b3 	.word	0x8b60c8b3
 800c19c:	3fc68a28 	.word	0x3fc68a28
 800c1a0:	509f79fb 	.word	0x509f79fb
 800c1a4:	3fd34413 	.word	0x3fd34413
 800c1a8:	0800e851 	.word	0x0800e851
 800c1ac:	0800e868 	.word	0x0800e868
 800c1b0:	7ff00000 	.word	0x7ff00000
 800c1b4:	0800e821 	.word	0x0800e821
 800c1b8:	3ff80000 	.word	0x3ff80000
 800c1bc:	0800e960 	.word	0x0800e960
 800c1c0:	0800e8c0 	.word	0x0800e8c0
 800c1c4:	0800e84d 	.word	0x0800e84d
 800c1c8:	0800e820 	.word	0x0800e820
 800c1cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c1d0:	6018      	str	r0, [r3, #0]
 800c1d2:	9b07      	ldr	r3, [sp, #28]
 800c1d4:	2b0e      	cmp	r3, #14
 800c1d6:	f200 80a4 	bhi.w	800c322 <_dtoa_r+0x442>
 800c1da:	2c00      	cmp	r4, #0
 800c1dc:	f000 80a1 	beq.w	800c322 <_dtoa_r+0x442>
 800c1e0:	2f00      	cmp	r7, #0
 800c1e2:	dd33      	ble.n	800c24c <_dtoa_r+0x36c>
 800c1e4:	4bad      	ldr	r3, [pc, #692]	@ (800c49c <_dtoa_r+0x5bc>)
 800c1e6:	f007 020f 	and.w	r2, r7, #15
 800c1ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1ee:	ed93 7b00 	vldr	d7, [r3]
 800c1f2:	05f8      	lsls	r0, r7, #23
 800c1f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c1f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c1fc:	d516      	bpl.n	800c22c <_dtoa_r+0x34c>
 800c1fe:	4ba8      	ldr	r3, [pc, #672]	@ (800c4a0 <_dtoa_r+0x5c0>)
 800c200:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c204:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c208:	f7f4 fb20 	bl	800084c <__aeabi_ddiv>
 800c20c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c210:	f004 040f 	and.w	r4, r4, #15
 800c214:	2603      	movs	r6, #3
 800c216:	4da2      	ldr	r5, [pc, #648]	@ (800c4a0 <_dtoa_r+0x5c0>)
 800c218:	b954      	cbnz	r4, 800c230 <_dtoa_r+0x350>
 800c21a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c21e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c222:	f7f4 fb13 	bl	800084c <__aeabi_ddiv>
 800c226:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c22a:	e028      	b.n	800c27e <_dtoa_r+0x39e>
 800c22c:	2602      	movs	r6, #2
 800c22e:	e7f2      	b.n	800c216 <_dtoa_r+0x336>
 800c230:	07e1      	lsls	r1, r4, #31
 800c232:	d508      	bpl.n	800c246 <_dtoa_r+0x366>
 800c234:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c238:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c23c:	f7f4 f9dc 	bl	80005f8 <__aeabi_dmul>
 800c240:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c244:	3601      	adds	r6, #1
 800c246:	1064      	asrs	r4, r4, #1
 800c248:	3508      	adds	r5, #8
 800c24a:	e7e5      	b.n	800c218 <_dtoa_r+0x338>
 800c24c:	f000 80d2 	beq.w	800c3f4 <_dtoa_r+0x514>
 800c250:	427c      	negs	r4, r7
 800c252:	4b92      	ldr	r3, [pc, #584]	@ (800c49c <_dtoa_r+0x5bc>)
 800c254:	4d92      	ldr	r5, [pc, #584]	@ (800c4a0 <_dtoa_r+0x5c0>)
 800c256:	f004 020f 	and.w	r2, r4, #15
 800c25a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c262:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c266:	f7f4 f9c7 	bl	80005f8 <__aeabi_dmul>
 800c26a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c26e:	1124      	asrs	r4, r4, #4
 800c270:	2300      	movs	r3, #0
 800c272:	2602      	movs	r6, #2
 800c274:	2c00      	cmp	r4, #0
 800c276:	f040 80b2 	bne.w	800c3de <_dtoa_r+0x4fe>
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d1d3      	bne.n	800c226 <_dtoa_r+0x346>
 800c27e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c280:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c284:	2b00      	cmp	r3, #0
 800c286:	f000 80b7 	beq.w	800c3f8 <_dtoa_r+0x518>
 800c28a:	4b86      	ldr	r3, [pc, #536]	@ (800c4a4 <_dtoa_r+0x5c4>)
 800c28c:	2200      	movs	r2, #0
 800c28e:	4620      	mov	r0, r4
 800c290:	4629      	mov	r1, r5
 800c292:	f7f4 fc23 	bl	8000adc <__aeabi_dcmplt>
 800c296:	2800      	cmp	r0, #0
 800c298:	f000 80ae 	beq.w	800c3f8 <_dtoa_r+0x518>
 800c29c:	9b07      	ldr	r3, [sp, #28]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	f000 80aa 	beq.w	800c3f8 <_dtoa_r+0x518>
 800c2a4:	9b00      	ldr	r3, [sp, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	dd37      	ble.n	800c31a <_dtoa_r+0x43a>
 800c2aa:	1e7b      	subs	r3, r7, #1
 800c2ac:	9304      	str	r3, [sp, #16]
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	4b7d      	ldr	r3, [pc, #500]	@ (800c4a8 <_dtoa_r+0x5c8>)
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	4629      	mov	r1, r5
 800c2b6:	f7f4 f99f 	bl	80005f8 <__aeabi_dmul>
 800c2ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2be:	9c00      	ldr	r4, [sp, #0]
 800c2c0:	3601      	adds	r6, #1
 800c2c2:	4630      	mov	r0, r6
 800c2c4:	f7f4 f92e 	bl	8000524 <__aeabi_i2d>
 800c2c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2cc:	f7f4 f994 	bl	80005f8 <__aeabi_dmul>
 800c2d0:	4b76      	ldr	r3, [pc, #472]	@ (800c4ac <_dtoa_r+0x5cc>)
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	f7f3 ffda 	bl	800028c <__adddf3>
 800c2d8:	4605      	mov	r5, r0
 800c2da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c2de:	2c00      	cmp	r4, #0
 800c2e0:	f040 808d 	bne.w	800c3fe <_dtoa_r+0x51e>
 800c2e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2e8:	4b71      	ldr	r3, [pc, #452]	@ (800c4b0 <_dtoa_r+0x5d0>)
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f7f3 ffcc 	bl	8000288 <__aeabi_dsub>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	460b      	mov	r3, r1
 800c2f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c2f8:	462a      	mov	r2, r5
 800c2fa:	4633      	mov	r3, r6
 800c2fc:	f7f4 fc0c 	bl	8000b18 <__aeabi_dcmpgt>
 800c300:	2800      	cmp	r0, #0
 800c302:	f040 828b 	bne.w	800c81c <_dtoa_r+0x93c>
 800c306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c30a:	462a      	mov	r2, r5
 800c30c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c310:	f7f4 fbe4 	bl	8000adc <__aeabi_dcmplt>
 800c314:	2800      	cmp	r0, #0
 800c316:	f040 8128 	bne.w	800c56a <_dtoa_r+0x68a>
 800c31a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c31e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c322:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c324:	2b00      	cmp	r3, #0
 800c326:	f2c0 815a 	blt.w	800c5de <_dtoa_r+0x6fe>
 800c32a:	2f0e      	cmp	r7, #14
 800c32c:	f300 8157 	bgt.w	800c5de <_dtoa_r+0x6fe>
 800c330:	4b5a      	ldr	r3, [pc, #360]	@ (800c49c <_dtoa_r+0x5bc>)
 800c332:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c336:	ed93 7b00 	vldr	d7, [r3]
 800c33a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	ed8d 7b00 	vstr	d7, [sp]
 800c342:	da03      	bge.n	800c34c <_dtoa_r+0x46c>
 800c344:	9b07      	ldr	r3, [sp, #28]
 800c346:	2b00      	cmp	r3, #0
 800c348:	f340 8101 	ble.w	800c54e <_dtoa_r+0x66e>
 800c34c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c350:	4656      	mov	r6, sl
 800c352:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c356:	4620      	mov	r0, r4
 800c358:	4629      	mov	r1, r5
 800c35a:	f7f4 fa77 	bl	800084c <__aeabi_ddiv>
 800c35e:	f7f4 fbfb 	bl	8000b58 <__aeabi_d2iz>
 800c362:	4680      	mov	r8, r0
 800c364:	f7f4 f8de 	bl	8000524 <__aeabi_i2d>
 800c368:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c36c:	f7f4 f944 	bl	80005f8 <__aeabi_dmul>
 800c370:	4602      	mov	r2, r0
 800c372:	460b      	mov	r3, r1
 800c374:	4620      	mov	r0, r4
 800c376:	4629      	mov	r1, r5
 800c378:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c37c:	f7f3 ff84 	bl	8000288 <__aeabi_dsub>
 800c380:	f806 4b01 	strb.w	r4, [r6], #1
 800c384:	9d07      	ldr	r5, [sp, #28]
 800c386:	eba6 040a 	sub.w	r4, r6, sl
 800c38a:	42a5      	cmp	r5, r4
 800c38c:	4602      	mov	r2, r0
 800c38e:	460b      	mov	r3, r1
 800c390:	f040 8117 	bne.w	800c5c2 <_dtoa_r+0x6e2>
 800c394:	f7f3 ff7a 	bl	800028c <__adddf3>
 800c398:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c39c:	4604      	mov	r4, r0
 800c39e:	460d      	mov	r5, r1
 800c3a0:	f7f4 fbba 	bl	8000b18 <__aeabi_dcmpgt>
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	f040 80f9 	bne.w	800c59c <_dtoa_r+0x6bc>
 800c3aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	4629      	mov	r1, r5
 800c3b2:	f7f4 fb89 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3b6:	b118      	cbz	r0, 800c3c0 <_dtoa_r+0x4e0>
 800c3b8:	f018 0f01 	tst.w	r8, #1
 800c3bc:	f040 80ee 	bne.w	800c59c <_dtoa_r+0x6bc>
 800c3c0:	4649      	mov	r1, r9
 800c3c2:	4658      	mov	r0, fp
 800c3c4:	f000 fc90 	bl	800cce8 <_Bfree>
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	7033      	strb	r3, [r6, #0]
 800c3cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c3ce:	3701      	adds	r7, #1
 800c3d0:	601f      	str	r7, [r3, #0]
 800c3d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	f000 831d 	beq.w	800ca14 <_dtoa_r+0xb34>
 800c3da:	601e      	str	r6, [r3, #0]
 800c3dc:	e31a      	b.n	800ca14 <_dtoa_r+0xb34>
 800c3de:	07e2      	lsls	r2, r4, #31
 800c3e0:	d505      	bpl.n	800c3ee <_dtoa_r+0x50e>
 800c3e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c3e6:	f7f4 f907 	bl	80005f8 <__aeabi_dmul>
 800c3ea:	3601      	adds	r6, #1
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	1064      	asrs	r4, r4, #1
 800c3f0:	3508      	adds	r5, #8
 800c3f2:	e73f      	b.n	800c274 <_dtoa_r+0x394>
 800c3f4:	2602      	movs	r6, #2
 800c3f6:	e742      	b.n	800c27e <_dtoa_r+0x39e>
 800c3f8:	9c07      	ldr	r4, [sp, #28]
 800c3fa:	9704      	str	r7, [sp, #16]
 800c3fc:	e761      	b.n	800c2c2 <_dtoa_r+0x3e2>
 800c3fe:	4b27      	ldr	r3, [pc, #156]	@ (800c49c <_dtoa_r+0x5bc>)
 800c400:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c402:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c406:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c40a:	4454      	add	r4, sl
 800c40c:	2900      	cmp	r1, #0
 800c40e:	d053      	beq.n	800c4b8 <_dtoa_r+0x5d8>
 800c410:	4928      	ldr	r1, [pc, #160]	@ (800c4b4 <_dtoa_r+0x5d4>)
 800c412:	2000      	movs	r0, #0
 800c414:	f7f4 fa1a 	bl	800084c <__aeabi_ddiv>
 800c418:	4633      	mov	r3, r6
 800c41a:	462a      	mov	r2, r5
 800c41c:	f7f3 ff34 	bl	8000288 <__aeabi_dsub>
 800c420:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c424:	4656      	mov	r6, sl
 800c426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c42a:	f7f4 fb95 	bl	8000b58 <__aeabi_d2iz>
 800c42e:	4605      	mov	r5, r0
 800c430:	f7f4 f878 	bl	8000524 <__aeabi_i2d>
 800c434:	4602      	mov	r2, r0
 800c436:	460b      	mov	r3, r1
 800c438:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c43c:	f7f3 ff24 	bl	8000288 <__aeabi_dsub>
 800c440:	3530      	adds	r5, #48	@ 0x30
 800c442:	4602      	mov	r2, r0
 800c444:	460b      	mov	r3, r1
 800c446:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c44a:	f806 5b01 	strb.w	r5, [r6], #1
 800c44e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c452:	f7f4 fb43 	bl	8000adc <__aeabi_dcmplt>
 800c456:	2800      	cmp	r0, #0
 800c458:	d171      	bne.n	800c53e <_dtoa_r+0x65e>
 800c45a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c45e:	4911      	ldr	r1, [pc, #68]	@ (800c4a4 <_dtoa_r+0x5c4>)
 800c460:	2000      	movs	r0, #0
 800c462:	f7f3 ff11 	bl	8000288 <__aeabi_dsub>
 800c466:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c46a:	f7f4 fb37 	bl	8000adc <__aeabi_dcmplt>
 800c46e:	2800      	cmp	r0, #0
 800c470:	f040 8095 	bne.w	800c59e <_dtoa_r+0x6be>
 800c474:	42a6      	cmp	r6, r4
 800c476:	f43f af50 	beq.w	800c31a <_dtoa_r+0x43a>
 800c47a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c47e:	4b0a      	ldr	r3, [pc, #40]	@ (800c4a8 <_dtoa_r+0x5c8>)
 800c480:	2200      	movs	r2, #0
 800c482:	f7f4 f8b9 	bl	80005f8 <__aeabi_dmul>
 800c486:	4b08      	ldr	r3, [pc, #32]	@ (800c4a8 <_dtoa_r+0x5c8>)
 800c488:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c48c:	2200      	movs	r2, #0
 800c48e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c492:	f7f4 f8b1 	bl	80005f8 <__aeabi_dmul>
 800c496:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c49a:	e7c4      	b.n	800c426 <_dtoa_r+0x546>
 800c49c:	0800e960 	.word	0x0800e960
 800c4a0:	0800e938 	.word	0x0800e938
 800c4a4:	3ff00000 	.word	0x3ff00000
 800c4a8:	40240000 	.word	0x40240000
 800c4ac:	401c0000 	.word	0x401c0000
 800c4b0:	40140000 	.word	0x40140000
 800c4b4:	3fe00000 	.word	0x3fe00000
 800c4b8:	4631      	mov	r1, r6
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	f7f4 f89c 	bl	80005f8 <__aeabi_dmul>
 800c4c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c4c4:	9415      	str	r4, [sp, #84]	@ 0x54
 800c4c6:	4656      	mov	r6, sl
 800c4c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4cc:	f7f4 fb44 	bl	8000b58 <__aeabi_d2iz>
 800c4d0:	4605      	mov	r5, r0
 800c4d2:	f7f4 f827 	bl	8000524 <__aeabi_i2d>
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	460b      	mov	r3, r1
 800c4da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4de:	f7f3 fed3 	bl	8000288 <__aeabi_dsub>
 800c4e2:	3530      	adds	r5, #48	@ 0x30
 800c4e4:	f806 5b01 	strb.w	r5, [r6], #1
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	42a6      	cmp	r6, r4
 800c4ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c4f2:	f04f 0200 	mov.w	r2, #0
 800c4f6:	d124      	bne.n	800c542 <_dtoa_r+0x662>
 800c4f8:	4bac      	ldr	r3, [pc, #688]	@ (800c7ac <_dtoa_r+0x8cc>)
 800c4fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c4fe:	f7f3 fec5 	bl	800028c <__adddf3>
 800c502:	4602      	mov	r2, r0
 800c504:	460b      	mov	r3, r1
 800c506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c50a:	f7f4 fb05 	bl	8000b18 <__aeabi_dcmpgt>
 800c50e:	2800      	cmp	r0, #0
 800c510:	d145      	bne.n	800c59e <_dtoa_r+0x6be>
 800c512:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c516:	49a5      	ldr	r1, [pc, #660]	@ (800c7ac <_dtoa_r+0x8cc>)
 800c518:	2000      	movs	r0, #0
 800c51a:	f7f3 feb5 	bl	8000288 <__aeabi_dsub>
 800c51e:	4602      	mov	r2, r0
 800c520:	460b      	mov	r3, r1
 800c522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c526:	f7f4 fad9 	bl	8000adc <__aeabi_dcmplt>
 800c52a:	2800      	cmp	r0, #0
 800c52c:	f43f aef5 	beq.w	800c31a <_dtoa_r+0x43a>
 800c530:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c532:	1e73      	subs	r3, r6, #1
 800c534:	9315      	str	r3, [sp, #84]	@ 0x54
 800c536:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c53a:	2b30      	cmp	r3, #48	@ 0x30
 800c53c:	d0f8      	beq.n	800c530 <_dtoa_r+0x650>
 800c53e:	9f04      	ldr	r7, [sp, #16]
 800c540:	e73e      	b.n	800c3c0 <_dtoa_r+0x4e0>
 800c542:	4b9b      	ldr	r3, [pc, #620]	@ (800c7b0 <_dtoa_r+0x8d0>)
 800c544:	f7f4 f858 	bl	80005f8 <__aeabi_dmul>
 800c548:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c54c:	e7bc      	b.n	800c4c8 <_dtoa_r+0x5e8>
 800c54e:	d10c      	bne.n	800c56a <_dtoa_r+0x68a>
 800c550:	4b98      	ldr	r3, [pc, #608]	@ (800c7b4 <_dtoa_r+0x8d4>)
 800c552:	2200      	movs	r2, #0
 800c554:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c558:	f7f4 f84e 	bl	80005f8 <__aeabi_dmul>
 800c55c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c560:	f7f4 fad0 	bl	8000b04 <__aeabi_dcmpge>
 800c564:	2800      	cmp	r0, #0
 800c566:	f000 8157 	beq.w	800c818 <_dtoa_r+0x938>
 800c56a:	2400      	movs	r4, #0
 800c56c:	4625      	mov	r5, r4
 800c56e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c570:	43db      	mvns	r3, r3
 800c572:	9304      	str	r3, [sp, #16]
 800c574:	4656      	mov	r6, sl
 800c576:	2700      	movs	r7, #0
 800c578:	4621      	mov	r1, r4
 800c57a:	4658      	mov	r0, fp
 800c57c:	f000 fbb4 	bl	800cce8 <_Bfree>
 800c580:	2d00      	cmp	r5, #0
 800c582:	d0dc      	beq.n	800c53e <_dtoa_r+0x65e>
 800c584:	b12f      	cbz	r7, 800c592 <_dtoa_r+0x6b2>
 800c586:	42af      	cmp	r7, r5
 800c588:	d003      	beq.n	800c592 <_dtoa_r+0x6b2>
 800c58a:	4639      	mov	r1, r7
 800c58c:	4658      	mov	r0, fp
 800c58e:	f000 fbab 	bl	800cce8 <_Bfree>
 800c592:	4629      	mov	r1, r5
 800c594:	4658      	mov	r0, fp
 800c596:	f000 fba7 	bl	800cce8 <_Bfree>
 800c59a:	e7d0      	b.n	800c53e <_dtoa_r+0x65e>
 800c59c:	9704      	str	r7, [sp, #16]
 800c59e:	4633      	mov	r3, r6
 800c5a0:	461e      	mov	r6, r3
 800c5a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5a6:	2a39      	cmp	r2, #57	@ 0x39
 800c5a8:	d107      	bne.n	800c5ba <_dtoa_r+0x6da>
 800c5aa:	459a      	cmp	sl, r3
 800c5ac:	d1f8      	bne.n	800c5a0 <_dtoa_r+0x6c0>
 800c5ae:	9a04      	ldr	r2, [sp, #16]
 800c5b0:	3201      	adds	r2, #1
 800c5b2:	9204      	str	r2, [sp, #16]
 800c5b4:	2230      	movs	r2, #48	@ 0x30
 800c5b6:	f88a 2000 	strb.w	r2, [sl]
 800c5ba:	781a      	ldrb	r2, [r3, #0]
 800c5bc:	3201      	adds	r2, #1
 800c5be:	701a      	strb	r2, [r3, #0]
 800c5c0:	e7bd      	b.n	800c53e <_dtoa_r+0x65e>
 800c5c2:	4b7b      	ldr	r3, [pc, #492]	@ (800c7b0 <_dtoa_r+0x8d0>)
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f7f4 f817 	bl	80005f8 <__aeabi_dmul>
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	4604      	mov	r4, r0
 800c5d0:	460d      	mov	r5, r1
 800c5d2:	f7f4 fa79 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	f43f aebb 	beq.w	800c352 <_dtoa_r+0x472>
 800c5dc:	e6f0      	b.n	800c3c0 <_dtoa_r+0x4e0>
 800c5de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c5e0:	2a00      	cmp	r2, #0
 800c5e2:	f000 80db 	beq.w	800c79c <_dtoa_r+0x8bc>
 800c5e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5e8:	2a01      	cmp	r2, #1
 800c5ea:	f300 80bf 	bgt.w	800c76c <_dtoa_r+0x88c>
 800c5ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c5f0:	2a00      	cmp	r2, #0
 800c5f2:	f000 80b7 	beq.w	800c764 <_dtoa_r+0x884>
 800c5f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c5fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c5fc:	4646      	mov	r6, r8
 800c5fe:	9a08      	ldr	r2, [sp, #32]
 800c600:	2101      	movs	r1, #1
 800c602:	441a      	add	r2, r3
 800c604:	4658      	mov	r0, fp
 800c606:	4498      	add	r8, r3
 800c608:	9208      	str	r2, [sp, #32]
 800c60a:	f000 fc21 	bl	800ce50 <__i2b>
 800c60e:	4605      	mov	r5, r0
 800c610:	b15e      	cbz	r6, 800c62a <_dtoa_r+0x74a>
 800c612:	9b08      	ldr	r3, [sp, #32]
 800c614:	2b00      	cmp	r3, #0
 800c616:	dd08      	ble.n	800c62a <_dtoa_r+0x74a>
 800c618:	42b3      	cmp	r3, r6
 800c61a:	9a08      	ldr	r2, [sp, #32]
 800c61c:	bfa8      	it	ge
 800c61e:	4633      	movge	r3, r6
 800c620:	eba8 0803 	sub.w	r8, r8, r3
 800c624:	1af6      	subs	r6, r6, r3
 800c626:	1ad3      	subs	r3, r2, r3
 800c628:	9308      	str	r3, [sp, #32]
 800c62a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c62c:	b1f3      	cbz	r3, 800c66c <_dtoa_r+0x78c>
 800c62e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c630:	2b00      	cmp	r3, #0
 800c632:	f000 80b7 	beq.w	800c7a4 <_dtoa_r+0x8c4>
 800c636:	b18c      	cbz	r4, 800c65c <_dtoa_r+0x77c>
 800c638:	4629      	mov	r1, r5
 800c63a:	4622      	mov	r2, r4
 800c63c:	4658      	mov	r0, fp
 800c63e:	f000 fcc7 	bl	800cfd0 <__pow5mult>
 800c642:	464a      	mov	r2, r9
 800c644:	4601      	mov	r1, r0
 800c646:	4605      	mov	r5, r0
 800c648:	4658      	mov	r0, fp
 800c64a:	f000 fc17 	bl	800ce7c <__multiply>
 800c64e:	4649      	mov	r1, r9
 800c650:	9004      	str	r0, [sp, #16]
 800c652:	4658      	mov	r0, fp
 800c654:	f000 fb48 	bl	800cce8 <_Bfree>
 800c658:	9b04      	ldr	r3, [sp, #16]
 800c65a:	4699      	mov	r9, r3
 800c65c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c65e:	1b1a      	subs	r2, r3, r4
 800c660:	d004      	beq.n	800c66c <_dtoa_r+0x78c>
 800c662:	4649      	mov	r1, r9
 800c664:	4658      	mov	r0, fp
 800c666:	f000 fcb3 	bl	800cfd0 <__pow5mult>
 800c66a:	4681      	mov	r9, r0
 800c66c:	2101      	movs	r1, #1
 800c66e:	4658      	mov	r0, fp
 800c670:	f000 fbee 	bl	800ce50 <__i2b>
 800c674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c676:	4604      	mov	r4, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	f000 81cf 	beq.w	800ca1c <_dtoa_r+0xb3c>
 800c67e:	461a      	mov	r2, r3
 800c680:	4601      	mov	r1, r0
 800c682:	4658      	mov	r0, fp
 800c684:	f000 fca4 	bl	800cfd0 <__pow5mult>
 800c688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c68a:	2b01      	cmp	r3, #1
 800c68c:	4604      	mov	r4, r0
 800c68e:	f300 8095 	bgt.w	800c7bc <_dtoa_r+0x8dc>
 800c692:	9b02      	ldr	r3, [sp, #8]
 800c694:	2b00      	cmp	r3, #0
 800c696:	f040 8087 	bne.w	800c7a8 <_dtoa_r+0x8c8>
 800c69a:	9b03      	ldr	r3, [sp, #12]
 800c69c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	f040 8089 	bne.w	800c7b8 <_dtoa_r+0x8d8>
 800c6a6:	9b03      	ldr	r3, [sp, #12]
 800c6a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c6ac:	0d1b      	lsrs	r3, r3, #20
 800c6ae:	051b      	lsls	r3, r3, #20
 800c6b0:	b12b      	cbz	r3, 800c6be <_dtoa_r+0x7de>
 800c6b2:	9b08      	ldr	r3, [sp, #32]
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	9308      	str	r3, [sp, #32]
 800c6b8:	f108 0801 	add.w	r8, r8, #1
 800c6bc:	2301      	movs	r3, #1
 800c6be:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	f000 81b0 	beq.w	800ca28 <_dtoa_r+0xb48>
 800c6c8:	6923      	ldr	r3, [r4, #16]
 800c6ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c6ce:	6918      	ldr	r0, [r3, #16]
 800c6d0:	f000 fb72 	bl	800cdb8 <__hi0bits>
 800c6d4:	f1c0 0020 	rsb	r0, r0, #32
 800c6d8:	9b08      	ldr	r3, [sp, #32]
 800c6da:	4418      	add	r0, r3
 800c6dc:	f010 001f 	ands.w	r0, r0, #31
 800c6e0:	d077      	beq.n	800c7d2 <_dtoa_r+0x8f2>
 800c6e2:	f1c0 0320 	rsb	r3, r0, #32
 800c6e6:	2b04      	cmp	r3, #4
 800c6e8:	dd6b      	ble.n	800c7c2 <_dtoa_r+0x8e2>
 800c6ea:	9b08      	ldr	r3, [sp, #32]
 800c6ec:	f1c0 001c 	rsb	r0, r0, #28
 800c6f0:	4403      	add	r3, r0
 800c6f2:	4480      	add	r8, r0
 800c6f4:	4406      	add	r6, r0
 800c6f6:	9308      	str	r3, [sp, #32]
 800c6f8:	f1b8 0f00 	cmp.w	r8, #0
 800c6fc:	dd05      	ble.n	800c70a <_dtoa_r+0x82a>
 800c6fe:	4649      	mov	r1, r9
 800c700:	4642      	mov	r2, r8
 800c702:	4658      	mov	r0, fp
 800c704:	f000 fcbe 	bl	800d084 <__lshift>
 800c708:	4681      	mov	r9, r0
 800c70a:	9b08      	ldr	r3, [sp, #32]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	dd05      	ble.n	800c71c <_dtoa_r+0x83c>
 800c710:	4621      	mov	r1, r4
 800c712:	461a      	mov	r2, r3
 800c714:	4658      	mov	r0, fp
 800c716:	f000 fcb5 	bl	800d084 <__lshift>
 800c71a:	4604      	mov	r4, r0
 800c71c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d059      	beq.n	800c7d6 <_dtoa_r+0x8f6>
 800c722:	4621      	mov	r1, r4
 800c724:	4648      	mov	r0, r9
 800c726:	f000 fd19 	bl	800d15c <__mcmp>
 800c72a:	2800      	cmp	r0, #0
 800c72c:	da53      	bge.n	800c7d6 <_dtoa_r+0x8f6>
 800c72e:	1e7b      	subs	r3, r7, #1
 800c730:	9304      	str	r3, [sp, #16]
 800c732:	4649      	mov	r1, r9
 800c734:	2300      	movs	r3, #0
 800c736:	220a      	movs	r2, #10
 800c738:	4658      	mov	r0, fp
 800c73a:	f000 faf7 	bl	800cd2c <__multadd>
 800c73e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c740:	4681      	mov	r9, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	f000 8172 	beq.w	800ca2c <_dtoa_r+0xb4c>
 800c748:	2300      	movs	r3, #0
 800c74a:	4629      	mov	r1, r5
 800c74c:	220a      	movs	r2, #10
 800c74e:	4658      	mov	r0, fp
 800c750:	f000 faec 	bl	800cd2c <__multadd>
 800c754:	9b00      	ldr	r3, [sp, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	4605      	mov	r5, r0
 800c75a:	dc67      	bgt.n	800c82c <_dtoa_r+0x94c>
 800c75c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c75e:	2b02      	cmp	r3, #2
 800c760:	dc41      	bgt.n	800c7e6 <_dtoa_r+0x906>
 800c762:	e063      	b.n	800c82c <_dtoa_r+0x94c>
 800c764:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c766:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c76a:	e746      	b.n	800c5fa <_dtoa_r+0x71a>
 800c76c:	9b07      	ldr	r3, [sp, #28]
 800c76e:	1e5c      	subs	r4, r3, #1
 800c770:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c772:	42a3      	cmp	r3, r4
 800c774:	bfbf      	itttt	lt
 800c776:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c778:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c77a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c77c:	1ae3      	sublt	r3, r4, r3
 800c77e:	bfb4      	ite	lt
 800c780:	18d2      	addlt	r2, r2, r3
 800c782:	1b1c      	subge	r4, r3, r4
 800c784:	9b07      	ldr	r3, [sp, #28]
 800c786:	bfbc      	itt	lt
 800c788:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c78a:	2400      	movlt	r4, #0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	bfb5      	itete	lt
 800c790:	eba8 0603 	sublt.w	r6, r8, r3
 800c794:	9b07      	ldrge	r3, [sp, #28]
 800c796:	2300      	movlt	r3, #0
 800c798:	4646      	movge	r6, r8
 800c79a:	e730      	b.n	800c5fe <_dtoa_r+0x71e>
 800c79c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c79e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c7a0:	4646      	mov	r6, r8
 800c7a2:	e735      	b.n	800c610 <_dtoa_r+0x730>
 800c7a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c7a6:	e75c      	b.n	800c662 <_dtoa_r+0x782>
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	e788      	b.n	800c6be <_dtoa_r+0x7de>
 800c7ac:	3fe00000 	.word	0x3fe00000
 800c7b0:	40240000 	.word	0x40240000
 800c7b4:	40140000 	.word	0x40140000
 800c7b8:	9b02      	ldr	r3, [sp, #8]
 800c7ba:	e780      	b.n	800c6be <_dtoa_r+0x7de>
 800c7bc:	2300      	movs	r3, #0
 800c7be:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7c0:	e782      	b.n	800c6c8 <_dtoa_r+0x7e8>
 800c7c2:	d099      	beq.n	800c6f8 <_dtoa_r+0x818>
 800c7c4:	9a08      	ldr	r2, [sp, #32]
 800c7c6:	331c      	adds	r3, #28
 800c7c8:	441a      	add	r2, r3
 800c7ca:	4498      	add	r8, r3
 800c7cc:	441e      	add	r6, r3
 800c7ce:	9208      	str	r2, [sp, #32]
 800c7d0:	e792      	b.n	800c6f8 <_dtoa_r+0x818>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	e7f6      	b.n	800c7c4 <_dtoa_r+0x8e4>
 800c7d6:	9b07      	ldr	r3, [sp, #28]
 800c7d8:	9704      	str	r7, [sp, #16]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	dc20      	bgt.n	800c820 <_dtoa_r+0x940>
 800c7de:	9300      	str	r3, [sp, #0]
 800c7e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7e2:	2b02      	cmp	r3, #2
 800c7e4:	dd1e      	ble.n	800c824 <_dtoa_r+0x944>
 800c7e6:	9b00      	ldr	r3, [sp, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	f47f aec0 	bne.w	800c56e <_dtoa_r+0x68e>
 800c7ee:	4621      	mov	r1, r4
 800c7f0:	2205      	movs	r2, #5
 800c7f2:	4658      	mov	r0, fp
 800c7f4:	f000 fa9a 	bl	800cd2c <__multadd>
 800c7f8:	4601      	mov	r1, r0
 800c7fa:	4604      	mov	r4, r0
 800c7fc:	4648      	mov	r0, r9
 800c7fe:	f000 fcad 	bl	800d15c <__mcmp>
 800c802:	2800      	cmp	r0, #0
 800c804:	f77f aeb3 	ble.w	800c56e <_dtoa_r+0x68e>
 800c808:	4656      	mov	r6, sl
 800c80a:	2331      	movs	r3, #49	@ 0x31
 800c80c:	f806 3b01 	strb.w	r3, [r6], #1
 800c810:	9b04      	ldr	r3, [sp, #16]
 800c812:	3301      	adds	r3, #1
 800c814:	9304      	str	r3, [sp, #16]
 800c816:	e6ae      	b.n	800c576 <_dtoa_r+0x696>
 800c818:	9c07      	ldr	r4, [sp, #28]
 800c81a:	9704      	str	r7, [sp, #16]
 800c81c:	4625      	mov	r5, r4
 800c81e:	e7f3      	b.n	800c808 <_dtoa_r+0x928>
 800c820:	9b07      	ldr	r3, [sp, #28]
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c826:	2b00      	cmp	r3, #0
 800c828:	f000 8104 	beq.w	800ca34 <_dtoa_r+0xb54>
 800c82c:	2e00      	cmp	r6, #0
 800c82e:	dd05      	ble.n	800c83c <_dtoa_r+0x95c>
 800c830:	4629      	mov	r1, r5
 800c832:	4632      	mov	r2, r6
 800c834:	4658      	mov	r0, fp
 800c836:	f000 fc25 	bl	800d084 <__lshift>
 800c83a:	4605      	mov	r5, r0
 800c83c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d05a      	beq.n	800c8f8 <_dtoa_r+0xa18>
 800c842:	6869      	ldr	r1, [r5, #4]
 800c844:	4658      	mov	r0, fp
 800c846:	f000 fa0f 	bl	800cc68 <_Balloc>
 800c84a:	4606      	mov	r6, r0
 800c84c:	b928      	cbnz	r0, 800c85a <_dtoa_r+0x97a>
 800c84e:	4b84      	ldr	r3, [pc, #528]	@ (800ca60 <_dtoa_r+0xb80>)
 800c850:	4602      	mov	r2, r0
 800c852:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c856:	f7ff bb5a 	b.w	800bf0e <_dtoa_r+0x2e>
 800c85a:	692a      	ldr	r2, [r5, #16]
 800c85c:	3202      	adds	r2, #2
 800c85e:	0092      	lsls	r2, r2, #2
 800c860:	f105 010c 	add.w	r1, r5, #12
 800c864:	300c      	adds	r0, #12
 800c866:	f000 ffaf 	bl	800d7c8 <memcpy>
 800c86a:	2201      	movs	r2, #1
 800c86c:	4631      	mov	r1, r6
 800c86e:	4658      	mov	r0, fp
 800c870:	f000 fc08 	bl	800d084 <__lshift>
 800c874:	f10a 0301 	add.w	r3, sl, #1
 800c878:	9307      	str	r3, [sp, #28]
 800c87a:	9b00      	ldr	r3, [sp, #0]
 800c87c:	4453      	add	r3, sl
 800c87e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c880:	9b02      	ldr	r3, [sp, #8]
 800c882:	f003 0301 	and.w	r3, r3, #1
 800c886:	462f      	mov	r7, r5
 800c888:	930a      	str	r3, [sp, #40]	@ 0x28
 800c88a:	4605      	mov	r5, r0
 800c88c:	9b07      	ldr	r3, [sp, #28]
 800c88e:	4621      	mov	r1, r4
 800c890:	3b01      	subs	r3, #1
 800c892:	4648      	mov	r0, r9
 800c894:	9300      	str	r3, [sp, #0]
 800c896:	f7ff fa9a 	bl	800bdce <quorem>
 800c89a:	4639      	mov	r1, r7
 800c89c:	9002      	str	r0, [sp, #8]
 800c89e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c8a2:	4648      	mov	r0, r9
 800c8a4:	f000 fc5a 	bl	800d15c <__mcmp>
 800c8a8:	462a      	mov	r2, r5
 800c8aa:	9008      	str	r0, [sp, #32]
 800c8ac:	4621      	mov	r1, r4
 800c8ae:	4658      	mov	r0, fp
 800c8b0:	f000 fc70 	bl	800d194 <__mdiff>
 800c8b4:	68c2      	ldr	r2, [r0, #12]
 800c8b6:	4606      	mov	r6, r0
 800c8b8:	bb02      	cbnz	r2, 800c8fc <_dtoa_r+0xa1c>
 800c8ba:	4601      	mov	r1, r0
 800c8bc:	4648      	mov	r0, r9
 800c8be:	f000 fc4d 	bl	800d15c <__mcmp>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	4631      	mov	r1, r6
 800c8c6:	4658      	mov	r0, fp
 800c8c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c8ca:	f000 fa0d 	bl	800cce8 <_Bfree>
 800c8ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c8d2:	9e07      	ldr	r6, [sp, #28]
 800c8d4:	ea43 0102 	orr.w	r1, r3, r2
 800c8d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8da:	4319      	orrs	r1, r3
 800c8dc:	d110      	bne.n	800c900 <_dtoa_r+0xa20>
 800c8de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c8e2:	d029      	beq.n	800c938 <_dtoa_r+0xa58>
 800c8e4:	9b08      	ldr	r3, [sp, #32]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	dd02      	ble.n	800c8f0 <_dtoa_r+0xa10>
 800c8ea:	9b02      	ldr	r3, [sp, #8]
 800c8ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c8f0:	9b00      	ldr	r3, [sp, #0]
 800c8f2:	f883 8000 	strb.w	r8, [r3]
 800c8f6:	e63f      	b.n	800c578 <_dtoa_r+0x698>
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	e7bb      	b.n	800c874 <_dtoa_r+0x994>
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	e7e1      	b.n	800c8c4 <_dtoa_r+0x9e4>
 800c900:	9b08      	ldr	r3, [sp, #32]
 800c902:	2b00      	cmp	r3, #0
 800c904:	db04      	blt.n	800c910 <_dtoa_r+0xa30>
 800c906:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c908:	430b      	orrs	r3, r1
 800c90a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c90c:	430b      	orrs	r3, r1
 800c90e:	d120      	bne.n	800c952 <_dtoa_r+0xa72>
 800c910:	2a00      	cmp	r2, #0
 800c912:	dded      	ble.n	800c8f0 <_dtoa_r+0xa10>
 800c914:	4649      	mov	r1, r9
 800c916:	2201      	movs	r2, #1
 800c918:	4658      	mov	r0, fp
 800c91a:	f000 fbb3 	bl	800d084 <__lshift>
 800c91e:	4621      	mov	r1, r4
 800c920:	4681      	mov	r9, r0
 800c922:	f000 fc1b 	bl	800d15c <__mcmp>
 800c926:	2800      	cmp	r0, #0
 800c928:	dc03      	bgt.n	800c932 <_dtoa_r+0xa52>
 800c92a:	d1e1      	bne.n	800c8f0 <_dtoa_r+0xa10>
 800c92c:	f018 0f01 	tst.w	r8, #1
 800c930:	d0de      	beq.n	800c8f0 <_dtoa_r+0xa10>
 800c932:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c936:	d1d8      	bne.n	800c8ea <_dtoa_r+0xa0a>
 800c938:	9a00      	ldr	r2, [sp, #0]
 800c93a:	2339      	movs	r3, #57	@ 0x39
 800c93c:	7013      	strb	r3, [r2, #0]
 800c93e:	4633      	mov	r3, r6
 800c940:	461e      	mov	r6, r3
 800c942:	3b01      	subs	r3, #1
 800c944:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c948:	2a39      	cmp	r2, #57	@ 0x39
 800c94a:	d052      	beq.n	800c9f2 <_dtoa_r+0xb12>
 800c94c:	3201      	adds	r2, #1
 800c94e:	701a      	strb	r2, [r3, #0]
 800c950:	e612      	b.n	800c578 <_dtoa_r+0x698>
 800c952:	2a00      	cmp	r2, #0
 800c954:	dd07      	ble.n	800c966 <_dtoa_r+0xa86>
 800c956:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c95a:	d0ed      	beq.n	800c938 <_dtoa_r+0xa58>
 800c95c:	9a00      	ldr	r2, [sp, #0]
 800c95e:	f108 0301 	add.w	r3, r8, #1
 800c962:	7013      	strb	r3, [r2, #0]
 800c964:	e608      	b.n	800c578 <_dtoa_r+0x698>
 800c966:	9b07      	ldr	r3, [sp, #28]
 800c968:	9a07      	ldr	r2, [sp, #28]
 800c96a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c96e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c970:	4293      	cmp	r3, r2
 800c972:	d028      	beq.n	800c9c6 <_dtoa_r+0xae6>
 800c974:	4649      	mov	r1, r9
 800c976:	2300      	movs	r3, #0
 800c978:	220a      	movs	r2, #10
 800c97a:	4658      	mov	r0, fp
 800c97c:	f000 f9d6 	bl	800cd2c <__multadd>
 800c980:	42af      	cmp	r7, r5
 800c982:	4681      	mov	r9, r0
 800c984:	f04f 0300 	mov.w	r3, #0
 800c988:	f04f 020a 	mov.w	r2, #10
 800c98c:	4639      	mov	r1, r7
 800c98e:	4658      	mov	r0, fp
 800c990:	d107      	bne.n	800c9a2 <_dtoa_r+0xac2>
 800c992:	f000 f9cb 	bl	800cd2c <__multadd>
 800c996:	4607      	mov	r7, r0
 800c998:	4605      	mov	r5, r0
 800c99a:	9b07      	ldr	r3, [sp, #28]
 800c99c:	3301      	adds	r3, #1
 800c99e:	9307      	str	r3, [sp, #28]
 800c9a0:	e774      	b.n	800c88c <_dtoa_r+0x9ac>
 800c9a2:	f000 f9c3 	bl	800cd2c <__multadd>
 800c9a6:	4629      	mov	r1, r5
 800c9a8:	4607      	mov	r7, r0
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	220a      	movs	r2, #10
 800c9ae:	4658      	mov	r0, fp
 800c9b0:	f000 f9bc 	bl	800cd2c <__multadd>
 800c9b4:	4605      	mov	r5, r0
 800c9b6:	e7f0      	b.n	800c99a <_dtoa_r+0xaba>
 800c9b8:	9b00      	ldr	r3, [sp, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	bfcc      	ite	gt
 800c9be:	461e      	movgt	r6, r3
 800c9c0:	2601      	movle	r6, #1
 800c9c2:	4456      	add	r6, sl
 800c9c4:	2700      	movs	r7, #0
 800c9c6:	4649      	mov	r1, r9
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	4658      	mov	r0, fp
 800c9cc:	f000 fb5a 	bl	800d084 <__lshift>
 800c9d0:	4621      	mov	r1, r4
 800c9d2:	4681      	mov	r9, r0
 800c9d4:	f000 fbc2 	bl	800d15c <__mcmp>
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	dcb0      	bgt.n	800c93e <_dtoa_r+0xa5e>
 800c9dc:	d102      	bne.n	800c9e4 <_dtoa_r+0xb04>
 800c9de:	f018 0f01 	tst.w	r8, #1
 800c9e2:	d1ac      	bne.n	800c93e <_dtoa_r+0xa5e>
 800c9e4:	4633      	mov	r3, r6
 800c9e6:	461e      	mov	r6, r3
 800c9e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9ec:	2a30      	cmp	r2, #48	@ 0x30
 800c9ee:	d0fa      	beq.n	800c9e6 <_dtoa_r+0xb06>
 800c9f0:	e5c2      	b.n	800c578 <_dtoa_r+0x698>
 800c9f2:	459a      	cmp	sl, r3
 800c9f4:	d1a4      	bne.n	800c940 <_dtoa_r+0xa60>
 800c9f6:	9b04      	ldr	r3, [sp, #16]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	9304      	str	r3, [sp, #16]
 800c9fc:	2331      	movs	r3, #49	@ 0x31
 800c9fe:	f88a 3000 	strb.w	r3, [sl]
 800ca02:	e5b9      	b.n	800c578 <_dtoa_r+0x698>
 800ca04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ca06:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ca64 <_dtoa_r+0xb84>
 800ca0a:	b11b      	cbz	r3, 800ca14 <_dtoa_r+0xb34>
 800ca0c:	f10a 0308 	add.w	r3, sl, #8
 800ca10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ca12:	6013      	str	r3, [r2, #0]
 800ca14:	4650      	mov	r0, sl
 800ca16:	b019      	add	sp, #100	@ 0x64
 800ca18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	f77f ae37 	ble.w	800c692 <_dtoa_r+0x7b2>
 800ca24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca26:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca28:	2001      	movs	r0, #1
 800ca2a:	e655      	b.n	800c6d8 <_dtoa_r+0x7f8>
 800ca2c:	9b00      	ldr	r3, [sp, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	f77f aed6 	ble.w	800c7e0 <_dtoa_r+0x900>
 800ca34:	4656      	mov	r6, sl
 800ca36:	4621      	mov	r1, r4
 800ca38:	4648      	mov	r0, r9
 800ca3a:	f7ff f9c8 	bl	800bdce <quorem>
 800ca3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ca42:	f806 8b01 	strb.w	r8, [r6], #1
 800ca46:	9b00      	ldr	r3, [sp, #0]
 800ca48:	eba6 020a 	sub.w	r2, r6, sl
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	ddb3      	ble.n	800c9b8 <_dtoa_r+0xad8>
 800ca50:	4649      	mov	r1, r9
 800ca52:	2300      	movs	r3, #0
 800ca54:	220a      	movs	r2, #10
 800ca56:	4658      	mov	r0, fp
 800ca58:	f000 f968 	bl	800cd2c <__multadd>
 800ca5c:	4681      	mov	r9, r0
 800ca5e:	e7ea      	b.n	800ca36 <_dtoa_r+0xb56>
 800ca60:	0800e8c0 	.word	0x0800e8c0
 800ca64:	0800e844 	.word	0x0800e844

0800ca68 <_free_r>:
 800ca68:	b538      	push	{r3, r4, r5, lr}
 800ca6a:	4605      	mov	r5, r0
 800ca6c:	2900      	cmp	r1, #0
 800ca6e:	d041      	beq.n	800caf4 <_free_r+0x8c>
 800ca70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca74:	1f0c      	subs	r4, r1, #4
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	bfb8      	it	lt
 800ca7a:	18e4      	addlt	r4, r4, r3
 800ca7c:	f000 f8e8 	bl	800cc50 <__malloc_lock>
 800ca80:	4a1d      	ldr	r2, [pc, #116]	@ (800caf8 <_free_r+0x90>)
 800ca82:	6813      	ldr	r3, [r2, #0]
 800ca84:	b933      	cbnz	r3, 800ca94 <_free_r+0x2c>
 800ca86:	6063      	str	r3, [r4, #4]
 800ca88:	6014      	str	r4, [r2, #0]
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca90:	f000 b8e4 	b.w	800cc5c <__malloc_unlock>
 800ca94:	42a3      	cmp	r3, r4
 800ca96:	d908      	bls.n	800caaa <_free_r+0x42>
 800ca98:	6820      	ldr	r0, [r4, #0]
 800ca9a:	1821      	adds	r1, r4, r0
 800ca9c:	428b      	cmp	r3, r1
 800ca9e:	bf01      	itttt	eq
 800caa0:	6819      	ldreq	r1, [r3, #0]
 800caa2:	685b      	ldreq	r3, [r3, #4]
 800caa4:	1809      	addeq	r1, r1, r0
 800caa6:	6021      	streq	r1, [r4, #0]
 800caa8:	e7ed      	b.n	800ca86 <_free_r+0x1e>
 800caaa:	461a      	mov	r2, r3
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	b10b      	cbz	r3, 800cab4 <_free_r+0x4c>
 800cab0:	42a3      	cmp	r3, r4
 800cab2:	d9fa      	bls.n	800caaa <_free_r+0x42>
 800cab4:	6811      	ldr	r1, [r2, #0]
 800cab6:	1850      	adds	r0, r2, r1
 800cab8:	42a0      	cmp	r0, r4
 800caba:	d10b      	bne.n	800cad4 <_free_r+0x6c>
 800cabc:	6820      	ldr	r0, [r4, #0]
 800cabe:	4401      	add	r1, r0
 800cac0:	1850      	adds	r0, r2, r1
 800cac2:	4283      	cmp	r3, r0
 800cac4:	6011      	str	r1, [r2, #0]
 800cac6:	d1e0      	bne.n	800ca8a <_free_r+0x22>
 800cac8:	6818      	ldr	r0, [r3, #0]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	6053      	str	r3, [r2, #4]
 800cace:	4408      	add	r0, r1
 800cad0:	6010      	str	r0, [r2, #0]
 800cad2:	e7da      	b.n	800ca8a <_free_r+0x22>
 800cad4:	d902      	bls.n	800cadc <_free_r+0x74>
 800cad6:	230c      	movs	r3, #12
 800cad8:	602b      	str	r3, [r5, #0]
 800cada:	e7d6      	b.n	800ca8a <_free_r+0x22>
 800cadc:	6820      	ldr	r0, [r4, #0]
 800cade:	1821      	adds	r1, r4, r0
 800cae0:	428b      	cmp	r3, r1
 800cae2:	bf04      	itt	eq
 800cae4:	6819      	ldreq	r1, [r3, #0]
 800cae6:	685b      	ldreq	r3, [r3, #4]
 800cae8:	6063      	str	r3, [r4, #4]
 800caea:	bf04      	itt	eq
 800caec:	1809      	addeq	r1, r1, r0
 800caee:	6021      	streq	r1, [r4, #0]
 800caf0:	6054      	str	r4, [r2, #4]
 800caf2:	e7ca      	b.n	800ca8a <_free_r+0x22>
 800caf4:	bd38      	pop	{r3, r4, r5, pc}
 800caf6:	bf00      	nop
 800caf8:	20002358 	.word	0x20002358

0800cafc <malloc>:
 800cafc:	4b02      	ldr	r3, [pc, #8]	@ (800cb08 <malloc+0xc>)
 800cafe:	4601      	mov	r1, r0
 800cb00:	6818      	ldr	r0, [r3, #0]
 800cb02:	f000 b825 	b.w	800cb50 <_malloc_r>
 800cb06:	bf00      	nop
 800cb08:	2000010c 	.word	0x2000010c

0800cb0c <sbrk_aligned>:
 800cb0c:	b570      	push	{r4, r5, r6, lr}
 800cb0e:	4e0f      	ldr	r6, [pc, #60]	@ (800cb4c <sbrk_aligned+0x40>)
 800cb10:	460c      	mov	r4, r1
 800cb12:	6831      	ldr	r1, [r6, #0]
 800cb14:	4605      	mov	r5, r0
 800cb16:	b911      	cbnz	r1, 800cb1e <sbrk_aligned+0x12>
 800cb18:	f000 fe46 	bl	800d7a8 <_sbrk_r>
 800cb1c:	6030      	str	r0, [r6, #0]
 800cb1e:	4621      	mov	r1, r4
 800cb20:	4628      	mov	r0, r5
 800cb22:	f000 fe41 	bl	800d7a8 <_sbrk_r>
 800cb26:	1c43      	adds	r3, r0, #1
 800cb28:	d103      	bne.n	800cb32 <sbrk_aligned+0x26>
 800cb2a:	f04f 34ff 	mov.w	r4, #4294967295
 800cb2e:	4620      	mov	r0, r4
 800cb30:	bd70      	pop	{r4, r5, r6, pc}
 800cb32:	1cc4      	adds	r4, r0, #3
 800cb34:	f024 0403 	bic.w	r4, r4, #3
 800cb38:	42a0      	cmp	r0, r4
 800cb3a:	d0f8      	beq.n	800cb2e <sbrk_aligned+0x22>
 800cb3c:	1a21      	subs	r1, r4, r0
 800cb3e:	4628      	mov	r0, r5
 800cb40:	f000 fe32 	bl	800d7a8 <_sbrk_r>
 800cb44:	3001      	adds	r0, #1
 800cb46:	d1f2      	bne.n	800cb2e <sbrk_aligned+0x22>
 800cb48:	e7ef      	b.n	800cb2a <sbrk_aligned+0x1e>
 800cb4a:	bf00      	nop
 800cb4c:	20002354 	.word	0x20002354

0800cb50 <_malloc_r>:
 800cb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb54:	1ccd      	adds	r5, r1, #3
 800cb56:	f025 0503 	bic.w	r5, r5, #3
 800cb5a:	3508      	adds	r5, #8
 800cb5c:	2d0c      	cmp	r5, #12
 800cb5e:	bf38      	it	cc
 800cb60:	250c      	movcc	r5, #12
 800cb62:	2d00      	cmp	r5, #0
 800cb64:	4606      	mov	r6, r0
 800cb66:	db01      	blt.n	800cb6c <_malloc_r+0x1c>
 800cb68:	42a9      	cmp	r1, r5
 800cb6a:	d904      	bls.n	800cb76 <_malloc_r+0x26>
 800cb6c:	230c      	movs	r3, #12
 800cb6e:	6033      	str	r3, [r6, #0]
 800cb70:	2000      	movs	r0, #0
 800cb72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc4c <_malloc_r+0xfc>
 800cb7a:	f000 f869 	bl	800cc50 <__malloc_lock>
 800cb7e:	f8d8 3000 	ldr.w	r3, [r8]
 800cb82:	461c      	mov	r4, r3
 800cb84:	bb44      	cbnz	r4, 800cbd8 <_malloc_r+0x88>
 800cb86:	4629      	mov	r1, r5
 800cb88:	4630      	mov	r0, r6
 800cb8a:	f7ff ffbf 	bl	800cb0c <sbrk_aligned>
 800cb8e:	1c43      	adds	r3, r0, #1
 800cb90:	4604      	mov	r4, r0
 800cb92:	d158      	bne.n	800cc46 <_malloc_r+0xf6>
 800cb94:	f8d8 4000 	ldr.w	r4, [r8]
 800cb98:	4627      	mov	r7, r4
 800cb9a:	2f00      	cmp	r7, #0
 800cb9c:	d143      	bne.n	800cc26 <_malloc_r+0xd6>
 800cb9e:	2c00      	cmp	r4, #0
 800cba0:	d04b      	beq.n	800cc3a <_malloc_r+0xea>
 800cba2:	6823      	ldr	r3, [r4, #0]
 800cba4:	4639      	mov	r1, r7
 800cba6:	4630      	mov	r0, r6
 800cba8:	eb04 0903 	add.w	r9, r4, r3
 800cbac:	f000 fdfc 	bl	800d7a8 <_sbrk_r>
 800cbb0:	4581      	cmp	r9, r0
 800cbb2:	d142      	bne.n	800cc3a <_malloc_r+0xea>
 800cbb4:	6821      	ldr	r1, [r4, #0]
 800cbb6:	1a6d      	subs	r5, r5, r1
 800cbb8:	4629      	mov	r1, r5
 800cbba:	4630      	mov	r0, r6
 800cbbc:	f7ff ffa6 	bl	800cb0c <sbrk_aligned>
 800cbc0:	3001      	adds	r0, #1
 800cbc2:	d03a      	beq.n	800cc3a <_malloc_r+0xea>
 800cbc4:	6823      	ldr	r3, [r4, #0]
 800cbc6:	442b      	add	r3, r5
 800cbc8:	6023      	str	r3, [r4, #0]
 800cbca:	f8d8 3000 	ldr.w	r3, [r8]
 800cbce:	685a      	ldr	r2, [r3, #4]
 800cbd0:	bb62      	cbnz	r2, 800cc2c <_malloc_r+0xdc>
 800cbd2:	f8c8 7000 	str.w	r7, [r8]
 800cbd6:	e00f      	b.n	800cbf8 <_malloc_r+0xa8>
 800cbd8:	6822      	ldr	r2, [r4, #0]
 800cbda:	1b52      	subs	r2, r2, r5
 800cbdc:	d420      	bmi.n	800cc20 <_malloc_r+0xd0>
 800cbde:	2a0b      	cmp	r2, #11
 800cbe0:	d917      	bls.n	800cc12 <_malloc_r+0xc2>
 800cbe2:	1961      	adds	r1, r4, r5
 800cbe4:	42a3      	cmp	r3, r4
 800cbe6:	6025      	str	r5, [r4, #0]
 800cbe8:	bf18      	it	ne
 800cbea:	6059      	strne	r1, [r3, #4]
 800cbec:	6863      	ldr	r3, [r4, #4]
 800cbee:	bf08      	it	eq
 800cbf0:	f8c8 1000 	streq.w	r1, [r8]
 800cbf4:	5162      	str	r2, [r4, r5]
 800cbf6:	604b      	str	r3, [r1, #4]
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	f000 f82f 	bl	800cc5c <__malloc_unlock>
 800cbfe:	f104 000b 	add.w	r0, r4, #11
 800cc02:	1d23      	adds	r3, r4, #4
 800cc04:	f020 0007 	bic.w	r0, r0, #7
 800cc08:	1ac2      	subs	r2, r0, r3
 800cc0a:	bf1c      	itt	ne
 800cc0c:	1a1b      	subne	r3, r3, r0
 800cc0e:	50a3      	strne	r3, [r4, r2]
 800cc10:	e7af      	b.n	800cb72 <_malloc_r+0x22>
 800cc12:	6862      	ldr	r2, [r4, #4]
 800cc14:	42a3      	cmp	r3, r4
 800cc16:	bf0c      	ite	eq
 800cc18:	f8c8 2000 	streq.w	r2, [r8]
 800cc1c:	605a      	strne	r2, [r3, #4]
 800cc1e:	e7eb      	b.n	800cbf8 <_malloc_r+0xa8>
 800cc20:	4623      	mov	r3, r4
 800cc22:	6864      	ldr	r4, [r4, #4]
 800cc24:	e7ae      	b.n	800cb84 <_malloc_r+0x34>
 800cc26:	463c      	mov	r4, r7
 800cc28:	687f      	ldr	r7, [r7, #4]
 800cc2a:	e7b6      	b.n	800cb9a <_malloc_r+0x4a>
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	42a3      	cmp	r3, r4
 800cc32:	d1fb      	bne.n	800cc2c <_malloc_r+0xdc>
 800cc34:	2300      	movs	r3, #0
 800cc36:	6053      	str	r3, [r2, #4]
 800cc38:	e7de      	b.n	800cbf8 <_malloc_r+0xa8>
 800cc3a:	230c      	movs	r3, #12
 800cc3c:	6033      	str	r3, [r6, #0]
 800cc3e:	4630      	mov	r0, r6
 800cc40:	f000 f80c 	bl	800cc5c <__malloc_unlock>
 800cc44:	e794      	b.n	800cb70 <_malloc_r+0x20>
 800cc46:	6005      	str	r5, [r0, #0]
 800cc48:	e7d6      	b.n	800cbf8 <_malloc_r+0xa8>
 800cc4a:	bf00      	nop
 800cc4c:	20002358 	.word	0x20002358

0800cc50 <__malloc_lock>:
 800cc50:	4801      	ldr	r0, [pc, #4]	@ (800cc58 <__malloc_lock+0x8>)
 800cc52:	f7ff b8ba 	b.w	800bdca <__retarget_lock_acquire_recursive>
 800cc56:	bf00      	nop
 800cc58:	20002350 	.word	0x20002350

0800cc5c <__malloc_unlock>:
 800cc5c:	4801      	ldr	r0, [pc, #4]	@ (800cc64 <__malloc_unlock+0x8>)
 800cc5e:	f7ff b8b5 	b.w	800bdcc <__retarget_lock_release_recursive>
 800cc62:	bf00      	nop
 800cc64:	20002350 	.word	0x20002350

0800cc68 <_Balloc>:
 800cc68:	b570      	push	{r4, r5, r6, lr}
 800cc6a:	69c6      	ldr	r6, [r0, #28]
 800cc6c:	4604      	mov	r4, r0
 800cc6e:	460d      	mov	r5, r1
 800cc70:	b976      	cbnz	r6, 800cc90 <_Balloc+0x28>
 800cc72:	2010      	movs	r0, #16
 800cc74:	f7ff ff42 	bl	800cafc <malloc>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	61e0      	str	r0, [r4, #28]
 800cc7c:	b920      	cbnz	r0, 800cc88 <_Balloc+0x20>
 800cc7e:	4b18      	ldr	r3, [pc, #96]	@ (800cce0 <_Balloc+0x78>)
 800cc80:	4818      	ldr	r0, [pc, #96]	@ (800cce4 <_Balloc+0x7c>)
 800cc82:	216b      	movs	r1, #107	@ 0x6b
 800cc84:	f000 fdae 	bl	800d7e4 <__assert_func>
 800cc88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc8c:	6006      	str	r6, [r0, #0]
 800cc8e:	60c6      	str	r6, [r0, #12]
 800cc90:	69e6      	ldr	r6, [r4, #28]
 800cc92:	68f3      	ldr	r3, [r6, #12]
 800cc94:	b183      	cbz	r3, 800ccb8 <_Balloc+0x50>
 800cc96:	69e3      	ldr	r3, [r4, #28]
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc9e:	b9b8      	cbnz	r0, 800ccd0 <_Balloc+0x68>
 800cca0:	2101      	movs	r1, #1
 800cca2:	fa01 f605 	lsl.w	r6, r1, r5
 800cca6:	1d72      	adds	r2, r6, #5
 800cca8:	0092      	lsls	r2, r2, #2
 800ccaa:	4620      	mov	r0, r4
 800ccac:	f000 fdb8 	bl	800d820 <_calloc_r>
 800ccb0:	b160      	cbz	r0, 800cccc <_Balloc+0x64>
 800ccb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ccb6:	e00e      	b.n	800ccd6 <_Balloc+0x6e>
 800ccb8:	2221      	movs	r2, #33	@ 0x21
 800ccba:	2104      	movs	r1, #4
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	f000 fdaf 	bl	800d820 <_calloc_r>
 800ccc2:	69e3      	ldr	r3, [r4, #28]
 800ccc4:	60f0      	str	r0, [r6, #12]
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d1e4      	bne.n	800cc96 <_Balloc+0x2e>
 800cccc:	2000      	movs	r0, #0
 800ccce:	bd70      	pop	{r4, r5, r6, pc}
 800ccd0:	6802      	ldr	r2, [r0, #0]
 800ccd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ccdc:	e7f7      	b.n	800ccce <_Balloc+0x66>
 800ccde:	bf00      	nop
 800cce0:	0800e851 	.word	0x0800e851
 800cce4:	0800e8d1 	.word	0x0800e8d1

0800cce8 <_Bfree>:
 800cce8:	b570      	push	{r4, r5, r6, lr}
 800ccea:	69c6      	ldr	r6, [r0, #28]
 800ccec:	4605      	mov	r5, r0
 800ccee:	460c      	mov	r4, r1
 800ccf0:	b976      	cbnz	r6, 800cd10 <_Bfree+0x28>
 800ccf2:	2010      	movs	r0, #16
 800ccf4:	f7ff ff02 	bl	800cafc <malloc>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	61e8      	str	r0, [r5, #28]
 800ccfc:	b920      	cbnz	r0, 800cd08 <_Bfree+0x20>
 800ccfe:	4b09      	ldr	r3, [pc, #36]	@ (800cd24 <_Bfree+0x3c>)
 800cd00:	4809      	ldr	r0, [pc, #36]	@ (800cd28 <_Bfree+0x40>)
 800cd02:	218f      	movs	r1, #143	@ 0x8f
 800cd04:	f000 fd6e 	bl	800d7e4 <__assert_func>
 800cd08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd0c:	6006      	str	r6, [r0, #0]
 800cd0e:	60c6      	str	r6, [r0, #12]
 800cd10:	b13c      	cbz	r4, 800cd22 <_Bfree+0x3a>
 800cd12:	69eb      	ldr	r3, [r5, #28]
 800cd14:	6862      	ldr	r2, [r4, #4]
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd1c:	6021      	str	r1, [r4, #0]
 800cd1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd22:	bd70      	pop	{r4, r5, r6, pc}
 800cd24:	0800e851 	.word	0x0800e851
 800cd28:	0800e8d1 	.word	0x0800e8d1

0800cd2c <__multadd>:
 800cd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd30:	690d      	ldr	r5, [r1, #16]
 800cd32:	4607      	mov	r7, r0
 800cd34:	460c      	mov	r4, r1
 800cd36:	461e      	mov	r6, r3
 800cd38:	f101 0c14 	add.w	ip, r1, #20
 800cd3c:	2000      	movs	r0, #0
 800cd3e:	f8dc 3000 	ldr.w	r3, [ip]
 800cd42:	b299      	uxth	r1, r3
 800cd44:	fb02 6101 	mla	r1, r2, r1, r6
 800cd48:	0c1e      	lsrs	r6, r3, #16
 800cd4a:	0c0b      	lsrs	r3, r1, #16
 800cd4c:	fb02 3306 	mla	r3, r2, r6, r3
 800cd50:	b289      	uxth	r1, r1
 800cd52:	3001      	adds	r0, #1
 800cd54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd58:	4285      	cmp	r5, r0
 800cd5a:	f84c 1b04 	str.w	r1, [ip], #4
 800cd5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd62:	dcec      	bgt.n	800cd3e <__multadd+0x12>
 800cd64:	b30e      	cbz	r6, 800cdaa <__multadd+0x7e>
 800cd66:	68a3      	ldr	r3, [r4, #8]
 800cd68:	42ab      	cmp	r3, r5
 800cd6a:	dc19      	bgt.n	800cda0 <__multadd+0x74>
 800cd6c:	6861      	ldr	r1, [r4, #4]
 800cd6e:	4638      	mov	r0, r7
 800cd70:	3101      	adds	r1, #1
 800cd72:	f7ff ff79 	bl	800cc68 <_Balloc>
 800cd76:	4680      	mov	r8, r0
 800cd78:	b928      	cbnz	r0, 800cd86 <__multadd+0x5a>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	4b0c      	ldr	r3, [pc, #48]	@ (800cdb0 <__multadd+0x84>)
 800cd7e:	480d      	ldr	r0, [pc, #52]	@ (800cdb4 <__multadd+0x88>)
 800cd80:	21ba      	movs	r1, #186	@ 0xba
 800cd82:	f000 fd2f 	bl	800d7e4 <__assert_func>
 800cd86:	6922      	ldr	r2, [r4, #16]
 800cd88:	3202      	adds	r2, #2
 800cd8a:	f104 010c 	add.w	r1, r4, #12
 800cd8e:	0092      	lsls	r2, r2, #2
 800cd90:	300c      	adds	r0, #12
 800cd92:	f000 fd19 	bl	800d7c8 <memcpy>
 800cd96:	4621      	mov	r1, r4
 800cd98:	4638      	mov	r0, r7
 800cd9a:	f7ff ffa5 	bl	800cce8 <_Bfree>
 800cd9e:	4644      	mov	r4, r8
 800cda0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cda4:	3501      	adds	r5, #1
 800cda6:	615e      	str	r6, [r3, #20]
 800cda8:	6125      	str	r5, [r4, #16]
 800cdaa:	4620      	mov	r0, r4
 800cdac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdb0:	0800e8c0 	.word	0x0800e8c0
 800cdb4:	0800e8d1 	.word	0x0800e8d1

0800cdb8 <__hi0bits>:
 800cdb8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	bf36      	itet	cc
 800cdc0:	0403      	lslcc	r3, r0, #16
 800cdc2:	2000      	movcs	r0, #0
 800cdc4:	2010      	movcc	r0, #16
 800cdc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cdca:	bf3c      	itt	cc
 800cdcc:	021b      	lslcc	r3, r3, #8
 800cdce:	3008      	addcc	r0, #8
 800cdd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cdd4:	bf3c      	itt	cc
 800cdd6:	011b      	lslcc	r3, r3, #4
 800cdd8:	3004      	addcc	r0, #4
 800cdda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdde:	bf3c      	itt	cc
 800cde0:	009b      	lslcc	r3, r3, #2
 800cde2:	3002      	addcc	r0, #2
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	db05      	blt.n	800cdf4 <__hi0bits+0x3c>
 800cde8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cdec:	f100 0001 	add.w	r0, r0, #1
 800cdf0:	bf08      	it	eq
 800cdf2:	2020      	moveq	r0, #32
 800cdf4:	4770      	bx	lr

0800cdf6 <__lo0bits>:
 800cdf6:	6803      	ldr	r3, [r0, #0]
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	f013 0007 	ands.w	r0, r3, #7
 800cdfe:	d00b      	beq.n	800ce18 <__lo0bits+0x22>
 800ce00:	07d9      	lsls	r1, r3, #31
 800ce02:	d421      	bmi.n	800ce48 <__lo0bits+0x52>
 800ce04:	0798      	lsls	r0, r3, #30
 800ce06:	bf49      	itett	mi
 800ce08:	085b      	lsrmi	r3, r3, #1
 800ce0a:	089b      	lsrpl	r3, r3, #2
 800ce0c:	2001      	movmi	r0, #1
 800ce0e:	6013      	strmi	r3, [r2, #0]
 800ce10:	bf5c      	itt	pl
 800ce12:	6013      	strpl	r3, [r2, #0]
 800ce14:	2002      	movpl	r0, #2
 800ce16:	4770      	bx	lr
 800ce18:	b299      	uxth	r1, r3
 800ce1a:	b909      	cbnz	r1, 800ce20 <__lo0bits+0x2a>
 800ce1c:	0c1b      	lsrs	r3, r3, #16
 800ce1e:	2010      	movs	r0, #16
 800ce20:	b2d9      	uxtb	r1, r3
 800ce22:	b909      	cbnz	r1, 800ce28 <__lo0bits+0x32>
 800ce24:	3008      	adds	r0, #8
 800ce26:	0a1b      	lsrs	r3, r3, #8
 800ce28:	0719      	lsls	r1, r3, #28
 800ce2a:	bf04      	itt	eq
 800ce2c:	091b      	lsreq	r3, r3, #4
 800ce2e:	3004      	addeq	r0, #4
 800ce30:	0799      	lsls	r1, r3, #30
 800ce32:	bf04      	itt	eq
 800ce34:	089b      	lsreq	r3, r3, #2
 800ce36:	3002      	addeq	r0, #2
 800ce38:	07d9      	lsls	r1, r3, #31
 800ce3a:	d403      	bmi.n	800ce44 <__lo0bits+0x4e>
 800ce3c:	085b      	lsrs	r3, r3, #1
 800ce3e:	f100 0001 	add.w	r0, r0, #1
 800ce42:	d003      	beq.n	800ce4c <__lo0bits+0x56>
 800ce44:	6013      	str	r3, [r2, #0]
 800ce46:	4770      	bx	lr
 800ce48:	2000      	movs	r0, #0
 800ce4a:	4770      	bx	lr
 800ce4c:	2020      	movs	r0, #32
 800ce4e:	4770      	bx	lr

0800ce50 <__i2b>:
 800ce50:	b510      	push	{r4, lr}
 800ce52:	460c      	mov	r4, r1
 800ce54:	2101      	movs	r1, #1
 800ce56:	f7ff ff07 	bl	800cc68 <_Balloc>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	b928      	cbnz	r0, 800ce6a <__i2b+0x1a>
 800ce5e:	4b05      	ldr	r3, [pc, #20]	@ (800ce74 <__i2b+0x24>)
 800ce60:	4805      	ldr	r0, [pc, #20]	@ (800ce78 <__i2b+0x28>)
 800ce62:	f240 1145 	movw	r1, #325	@ 0x145
 800ce66:	f000 fcbd 	bl	800d7e4 <__assert_func>
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	6144      	str	r4, [r0, #20]
 800ce6e:	6103      	str	r3, [r0, #16]
 800ce70:	bd10      	pop	{r4, pc}
 800ce72:	bf00      	nop
 800ce74:	0800e8c0 	.word	0x0800e8c0
 800ce78:	0800e8d1 	.word	0x0800e8d1

0800ce7c <__multiply>:
 800ce7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce80:	4614      	mov	r4, r2
 800ce82:	690a      	ldr	r2, [r1, #16]
 800ce84:	6923      	ldr	r3, [r4, #16]
 800ce86:	429a      	cmp	r2, r3
 800ce88:	bfa8      	it	ge
 800ce8a:	4623      	movge	r3, r4
 800ce8c:	460f      	mov	r7, r1
 800ce8e:	bfa4      	itt	ge
 800ce90:	460c      	movge	r4, r1
 800ce92:	461f      	movge	r7, r3
 800ce94:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ce98:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ce9c:	68a3      	ldr	r3, [r4, #8]
 800ce9e:	6861      	ldr	r1, [r4, #4]
 800cea0:	eb0a 0609 	add.w	r6, sl, r9
 800cea4:	42b3      	cmp	r3, r6
 800cea6:	b085      	sub	sp, #20
 800cea8:	bfb8      	it	lt
 800ceaa:	3101      	addlt	r1, #1
 800ceac:	f7ff fedc 	bl	800cc68 <_Balloc>
 800ceb0:	b930      	cbnz	r0, 800cec0 <__multiply+0x44>
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	4b44      	ldr	r3, [pc, #272]	@ (800cfc8 <__multiply+0x14c>)
 800ceb6:	4845      	ldr	r0, [pc, #276]	@ (800cfcc <__multiply+0x150>)
 800ceb8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cebc:	f000 fc92 	bl	800d7e4 <__assert_func>
 800cec0:	f100 0514 	add.w	r5, r0, #20
 800cec4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cec8:	462b      	mov	r3, r5
 800ceca:	2200      	movs	r2, #0
 800cecc:	4543      	cmp	r3, r8
 800cece:	d321      	bcc.n	800cf14 <__multiply+0x98>
 800ced0:	f107 0114 	add.w	r1, r7, #20
 800ced4:	f104 0214 	add.w	r2, r4, #20
 800ced8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cedc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cee0:	9302      	str	r3, [sp, #8]
 800cee2:	1b13      	subs	r3, r2, r4
 800cee4:	3b15      	subs	r3, #21
 800cee6:	f023 0303 	bic.w	r3, r3, #3
 800ceea:	3304      	adds	r3, #4
 800ceec:	f104 0715 	add.w	r7, r4, #21
 800cef0:	42ba      	cmp	r2, r7
 800cef2:	bf38      	it	cc
 800cef4:	2304      	movcc	r3, #4
 800cef6:	9301      	str	r3, [sp, #4]
 800cef8:	9b02      	ldr	r3, [sp, #8]
 800cefa:	9103      	str	r1, [sp, #12]
 800cefc:	428b      	cmp	r3, r1
 800cefe:	d80c      	bhi.n	800cf1a <__multiply+0x9e>
 800cf00:	2e00      	cmp	r6, #0
 800cf02:	dd03      	ble.n	800cf0c <__multiply+0x90>
 800cf04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d05b      	beq.n	800cfc4 <__multiply+0x148>
 800cf0c:	6106      	str	r6, [r0, #16]
 800cf0e:	b005      	add	sp, #20
 800cf10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf14:	f843 2b04 	str.w	r2, [r3], #4
 800cf18:	e7d8      	b.n	800cecc <__multiply+0x50>
 800cf1a:	f8b1 a000 	ldrh.w	sl, [r1]
 800cf1e:	f1ba 0f00 	cmp.w	sl, #0
 800cf22:	d024      	beq.n	800cf6e <__multiply+0xf2>
 800cf24:	f104 0e14 	add.w	lr, r4, #20
 800cf28:	46a9      	mov	r9, r5
 800cf2a:	f04f 0c00 	mov.w	ip, #0
 800cf2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cf32:	f8d9 3000 	ldr.w	r3, [r9]
 800cf36:	fa1f fb87 	uxth.w	fp, r7
 800cf3a:	b29b      	uxth	r3, r3
 800cf3c:	fb0a 330b 	mla	r3, sl, fp, r3
 800cf40:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cf44:	f8d9 7000 	ldr.w	r7, [r9]
 800cf48:	4463      	add	r3, ip
 800cf4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cf4e:	fb0a c70b 	mla	r7, sl, fp, ip
 800cf52:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cf5c:	4572      	cmp	r2, lr
 800cf5e:	f849 3b04 	str.w	r3, [r9], #4
 800cf62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cf66:	d8e2      	bhi.n	800cf2e <__multiply+0xb2>
 800cf68:	9b01      	ldr	r3, [sp, #4]
 800cf6a:	f845 c003 	str.w	ip, [r5, r3]
 800cf6e:	9b03      	ldr	r3, [sp, #12]
 800cf70:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cf74:	3104      	adds	r1, #4
 800cf76:	f1b9 0f00 	cmp.w	r9, #0
 800cf7a:	d021      	beq.n	800cfc0 <__multiply+0x144>
 800cf7c:	682b      	ldr	r3, [r5, #0]
 800cf7e:	f104 0c14 	add.w	ip, r4, #20
 800cf82:	46ae      	mov	lr, r5
 800cf84:	f04f 0a00 	mov.w	sl, #0
 800cf88:	f8bc b000 	ldrh.w	fp, [ip]
 800cf8c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cf90:	fb09 770b 	mla	r7, r9, fp, r7
 800cf94:	4457      	add	r7, sl
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cf9c:	f84e 3b04 	str.w	r3, [lr], #4
 800cfa0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cfa4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cfa8:	f8be 3000 	ldrh.w	r3, [lr]
 800cfac:	fb09 330a 	mla	r3, r9, sl, r3
 800cfb0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cfb4:	4562      	cmp	r2, ip
 800cfb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cfba:	d8e5      	bhi.n	800cf88 <__multiply+0x10c>
 800cfbc:	9f01      	ldr	r7, [sp, #4]
 800cfbe:	51eb      	str	r3, [r5, r7]
 800cfc0:	3504      	adds	r5, #4
 800cfc2:	e799      	b.n	800cef8 <__multiply+0x7c>
 800cfc4:	3e01      	subs	r6, #1
 800cfc6:	e79b      	b.n	800cf00 <__multiply+0x84>
 800cfc8:	0800e8c0 	.word	0x0800e8c0
 800cfcc:	0800e8d1 	.word	0x0800e8d1

0800cfd0 <__pow5mult>:
 800cfd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfd4:	4615      	mov	r5, r2
 800cfd6:	f012 0203 	ands.w	r2, r2, #3
 800cfda:	4607      	mov	r7, r0
 800cfdc:	460e      	mov	r6, r1
 800cfde:	d007      	beq.n	800cff0 <__pow5mult+0x20>
 800cfe0:	4c25      	ldr	r4, [pc, #148]	@ (800d078 <__pow5mult+0xa8>)
 800cfe2:	3a01      	subs	r2, #1
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cfea:	f7ff fe9f 	bl	800cd2c <__multadd>
 800cfee:	4606      	mov	r6, r0
 800cff0:	10ad      	asrs	r5, r5, #2
 800cff2:	d03d      	beq.n	800d070 <__pow5mult+0xa0>
 800cff4:	69fc      	ldr	r4, [r7, #28]
 800cff6:	b97c      	cbnz	r4, 800d018 <__pow5mult+0x48>
 800cff8:	2010      	movs	r0, #16
 800cffa:	f7ff fd7f 	bl	800cafc <malloc>
 800cffe:	4602      	mov	r2, r0
 800d000:	61f8      	str	r0, [r7, #28]
 800d002:	b928      	cbnz	r0, 800d010 <__pow5mult+0x40>
 800d004:	4b1d      	ldr	r3, [pc, #116]	@ (800d07c <__pow5mult+0xac>)
 800d006:	481e      	ldr	r0, [pc, #120]	@ (800d080 <__pow5mult+0xb0>)
 800d008:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d00c:	f000 fbea 	bl	800d7e4 <__assert_func>
 800d010:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d014:	6004      	str	r4, [r0, #0]
 800d016:	60c4      	str	r4, [r0, #12]
 800d018:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d01c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d020:	b94c      	cbnz	r4, 800d036 <__pow5mult+0x66>
 800d022:	f240 2171 	movw	r1, #625	@ 0x271
 800d026:	4638      	mov	r0, r7
 800d028:	f7ff ff12 	bl	800ce50 <__i2b>
 800d02c:	2300      	movs	r3, #0
 800d02e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d032:	4604      	mov	r4, r0
 800d034:	6003      	str	r3, [r0, #0]
 800d036:	f04f 0900 	mov.w	r9, #0
 800d03a:	07eb      	lsls	r3, r5, #31
 800d03c:	d50a      	bpl.n	800d054 <__pow5mult+0x84>
 800d03e:	4631      	mov	r1, r6
 800d040:	4622      	mov	r2, r4
 800d042:	4638      	mov	r0, r7
 800d044:	f7ff ff1a 	bl	800ce7c <__multiply>
 800d048:	4631      	mov	r1, r6
 800d04a:	4680      	mov	r8, r0
 800d04c:	4638      	mov	r0, r7
 800d04e:	f7ff fe4b 	bl	800cce8 <_Bfree>
 800d052:	4646      	mov	r6, r8
 800d054:	106d      	asrs	r5, r5, #1
 800d056:	d00b      	beq.n	800d070 <__pow5mult+0xa0>
 800d058:	6820      	ldr	r0, [r4, #0]
 800d05a:	b938      	cbnz	r0, 800d06c <__pow5mult+0x9c>
 800d05c:	4622      	mov	r2, r4
 800d05e:	4621      	mov	r1, r4
 800d060:	4638      	mov	r0, r7
 800d062:	f7ff ff0b 	bl	800ce7c <__multiply>
 800d066:	6020      	str	r0, [r4, #0]
 800d068:	f8c0 9000 	str.w	r9, [r0]
 800d06c:	4604      	mov	r4, r0
 800d06e:	e7e4      	b.n	800d03a <__pow5mult+0x6a>
 800d070:	4630      	mov	r0, r6
 800d072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d076:	bf00      	nop
 800d078:	0800e92c 	.word	0x0800e92c
 800d07c:	0800e851 	.word	0x0800e851
 800d080:	0800e8d1 	.word	0x0800e8d1

0800d084 <__lshift>:
 800d084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d088:	460c      	mov	r4, r1
 800d08a:	6849      	ldr	r1, [r1, #4]
 800d08c:	6923      	ldr	r3, [r4, #16]
 800d08e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d092:	68a3      	ldr	r3, [r4, #8]
 800d094:	4607      	mov	r7, r0
 800d096:	4691      	mov	r9, r2
 800d098:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d09c:	f108 0601 	add.w	r6, r8, #1
 800d0a0:	42b3      	cmp	r3, r6
 800d0a2:	db0b      	blt.n	800d0bc <__lshift+0x38>
 800d0a4:	4638      	mov	r0, r7
 800d0a6:	f7ff fddf 	bl	800cc68 <_Balloc>
 800d0aa:	4605      	mov	r5, r0
 800d0ac:	b948      	cbnz	r0, 800d0c2 <__lshift+0x3e>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	4b28      	ldr	r3, [pc, #160]	@ (800d154 <__lshift+0xd0>)
 800d0b2:	4829      	ldr	r0, [pc, #164]	@ (800d158 <__lshift+0xd4>)
 800d0b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d0b8:	f000 fb94 	bl	800d7e4 <__assert_func>
 800d0bc:	3101      	adds	r1, #1
 800d0be:	005b      	lsls	r3, r3, #1
 800d0c0:	e7ee      	b.n	800d0a0 <__lshift+0x1c>
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	f100 0114 	add.w	r1, r0, #20
 800d0c8:	f100 0210 	add.w	r2, r0, #16
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	4553      	cmp	r3, sl
 800d0d0:	db33      	blt.n	800d13a <__lshift+0xb6>
 800d0d2:	6920      	ldr	r0, [r4, #16]
 800d0d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d0d8:	f104 0314 	add.w	r3, r4, #20
 800d0dc:	f019 091f 	ands.w	r9, r9, #31
 800d0e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d0e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d0e8:	d02b      	beq.n	800d142 <__lshift+0xbe>
 800d0ea:	f1c9 0e20 	rsb	lr, r9, #32
 800d0ee:	468a      	mov	sl, r1
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	6818      	ldr	r0, [r3, #0]
 800d0f4:	fa00 f009 	lsl.w	r0, r0, r9
 800d0f8:	4310      	orrs	r0, r2
 800d0fa:	f84a 0b04 	str.w	r0, [sl], #4
 800d0fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800d102:	459c      	cmp	ip, r3
 800d104:	fa22 f20e 	lsr.w	r2, r2, lr
 800d108:	d8f3      	bhi.n	800d0f2 <__lshift+0x6e>
 800d10a:	ebac 0304 	sub.w	r3, ip, r4
 800d10e:	3b15      	subs	r3, #21
 800d110:	f023 0303 	bic.w	r3, r3, #3
 800d114:	3304      	adds	r3, #4
 800d116:	f104 0015 	add.w	r0, r4, #21
 800d11a:	4584      	cmp	ip, r0
 800d11c:	bf38      	it	cc
 800d11e:	2304      	movcc	r3, #4
 800d120:	50ca      	str	r2, [r1, r3]
 800d122:	b10a      	cbz	r2, 800d128 <__lshift+0xa4>
 800d124:	f108 0602 	add.w	r6, r8, #2
 800d128:	3e01      	subs	r6, #1
 800d12a:	4638      	mov	r0, r7
 800d12c:	612e      	str	r6, [r5, #16]
 800d12e:	4621      	mov	r1, r4
 800d130:	f7ff fdda 	bl	800cce8 <_Bfree>
 800d134:	4628      	mov	r0, r5
 800d136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d13a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d13e:	3301      	adds	r3, #1
 800d140:	e7c5      	b.n	800d0ce <__lshift+0x4a>
 800d142:	3904      	subs	r1, #4
 800d144:	f853 2b04 	ldr.w	r2, [r3], #4
 800d148:	f841 2f04 	str.w	r2, [r1, #4]!
 800d14c:	459c      	cmp	ip, r3
 800d14e:	d8f9      	bhi.n	800d144 <__lshift+0xc0>
 800d150:	e7ea      	b.n	800d128 <__lshift+0xa4>
 800d152:	bf00      	nop
 800d154:	0800e8c0 	.word	0x0800e8c0
 800d158:	0800e8d1 	.word	0x0800e8d1

0800d15c <__mcmp>:
 800d15c:	690a      	ldr	r2, [r1, #16]
 800d15e:	4603      	mov	r3, r0
 800d160:	6900      	ldr	r0, [r0, #16]
 800d162:	1a80      	subs	r0, r0, r2
 800d164:	b530      	push	{r4, r5, lr}
 800d166:	d10e      	bne.n	800d186 <__mcmp+0x2a>
 800d168:	3314      	adds	r3, #20
 800d16a:	3114      	adds	r1, #20
 800d16c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d170:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d174:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d178:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d17c:	4295      	cmp	r5, r2
 800d17e:	d003      	beq.n	800d188 <__mcmp+0x2c>
 800d180:	d205      	bcs.n	800d18e <__mcmp+0x32>
 800d182:	f04f 30ff 	mov.w	r0, #4294967295
 800d186:	bd30      	pop	{r4, r5, pc}
 800d188:	42a3      	cmp	r3, r4
 800d18a:	d3f3      	bcc.n	800d174 <__mcmp+0x18>
 800d18c:	e7fb      	b.n	800d186 <__mcmp+0x2a>
 800d18e:	2001      	movs	r0, #1
 800d190:	e7f9      	b.n	800d186 <__mcmp+0x2a>
	...

0800d194 <__mdiff>:
 800d194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d198:	4689      	mov	r9, r1
 800d19a:	4606      	mov	r6, r0
 800d19c:	4611      	mov	r1, r2
 800d19e:	4648      	mov	r0, r9
 800d1a0:	4614      	mov	r4, r2
 800d1a2:	f7ff ffdb 	bl	800d15c <__mcmp>
 800d1a6:	1e05      	subs	r5, r0, #0
 800d1a8:	d112      	bne.n	800d1d0 <__mdiff+0x3c>
 800d1aa:	4629      	mov	r1, r5
 800d1ac:	4630      	mov	r0, r6
 800d1ae:	f7ff fd5b 	bl	800cc68 <_Balloc>
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	b928      	cbnz	r0, 800d1c2 <__mdiff+0x2e>
 800d1b6:	4b3f      	ldr	r3, [pc, #252]	@ (800d2b4 <__mdiff+0x120>)
 800d1b8:	f240 2137 	movw	r1, #567	@ 0x237
 800d1bc:	483e      	ldr	r0, [pc, #248]	@ (800d2b8 <__mdiff+0x124>)
 800d1be:	f000 fb11 	bl	800d7e4 <__assert_func>
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d1c8:	4610      	mov	r0, r2
 800d1ca:	b003      	add	sp, #12
 800d1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1d0:	bfbc      	itt	lt
 800d1d2:	464b      	movlt	r3, r9
 800d1d4:	46a1      	movlt	r9, r4
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d1dc:	bfba      	itte	lt
 800d1de:	461c      	movlt	r4, r3
 800d1e0:	2501      	movlt	r5, #1
 800d1e2:	2500      	movge	r5, #0
 800d1e4:	f7ff fd40 	bl	800cc68 <_Balloc>
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	b918      	cbnz	r0, 800d1f4 <__mdiff+0x60>
 800d1ec:	4b31      	ldr	r3, [pc, #196]	@ (800d2b4 <__mdiff+0x120>)
 800d1ee:	f240 2145 	movw	r1, #581	@ 0x245
 800d1f2:	e7e3      	b.n	800d1bc <__mdiff+0x28>
 800d1f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d1f8:	6926      	ldr	r6, [r4, #16]
 800d1fa:	60c5      	str	r5, [r0, #12]
 800d1fc:	f109 0310 	add.w	r3, r9, #16
 800d200:	f109 0514 	add.w	r5, r9, #20
 800d204:	f104 0e14 	add.w	lr, r4, #20
 800d208:	f100 0b14 	add.w	fp, r0, #20
 800d20c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d210:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d214:	9301      	str	r3, [sp, #4]
 800d216:	46d9      	mov	r9, fp
 800d218:	f04f 0c00 	mov.w	ip, #0
 800d21c:	9b01      	ldr	r3, [sp, #4]
 800d21e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d222:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d226:	9301      	str	r3, [sp, #4]
 800d228:	fa1f f38a 	uxth.w	r3, sl
 800d22c:	4619      	mov	r1, r3
 800d22e:	b283      	uxth	r3, r0
 800d230:	1acb      	subs	r3, r1, r3
 800d232:	0c00      	lsrs	r0, r0, #16
 800d234:	4463      	add	r3, ip
 800d236:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d23a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d23e:	b29b      	uxth	r3, r3
 800d240:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d244:	4576      	cmp	r6, lr
 800d246:	f849 3b04 	str.w	r3, [r9], #4
 800d24a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d24e:	d8e5      	bhi.n	800d21c <__mdiff+0x88>
 800d250:	1b33      	subs	r3, r6, r4
 800d252:	3b15      	subs	r3, #21
 800d254:	f023 0303 	bic.w	r3, r3, #3
 800d258:	3415      	adds	r4, #21
 800d25a:	3304      	adds	r3, #4
 800d25c:	42a6      	cmp	r6, r4
 800d25e:	bf38      	it	cc
 800d260:	2304      	movcc	r3, #4
 800d262:	441d      	add	r5, r3
 800d264:	445b      	add	r3, fp
 800d266:	461e      	mov	r6, r3
 800d268:	462c      	mov	r4, r5
 800d26a:	4544      	cmp	r4, r8
 800d26c:	d30e      	bcc.n	800d28c <__mdiff+0xf8>
 800d26e:	f108 0103 	add.w	r1, r8, #3
 800d272:	1b49      	subs	r1, r1, r5
 800d274:	f021 0103 	bic.w	r1, r1, #3
 800d278:	3d03      	subs	r5, #3
 800d27a:	45a8      	cmp	r8, r5
 800d27c:	bf38      	it	cc
 800d27e:	2100      	movcc	r1, #0
 800d280:	440b      	add	r3, r1
 800d282:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d286:	b191      	cbz	r1, 800d2ae <__mdiff+0x11a>
 800d288:	6117      	str	r7, [r2, #16]
 800d28a:	e79d      	b.n	800d1c8 <__mdiff+0x34>
 800d28c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d290:	46e6      	mov	lr, ip
 800d292:	0c08      	lsrs	r0, r1, #16
 800d294:	fa1c fc81 	uxtah	ip, ip, r1
 800d298:	4471      	add	r1, lr
 800d29a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d29e:	b289      	uxth	r1, r1
 800d2a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d2a4:	f846 1b04 	str.w	r1, [r6], #4
 800d2a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d2ac:	e7dd      	b.n	800d26a <__mdiff+0xd6>
 800d2ae:	3f01      	subs	r7, #1
 800d2b0:	e7e7      	b.n	800d282 <__mdiff+0xee>
 800d2b2:	bf00      	nop
 800d2b4:	0800e8c0 	.word	0x0800e8c0
 800d2b8:	0800e8d1 	.word	0x0800e8d1

0800d2bc <__d2b>:
 800d2bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d2c0:	460f      	mov	r7, r1
 800d2c2:	2101      	movs	r1, #1
 800d2c4:	ec59 8b10 	vmov	r8, r9, d0
 800d2c8:	4616      	mov	r6, r2
 800d2ca:	f7ff fccd 	bl	800cc68 <_Balloc>
 800d2ce:	4604      	mov	r4, r0
 800d2d0:	b930      	cbnz	r0, 800d2e0 <__d2b+0x24>
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	4b23      	ldr	r3, [pc, #140]	@ (800d364 <__d2b+0xa8>)
 800d2d6:	4824      	ldr	r0, [pc, #144]	@ (800d368 <__d2b+0xac>)
 800d2d8:	f240 310f 	movw	r1, #783	@ 0x30f
 800d2dc:	f000 fa82 	bl	800d7e4 <__assert_func>
 800d2e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d2e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d2e8:	b10d      	cbz	r5, 800d2ee <__d2b+0x32>
 800d2ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d2ee:	9301      	str	r3, [sp, #4]
 800d2f0:	f1b8 0300 	subs.w	r3, r8, #0
 800d2f4:	d023      	beq.n	800d33e <__d2b+0x82>
 800d2f6:	4668      	mov	r0, sp
 800d2f8:	9300      	str	r3, [sp, #0]
 800d2fa:	f7ff fd7c 	bl	800cdf6 <__lo0bits>
 800d2fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d302:	b1d0      	cbz	r0, 800d33a <__d2b+0x7e>
 800d304:	f1c0 0320 	rsb	r3, r0, #32
 800d308:	fa02 f303 	lsl.w	r3, r2, r3
 800d30c:	430b      	orrs	r3, r1
 800d30e:	40c2      	lsrs	r2, r0
 800d310:	6163      	str	r3, [r4, #20]
 800d312:	9201      	str	r2, [sp, #4]
 800d314:	9b01      	ldr	r3, [sp, #4]
 800d316:	61a3      	str	r3, [r4, #24]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	bf0c      	ite	eq
 800d31c:	2201      	moveq	r2, #1
 800d31e:	2202      	movne	r2, #2
 800d320:	6122      	str	r2, [r4, #16]
 800d322:	b1a5      	cbz	r5, 800d34e <__d2b+0x92>
 800d324:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d328:	4405      	add	r5, r0
 800d32a:	603d      	str	r5, [r7, #0]
 800d32c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d330:	6030      	str	r0, [r6, #0]
 800d332:	4620      	mov	r0, r4
 800d334:	b003      	add	sp, #12
 800d336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d33a:	6161      	str	r1, [r4, #20]
 800d33c:	e7ea      	b.n	800d314 <__d2b+0x58>
 800d33e:	a801      	add	r0, sp, #4
 800d340:	f7ff fd59 	bl	800cdf6 <__lo0bits>
 800d344:	9b01      	ldr	r3, [sp, #4]
 800d346:	6163      	str	r3, [r4, #20]
 800d348:	3020      	adds	r0, #32
 800d34a:	2201      	movs	r2, #1
 800d34c:	e7e8      	b.n	800d320 <__d2b+0x64>
 800d34e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d352:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d356:	6038      	str	r0, [r7, #0]
 800d358:	6918      	ldr	r0, [r3, #16]
 800d35a:	f7ff fd2d 	bl	800cdb8 <__hi0bits>
 800d35e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d362:	e7e5      	b.n	800d330 <__d2b+0x74>
 800d364:	0800e8c0 	.word	0x0800e8c0
 800d368:	0800e8d1 	.word	0x0800e8d1

0800d36c <__ssputs_r>:
 800d36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d370:	688e      	ldr	r6, [r1, #8]
 800d372:	461f      	mov	r7, r3
 800d374:	42be      	cmp	r6, r7
 800d376:	680b      	ldr	r3, [r1, #0]
 800d378:	4682      	mov	sl, r0
 800d37a:	460c      	mov	r4, r1
 800d37c:	4690      	mov	r8, r2
 800d37e:	d82d      	bhi.n	800d3dc <__ssputs_r+0x70>
 800d380:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d384:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d388:	d026      	beq.n	800d3d8 <__ssputs_r+0x6c>
 800d38a:	6965      	ldr	r5, [r4, #20]
 800d38c:	6909      	ldr	r1, [r1, #16]
 800d38e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d392:	eba3 0901 	sub.w	r9, r3, r1
 800d396:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d39a:	1c7b      	adds	r3, r7, #1
 800d39c:	444b      	add	r3, r9
 800d39e:	106d      	asrs	r5, r5, #1
 800d3a0:	429d      	cmp	r5, r3
 800d3a2:	bf38      	it	cc
 800d3a4:	461d      	movcc	r5, r3
 800d3a6:	0553      	lsls	r3, r2, #21
 800d3a8:	d527      	bpl.n	800d3fa <__ssputs_r+0x8e>
 800d3aa:	4629      	mov	r1, r5
 800d3ac:	f7ff fbd0 	bl	800cb50 <_malloc_r>
 800d3b0:	4606      	mov	r6, r0
 800d3b2:	b360      	cbz	r0, 800d40e <__ssputs_r+0xa2>
 800d3b4:	6921      	ldr	r1, [r4, #16]
 800d3b6:	464a      	mov	r2, r9
 800d3b8:	f000 fa06 	bl	800d7c8 <memcpy>
 800d3bc:	89a3      	ldrh	r3, [r4, #12]
 800d3be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d3c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3c6:	81a3      	strh	r3, [r4, #12]
 800d3c8:	6126      	str	r6, [r4, #16]
 800d3ca:	6165      	str	r5, [r4, #20]
 800d3cc:	444e      	add	r6, r9
 800d3ce:	eba5 0509 	sub.w	r5, r5, r9
 800d3d2:	6026      	str	r6, [r4, #0]
 800d3d4:	60a5      	str	r5, [r4, #8]
 800d3d6:	463e      	mov	r6, r7
 800d3d8:	42be      	cmp	r6, r7
 800d3da:	d900      	bls.n	800d3de <__ssputs_r+0x72>
 800d3dc:	463e      	mov	r6, r7
 800d3de:	6820      	ldr	r0, [r4, #0]
 800d3e0:	4632      	mov	r2, r6
 800d3e2:	4641      	mov	r1, r8
 800d3e4:	f000 f9c6 	bl	800d774 <memmove>
 800d3e8:	68a3      	ldr	r3, [r4, #8]
 800d3ea:	1b9b      	subs	r3, r3, r6
 800d3ec:	60a3      	str	r3, [r4, #8]
 800d3ee:	6823      	ldr	r3, [r4, #0]
 800d3f0:	4433      	add	r3, r6
 800d3f2:	6023      	str	r3, [r4, #0]
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3fa:	462a      	mov	r2, r5
 800d3fc:	f000 fa36 	bl	800d86c <_realloc_r>
 800d400:	4606      	mov	r6, r0
 800d402:	2800      	cmp	r0, #0
 800d404:	d1e0      	bne.n	800d3c8 <__ssputs_r+0x5c>
 800d406:	6921      	ldr	r1, [r4, #16]
 800d408:	4650      	mov	r0, sl
 800d40a:	f7ff fb2d 	bl	800ca68 <_free_r>
 800d40e:	230c      	movs	r3, #12
 800d410:	f8ca 3000 	str.w	r3, [sl]
 800d414:	89a3      	ldrh	r3, [r4, #12]
 800d416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d41a:	81a3      	strh	r3, [r4, #12]
 800d41c:	f04f 30ff 	mov.w	r0, #4294967295
 800d420:	e7e9      	b.n	800d3f6 <__ssputs_r+0x8a>
	...

0800d424 <_svfiprintf_r>:
 800d424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d428:	4698      	mov	r8, r3
 800d42a:	898b      	ldrh	r3, [r1, #12]
 800d42c:	061b      	lsls	r3, r3, #24
 800d42e:	b09d      	sub	sp, #116	@ 0x74
 800d430:	4607      	mov	r7, r0
 800d432:	460d      	mov	r5, r1
 800d434:	4614      	mov	r4, r2
 800d436:	d510      	bpl.n	800d45a <_svfiprintf_r+0x36>
 800d438:	690b      	ldr	r3, [r1, #16]
 800d43a:	b973      	cbnz	r3, 800d45a <_svfiprintf_r+0x36>
 800d43c:	2140      	movs	r1, #64	@ 0x40
 800d43e:	f7ff fb87 	bl	800cb50 <_malloc_r>
 800d442:	6028      	str	r0, [r5, #0]
 800d444:	6128      	str	r0, [r5, #16]
 800d446:	b930      	cbnz	r0, 800d456 <_svfiprintf_r+0x32>
 800d448:	230c      	movs	r3, #12
 800d44a:	603b      	str	r3, [r7, #0]
 800d44c:	f04f 30ff 	mov.w	r0, #4294967295
 800d450:	b01d      	add	sp, #116	@ 0x74
 800d452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d456:	2340      	movs	r3, #64	@ 0x40
 800d458:	616b      	str	r3, [r5, #20]
 800d45a:	2300      	movs	r3, #0
 800d45c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d45e:	2320      	movs	r3, #32
 800d460:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d464:	f8cd 800c 	str.w	r8, [sp, #12]
 800d468:	2330      	movs	r3, #48	@ 0x30
 800d46a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d608 <_svfiprintf_r+0x1e4>
 800d46e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d472:	f04f 0901 	mov.w	r9, #1
 800d476:	4623      	mov	r3, r4
 800d478:	469a      	mov	sl, r3
 800d47a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d47e:	b10a      	cbz	r2, 800d484 <_svfiprintf_r+0x60>
 800d480:	2a25      	cmp	r2, #37	@ 0x25
 800d482:	d1f9      	bne.n	800d478 <_svfiprintf_r+0x54>
 800d484:	ebba 0b04 	subs.w	fp, sl, r4
 800d488:	d00b      	beq.n	800d4a2 <_svfiprintf_r+0x7e>
 800d48a:	465b      	mov	r3, fp
 800d48c:	4622      	mov	r2, r4
 800d48e:	4629      	mov	r1, r5
 800d490:	4638      	mov	r0, r7
 800d492:	f7ff ff6b 	bl	800d36c <__ssputs_r>
 800d496:	3001      	adds	r0, #1
 800d498:	f000 80a7 	beq.w	800d5ea <_svfiprintf_r+0x1c6>
 800d49c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d49e:	445a      	add	r2, fp
 800d4a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d4a2:	f89a 3000 	ldrb.w	r3, [sl]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	f000 809f 	beq.w	800d5ea <_svfiprintf_r+0x1c6>
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d4b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4b6:	f10a 0a01 	add.w	sl, sl, #1
 800d4ba:	9304      	str	r3, [sp, #16]
 800d4bc:	9307      	str	r3, [sp, #28]
 800d4be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d4c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d4c4:	4654      	mov	r4, sl
 800d4c6:	2205      	movs	r2, #5
 800d4c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4cc:	484e      	ldr	r0, [pc, #312]	@ (800d608 <_svfiprintf_r+0x1e4>)
 800d4ce:	f7f2 fe7f 	bl	80001d0 <memchr>
 800d4d2:	9a04      	ldr	r2, [sp, #16]
 800d4d4:	b9d8      	cbnz	r0, 800d50e <_svfiprintf_r+0xea>
 800d4d6:	06d0      	lsls	r0, r2, #27
 800d4d8:	bf44      	itt	mi
 800d4da:	2320      	movmi	r3, #32
 800d4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4e0:	0711      	lsls	r1, r2, #28
 800d4e2:	bf44      	itt	mi
 800d4e4:	232b      	movmi	r3, #43	@ 0x2b
 800d4e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4ea:	f89a 3000 	ldrb.w	r3, [sl]
 800d4ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4f0:	d015      	beq.n	800d51e <_svfiprintf_r+0xfa>
 800d4f2:	9a07      	ldr	r2, [sp, #28]
 800d4f4:	4654      	mov	r4, sl
 800d4f6:	2000      	movs	r0, #0
 800d4f8:	f04f 0c0a 	mov.w	ip, #10
 800d4fc:	4621      	mov	r1, r4
 800d4fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d502:	3b30      	subs	r3, #48	@ 0x30
 800d504:	2b09      	cmp	r3, #9
 800d506:	d94b      	bls.n	800d5a0 <_svfiprintf_r+0x17c>
 800d508:	b1b0      	cbz	r0, 800d538 <_svfiprintf_r+0x114>
 800d50a:	9207      	str	r2, [sp, #28]
 800d50c:	e014      	b.n	800d538 <_svfiprintf_r+0x114>
 800d50e:	eba0 0308 	sub.w	r3, r0, r8
 800d512:	fa09 f303 	lsl.w	r3, r9, r3
 800d516:	4313      	orrs	r3, r2
 800d518:	9304      	str	r3, [sp, #16]
 800d51a:	46a2      	mov	sl, r4
 800d51c:	e7d2      	b.n	800d4c4 <_svfiprintf_r+0xa0>
 800d51e:	9b03      	ldr	r3, [sp, #12]
 800d520:	1d19      	adds	r1, r3, #4
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	9103      	str	r1, [sp, #12]
 800d526:	2b00      	cmp	r3, #0
 800d528:	bfbb      	ittet	lt
 800d52a:	425b      	neglt	r3, r3
 800d52c:	f042 0202 	orrlt.w	r2, r2, #2
 800d530:	9307      	strge	r3, [sp, #28]
 800d532:	9307      	strlt	r3, [sp, #28]
 800d534:	bfb8      	it	lt
 800d536:	9204      	strlt	r2, [sp, #16]
 800d538:	7823      	ldrb	r3, [r4, #0]
 800d53a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d53c:	d10a      	bne.n	800d554 <_svfiprintf_r+0x130>
 800d53e:	7863      	ldrb	r3, [r4, #1]
 800d540:	2b2a      	cmp	r3, #42	@ 0x2a
 800d542:	d132      	bne.n	800d5aa <_svfiprintf_r+0x186>
 800d544:	9b03      	ldr	r3, [sp, #12]
 800d546:	1d1a      	adds	r2, r3, #4
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	9203      	str	r2, [sp, #12]
 800d54c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d550:	3402      	adds	r4, #2
 800d552:	9305      	str	r3, [sp, #20]
 800d554:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d618 <_svfiprintf_r+0x1f4>
 800d558:	7821      	ldrb	r1, [r4, #0]
 800d55a:	2203      	movs	r2, #3
 800d55c:	4650      	mov	r0, sl
 800d55e:	f7f2 fe37 	bl	80001d0 <memchr>
 800d562:	b138      	cbz	r0, 800d574 <_svfiprintf_r+0x150>
 800d564:	9b04      	ldr	r3, [sp, #16]
 800d566:	eba0 000a 	sub.w	r0, r0, sl
 800d56a:	2240      	movs	r2, #64	@ 0x40
 800d56c:	4082      	lsls	r2, r0
 800d56e:	4313      	orrs	r3, r2
 800d570:	3401      	adds	r4, #1
 800d572:	9304      	str	r3, [sp, #16]
 800d574:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d578:	4824      	ldr	r0, [pc, #144]	@ (800d60c <_svfiprintf_r+0x1e8>)
 800d57a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d57e:	2206      	movs	r2, #6
 800d580:	f7f2 fe26 	bl	80001d0 <memchr>
 800d584:	2800      	cmp	r0, #0
 800d586:	d036      	beq.n	800d5f6 <_svfiprintf_r+0x1d2>
 800d588:	4b21      	ldr	r3, [pc, #132]	@ (800d610 <_svfiprintf_r+0x1ec>)
 800d58a:	bb1b      	cbnz	r3, 800d5d4 <_svfiprintf_r+0x1b0>
 800d58c:	9b03      	ldr	r3, [sp, #12]
 800d58e:	3307      	adds	r3, #7
 800d590:	f023 0307 	bic.w	r3, r3, #7
 800d594:	3308      	adds	r3, #8
 800d596:	9303      	str	r3, [sp, #12]
 800d598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d59a:	4433      	add	r3, r6
 800d59c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d59e:	e76a      	b.n	800d476 <_svfiprintf_r+0x52>
 800d5a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5a4:	460c      	mov	r4, r1
 800d5a6:	2001      	movs	r0, #1
 800d5a8:	e7a8      	b.n	800d4fc <_svfiprintf_r+0xd8>
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	3401      	adds	r4, #1
 800d5ae:	9305      	str	r3, [sp, #20]
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	f04f 0c0a 	mov.w	ip, #10
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5bc:	3a30      	subs	r2, #48	@ 0x30
 800d5be:	2a09      	cmp	r2, #9
 800d5c0:	d903      	bls.n	800d5ca <_svfiprintf_r+0x1a6>
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d0c6      	beq.n	800d554 <_svfiprintf_r+0x130>
 800d5c6:	9105      	str	r1, [sp, #20]
 800d5c8:	e7c4      	b.n	800d554 <_svfiprintf_r+0x130>
 800d5ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5ce:	4604      	mov	r4, r0
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	e7f0      	b.n	800d5b6 <_svfiprintf_r+0x192>
 800d5d4:	ab03      	add	r3, sp, #12
 800d5d6:	9300      	str	r3, [sp, #0]
 800d5d8:	462a      	mov	r2, r5
 800d5da:	4b0e      	ldr	r3, [pc, #56]	@ (800d614 <_svfiprintf_r+0x1f0>)
 800d5dc:	a904      	add	r1, sp, #16
 800d5de:	4638      	mov	r0, r7
 800d5e0:	f7fd fe98 	bl	800b314 <_printf_float>
 800d5e4:	1c42      	adds	r2, r0, #1
 800d5e6:	4606      	mov	r6, r0
 800d5e8:	d1d6      	bne.n	800d598 <_svfiprintf_r+0x174>
 800d5ea:	89ab      	ldrh	r3, [r5, #12]
 800d5ec:	065b      	lsls	r3, r3, #25
 800d5ee:	f53f af2d 	bmi.w	800d44c <_svfiprintf_r+0x28>
 800d5f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5f4:	e72c      	b.n	800d450 <_svfiprintf_r+0x2c>
 800d5f6:	ab03      	add	r3, sp, #12
 800d5f8:	9300      	str	r3, [sp, #0]
 800d5fa:	462a      	mov	r2, r5
 800d5fc:	4b05      	ldr	r3, [pc, #20]	@ (800d614 <_svfiprintf_r+0x1f0>)
 800d5fe:	a904      	add	r1, sp, #16
 800d600:	4638      	mov	r0, r7
 800d602:	f7fe f91f 	bl	800b844 <_printf_i>
 800d606:	e7ed      	b.n	800d5e4 <_svfiprintf_r+0x1c0>
 800d608:	0800ea28 	.word	0x0800ea28
 800d60c:	0800ea32 	.word	0x0800ea32
 800d610:	0800b315 	.word	0x0800b315
 800d614:	0800d36d 	.word	0x0800d36d
 800d618:	0800ea2e 	.word	0x0800ea2e

0800d61c <__sflush_r>:
 800d61c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d624:	0716      	lsls	r6, r2, #28
 800d626:	4605      	mov	r5, r0
 800d628:	460c      	mov	r4, r1
 800d62a:	d454      	bmi.n	800d6d6 <__sflush_r+0xba>
 800d62c:	684b      	ldr	r3, [r1, #4]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	dc02      	bgt.n	800d638 <__sflush_r+0x1c>
 800d632:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d634:	2b00      	cmp	r3, #0
 800d636:	dd48      	ble.n	800d6ca <__sflush_r+0xae>
 800d638:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d63a:	2e00      	cmp	r6, #0
 800d63c:	d045      	beq.n	800d6ca <__sflush_r+0xae>
 800d63e:	2300      	movs	r3, #0
 800d640:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d644:	682f      	ldr	r7, [r5, #0]
 800d646:	6a21      	ldr	r1, [r4, #32]
 800d648:	602b      	str	r3, [r5, #0]
 800d64a:	d030      	beq.n	800d6ae <__sflush_r+0x92>
 800d64c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d64e:	89a3      	ldrh	r3, [r4, #12]
 800d650:	0759      	lsls	r1, r3, #29
 800d652:	d505      	bpl.n	800d660 <__sflush_r+0x44>
 800d654:	6863      	ldr	r3, [r4, #4]
 800d656:	1ad2      	subs	r2, r2, r3
 800d658:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d65a:	b10b      	cbz	r3, 800d660 <__sflush_r+0x44>
 800d65c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d65e:	1ad2      	subs	r2, r2, r3
 800d660:	2300      	movs	r3, #0
 800d662:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d664:	6a21      	ldr	r1, [r4, #32]
 800d666:	4628      	mov	r0, r5
 800d668:	47b0      	blx	r6
 800d66a:	1c43      	adds	r3, r0, #1
 800d66c:	89a3      	ldrh	r3, [r4, #12]
 800d66e:	d106      	bne.n	800d67e <__sflush_r+0x62>
 800d670:	6829      	ldr	r1, [r5, #0]
 800d672:	291d      	cmp	r1, #29
 800d674:	d82b      	bhi.n	800d6ce <__sflush_r+0xb2>
 800d676:	4a2a      	ldr	r2, [pc, #168]	@ (800d720 <__sflush_r+0x104>)
 800d678:	410a      	asrs	r2, r1
 800d67a:	07d6      	lsls	r6, r2, #31
 800d67c:	d427      	bmi.n	800d6ce <__sflush_r+0xb2>
 800d67e:	2200      	movs	r2, #0
 800d680:	6062      	str	r2, [r4, #4]
 800d682:	04d9      	lsls	r1, r3, #19
 800d684:	6922      	ldr	r2, [r4, #16]
 800d686:	6022      	str	r2, [r4, #0]
 800d688:	d504      	bpl.n	800d694 <__sflush_r+0x78>
 800d68a:	1c42      	adds	r2, r0, #1
 800d68c:	d101      	bne.n	800d692 <__sflush_r+0x76>
 800d68e:	682b      	ldr	r3, [r5, #0]
 800d690:	b903      	cbnz	r3, 800d694 <__sflush_r+0x78>
 800d692:	6560      	str	r0, [r4, #84]	@ 0x54
 800d694:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d696:	602f      	str	r7, [r5, #0]
 800d698:	b1b9      	cbz	r1, 800d6ca <__sflush_r+0xae>
 800d69a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d69e:	4299      	cmp	r1, r3
 800d6a0:	d002      	beq.n	800d6a8 <__sflush_r+0x8c>
 800d6a2:	4628      	mov	r0, r5
 800d6a4:	f7ff f9e0 	bl	800ca68 <_free_r>
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	6363      	str	r3, [r4, #52]	@ 0x34
 800d6ac:	e00d      	b.n	800d6ca <__sflush_r+0xae>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	4628      	mov	r0, r5
 800d6b2:	47b0      	blx	r6
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	1c50      	adds	r0, r2, #1
 800d6b8:	d1c9      	bne.n	800d64e <__sflush_r+0x32>
 800d6ba:	682b      	ldr	r3, [r5, #0]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d0c6      	beq.n	800d64e <__sflush_r+0x32>
 800d6c0:	2b1d      	cmp	r3, #29
 800d6c2:	d001      	beq.n	800d6c8 <__sflush_r+0xac>
 800d6c4:	2b16      	cmp	r3, #22
 800d6c6:	d11e      	bne.n	800d706 <__sflush_r+0xea>
 800d6c8:	602f      	str	r7, [r5, #0]
 800d6ca:	2000      	movs	r0, #0
 800d6cc:	e022      	b.n	800d714 <__sflush_r+0xf8>
 800d6ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6d2:	b21b      	sxth	r3, r3
 800d6d4:	e01b      	b.n	800d70e <__sflush_r+0xf2>
 800d6d6:	690f      	ldr	r7, [r1, #16]
 800d6d8:	2f00      	cmp	r7, #0
 800d6da:	d0f6      	beq.n	800d6ca <__sflush_r+0xae>
 800d6dc:	0793      	lsls	r3, r2, #30
 800d6de:	680e      	ldr	r6, [r1, #0]
 800d6e0:	bf08      	it	eq
 800d6e2:	694b      	ldreq	r3, [r1, #20]
 800d6e4:	600f      	str	r7, [r1, #0]
 800d6e6:	bf18      	it	ne
 800d6e8:	2300      	movne	r3, #0
 800d6ea:	eba6 0807 	sub.w	r8, r6, r7
 800d6ee:	608b      	str	r3, [r1, #8]
 800d6f0:	f1b8 0f00 	cmp.w	r8, #0
 800d6f4:	dde9      	ble.n	800d6ca <__sflush_r+0xae>
 800d6f6:	6a21      	ldr	r1, [r4, #32]
 800d6f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d6fa:	4643      	mov	r3, r8
 800d6fc:	463a      	mov	r2, r7
 800d6fe:	4628      	mov	r0, r5
 800d700:	47b0      	blx	r6
 800d702:	2800      	cmp	r0, #0
 800d704:	dc08      	bgt.n	800d718 <__sflush_r+0xfc>
 800d706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d70a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d70e:	81a3      	strh	r3, [r4, #12]
 800d710:	f04f 30ff 	mov.w	r0, #4294967295
 800d714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d718:	4407      	add	r7, r0
 800d71a:	eba8 0800 	sub.w	r8, r8, r0
 800d71e:	e7e7      	b.n	800d6f0 <__sflush_r+0xd4>
 800d720:	dfbffffe 	.word	0xdfbffffe

0800d724 <_fflush_r>:
 800d724:	b538      	push	{r3, r4, r5, lr}
 800d726:	690b      	ldr	r3, [r1, #16]
 800d728:	4605      	mov	r5, r0
 800d72a:	460c      	mov	r4, r1
 800d72c:	b913      	cbnz	r3, 800d734 <_fflush_r+0x10>
 800d72e:	2500      	movs	r5, #0
 800d730:	4628      	mov	r0, r5
 800d732:	bd38      	pop	{r3, r4, r5, pc}
 800d734:	b118      	cbz	r0, 800d73e <_fflush_r+0x1a>
 800d736:	6a03      	ldr	r3, [r0, #32]
 800d738:	b90b      	cbnz	r3, 800d73e <_fflush_r+0x1a>
 800d73a:	f7fe fa2f 	bl	800bb9c <__sinit>
 800d73e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d0f3      	beq.n	800d72e <_fflush_r+0xa>
 800d746:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d748:	07d0      	lsls	r0, r2, #31
 800d74a:	d404      	bmi.n	800d756 <_fflush_r+0x32>
 800d74c:	0599      	lsls	r1, r3, #22
 800d74e:	d402      	bmi.n	800d756 <_fflush_r+0x32>
 800d750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d752:	f7fe fb3a 	bl	800bdca <__retarget_lock_acquire_recursive>
 800d756:	4628      	mov	r0, r5
 800d758:	4621      	mov	r1, r4
 800d75a:	f7ff ff5f 	bl	800d61c <__sflush_r>
 800d75e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d760:	07da      	lsls	r2, r3, #31
 800d762:	4605      	mov	r5, r0
 800d764:	d4e4      	bmi.n	800d730 <_fflush_r+0xc>
 800d766:	89a3      	ldrh	r3, [r4, #12]
 800d768:	059b      	lsls	r3, r3, #22
 800d76a:	d4e1      	bmi.n	800d730 <_fflush_r+0xc>
 800d76c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d76e:	f7fe fb2d 	bl	800bdcc <__retarget_lock_release_recursive>
 800d772:	e7dd      	b.n	800d730 <_fflush_r+0xc>

0800d774 <memmove>:
 800d774:	4288      	cmp	r0, r1
 800d776:	b510      	push	{r4, lr}
 800d778:	eb01 0402 	add.w	r4, r1, r2
 800d77c:	d902      	bls.n	800d784 <memmove+0x10>
 800d77e:	4284      	cmp	r4, r0
 800d780:	4623      	mov	r3, r4
 800d782:	d807      	bhi.n	800d794 <memmove+0x20>
 800d784:	1e43      	subs	r3, r0, #1
 800d786:	42a1      	cmp	r1, r4
 800d788:	d008      	beq.n	800d79c <memmove+0x28>
 800d78a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d78e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d792:	e7f8      	b.n	800d786 <memmove+0x12>
 800d794:	4402      	add	r2, r0
 800d796:	4601      	mov	r1, r0
 800d798:	428a      	cmp	r2, r1
 800d79a:	d100      	bne.n	800d79e <memmove+0x2a>
 800d79c:	bd10      	pop	{r4, pc}
 800d79e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7a6:	e7f7      	b.n	800d798 <memmove+0x24>

0800d7a8 <_sbrk_r>:
 800d7a8:	b538      	push	{r3, r4, r5, lr}
 800d7aa:	4d06      	ldr	r5, [pc, #24]	@ (800d7c4 <_sbrk_r+0x1c>)
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	4604      	mov	r4, r0
 800d7b0:	4608      	mov	r0, r1
 800d7b2:	602b      	str	r3, [r5, #0]
 800d7b4:	f7f4 ff6a 	bl	800268c <_sbrk>
 800d7b8:	1c43      	adds	r3, r0, #1
 800d7ba:	d102      	bne.n	800d7c2 <_sbrk_r+0x1a>
 800d7bc:	682b      	ldr	r3, [r5, #0]
 800d7be:	b103      	cbz	r3, 800d7c2 <_sbrk_r+0x1a>
 800d7c0:	6023      	str	r3, [r4, #0]
 800d7c2:	bd38      	pop	{r3, r4, r5, pc}
 800d7c4:	2000234c 	.word	0x2000234c

0800d7c8 <memcpy>:
 800d7c8:	440a      	add	r2, r1
 800d7ca:	4291      	cmp	r1, r2
 800d7cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d7d0:	d100      	bne.n	800d7d4 <memcpy+0xc>
 800d7d2:	4770      	bx	lr
 800d7d4:	b510      	push	{r4, lr}
 800d7d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7de:	4291      	cmp	r1, r2
 800d7e0:	d1f9      	bne.n	800d7d6 <memcpy+0xe>
 800d7e2:	bd10      	pop	{r4, pc}

0800d7e4 <__assert_func>:
 800d7e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7e6:	4614      	mov	r4, r2
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	4b09      	ldr	r3, [pc, #36]	@ (800d810 <__assert_func+0x2c>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	4605      	mov	r5, r0
 800d7f0:	68d8      	ldr	r0, [r3, #12]
 800d7f2:	b954      	cbnz	r4, 800d80a <__assert_func+0x26>
 800d7f4:	4b07      	ldr	r3, [pc, #28]	@ (800d814 <__assert_func+0x30>)
 800d7f6:	461c      	mov	r4, r3
 800d7f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7fc:	9100      	str	r1, [sp, #0]
 800d7fe:	462b      	mov	r3, r5
 800d800:	4905      	ldr	r1, [pc, #20]	@ (800d818 <__assert_func+0x34>)
 800d802:	f000 f86f 	bl	800d8e4 <fiprintf>
 800d806:	f000 f87f 	bl	800d908 <abort>
 800d80a:	4b04      	ldr	r3, [pc, #16]	@ (800d81c <__assert_func+0x38>)
 800d80c:	e7f4      	b.n	800d7f8 <__assert_func+0x14>
 800d80e:	bf00      	nop
 800d810:	2000010c 	.word	0x2000010c
 800d814:	0800ea7e 	.word	0x0800ea7e
 800d818:	0800ea50 	.word	0x0800ea50
 800d81c:	0800ea43 	.word	0x0800ea43

0800d820 <_calloc_r>:
 800d820:	b570      	push	{r4, r5, r6, lr}
 800d822:	fba1 5402 	umull	r5, r4, r1, r2
 800d826:	b93c      	cbnz	r4, 800d838 <_calloc_r+0x18>
 800d828:	4629      	mov	r1, r5
 800d82a:	f7ff f991 	bl	800cb50 <_malloc_r>
 800d82e:	4606      	mov	r6, r0
 800d830:	b928      	cbnz	r0, 800d83e <_calloc_r+0x1e>
 800d832:	2600      	movs	r6, #0
 800d834:	4630      	mov	r0, r6
 800d836:	bd70      	pop	{r4, r5, r6, pc}
 800d838:	220c      	movs	r2, #12
 800d83a:	6002      	str	r2, [r0, #0]
 800d83c:	e7f9      	b.n	800d832 <_calloc_r+0x12>
 800d83e:	462a      	mov	r2, r5
 800d840:	4621      	mov	r1, r4
 800d842:	f7fe fa44 	bl	800bcce <memset>
 800d846:	e7f5      	b.n	800d834 <_calloc_r+0x14>

0800d848 <__ascii_mbtowc>:
 800d848:	b082      	sub	sp, #8
 800d84a:	b901      	cbnz	r1, 800d84e <__ascii_mbtowc+0x6>
 800d84c:	a901      	add	r1, sp, #4
 800d84e:	b142      	cbz	r2, 800d862 <__ascii_mbtowc+0x1a>
 800d850:	b14b      	cbz	r3, 800d866 <__ascii_mbtowc+0x1e>
 800d852:	7813      	ldrb	r3, [r2, #0]
 800d854:	600b      	str	r3, [r1, #0]
 800d856:	7812      	ldrb	r2, [r2, #0]
 800d858:	1e10      	subs	r0, r2, #0
 800d85a:	bf18      	it	ne
 800d85c:	2001      	movne	r0, #1
 800d85e:	b002      	add	sp, #8
 800d860:	4770      	bx	lr
 800d862:	4610      	mov	r0, r2
 800d864:	e7fb      	b.n	800d85e <__ascii_mbtowc+0x16>
 800d866:	f06f 0001 	mvn.w	r0, #1
 800d86a:	e7f8      	b.n	800d85e <__ascii_mbtowc+0x16>

0800d86c <_realloc_r>:
 800d86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d870:	4680      	mov	r8, r0
 800d872:	4615      	mov	r5, r2
 800d874:	460c      	mov	r4, r1
 800d876:	b921      	cbnz	r1, 800d882 <_realloc_r+0x16>
 800d878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d87c:	4611      	mov	r1, r2
 800d87e:	f7ff b967 	b.w	800cb50 <_malloc_r>
 800d882:	b92a      	cbnz	r2, 800d890 <_realloc_r+0x24>
 800d884:	f7ff f8f0 	bl	800ca68 <_free_r>
 800d888:	2400      	movs	r4, #0
 800d88a:	4620      	mov	r0, r4
 800d88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d890:	f000 f841 	bl	800d916 <_malloc_usable_size_r>
 800d894:	4285      	cmp	r5, r0
 800d896:	4606      	mov	r6, r0
 800d898:	d802      	bhi.n	800d8a0 <_realloc_r+0x34>
 800d89a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d89e:	d8f4      	bhi.n	800d88a <_realloc_r+0x1e>
 800d8a0:	4629      	mov	r1, r5
 800d8a2:	4640      	mov	r0, r8
 800d8a4:	f7ff f954 	bl	800cb50 <_malloc_r>
 800d8a8:	4607      	mov	r7, r0
 800d8aa:	2800      	cmp	r0, #0
 800d8ac:	d0ec      	beq.n	800d888 <_realloc_r+0x1c>
 800d8ae:	42b5      	cmp	r5, r6
 800d8b0:	462a      	mov	r2, r5
 800d8b2:	4621      	mov	r1, r4
 800d8b4:	bf28      	it	cs
 800d8b6:	4632      	movcs	r2, r6
 800d8b8:	f7ff ff86 	bl	800d7c8 <memcpy>
 800d8bc:	4621      	mov	r1, r4
 800d8be:	4640      	mov	r0, r8
 800d8c0:	f7ff f8d2 	bl	800ca68 <_free_r>
 800d8c4:	463c      	mov	r4, r7
 800d8c6:	e7e0      	b.n	800d88a <_realloc_r+0x1e>

0800d8c8 <__ascii_wctomb>:
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	4608      	mov	r0, r1
 800d8cc:	b141      	cbz	r1, 800d8e0 <__ascii_wctomb+0x18>
 800d8ce:	2aff      	cmp	r2, #255	@ 0xff
 800d8d0:	d904      	bls.n	800d8dc <__ascii_wctomb+0x14>
 800d8d2:	228a      	movs	r2, #138	@ 0x8a
 800d8d4:	601a      	str	r2, [r3, #0]
 800d8d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8da:	4770      	bx	lr
 800d8dc:	700a      	strb	r2, [r1, #0]
 800d8de:	2001      	movs	r0, #1
 800d8e0:	4770      	bx	lr
	...

0800d8e4 <fiprintf>:
 800d8e4:	b40e      	push	{r1, r2, r3}
 800d8e6:	b503      	push	{r0, r1, lr}
 800d8e8:	4601      	mov	r1, r0
 800d8ea:	ab03      	add	r3, sp, #12
 800d8ec:	4805      	ldr	r0, [pc, #20]	@ (800d904 <fiprintf+0x20>)
 800d8ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8f2:	6800      	ldr	r0, [r0, #0]
 800d8f4:	9301      	str	r3, [sp, #4]
 800d8f6:	f000 f83f 	bl	800d978 <_vfiprintf_r>
 800d8fa:	b002      	add	sp, #8
 800d8fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d900:	b003      	add	sp, #12
 800d902:	4770      	bx	lr
 800d904:	2000010c 	.word	0x2000010c

0800d908 <abort>:
 800d908:	b508      	push	{r3, lr}
 800d90a:	2006      	movs	r0, #6
 800d90c:	f000 fa08 	bl	800dd20 <raise>
 800d910:	2001      	movs	r0, #1
 800d912:	f7f4 fe43 	bl	800259c <_exit>

0800d916 <_malloc_usable_size_r>:
 800d916:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d91a:	1f18      	subs	r0, r3, #4
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	bfbc      	itt	lt
 800d920:	580b      	ldrlt	r3, [r1, r0]
 800d922:	18c0      	addlt	r0, r0, r3
 800d924:	4770      	bx	lr

0800d926 <__sfputc_r>:
 800d926:	6893      	ldr	r3, [r2, #8]
 800d928:	3b01      	subs	r3, #1
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	b410      	push	{r4}
 800d92e:	6093      	str	r3, [r2, #8]
 800d930:	da08      	bge.n	800d944 <__sfputc_r+0x1e>
 800d932:	6994      	ldr	r4, [r2, #24]
 800d934:	42a3      	cmp	r3, r4
 800d936:	db01      	blt.n	800d93c <__sfputc_r+0x16>
 800d938:	290a      	cmp	r1, #10
 800d93a:	d103      	bne.n	800d944 <__sfputc_r+0x1e>
 800d93c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d940:	f000 b932 	b.w	800dba8 <__swbuf_r>
 800d944:	6813      	ldr	r3, [r2, #0]
 800d946:	1c58      	adds	r0, r3, #1
 800d948:	6010      	str	r0, [r2, #0]
 800d94a:	7019      	strb	r1, [r3, #0]
 800d94c:	4608      	mov	r0, r1
 800d94e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d952:	4770      	bx	lr

0800d954 <__sfputs_r>:
 800d954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d956:	4606      	mov	r6, r0
 800d958:	460f      	mov	r7, r1
 800d95a:	4614      	mov	r4, r2
 800d95c:	18d5      	adds	r5, r2, r3
 800d95e:	42ac      	cmp	r4, r5
 800d960:	d101      	bne.n	800d966 <__sfputs_r+0x12>
 800d962:	2000      	movs	r0, #0
 800d964:	e007      	b.n	800d976 <__sfputs_r+0x22>
 800d966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d96a:	463a      	mov	r2, r7
 800d96c:	4630      	mov	r0, r6
 800d96e:	f7ff ffda 	bl	800d926 <__sfputc_r>
 800d972:	1c43      	adds	r3, r0, #1
 800d974:	d1f3      	bne.n	800d95e <__sfputs_r+0xa>
 800d976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d978 <_vfiprintf_r>:
 800d978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d97c:	460d      	mov	r5, r1
 800d97e:	b09d      	sub	sp, #116	@ 0x74
 800d980:	4614      	mov	r4, r2
 800d982:	4698      	mov	r8, r3
 800d984:	4606      	mov	r6, r0
 800d986:	b118      	cbz	r0, 800d990 <_vfiprintf_r+0x18>
 800d988:	6a03      	ldr	r3, [r0, #32]
 800d98a:	b90b      	cbnz	r3, 800d990 <_vfiprintf_r+0x18>
 800d98c:	f7fe f906 	bl	800bb9c <__sinit>
 800d990:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d992:	07d9      	lsls	r1, r3, #31
 800d994:	d405      	bmi.n	800d9a2 <_vfiprintf_r+0x2a>
 800d996:	89ab      	ldrh	r3, [r5, #12]
 800d998:	059a      	lsls	r2, r3, #22
 800d99a:	d402      	bmi.n	800d9a2 <_vfiprintf_r+0x2a>
 800d99c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d99e:	f7fe fa14 	bl	800bdca <__retarget_lock_acquire_recursive>
 800d9a2:	89ab      	ldrh	r3, [r5, #12]
 800d9a4:	071b      	lsls	r3, r3, #28
 800d9a6:	d501      	bpl.n	800d9ac <_vfiprintf_r+0x34>
 800d9a8:	692b      	ldr	r3, [r5, #16]
 800d9aa:	b99b      	cbnz	r3, 800d9d4 <_vfiprintf_r+0x5c>
 800d9ac:	4629      	mov	r1, r5
 800d9ae:	4630      	mov	r0, r6
 800d9b0:	f000 f938 	bl	800dc24 <__swsetup_r>
 800d9b4:	b170      	cbz	r0, 800d9d4 <_vfiprintf_r+0x5c>
 800d9b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d9b8:	07dc      	lsls	r4, r3, #31
 800d9ba:	d504      	bpl.n	800d9c6 <_vfiprintf_r+0x4e>
 800d9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d9c0:	b01d      	add	sp, #116	@ 0x74
 800d9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9c6:	89ab      	ldrh	r3, [r5, #12]
 800d9c8:	0598      	lsls	r0, r3, #22
 800d9ca:	d4f7      	bmi.n	800d9bc <_vfiprintf_r+0x44>
 800d9cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d9ce:	f7fe f9fd 	bl	800bdcc <__retarget_lock_release_recursive>
 800d9d2:	e7f3      	b.n	800d9bc <_vfiprintf_r+0x44>
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9d8:	2320      	movs	r3, #32
 800d9da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d9de:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9e2:	2330      	movs	r3, #48	@ 0x30
 800d9e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800db94 <_vfiprintf_r+0x21c>
 800d9e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d9ec:	f04f 0901 	mov.w	r9, #1
 800d9f0:	4623      	mov	r3, r4
 800d9f2:	469a      	mov	sl, r3
 800d9f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9f8:	b10a      	cbz	r2, 800d9fe <_vfiprintf_r+0x86>
 800d9fa:	2a25      	cmp	r2, #37	@ 0x25
 800d9fc:	d1f9      	bne.n	800d9f2 <_vfiprintf_r+0x7a>
 800d9fe:	ebba 0b04 	subs.w	fp, sl, r4
 800da02:	d00b      	beq.n	800da1c <_vfiprintf_r+0xa4>
 800da04:	465b      	mov	r3, fp
 800da06:	4622      	mov	r2, r4
 800da08:	4629      	mov	r1, r5
 800da0a:	4630      	mov	r0, r6
 800da0c:	f7ff ffa2 	bl	800d954 <__sfputs_r>
 800da10:	3001      	adds	r0, #1
 800da12:	f000 80a7 	beq.w	800db64 <_vfiprintf_r+0x1ec>
 800da16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da18:	445a      	add	r2, fp
 800da1a:	9209      	str	r2, [sp, #36]	@ 0x24
 800da1c:	f89a 3000 	ldrb.w	r3, [sl]
 800da20:	2b00      	cmp	r3, #0
 800da22:	f000 809f 	beq.w	800db64 <_vfiprintf_r+0x1ec>
 800da26:	2300      	movs	r3, #0
 800da28:	f04f 32ff 	mov.w	r2, #4294967295
 800da2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da30:	f10a 0a01 	add.w	sl, sl, #1
 800da34:	9304      	str	r3, [sp, #16]
 800da36:	9307      	str	r3, [sp, #28]
 800da38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800da3c:	931a      	str	r3, [sp, #104]	@ 0x68
 800da3e:	4654      	mov	r4, sl
 800da40:	2205      	movs	r2, #5
 800da42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da46:	4853      	ldr	r0, [pc, #332]	@ (800db94 <_vfiprintf_r+0x21c>)
 800da48:	f7f2 fbc2 	bl	80001d0 <memchr>
 800da4c:	9a04      	ldr	r2, [sp, #16]
 800da4e:	b9d8      	cbnz	r0, 800da88 <_vfiprintf_r+0x110>
 800da50:	06d1      	lsls	r1, r2, #27
 800da52:	bf44      	itt	mi
 800da54:	2320      	movmi	r3, #32
 800da56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da5a:	0713      	lsls	r3, r2, #28
 800da5c:	bf44      	itt	mi
 800da5e:	232b      	movmi	r3, #43	@ 0x2b
 800da60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da64:	f89a 3000 	ldrb.w	r3, [sl]
 800da68:	2b2a      	cmp	r3, #42	@ 0x2a
 800da6a:	d015      	beq.n	800da98 <_vfiprintf_r+0x120>
 800da6c:	9a07      	ldr	r2, [sp, #28]
 800da6e:	4654      	mov	r4, sl
 800da70:	2000      	movs	r0, #0
 800da72:	f04f 0c0a 	mov.w	ip, #10
 800da76:	4621      	mov	r1, r4
 800da78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da7c:	3b30      	subs	r3, #48	@ 0x30
 800da7e:	2b09      	cmp	r3, #9
 800da80:	d94b      	bls.n	800db1a <_vfiprintf_r+0x1a2>
 800da82:	b1b0      	cbz	r0, 800dab2 <_vfiprintf_r+0x13a>
 800da84:	9207      	str	r2, [sp, #28]
 800da86:	e014      	b.n	800dab2 <_vfiprintf_r+0x13a>
 800da88:	eba0 0308 	sub.w	r3, r0, r8
 800da8c:	fa09 f303 	lsl.w	r3, r9, r3
 800da90:	4313      	orrs	r3, r2
 800da92:	9304      	str	r3, [sp, #16]
 800da94:	46a2      	mov	sl, r4
 800da96:	e7d2      	b.n	800da3e <_vfiprintf_r+0xc6>
 800da98:	9b03      	ldr	r3, [sp, #12]
 800da9a:	1d19      	adds	r1, r3, #4
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	9103      	str	r1, [sp, #12]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	bfbb      	ittet	lt
 800daa4:	425b      	neglt	r3, r3
 800daa6:	f042 0202 	orrlt.w	r2, r2, #2
 800daaa:	9307      	strge	r3, [sp, #28]
 800daac:	9307      	strlt	r3, [sp, #28]
 800daae:	bfb8      	it	lt
 800dab0:	9204      	strlt	r2, [sp, #16]
 800dab2:	7823      	ldrb	r3, [r4, #0]
 800dab4:	2b2e      	cmp	r3, #46	@ 0x2e
 800dab6:	d10a      	bne.n	800dace <_vfiprintf_r+0x156>
 800dab8:	7863      	ldrb	r3, [r4, #1]
 800daba:	2b2a      	cmp	r3, #42	@ 0x2a
 800dabc:	d132      	bne.n	800db24 <_vfiprintf_r+0x1ac>
 800dabe:	9b03      	ldr	r3, [sp, #12]
 800dac0:	1d1a      	adds	r2, r3, #4
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	9203      	str	r2, [sp, #12]
 800dac6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800daca:	3402      	adds	r4, #2
 800dacc:	9305      	str	r3, [sp, #20]
 800dace:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dba4 <_vfiprintf_r+0x22c>
 800dad2:	7821      	ldrb	r1, [r4, #0]
 800dad4:	2203      	movs	r2, #3
 800dad6:	4650      	mov	r0, sl
 800dad8:	f7f2 fb7a 	bl	80001d0 <memchr>
 800dadc:	b138      	cbz	r0, 800daee <_vfiprintf_r+0x176>
 800dade:	9b04      	ldr	r3, [sp, #16]
 800dae0:	eba0 000a 	sub.w	r0, r0, sl
 800dae4:	2240      	movs	r2, #64	@ 0x40
 800dae6:	4082      	lsls	r2, r0
 800dae8:	4313      	orrs	r3, r2
 800daea:	3401      	adds	r4, #1
 800daec:	9304      	str	r3, [sp, #16]
 800daee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daf2:	4829      	ldr	r0, [pc, #164]	@ (800db98 <_vfiprintf_r+0x220>)
 800daf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800daf8:	2206      	movs	r2, #6
 800dafa:	f7f2 fb69 	bl	80001d0 <memchr>
 800dafe:	2800      	cmp	r0, #0
 800db00:	d03f      	beq.n	800db82 <_vfiprintf_r+0x20a>
 800db02:	4b26      	ldr	r3, [pc, #152]	@ (800db9c <_vfiprintf_r+0x224>)
 800db04:	bb1b      	cbnz	r3, 800db4e <_vfiprintf_r+0x1d6>
 800db06:	9b03      	ldr	r3, [sp, #12]
 800db08:	3307      	adds	r3, #7
 800db0a:	f023 0307 	bic.w	r3, r3, #7
 800db0e:	3308      	adds	r3, #8
 800db10:	9303      	str	r3, [sp, #12]
 800db12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db14:	443b      	add	r3, r7
 800db16:	9309      	str	r3, [sp, #36]	@ 0x24
 800db18:	e76a      	b.n	800d9f0 <_vfiprintf_r+0x78>
 800db1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800db1e:	460c      	mov	r4, r1
 800db20:	2001      	movs	r0, #1
 800db22:	e7a8      	b.n	800da76 <_vfiprintf_r+0xfe>
 800db24:	2300      	movs	r3, #0
 800db26:	3401      	adds	r4, #1
 800db28:	9305      	str	r3, [sp, #20]
 800db2a:	4619      	mov	r1, r3
 800db2c:	f04f 0c0a 	mov.w	ip, #10
 800db30:	4620      	mov	r0, r4
 800db32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db36:	3a30      	subs	r2, #48	@ 0x30
 800db38:	2a09      	cmp	r2, #9
 800db3a:	d903      	bls.n	800db44 <_vfiprintf_r+0x1cc>
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d0c6      	beq.n	800dace <_vfiprintf_r+0x156>
 800db40:	9105      	str	r1, [sp, #20]
 800db42:	e7c4      	b.n	800dace <_vfiprintf_r+0x156>
 800db44:	fb0c 2101 	mla	r1, ip, r1, r2
 800db48:	4604      	mov	r4, r0
 800db4a:	2301      	movs	r3, #1
 800db4c:	e7f0      	b.n	800db30 <_vfiprintf_r+0x1b8>
 800db4e:	ab03      	add	r3, sp, #12
 800db50:	9300      	str	r3, [sp, #0]
 800db52:	462a      	mov	r2, r5
 800db54:	4b12      	ldr	r3, [pc, #72]	@ (800dba0 <_vfiprintf_r+0x228>)
 800db56:	a904      	add	r1, sp, #16
 800db58:	4630      	mov	r0, r6
 800db5a:	f7fd fbdb 	bl	800b314 <_printf_float>
 800db5e:	4607      	mov	r7, r0
 800db60:	1c78      	adds	r0, r7, #1
 800db62:	d1d6      	bne.n	800db12 <_vfiprintf_r+0x19a>
 800db64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db66:	07d9      	lsls	r1, r3, #31
 800db68:	d405      	bmi.n	800db76 <_vfiprintf_r+0x1fe>
 800db6a:	89ab      	ldrh	r3, [r5, #12]
 800db6c:	059a      	lsls	r2, r3, #22
 800db6e:	d402      	bmi.n	800db76 <_vfiprintf_r+0x1fe>
 800db70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db72:	f7fe f92b 	bl	800bdcc <__retarget_lock_release_recursive>
 800db76:	89ab      	ldrh	r3, [r5, #12]
 800db78:	065b      	lsls	r3, r3, #25
 800db7a:	f53f af1f 	bmi.w	800d9bc <_vfiprintf_r+0x44>
 800db7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db80:	e71e      	b.n	800d9c0 <_vfiprintf_r+0x48>
 800db82:	ab03      	add	r3, sp, #12
 800db84:	9300      	str	r3, [sp, #0]
 800db86:	462a      	mov	r2, r5
 800db88:	4b05      	ldr	r3, [pc, #20]	@ (800dba0 <_vfiprintf_r+0x228>)
 800db8a:	a904      	add	r1, sp, #16
 800db8c:	4630      	mov	r0, r6
 800db8e:	f7fd fe59 	bl	800b844 <_printf_i>
 800db92:	e7e4      	b.n	800db5e <_vfiprintf_r+0x1e6>
 800db94:	0800ea28 	.word	0x0800ea28
 800db98:	0800ea32 	.word	0x0800ea32
 800db9c:	0800b315 	.word	0x0800b315
 800dba0:	0800d955 	.word	0x0800d955
 800dba4:	0800ea2e 	.word	0x0800ea2e

0800dba8 <__swbuf_r>:
 800dba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbaa:	460e      	mov	r6, r1
 800dbac:	4614      	mov	r4, r2
 800dbae:	4605      	mov	r5, r0
 800dbb0:	b118      	cbz	r0, 800dbba <__swbuf_r+0x12>
 800dbb2:	6a03      	ldr	r3, [r0, #32]
 800dbb4:	b90b      	cbnz	r3, 800dbba <__swbuf_r+0x12>
 800dbb6:	f7fd fff1 	bl	800bb9c <__sinit>
 800dbba:	69a3      	ldr	r3, [r4, #24]
 800dbbc:	60a3      	str	r3, [r4, #8]
 800dbbe:	89a3      	ldrh	r3, [r4, #12]
 800dbc0:	071a      	lsls	r2, r3, #28
 800dbc2:	d501      	bpl.n	800dbc8 <__swbuf_r+0x20>
 800dbc4:	6923      	ldr	r3, [r4, #16]
 800dbc6:	b943      	cbnz	r3, 800dbda <__swbuf_r+0x32>
 800dbc8:	4621      	mov	r1, r4
 800dbca:	4628      	mov	r0, r5
 800dbcc:	f000 f82a 	bl	800dc24 <__swsetup_r>
 800dbd0:	b118      	cbz	r0, 800dbda <__swbuf_r+0x32>
 800dbd2:	f04f 37ff 	mov.w	r7, #4294967295
 800dbd6:	4638      	mov	r0, r7
 800dbd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbda:	6823      	ldr	r3, [r4, #0]
 800dbdc:	6922      	ldr	r2, [r4, #16]
 800dbde:	1a98      	subs	r0, r3, r2
 800dbe0:	6963      	ldr	r3, [r4, #20]
 800dbe2:	b2f6      	uxtb	r6, r6
 800dbe4:	4283      	cmp	r3, r0
 800dbe6:	4637      	mov	r7, r6
 800dbe8:	dc05      	bgt.n	800dbf6 <__swbuf_r+0x4e>
 800dbea:	4621      	mov	r1, r4
 800dbec:	4628      	mov	r0, r5
 800dbee:	f7ff fd99 	bl	800d724 <_fflush_r>
 800dbf2:	2800      	cmp	r0, #0
 800dbf4:	d1ed      	bne.n	800dbd2 <__swbuf_r+0x2a>
 800dbf6:	68a3      	ldr	r3, [r4, #8]
 800dbf8:	3b01      	subs	r3, #1
 800dbfa:	60a3      	str	r3, [r4, #8]
 800dbfc:	6823      	ldr	r3, [r4, #0]
 800dbfe:	1c5a      	adds	r2, r3, #1
 800dc00:	6022      	str	r2, [r4, #0]
 800dc02:	701e      	strb	r6, [r3, #0]
 800dc04:	6962      	ldr	r2, [r4, #20]
 800dc06:	1c43      	adds	r3, r0, #1
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d004      	beq.n	800dc16 <__swbuf_r+0x6e>
 800dc0c:	89a3      	ldrh	r3, [r4, #12]
 800dc0e:	07db      	lsls	r3, r3, #31
 800dc10:	d5e1      	bpl.n	800dbd6 <__swbuf_r+0x2e>
 800dc12:	2e0a      	cmp	r6, #10
 800dc14:	d1df      	bne.n	800dbd6 <__swbuf_r+0x2e>
 800dc16:	4621      	mov	r1, r4
 800dc18:	4628      	mov	r0, r5
 800dc1a:	f7ff fd83 	bl	800d724 <_fflush_r>
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	d0d9      	beq.n	800dbd6 <__swbuf_r+0x2e>
 800dc22:	e7d6      	b.n	800dbd2 <__swbuf_r+0x2a>

0800dc24 <__swsetup_r>:
 800dc24:	b538      	push	{r3, r4, r5, lr}
 800dc26:	4b29      	ldr	r3, [pc, #164]	@ (800dccc <__swsetup_r+0xa8>)
 800dc28:	4605      	mov	r5, r0
 800dc2a:	6818      	ldr	r0, [r3, #0]
 800dc2c:	460c      	mov	r4, r1
 800dc2e:	b118      	cbz	r0, 800dc38 <__swsetup_r+0x14>
 800dc30:	6a03      	ldr	r3, [r0, #32]
 800dc32:	b90b      	cbnz	r3, 800dc38 <__swsetup_r+0x14>
 800dc34:	f7fd ffb2 	bl	800bb9c <__sinit>
 800dc38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc3c:	0719      	lsls	r1, r3, #28
 800dc3e:	d422      	bmi.n	800dc86 <__swsetup_r+0x62>
 800dc40:	06da      	lsls	r2, r3, #27
 800dc42:	d407      	bmi.n	800dc54 <__swsetup_r+0x30>
 800dc44:	2209      	movs	r2, #9
 800dc46:	602a      	str	r2, [r5, #0]
 800dc48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc4c:	81a3      	strh	r3, [r4, #12]
 800dc4e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc52:	e033      	b.n	800dcbc <__swsetup_r+0x98>
 800dc54:	0758      	lsls	r0, r3, #29
 800dc56:	d512      	bpl.n	800dc7e <__swsetup_r+0x5a>
 800dc58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc5a:	b141      	cbz	r1, 800dc6e <__swsetup_r+0x4a>
 800dc5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc60:	4299      	cmp	r1, r3
 800dc62:	d002      	beq.n	800dc6a <__swsetup_r+0x46>
 800dc64:	4628      	mov	r0, r5
 800dc66:	f7fe feff 	bl	800ca68 <_free_r>
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc6e:	89a3      	ldrh	r3, [r4, #12]
 800dc70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dc74:	81a3      	strh	r3, [r4, #12]
 800dc76:	2300      	movs	r3, #0
 800dc78:	6063      	str	r3, [r4, #4]
 800dc7a:	6923      	ldr	r3, [r4, #16]
 800dc7c:	6023      	str	r3, [r4, #0]
 800dc7e:	89a3      	ldrh	r3, [r4, #12]
 800dc80:	f043 0308 	orr.w	r3, r3, #8
 800dc84:	81a3      	strh	r3, [r4, #12]
 800dc86:	6923      	ldr	r3, [r4, #16]
 800dc88:	b94b      	cbnz	r3, 800dc9e <__swsetup_r+0x7a>
 800dc8a:	89a3      	ldrh	r3, [r4, #12]
 800dc8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dc90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc94:	d003      	beq.n	800dc9e <__swsetup_r+0x7a>
 800dc96:	4621      	mov	r1, r4
 800dc98:	4628      	mov	r0, r5
 800dc9a:	f000 f883 	bl	800dda4 <__smakebuf_r>
 800dc9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dca2:	f013 0201 	ands.w	r2, r3, #1
 800dca6:	d00a      	beq.n	800dcbe <__swsetup_r+0x9a>
 800dca8:	2200      	movs	r2, #0
 800dcaa:	60a2      	str	r2, [r4, #8]
 800dcac:	6962      	ldr	r2, [r4, #20]
 800dcae:	4252      	negs	r2, r2
 800dcb0:	61a2      	str	r2, [r4, #24]
 800dcb2:	6922      	ldr	r2, [r4, #16]
 800dcb4:	b942      	cbnz	r2, 800dcc8 <__swsetup_r+0xa4>
 800dcb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dcba:	d1c5      	bne.n	800dc48 <__swsetup_r+0x24>
 800dcbc:	bd38      	pop	{r3, r4, r5, pc}
 800dcbe:	0799      	lsls	r1, r3, #30
 800dcc0:	bf58      	it	pl
 800dcc2:	6962      	ldrpl	r2, [r4, #20]
 800dcc4:	60a2      	str	r2, [r4, #8]
 800dcc6:	e7f4      	b.n	800dcb2 <__swsetup_r+0x8e>
 800dcc8:	2000      	movs	r0, #0
 800dcca:	e7f7      	b.n	800dcbc <__swsetup_r+0x98>
 800dccc:	2000010c 	.word	0x2000010c

0800dcd0 <_raise_r>:
 800dcd0:	291f      	cmp	r1, #31
 800dcd2:	b538      	push	{r3, r4, r5, lr}
 800dcd4:	4605      	mov	r5, r0
 800dcd6:	460c      	mov	r4, r1
 800dcd8:	d904      	bls.n	800dce4 <_raise_r+0x14>
 800dcda:	2316      	movs	r3, #22
 800dcdc:	6003      	str	r3, [r0, #0]
 800dcde:	f04f 30ff 	mov.w	r0, #4294967295
 800dce2:	bd38      	pop	{r3, r4, r5, pc}
 800dce4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dce6:	b112      	cbz	r2, 800dcee <_raise_r+0x1e>
 800dce8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dcec:	b94b      	cbnz	r3, 800dd02 <_raise_r+0x32>
 800dcee:	4628      	mov	r0, r5
 800dcf0:	f000 f830 	bl	800dd54 <_getpid_r>
 800dcf4:	4622      	mov	r2, r4
 800dcf6:	4601      	mov	r1, r0
 800dcf8:	4628      	mov	r0, r5
 800dcfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcfe:	f000 b817 	b.w	800dd30 <_kill_r>
 800dd02:	2b01      	cmp	r3, #1
 800dd04:	d00a      	beq.n	800dd1c <_raise_r+0x4c>
 800dd06:	1c59      	adds	r1, r3, #1
 800dd08:	d103      	bne.n	800dd12 <_raise_r+0x42>
 800dd0a:	2316      	movs	r3, #22
 800dd0c:	6003      	str	r3, [r0, #0]
 800dd0e:	2001      	movs	r0, #1
 800dd10:	e7e7      	b.n	800dce2 <_raise_r+0x12>
 800dd12:	2100      	movs	r1, #0
 800dd14:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dd18:	4620      	mov	r0, r4
 800dd1a:	4798      	blx	r3
 800dd1c:	2000      	movs	r0, #0
 800dd1e:	e7e0      	b.n	800dce2 <_raise_r+0x12>

0800dd20 <raise>:
 800dd20:	4b02      	ldr	r3, [pc, #8]	@ (800dd2c <raise+0xc>)
 800dd22:	4601      	mov	r1, r0
 800dd24:	6818      	ldr	r0, [r3, #0]
 800dd26:	f7ff bfd3 	b.w	800dcd0 <_raise_r>
 800dd2a:	bf00      	nop
 800dd2c:	2000010c 	.word	0x2000010c

0800dd30 <_kill_r>:
 800dd30:	b538      	push	{r3, r4, r5, lr}
 800dd32:	4d07      	ldr	r5, [pc, #28]	@ (800dd50 <_kill_r+0x20>)
 800dd34:	2300      	movs	r3, #0
 800dd36:	4604      	mov	r4, r0
 800dd38:	4608      	mov	r0, r1
 800dd3a:	4611      	mov	r1, r2
 800dd3c:	602b      	str	r3, [r5, #0]
 800dd3e:	f7f4 fc1d 	bl	800257c <_kill>
 800dd42:	1c43      	adds	r3, r0, #1
 800dd44:	d102      	bne.n	800dd4c <_kill_r+0x1c>
 800dd46:	682b      	ldr	r3, [r5, #0]
 800dd48:	b103      	cbz	r3, 800dd4c <_kill_r+0x1c>
 800dd4a:	6023      	str	r3, [r4, #0]
 800dd4c:	bd38      	pop	{r3, r4, r5, pc}
 800dd4e:	bf00      	nop
 800dd50:	2000234c 	.word	0x2000234c

0800dd54 <_getpid_r>:
 800dd54:	f7f4 bc0a 	b.w	800256c <_getpid>

0800dd58 <__swhatbuf_r>:
 800dd58:	b570      	push	{r4, r5, r6, lr}
 800dd5a:	460c      	mov	r4, r1
 800dd5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd60:	2900      	cmp	r1, #0
 800dd62:	b096      	sub	sp, #88	@ 0x58
 800dd64:	4615      	mov	r5, r2
 800dd66:	461e      	mov	r6, r3
 800dd68:	da0d      	bge.n	800dd86 <__swhatbuf_r+0x2e>
 800dd6a:	89a3      	ldrh	r3, [r4, #12]
 800dd6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dd70:	f04f 0100 	mov.w	r1, #0
 800dd74:	bf14      	ite	ne
 800dd76:	2340      	movne	r3, #64	@ 0x40
 800dd78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dd7c:	2000      	movs	r0, #0
 800dd7e:	6031      	str	r1, [r6, #0]
 800dd80:	602b      	str	r3, [r5, #0]
 800dd82:	b016      	add	sp, #88	@ 0x58
 800dd84:	bd70      	pop	{r4, r5, r6, pc}
 800dd86:	466a      	mov	r2, sp
 800dd88:	f000 f848 	bl	800de1c <_fstat_r>
 800dd8c:	2800      	cmp	r0, #0
 800dd8e:	dbec      	blt.n	800dd6a <__swhatbuf_r+0x12>
 800dd90:	9901      	ldr	r1, [sp, #4]
 800dd92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dd96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dd9a:	4259      	negs	r1, r3
 800dd9c:	4159      	adcs	r1, r3
 800dd9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dda2:	e7eb      	b.n	800dd7c <__swhatbuf_r+0x24>

0800dda4 <__smakebuf_r>:
 800dda4:	898b      	ldrh	r3, [r1, #12]
 800dda6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dda8:	079d      	lsls	r5, r3, #30
 800ddaa:	4606      	mov	r6, r0
 800ddac:	460c      	mov	r4, r1
 800ddae:	d507      	bpl.n	800ddc0 <__smakebuf_r+0x1c>
 800ddb0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ddb4:	6023      	str	r3, [r4, #0]
 800ddb6:	6123      	str	r3, [r4, #16]
 800ddb8:	2301      	movs	r3, #1
 800ddba:	6163      	str	r3, [r4, #20]
 800ddbc:	b003      	add	sp, #12
 800ddbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddc0:	ab01      	add	r3, sp, #4
 800ddc2:	466a      	mov	r2, sp
 800ddc4:	f7ff ffc8 	bl	800dd58 <__swhatbuf_r>
 800ddc8:	9f00      	ldr	r7, [sp, #0]
 800ddca:	4605      	mov	r5, r0
 800ddcc:	4639      	mov	r1, r7
 800ddce:	4630      	mov	r0, r6
 800ddd0:	f7fe febe 	bl	800cb50 <_malloc_r>
 800ddd4:	b948      	cbnz	r0, 800ddea <__smakebuf_r+0x46>
 800ddd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddda:	059a      	lsls	r2, r3, #22
 800dddc:	d4ee      	bmi.n	800ddbc <__smakebuf_r+0x18>
 800ddde:	f023 0303 	bic.w	r3, r3, #3
 800dde2:	f043 0302 	orr.w	r3, r3, #2
 800dde6:	81a3      	strh	r3, [r4, #12]
 800dde8:	e7e2      	b.n	800ddb0 <__smakebuf_r+0xc>
 800ddea:	89a3      	ldrh	r3, [r4, #12]
 800ddec:	6020      	str	r0, [r4, #0]
 800ddee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddf2:	81a3      	strh	r3, [r4, #12]
 800ddf4:	9b01      	ldr	r3, [sp, #4]
 800ddf6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ddfa:	b15b      	cbz	r3, 800de14 <__smakebuf_r+0x70>
 800ddfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de00:	4630      	mov	r0, r6
 800de02:	f000 f81d 	bl	800de40 <_isatty_r>
 800de06:	b128      	cbz	r0, 800de14 <__smakebuf_r+0x70>
 800de08:	89a3      	ldrh	r3, [r4, #12]
 800de0a:	f023 0303 	bic.w	r3, r3, #3
 800de0e:	f043 0301 	orr.w	r3, r3, #1
 800de12:	81a3      	strh	r3, [r4, #12]
 800de14:	89a3      	ldrh	r3, [r4, #12]
 800de16:	431d      	orrs	r5, r3
 800de18:	81a5      	strh	r5, [r4, #12]
 800de1a:	e7cf      	b.n	800ddbc <__smakebuf_r+0x18>

0800de1c <_fstat_r>:
 800de1c:	b538      	push	{r3, r4, r5, lr}
 800de1e:	4d07      	ldr	r5, [pc, #28]	@ (800de3c <_fstat_r+0x20>)
 800de20:	2300      	movs	r3, #0
 800de22:	4604      	mov	r4, r0
 800de24:	4608      	mov	r0, r1
 800de26:	4611      	mov	r1, r2
 800de28:	602b      	str	r3, [r5, #0]
 800de2a:	f7f4 fc07 	bl	800263c <_fstat>
 800de2e:	1c43      	adds	r3, r0, #1
 800de30:	d102      	bne.n	800de38 <_fstat_r+0x1c>
 800de32:	682b      	ldr	r3, [r5, #0]
 800de34:	b103      	cbz	r3, 800de38 <_fstat_r+0x1c>
 800de36:	6023      	str	r3, [r4, #0]
 800de38:	bd38      	pop	{r3, r4, r5, pc}
 800de3a:	bf00      	nop
 800de3c:	2000234c 	.word	0x2000234c

0800de40 <_isatty_r>:
 800de40:	b538      	push	{r3, r4, r5, lr}
 800de42:	4d06      	ldr	r5, [pc, #24]	@ (800de5c <_isatty_r+0x1c>)
 800de44:	2300      	movs	r3, #0
 800de46:	4604      	mov	r4, r0
 800de48:	4608      	mov	r0, r1
 800de4a:	602b      	str	r3, [r5, #0]
 800de4c:	f7f4 fc06 	bl	800265c <_isatty>
 800de50:	1c43      	adds	r3, r0, #1
 800de52:	d102      	bne.n	800de5a <_isatty_r+0x1a>
 800de54:	682b      	ldr	r3, [r5, #0]
 800de56:	b103      	cbz	r3, 800de5a <_isatty_r+0x1a>
 800de58:	6023      	str	r3, [r4, #0]
 800de5a:	bd38      	pop	{r3, r4, r5, pc}
 800de5c:	2000234c 	.word	0x2000234c

0800de60 <log>:
 800de60:	b538      	push	{r3, r4, r5, lr}
 800de62:	ed2d 8b02 	vpush	{d8}
 800de66:	ec55 4b10 	vmov	r4, r5, d0
 800de6a:	f000 f949 	bl	800e100 <__ieee754_log>
 800de6e:	4622      	mov	r2, r4
 800de70:	462b      	mov	r3, r5
 800de72:	4620      	mov	r0, r4
 800de74:	4629      	mov	r1, r5
 800de76:	eeb0 8a40 	vmov.f32	s16, s0
 800de7a:	eef0 8a60 	vmov.f32	s17, s1
 800de7e:	f7f2 fe55 	bl	8000b2c <__aeabi_dcmpun>
 800de82:	b998      	cbnz	r0, 800deac <log+0x4c>
 800de84:	2200      	movs	r2, #0
 800de86:	2300      	movs	r3, #0
 800de88:	4620      	mov	r0, r4
 800de8a:	4629      	mov	r1, r5
 800de8c:	f7f2 fe44 	bl	8000b18 <__aeabi_dcmpgt>
 800de90:	b960      	cbnz	r0, 800deac <log+0x4c>
 800de92:	2200      	movs	r2, #0
 800de94:	2300      	movs	r3, #0
 800de96:	4620      	mov	r0, r4
 800de98:	4629      	mov	r1, r5
 800de9a:	f7f2 fe15 	bl	8000ac8 <__aeabi_dcmpeq>
 800de9e:	b160      	cbz	r0, 800deba <log+0x5a>
 800dea0:	f7fd ff68 	bl	800bd74 <__errno>
 800dea4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800ded0 <log+0x70>
 800dea8:	2322      	movs	r3, #34	@ 0x22
 800deaa:	6003      	str	r3, [r0, #0]
 800deac:	eeb0 0a48 	vmov.f32	s0, s16
 800deb0:	eef0 0a68 	vmov.f32	s1, s17
 800deb4:	ecbd 8b02 	vpop	{d8}
 800deb8:	bd38      	pop	{r3, r4, r5, pc}
 800deba:	f7fd ff5b 	bl	800bd74 <__errno>
 800debe:	ecbd 8b02 	vpop	{d8}
 800dec2:	2321      	movs	r3, #33	@ 0x21
 800dec4:	6003      	str	r3, [r0, #0]
 800dec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800deca:	4803      	ldr	r0, [pc, #12]	@ (800ded8 <log+0x78>)
 800decc:	f000 b834 	b.w	800df38 <nan>
 800ded0:	00000000 	.word	0x00000000
 800ded4:	fff00000 	.word	0xfff00000
 800ded8:	0800ea7e 	.word	0x0800ea7e

0800dedc <sqrt>:
 800dedc:	b538      	push	{r3, r4, r5, lr}
 800dede:	ed2d 8b02 	vpush	{d8}
 800dee2:	ec55 4b10 	vmov	r4, r5, d0
 800dee6:	f000 f82f 	bl	800df48 <__ieee754_sqrt>
 800deea:	4622      	mov	r2, r4
 800deec:	462b      	mov	r3, r5
 800deee:	4620      	mov	r0, r4
 800def0:	4629      	mov	r1, r5
 800def2:	eeb0 8a40 	vmov.f32	s16, s0
 800def6:	eef0 8a60 	vmov.f32	s17, s1
 800defa:	f7f2 fe17 	bl	8000b2c <__aeabi_dcmpun>
 800defe:	b990      	cbnz	r0, 800df26 <sqrt+0x4a>
 800df00:	2200      	movs	r2, #0
 800df02:	2300      	movs	r3, #0
 800df04:	4620      	mov	r0, r4
 800df06:	4629      	mov	r1, r5
 800df08:	f7f2 fde8 	bl	8000adc <__aeabi_dcmplt>
 800df0c:	b158      	cbz	r0, 800df26 <sqrt+0x4a>
 800df0e:	f7fd ff31 	bl	800bd74 <__errno>
 800df12:	2321      	movs	r3, #33	@ 0x21
 800df14:	6003      	str	r3, [r0, #0]
 800df16:	2200      	movs	r2, #0
 800df18:	2300      	movs	r3, #0
 800df1a:	4610      	mov	r0, r2
 800df1c:	4619      	mov	r1, r3
 800df1e:	f7f2 fc95 	bl	800084c <__aeabi_ddiv>
 800df22:	ec41 0b18 	vmov	d8, r0, r1
 800df26:	eeb0 0a48 	vmov.f32	s0, s16
 800df2a:	eef0 0a68 	vmov.f32	s1, s17
 800df2e:	ecbd 8b02 	vpop	{d8}
 800df32:	bd38      	pop	{r3, r4, r5, pc}
 800df34:	0000      	movs	r0, r0
	...

0800df38 <nan>:
 800df38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800df40 <nan+0x8>
 800df3c:	4770      	bx	lr
 800df3e:	bf00      	nop
 800df40:	00000000 	.word	0x00000000
 800df44:	7ff80000 	.word	0x7ff80000

0800df48 <__ieee754_sqrt>:
 800df48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df4c:	4a68      	ldr	r2, [pc, #416]	@ (800e0f0 <__ieee754_sqrt+0x1a8>)
 800df4e:	ec55 4b10 	vmov	r4, r5, d0
 800df52:	43aa      	bics	r2, r5
 800df54:	462b      	mov	r3, r5
 800df56:	4621      	mov	r1, r4
 800df58:	d110      	bne.n	800df7c <__ieee754_sqrt+0x34>
 800df5a:	4622      	mov	r2, r4
 800df5c:	4620      	mov	r0, r4
 800df5e:	4629      	mov	r1, r5
 800df60:	f7f2 fb4a 	bl	80005f8 <__aeabi_dmul>
 800df64:	4602      	mov	r2, r0
 800df66:	460b      	mov	r3, r1
 800df68:	4620      	mov	r0, r4
 800df6a:	4629      	mov	r1, r5
 800df6c:	f7f2 f98e 	bl	800028c <__adddf3>
 800df70:	4604      	mov	r4, r0
 800df72:	460d      	mov	r5, r1
 800df74:	ec45 4b10 	vmov	d0, r4, r5
 800df78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df7c:	2d00      	cmp	r5, #0
 800df7e:	dc0e      	bgt.n	800df9e <__ieee754_sqrt+0x56>
 800df80:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800df84:	4322      	orrs	r2, r4
 800df86:	d0f5      	beq.n	800df74 <__ieee754_sqrt+0x2c>
 800df88:	b19d      	cbz	r5, 800dfb2 <__ieee754_sqrt+0x6a>
 800df8a:	4622      	mov	r2, r4
 800df8c:	4620      	mov	r0, r4
 800df8e:	4629      	mov	r1, r5
 800df90:	f7f2 f97a 	bl	8000288 <__aeabi_dsub>
 800df94:	4602      	mov	r2, r0
 800df96:	460b      	mov	r3, r1
 800df98:	f7f2 fc58 	bl	800084c <__aeabi_ddiv>
 800df9c:	e7e8      	b.n	800df70 <__ieee754_sqrt+0x28>
 800df9e:	152a      	asrs	r2, r5, #20
 800dfa0:	d115      	bne.n	800dfce <__ieee754_sqrt+0x86>
 800dfa2:	2000      	movs	r0, #0
 800dfa4:	e009      	b.n	800dfba <__ieee754_sqrt+0x72>
 800dfa6:	0acb      	lsrs	r3, r1, #11
 800dfa8:	3a15      	subs	r2, #21
 800dfaa:	0549      	lsls	r1, r1, #21
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d0fa      	beq.n	800dfa6 <__ieee754_sqrt+0x5e>
 800dfb0:	e7f7      	b.n	800dfa2 <__ieee754_sqrt+0x5a>
 800dfb2:	462a      	mov	r2, r5
 800dfb4:	e7fa      	b.n	800dfac <__ieee754_sqrt+0x64>
 800dfb6:	005b      	lsls	r3, r3, #1
 800dfb8:	3001      	adds	r0, #1
 800dfba:	02dc      	lsls	r4, r3, #11
 800dfbc:	d5fb      	bpl.n	800dfb6 <__ieee754_sqrt+0x6e>
 800dfbe:	1e44      	subs	r4, r0, #1
 800dfc0:	1b12      	subs	r2, r2, r4
 800dfc2:	f1c0 0420 	rsb	r4, r0, #32
 800dfc6:	fa21 f404 	lsr.w	r4, r1, r4
 800dfca:	4323      	orrs	r3, r4
 800dfcc:	4081      	lsls	r1, r0
 800dfce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfd2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800dfd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dfda:	07d2      	lsls	r2, r2, #31
 800dfdc:	bf5c      	itt	pl
 800dfde:	005b      	lslpl	r3, r3, #1
 800dfe0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800dfe4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dfe8:	bf58      	it	pl
 800dfea:	0049      	lslpl	r1, r1, #1
 800dfec:	2600      	movs	r6, #0
 800dfee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800dff2:	106d      	asrs	r5, r5, #1
 800dff4:	0049      	lsls	r1, r1, #1
 800dff6:	2016      	movs	r0, #22
 800dff8:	4632      	mov	r2, r6
 800dffa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800dffe:	1917      	adds	r7, r2, r4
 800e000:	429f      	cmp	r7, r3
 800e002:	bfde      	ittt	le
 800e004:	193a      	addle	r2, r7, r4
 800e006:	1bdb      	suble	r3, r3, r7
 800e008:	1936      	addle	r6, r6, r4
 800e00a:	0fcf      	lsrs	r7, r1, #31
 800e00c:	3801      	subs	r0, #1
 800e00e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e012:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e016:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e01a:	d1f0      	bne.n	800dffe <__ieee754_sqrt+0xb6>
 800e01c:	4604      	mov	r4, r0
 800e01e:	2720      	movs	r7, #32
 800e020:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e024:	429a      	cmp	r2, r3
 800e026:	eb00 0e0c 	add.w	lr, r0, ip
 800e02a:	db02      	blt.n	800e032 <__ieee754_sqrt+0xea>
 800e02c:	d113      	bne.n	800e056 <__ieee754_sqrt+0x10e>
 800e02e:	458e      	cmp	lr, r1
 800e030:	d811      	bhi.n	800e056 <__ieee754_sqrt+0x10e>
 800e032:	f1be 0f00 	cmp.w	lr, #0
 800e036:	eb0e 000c 	add.w	r0, lr, ip
 800e03a:	da42      	bge.n	800e0c2 <__ieee754_sqrt+0x17a>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	db40      	blt.n	800e0c2 <__ieee754_sqrt+0x17a>
 800e040:	f102 0801 	add.w	r8, r2, #1
 800e044:	1a9b      	subs	r3, r3, r2
 800e046:	458e      	cmp	lr, r1
 800e048:	bf88      	it	hi
 800e04a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e04e:	eba1 010e 	sub.w	r1, r1, lr
 800e052:	4464      	add	r4, ip
 800e054:	4642      	mov	r2, r8
 800e056:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e05a:	3f01      	subs	r7, #1
 800e05c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e060:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e064:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e068:	d1dc      	bne.n	800e024 <__ieee754_sqrt+0xdc>
 800e06a:	4319      	orrs	r1, r3
 800e06c:	d01b      	beq.n	800e0a6 <__ieee754_sqrt+0x15e>
 800e06e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e0f4 <__ieee754_sqrt+0x1ac>
 800e072:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e0f8 <__ieee754_sqrt+0x1b0>
 800e076:	e9da 0100 	ldrd	r0, r1, [sl]
 800e07a:	e9db 2300 	ldrd	r2, r3, [fp]
 800e07e:	f7f2 f903 	bl	8000288 <__aeabi_dsub>
 800e082:	e9da 8900 	ldrd	r8, r9, [sl]
 800e086:	4602      	mov	r2, r0
 800e088:	460b      	mov	r3, r1
 800e08a:	4640      	mov	r0, r8
 800e08c:	4649      	mov	r1, r9
 800e08e:	f7f2 fd2f 	bl	8000af0 <__aeabi_dcmple>
 800e092:	b140      	cbz	r0, 800e0a6 <__ieee754_sqrt+0x15e>
 800e094:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e098:	e9da 0100 	ldrd	r0, r1, [sl]
 800e09c:	e9db 2300 	ldrd	r2, r3, [fp]
 800e0a0:	d111      	bne.n	800e0c6 <__ieee754_sqrt+0x17e>
 800e0a2:	3601      	adds	r6, #1
 800e0a4:	463c      	mov	r4, r7
 800e0a6:	1072      	asrs	r2, r6, #1
 800e0a8:	0863      	lsrs	r3, r4, #1
 800e0aa:	07f1      	lsls	r1, r6, #31
 800e0ac:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e0b0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e0b4:	bf48      	it	mi
 800e0b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e0ba:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e0be:	4618      	mov	r0, r3
 800e0c0:	e756      	b.n	800df70 <__ieee754_sqrt+0x28>
 800e0c2:	4690      	mov	r8, r2
 800e0c4:	e7be      	b.n	800e044 <__ieee754_sqrt+0xfc>
 800e0c6:	f7f2 f8e1 	bl	800028c <__adddf3>
 800e0ca:	e9da 8900 	ldrd	r8, r9, [sl]
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	460b      	mov	r3, r1
 800e0d2:	4640      	mov	r0, r8
 800e0d4:	4649      	mov	r1, r9
 800e0d6:	f7f2 fd01 	bl	8000adc <__aeabi_dcmplt>
 800e0da:	b120      	cbz	r0, 800e0e6 <__ieee754_sqrt+0x19e>
 800e0dc:	1ca0      	adds	r0, r4, #2
 800e0de:	bf08      	it	eq
 800e0e0:	3601      	addeq	r6, #1
 800e0e2:	3402      	adds	r4, #2
 800e0e4:	e7df      	b.n	800e0a6 <__ieee754_sqrt+0x15e>
 800e0e6:	1c63      	adds	r3, r4, #1
 800e0e8:	f023 0401 	bic.w	r4, r3, #1
 800e0ec:	e7db      	b.n	800e0a6 <__ieee754_sqrt+0x15e>
 800e0ee:	bf00      	nop
 800e0f0:	7ff00000 	.word	0x7ff00000
 800e0f4:	200002d0 	.word	0x200002d0
 800e0f8:	200002c8 	.word	0x200002c8
 800e0fc:	00000000 	.word	0x00000000

0800e100 <__ieee754_log>:
 800e100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e104:	ec51 0b10 	vmov	r0, r1, d0
 800e108:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800e10c:	b087      	sub	sp, #28
 800e10e:	460d      	mov	r5, r1
 800e110:	da26      	bge.n	800e160 <__ieee754_log+0x60>
 800e112:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e116:	4303      	orrs	r3, r0
 800e118:	4602      	mov	r2, r0
 800e11a:	d10a      	bne.n	800e132 <__ieee754_log+0x32>
 800e11c:	49ce      	ldr	r1, [pc, #824]	@ (800e458 <__ieee754_log+0x358>)
 800e11e:	2200      	movs	r2, #0
 800e120:	2300      	movs	r3, #0
 800e122:	2000      	movs	r0, #0
 800e124:	f7f2 fb92 	bl	800084c <__aeabi_ddiv>
 800e128:	ec41 0b10 	vmov	d0, r0, r1
 800e12c:	b007      	add	sp, #28
 800e12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e132:	2900      	cmp	r1, #0
 800e134:	da05      	bge.n	800e142 <__ieee754_log+0x42>
 800e136:	460b      	mov	r3, r1
 800e138:	f7f2 f8a6 	bl	8000288 <__aeabi_dsub>
 800e13c:	2200      	movs	r2, #0
 800e13e:	2300      	movs	r3, #0
 800e140:	e7f0      	b.n	800e124 <__ieee754_log+0x24>
 800e142:	4bc6      	ldr	r3, [pc, #792]	@ (800e45c <__ieee754_log+0x35c>)
 800e144:	2200      	movs	r2, #0
 800e146:	f7f2 fa57 	bl	80005f8 <__aeabi_dmul>
 800e14a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800e14e:	460d      	mov	r5, r1
 800e150:	4ac3      	ldr	r2, [pc, #780]	@ (800e460 <__ieee754_log+0x360>)
 800e152:	4295      	cmp	r5, r2
 800e154:	dd06      	ble.n	800e164 <__ieee754_log+0x64>
 800e156:	4602      	mov	r2, r0
 800e158:	460b      	mov	r3, r1
 800e15a:	f7f2 f897 	bl	800028c <__adddf3>
 800e15e:	e7e3      	b.n	800e128 <__ieee754_log+0x28>
 800e160:	2300      	movs	r3, #0
 800e162:	e7f5      	b.n	800e150 <__ieee754_log+0x50>
 800e164:	152c      	asrs	r4, r5, #20
 800e166:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800e16a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e16e:	441c      	add	r4, r3
 800e170:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800e174:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800e178:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e17c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800e180:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800e184:	ea42 0105 	orr.w	r1, r2, r5
 800e188:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800e18c:	2200      	movs	r2, #0
 800e18e:	4bb5      	ldr	r3, [pc, #724]	@ (800e464 <__ieee754_log+0x364>)
 800e190:	f7f2 f87a 	bl	8000288 <__aeabi_dsub>
 800e194:	1cab      	adds	r3, r5, #2
 800e196:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e19a:	2b02      	cmp	r3, #2
 800e19c:	4682      	mov	sl, r0
 800e19e:	468b      	mov	fp, r1
 800e1a0:	f04f 0200 	mov.w	r2, #0
 800e1a4:	dc53      	bgt.n	800e24e <__ieee754_log+0x14e>
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	f7f2 fc8e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e1ac:	b1d0      	cbz	r0, 800e1e4 <__ieee754_log+0xe4>
 800e1ae:	2c00      	cmp	r4, #0
 800e1b0:	f000 8120 	beq.w	800e3f4 <__ieee754_log+0x2f4>
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	f7f2 f9b5 	bl	8000524 <__aeabi_i2d>
 800e1ba:	a391      	add	r3, pc, #580	@ (adr r3, 800e400 <__ieee754_log+0x300>)
 800e1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c0:	4606      	mov	r6, r0
 800e1c2:	460f      	mov	r7, r1
 800e1c4:	f7f2 fa18 	bl	80005f8 <__aeabi_dmul>
 800e1c8:	a38f      	add	r3, pc, #572	@ (adr r3, 800e408 <__ieee754_log+0x308>)
 800e1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ce:	4604      	mov	r4, r0
 800e1d0:	460d      	mov	r5, r1
 800e1d2:	4630      	mov	r0, r6
 800e1d4:	4639      	mov	r1, r7
 800e1d6:	f7f2 fa0f 	bl	80005f8 <__aeabi_dmul>
 800e1da:	4602      	mov	r2, r0
 800e1dc:	460b      	mov	r3, r1
 800e1de:	4620      	mov	r0, r4
 800e1e0:	4629      	mov	r1, r5
 800e1e2:	e7ba      	b.n	800e15a <__ieee754_log+0x5a>
 800e1e4:	a38a      	add	r3, pc, #552	@ (adr r3, 800e410 <__ieee754_log+0x310>)
 800e1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ea:	4650      	mov	r0, sl
 800e1ec:	4659      	mov	r1, fp
 800e1ee:	f7f2 fa03 	bl	80005f8 <__aeabi_dmul>
 800e1f2:	4602      	mov	r2, r0
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	2000      	movs	r0, #0
 800e1f8:	499b      	ldr	r1, [pc, #620]	@ (800e468 <__ieee754_log+0x368>)
 800e1fa:	f7f2 f845 	bl	8000288 <__aeabi_dsub>
 800e1fe:	4652      	mov	r2, sl
 800e200:	4606      	mov	r6, r0
 800e202:	460f      	mov	r7, r1
 800e204:	465b      	mov	r3, fp
 800e206:	4650      	mov	r0, sl
 800e208:	4659      	mov	r1, fp
 800e20a:	f7f2 f9f5 	bl	80005f8 <__aeabi_dmul>
 800e20e:	4602      	mov	r2, r0
 800e210:	460b      	mov	r3, r1
 800e212:	4630      	mov	r0, r6
 800e214:	4639      	mov	r1, r7
 800e216:	f7f2 f9ef 	bl	80005f8 <__aeabi_dmul>
 800e21a:	4606      	mov	r6, r0
 800e21c:	460f      	mov	r7, r1
 800e21e:	b914      	cbnz	r4, 800e226 <__ieee754_log+0x126>
 800e220:	4632      	mov	r2, r6
 800e222:	463b      	mov	r3, r7
 800e224:	e0a0      	b.n	800e368 <__ieee754_log+0x268>
 800e226:	4620      	mov	r0, r4
 800e228:	f7f2 f97c 	bl	8000524 <__aeabi_i2d>
 800e22c:	a374      	add	r3, pc, #464	@ (adr r3, 800e400 <__ieee754_log+0x300>)
 800e22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e232:	4680      	mov	r8, r0
 800e234:	4689      	mov	r9, r1
 800e236:	f7f2 f9df 	bl	80005f8 <__aeabi_dmul>
 800e23a:	a373      	add	r3, pc, #460	@ (adr r3, 800e408 <__ieee754_log+0x308>)
 800e23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e240:	4604      	mov	r4, r0
 800e242:	460d      	mov	r5, r1
 800e244:	4640      	mov	r0, r8
 800e246:	4649      	mov	r1, r9
 800e248:	f7f2 f9d6 	bl	80005f8 <__aeabi_dmul>
 800e24c:	e0a5      	b.n	800e39a <__ieee754_log+0x29a>
 800e24e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e252:	f7f2 f81b 	bl	800028c <__adddf3>
 800e256:	4602      	mov	r2, r0
 800e258:	460b      	mov	r3, r1
 800e25a:	4650      	mov	r0, sl
 800e25c:	4659      	mov	r1, fp
 800e25e:	f7f2 faf5 	bl	800084c <__aeabi_ddiv>
 800e262:	e9cd 0100 	strd	r0, r1, [sp]
 800e266:	4620      	mov	r0, r4
 800e268:	f7f2 f95c 	bl	8000524 <__aeabi_i2d>
 800e26c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e270:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e274:	4610      	mov	r0, r2
 800e276:	4619      	mov	r1, r3
 800e278:	f7f2 f9be 	bl	80005f8 <__aeabi_dmul>
 800e27c:	4602      	mov	r2, r0
 800e27e:	460b      	mov	r3, r1
 800e280:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e284:	f7f2 f9b8 	bl	80005f8 <__aeabi_dmul>
 800e288:	a363      	add	r3, pc, #396	@ (adr r3, 800e418 <__ieee754_log+0x318>)
 800e28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28e:	4680      	mov	r8, r0
 800e290:	4689      	mov	r9, r1
 800e292:	f7f2 f9b1 	bl	80005f8 <__aeabi_dmul>
 800e296:	a362      	add	r3, pc, #392	@ (adr r3, 800e420 <__ieee754_log+0x320>)
 800e298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29c:	f7f1 fff6 	bl	800028c <__adddf3>
 800e2a0:	4642      	mov	r2, r8
 800e2a2:	464b      	mov	r3, r9
 800e2a4:	f7f2 f9a8 	bl	80005f8 <__aeabi_dmul>
 800e2a8:	a35f      	add	r3, pc, #380	@ (adr r3, 800e428 <__ieee754_log+0x328>)
 800e2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ae:	f7f1 ffed 	bl	800028c <__adddf3>
 800e2b2:	4642      	mov	r2, r8
 800e2b4:	464b      	mov	r3, r9
 800e2b6:	f7f2 f99f 	bl	80005f8 <__aeabi_dmul>
 800e2ba:	a35d      	add	r3, pc, #372	@ (adr r3, 800e430 <__ieee754_log+0x330>)
 800e2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c0:	f7f1 ffe4 	bl	800028c <__adddf3>
 800e2c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e2c8:	f7f2 f996 	bl	80005f8 <__aeabi_dmul>
 800e2cc:	a35a      	add	r3, pc, #360	@ (adr r3, 800e438 <__ieee754_log+0x338>)
 800e2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e2d6:	4640      	mov	r0, r8
 800e2d8:	4649      	mov	r1, r9
 800e2da:	f7f2 f98d 	bl	80005f8 <__aeabi_dmul>
 800e2de:	a358      	add	r3, pc, #352	@ (adr r3, 800e440 <__ieee754_log+0x340>)
 800e2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e4:	f7f1 ffd2 	bl	800028c <__adddf3>
 800e2e8:	4642      	mov	r2, r8
 800e2ea:	464b      	mov	r3, r9
 800e2ec:	f7f2 f984 	bl	80005f8 <__aeabi_dmul>
 800e2f0:	a355      	add	r3, pc, #340	@ (adr r3, 800e448 <__ieee754_log+0x348>)
 800e2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f6:	f7f1 ffc9 	bl	800028c <__adddf3>
 800e2fa:	4642      	mov	r2, r8
 800e2fc:	464b      	mov	r3, r9
 800e2fe:	f7f2 f97b 	bl	80005f8 <__aeabi_dmul>
 800e302:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800e306:	4602      	mov	r2, r0
 800e308:	460b      	mov	r3, r1
 800e30a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800e30e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e312:	f7f1 ffbb 	bl	800028c <__adddf3>
 800e316:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800e31a:	3551      	adds	r5, #81	@ 0x51
 800e31c:	4335      	orrs	r5, r6
 800e31e:	2d00      	cmp	r5, #0
 800e320:	4680      	mov	r8, r0
 800e322:	4689      	mov	r9, r1
 800e324:	dd48      	ble.n	800e3b8 <__ieee754_log+0x2b8>
 800e326:	4b50      	ldr	r3, [pc, #320]	@ (800e468 <__ieee754_log+0x368>)
 800e328:	2200      	movs	r2, #0
 800e32a:	4650      	mov	r0, sl
 800e32c:	4659      	mov	r1, fp
 800e32e:	f7f2 f963 	bl	80005f8 <__aeabi_dmul>
 800e332:	4652      	mov	r2, sl
 800e334:	465b      	mov	r3, fp
 800e336:	f7f2 f95f 	bl	80005f8 <__aeabi_dmul>
 800e33a:	4602      	mov	r2, r0
 800e33c:	460b      	mov	r3, r1
 800e33e:	4606      	mov	r6, r0
 800e340:	460f      	mov	r7, r1
 800e342:	4640      	mov	r0, r8
 800e344:	4649      	mov	r1, r9
 800e346:	f7f1 ffa1 	bl	800028c <__adddf3>
 800e34a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e34e:	f7f2 f953 	bl	80005f8 <__aeabi_dmul>
 800e352:	4680      	mov	r8, r0
 800e354:	4689      	mov	r9, r1
 800e356:	b964      	cbnz	r4, 800e372 <__ieee754_log+0x272>
 800e358:	4602      	mov	r2, r0
 800e35a:	460b      	mov	r3, r1
 800e35c:	4630      	mov	r0, r6
 800e35e:	4639      	mov	r1, r7
 800e360:	f7f1 ff92 	bl	8000288 <__aeabi_dsub>
 800e364:	4602      	mov	r2, r0
 800e366:	460b      	mov	r3, r1
 800e368:	4650      	mov	r0, sl
 800e36a:	4659      	mov	r1, fp
 800e36c:	f7f1 ff8c 	bl	8000288 <__aeabi_dsub>
 800e370:	e6da      	b.n	800e128 <__ieee754_log+0x28>
 800e372:	a323      	add	r3, pc, #140	@ (adr r3, 800e400 <__ieee754_log+0x300>)
 800e374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e378:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e37c:	f7f2 f93c 	bl	80005f8 <__aeabi_dmul>
 800e380:	a321      	add	r3, pc, #132	@ (adr r3, 800e408 <__ieee754_log+0x308>)
 800e382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e386:	4604      	mov	r4, r0
 800e388:	460d      	mov	r5, r1
 800e38a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e38e:	f7f2 f933 	bl	80005f8 <__aeabi_dmul>
 800e392:	4642      	mov	r2, r8
 800e394:	464b      	mov	r3, r9
 800e396:	f7f1 ff79 	bl	800028c <__adddf3>
 800e39a:	4602      	mov	r2, r0
 800e39c:	460b      	mov	r3, r1
 800e39e:	4630      	mov	r0, r6
 800e3a0:	4639      	mov	r1, r7
 800e3a2:	f7f1 ff71 	bl	8000288 <__aeabi_dsub>
 800e3a6:	4652      	mov	r2, sl
 800e3a8:	465b      	mov	r3, fp
 800e3aa:	f7f1 ff6d 	bl	8000288 <__aeabi_dsub>
 800e3ae:	4602      	mov	r2, r0
 800e3b0:	460b      	mov	r3, r1
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	4629      	mov	r1, r5
 800e3b6:	e7d9      	b.n	800e36c <__ieee754_log+0x26c>
 800e3b8:	4602      	mov	r2, r0
 800e3ba:	460b      	mov	r3, r1
 800e3bc:	4650      	mov	r0, sl
 800e3be:	4659      	mov	r1, fp
 800e3c0:	f7f1 ff62 	bl	8000288 <__aeabi_dsub>
 800e3c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3c8:	f7f2 f916 	bl	80005f8 <__aeabi_dmul>
 800e3cc:	4606      	mov	r6, r0
 800e3ce:	460f      	mov	r7, r1
 800e3d0:	2c00      	cmp	r4, #0
 800e3d2:	f43f af25 	beq.w	800e220 <__ieee754_log+0x120>
 800e3d6:	a30a      	add	r3, pc, #40	@ (adr r3, 800e400 <__ieee754_log+0x300>)
 800e3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3e0:	f7f2 f90a 	bl	80005f8 <__aeabi_dmul>
 800e3e4:	a308      	add	r3, pc, #32	@ (adr r3, 800e408 <__ieee754_log+0x308>)
 800e3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ea:	4604      	mov	r4, r0
 800e3ec:	460d      	mov	r5, r1
 800e3ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3f2:	e729      	b.n	800e248 <__ieee754_log+0x148>
 800e3f4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800e450 <__ieee754_log+0x350>
 800e3f8:	e698      	b.n	800e12c <__ieee754_log+0x2c>
 800e3fa:	bf00      	nop
 800e3fc:	f3af 8000 	nop.w
 800e400:	fee00000 	.word	0xfee00000
 800e404:	3fe62e42 	.word	0x3fe62e42
 800e408:	35793c76 	.word	0x35793c76
 800e40c:	3dea39ef 	.word	0x3dea39ef
 800e410:	55555555 	.word	0x55555555
 800e414:	3fd55555 	.word	0x3fd55555
 800e418:	df3e5244 	.word	0xdf3e5244
 800e41c:	3fc2f112 	.word	0x3fc2f112
 800e420:	96cb03de 	.word	0x96cb03de
 800e424:	3fc74664 	.word	0x3fc74664
 800e428:	94229359 	.word	0x94229359
 800e42c:	3fd24924 	.word	0x3fd24924
 800e430:	55555593 	.word	0x55555593
 800e434:	3fe55555 	.word	0x3fe55555
 800e438:	d078c69f 	.word	0xd078c69f
 800e43c:	3fc39a09 	.word	0x3fc39a09
 800e440:	1d8e78af 	.word	0x1d8e78af
 800e444:	3fcc71c5 	.word	0x3fcc71c5
 800e448:	9997fa04 	.word	0x9997fa04
 800e44c:	3fd99999 	.word	0x3fd99999
	...
 800e458:	c3500000 	.word	0xc3500000
 800e45c:	43500000 	.word	0x43500000
 800e460:	7fefffff 	.word	0x7fefffff
 800e464:	3ff00000 	.word	0x3ff00000
 800e468:	3fe00000 	.word	0x3fe00000

0800e46c <_init>:
 800e46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e46e:	bf00      	nop
 800e470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e472:	bc08      	pop	{r3}
 800e474:	469e      	mov	lr, r3
 800e476:	4770      	bx	lr

0800e478 <_fini>:
 800e478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e47a:	bf00      	nop
 800e47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e47e:	bc08      	pop	{r3}
 800e480:	469e      	mov	lr, r3
 800e482:	4770      	bx	lr
