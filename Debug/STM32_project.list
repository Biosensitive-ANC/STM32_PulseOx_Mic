
STM32_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010194  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08010328  08010328  00011328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010700  08010700  000122d8  2**0
                  CONTENTS
  4 .ARM          00000008  08010700  08010700  00011700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010708  08010708  000122d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010708  08010708  00011708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801070c  0801070c  0001170c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  08010710  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000122d8  2**0
                  CONTENTS
 10 .bss          00002210  200002d8  200002d8  000122d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200024e8  200024e8  000122d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000122d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e3d4  00000000  00000000  00012308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049a9  00000000  00000000  000306dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b00  00000000  00000000  00035088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014ed  00000000  00000000  00036b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000283db  00000000  00000000  00038075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024f18  00000000  00000000  00060450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3659  00000000  00000000  00085368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001689c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008380  00000000  00000000  00168a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00170d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801030c 	.word	0x0801030c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	0801030c 	.word	0x0801030c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <dcRemoval>:

#include "filter.h"


DC_FILTER_T dcRemoval(float x, float prev_w, float alpha)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b08b      	sub	sp, #44	@ 0x2c
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000f82:	edc7 0a04 	vstr	s1, [r7, #16]
 8000f86:	ed87 1a03 	vstr	s2, [r7, #12]
  DC_FILTER_T filtered;
  filtered.w = x + alpha * prev_w;
 8000f8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f96:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9e:	edc7 7a06 	vstr	s15, [r7, #24]
  filtered.result = filtered.w - prev_w;
 8000fa2:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fae:	edc7 7a07 	vstr	s15, [r7, #28]

  return filtered;
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	f107 0218 	add.w	r2, r7, #24
 8000fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fbe:	e883 0003 	stmia.w	r3, {r0, r1}
 8000fc2:	6a3a      	ldr	r2, [r7, #32]
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc6:	ee07 2a10 	vmov	s14, r2
 8000fca:	ee07 3a90 	vmov	s15, r3
}
 8000fce:	eeb0 0a47 	vmov.f32	s0, s14
 8000fd2:	eef0 0a67 	vmov.f32	s1, s15
 8000fd6:	372c      	adds	r7, #44	@ 0x2c
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <lowPassButterworthFilter>:

//Low pass butterworth filter order=1 alpha1=0.1
void lowPassButterworthFilter(float x, BUTTERWORTH_FILTER_T * filterResult)
{
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fea:	6038      	str	r0, [r7, #0]
	filterResult->v[0] = filterResult->v[1];
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	601a      	str	r2, [r3, #0]

    //Fs = 100Hz and Fc = 10Hz
    //filterResult->v[1] = (2.452372752527856026e-1 * x) + (0.50952544949442879485 * filterResult->v[0]);

    //Fs = 100Hz and Fc = 4Hz
    filterResult->v[1] = (1.367287359973195227e-1 * x) + (0.72654252800536101020 * filterResult->v[0]); //Very precise butterworth filter
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff faa7 	bl	8000548 <__aeabi_f2d>
 8000ffa:	a319      	add	r3, pc, #100	@ (adr r3, 8001060 <lowPassButterworthFilter+0x80>)
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	f7ff fafa 	bl	80005f8 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4614      	mov	r4, r2
 800100a:	461d      	mov	r5, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa99 	bl	8000548 <__aeabi_f2d>
 8001016:	a314      	add	r3, pc, #80	@ (adr r3, 8001068 <lowPassButterworthFilter+0x88>)
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	f7ff faec 	bl	80005f8 <__aeabi_dmul>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4620      	mov	r0, r4
 8001026:	4629      	mov	r1, r5
 8001028:	f7ff f930 	bl	800028c <__adddf3>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fdd8 	bl	8000be8 <__aeabi_d2f>
 8001038:	4602      	mov	r2, r0
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	605a      	str	r2, [r3, #4]

    filterResult->result = filterResult->v[0] + filterResult->v[1];
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	ed93 7a00 	vldr	s14, [r3]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	edd3 7a01 	vldr	s15, [r3, #4]
 800104a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bdb0      	pop	{r4, r5, r7, pc}
 800105c:	f3af 8000 	nop.w
 8001060:	c4c41579 	.word	0xc4c41579
 8001064:	3fc18053 	.word	0x3fc18053
 8001068:	1d9df544 	.word	0x1d9df544
 800106c:	3fe73fd6 	.word	0x3fe73fd6

08001070 <meanDiff>:

float meanDiff(float M, MEAN_DIFF_FILTER_T* filterValues)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	ed87 0a01 	vstr	s0, [r7, #4]
 800107a:	6038      	str	r0, [r7, #0]
  float avg = 0;
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]

  filterValues->sum -= filterValues->values[filterValues->index];
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
  filterValues->values[filterValues->index] = M;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	601a      	str	r2, [r3, #0]
  filterValues->sum += filterValues->values[filterValues->index];
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	edd3 7a00 	vldr	s15, [r3]
 80010c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

  filterValues->index++;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010d8:	3301      	adds	r3, #1
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  filterValues->index = filterValues->index % MEAN_FILTER_SIZE;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 80010e8:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <meanDiff+0xe0>)
 80010ea:	fba3 1302 	umull	r1, r3, r3, r2
 80010ee:	08d9      	lsrs	r1, r3, #3
 80010f0:	460b      	mov	r3, r1
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	1a5b      	subs	r3, r3, r1
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(filterValues->count < MEAN_FILTER_SIZE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001106:	2b0e      	cmp	r3, #14
 8001108:	d807      	bhi.n	800111a <meanDiff+0xaa>
    filterValues->count++;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001110:	3301      	adds	r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  avg = filterValues->sum / filterValues->count;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800112e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001132:	edc7 7a03 	vstr	s15, [r7, #12]
  return avg - M;
 8001136:	ed97 7a03 	vldr	s14, [r7, #12]
 800113a:	edd7 7a01 	vldr	s15, [r7, #4]
 800113e:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001142:	eeb0 0a67 	vmov.f32	s0, s15
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	88888889 	.word	0x88888889

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115a:	f001 fce3 	bl	8002b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115e:	f000 f8c1 	bl	80012e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001162:	f000 fb03 	bl	800176c <MX_GPIO_Init>
  MX_DMA_Init();
 8001166:	f000 fac3 	bl	80016f0 <MX_DMA_Init>
  MX_I2C1_Init();
 800116a:	f000 f9c9 	bl	8001500 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800116e:	f00b fac7 	bl	800c700 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001172:	f000 f921 	bl	80013b8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001176:	f000 fa1f 	bl	80015b8 <MX_TIM2_Init>
  MX_ADC2_Init();
 800117a:	f000 f96f 	bl	800145c <MX_ADC2_Init>
  MX_UART5_Init();
 800117e:	f000 fa8d 	bl	800169c <MX_UART5_Init>
  MX_I2S2_Init();
 8001182:	f000 f9eb 	bl	800155c <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */

    MAX30102_Init(); // configure the heart rate sensor
 8001186:	f000 fd1b 	bl	8001bc0 <MAX30102_Init>
    // enable DMA for microphone to record data
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 2 * MIC_OVERSAMPLING); // cast to 32 because STM moment
	//HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)audio_tx_buffer, 2);
    // Ensure an integer number of periods fits into the buffer

    HAL_TIM_Base_Start(&htim2); // enable microphone sample timer
 800118a:	4845      	ldr	r0, [pc, #276]	@ (80012a0 <main+0x14c>)
 800118c:	f006 fe14 	bl	8007db8 <HAL_TIM_Base_Start>

    HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buffer, MIC_OVERSAMPLING); // cast to 32 because STM moment
 8001190:	2208      	movs	r2, #8
 8001192:	4944      	ldr	r1, [pc, #272]	@ (80012a4 <main+0x150>)
 8001194:	4844      	ldr	r0, [pc, #272]	@ (80012a8 <main+0x154>)
 8001196:	f001 fd9f 	bl	8002cd8 <HAL_ADC_Start_DMA>
    //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buffer, MIC_OVERSAMPLING); // cast to 32 because STM moment


	HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)audio_tx_buffer, 2);
 800119a:	2202      	movs	r2, #2
 800119c:	4943      	ldr	r1, [pc, #268]	@ (80012ac <main+0x158>)
 800119e:	4844      	ldr	r0, [pc, #272]	@ (80012b0 <main+0x15c>)
 80011a0:	f004 f92c 	bl	80053fc <HAL_I2S_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	currentMillis = millis();
 80011a4:	f001 fc7a 	bl	8002a9c <millis>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b41      	ldr	r3, [pc, #260]	@ (80012b4 <main+0x160>)
 80011ae:	601a      	str	r2, [r3, #0]

	while (1)
	{
		if( pulseOximiterIntFlag )
 80011b0:	4b41      	ldr	r3, [pc, #260]	@ (80012b8 <main+0x164>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d009      	beq.n	80011ce <main+0x7a>
		{
			if (MAX30102_DumpFifo() == HAL_OK) {
 80011ba:	f000 fd79 	bl	8001cb0 <MAX30102_DumpFifo>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d104      	bne.n	80011ce <main+0x7a>

				pulseOximiterIntFlag = 0;
 80011c4:	4b3c      	ldr	r3, [pc, #240]	@ (80012b8 <main+0x164>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]

				MAX30102_ProcessData();
 80011ca:	f000 fd83 	bl	8001cd4 <MAX30102_ProcessData>
			}
		}

		// Display the data over the built in USB every 5 seconds
		currentMillis = millis();
 80011ce:	f001 fc65 	bl	8002a9c <millis>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b37      	ldr	r3, [pc, #220]	@ (80012b4 <main+0x160>)
 80011d8:	601a      	str	r2, [r3, #0]
		if( currentMillis - lastMillis > SEND_PULSEOX_PERIOD_MS )
 80011da:	4b36      	ldr	r3, [pc, #216]	@ (80012b4 <main+0x160>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b37      	ldr	r3, [pc, #220]	@ (80012bc <main+0x168>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011e8:	dde2      	ble.n	80011b0 <main+0x5c>
		{
			float bpm = MAX30102_getBPM();
 80011ea:	f001 f88b 	bl	8002304 <MAX30102_getBPM>
 80011ee:	ed87 0a03 	vstr	s0, [r7, #12]
			float spo2 = MAX30102_getSPO2();
 80011f2:	f001 f895 	bl	8002320 <MAX30102_getSPO2>
 80011f6:	ed87 0a02 	vstr	s0, [r7, #8]

			// Convert BPM to 8-bit integer
			if (bpm > 255.0f) bpm = 255.0f;
 80011fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80011fe:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80012c0 <main+0x16c>
 8001202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120a:	dd01      	ble.n	8001210 <main+0xbc>
 800120c:	4b2d      	ldr	r3, [pc, #180]	@ (80012c4 <main+0x170>)
 800120e:	60fb      	str	r3, [r7, #12]
			txBuffer[0] = (uint8_t)bpm;
 8001210:	edd7 7a03 	vldr	s15, [r7, #12]
 8001214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001218:	edc7 7a01 	vstr	s15, [r7, #4]
 800121c:	793b      	ldrb	r3, [r7, #4]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b29      	ldr	r3, [pc, #164]	@ (80012c8 <main+0x174>)
 8001222:	701a      	strb	r2, [r3, #0]

			// Convert SpO2 to 8-bit integer with range mapping (90%-100%)
			if (spo2 < 90.0f) spo2 = 90.0f;
 8001224:	edd7 7a02 	vldr	s15, [r7, #8]
 8001228:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80012cc <main+0x178>
 800122c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001234:	d501      	bpl.n	800123a <main+0xe6>
 8001236:	4b26      	ldr	r3, [pc, #152]	@ (80012d0 <main+0x17c>)
 8001238:	60bb      	str	r3, [r7, #8]
			if (spo2 > 100.0f) spo2 = 100.0f;
 800123a:	edd7 7a02 	vldr	s15, [r7, #8]
 800123e:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80012d4 <main+0x180>
 8001242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124a:	dd01      	ble.n	8001250 <main+0xfc>
 800124c:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <main+0x184>)
 800124e:	60bb      	str	r3, [r7, #8]
			txBuffer[1] = (uint8_t)((spo2 - 90.0f) * 255.0f / 10.0f);
 8001250:	edd7 7a02 	vldr	s15, [r7, #8]
 8001254:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80012cc <main+0x178>
 8001258:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800125c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80012c0 <main+0x16c>
 8001260:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001264:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001268:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800126c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001270:	edc7 7a01 	vstr	s15, [r7, #4]
 8001274:	793b      	ldrb	r3, [r7, #4]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <main+0x174>)
 800127a:	705a      	strb	r2, [r3, #1]

			// Transmit the data over UART
			HAL_UART_Transmit(&huart5, txBuffer, 2, HAL_MAX_DELAY);
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	2202      	movs	r2, #2
 8001282:	4911      	ldr	r1, [pc, #68]	@ (80012c8 <main+0x174>)
 8001284:	4815      	ldr	r0, [pc, #84]	@ (80012dc <main+0x188>)
 8001286:	f007 fba5 	bl	80089d4 <HAL_UART_Transmit>

			HAL_GPIO_TogglePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin);
 800128a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800128e:	4814      	ldr	r0, [pc, #80]	@ (80012e0 <main+0x18c>)
 8001290:	f002 ff1d 	bl	80040ce <HAL_GPIO_TogglePin>
			lastMillis = currentMillis;
 8001294:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <main+0x160>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a08      	ldr	r2, [pc, #32]	@ (80012bc <main+0x168>)
 800129a:	6013      	str	r3, [r2, #0]
		if( pulseOximiterIntFlag )
 800129c:	e788      	b.n	80011b0 <main+0x5c>
 800129e:	bf00      	nop
 80012a0:	20000540 	.word	0x20000540
 80012a4:	200005ec 	.word	0x200005ec
 80012a8:	2000033c 	.word	0x2000033c
 80012ac:	200005fc 	.word	0x200005fc
 80012b0:	20000498 	.word	0x20000498
 80012b4:	200005d0 	.word	0x200005d0
 80012b8:	200005d8 	.word	0x200005d8
 80012bc:	200005d4 	.word	0x200005d4
 80012c0:	437f0000 	.word	0x437f0000
 80012c4:	437f0000 	.word	0x437f0000
 80012c8:	20000600 	.word	0x20000600
 80012cc:	42b40000 	.word	0x42b40000
 80012d0:	42b40000 	.word	0x42b40000
 80012d4:	42c80000 	.word	0x42c80000
 80012d8:	42c80000 	.word	0x42c80000
 80012dc:	20000588 	.word	0x20000588
 80012e0:	40020c00 	.word	0x40020c00

080012e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b094      	sub	sp, #80	@ 0x50
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	2230      	movs	r2, #48	@ 0x30
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f00c fde3 	bl	800debe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	4b28      	ldr	r3, [pc, #160]	@ (80013b0 <SystemClock_Config+0xcc>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001310:	4a27      	ldr	r2, [pc, #156]	@ (80013b0 <SystemClock_Config+0xcc>)
 8001312:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001316:	6413      	str	r3, [r2, #64]	@ 0x40
 8001318:	4b25      	ldr	r3, [pc, #148]	@ (80013b0 <SystemClock_Config+0xcc>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	4b22      	ldr	r3, [pc, #136]	@ (80013b4 <SystemClock_Config+0xd0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a21      	ldr	r2, [pc, #132]	@ (80013b4 <SystemClock_Config+0xd0>)
 800132e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b1f      	ldr	r3, [pc, #124]	@ (80013b4 <SystemClock_Config+0xd0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001340:	2301      	movs	r3, #1
 8001342:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001344:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134a:	2302      	movs	r3, #2
 800134c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800134e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001352:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001354:	2308      	movs	r3, #8
 8001356:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001358:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800135c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800135e:	2302      	movs	r3, #2
 8001360:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001362:	2307      	movs	r3, #7
 8001364:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001366:	f107 0320 	add.w	r3, r7, #32
 800136a:	4618      	mov	r0, r3
 800136c:	f005 fefa 	bl	8007164 <HAL_RCC_OscConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001376:	f000 fbcd 	bl	8001b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137a:	230f      	movs	r3, #15
 800137c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137e:	2302      	movs	r3, #2
 8001380:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001386:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800138a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800138c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001390:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	2105      	movs	r1, #5
 8001398:	4618      	mov	r0, r3
 800139a:	f006 f95b 	bl	8007654 <HAL_RCC_ClockConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013a4:	f000 fbb6 	bl	8001b14 <Error_Handler>
  }
}
 80013a8:	bf00      	nop
 80013aa:	3750      	adds	r7, #80	@ 0x50
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000

080013b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013be:	463b      	mov	r3, r7
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013ca:	4b22      	ldr	r3, [pc, #136]	@ (8001454 <MX_ADC1_Init+0x9c>)
 80013cc:	4a22      	ldr	r2, [pc, #136]	@ (8001458 <MX_ADC1_Init+0xa0>)
 80013ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013d0:	4b20      	ldr	r3, [pc, #128]	@ (8001454 <MX_ADC1_Init+0x9c>)
 80013d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001454 <MX_ADC1_Init+0x9c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013de:	4b1d      	ldr	r3, [pc, #116]	@ (8001454 <MX_ADC1_Init+0x9c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <MX_ADC1_Init+0x9c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <MX_ADC1_Init+0x9c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013f2:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <MX_ADC1_Init+0x9c>)
 80013f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80013fa:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <MX_ADC1_Init+0x9c>)
 80013fc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001400:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001402:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <MX_ADC1_Init+0x9c>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <MX_ADC1_Init+0x9c>)
 800140a:	2201      	movs	r2, #1
 800140c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800140e:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <MX_ADC1_Init+0x9c>)
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001416:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <MX_ADC1_Init+0x9c>)
 8001418:	2201      	movs	r2, #1
 800141a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800141c:	480d      	ldr	r0, [pc, #52]	@ (8001454 <MX_ADC1_Init+0x9c>)
 800141e:	f001 fc17 	bl	8002c50 <HAL_ADC_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001428:	f000 fb74 	bl	8001b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800142c:	2300      	movs	r3, #0
 800142e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001430:	2301      	movs	r3, #1
 8001432:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001434:	2302      	movs	r3, #2
 8001436:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	@ (8001454 <MX_ADC1_Init+0x9c>)
 800143e:	f001 fd6f 	bl	8002f20 <HAL_ADC_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001448:	f000 fb64 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200002f4 	.word	0x200002f4
 8001458:	40012000 	.word	0x40012000

0800145c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001462:	463b      	mov	r3, r7
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800146e:	4b22      	ldr	r3, [pc, #136]	@ (80014f8 <MX_ADC2_Init+0x9c>)
 8001470:	4a22      	ldr	r2, [pc, #136]	@ (80014fc <MX_ADC2_Init+0xa0>)
 8001472:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001474:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <MX_ADC2_Init+0x9c>)
 8001476:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800147a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800147c:	4b1e      	ldr	r3, [pc, #120]	@ (80014f8 <MX_ADC2_Init+0x9c>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001482:	4b1d      	ldr	r3, [pc, #116]	@ (80014f8 <MX_ADC2_Init+0x9c>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001488:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <MX_ADC2_Init+0x9c>)
 800148a:	2200      	movs	r2, #0
 800148c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800148e:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <MX_ADC2_Init+0x9c>)
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001496:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <MX_ADC2_Init+0x9c>)
 8001498:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800149c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800149e:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <MX_ADC2_Init+0x9c>)
 80014a0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80014a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014a6:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <MX_ADC2_Init+0x9c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80014ac:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <MX_ADC2_Init+0x9c>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80014b2:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <MX_ADC2_Init+0x9c>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ba:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <MX_ADC2_Init+0x9c>)
 80014bc:	2201      	movs	r2, #1
 80014be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014c0:	480d      	ldr	r0, [pc, #52]	@ (80014f8 <MX_ADC2_Init+0x9c>)
 80014c2:	f001 fbc5 	bl	8002c50 <HAL_ADC_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 80014cc:	f000 fb22 	bl	8001b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80014d8:	2302      	movs	r3, #2
 80014da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014dc:	463b      	mov	r3, r7
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <MX_ADC2_Init+0x9c>)
 80014e2:	f001 fd1d 	bl	8002f20 <HAL_ADC_ConfigChannel>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 80014ec:	f000 fb12 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000033c 	.word	0x2000033c
 80014fc:	40012100 	.word	0x40012100

08001500 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <MX_I2C1_Init+0x50>)
 8001506:	4a13      	ldr	r2, [pc, #76]	@ (8001554 <MX_I2C1_Init+0x54>)
 8001508:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800150a:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <MX_I2C1_Init+0x50>)
 800150c:	4a12      	ldr	r2, [pc, #72]	@ (8001558 <MX_I2C1_Init+0x58>)
 800150e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001510:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <MX_I2C1_Init+0x50>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001516:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <MX_I2C1_Init+0x50>)
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <MX_I2C1_Init+0x50>)
 800151e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001522:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001524:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <MX_I2C1_Init+0x50>)
 8001526:	2200      	movs	r2, #0
 8001528:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800152a:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <MX_I2C1_Init+0x50>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001530:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <MX_I2C1_Init+0x50>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <MX_I2C1_Init+0x50>)
 8001538:	2200      	movs	r2, #0
 800153a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800153c:	4804      	ldr	r0, [pc, #16]	@ (8001550 <MX_I2C1_Init+0x50>)
 800153e:	f002 fdf9 	bl	8004134 <HAL_I2C_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001548:	f000 fae4 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000444 	.word	0x20000444
 8001554:	40005400 	.word	0x40005400
 8001558:	00061a80 	.word	0x00061a80

0800155c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001560:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <MX_I2S2_Init+0x54>)
 8001562:	4a14      	ldr	r2, [pc, #80]	@ (80015b4 <MX_I2S2_Init+0x58>)
 8001564:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001566:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <MX_I2S2_Init+0x54>)
 8001568:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800156c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800156e:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <MX_I2S2_Init+0x54>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8001574:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <MX_I2S2_Init+0x54>)
 8001576:	2201      	movs	r2, #1
 8001578:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800157a:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <MX_I2S2_Init+0x54>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001580:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <MX_I2S2_Init+0x54>)
 8001582:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001586:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001588:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <MX_I2S2_Init+0x54>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800158e:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <MX_I2S2_Init+0x54>)
 8001590:	2200      	movs	r2, #0
 8001592:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <MX_I2S2_Init+0x54>)
 8001596:	2200      	movs	r2, #0
 8001598:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800159a:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <MX_I2S2_Init+0x54>)
 800159c:	f003 fdee 	bl	800517c <HAL_I2S_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80015a6:	f000 fab5 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000498 	.word	0x20000498
 80015b4:	40003800 	.word	0x40003800

080015b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08e      	sub	sp, #56	@ 0x38
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015cc:	f107 0320 	add.w	r3, r7, #32
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
 80015e4:	615a      	str	r2, [r3, #20]
 80015e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001698 <MX_TIM2_Init+0xe0>)
 80015ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 80015f0:	4b29      	ldr	r3, [pc, #164]	@ (8001698 <MX_TIM2_Init+0xe0>)
 80015f2:	2202      	movs	r2, #2
 80015f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f6:	4b28      	ldr	r3, [pc, #160]	@ (8001698 <MX_TIM2_Init+0xe0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 72;
 80015fc:	4b26      	ldr	r3, [pc, #152]	@ (8001698 <MX_TIM2_Init+0xe0>)
 80015fe:	2248      	movs	r2, #72	@ 0x48
 8001600:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001602:	4b25      	ldr	r3, [pc, #148]	@ (8001698 <MX_TIM2_Init+0xe0>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001608:	4b23      	ldr	r3, [pc, #140]	@ (8001698 <MX_TIM2_Init+0xe0>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800160e:	4822      	ldr	r0, [pc, #136]	@ (8001698 <MX_TIM2_Init+0xe0>)
 8001610:	f006 fb82 	bl	8007d18 <HAL_TIM_Base_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800161a:	f000 fa7b 	bl	8001b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001622:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001624:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001628:	4619      	mov	r1, r3
 800162a:	481b      	ldr	r0, [pc, #108]	@ (8001698 <MX_TIM2_Init+0xe0>)
 800162c:	f006 fd48 	bl	80080c0 <HAL_TIM_ConfigClockSource>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001636:	f000 fa6d 	bl	8001b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800163a:	4817      	ldr	r0, [pc, #92]	@ (8001698 <MX_TIM2_Init+0xe0>)
 800163c:	f006 fc24 	bl	8007e88 <HAL_TIM_PWM_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001646:	f000 fa65 	bl	8001b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800164a:	2320      	movs	r3, #32
 800164c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001652:	f107 0320 	add.w	r3, r7, #32
 8001656:	4619      	mov	r1, r3
 8001658:	480f      	ldr	r0, [pc, #60]	@ (8001698 <MX_TIM2_Init+0xe0>)
 800165a:	f007 f8ef 	bl	800883c <HAL_TIMEx_MasterConfigSynchronization>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001664:	f000 fa56 	bl	8001b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001668:	2360      	movs	r3, #96	@ 0x60
 800166a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2200      	movs	r2, #0
 800167c:	4619      	mov	r1, r3
 800167e:	4806      	ldr	r0, [pc, #24]	@ (8001698 <MX_TIM2_Init+0xe0>)
 8001680:	f006 fc5c 	bl	8007f3c <HAL_TIM_PWM_ConfigChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800168a:	f000 fa43 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	3738      	adds	r7, #56	@ 0x38
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000540 	.word	0x20000540

0800169c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80016a0:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <MX_UART5_Init+0x4c>)
 80016a2:	4a12      	ldr	r2, [pc, #72]	@ (80016ec <MX_UART5_Init+0x50>)
 80016a4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80016a6:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <MX_UART5_Init+0x4c>)
 80016a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016ac:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <MX_UART5_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <MX_UART5_Init+0x4c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80016ba:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <MX_UART5_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80016c0:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <MX_UART5_Init+0x4c>)
 80016c2:	220c      	movs	r2, #12
 80016c4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c6:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <MX_UART5_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <MX_UART5_Init+0x4c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80016d2:	4805      	ldr	r0, [pc, #20]	@ (80016e8 <MX_UART5_Init+0x4c>)
 80016d4:	f007 f92e 	bl	8008934 <HAL_UART_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80016de:	f000 fa19 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000588 	.word	0x20000588
 80016ec:	40005000 	.word	0x40005000

080016f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <MX_DMA_Init+0x78>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001768 <MX_DMA_Init+0x78>)
 8001700:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <MX_DMA_Init+0x78>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	603b      	str	r3, [r7, #0]
 8001716:	4b14      	ldr	r3, [pc, #80]	@ (8001768 <MX_DMA_Init+0x78>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	4a13      	ldr	r2, [pc, #76]	@ (8001768 <MX_DMA_Init+0x78>)
 800171c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001720:	6313      	str	r3, [r2, #48]	@ 0x30
 8001722:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <MX_DMA_Init+0x78>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	200f      	movs	r0, #15
 8001734:	f001 ff6f 	bl	8003616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001738:	200f      	movs	r0, #15
 800173a:	f001 ff88 	bl	800364e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	2038      	movs	r0, #56	@ 0x38
 8001744:	f001 ff67 	bl	8003616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001748:	2038      	movs	r0, #56	@ 0x38
 800174a:	f001 ff80 	bl	800364e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	203a      	movs	r0, #58	@ 0x3a
 8001754:	f001 ff5f 	bl	8003616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001758:	203a      	movs	r0, #58	@ 0x3a
 800175a:	f001 ff78 	bl	800364e <HAL_NVIC_EnableIRQ>

}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800

0800176c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	@ 0x30
 8001770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001772:	f107 031c 	add.w	r3, r7, #28
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
 8001786:	4b6f      	ldr	r3, [pc, #444]	@ (8001944 <MX_GPIO_Init+0x1d8>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a6e      	ldr	r2, [pc, #440]	@ (8001944 <MX_GPIO_Init+0x1d8>)
 800178c:	f043 0310 	orr.w	r3, r3, #16
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b6c      	ldr	r3, [pc, #432]	@ (8001944 <MX_GPIO_Init+0x1d8>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	4b68      	ldr	r3, [pc, #416]	@ (8001944 <MX_GPIO_Init+0x1d8>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a67      	ldr	r2, [pc, #412]	@ (8001944 <MX_GPIO_Init+0x1d8>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b65      	ldr	r3, [pc, #404]	@ (8001944 <MX_GPIO_Init+0x1d8>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b61      	ldr	r3, [pc, #388]	@ (8001944 <MX_GPIO_Init+0x1d8>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a60      	ldr	r2, [pc, #384]	@ (8001944 <MX_GPIO_Init+0x1d8>)
 80017c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b5e      	ldr	r3, [pc, #376]	@ (8001944 <MX_GPIO_Init+0x1d8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b5a      	ldr	r3, [pc, #360]	@ (8001944 <MX_GPIO_Init+0x1d8>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a59      	ldr	r2, [pc, #356]	@ (8001944 <MX_GPIO_Init+0x1d8>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b57      	ldr	r3, [pc, #348]	@ (8001944 <MX_GPIO_Init+0x1d8>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	4b53      	ldr	r3, [pc, #332]	@ (8001944 <MX_GPIO_Init+0x1d8>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a52      	ldr	r2, [pc, #328]	@ (8001944 <MX_GPIO_Init+0x1d8>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b50      	ldr	r3, [pc, #320]	@ (8001944 <MX_GPIO_Init+0x1d8>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	4b4c      	ldr	r3, [pc, #304]	@ (8001944 <MX_GPIO_Init+0x1d8>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a4b      	ldr	r2, [pc, #300]	@ (8001944 <MX_GPIO_Init+0x1d8>)
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b49      	ldr	r3, [pc, #292]	@ (8001944 <MX_GPIO_Init+0x1d8>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	2108      	movs	r1, #8
 800182e:	4846      	ldr	r0, [pc, #280]	@ (8001948 <MX_GPIO_Init+0x1dc>)
 8001830:	f002 fc34 	bl	800409c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001834:	2201      	movs	r2, #1
 8001836:	2101      	movs	r1, #1
 8001838:	4844      	ldr	r0, [pc, #272]	@ (800194c <MX_GPIO_Init+0x1e0>)
 800183a:	f002 fc2f 	bl	800409c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_debug_GPIO_Port, ADC_debug_Pin, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	2102      	movs	r1, #2
 8001842:	4842      	ldr	r0, [pc, #264]	@ (800194c <MX_GPIO_Init+0x1e0>)
 8001844:	f002 fc2a 	bl	800409c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001848:	2200      	movs	r2, #0
 800184a:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800184e:	4840      	ldr	r0, [pc, #256]	@ (8001950 <MX_GPIO_Init+0x1e4>)
 8001850:	f002 fc24 	bl	800409c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001854:	2308      	movs	r3, #8
 8001856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001858:	2301      	movs	r3, #1
 800185a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	4619      	mov	r1, r3
 800186a:	4837      	ldr	r0, [pc, #220]	@ (8001948 <MX_GPIO_Init+0x1dc>)
 800186c:	f002 fa7a 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001870:	2301      	movs	r3, #1
 8001872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	2301      	movs	r3, #1
 8001876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	4619      	mov	r1, r3
 8001886:	4831      	ldr	r0, [pc, #196]	@ (800194c <MX_GPIO_Init+0x1e0>)
 8001888:	f002 fa6c 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_debug_Pin */
  GPIO_InitStruct.Pin = ADC_debug_Pin;
 800188c:	2302      	movs	r3, #2
 800188e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001890:	2301      	movs	r3, #1
 8001892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001898:	2303      	movs	r3, #3
 800189a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ADC_debug_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	4619      	mov	r1, r3
 80018a2:	482a      	ldr	r0, [pc, #168]	@ (800194c <MX_GPIO_Init+0x1e0>)
 80018a4:	f002 fa5e 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pulse_Oximeter_Int_Pin */
  GPIO_InitStruct.Pin = Pulse_Oximeter_Int_Pin;
 80018a8:	2301      	movs	r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018ac:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b2:	2301      	movs	r3, #1
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Pulse_Oximeter_Int_GPIO_Port, &GPIO_InitStruct);
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	4825      	ldr	r0, [pc, #148]	@ (8001954 <MX_GPIO_Init+0x1e8>)
 80018be:	f002 fa51 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80018c2:	2304      	movs	r3, #4
 80018c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	4619      	mov	r1, r3
 80018d4:	481f      	ldr	r0, [pc, #124]	@ (8001954 <MX_GPIO_Init+0x1e8>)
 80018d6:	f002 fa45 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80018da:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80018de:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	4817      	ldr	r0, [pc, #92]	@ (8001950 <MX_GPIO_Init+0x1e4>)
 80018f4:	f002 fa36 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80018f8:	2320      	movs	r3, #32
 80018fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fc:	2300      	movs	r3, #0
 80018fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	4619      	mov	r1, r3
 800190a:	4811      	ldr	r0, [pc, #68]	@ (8001950 <MX_GPIO_Init+0x1e4>)
 800190c:	f002 fa2a 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001910:	2302      	movs	r3, #2
 8001912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001914:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	4619      	mov	r1, r3
 8001924:	4808      	ldr	r0, [pc, #32]	@ (8001948 <MX_GPIO_Init+0x1dc>)
 8001926:	f002 fa1d 	bl	8003d64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	2006      	movs	r0, #6
 8001930:	f001 fe71 	bl	8003616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001934:	2006      	movs	r0, #6
 8001936:	f001 fe8a 	bl	800364e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800193a:	bf00      	nop
 800193c:	3730      	adds	r7, #48	@ 0x30
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	40021000 	.word	0x40021000
 800194c:	40020800 	.word	0x40020800
 8001950:	40020c00 	.word	0x40020c00
 8001954:	40020400 	.word	0x40020400

08001958 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Pulse_Oximeter_Int_Pin)
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d102      	bne.n	800196e <HAL_GPIO_EXTI_Callback+0x16>
	{
		pulseOximiterIntFlag = 1;
 8001968:	4b04      	ldr	r3, [pc, #16]	@ (800197c <HAL_GPIO_EXTI_Callback+0x24>)
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
	}
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	200005d8 	.word	0x200005d8

08001980 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001980:	b5b0      	push	{r4, r5, r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	static float adc_dc_left = 0.0; // left microphone is PA0 i think
	static float adc_dc_right = 0.0;
	static uint16_t adc_sum_left = 0;
	static uint16_t adc_sum_right = 0;

	if (hadc->Instance == ADC1) {
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a58      	ldr	r2, [pc, #352]	@ (8001af0 <HAL_ADC_ConvCpltCallback+0x170>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d14e      	bne.n	8001a30 <HAL_ADC_ConvCpltCallback+0xb0>
		adc_sum_left = 0;
 8001992:	4b58      	ldr	r3, [pc, #352]	@ (8001af4 <HAL_ADC_ConvCpltCallback+0x174>)
 8001994:	2200      	movs	r2, #0
 8001996:	801a      	strh	r2, [r3, #0]

		for (int i = 0; i < MIC_OVERSAMPLING; i++) {
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	e00c      	b.n	80019b8 <HAL_ADC_ConvCpltCallback+0x38>
			adc_sum_left += adc1_buffer[i];
 800199e:	4a56      	ldr	r2, [pc, #344]	@ (8001af8 <HAL_ADC_ConvCpltCallback+0x178>)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80019a6:	4b53      	ldr	r3, [pc, #332]	@ (8001af4 <HAL_ADC_ConvCpltCallback+0x174>)
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	4b51      	ldr	r3, [pc, #324]	@ (8001af4 <HAL_ADC_ConvCpltCallback+0x174>)
 80019b0:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < MIC_OVERSAMPLING; i++) {
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	3301      	adds	r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b07      	cmp	r3, #7
 80019bc:	ddef      	ble.n	800199e <HAL_ADC_ConvCpltCallback+0x1e>
		}

		adc_dc_left 	= ADC_DC_FILT_COEFF * adc_dc_left 	+ (1-ADC_DC_FILT_COEFF) * adc_sum_left; // calculate dc offset
 80019be:	4b4f      	ldr	r3, [pc, #316]	@ (8001afc <HAL_ADC_ConvCpltCallback+0x17c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fdc0 	bl	8000548 <__aeabi_f2d>
 80019c8:	a345      	add	r3, pc, #276	@ (adr r3, 8001ae0 <HAL_ADC_ConvCpltCallback+0x160>)
 80019ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ce:	f7fe fe13 	bl	80005f8 <__aeabi_dmul>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4614      	mov	r4, r2
 80019d8:	461d      	mov	r5, r3
 80019da:	4b46      	ldr	r3, [pc, #280]	@ (8001af4 <HAL_ADC_ConvCpltCallback+0x174>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fda0 	bl	8000524 <__aeabi_i2d>
 80019e4:	a340      	add	r3, pc, #256	@ (adr r3, 8001ae8 <HAL_ADC_ConvCpltCallback+0x168>)
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	f7fe fe05 	bl	80005f8 <__aeabi_dmul>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4620      	mov	r0, r4
 80019f4:	4629      	mov	r1, r5
 80019f6:	f7fe fc49 	bl	800028c <__adddf3>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	f7ff f8f1 	bl	8000be8 <__aeabi_d2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4a3c      	ldr	r2, [pc, #240]	@ (8001afc <HAL_ADC_ConvCpltCallback+0x17c>)
 8001a0a:	6013      	str	r3, [r2, #0]

		audio_tx_buffer[0] = (int16_t)(adc_dc_left - adc_sum_left); // remove dc offset from sum and invert
 8001a0c:	4b3b      	ldr	r3, [pc, #236]	@ (8001afc <HAL_ADC_ConvCpltCallback+0x17c>)
 8001a0e:	ed93 7a00 	vldr	s14, [r3]
 8001a12:	4b38      	ldr	r3, [pc, #224]	@ (8001af4 <HAL_ADC_ConvCpltCallback+0x174>)
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a26:	ee17 3a90 	vmov	r3, s15
 8001a2a:	b21a      	sxth	r2, r3
 8001a2c:	4b34      	ldr	r3, [pc, #208]	@ (8001b00 <HAL_ADC_ConvCpltCallback+0x180>)
 8001a2e:	801a      	strh	r2, [r3, #0]

		//HAL_GPIO_TogglePin(GPIOC, ADC_debug_Pin);
	}

	if (hadc->Instance == ADC2) {
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a33      	ldr	r2, [pc, #204]	@ (8001b04 <HAL_ADC_ConvCpltCallback+0x184>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d14e      	bne.n	8001ad8 <HAL_ADC_ConvCpltCallback+0x158>
		adc_sum_right = 0;
 8001a3a:	4b33      	ldr	r3, [pc, #204]	@ (8001b08 <HAL_ADC_ConvCpltCallback+0x188>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	801a      	strh	r2, [r3, #0]

		for (int i = 0; i < MIC_OVERSAMPLING; i++) {
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	e00c      	b.n	8001a60 <HAL_ADC_ConvCpltCallback+0xe0>
			adc_sum_right += adc2_buffer[i];
 8001a46:	4a31      	ldr	r2, [pc, #196]	@ (8001b0c <HAL_ADC_ConvCpltCallback+0x18c>)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b08 <HAL_ADC_ConvCpltCallback+0x188>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	4413      	add	r3, r2
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	4b2c      	ldr	r3, [pc, #176]	@ (8001b08 <HAL_ADC_ConvCpltCallback+0x188>)
 8001a58:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < MIC_OVERSAMPLING; i++) {
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b07      	cmp	r3, #7
 8001a64:	ddef      	ble.n	8001a46 <HAL_ADC_ConvCpltCallback+0xc6>
		}

		adc_dc_right 	= ADC_DC_FILT_COEFF * adc_dc_right 	+ (1-ADC_DC_FILT_COEFF) * adc_sum_right; // calculate dc offset
 8001a66:	4b2a      	ldr	r3, [pc, #168]	@ (8001b10 <HAL_ADC_ConvCpltCallback+0x190>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fd6c 	bl	8000548 <__aeabi_f2d>
 8001a70:	a31b      	add	r3, pc, #108	@ (adr r3, 8001ae0 <HAL_ADC_ConvCpltCallback+0x160>)
 8001a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a76:	f7fe fdbf 	bl	80005f8 <__aeabi_dmul>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4614      	mov	r4, r2
 8001a80:	461d      	mov	r5, r3
 8001a82:	4b21      	ldr	r3, [pc, #132]	@ (8001b08 <HAL_ADC_ConvCpltCallback+0x188>)
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fd4c 	bl	8000524 <__aeabi_i2d>
 8001a8c:	a316      	add	r3, pc, #88	@ (adr r3, 8001ae8 <HAL_ADC_ConvCpltCallback+0x168>)
 8001a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a92:	f7fe fdb1 	bl	80005f8 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	f7fe fbf5 	bl	800028c <__adddf3>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f7ff f89d 	bl	8000be8 <__aeabi_d2f>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4a17      	ldr	r2, [pc, #92]	@ (8001b10 <HAL_ADC_ConvCpltCallback+0x190>)
 8001ab2:	6013      	str	r3, [r2, #0]

		audio_tx_buffer[1] = (int16_t)(adc_dc_right - adc_sum_right); // remove dc offset from sum and invert
 8001ab4:	4b16      	ldr	r3, [pc, #88]	@ (8001b10 <HAL_ADC_ConvCpltCallback+0x190>)
 8001ab6:	ed93 7a00 	vldr	s14, [r3]
 8001aba:	4b13      	ldr	r3, [pc, #76]	@ (8001b08 <HAL_ADC_ConvCpltCallback+0x188>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ace:	ee17 3a90 	vmov	r3, s15
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b00 <HAL_ADC_ConvCpltCallback+0x180>)
 8001ad6:	805a      	strh	r2, [r3, #2]

		//HAL_GPIO_TogglePin(GPIOC, ADC_debug_Pin);
	}
}
 8001ad8:	bf00      	nop
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae0:	d916872b 	.word	0xd916872b
 8001ae4:	3feff7ce 	.word	0x3feff7ce
 8001ae8:	d2f1aa00 	.word	0xd2f1aa00
 8001aec:	3f50624d 	.word	0x3f50624d
 8001af0:	40012000 	.word	0x40012000
 8001af4:	20000602 	.word	0x20000602
 8001af8:	200005dc 	.word	0x200005dc
 8001afc:	20000604 	.word	0x20000604
 8001b00:	200005fc 	.word	0x200005fc
 8001b04:	40012100 	.word	0x40012100
 8001b08:	20000608 	.word	0x20000608
 8001b0c:	200005ec 	.word	0x200005ec
 8001b10:	2000060c 	.word	0x2000060c

08001b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b18:	b672      	cpsid	i
}
 8001b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <Error_Handler+0x8>

08001b20 <MAX30102_WriteRegister>:
uint8_t max30102_sensor_data[6 * MAX30102_SAMPLES_PER_BURST] = {0};


/* USER CODE BEGIN 0 */
// I2C write to register
HAL_StatusTypeDef MAX30102_WriteRegister(uint8_t reg, uint8_t value) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af04      	add	r7, sp, #16
 8001b26:	4603      	mov	r3, r0
 8001b28:	460a      	mov	r2, r1
 8001b2a:	71fb      	strb	r3, [r7, #7]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(&hi2c1, (MAX30102_ADDRESS << 1), reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 100);
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	2364      	movs	r3, #100	@ 0x64
 8001b36:	9302      	str	r3, [sp, #8]
 8001b38:	2301      	movs	r3, #1
 8001b3a:	9301      	str	r3, [sp, #4]
 8001b3c:	1dbb      	adds	r3, r7, #6
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	2301      	movs	r3, #1
 8001b42:	21ae      	movs	r1, #174	@ 0xae
 8001b44:	4803      	ldr	r0, [pc, #12]	@ (8001b54 <MAX30102_WriteRegister+0x34>)
 8001b46:	f002 fc39 	bl	80043bc <HAL_I2C_Mem_Write>
 8001b4a:	4603      	mov	r3, r0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000444 	.word	0x20000444

08001b58 <MAX30102_ReadRegister>:

// I2C read from register
HAL_StatusTypeDef MAX30102_ReadRegister(uint8_t reg, uint8_t *value) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af04      	add	r7, sp, #16
 8001b5e:	4603      	mov	r3, r0
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Read(&hi2c1, (MAX30102_ADDRESS << 1), reg, I2C_MEMADD_SIZE_8BIT, value, 1, 100);
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	2364      	movs	r3, #100	@ 0x64
 8001b6a:	9302      	str	r3, [sp, #8]
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2301      	movs	r3, #1
 8001b76:	21ae      	movs	r1, #174	@ 0xae
 8001b78:	4803      	ldr	r0, [pc, #12]	@ (8001b88 <MAX30102_ReadRegister+0x30>)
 8001b7a:	f002 fd19 	bl	80045b0 <HAL_I2C_Mem_Read>
 8001b7e:	4603      	mov	r3, r0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000444 	.word	0x20000444

08001b8c <MAX30102_ReadFIFO>:

// Read FIFO data
uint8_t MAX30102_ReadFIFO(uint8_t *buffer, uint8_t length) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af04      	add	r7, sp, #16
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Read(&hi2c1, (MAX30102_ADDRESS << 1), REG_FIFO_DATA, I2C_MEMADD_SIZE_8BIT, buffer, length, 100);
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	2264      	movs	r2, #100	@ 0x64
 8001b9e:	9202      	str	r2, [sp, #8]
 8001ba0:	9301      	str	r3, [sp, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	2207      	movs	r2, #7
 8001baa:	21ae      	movs	r1, #174	@ 0xae
 8001bac:	4803      	ldr	r0, [pc, #12]	@ (8001bbc <MAX30102_ReadFIFO+0x30>)
 8001bae:	f002 fcff 	bl	80045b0 <HAL_I2C_Mem_Read>
 8001bb2:	4603      	mov	r3, r0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000444 	.word	0x20000444

08001bc0 <MAX30102_Init>:

// MAX30102 initialization
uint8_t MAX30102_Init(void) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
    uint8_t part_id = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	71bb      	strb	r3, [r7, #6]

    // Read MAX30102 ID to verify device presence
    if (MAX30102_ReadRegister(REG_PART_ID, &part_id) != HAL_OK || part_id != 0x15) {
 8001bca:	1dbb      	adds	r3, r7, #6
 8001bcc:	4619      	mov	r1, r3
 8001bce:	20ff      	movs	r0, #255	@ 0xff
 8001bd0:	f7ff ffc2 	bl	8001b58 <MAX30102_ReadRegister>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d102      	bne.n	8001be0 <MAX30102_Init+0x20>
 8001bda:	79bb      	ldrb	r3, [r7, #6]
 8001bdc:	2b15      	cmp	r3, #21
 8001bde:	d001      	beq.n	8001be4 <MAX30102_Init+0x24>
        return 0;  // Device not found
 8001be0:	2300      	movs	r3, #0
 8001be2:	e02b      	b.n	8001c3c <MAX30102_Init+0x7c>
    }

    // Reset MAX30102
    MAX30102_WriteRegister(REG_MODE_CONFIG, (1 << 6));  // Reset MAX30102  (bit 6)
 8001be4:	2140      	movs	r1, #64	@ 0x40
 8001be6:	2009      	movs	r0, #9
 8001be8:	f7ff ff9a 	bl	8001b20 <MAX30102_WriteRegister>
    HAL_Delay(10);
 8001bec:	200a      	movs	r0, #10
 8001bee:	f001 f80b 	bl	8002c08 <HAL_Delay>

    // Configure SPO2 mode
    MAX30102_WriteRegister(REG_MODE_CONFIG, 0b011 << BIT_MODE);  // Use heart rate mode only (or 0x07 to enable SPO2)
 8001bf2:	2103      	movs	r1, #3
 8001bf4:	2009      	movs	r0, #9
 8001bf6:	f7ff ff93 	bl	8001b20 <MAX30102_WriteRegister>
    uint8_t spo2_bits = (0b01 << BIT_SPO2_ADC_RGE) |  (0b000 << BIT_SPO2_SR) | (0b01 << BIT_LED_PW); //pw of 11 browns out supply
 8001bfa:	2321      	movs	r3, #33	@ 0x21
 8001bfc:	71fb      	strb	r3, [r7, #7]
    MAX30102_WriteRegister(REG_SPO2_CONFIG, spo2_bits);  // Set ADC range and sampling rate
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	4619      	mov	r1, r3
 8001c02:	200a      	movs	r0, #10
 8001c04:	f7ff ff8c 	bl	8001b20 <MAX30102_WriteRegister>

    // Set LED brightness (0x24 represents medium brightness, adjustable)
    redLEDCurrent = 50;
 8001c08:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <MAX30102_Init+0x84>)
 8001c0a:	2232      	movs	r2, #50	@ 0x32
 8001c0c:	701a      	strb	r2, [r3, #0]
    MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c44 <MAX30102_Init+0x84>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	4619      	mov	r1, r3
 8001c14:	2001      	movs	r0, #1
 8001c16:	f000 f825 	bl	8001c64 <MAX30102_setLedCurrent>
    MAX30102_setLedCurrent(IR_LED, redLEDCurrent);
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <MAX30102_Init+0x84>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	2002      	movs	r0, #2
 8001c22:	f000 f81f 	bl	8001c64 <MAX30102_setLedCurrent>

    // interrupts
    MAX30102_WriteRegister(REG_FIFO_CONFIG, (0b000 << BIT_SMP_AVG) | ((32 - MAX30102_SAMPLES_PER_BURST) << BIT_FIFO_A_FULL_VAL)); // max value is 15 min is 0
 8001c26:	2100      	movs	r1, #0
 8001c28:	2008      	movs	r0, #8
 8001c2a:	f7ff ff79 	bl	8001b20 <MAX30102_WriteRegister>
    MAX30102_WriteRegister(REG_INT1_EN, 1 << BIT_EN_A_FULL_INT);
 8001c2e:	2180      	movs	r1, #128	@ 0x80
 8001c30:	2002      	movs	r0, #2
 8001c32:	f7ff ff75 	bl	8001b20 <MAX30102_WriteRegister>

    MAX30102_ClearInterrupt();
 8001c36:	f000 f807 	bl	8001c48 <MAX30102_ClearInterrupt>

    return 1;  // Initialization successful
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200006dc 	.word	0x200006dc

08001c48 <MAX30102_ClearInterrupt>:

void MAX30102_ClearInterrupt(void) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
	uint8_t reset = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	71fb      	strb	r3, [r7, #7]
	MAX30102_ReadRegister(REG_STATUS, &reset); // clears initial interrupt
 8001c52:	1dfb      	adds	r3, r7, #7
 8001c54:	4619      	mov	r1, r3
 8001c56:	2000      	movs	r0, #0
 8001c58:	f7ff ff7e 	bl	8001b58 <MAX30102_ReadRegister>
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <MAX30102_setLedCurrent>:
	return 1;
}


uint8_t MAX30102_setLedCurrent(uint8_t led, uint8_t currentLevel)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	460a      	mov	r2, r1
 8001c6e:	71fb      	strb	r3, [r7, #7]
 8001c70:	4613      	mov	r3, r2
 8001c72:	71bb      	strb	r3, [r7, #6]
	uint8_t ledRegister = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	73fb      	strb	r3, [r7, #15]

	switch(led){
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d002      	beq.n	8001c84 <MAX30102_setLedCurrent+0x20>
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d003      	beq.n	8001c8a <MAX30102_setLedCurrent+0x26>
 8001c82:	e005      	b.n	8001c90 <MAX30102_setLedCurrent+0x2c>
	case RED_LED: 	ledRegister = REG_LED1_PA; break;
 8001c84:	230c      	movs	r3, #12
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	e002      	b.n	8001c90 <MAX30102_setLedCurrent+0x2c>
	case IR_LED:	ledRegister = REG_LED2_PA; break;
 8001c8a:	230d      	movs	r3, #13
 8001c8c:	73fb      	strb	r3, [r7, #15]
 8001c8e:	bf00      	nop
	}

	if( MAX30102_WriteRegister(ledRegister, currentLevel) != HAL_OK){
 8001c90:	79ba      	ldrb	r2, [r7, #6]
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	4611      	mov	r1, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff42 	bl	8001b20 <MAX30102_WriteRegister>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MAX30102_setLedCurrent+0x42>
		return 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e000      	b.n	8001ca8 <MAX30102_setLedCurrent+0x44>
	}
	return 1;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <MAX30102_DumpFifo>:

uint8_t MAX30102_DumpFifo() {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
	uint8_t retval = MAX30102_ReadFIFO(max30102_sensor_data, 6 * MAX30102_SAMPLES_PER_BURST);
 8001cb6:	21c0      	movs	r1, #192	@ 0xc0
 8001cb8:	4805      	ldr	r0, [pc, #20]	@ (8001cd0 <MAX30102_DumpFifo+0x20>)
 8001cba:	f7ff ff67 	bl	8001b8c <MAX30102_ReadFIFO>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
	MAX30102_ClearInterrupt();
 8001cc2:	f7ff ffc1 	bl	8001c48 <MAX30102_ClearInterrupt>
	return retval;
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	200006e8 	.word	0x200006e8

08001cd4 <MAX30102_ProcessData>:

void MAX30102_ProcessData() {
 8001cd4:	b5b0      	push	{r4, r5, r7, lr}
 8001cd6:	b08e      	sub	sp, #56	@ 0x38
 8001cd8:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < MAX30102_SAMPLES_PER_BURST; i++) {
 8001cda:	2300      	movs	r3, #0
 8001cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cde:	e048      	b.n	8001d72 <MAX30102_ProcessData+0x9e>
		// heart rate mode only needs red, so only save red data initially long term
		FIFO_LED_DATA rawData = {0};
 8001ce0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
		uint8_t n = i*6;
 8001cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	0052      	lsls	r2, r2, #1
 8001cf2:	4413      	add	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		rawData.redLedRaw = ((max30102_sensor_data[n+0] << 16) | (max30102_sensor_data[n+1] << 8) | max30102_sensor_data[n+2]);
 8001cfa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001cfe:	4a21      	ldr	r2, [pc, #132]	@ (8001d84 <MAX30102_ProcessData+0xb0>)
 8001d00:	5cd3      	ldrb	r3, [r2, r3]
 8001d02:	041a      	lsls	r2, r3, #16
 8001d04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d08:	3301      	adds	r3, #1
 8001d0a:	491e      	ldr	r1, [pc, #120]	@ (8001d84 <MAX30102_ProcessData+0xb0>)
 8001d0c:	5ccb      	ldrb	r3, [r1, r3]
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	4313      	orrs	r3, r2
 8001d12:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001d16:	3202      	adds	r2, #2
 8001d18:	491a      	ldr	r1, [pc, #104]	@ (8001d84 <MAX30102_ProcessData+0xb0>)
 8001d1a:	5c8a      	ldrb	r2, [r1, r2]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
		rawData.irLedRaw = 	((max30102_sensor_data[n+3] << 16) | (max30102_sensor_data[n+4] << 8) | max30102_sensor_data[n+5]);
 8001d20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d24:	3303      	adds	r3, #3
 8001d26:	4a17      	ldr	r2, [pc, #92]	@ (8001d84 <MAX30102_ProcessData+0xb0>)
 8001d28:	5cd3      	ldrb	r3, [r2, r3]
 8001d2a:	041a      	lsls	r2, r3, #16
 8001d2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d30:	3304      	adds	r3, #4
 8001d32:	4914      	ldr	r1, [pc, #80]	@ (8001d84 <MAX30102_ProcessData+0xb0>)
 8001d34:	5ccb      	ldrb	r3, [r1, r3]
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001d3e:	3205      	adds	r2, #5
 8001d40:	4910      	ldr	r1, [pc, #64]	@ (8001d84 <MAX30102_ProcessData+0xb0>)
 8001d42:	5c8a      	ldrb	r2, [r1, r2]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	62fb      	str	r3, [r7, #44]	@ 0x2c

		pulseOximeter = pulseOximeter_update(rawData);
 8001d48:	4c0f      	ldr	r4, [pc, #60]	@ (8001d88 <MAX30102_ProcessData+0xb4>)
 8001d4a:	4638      	mov	r0, r7
 8001d4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d50:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001d54:	f000 f97e 	bl	8002054 <pulseOximeter_update>
 8001d58:	4625      	mov	r5, r4
 8001d5a:	463c      	mov	r4, r7
 8001d5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d68:	e885 0003 	stmia.w	r5, {r0, r1}
	for (int i = 0 ; i < MAX30102_SAMPLES_PER_BURST; i++) {
 8001d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d6e:	3301      	adds	r3, #1
 8001d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d74:	2b1f      	cmp	r3, #31
 8001d76:	ddb3      	ble.n	8001ce0 <MAX30102_ProcessData+0xc>

	}
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3738      	adds	r7, #56	@ 0x38
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bdb0      	pop	{r4, r5, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200006e8 	.word	0x200006e8
 8001d88:	20000610 	.word	0x20000610

08001d8c <compare>:

	currentTemperature = temperature;
}

// Comparison function for qsort
int compare(const void *a, const void *b) {
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
    return (*(int*)a - *(int*)b);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	1ad3      	subs	r3, r2, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <getMedian>:

// Function to calculate the median
double getMedian(int arr[], int size) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
    // Sort the array
    qsort(arr, size, sizeof(int), compare);
 8001db6:	6839      	ldr	r1, [r7, #0]
 8001db8:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <getMedian+0x44>)
 8001dba:	2204      	movs	r2, #4
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f00b f9da 	bl	800d176 <qsort>

    return arr[size - 1 - 3];
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001dc8:	3b04      	subs	r3, #4
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	4413      	add	r3, r2
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fba6 	bl	8000524 <__aeabi_i2d>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001de0:	eeb0 0a47 	vmov.f32	s0, s14
 8001de4:	eef0 0a67 	vmov.f32	s1, s15
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	08001d8d 	.word	0x08001d8d
 8001df4:	00000000 	.word	0x00000000

08001df8 <detectPulse>:


bool detectPulse(float sensor_value)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	ed87 0a01 	vstr	s0, [r7, #4]
  static float prev_sensor_value = 0;
  static uint8_t values_went_down = 0;
  static uint16_t currentBeatIndex = 0;

  if(sensor_value > PULSE_MAX_THRESHOLD)
 8001e02:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e06:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001f78 <detectPulse+0x180>
 8001e0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e12:	dd0b      	ble.n	8001e2c <detectPulse+0x34>
  {
    currentPulseDetectorState = PULSE_IDLE;
 8001e14:	4b59      	ldr	r3, [pc, #356]	@ (8001f7c <detectPulse+0x184>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]
    prev_sensor_value = 0;
 8001e1a:	4b59      	ldr	r3, [pc, #356]	@ (8001f80 <detectPulse+0x188>)
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
    values_went_down = 0;
 8001e22:	4b58      	ldr	r3, [pc, #352]	@ (8001f84 <detectPulse+0x18c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
    return false;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e09b      	b.n	8001f64 <detectPulse+0x16c>
  }

  currentBeatIndex++;
 8001e2c:	4b56      	ldr	r3, [pc, #344]	@ (8001f88 <detectPulse+0x190>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	3301      	adds	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	4b54      	ldr	r3, [pc, #336]	@ (8001f88 <detectPulse+0x190>)
 8001e36:	801a      	strh	r2, [r3, #0]

  switch(currentPulseDetectorState)
 8001e38:	4b50      	ldr	r3, [pc, #320]	@ (8001f7c <detectPulse+0x184>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d06e      	beq.n	8001f1e <detectPulse+0x126>
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	f300 808b 	bgt.w	8001f5c <detectPulse+0x164>
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <detectPulse+0x58>
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d011      	beq.n	8001e72 <detectPulse+0x7a>
 8001e4e:	e085      	b.n	8001f5c <detectPulse+0x164>
  {
    case PULSE_IDLE:
      if(sensor_value >= PULSE_MIN_THRESHOLD) {
 8001e50:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e54:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001f8c <detectPulse+0x194>
 8001e58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e60:	da00      	bge.n	8001e64 <detectPulse+0x6c>
        currentPulseDetectorState = PULSE_TRACE_UP;
        values_went_down = 0;
      }
      break;
 8001e62:	e07b      	b.n	8001f5c <detectPulse+0x164>
        currentPulseDetectorState = PULSE_TRACE_UP;
 8001e64:	4b45      	ldr	r3, [pc, #276]	@ (8001f7c <detectPulse+0x184>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
        values_went_down = 0;
 8001e6a:	4b46      	ldr	r3, [pc, #280]	@ (8001f84 <detectPulse+0x18c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
      break;
 8001e70:	e074      	b.n	8001f5c <detectPulse+0x164>

    case PULSE_TRACE_UP:
      if (!(sensor_value > prev_sensor_value))
 8001e72:	4b43      	ldr	r3, [pc, #268]	@ (8001f80 <detectPulse+0x188>)
 8001e74:	edd3 7a00 	vldr	s15, [r3]
 8001e78:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e84:	bfcc      	ite	gt
 8001e86:	2301      	movgt	r3, #1
 8001e88:	2300      	movle	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f083 0301 	eor.w	r3, r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d061      	beq.n	8001f5a <detectPulse+0x162>
      {
    	if (currentBeatIndex > 0) valuesBPM[bpmIndex] = currentBeatIndex;
 8001e96:	4b3c      	ldr	r3, [pc, #240]	@ (8001f88 <detectPulse+0x190>)
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d007      	beq.n	8001eae <detectPulse+0xb6>
 8001e9e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f88 <detectPulse+0x190>)
 8001ea0:	8819      	ldrh	r1, [r3, #0]
 8001ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8001f90 <detectPulse+0x198>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b3a      	ldr	r3, [pc, #232]	@ (8001f94 <detectPulse+0x19c>)
 8001eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    	currentBeatIndex = 0;
 8001eae:	4b36      	ldr	r3, [pc, #216]	@ (8001f88 <detectPulse+0x190>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	801a      	strh	r2, [r3, #0]

        bpmIndex++;
 8001eb4:	4b36      	ldr	r3, [pc, #216]	@ (8001f90 <detectPulse+0x198>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	4b34      	ldr	r3, [pc, #208]	@ (8001f90 <detectPulse+0x198>)
 8001ebe:	701a      	strb	r2, [r3, #0]

        if (bpmIndex >= PULSE_BPM_SAMPLE_SIZE){
 8001ec0:	4b33      	ldr	r3, [pc, #204]	@ (8001f90 <detectPulse+0x198>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b09      	cmp	r3, #9
 8001ec6:	d925      	bls.n	8001f14 <detectPulse+0x11c>
        	bpmIndex = 0;
 8001ec8:	4b31      	ldr	r3, [pc, #196]	@ (8001f90 <detectPulse+0x198>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
        	uint16_t medianIdx = getMedian(valuesBPM, (int)PULSE_BPM_SAMPLE_SIZE);
 8001ece:	210a      	movs	r1, #10
 8001ed0:	4830      	ldr	r0, [pc, #192]	@ (8001f94 <detectPulse+0x19c>)
 8001ed2:	f7ff ff6b 	bl	8001dac <getMedian>
 8001ed6:	ec53 2b10 	vmov	r2, r3, d0
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	f7fe fe63 	bl	8000ba8 <__aeabi_d2uiz>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	81fb      	strh	r3, [r7, #14]

        	if(medianIdx > 0)
 8001ee6:	89fb      	ldrh	r3, [r7, #14]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d013      	beq.n	8001f14 <detectPulse+0x11c>
        		currentBPM = (60.0 * MAX30102_SAMPLE_RATE) / medianIdx;
 8001eec:	89fb      	ldrh	r3, [r7, #14]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fb18 	bl	8000524 <__aeabi_i2d>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	a11d      	add	r1, pc, #116	@ (adr r1, 8001f70 <detectPulse+0x178>)
 8001efa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001efe:	f7fe fca5 	bl	800084c <__aeabi_ddiv>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4610      	mov	r0, r2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f7fe fe6d 	bl	8000be8 <__aeabi_d2f>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4a21      	ldr	r2, [pc, #132]	@ (8001f98 <detectPulse+0x1a0>)
 8001f12:	6013      	str	r3, [r2, #0]
        }

        currentPulseDetectorState = PULSE_TRACE_DOWN;
 8001f14:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <detectPulse+0x184>)
 8001f16:	2202      	movs	r2, #2
 8001f18:	701a      	strb	r2, [r3, #0]

        return true;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e022      	b.n	8001f64 <detectPulse+0x16c>
      }
      break;

    case PULSE_TRACE_DOWN:
      if(sensor_value < prev_sensor_value)
 8001f1e:	4b18      	ldr	r3, [pc, #96]	@ (8001f80 <detectPulse+0x188>)
 8001f20:	edd3 7a00 	vldr	s15, [r3]
 8001f24:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f30:	d505      	bpl.n	8001f3e <detectPulse+0x146>
      {
        values_went_down++;
 8001f32:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <detectPulse+0x18c>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	3301      	adds	r3, #1
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <detectPulse+0x18c>)
 8001f3c:	701a      	strb	r2, [r3, #0]
      }


      if(sensor_value < PULSE_MIN_THRESHOLD)
 8001f3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f42:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001f8c <detectPulse+0x194>
 8001f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4e:	d400      	bmi.n	8001f52 <detectPulse+0x15a>
      {
        currentPulseDetectorState = PULSE_IDLE;
      }
      break;
 8001f50:	e004      	b.n	8001f5c <detectPulse+0x164>
        currentPulseDetectorState = PULSE_IDLE;
 8001f52:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <detectPulse+0x184>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
      break;
 8001f58:	e000      	b.n	8001f5c <detectPulse+0x164>
      break;
 8001f5a:	bf00      	nop
  }

  prev_sensor_value = sensor_value;
 8001f5c:	4a08      	ldr	r2, [pc, #32]	@ (8001f80 <detectPulse+0x188>)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6013      	str	r3, [r2, #0]
  return false;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	f3af 8000 	nop.w
 8001f70:	00000000 	.word	0x00000000
 8001f74:	40a77000 	.word	0x40a77000
 8001f78:	44fa0000 	.word	0x44fa0000
 8001f7c:	200006e4 	.word	0x200006e4
 8001f80:	200007a8 	.word	0x200007a8
 8001f84:	200007ac 	.word	0x200007ac
 8001f88:	200007ae 	.word	0x200007ae
 8001f8c:	42c80000 	.word	0x42c80000
 8001f90:	200006c8 	.word	0x200006c8
 8001f94:	200006a0 	.word	0x200006a0
 8001f98:	2000069c 	.word	0x2000069c

08001f9c <balanceIntesities>:

void balanceIntesities( float redLedDC, float IRLedDC )
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001fa6:	edc7 0a00 	vstr	s1, [r7]
	uint32_t currentTime = millis();
 8001faa:	f000 fd77 	bl	8002a9c <millis>
 8001fae:	60f8      	str	r0, [r7, #12]
  if( currentTime - lastREDLedCurrentCheck >= RED_LED_CURRENT_ADJUSTMENT_MS)
 8001fb0:	4b25      	ldr	r3, [pc, #148]	@ (8002048 <balanceIntesities+0xac>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1a9b      	subs	r3, r3, r2
 8001fba:	2bc7      	cmp	r3, #199	@ 0xc7
 8001fbc:	d940      	bls.n	8002040 <balanceIntesities+0xa4>
  {
	if( IRLedDC - redLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent < 51)
 8001fbe:	ed97 7a00 	vldr	s14, [r7]
 8001fc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fca:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800204c <balanceIntesities+0xb0>
 8001fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd6:	dd10      	ble.n	8001ffa <balanceIntesities+0x5e>
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002050 <balanceIntesities+0xb4>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b32      	cmp	r3, #50	@ 0x32
 8001fde:	d80c      	bhi.n	8001ffa <balanceIntesities+0x5e>
    {
		redLEDCurrent++;
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8002050 <balanceIntesities+0xb4>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	4b19      	ldr	r3, [pc, #100]	@ (8002050 <balanceIntesities+0xb4>)
 8001fea:	701a      	strb	r2, [r3, #0]
		MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8001fec:	4b18      	ldr	r3, [pc, #96]	@ (8002050 <balanceIntesities+0xb4>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f7ff fe36 	bl	8001c64 <MAX30102_setLedCurrent>
 8001ff8:	e01c      	b.n	8002034 <balanceIntesities+0x98>
    }
    else if(redLedDC - IRLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent > 0)
 8001ffa:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ffe:	edd7 7a00 	vldr	s15, [r7]
 8002002:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002006:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800204c <balanceIntesities+0xb0>
 800200a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800200e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002012:	dd0f      	ble.n	8002034 <balanceIntesities+0x98>
 8002014:	4b0e      	ldr	r3, [pc, #56]	@ (8002050 <balanceIntesities+0xb4>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00b      	beq.n	8002034 <balanceIntesities+0x98>
    {
    	redLEDCurrent--;
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <balanceIntesities+0xb4>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	3b01      	subs	r3, #1
 8002022:	b2da      	uxtb	r2, r3
 8002024:	4b0a      	ldr	r3, [pc, #40]	@ (8002050 <balanceIntesities+0xb4>)
 8002026:	701a      	strb	r2, [r3, #0]
    	MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8002028:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <balanceIntesities+0xb4>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	4619      	mov	r1, r3
 800202e:	2001      	movs	r0, #1
 8002030:	f7ff fe18 	bl	8001c64 <MAX30102_setLedCurrent>
    }

    lastREDLedCurrentCheck = millis();
 8002034:	f000 fd32 	bl	8002a9c <millis>
 8002038:	4603      	mov	r3, r0
 800203a:	461a      	mov	r2, r3
 800203c:	4b02      	ldr	r3, [pc, #8]	@ (8002048 <balanceIntesities+0xac>)
 800203e:	601a      	str	r2, [r3, #0]
  }
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	200006e0 	.word	0x200006e0
 800204c:	461c4000 	.word	0x461c4000
 8002050:	200006dc 	.word	0x200006dc

08002054 <pulseOximeter_update>:

MAX30102 pulseOximeter_update(FIFO_LED_DATA m_fifoData)
	{
 8002054:	b5b0      	push	{r4, r5, r7, lr}
 8002056:	b090      	sub	sp, #64	@ 0x40
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	e883 0006 	stmia.w	r3, {r1, r2}
		MAX30102 result = {
 8002062:	f107 0310 	add.w	r3, r7, #16
 8002066:	2228      	movs	r2, #40	@ 0x28
 8002068:	2100      	movs	r1, #0
 800206a:	4618      	mov	r0, r3
 800206c:	f00b ff27 	bl	800debe <memset>
 8002070:	4b96      	ldr	r3, [pc, #600]	@ (80022cc <pulseOximeter_update+0x278>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	627b      	str	r3, [r7, #36]	@ 0x24
 8002076:	4b96      	ldr	r3, [pc, #600]	@ (80022d0 <pulseOximeter_update+0x27c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	633b      	str	r3, [r7, #48]	@ 0x30
		/*float dcFilteredIR*/ 0.0,
		/*float dcFilteredRed*/ 0.0,
		/*float temperature;*/ currentTemperature
	};

	dcFilterIR = dcRemoval( (float)m_fifoData.irLedRaw, dcFilterIR.w, ALPHA );
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	ee07 3a90 	vmov	s15, r3
 8002082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002086:	4b93      	ldr	r3, [pc, #588]	@ (80022d4 <pulseOximeter_update+0x280>)
 8002088:	ed93 7a00 	vldr	s14, [r3]
 800208c:	ed9f 1a92 	vldr	s2, [pc, #584]	@ 80022d8 <pulseOximeter_update+0x284>
 8002090:	eef0 0a47 	vmov.f32	s1, s14
 8002094:	eeb0 0a67 	vmov.f32	s0, s15
 8002098:	f7fe ff6e 	bl	8000f78 <dcRemoval>
 800209c:	eeb0 7a40 	vmov.f32	s14, s0
 80020a0:	eef0 7a60 	vmov.f32	s15, s1
 80020a4:	4b8b      	ldr	r3, [pc, #556]	@ (80022d4 <pulseOximeter_update+0x280>)
 80020a6:	ed83 7a00 	vstr	s14, [r3]
 80020aa:	edc3 7a01 	vstr	s15, [r3, #4]
	dcFilterRed = dcRemoval( (float)m_fifoData.redLedRaw, dcFilterRed.w, ALPHA );
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	ee07 3a90 	vmov	s15, r3
 80020b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020b8:	4b88      	ldr	r3, [pc, #544]	@ (80022dc <pulseOximeter_update+0x288>)
 80020ba:	ed93 7a00 	vldr	s14, [r3]
 80020be:	ed9f 1a86 	vldr	s2, [pc, #536]	@ 80022d8 <pulseOximeter_update+0x284>
 80020c2:	eef0 0a47 	vmov.f32	s1, s14
 80020c6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ca:	f7fe ff55 	bl	8000f78 <dcRemoval>
 80020ce:	eeb0 7a40 	vmov.f32	s14, s0
 80020d2:	eef0 7a60 	vmov.f32	s15, s1
 80020d6:	4b81      	ldr	r3, [pc, #516]	@ (80022dc <pulseOximeter_update+0x288>)
 80020d8:	ed83 7a00 	vstr	s14, [r3]
 80020dc:	edc3 7a01 	vstr	s15, [r3, #4]

	float meanDiffResIR = meanDiff( dcFilterIR.result, &meanDiffIR);
 80020e0:	4b7c      	ldr	r3, [pc, #496]	@ (80022d4 <pulseOximeter_update+0x280>)
 80020e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80020e6:	487e      	ldr	r0, [pc, #504]	@ (80022e0 <pulseOximeter_update+0x28c>)
 80020e8:	eeb0 0a67 	vmov.f32	s0, s15
 80020ec:	f7fe ffc0 	bl	8001070 <meanDiff>
 80020f0:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
	lowPassButterworthFilter( meanDiffResIR/*-dcFilterIR.result*/, &lpbFilterIR );
 80020f4:	487b      	ldr	r0, [pc, #492]	@ (80022e4 <pulseOximeter_update+0x290>)
 80020f6:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80020fa:	f7fe ff71 	bl	8000fe0 <lowPassButterworthFilter>

	irACValueSqSum += dcFilterIR.result * dcFilterIR.result;
 80020fe:	4b75      	ldr	r3, [pc, #468]	@ (80022d4 <pulseOximeter_update+0x280>)
 8002100:	ed93 7a01 	vldr	s14, [r3, #4]
 8002104:	4b73      	ldr	r3, [pc, #460]	@ (80022d4 <pulseOximeter_update+0x280>)
 8002106:	edd3 7a01 	vldr	s15, [r3, #4]
 800210a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800210e:	4b76      	ldr	r3, [pc, #472]	@ (80022e8 <pulseOximeter_update+0x294>)
 8002110:	edd3 7a00 	vldr	s15, [r3]
 8002114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002118:	4b73      	ldr	r3, [pc, #460]	@ (80022e8 <pulseOximeter_update+0x294>)
 800211a:	edc3 7a00 	vstr	s15, [r3]
	redACValueSqSum += dcFilterRed.result * dcFilterRed.result;
 800211e:	4b6f      	ldr	r3, [pc, #444]	@ (80022dc <pulseOximeter_update+0x288>)
 8002120:	ed93 7a01 	vldr	s14, [r3, #4]
 8002124:	4b6d      	ldr	r3, [pc, #436]	@ (80022dc <pulseOximeter_update+0x288>)
 8002126:	edd3 7a01 	vldr	s15, [r3, #4]
 800212a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800212e:	4b6f      	ldr	r3, [pc, #444]	@ (80022ec <pulseOximeter_update+0x298>)
 8002130:	edd3 7a00 	vldr	s15, [r3]
 8002134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002138:	4b6c      	ldr	r3, [pc, #432]	@ (80022ec <pulseOximeter_update+0x298>)
 800213a:	edc3 7a00 	vstr	s15, [r3]
	samplesRecorded++;
 800213e:	4b6c      	ldr	r3, [pc, #432]	@ (80022f0 <pulseOximeter_update+0x29c>)
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	3301      	adds	r3, #1
 8002144:	b29a      	uxth	r2, r3
 8002146:	4b6a      	ldr	r3, [pc, #424]	@ (80022f0 <pulseOximeter_update+0x29c>)
 8002148:	801a      	strh	r2, [r3, #0]

	if( detectPulse( lpbFilterIR.result ) &&  samplesRecorded > 0 )
 800214a:	4b66      	ldr	r3, [pc, #408]	@ (80022e4 <pulseOximeter_update+0x290>)
 800214c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002150:	eeb0 0a67 	vmov.f32	s0, s15
 8002154:	f7ff fe50 	bl	8001df8 <detectPulse>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 8088 	beq.w	8002270 <pulseOximeter_update+0x21c>
 8002160:	4b63      	ldr	r3, [pc, #396]	@ (80022f0 <pulseOximeter_update+0x29c>)
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 8083 	beq.w	8002270 <pulseOximeter_update+0x21c>
	{
		result.pulseDetected=true;
 800216a:	2301      	movs	r3, #1
 800216c:	743b      	strb	r3, [r7, #16]
		pulsesDetected++;
 800216e:	4b61      	ldr	r3, [pc, #388]	@ (80022f4 <pulseOximeter_update+0x2a0>)
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	3301      	adds	r3, #1
 8002174:	b29a      	uxth	r2, r3
 8002176:	4b5f      	ldr	r3, [pc, #380]	@ (80022f4 <pulseOximeter_update+0x2a0>)
 8002178:	801a      	strh	r2, [r3, #0]

		if( (pulsesDetected % RESET_SPO2_EVERY_N_PULSES == 0) )
 800217a:	4b5e      	ldr	r3, [pc, #376]	@ (80022f4 <pulseOximeter_update+0x2a0>)
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	b29b      	uxth	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d173      	bne.n	8002270 <pulseOximeter_update+0x21c>
		{
			float ratioRMS = log( sqrt(redACValueSqSum/samplesRecorded) ) / log( sqrt(irACValueSqSum/samplesRecorded) );
 8002188:	4b58      	ldr	r3, [pc, #352]	@ (80022ec <pulseOximeter_update+0x298>)
 800218a:	ed93 7a00 	vldr	s14, [r3]
 800218e:	4b58      	ldr	r3, [pc, #352]	@ (80022f0 <pulseOximeter_update+0x29c>)
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	ee07 3a90 	vmov	s15, r3
 8002196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800219a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800219e:	ee16 0a90 	vmov	r0, s13
 80021a2:	f7fe f9d1 	bl	8000548 <__aeabi_f2d>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	ec43 2b10 	vmov	d0, r2, r3
 80021ae:	f00d fde5 	bl	800fd7c <sqrt>
 80021b2:	eeb0 7a40 	vmov.f32	s14, s0
 80021b6:	eef0 7a60 	vmov.f32	s15, s1
 80021ba:	eeb0 0a47 	vmov.f32	s0, s14
 80021be:	eef0 0a67 	vmov.f32	s1, s15
 80021c2:	f00d fd9d 	bl	800fd00 <log>
 80021c6:	ec55 4b10 	vmov	r4, r5, d0
 80021ca:	4b47      	ldr	r3, [pc, #284]	@ (80022e8 <pulseOximeter_update+0x294>)
 80021cc:	ed93 7a00 	vldr	s14, [r3]
 80021d0:	4b47      	ldr	r3, [pc, #284]	@ (80022f0 <pulseOximeter_update+0x29c>)
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	ee07 3a90 	vmov	s15, r3
 80021d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80021e0:	ee16 0a90 	vmov	r0, s13
 80021e4:	f7fe f9b0 	bl	8000548 <__aeabi_f2d>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	ec43 2b10 	vmov	d0, r2, r3
 80021f0:	f00d fdc4 	bl	800fd7c <sqrt>
 80021f4:	eeb0 7a40 	vmov.f32	s14, s0
 80021f8:	eef0 7a60 	vmov.f32	s15, s1
 80021fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002200:	eef0 0a67 	vmov.f32	s1, s15
 8002204:	f00d fd7c 	bl	800fd00 <log>
 8002208:	ec53 2b10 	vmov	r2, r3, d0
 800220c:	4620      	mov	r0, r4
 800220e:	4629      	mov	r1, r5
 8002210:	f7fe fb1c 	bl	800084c <__aeabi_ddiv>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	f7fe fce4 	bl	8000be8 <__aeabi_d2f>
 8002220:	4603      	mov	r3, r0
 8002222:	63bb      	str	r3, [r7, #56]	@ 0x38
			currentSpO2Value = 114.0 - 18.0 * ratioRMS;
 8002224:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002226:	f7fe f98f 	bl	8000548 <__aeabi_f2d>
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	4b32      	ldr	r3, [pc, #200]	@ (80022f8 <pulseOximeter_update+0x2a4>)
 8002230:	f7fe f9e2 	bl	80005f8 <__aeabi_dmul>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	f04f 0000 	mov.w	r0, #0
 800223c:	492f      	ldr	r1, [pc, #188]	@ (80022fc <pulseOximeter_update+0x2a8>)
 800223e:	f7fe f823 	bl	8000288 <__aeabi_dsub>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4610      	mov	r0, r2
 8002248:	4619      	mov	r1, r3
 800224a:	f7fe fccd 	bl	8000be8 <__aeabi_d2f>
 800224e:	4603      	mov	r3, r0
 8002250:	4a1e      	ldr	r2, [pc, #120]	@ (80022cc <pulseOximeter_update+0x278>)
 8002252:	6013      	str	r3, [r2, #0]

			//uint8_t ratio =  ((redACValueSqSum/samplesRecorded) * 100) / (irACValueSqSum/samplesRecorded);
			//if (ratio > 183) ratio = 183;
			//currentSpO2Value = uch_spo2_table[ratio];

			result.SpO2 = currentSpO2Value;
 8002254:	4b1d      	ldr	r3, [pc, #116]	@ (80022cc <pulseOximeter_update+0x278>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24

			irACValueSqSum = 0;
 800225a:	4b23      	ldr	r3, [pc, #140]	@ (80022e8 <pulseOximeter_update+0x294>)
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
			redACValueSqSum = 0;
 8002262:	4b22      	ldr	r3, [pc, #136]	@ (80022ec <pulseOximeter_update+0x298>)
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
			samplesRecorded = 0;
 800226a:	4b21      	ldr	r3, [pc, #132]	@ (80022f0 <pulseOximeter_update+0x29c>)
 800226c:	2200      	movs	r2, #0
 800226e:	801a      	strh	r2, [r3, #0]
		}
	}

	balanceIntesities( dcFilterRed.w, dcFilterIR.w );
 8002270:	4b1a      	ldr	r3, [pc, #104]	@ (80022dc <pulseOximeter_update+0x288>)
 8002272:	edd3 7a00 	vldr	s15, [r3]
 8002276:	4b17      	ldr	r3, [pc, #92]	@ (80022d4 <pulseOximeter_update+0x280>)
 8002278:	ed93 7a00 	vldr	s14, [r3]
 800227c:	eef0 0a47 	vmov.f32	s1, s14
 8002280:	eeb0 0a67 	vmov.f32	s0, s15
 8002284:	f7ff fe8a 	bl	8001f9c <balanceIntesities>

	result.heartBPM = currentBPM;
 8002288:	4b1d      	ldr	r3, [pc, #116]	@ (8002300 <pulseOximeter_update+0x2ac>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	617b      	str	r3, [r7, #20]
	result.irCardiogram = lpbFilterIR.result;
 800228e:	4b15      	ldr	r3, [pc, #84]	@ (80022e4 <pulseOximeter_update+0x290>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	61bb      	str	r3, [r7, #24]
	result.irDcValue = dcFilterIR.w;
 8002294:	4b0f      	ldr	r3, [pc, #60]	@ (80022d4 <pulseOximeter_update+0x280>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	61fb      	str	r3, [r7, #28]
	result.redDcValue = dcFilterRed.w;
 800229a:	4b10      	ldr	r3, [pc, #64]	@ (80022dc <pulseOximeter_update+0x288>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	623b      	str	r3, [r7, #32]
	result.dcFilteredIR = dcFilterIR.result;
 80022a0:	4b0c      	ldr	r3, [pc, #48]	@ (80022d4 <pulseOximeter_update+0x280>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	result.dcFilteredRed = dcFilterRed.result;
 80022a6:	4b0d      	ldr	r3, [pc, #52]	@ (80022dc <pulseOximeter_update+0x288>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	633b      	str	r3, [r7, #48]	@ 0x30

	return result;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	461d      	mov	r5, r3
 80022b0:	f107 0410 	add.w	r4, r7, #16
 80022b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022c0:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	3740      	adds	r7, #64	@ 0x40
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bdb0      	pop	{r4, r5, r7, pc}
 80022cc:	200006d8 	.word	0x200006d8
 80022d0:	20000000 	.word	0x20000000
 80022d4:	20000638 	.word	0x20000638
 80022d8:	3f733333 	.word	0x3f733333
 80022dc:	20000640 	.word	0x20000640
 80022e0:	20000648 	.word	0x20000648
 80022e4:	20000690 	.word	0x20000690
 80022e8:	200006cc 	.word	0x200006cc
 80022ec:	200006d0 	.word	0x200006d0
 80022f0:	200006d4 	.word	0x200006d4
 80022f4:	200006d6 	.word	0x200006d6
 80022f8:	40320000 	.word	0x40320000
 80022fc:	405c8000 	.word	0x405c8000
 8002300:	2000069c 	.word	0x2000069c

08002304 <MAX30102_getBPM>:

float MAX30102_getBPM(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
	return pulseOximeter.heartBPM;
 8002308:	4b04      	ldr	r3, [pc, #16]	@ (800231c <MAX30102_getBPM+0x18>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	ee07 3a90 	vmov	s15, r3
}
 8002310:	eeb0 0a67 	vmov.f32	s0, s15
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	20000610 	.word	0x20000610

08002320 <MAX30102_getSPO2>:
float MAX30102_getSPO2(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
	return pulseOximeter.SpO2;
 8002324:	4b04      	ldr	r3, [pc, #16]	@ (8002338 <MAX30102_getSPO2+0x18>)
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	ee07 3a90 	vmov	s15, r3
}
 800232c:	eeb0 0a67 	vmov.f32	s0, s15
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	20000610 	.word	0x20000610

0800233c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
 8002346:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <HAL_MspInit+0x4c>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234a:	4a0f      	ldr	r2, [pc, #60]	@ (8002388 <HAL_MspInit+0x4c>)
 800234c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002350:	6453      	str	r3, [r2, #68]	@ 0x44
 8002352:	4b0d      	ldr	r3, [pc, #52]	@ (8002388 <HAL_MspInit+0x4c>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002356:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	603b      	str	r3, [r7, #0]
 8002362:	4b09      	ldr	r3, [pc, #36]	@ (8002388 <HAL_MspInit+0x4c>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	4a08      	ldr	r2, [pc, #32]	@ (8002388 <HAL_MspInit+0x4c>)
 8002368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800236c:	6413      	str	r3, [r2, #64]	@ 0x40
 800236e:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <HAL_MspInit+0x4c>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800237a:	2007      	movs	r0, #7
 800237c:	f001 f940 	bl	8003600 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40023800 	.word	0x40023800

0800238c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08c      	sub	sp, #48	@ 0x30
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 031c 	add.w	r3, r7, #28
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a5f      	ldr	r2, [pc, #380]	@ (8002528 <HAL_ADC_MspInit+0x19c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d159      	bne.n	8002462 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	4b5e      	ldr	r3, [pc, #376]	@ (800252c <HAL_ADC_MspInit+0x1a0>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b6:	4a5d      	ldr	r2, [pc, #372]	@ (800252c <HAL_ADC_MspInit+0x1a0>)
 80023b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023be:	4b5b      	ldr	r3, [pc, #364]	@ (800252c <HAL_ADC_MspInit+0x1a0>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c6:	61bb      	str	r3, [r7, #24]
 80023c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	4b57      	ldr	r3, [pc, #348]	@ (800252c <HAL_ADC_MspInit+0x1a0>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	4a56      	ldr	r2, [pc, #344]	@ (800252c <HAL_ADC_MspInit+0x1a0>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023da:	4b54      	ldr	r3, [pc, #336]	@ (800252c <HAL_ADC_MspInit+0x1a0>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023e6:	2301      	movs	r3, #1
 80023e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ea:	2303      	movs	r3, #3
 80023ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f2:	f107 031c 	add.w	r3, r7, #28
 80023f6:	4619      	mov	r1, r3
 80023f8:	484d      	ldr	r0, [pc, #308]	@ (8002530 <HAL_ADC_MspInit+0x1a4>)
 80023fa:	f001 fcb3 	bl	8003d64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80023fe:	4b4d      	ldr	r3, [pc, #308]	@ (8002534 <HAL_ADC_MspInit+0x1a8>)
 8002400:	4a4d      	ldr	r2, [pc, #308]	@ (8002538 <HAL_ADC_MspInit+0x1ac>)
 8002402:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002404:	4b4b      	ldr	r3, [pc, #300]	@ (8002534 <HAL_ADC_MspInit+0x1a8>)
 8002406:	2200      	movs	r2, #0
 8002408:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800240a:	4b4a      	ldr	r3, [pc, #296]	@ (8002534 <HAL_ADC_MspInit+0x1a8>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002410:	4b48      	ldr	r3, [pc, #288]	@ (8002534 <HAL_ADC_MspInit+0x1a8>)
 8002412:	2200      	movs	r2, #0
 8002414:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002416:	4b47      	ldr	r3, [pc, #284]	@ (8002534 <HAL_ADC_MspInit+0x1a8>)
 8002418:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800241c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800241e:	4b45      	ldr	r3, [pc, #276]	@ (8002534 <HAL_ADC_MspInit+0x1a8>)
 8002420:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002424:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002426:	4b43      	ldr	r3, [pc, #268]	@ (8002534 <HAL_ADC_MspInit+0x1a8>)
 8002428:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800242c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800242e:	4b41      	ldr	r3, [pc, #260]	@ (8002534 <HAL_ADC_MspInit+0x1a8>)
 8002430:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002434:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002436:	4b3f      	ldr	r3, [pc, #252]	@ (8002534 <HAL_ADC_MspInit+0x1a8>)
 8002438:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800243c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800243e:	4b3d      	ldr	r3, [pc, #244]	@ (8002534 <HAL_ADC_MspInit+0x1a8>)
 8002440:	2200      	movs	r2, #0
 8002442:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002444:	483b      	ldr	r0, [pc, #236]	@ (8002534 <HAL_ADC_MspInit+0x1a8>)
 8002446:	f001 f91d 	bl	8003684 <HAL_DMA_Init>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002450:	f7ff fb60 	bl	8001b14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a37      	ldr	r2, [pc, #220]	@ (8002534 <HAL_ADC_MspInit+0x1a8>)
 8002458:	639a      	str	r2, [r3, #56]	@ 0x38
 800245a:	4a36      	ldr	r2, [pc, #216]	@ (8002534 <HAL_ADC_MspInit+0x1a8>)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002460:	e05e      	b.n	8002520 <HAL_ADC_MspInit+0x194>
  else if(hadc->Instance==ADC2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a35      	ldr	r2, [pc, #212]	@ (800253c <HAL_ADC_MspInit+0x1b0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d159      	bne.n	8002520 <HAL_ADC_MspInit+0x194>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800246c:	2300      	movs	r3, #0
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	4b2e      	ldr	r3, [pc, #184]	@ (800252c <HAL_ADC_MspInit+0x1a0>)
 8002472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002474:	4a2d      	ldr	r2, [pc, #180]	@ (800252c <HAL_ADC_MspInit+0x1a0>)
 8002476:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800247a:	6453      	str	r3, [r2, #68]	@ 0x44
 800247c:	4b2b      	ldr	r3, [pc, #172]	@ (800252c <HAL_ADC_MspInit+0x1a0>)
 800247e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002480:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	4b27      	ldr	r3, [pc, #156]	@ (800252c <HAL_ADC_MspInit+0x1a0>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002490:	4a26      	ldr	r2, [pc, #152]	@ (800252c <HAL_ADC_MspInit+0x1a0>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6313      	str	r3, [r2, #48]	@ 0x30
 8002498:	4b24      	ldr	r3, [pc, #144]	@ (800252c <HAL_ADC_MspInit+0x1a0>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024a4:	2302      	movs	r3, #2
 80024a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024a8:	2303      	movs	r3, #3
 80024aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b0:	f107 031c 	add.w	r3, r7, #28
 80024b4:	4619      	mov	r1, r3
 80024b6:	481e      	ldr	r0, [pc, #120]	@ (8002530 <HAL_ADC_MspInit+0x1a4>)
 80024b8:	f001 fc54 	bl	8003d64 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80024bc:	4b20      	ldr	r3, [pc, #128]	@ (8002540 <HAL_ADC_MspInit+0x1b4>)
 80024be:	4a21      	ldr	r2, [pc, #132]	@ (8002544 <HAL_ADC_MspInit+0x1b8>)
 80024c0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80024c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002540 <HAL_ADC_MspInit+0x1b4>)
 80024c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024c8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002540 <HAL_ADC_MspInit+0x1b4>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80024d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002540 <HAL_ADC_MspInit+0x1b4>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80024d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <HAL_ADC_MspInit+0x1b4>)
 80024d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024dc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024de:	4b18      	ldr	r3, [pc, #96]	@ (8002540 <HAL_ADC_MspInit+0x1b4>)
 80024e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80024e4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024e6:	4b16      	ldr	r3, [pc, #88]	@ (8002540 <HAL_ADC_MspInit+0x1b4>)
 80024e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024ec:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80024ee:	4b14      	ldr	r3, [pc, #80]	@ (8002540 <HAL_ADC_MspInit+0x1b4>)
 80024f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024f4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80024f6:	4b12      	ldr	r3, [pc, #72]	@ (8002540 <HAL_ADC_MspInit+0x1b4>)
 80024f8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80024fc:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024fe:	4b10      	ldr	r3, [pc, #64]	@ (8002540 <HAL_ADC_MspInit+0x1b4>)
 8002500:	2200      	movs	r2, #0
 8002502:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002504:	480e      	ldr	r0, [pc, #56]	@ (8002540 <HAL_ADC_MspInit+0x1b4>)
 8002506:	f001 f8bd 	bl	8003684 <HAL_DMA_Init>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_ADC_MspInit+0x188>
      Error_Handler();
 8002510:	f7ff fb00 	bl	8001b14 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <HAL_ADC_MspInit+0x1b4>)
 8002518:	639a      	str	r2, [r3, #56]	@ 0x38
 800251a:	4a09      	ldr	r2, [pc, #36]	@ (8002540 <HAL_ADC_MspInit+0x1b4>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002520:	bf00      	nop
 8002522:	3730      	adds	r7, #48	@ 0x30
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40012000 	.word	0x40012000
 800252c:	40023800 	.word	0x40023800
 8002530:	40020000 	.word	0x40020000
 8002534:	20000384 	.word	0x20000384
 8002538:	40026410 	.word	0x40026410
 800253c:	40012100 	.word	0x40012100
 8002540:	200003e4 	.word	0x200003e4
 8002544:	40026440 	.word	0x40026440

08002548 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08a      	sub	sp, #40	@ 0x28
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	60da      	str	r2, [r3, #12]
 800255e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a19      	ldr	r2, [pc, #100]	@ (80025cc <HAL_I2C_MspInit+0x84>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d12c      	bne.n	80025c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	4b18      	ldr	r3, [pc, #96]	@ (80025d0 <HAL_I2C_MspInit+0x88>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	4a17      	ldr	r2, [pc, #92]	@ (80025d0 <HAL_I2C_MspInit+0x88>)
 8002574:	f043 0302 	orr.w	r3, r3, #2
 8002578:	6313      	str	r3, [r2, #48]	@ 0x30
 800257a:	4b15      	ldr	r3, [pc, #84]	@ (80025d0 <HAL_I2C_MspInit+0x88>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002586:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800258a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800258c:	2312      	movs	r3, #18
 800258e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002590:	2301      	movs	r3, #1
 8002592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002594:	2300      	movs	r3, #0
 8002596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002598:	2304      	movs	r3, #4
 800259a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4619      	mov	r1, r3
 80025a2:	480c      	ldr	r0, [pc, #48]	@ (80025d4 <HAL_I2C_MspInit+0x8c>)
 80025a4:	f001 fbde 	bl	8003d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	4b08      	ldr	r3, [pc, #32]	@ (80025d0 <HAL_I2C_MspInit+0x88>)
 80025ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b0:	4a07      	ldr	r2, [pc, #28]	@ (80025d0 <HAL_I2C_MspInit+0x88>)
 80025b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80025b8:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <HAL_I2C_MspInit+0x88>)
 80025ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80025c4:	bf00      	nop
 80025c6:	3728      	adds	r7, #40	@ 0x28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40005400 	.word	0x40005400
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40020400 	.word	0x40020400

080025d8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08e      	sub	sp, #56	@ 0x38
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a4a      	ldr	r2, [pc, #296]	@ (800272c <HAL_I2S_MspInit+0x154>)
 8002604:	4293      	cmp	r3, r2
 8002606:	f040 808d 	bne.w	8002724 <HAL_I2S_MspInit+0x14c>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800260a:	2301      	movs	r3, #1
 800260c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 384;
 800260e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002612:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8002614:	2305      	movs	r3, #5
 8002616:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	4618      	mov	r0, r3
 800261e:	f005 fa39 	bl	8007a94 <HAL_RCCEx_PeriphCLKConfig>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 8002628:	f7ff fa74 	bl	8001b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800262c:	2300      	movs	r3, #0
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	4b3f      	ldr	r3, [pc, #252]	@ (8002730 <HAL_I2S_MspInit+0x158>)
 8002632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002634:	4a3e      	ldr	r2, [pc, #248]	@ (8002730 <HAL_I2S_MspInit+0x158>)
 8002636:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800263a:	6413      	str	r3, [r2, #64]	@ 0x40
 800263c:	4b3c      	ldr	r3, [pc, #240]	@ (8002730 <HAL_I2S_MspInit+0x158>)
 800263e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	4b38      	ldr	r3, [pc, #224]	@ (8002730 <HAL_I2S_MspInit+0x158>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002650:	4a37      	ldr	r2, [pc, #220]	@ (8002730 <HAL_I2S_MspInit+0x158>)
 8002652:	f043 0304 	orr.w	r3, r3, #4
 8002656:	6313      	str	r3, [r2, #48]	@ 0x30
 8002658:	4b35      	ldr	r3, [pc, #212]	@ (8002730 <HAL_I2S_MspInit+0x158>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002664:	2300      	movs	r3, #0
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	4b31      	ldr	r3, [pc, #196]	@ (8002730 <HAL_I2S_MspInit+0x158>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266c:	4a30      	ldr	r2, [pc, #192]	@ (8002730 <HAL_I2S_MspInit+0x158>)
 800266e:	f043 0302 	orr.w	r3, r3, #2
 8002672:	6313      	str	r3, [r2, #48]	@ 0x30
 8002674:	4b2e      	ldr	r3, [pc, #184]	@ (8002730 <HAL_I2S_MspInit+0x158>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002680:	2308      	movs	r3, #8
 8002682:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002690:	2305      	movs	r3, #5
 8002692:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002698:	4619      	mov	r1, r3
 800269a:	4826      	ldr	r0, [pc, #152]	@ (8002734 <HAL_I2S_MspInit+0x15c>)
 800269c:	f001 fb62 	bl	8003d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80026a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80026a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026b2:	2305      	movs	r3, #5
 80026b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026ba:	4619      	mov	r1, r3
 80026bc:	481e      	ldr	r0, [pc, #120]	@ (8002738 <HAL_I2S_MspInit+0x160>)
 80026be:	f001 fb51 	bl	8003d64 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80026c2:	4b1e      	ldr	r3, [pc, #120]	@ (800273c <HAL_I2S_MspInit+0x164>)
 80026c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002740 <HAL_I2S_MspInit+0x168>)
 80026c6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80026c8:	4b1c      	ldr	r3, [pc, #112]	@ (800273c <HAL_I2S_MspInit+0x164>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026ce:	4b1b      	ldr	r3, [pc, #108]	@ (800273c <HAL_I2S_MspInit+0x164>)
 80026d0:	2240      	movs	r2, #64	@ 0x40
 80026d2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026d4:	4b19      	ldr	r3, [pc, #100]	@ (800273c <HAL_I2S_MspInit+0x164>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026da:	4b18      	ldr	r3, [pc, #96]	@ (800273c <HAL_I2S_MspInit+0x164>)
 80026dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026e0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026e2:	4b16      	ldr	r3, [pc, #88]	@ (800273c <HAL_I2S_MspInit+0x164>)
 80026e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80026e8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026ea:	4b14      	ldr	r3, [pc, #80]	@ (800273c <HAL_I2S_MspInit+0x164>)
 80026ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026f0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80026f2:	4b12      	ldr	r3, [pc, #72]	@ (800273c <HAL_I2S_MspInit+0x164>)
 80026f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026f8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80026fa:	4b10      	ldr	r3, [pc, #64]	@ (800273c <HAL_I2S_MspInit+0x164>)
 80026fc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002700:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002702:	4b0e      	ldr	r3, [pc, #56]	@ (800273c <HAL_I2S_MspInit+0x164>)
 8002704:	2200      	movs	r2, #0
 8002706:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002708:	480c      	ldr	r0, [pc, #48]	@ (800273c <HAL_I2S_MspInit+0x164>)
 800270a:	f000 ffbb 	bl	8003684 <HAL_DMA_Init>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_I2S_MspInit+0x140>
    {
      Error_Handler();
 8002714:	f7ff f9fe 	bl	8001b14 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a08      	ldr	r2, [pc, #32]	@ (800273c <HAL_I2S_MspInit+0x164>)
 800271c:	639a      	str	r2, [r3, #56]	@ 0x38
 800271e:	4a07      	ldr	r2, [pc, #28]	@ (800273c <HAL_I2S_MspInit+0x164>)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002724:	bf00      	nop
 8002726:	3738      	adds	r7, #56	@ 0x38
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40003800 	.word	0x40003800
 8002730:	40023800 	.word	0x40023800
 8002734:	40020800 	.word	0x40020800
 8002738:	40020400 	.word	0x40020400
 800273c:	200004e0 	.word	0x200004e0
 8002740:	40026070 	.word	0x40026070

08002744 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002754:	d10d      	bne.n	8002772 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	4b09      	ldr	r3, [pc, #36]	@ (8002780 <HAL_TIM_Base_MspInit+0x3c>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	4a08      	ldr	r2, [pc, #32]	@ (8002780 <HAL_TIM_Base_MspInit+0x3c>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6413      	str	r3, [r2, #64]	@ 0x40
 8002766:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <HAL_TIM_Base_MspInit+0x3c>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002772:	bf00      	nop
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800

08002784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	@ 0x28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a28      	ldr	r2, [pc, #160]	@ (8002844 <HAL_UART_MspInit+0xc0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d14a      	bne.n	800283c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	4b27      	ldr	r3, [pc, #156]	@ (8002848 <HAL_UART_MspInit+0xc4>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	4a26      	ldr	r2, [pc, #152]	@ (8002848 <HAL_UART_MspInit+0xc4>)
 80027b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027b6:	4b24      	ldr	r3, [pc, #144]	@ (8002848 <HAL_UART_MspInit+0xc4>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	4b20      	ldr	r3, [pc, #128]	@ (8002848 <HAL_UART_MspInit+0xc4>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002848 <HAL_UART_MspInit+0xc4>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002848 <HAL_UART_MspInit+0xc4>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	4b19      	ldr	r3, [pc, #100]	@ (8002848 <HAL_UART_MspInit+0xc4>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e6:	4a18      	ldr	r2, [pc, #96]	@ (8002848 <HAL_UART_MspInit+0xc4>)
 80027e8:	f043 0308 	orr.w	r3, r3, #8
 80027ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ee:	4b16      	ldr	r3, [pc, #88]	@ (8002848 <HAL_UART_MspInit+0xc4>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002800:	2302      	movs	r3, #2
 8002802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002808:	2303      	movs	r3, #3
 800280a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800280c:	2308      	movs	r3, #8
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	4619      	mov	r1, r3
 8002816:	480d      	ldr	r0, [pc, #52]	@ (800284c <HAL_UART_MspInit+0xc8>)
 8002818:	f001 faa4 	bl	8003d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800281c:	2304      	movs	r3, #4
 800281e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002820:	2302      	movs	r3, #2
 8002822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002828:	2303      	movs	r3, #3
 800282a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800282c:	2308      	movs	r3, #8
 800282e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	4619      	mov	r1, r3
 8002836:	4806      	ldr	r0, [pc, #24]	@ (8002850 <HAL_UART_MspInit+0xcc>)
 8002838:	f001 fa94 	bl	8003d64 <HAL_GPIO_Init>

  /* USER CODE END UART5_MspInit 1 */

  }

}
 800283c:	bf00      	nop
 800283e:	3728      	adds	r7, #40	@ 0x28
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40005000 	.word	0x40005000
 8002848:	40023800 	.word	0x40023800
 800284c:	40020800 	.word	0x40020800
 8002850:	40020c00 	.word	0x40020c00

08002854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002858:	bf00      	nop
 800285a:	e7fd      	b.n	8002858 <NMI_Handler+0x4>

0800285c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002860:	bf00      	nop
 8002862:	e7fd      	b.n	8002860 <HardFault_Handler+0x4>

08002864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <MemManage_Handler+0x4>

0800286c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002870:	bf00      	nop
 8002872:	e7fd      	b.n	8002870 <BusFault_Handler+0x4>

08002874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002878:	bf00      	nop
 800287a:	e7fd      	b.n	8002878 <UsageFault_Handler+0x4>

0800287c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028aa:	f000 f98d 	bl	8002bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pulse_Oximeter_Int_Pin);
 80028b6:	2001      	movs	r0, #1
 80028b8:	f001 fc24 	bl	8004104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80028bc:	bf00      	nop
 80028be:	bd80      	pop	{r7, pc}

080028c0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80028c4:	4802      	ldr	r0, [pc, #8]	@ (80028d0 <DMA1_Stream4_IRQHandler+0x10>)
 80028c6:	f000 ffe3 	bl	8003890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	200004e0 	.word	0x200004e0

080028d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028d8:	4802      	ldr	r0, [pc, #8]	@ (80028e4 <DMA2_Stream0_IRQHandler+0x10>)
 80028da:	f000 ffd9 	bl	8003890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000384 	.word	0x20000384

080028e8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80028ec:	4802      	ldr	r0, [pc, #8]	@ (80028f8 <DMA2_Stream2_IRQHandler+0x10>)
 80028ee:	f000 ffcf 	bl	8003890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200003e4 	.word	0x200003e4

080028fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002900:	4802      	ldr	r0, [pc, #8]	@ (800290c <OTG_FS_IRQHandler+0x10>)
 8002902:	f003 fb21 	bl	8005f48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20001c98 	.word	0x20001c98

08002910 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return 1;
 8002914:	2301      	movs	r3, #1
}
 8002916:	4618      	mov	r0, r3
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <_kill>:

int _kill(int pid, int sig)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800292a:	f00b fb1b 	bl	800df64 <__errno>
 800292e:	4603      	mov	r3, r0
 8002930:	2216      	movs	r2, #22
 8002932:	601a      	str	r2, [r3, #0]
  return -1;
 8002934:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <_exit>:

void _exit (int status)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002948:	f04f 31ff 	mov.w	r1, #4294967295
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff ffe7 	bl	8002920 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002952:	bf00      	nop
 8002954:	e7fd      	b.n	8002952 <_exit+0x12>

08002956 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b086      	sub	sp, #24
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	e00a      	b.n	800297e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002968:	f3af 8000 	nop.w
 800296c:	4601      	mov	r1, r0
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	60ba      	str	r2, [r7, #8]
 8002974:	b2ca      	uxtb	r2, r1
 8002976:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	3301      	adds	r3, #1
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	429a      	cmp	r2, r3
 8002984:	dbf0      	blt.n	8002968 <_read+0x12>
  }

  return len;
 8002986:	687b      	ldr	r3, [r7, #4]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	e009      	b.n	80029b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	60ba      	str	r2, [r7, #8]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	3301      	adds	r3, #1
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	dbf1      	blt.n	80029a2 <_write+0x12>
  }
  return len;
 80029be:	687b      	ldr	r3, [r7, #4]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <_close>:

int _close(int file)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029f0:	605a      	str	r2, [r3, #4]
  return 0;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <_isatty>:

int _isatty(int file)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a08:	2301      	movs	r3, #1
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b085      	sub	sp, #20
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a38:	4a14      	ldr	r2, [pc, #80]	@ (8002a8c <_sbrk+0x5c>)
 8002a3a:	4b15      	ldr	r3, [pc, #84]	@ (8002a90 <_sbrk+0x60>)
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a44:	4b13      	ldr	r3, [pc, #76]	@ (8002a94 <_sbrk+0x64>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d102      	bne.n	8002a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a4c:	4b11      	ldr	r3, [pc, #68]	@ (8002a94 <_sbrk+0x64>)
 8002a4e:	4a12      	ldr	r2, [pc, #72]	@ (8002a98 <_sbrk+0x68>)
 8002a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a52:	4b10      	ldr	r3, [pc, #64]	@ (8002a94 <_sbrk+0x64>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d207      	bcs.n	8002a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a60:	f00b fa80 	bl	800df64 <__errno>
 8002a64:	4603      	mov	r3, r0
 8002a66:	220c      	movs	r2, #12
 8002a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6e:	e009      	b.n	8002a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a70:	4b08      	ldr	r3, [pc, #32]	@ (8002a94 <_sbrk+0x64>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a76:	4b07      	ldr	r3, [pc, #28]	@ (8002a94 <_sbrk+0x64>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	4a05      	ldr	r2, [pc, #20]	@ (8002a94 <_sbrk+0x64>)
 8002a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a82:	68fb      	ldr	r3, [r7, #12]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	20020000 	.word	0x20020000
 8002a90:	00000400 	.word	0x00000400
 8002a94:	200007b0 	.word	0x200007b0
 8002a98:	200024e8 	.word	0x200024e8

08002a9c <millis>:
  }
}

// Get number of elapsed milliseconds
uint32_t millis(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002aa0:	f000 f8a6 	bl	8002bf0 <HAL_GetTick>
 8002aa4:	4603      	mov	r3, r0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ab0:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <SystemInit+0x20>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab6:	4a05      	ldr	r2, [pc, #20]	@ (8002acc <SystemInit+0x20>)
 8002ab8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002abc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

   ldr   sp, =_estack     /* set stack pointer */
 8002ad0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ad4:	f7ff ffea 	bl	8002aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ad8:	480c      	ldr	r0, [pc, #48]	@ (8002b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ada:	490d      	ldr	r1, [pc, #52]	@ (8002b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002adc:	4a0d      	ldr	r2, [pc, #52]	@ (8002b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ae0:	e002      	b.n	8002ae8 <LoopCopyDataInit>

08002ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ae6:	3304      	adds	r3, #4

08002ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aec:	d3f9      	bcc.n	8002ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aee:	4a0a      	ldr	r2, [pc, #40]	@ (8002b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002af0:	4c0a      	ldr	r4, [pc, #40]	@ (8002b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002af4:	e001      	b.n	8002afa <LoopFillZerobss>

08002af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002af8:	3204      	adds	r2, #4

08002afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002afc:	d3fb      	bcc.n	8002af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002afe:	f00b fa37 	bl	800df70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b02:	f7fe fb27 	bl	8001154 <main>
  bx  lr    
 8002b06:	4770      	bx	lr
   ldr   sp, =_estack     /* set stack pointer */
 8002b08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b10:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8002b14:	08010710 	.word	0x08010710
  ldr r2, =_sbss
 8002b18:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8002b1c:	200024e8 	.word	0x200024e8

08002b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b20:	e7fe      	b.n	8002b20 <ADC_IRQHandler>
	...

08002b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b28:	4b0e      	ldr	r3, [pc, #56]	@ (8002b64 <HAL_Init+0x40>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b64 <HAL_Init+0x40>)
 8002b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b34:	4b0b      	ldr	r3, [pc, #44]	@ (8002b64 <HAL_Init+0x40>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a0a      	ldr	r2, [pc, #40]	@ (8002b64 <HAL_Init+0x40>)
 8002b3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b40:	4b08      	ldr	r3, [pc, #32]	@ (8002b64 <HAL_Init+0x40>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a07      	ldr	r2, [pc, #28]	@ (8002b64 <HAL_Init+0x40>)
 8002b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b4c:	2003      	movs	r0, #3
 8002b4e:	f000 fd57 	bl	8003600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b52:	2000      	movs	r0, #0
 8002b54:	f000 f808 	bl	8002b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b58:	f7ff fbf0 	bl	800233c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40023c00 	.word	0x40023c00

08002b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b70:	4b12      	ldr	r3, [pc, #72]	@ (8002bbc <HAL_InitTick+0x54>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4b12      	ldr	r3, [pc, #72]	@ (8002bc0 <HAL_InitTick+0x58>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fd6f 	bl	800366a <HAL_SYSTICK_Config>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e00e      	b.n	8002bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b0f      	cmp	r3, #15
 8002b9a:	d80a      	bhi.n	8002bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba4:	f000 fd37 	bl	8003616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ba8:	4a06      	ldr	r2, [pc, #24]	@ (8002bc4 <HAL_InitTick+0x5c>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e000      	b.n	8002bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000004 	.word	0x20000004
 8002bc0:	2000000c 	.word	0x2000000c
 8002bc4:	20000008 	.word	0x20000008

08002bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bcc:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <HAL_IncTick+0x20>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <HAL_IncTick+0x24>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	4a04      	ldr	r2, [pc, #16]	@ (8002bec <HAL_IncTick+0x24>)
 8002bda:	6013      	str	r3, [r2, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	2000000c 	.word	0x2000000c
 8002bec:	200007b4 	.word	0x200007b4

08002bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf4:	4b03      	ldr	r3, [pc, #12]	@ (8002c04 <HAL_GetTick+0x14>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	200007b4 	.word	0x200007b4

08002c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c10:	f7ff ffee 	bl	8002bf0 <HAL_GetTick>
 8002c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c20:	d005      	beq.n	8002c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c22:	4b0a      	ldr	r3, [pc, #40]	@ (8002c4c <HAL_Delay+0x44>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c2e:	bf00      	nop
 8002c30:	f7ff ffde 	bl	8002bf0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d8f7      	bhi.n	8002c30 <HAL_Delay+0x28>
  {
  }
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	2000000c 	.word	0x2000000c

08002c50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e033      	b.n	8002cce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff fb8c 	bl	800238c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d118      	bne.n	8002cc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c92:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c96:	f023 0302 	bic.w	r3, r3, #2
 8002c9a:	f043 0202 	orr.w	r2, r3, #2
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fa5e 	bl	8003164 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	f043 0201 	orr.w	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cbe:	e001      	b.n	8002cc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_Start_DMA+0x1e>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e0e9      	b.n	8002eca <HAL_ADC_Start_DMA+0x1f2>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d018      	beq.n	8002d3e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d1c:	4b6d      	ldr	r3, [pc, #436]	@ (8002ed4 <HAL_ADC_Start_DMA+0x1fc>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a6d      	ldr	r2, [pc, #436]	@ (8002ed8 <HAL_ADC_Start_DMA+0x200>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	0c9a      	lsrs	r2, r3, #18
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002d30:	e002      	b.n	8002d38 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f9      	bne.n	8002d32 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d4c:	d107      	bne.n	8002d5e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d5c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	f040 80a1 	bne.w	8002eb0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002d76:	f023 0301 	bic.w	r3, r3, #1
 8002d7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d94:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d98:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002da8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dac:	d106      	bne.n	8002dbc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db2:	f023 0206 	bic.w	r2, r3, #6
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	645a      	str	r2, [r3, #68]	@ 0x44
 8002dba:	e002      	b.n	8002dc2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dca:	4b44      	ldr	r3, [pc, #272]	@ (8002edc <HAL_ADC_Start_DMA+0x204>)
 8002dcc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd2:	4a43      	ldr	r2, [pc, #268]	@ (8002ee0 <HAL_ADC_Start_DMA+0x208>)
 8002dd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dda:	4a42      	ldr	r2, [pc, #264]	@ (8002ee4 <HAL_ADC_Start_DMA+0x20c>)
 8002ddc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de2:	4a41      	ldr	r2, [pc, #260]	@ (8002ee8 <HAL_ADC_Start_DMA+0x210>)
 8002de4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002dee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002dfe:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e0e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	334c      	adds	r3, #76	@ 0x4c
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f000 fcde 	bl	80037e0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d12a      	bne.n	8002e86 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a2d      	ldr	r2, [pc, #180]	@ (8002eec <HAL_ADC_Start_DMA+0x214>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d015      	beq.n	8002e66 <HAL_ADC_Start_DMA+0x18e>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ef0 <HAL_ADC_Start_DMA+0x218>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d105      	bne.n	8002e50 <HAL_ADC_Start_DMA+0x178>
 8002e44:	4b25      	ldr	r3, [pc, #148]	@ (8002edc <HAL_ADC_Start_DMA+0x204>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a27      	ldr	r2, [pc, #156]	@ (8002ef4 <HAL_ADC_Start_DMA+0x21c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d136      	bne.n	8002ec8 <HAL_ADC_Start_DMA+0x1f0>
 8002e5a:	4b20      	ldr	r3, [pc, #128]	@ (8002edc <HAL_ADC_Start_DMA+0x204>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d130      	bne.n	8002ec8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d129      	bne.n	8002ec8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	e020      	b.n	8002ec8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a18      	ldr	r2, [pc, #96]	@ (8002eec <HAL_ADC_Start_DMA+0x214>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d11b      	bne.n	8002ec8 <HAL_ADC_Start_DMA+0x1f0>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d114      	bne.n	8002ec8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	e00b      	b.n	8002ec8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	f043 0210 	orr.w	r2, r3, #16
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec0:	f043 0201 	orr.w	r2, r3, #1
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000004 	.word	0x20000004
 8002ed8:	431bde83 	.word	0x431bde83
 8002edc:	40012300 	.word	0x40012300
 8002ee0:	0800335d 	.word	0x0800335d
 8002ee4:	08003417 	.word	0x08003417
 8002ee8:	08003433 	.word	0x08003433
 8002eec:	40012000 	.word	0x40012000
 8002ef0:	40012100 	.word	0x40012100
 8002ef4:	40012200 	.word	0x40012200

08002ef8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x1c>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e105      	b.n	8003148 <HAL_ADC_ConfigChannel+0x228>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b09      	cmp	r3, #9
 8002f4a:	d925      	bls.n	8002f98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68d9      	ldr	r1, [r3, #12]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4413      	add	r3, r2
 8002f60:	3b1e      	subs	r3, #30
 8002f62:	2207      	movs	r2, #7
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43da      	mvns	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	400a      	ands	r2, r1
 8002f70:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68d9      	ldr	r1, [r3, #12]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	4618      	mov	r0, r3
 8002f84:	4603      	mov	r3, r0
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4403      	add	r3, r0
 8002f8a:	3b1e      	subs	r3, #30
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	e022      	b.n	8002fde <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6919      	ldr	r1, [r3, #16]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	2207      	movs	r2, #7
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43da      	mvns	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	400a      	ands	r2, r1
 8002fba:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6919      	ldr	r1, [r3, #16]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	4618      	mov	r0, r3
 8002fce:	4603      	mov	r3, r0
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4403      	add	r3, r0
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b06      	cmp	r3, #6
 8002fe4:	d824      	bhi.n	8003030 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3b05      	subs	r3, #5
 8002ff8:	221f      	movs	r2, #31
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43da      	mvns	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	400a      	ands	r2, r1
 8003006:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	b29b      	uxth	r3, r3
 8003014:	4618      	mov	r0, r3
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	3b05      	subs	r3, #5
 8003022:	fa00 f203 	lsl.w	r2, r0, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	635a      	str	r2, [r3, #52]	@ 0x34
 800302e:	e04c      	b.n	80030ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b0c      	cmp	r3, #12
 8003036:	d824      	bhi.n	8003082 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	3b23      	subs	r3, #35	@ 0x23
 800304a:	221f      	movs	r2, #31
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43da      	mvns	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	400a      	ands	r2, r1
 8003058:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	b29b      	uxth	r3, r3
 8003066:	4618      	mov	r0, r3
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	3b23      	subs	r3, #35	@ 0x23
 8003074:	fa00 f203 	lsl.w	r2, r0, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003080:	e023      	b.n	80030ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	3b41      	subs	r3, #65	@ 0x41
 8003094:	221f      	movs	r2, #31
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43da      	mvns	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	400a      	ands	r2, r1
 80030a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	4618      	mov	r0, r3
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	3b41      	subs	r3, #65	@ 0x41
 80030be:	fa00 f203 	lsl.w	r2, r0, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030ca:	4b22      	ldr	r3, [pc, #136]	@ (8003154 <HAL_ADC_ConfigChannel+0x234>)
 80030cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a21      	ldr	r2, [pc, #132]	@ (8003158 <HAL_ADC_ConfigChannel+0x238>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d109      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x1cc>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b12      	cmp	r3, #18
 80030de:	d105      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a19      	ldr	r2, [pc, #100]	@ (8003158 <HAL_ADC_ConfigChannel+0x238>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d123      	bne.n	800313e <HAL_ADC_ConfigChannel+0x21e>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b10      	cmp	r3, #16
 80030fc:	d003      	beq.n	8003106 <HAL_ADC_ConfigChannel+0x1e6>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b11      	cmp	r3, #17
 8003104:	d11b      	bne.n	800313e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b10      	cmp	r3, #16
 8003118:	d111      	bne.n	800313e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800311a:	4b10      	ldr	r3, [pc, #64]	@ (800315c <HAL_ADC_ConfigChannel+0x23c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a10      	ldr	r2, [pc, #64]	@ (8003160 <HAL_ADC_ConfigChannel+0x240>)
 8003120:	fba2 2303 	umull	r2, r3, r2, r3
 8003124:	0c9a      	lsrs	r2, r3, #18
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003130:	e002      	b.n	8003138 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	3b01      	subs	r3, #1
 8003136:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f9      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	40012300 	.word	0x40012300
 8003158:	40012000 	.word	0x40012000
 800315c:	20000004 	.word	0x20000004
 8003160:	431bde83 	.word	0x431bde83

08003164 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800316c:	4b79      	ldr	r3, [pc, #484]	@ (8003354 <ADC_Init+0x1f0>)
 800316e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	431a      	orrs	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003198:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6859      	ldr	r1, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	021a      	lsls	r2, r3, #8
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80031bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6859      	ldr	r1, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6899      	ldr	r1, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f6:	4a58      	ldr	r2, [pc, #352]	@ (8003358 <ADC_Init+0x1f4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d022      	beq.n	8003242 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800320a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6899      	ldr	r1, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800322c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6899      	ldr	r1, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	e00f      	b.n	8003262 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003250:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003260:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0202 	bic.w	r2, r2, #2
 8003270:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6899      	ldr	r1, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	7e1b      	ldrb	r3, [r3, #24]
 800327c:	005a      	lsls	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3020 	ldrb.w	r3, [r3, #32]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01b      	beq.n	80032c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800329e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80032ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6859      	ldr	r1, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ba:	3b01      	subs	r3, #1
 80032bc:	035a      	lsls	r2, r3, #13
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	e007      	b.n	80032d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032d6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80032e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	051a      	lsls	r2, r3, #20
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800330c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6899      	ldr	r1, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800331a:	025a      	lsls	r2, r3, #9
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003332:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6899      	ldr	r1, [r3, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	029a      	lsls	r2, r3, #10
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	609a      	str	r2, [r3, #8]
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	40012300 	.word	0x40012300
 8003358:	0f000001 	.word	0x0f000001

0800335c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003368:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003372:	2b00      	cmp	r3, #0
 8003374:	d13c      	bne.n	80033f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d12b      	bne.n	80033e8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003394:	2b00      	cmp	r3, #0
 8003396:	d127      	bne.n	80033e8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d006      	beq.n	80033b4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d119      	bne.n	80033e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0220 	bic.w	r2, r2, #32
 80033c2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e0:	f043 0201 	orr.w	r2, r3, #1
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f7fe fac9 	bl	8001980 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033ee:	e00e      	b.n	800340e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f7ff fd85 	bl	8002f0c <HAL_ADC_ErrorCallback>
}
 8003402:	e004      	b.n	800340e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	4798      	blx	r3
}
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003422:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f7ff fd67 	bl	8002ef8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800342a:	bf00      	nop
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b084      	sub	sp, #16
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2240      	movs	r2, #64	@ 0x40
 8003444:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344a:	f043 0204 	orr.w	r2, r3, #4
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f7ff fd5a 	bl	8002f0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003458:	bf00      	nop
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003470:	4b0c      	ldr	r3, [pc, #48]	@ (80034a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800347c:	4013      	ands	r3, r2
 800347e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003488:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800348c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003492:	4a04      	ldr	r2, [pc, #16]	@ (80034a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	60d3      	str	r3, [r2, #12]
}
 8003498:	bf00      	nop
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	e000ed00 	.word	0xe000ed00

080034a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034ac:	4b04      	ldr	r3, [pc, #16]	@ (80034c0 <__NVIC_GetPriorityGrouping+0x18>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	0a1b      	lsrs	r3, r3, #8
 80034b2:	f003 0307 	and.w	r3, r3, #7
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	db0b      	blt.n	80034ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	f003 021f 	and.w	r2, r3, #31
 80034dc:	4907      	ldr	r1, [pc, #28]	@ (80034fc <__NVIC_EnableIRQ+0x38>)
 80034de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	2001      	movs	r0, #1
 80034e6:	fa00 f202 	lsl.w	r2, r0, r2
 80034ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	e000e100 	.word	0xe000e100

08003500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	6039      	str	r1, [r7, #0]
 800350a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800350c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003510:	2b00      	cmp	r3, #0
 8003512:	db0a      	blt.n	800352a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	b2da      	uxtb	r2, r3
 8003518:	490c      	ldr	r1, [pc, #48]	@ (800354c <__NVIC_SetPriority+0x4c>)
 800351a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351e:	0112      	lsls	r2, r2, #4
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	440b      	add	r3, r1
 8003524:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003528:	e00a      	b.n	8003540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	b2da      	uxtb	r2, r3
 800352e:	4908      	ldr	r1, [pc, #32]	@ (8003550 <__NVIC_SetPriority+0x50>)
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	3b04      	subs	r3, #4
 8003538:	0112      	lsls	r2, r2, #4
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	440b      	add	r3, r1
 800353e:	761a      	strb	r2, [r3, #24]
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000e100 	.word	0xe000e100
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003554:	b480      	push	{r7}
 8003556:	b089      	sub	sp, #36	@ 0x24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f1c3 0307 	rsb	r3, r3, #7
 800356e:	2b04      	cmp	r3, #4
 8003570:	bf28      	it	cs
 8003572:	2304      	movcs	r3, #4
 8003574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3304      	adds	r3, #4
 800357a:	2b06      	cmp	r3, #6
 800357c:	d902      	bls.n	8003584 <NVIC_EncodePriority+0x30>
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	3b03      	subs	r3, #3
 8003582:	e000      	b.n	8003586 <NVIC_EncodePriority+0x32>
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003588:	f04f 32ff 	mov.w	r2, #4294967295
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43da      	mvns	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	401a      	ands	r2, r3
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800359c:	f04f 31ff 	mov.w	r1, #4294967295
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	fa01 f303 	lsl.w	r3, r1, r3
 80035a6:	43d9      	mvns	r1, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ac:	4313      	orrs	r3, r2
         );
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3724      	adds	r7, #36	@ 0x24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035cc:	d301      	bcc.n	80035d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035ce:	2301      	movs	r3, #1
 80035d0:	e00f      	b.n	80035f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035d2:	4a0a      	ldr	r2, [pc, #40]	@ (80035fc <SysTick_Config+0x40>)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035da:	210f      	movs	r1, #15
 80035dc:	f04f 30ff 	mov.w	r0, #4294967295
 80035e0:	f7ff ff8e 	bl	8003500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035e4:	4b05      	ldr	r3, [pc, #20]	@ (80035fc <SysTick_Config+0x40>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ea:	4b04      	ldr	r3, [pc, #16]	@ (80035fc <SysTick_Config+0x40>)
 80035ec:	2207      	movs	r2, #7
 80035ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	e000e010 	.word	0xe000e010

08003600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff ff29 	bl	8003460 <__NVIC_SetPriorityGrouping>
}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af00      	add	r7, sp, #0
 800361c:	4603      	mov	r3, r0
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003628:	f7ff ff3e 	bl	80034a8 <__NVIC_GetPriorityGrouping>
 800362c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	6978      	ldr	r0, [r7, #20]
 8003634:	f7ff ff8e 	bl	8003554 <NVIC_EncodePriority>
 8003638:	4602      	mov	r2, r0
 800363a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff ff5d 	bl	8003500 <__NVIC_SetPriority>
}
 8003646:	bf00      	nop
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	4603      	mov	r3, r0
 8003656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff ff31 	bl	80034c4 <__NVIC_EnableIRQ>
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b082      	sub	sp, #8
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff ffa2 	bl	80035bc <SysTick_Config>
 8003678:	4603      	mov	r3, r0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003690:	f7ff faae 	bl	8002bf0 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e099      	b.n	80037d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0201 	bic.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036c0:	e00f      	b.n	80036e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036c2:	f7ff fa95 	bl	8002bf0 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b05      	cmp	r3, #5
 80036ce:	d908      	bls.n	80036e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2220      	movs	r2, #32
 80036d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2203      	movs	r2, #3
 80036da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e078      	b.n	80037d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e8      	bne.n	80036c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4b38      	ldr	r3, [pc, #224]	@ (80037dc <HAL_DMA_Init+0x158>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800370e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003726:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4313      	orrs	r3, r2
 8003732:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	2b04      	cmp	r3, #4
 800373a:	d107      	bne.n	800374c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003744:	4313      	orrs	r3, r2
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f023 0307 	bic.w	r3, r3, #7
 8003762:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003772:	2b04      	cmp	r3, #4
 8003774:	d117      	bne.n	80037a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	4313      	orrs	r3, r2
 800377e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00e      	beq.n	80037a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fa6f 	bl	8003c6c <DMA_CheckFifoParam>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2240      	movs	r2, #64	@ 0x40
 8003798:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80037a2:	2301      	movs	r3, #1
 80037a4:	e016      	b.n	80037d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fa26 	bl	8003c00 <DMA_CalcBaseAndBitshift>
 80037b4:	4603      	mov	r3, r0
 80037b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037bc:	223f      	movs	r2, #63	@ 0x3f
 80037be:	409a      	lsls	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	f010803f 	.word	0xf010803f

080037e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_DMA_Start_IT+0x26>
 8003802:	2302      	movs	r3, #2
 8003804:	e040      	b.n	8003888 <HAL_DMA_Start_IT+0xa8>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b01      	cmp	r3, #1
 8003818:	d12f      	bne.n	800387a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2202      	movs	r2, #2
 800381e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f9b8 	bl	8003ba4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003838:	223f      	movs	r2, #63	@ 0x3f
 800383a:	409a      	lsls	r2, r3
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0216 	orr.w	r2, r2, #22
 800384e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003854:	2b00      	cmp	r3, #0
 8003856:	d007      	beq.n	8003868 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0208 	orr.w	r2, r2, #8
 8003866:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	e005      	b.n	8003886 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003882:	2302      	movs	r3, #2
 8003884:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003886:	7dfb      	ldrb	r3, [r7, #23]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800389c:	4b8e      	ldr	r3, [pc, #568]	@ (8003ad8 <HAL_DMA_IRQHandler+0x248>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a8e      	ldr	r2, [pc, #568]	@ (8003adc <HAL_DMA_IRQHandler+0x24c>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	0a9b      	lsrs	r3, r3, #10
 80038a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ba:	2208      	movs	r2, #8
 80038bc:	409a      	lsls	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d01a      	beq.n	80038fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d013      	beq.n	80038fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0204 	bic.w	r2, r2, #4
 80038e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e8:	2208      	movs	r2, #8
 80038ea:	409a      	lsls	r2, r3
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f4:	f043 0201 	orr.w	r2, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003900:	2201      	movs	r2, #1
 8003902:	409a      	lsls	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4013      	ands	r3, r2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d012      	beq.n	8003932 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391e:	2201      	movs	r2, #1
 8003920:	409a      	lsls	r2, r3
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392a:	f043 0202 	orr.w	r2, r3, #2
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003936:	2204      	movs	r2, #4
 8003938:	409a      	lsls	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4013      	ands	r3, r2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d012      	beq.n	8003968 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00b      	beq.n	8003968 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003954:	2204      	movs	r2, #4
 8003956:	409a      	lsls	r2, r3
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003960:	f043 0204 	orr.w	r2, r3, #4
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396c:	2210      	movs	r2, #16
 800396e:	409a      	lsls	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4013      	ands	r3, r2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d043      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d03c      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800398a:	2210      	movs	r2, #16
 800398c:	409a      	lsls	r2, r3
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d018      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d108      	bne.n	80039c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d024      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	4798      	blx	r3
 80039be:	e01f      	b.n	8003a00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d01b      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	4798      	blx	r3
 80039d0:	e016      	b.n	8003a00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d107      	bne.n	80039f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0208 	bic.w	r2, r2, #8
 80039ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a04:	2220      	movs	r2, #32
 8003a06:	409a      	lsls	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 808f 	beq.w	8003b30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 8087 	beq.w	8003b30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a26:	2220      	movs	r2, #32
 8003a28:	409a      	lsls	r2, r3
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b05      	cmp	r3, #5
 8003a38:	d136      	bne.n	8003aa8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0216 	bic.w	r2, r2, #22
 8003a48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695a      	ldr	r2, [r3, #20]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d103      	bne.n	8003a6a <HAL_DMA_IRQHandler+0x1da>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0208 	bic.w	r2, r2, #8
 8003a78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7e:	223f      	movs	r2, #63	@ 0x3f
 8003a80:	409a      	lsls	r2, r3
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d07e      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	4798      	blx	r3
        }
        return;
 8003aa6:	e079      	b.n	8003b9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d01d      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10d      	bne.n	8003ae0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d031      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	4798      	blx	r3
 8003ad4:	e02c      	b.n	8003b30 <HAL_DMA_IRQHandler+0x2a0>
 8003ad6:	bf00      	nop
 8003ad8:	20000004 	.word	0x20000004
 8003adc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d023      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4798      	blx	r3
 8003af0:	e01e      	b.n	8003b30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10f      	bne.n	8003b20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0210 	bic.w	r2, r2, #16
 8003b0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d032      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d022      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2205      	movs	r2, #5
 8003b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0201 	bic.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d307      	bcc.n	8003b78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f2      	bne.n	8003b5c <HAL_DMA_IRQHandler+0x2cc>
 8003b76:	e000      	b.n	8003b7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	4798      	blx	r3
 8003b9a:	e000      	b.n	8003b9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b9c:	bf00      	nop
    }
  }
}
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003bc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b40      	cmp	r3, #64	@ 0x40
 8003bd0:	d108      	bne.n	8003be4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003be2:	e007      	b.n	8003bf4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	60da      	str	r2, [r3, #12]
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	3b10      	subs	r3, #16
 8003c10:	4a14      	ldr	r2, [pc, #80]	@ (8003c64 <DMA_CalcBaseAndBitshift+0x64>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	091b      	lsrs	r3, r3, #4
 8003c18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c1a:	4a13      	ldr	r2, [pc, #76]	@ (8003c68 <DMA_CalcBaseAndBitshift+0x68>)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4413      	add	r3, r2
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d909      	bls.n	8003c42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003c36:	f023 0303 	bic.w	r3, r3, #3
 8003c3a:	1d1a      	adds	r2, r3, #4
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c40:	e007      	b.n	8003c52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003c4a:	f023 0303 	bic.w	r3, r3, #3
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	aaaaaaab 	.word	0xaaaaaaab
 8003c68:	08010388 	.word	0x08010388

08003c6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d11f      	bne.n	8003cc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d856      	bhi.n	8003d3a <DMA_CheckFifoParam+0xce>
 8003c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c94 <DMA_CheckFifoParam+0x28>)
 8003c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c92:	bf00      	nop
 8003c94:	08003ca5 	.word	0x08003ca5
 8003c98:	08003cb7 	.word	0x08003cb7
 8003c9c:	08003ca5 	.word	0x08003ca5
 8003ca0:	08003d3b 	.word	0x08003d3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d046      	beq.n	8003d3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb4:	e043      	b.n	8003d3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003cbe:	d140      	bne.n	8003d42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc4:	e03d      	b.n	8003d42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cce:	d121      	bne.n	8003d14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d837      	bhi.n	8003d46 <DMA_CheckFifoParam+0xda>
 8003cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8003cdc <DMA_CheckFifoParam+0x70>)
 8003cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cdc:	08003ced 	.word	0x08003ced
 8003ce0:	08003cf3 	.word	0x08003cf3
 8003ce4:	08003ced 	.word	0x08003ced
 8003ce8:	08003d05 	.word	0x08003d05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf0:	e030      	b.n	8003d54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d025      	beq.n	8003d4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d02:	e022      	b.n	8003d4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d0c:	d11f      	bne.n	8003d4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d12:	e01c      	b.n	8003d4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d903      	bls.n	8003d22 <DMA_CheckFifoParam+0xb6>
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d003      	beq.n	8003d28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d20:	e018      	b.n	8003d54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	73fb      	strb	r3, [r7, #15]
      break;
 8003d26:	e015      	b.n	8003d54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00e      	beq.n	8003d52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	73fb      	strb	r3, [r7, #15]
      break;
 8003d38:	e00b      	b.n	8003d52 <DMA_CheckFifoParam+0xe6>
      break;
 8003d3a:	bf00      	nop
 8003d3c:	e00a      	b.n	8003d54 <DMA_CheckFifoParam+0xe8>
      break;
 8003d3e:	bf00      	nop
 8003d40:	e008      	b.n	8003d54 <DMA_CheckFifoParam+0xe8>
      break;
 8003d42:	bf00      	nop
 8003d44:	e006      	b.n	8003d54 <DMA_CheckFifoParam+0xe8>
      break;
 8003d46:	bf00      	nop
 8003d48:	e004      	b.n	8003d54 <DMA_CheckFifoParam+0xe8>
      break;
 8003d4a:	bf00      	nop
 8003d4c:	e002      	b.n	8003d54 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d4e:	bf00      	nop
 8003d50:	e000      	b.n	8003d54 <DMA_CheckFifoParam+0xe8>
      break;
 8003d52:	bf00      	nop
    }
  } 
  
  return status; 
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop

08003d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b089      	sub	sp, #36	@ 0x24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	e16b      	b.n	8004058 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d80:	2201      	movs	r2, #1
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4013      	ands	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	f040 815a 	bne.w	8004052 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d005      	beq.n	8003db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d130      	bne.n	8003e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	2203      	movs	r2, #3
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dec:	2201      	movs	r2, #1
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	f003 0201 	and.w	r2, r3, #1
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d017      	beq.n	8003e54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	2203      	movs	r2, #3
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d123      	bne.n	8003ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	08da      	lsrs	r2, r3, #3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3208      	adds	r2, #8
 8003e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	220f      	movs	r2, #15
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	08da      	lsrs	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3208      	adds	r2, #8
 8003ea2:	69b9      	ldr	r1, [r7, #24]
 8003ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	2203      	movs	r2, #3
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f003 0203 	and.w	r2, r3, #3
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80b4 	beq.w	8004052 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	4b60      	ldr	r3, [pc, #384]	@ (8004070 <HAL_GPIO_Init+0x30c>)
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef2:	4a5f      	ldr	r2, [pc, #380]	@ (8004070 <HAL_GPIO_Init+0x30c>)
 8003ef4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ef8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003efa:	4b5d      	ldr	r3, [pc, #372]	@ (8004070 <HAL_GPIO_Init+0x30c>)
 8003efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f06:	4a5b      	ldr	r2, [pc, #364]	@ (8004074 <HAL_GPIO_Init+0x310>)
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	089b      	lsrs	r3, r3, #2
 8003f0c:	3302      	adds	r3, #2
 8003f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	220f      	movs	r2, #15
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	43db      	mvns	r3, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4013      	ands	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a52      	ldr	r2, [pc, #328]	@ (8004078 <HAL_GPIO_Init+0x314>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d02b      	beq.n	8003f8a <HAL_GPIO_Init+0x226>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a51      	ldr	r2, [pc, #324]	@ (800407c <HAL_GPIO_Init+0x318>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d025      	beq.n	8003f86 <HAL_GPIO_Init+0x222>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a50      	ldr	r2, [pc, #320]	@ (8004080 <HAL_GPIO_Init+0x31c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01f      	beq.n	8003f82 <HAL_GPIO_Init+0x21e>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a4f      	ldr	r2, [pc, #316]	@ (8004084 <HAL_GPIO_Init+0x320>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d019      	beq.n	8003f7e <HAL_GPIO_Init+0x21a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a4e      	ldr	r2, [pc, #312]	@ (8004088 <HAL_GPIO_Init+0x324>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d013      	beq.n	8003f7a <HAL_GPIO_Init+0x216>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a4d      	ldr	r2, [pc, #308]	@ (800408c <HAL_GPIO_Init+0x328>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00d      	beq.n	8003f76 <HAL_GPIO_Init+0x212>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a4c      	ldr	r2, [pc, #304]	@ (8004090 <HAL_GPIO_Init+0x32c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d007      	beq.n	8003f72 <HAL_GPIO_Init+0x20e>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a4b      	ldr	r2, [pc, #300]	@ (8004094 <HAL_GPIO_Init+0x330>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d101      	bne.n	8003f6e <HAL_GPIO_Init+0x20a>
 8003f6a:	2307      	movs	r3, #7
 8003f6c:	e00e      	b.n	8003f8c <HAL_GPIO_Init+0x228>
 8003f6e:	2308      	movs	r3, #8
 8003f70:	e00c      	b.n	8003f8c <HAL_GPIO_Init+0x228>
 8003f72:	2306      	movs	r3, #6
 8003f74:	e00a      	b.n	8003f8c <HAL_GPIO_Init+0x228>
 8003f76:	2305      	movs	r3, #5
 8003f78:	e008      	b.n	8003f8c <HAL_GPIO_Init+0x228>
 8003f7a:	2304      	movs	r3, #4
 8003f7c:	e006      	b.n	8003f8c <HAL_GPIO_Init+0x228>
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e004      	b.n	8003f8c <HAL_GPIO_Init+0x228>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e002      	b.n	8003f8c <HAL_GPIO_Init+0x228>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <HAL_GPIO_Init+0x228>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	69fa      	ldr	r2, [r7, #28]
 8003f8e:	f002 0203 	and.w	r2, r2, #3
 8003f92:	0092      	lsls	r2, r2, #2
 8003f94:	4093      	lsls	r3, r2
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f9c:	4935      	ldr	r1, [pc, #212]	@ (8004074 <HAL_GPIO_Init+0x310>)
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	089b      	lsrs	r3, r3, #2
 8003fa2:	3302      	adds	r3, #2
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003faa:	4b3b      	ldr	r3, [pc, #236]	@ (8004098 <HAL_GPIO_Init+0x334>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fce:	4a32      	ldr	r2, [pc, #200]	@ (8004098 <HAL_GPIO_Init+0x334>)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fd4:	4b30      	ldr	r3, [pc, #192]	@ (8004098 <HAL_GPIO_Init+0x334>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ff8:	4a27      	ldr	r2, [pc, #156]	@ (8004098 <HAL_GPIO_Init+0x334>)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ffe:	4b26      	ldr	r3, [pc, #152]	@ (8004098 <HAL_GPIO_Init+0x334>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	43db      	mvns	r3, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4013      	ands	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004022:	4a1d      	ldr	r2, [pc, #116]	@ (8004098 <HAL_GPIO_Init+0x334>)
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004028:	4b1b      	ldr	r3, [pc, #108]	@ (8004098 <HAL_GPIO_Init+0x334>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	43db      	mvns	r3, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4013      	ands	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800404c:	4a12      	ldr	r2, [pc, #72]	@ (8004098 <HAL_GPIO_Init+0x334>)
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	3301      	adds	r3, #1
 8004056:	61fb      	str	r3, [r7, #28]
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2b0f      	cmp	r3, #15
 800405c:	f67f ae90 	bls.w	8003d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	3724      	adds	r7, #36	@ 0x24
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40023800 	.word	0x40023800
 8004074:	40013800 	.word	0x40013800
 8004078:	40020000 	.word	0x40020000
 800407c:	40020400 	.word	0x40020400
 8004080:	40020800 	.word	0x40020800
 8004084:	40020c00 	.word	0x40020c00
 8004088:	40021000 	.word	0x40021000
 800408c:	40021400 	.word	0x40021400
 8004090:	40021800 	.word	0x40021800
 8004094:	40021c00 	.word	0x40021c00
 8004098:	40013c00 	.word	0x40013c00

0800409c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	807b      	strh	r3, [r7, #2]
 80040a8:	4613      	mov	r3, r2
 80040aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040ac:	787b      	ldrb	r3, [r7, #1]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040b2:	887a      	ldrh	r2, [r7, #2]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040b8:	e003      	b.n	80040c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040ba:	887b      	ldrh	r3, [r7, #2]
 80040bc:	041a      	lsls	r2, r3, #16
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	619a      	str	r2, [r3, #24]
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b085      	sub	sp, #20
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	460b      	mov	r3, r1
 80040d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040e0:	887a      	ldrh	r2, [r7, #2]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4013      	ands	r3, r2
 80040e6:	041a      	lsls	r2, r3, #16
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	43d9      	mvns	r1, r3
 80040ec:	887b      	ldrh	r3, [r7, #2]
 80040ee:	400b      	ands	r3, r1
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	619a      	str	r2, [r3, #24]
}
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
	...

08004104 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	4603      	mov	r3, r0
 800410c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800410e:	4b08      	ldr	r3, [pc, #32]	@ (8004130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	88fb      	ldrh	r3, [r7, #6]
 8004114:	4013      	ands	r3, r2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d006      	beq.n	8004128 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800411a:	4a05      	ldr	r2, [pc, #20]	@ (8004130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800411c:	88fb      	ldrh	r3, [r7, #6]
 800411e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004120:	88fb      	ldrh	r3, [r7, #6]
 8004122:	4618      	mov	r0, r3
 8004124:	f7fd fc18 	bl	8001958 <HAL_GPIO_EXTI_Callback>
  }
}
 8004128:	bf00      	nop
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40013c00 	.word	0x40013c00

08004134 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e12b      	b.n	800439e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fe f9f4 	bl	8002548 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2224      	movs	r2, #36	@ 0x24
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0201 	bic.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004186:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004196:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004198:	f003 fc54 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 800419c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	4a81      	ldr	r2, [pc, #516]	@ (80043a8 <HAL_I2C_Init+0x274>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d807      	bhi.n	80041b8 <HAL_I2C_Init+0x84>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4a80      	ldr	r2, [pc, #512]	@ (80043ac <HAL_I2C_Init+0x278>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	bf94      	ite	ls
 80041b0:	2301      	movls	r3, #1
 80041b2:	2300      	movhi	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	e006      	b.n	80041c6 <HAL_I2C_Init+0x92>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4a7d      	ldr	r2, [pc, #500]	@ (80043b0 <HAL_I2C_Init+0x27c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	bf94      	ite	ls
 80041c0:	2301      	movls	r3, #1
 80041c2:	2300      	movhi	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e0e7      	b.n	800439e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4a78      	ldr	r2, [pc, #480]	@ (80043b4 <HAL_I2C_Init+0x280>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	0c9b      	lsrs	r3, r3, #18
 80041d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	4a6a      	ldr	r2, [pc, #424]	@ (80043a8 <HAL_I2C_Init+0x274>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d802      	bhi.n	8004208 <HAL_I2C_Init+0xd4>
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	3301      	adds	r3, #1
 8004206:	e009      	b.n	800421c <HAL_I2C_Init+0xe8>
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800420e:	fb02 f303 	mul.w	r3, r2, r3
 8004212:	4a69      	ldr	r2, [pc, #420]	@ (80043b8 <HAL_I2C_Init+0x284>)
 8004214:	fba2 2303 	umull	r2, r3, r2, r3
 8004218:	099b      	lsrs	r3, r3, #6
 800421a:	3301      	adds	r3, #1
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	430b      	orrs	r3, r1
 8004222:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800422e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	495c      	ldr	r1, [pc, #368]	@ (80043a8 <HAL_I2C_Init+0x274>)
 8004238:	428b      	cmp	r3, r1
 800423a:	d819      	bhi.n	8004270 <HAL_I2C_Init+0x13c>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	1e59      	subs	r1, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	fbb1 f3f3 	udiv	r3, r1, r3
 800424a:	1c59      	adds	r1, r3, #1
 800424c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004250:	400b      	ands	r3, r1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <HAL_I2C_Init+0x138>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	1e59      	subs	r1, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	fbb1 f3f3 	udiv	r3, r1, r3
 8004264:	3301      	adds	r3, #1
 8004266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800426a:	e051      	b.n	8004310 <HAL_I2C_Init+0x1dc>
 800426c:	2304      	movs	r3, #4
 800426e:	e04f      	b.n	8004310 <HAL_I2C_Init+0x1dc>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d111      	bne.n	800429c <HAL_I2C_Init+0x168>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	1e58      	subs	r0, r3, #1
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6859      	ldr	r1, [r3, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	440b      	add	r3, r1
 8004286:	fbb0 f3f3 	udiv	r3, r0, r3
 800428a:	3301      	adds	r3, #1
 800428c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004290:	2b00      	cmp	r3, #0
 8004292:	bf0c      	ite	eq
 8004294:	2301      	moveq	r3, #1
 8004296:	2300      	movne	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	e012      	b.n	80042c2 <HAL_I2C_Init+0x18e>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	1e58      	subs	r0, r3, #1
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6859      	ldr	r1, [r3, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	0099      	lsls	r1, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80042b2:	3301      	adds	r3, #1
 80042b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	bf0c      	ite	eq
 80042bc:	2301      	moveq	r3, #1
 80042be:	2300      	movne	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_I2C_Init+0x196>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e022      	b.n	8004310 <HAL_I2C_Init+0x1dc>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10e      	bne.n	80042f0 <HAL_I2C_Init+0x1bc>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1e58      	subs	r0, r3, #1
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6859      	ldr	r1, [r3, #4]
 80042da:	460b      	mov	r3, r1
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	440b      	add	r3, r1
 80042e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80042e4:	3301      	adds	r3, #1
 80042e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042ee:	e00f      	b.n	8004310 <HAL_I2C_Init+0x1dc>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	1e58      	subs	r0, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6859      	ldr	r1, [r3, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	0099      	lsls	r1, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	fbb0 f3f3 	udiv	r3, r0, r3
 8004306:	3301      	adds	r3, #1
 8004308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800430c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	6809      	ldr	r1, [r1, #0]
 8004314:	4313      	orrs	r3, r2
 8004316:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69da      	ldr	r2, [r3, #28]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800433e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6911      	ldr	r1, [r2, #16]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	68d2      	ldr	r2, [r2, #12]
 800434a:	4311      	orrs	r1, r2
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	430b      	orrs	r3, r1
 8004352:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2220      	movs	r2, #32
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	000186a0 	.word	0x000186a0
 80043ac:	001e847f 	.word	0x001e847f
 80043b0:	003d08ff 	.word	0x003d08ff
 80043b4:	431bde83 	.word	0x431bde83
 80043b8:	10624dd3 	.word	0x10624dd3

080043bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	4608      	mov	r0, r1
 80043c6:	4611      	mov	r1, r2
 80043c8:	461a      	mov	r2, r3
 80043ca:	4603      	mov	r3, r0
 80043cc:	817b      	strh	r3, [r7, #10]
 80043ce:	460b      	mov	r3, r1
 80043d0:	813b      	strh	r3, [r7, #8]
 80043d2:	4613      	mov	r3, r2
 80043d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043d6:	f7fe fc0b 	bl	8002bf0 <HAL_GetTick>
 80043da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b20      	cmp	r3, #32
 80043e6:	f040 80d9 	bne.w	800459c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	2319      	movs	r3, #25
 80043f0:	2201      	movs	r2, #1
 80043f2:	496d      	ldr	r1, [pc, #436]	@ (80045a8 <HAL_I2C_Mem_Write+0x1ec>)
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 fc8b 	bl	8004d10 <I2C_WaitOnFlagUntilTimeout>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004400:	2302      	movs	r3, #2
 8004402:	e0cc      	b.n	800459e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_I2C_Mem_Write+0x56>
 800440e:	2302      	movs	r3, #2
 8004410:	e0c5      	b.n	800459e <HAL_I2C_Mem_Write+0x1e2>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b01      	cmp	r3, #1
 8004426:	d007      	beq.n	8004438 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004446:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2221      	movs	r2, #33	@ 0x21
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2240      	movs	r2, #64	@ 0x40
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a3a      	ldr	r2, [r7, #32]
 8004462:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004468:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4a4d      	ldr	r2, [pc, #308]	@ (80045ac <HAL_I2C_Mem_Write+0x1f0>)
 8004478:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800447a:	88f8      	ldrh	r0, [r7, #6]
 800447c:	893a      	ldrh	r2, [r7, #8]
 800447e:	8979      	ldrh	r1, [r7, #10]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	9301      	str	r3, [sp, #4]
 8004484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	4603      	mov	r3, r0
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 fac2 	bl	8004a14 <I2C_RequestMemoryWrite>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d052      	beq.n	800453c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e081      	b.n	800459e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 fd50 	bl	8004f44 <I2C_WaitOnTXEFlagUntilTimeout>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00d      	beq.n	80044c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d107      	bne.n	80044c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e06b      	b.n	800459e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	781a      	ldrb	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	3b01      	subs	r3, #1
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b04      	cmp	r3, #4
 8004502:	d11b      	bne.n	800453c <HAL_I2C_Mem_Write+0x180>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004508:	2b00      	cmp	r3, #0
 800450a:	d017      	beq.n	800453c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004510:	781a      	ldrb	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1aa      	bne.n	800449a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 fd43 	bl	8004fd4 <I2C_WaitOnBTFFlagUntilTimeout>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00d      	beq.n	8004570 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004558:	2b04      	cmp	r3, #4
 800455a:	d107      	bne.n	800456c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800456a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e016      	b.n	800459e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800457e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	e000      	b.n	800459e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800459c:	2302      	movs	r3, #2
  }
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	00100002 	.word	0x00100002
 80045ac:	ffff0000 	.word	0xffff0000

080045b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08c      	sub	sp, #48	@ 0x30
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	4608      	mov	r0, r1
 80045ba:	4611      	mov	r1, r2
 80045bc:	461a      	mov	r2, r3
 80045be:	4603      	mov	r3, r0
 80045c0:	817b      	strh	r3, [r7, #10]
 80045c2:	460b      	mov	r3, r1
 80045c4:	813b      	strh	r3, [r7, #8]
 80045c6:	4613      	mov	r3, r2
 80045c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045ca:	f7fe fb11 	bl	8002bf0 <HAL_GetTick>
 80045ce:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b20      	cmp	r3, #32
 80045da:	f040 8214 	bne.w	8004a06 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	2319      	movs	r3, #25
 80045e4:	2201      	movs	r2, #1
 80045e6:	497b      	ldr	r1, [pc, #492]	@ (80047d4 <HAL_I2C_Mem_Read+0x224>)
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 fb91 	bl	8004d10 <I2C_WaitOnFlagUntilTimeout>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80045f4:	2302      	movs	r3, #2
 80045f6:	e207      	b.n	8004a08 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_I2C_Mem_Read+0x56>
 8004602:	2302      	movs	r3, #2
 8004604:	e200      	b.n	8004a08 <HAL_I2C_Mem_Read+0x458>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b01      	cmp	r3, #1
 800461a:	d007      	beq.n	800462c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800463a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2222      	movs	r2, #34	@ 0x22
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2240      	movs	r2, #64	@ 0x40
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004656:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800465c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4a5b      	ldr	r2, [pc, #364]	@ (80047d8 <HAL_I2C_Mem_Read+0x228>)
 800466c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800466e:	88f8      	ldrh	r0, [r7, #6]
 8004670:	893a      	ldrh	r2, [r7, #8]
 8004672:	8979      	ldrh	r1, [r7, #10]
 8004674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004676:	9301      	str	r3, [sp, #4]
 8004678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	4603      	mov	r3, r0
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 fa5e 	bl	8004b40 <I2C_RequestMemoryRead>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e1bc      	b.n	8004a08 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004692:	2b00      	cmp	r3, #0
 8004694:	d113      	bne.n	80046be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004696:	2300      	movs	r3, #0
 8004698:	623b      	str	r3, [r7, #32]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	623b      	str	r3, [r7, #32]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	623b      	str	r3, [r7, #32]
 80046aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	e190      	b.n	80049e0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d11b      	bne.n	80046fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	61fb      	str	r3, [r7, #28]
 80046ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	e170      	b.n	80049e0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004702:	2b02      	cmp	r3, #2
 8004704:	d11b      	bne.n	800473e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004714:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004724:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004726:	2300      	movs	r3, #0
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	e150      	b.n	80049e0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004754:	e144      	b.n	80049e0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800475a:	2b03      	cmp	r3, #3
 800475c:	f200 80f1 	bhi.w	8004942 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004764:	2b01      	cmp	r3, #1
 8004766:	d123      	bne.n	80047b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800476a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 fc79 	bl	8005064 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e145      	b.n	8004a08 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	3b01      	subs	r3, #1
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047ae:	e117      	b.n	80049e0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d14e      	bne.n	8004856 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047be:	2200      	movs	r2, #0
 80047c0:	4906      	ldr	r1, [pc, #24]	@ (80047dc <HAL_I2C_Mem_Read+0x22c>)
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 faa4 	bl	8004d10 <I2C_WaitOnFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d008      	beq.n	80047e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e11a      	b.n	8004a08 <HAL_I2C_Mem_Read+0x458>
 80047d2:	bf00      	nop
 80047d4:	00100002 	.word	0x00100002
 80047d8:	ffff0000 	.word	0xffff0000
 80047dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004854:	e0c4      	b.n	80049e0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485c:	2200      	movs	r2, #0
 800485e:	496c      	ldr	r1, [pc, #432]	@ (8004a10 <HAL_I2C_Mem_Read+0x460>)
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 fa55 	bl	8004d10 <I2C_WaitOnFlagUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0cb      	b.n	8004a08 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800487e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691a      	ldr	r2, [r3, #16]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b8:	2200      	movs	r2, #0
 80048ba:	4955      	ldr	r1, [pc, #340]	@ (8004a10 <HAL_I2C_Mem_Read+0x460>)
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 fa27 	bl	8004d10 <I2C_WaitOnFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e09d      	b.n	8004a08 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004904:	b29b      	uxth	r3, r3
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800492a:	3b01      	subs	r3, #1
 800492c:	b29a      	uxth	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004936:	b29b      	uxth	r3, r3
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004940:	e04e      	b.n	80049e0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004944:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fb8c 	bl	8005064 <I2C_WaitOnRXNEFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e058      	b.n	8004a08 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b04      	cmp	r3, #4
 8004994:	d124      	bne.n	80049e0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800499a:	2b03      	cmp	r3, #3
 800499c:	d107      	bne.n	80049ae <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f47f aeb6 	bne.w	8004756 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	e000      	b.n	8004a08 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004a06:	2302      	movs	r3, #2
  }
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3728      	adds	r7, #40	@ 0x28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	00010004 	.word	0x00010004

08004a14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b088      	sub	sp, #32
 8004a18:	af02      	add	r7, sp, #8
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	4608      	mov	r0, r1
 8004a1e:	4611      	mov	r1, r2
 8004a20:	461a      	mov	r2, r3
 8004a22:	4603      	mov	r3, r0
 8004a24:	817b      	strh	r3, [r7, #10]
 8004a26:	460b      	mov	r3, r1
 8004a28:	813b      	strh	r3, [r7, #8]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 f960 	bl	8004d10 <I2C_WaitOnFlagUntilTimeout>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00d      	beq.n	8004a72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a64:	d103      	bne.n	8004a6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e05f      	b.n	8004b32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a72:	897b      	ldrh	r3, [r7, #10]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	461a      	mov	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	6a3a      	ldr	r2, [r7, #32]
 8004a86:	492d      	ldr	r1, [pc, #180]	@ (8004b3c <I2C_RequestMemoryWrite+0x128>)
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 f9bb 	bl	8004e04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e04c      	b.n	8004b32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a98:	2300      	movs	r3, #0
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ab0:	6a39      	ldr	r1, [r7, #32]
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 fa46 	bl	8004f44 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00d      	beq.n	8004ada <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d107      	bne.n	8004ad6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ad4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e02b      	b.n	8004b32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d105      	bne.n	8004aec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ae0:	893b      	ldrh	r3, [r7, #8]
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	611a      	str	r2, [r3, #16]
 8004aea:	e021      	b.n	8004b30 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004aec:	893b      	ldrh	r3, [r7, #8]
 8004aee:	0a1b      	lsrs	r3, r3, #8
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004afc:	6a39      	ldr	r1, [r7, #32]
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 fa20 	bl	8004f44 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00d      	beq.n	8004b26 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d107      	bne.n	8004b22 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e005      	b.n	8004b32 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b26:	893b      	ldrh	r3, [r7, #8]
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	00010002 	.word	0x00010002

08004b40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	4608      	mov	r0, r1
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4603      	mov	r3, r0
 8004b50:	817b      	strh	r3, [r7, #10]
 8004b52:	460b      	mov	r3, r1
 8004b54:	813b      	strh	r3, [r7, #8]
 8004b56:	4613      	mov	r3, r2
 8004b58:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b68:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f8c2 	bl	8004d10 <I2C_WaitOnFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00d      	beq.n	8004bae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ba0:	d103      	bne.n	8004baa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ba8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e0aa      	b.n	8004d04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bae:	897b      	ldrh	r3, [r7, #10]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004bbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc0:	6a3a      	ldr	r2, [r7, #32]
 8004bc2:	4952      	ldr	r1, [pc, #328]	@ (8004d0c <I2C_RequestMemoryRead+0x1cc>)
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f91d 	bl	8004e04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e097      	b.n	8004d04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bec:	6a39      	ldr	r1, [r7, #32]
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 f9a8 	bl	8004f44 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00d      	beq.n	8004c16 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d107      	bne.n	8004c12 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e076      	b.n	8004d04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c16:	88fb      	ldrh	r3, [r7, #6]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d105      	bne.n	8004c28 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c1c:	893b      	ldrh	r3, [r7, #8]
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	611a      	str	r2, [r3, #16]
 8004c26:	e021      	b.n	8004c6c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c28:	893b      	ldrh	r3, [r7, #8]
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c38:	6a39      	ldr	r1, [r7, #32]
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 f982 	bl	8004f44 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00d      	beq.n	8004c62 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d107      	bne.n	8004c5e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e050      	b.n	8004d04 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c62:	893b      	ldrh	r3, [r7, #8]
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c6e:	6a39      	ldr	r1, [r7, #32]
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f967 	bl	8004f44 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00d      	beq.n	8004c98 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d107      	bne.n	8004c94 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c92:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e035      	b.n	8004d04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ca6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f82b 	bl	8004d10 <I2C_WaitOnFlagUntilTimeout>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00d      	beq.n	8004cdc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cce:	d103      	bne.n	8004cd8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cd6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e013      	b.n	8004d04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004cdc:	897b      	ldrh	r3, [r7, #10]
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	f043 0301 	orr.w	r3, r3, #1
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cee:	6a3a      	ldr	r2, [r7, #32]
 8004cf0:	4906      	ldr	r1, [pc, #24]	@ (8004d0c <I2C_RequestMemoryRead+0x1cc>)
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 f886 	bl	8004e04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e000      	b.n	8004d04 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	00010002 	.word	0x00010002

08004d10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	603b      	str	r3, [r7, #0]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d20:	e048      	b.n	8004db4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d28:	d044      	beq.n	8004db4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2a:	f7fd ff61 	bl	8002bf0 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d302      	bcc.n	8004d40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d139      	bne.n	8004db4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	0c1b      	lsrs	r3, r3, #16
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d10d      	bne.n	8004d66 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	43da      	mvns	r2, r3
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	4013      	ands	r3, r2
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	bf0c      	ite	eq
 8004d5c:	2301      	moveq	r3, #1
 8004d5e:	2300      	movne	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	461a      	mov	r2, r3
 8004d64:	e00c      	b.n	8004d80 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	43da      	mvns	r2, r3
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	4013      	ands	r3, r2
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bf0c      	ite	eq
 8004d78:	2301      	moveq	r3, #1
 8004d7a:	2300      	movne	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	461a      	mov	r2, r3
 8004d80:	79fb      	ldrb	r3, [r7, #7]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d116      	bne.n	8004db4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da0:	f043 0220 	orr.w	r2, r3, #32
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e023      	b.n	8004dfc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	0c1b      	lsrs	r3, r3, #16
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d10d      	bne.n	8004dda <I2C_WaitOnFlagUntilTimeout+0xca>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	43da      	mvns	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	bf0c      	ite	eq
 8004dd0:	2301      	moveq	r3, #1
 8004dd2:	2300      	movne	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	e00c      	b.n	8004df4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	43da      	mvns	r2, r3
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	4013      	ands	r3, r2
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bf0c      	ite	eq
 8004dec:	2301      	moveq	r3, #1
 8004dee:	2300      	movne	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	461a      	mov	r2, r3
 8004df4:	79fb      	ldrb	r3, [r7, #7]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d093      	beq.n	8004d22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e12:	e071      	b.n	8004ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e22:	d123      	bne.n	8004e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e32:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e58:	f043 0204 	orr.w	r2, r3, #4
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e067      	b.n	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e72:	d041      	beq.n	8004ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e74:	f7fd febc 	bl	8002bf0 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d302      	bcc.n	8004e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d136      	bne.n	8004ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	0c1b      	lsrs	r3, r3, #16
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d10c      	bne.n	8004eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	43da      	mvns	r2, r3
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	bf14      	ite	ne
 8004ea6:	2301      	movne	r3, #1
 8004ea8:	2300      	moveq	r3, #0
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	e00b      	b.n	8004ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	43da      	mvns	r2, r3
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	bf14      	ite	ne
 8004ec0:	2301      	movne	r3, #1
 8004ec2:	2300      	moveq	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d016      	beq.n	8004ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee4:	f043 0220 	orr.w	r2, r3, #32
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e021      	b.n	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	0c1b      	lsrs	r3, r3, #16
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d10c      	bne.n	8004f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	43da      	mvns	r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	bf14      	ite	ne
 8004f14:	2301      	movne	r3, #1
 8004f16:	2300      	moveq	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	e00b      	b.n	8004f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	43da      	mvns	r2, r3
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	4013      	ands	r3, r2
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	bf14      	ite	ne
 8004f2e:	2301      	movne	r3, #1
 8004f30:	2300      	moveq	r3, #0
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f47f af6d 	bne.w	8004e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f50:	e034      	b.n	8004fbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 f8e3 	bl	800511e <I2C_IsAcknowledgeFailed>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e034      	b.n	8004fcc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f68:	d028      	beq.n	8004fbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f6a:	f7fd fe41 	bl	8002bf0 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d302      	bcc.n	8004f80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d11d      	bne.n	8004fbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f8a:	2b80      	cmp	r3, #128	@ 0x80
 8004f8c:	d016      	beq.n	8004fbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa8:	f043 0220 	orr.w	r2, r3, #32
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e007      	b.n	8004fcc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc6:	2b80      	cmp	r3, #128	@ 0x80
 8004fc8:	d1c3      	bne.n	8004f52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fe0:	e034      	b.n	800504c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 f89b 	bl	800511e <I2C_IsAcknowledgeFailed>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e034      	b.n	800505c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff8:	d028      	beq.n	800504c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffa:	f7fd fdf9 	bl	8002bf0 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	429a      	cmp	r2, r3
 8005008:	d302      	bcc.n	8005010 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d11d      	bne.n	800504c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f003 0304 	and.w	r3, r3, #4
 800501a:	2b04      	cmp	r3, #4
 800501c:	d016      	beq.n	800504c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005038:	f043 0220 	orr.w	r2, r3, #32
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e007      	b.n	800505c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	2b04      	cmp	r3, #4
 8005058:	d1c3      	bne.n	8004fe2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005070:	e049      	b.n	8005106 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	2b10      	cmp	r3, #16
 800507e:	d119      	bne.n	80050b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0210 	mvn.w	r2, #16
 8005088:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e030      	b.n	8005116 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b4:	f7fd fd9c 	bl	8002bf0 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d302      	bcc.n	80050ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d11d      	bne.n	8005106 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d4:	2b40      	cmp	r3, #64	@ 0x40
 80050d6:	d016      	beq.n	8005106 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f2:	f043 0220 	orr.w	r2, r3, #32
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e007      	b.n	8005116 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005110:	2b40      	cmp	r3, #64	@ 0x40
 8005112:	d1ae      	bne.n	8005072 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005130:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005134:	d11b      	bne.n	800516e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800513e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2220      	movs	r2, #32
 800514a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515a:	f043 0204 	orr.w	r2, r3, #4
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b088      	sub	sp, #32
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e128      	b.n	80053e0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d109      	bne.n	80051ae <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a90      	ldr	r2, [pc, #576]	@ (80053e8 <HAL_I2S_Init+0x26c>)
 80051a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7fd fa15 	bl	80025d8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2202      	movs	r2, #2
 80051b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6812      	ldr	r2, [r2, #0]
 80051c0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80051c4:	f023 030f 	bic.w	r3, r3, #15
 80051c8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2202      	movs	r2, #2
 80051d0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d060      	beq.n	800529c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d102      	bne.n	80051e8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80051e2:	2310      	movs	r3, #16
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	e001      	b.n	80051ec <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80051e8:	2320      	movs	r3, #32
 80051ea:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	d802      	bhi.n	80051fa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80051fa:	2001      	movs	r0, #1
 80051fc:	f002 fd2c 	bl	8007c58 <HAL_RCCEx_GetPeriphCLKFreq>
 8005200:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800520a:	d125      	bne.n	8005258 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d010      	beq.n	8005236 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	fbb2 f2f3 	udiv	r2, r2, r3
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	461a      	mov	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005230:	3305      	adds	r3, #5
 8005232:	613b      	str	r3, [r7, #16]
 8005234:	e01f      	b.n	8005276 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	461a      	mov	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005252:	3305      	adds	r3, #5
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	e00e      	b.n	8005276 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005260:	4613      	mov	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	461a      	mov	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005272:	3305      	adds	r3, #5
 8005274:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	4a5c      	ldr	r2, [pc, #368]	@ (80053ec <HAL_I2S_Init+0x270>)
 800527a:	fba2 2303 	umull	r2, r3, r2, r3
 800527e:	08db      	lsrs	r3, r3, #3
 8005280:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	085b      	lsrs	r3, r3, #1
 8005292:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	e003      	b.n	80052a4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800529c:	2302      	movs	r3, #2
 800529e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d902      	bls.n	80052b0 <HAL_I2S_Init+0x134>
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	2bff      	cmp	r3, #255	@ 0xff
 80052ae:	d907      	bls.n	80052c0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b4:	f043 0210 	orr.w	r2, r3, #16
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e08f      	b.n	80053e0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	ea42 0103 	orr.w	r1, r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80052de:	f023 030f 	bic.w	r3, r3, #15
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6851      	ldr	r1, [r2, #4]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	6892      	ldr	r2, [r2, #8]
 80052ea:	4311      	orrs	r1, r2
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	68d2      	ldr	r2, [r2, #12]
 80052f0:	4311      	orrs	r1, r2
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6992      	ldr	r2, [r2, #24]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	431a      	orrs	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005302:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d161      	bne.n	80053d0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a38      	ldr	r2, [pc, #224]	@ (80053f0 <HAL_I2S_Init+0x274>)
 8005310:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a37      	ldr	r2, [pc, #220]	@ (80053f4 <HAL_I2S_Init+0x278>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d101      	bne.n	8005320 <HAL_I2S_Init+0x1a4>
 800531c:	4b36      	ldr	r3, [pc, #216]	@ (80053f8 <HAL_I2S_Init+0x27c>)
 800531e:	e001      	b.n	8005324 <HAL_I2S_Init+0x1a8>
 8005320:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6812      	ldr	r2, [r2, #0]
 800532a:	4932      	ldr	r1, [pc, #200]	@ (80053f4 <HAL_I2S_Init+0x278>)
 800532c:	428a      	cmp	r2, r1
 800532e:	d101      	bne.n	8005334 <HAL_I2S_Init+0x1b8>
 8005330:	4a31      	ldr	r2, [pc, #196]	@ (80053f8 <HAL_I2S_Init+0x27c>)
 8005332:	e001      	b.n	8005338 <HAL_I2S_Init+0x1bc>
 8005334:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005338:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800533c:	f023 030f 	bic.w	r3, r3, #15
 8005340:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a2b      	ldr	r2, [pc, #172]	@ (80053f4 <HAL_I2S_Init+0x278>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d101      	bne.n	8005350 <HAL_I2S_Init+0x1d4>
 800534c:	4b2a      	ldr	r3, [pc, #168]	@ (80053f8 <HAL_I2S_Init+0x27c>)
 800534e:	e001      	b.n	8005354 <HAL_I2S_Init+0x1d8>
 8005350:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005354:	2202      	movs	r2, #2
 8005356:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a25      	ldr	r2, [pc, #148]	@ (80053f4 <HAL_I2S_Init+0x278>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d101      	bne.n	8005366 <HAL_I2S_Init+0x1ea>
 8005362:	4b25      	ldr	r3, [pc, #148]	@ (80053f8 <HAL_I2S_Init+0x27c>)
 8005364:	e001      	b.n	800536a <HAL_I2S_Init+0x1ee>
 8005366:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005376:	d003      	beq.n	8005380 <HAL_I2S_Init+0x204>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d103      	bne.n	8005388 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005380:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	e001      	b.n	800538c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005388:	2300      	movs	r3, #0
 800538a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005396:	4313      	orrs	r3, r2
 8005398:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80053a0:	4313      	orrs	r3, r2
 80053a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80053aa:	4313      	orrs	r3, r2
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	897b      	ldrh	r3, [r7, #10]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80053b8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a0d      	ldr	r2, [pc, #52]	@ (80053f4 <HAL_I2S_Init+0x278>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d101      	bne.n	80053c8 <HAL_I2S_Init+0x24c>
 80053c4:	4b0c      	ldr	r3, [pc, #48]	@ (80053f8 <HAL_I2S_Init+0x27c>)
 80053c6:	e001      	b.n	80053cc <HAL_I2S_Init+0x250>
 80053c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053cc:	897a      	ldrh	r2, [r7, #10]
 80053ce:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3720      	adds	r7, #32
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	080056f9 	.word	0x080056f9
 80053ec:	cccccccd 	.word	0xcccccccd
 80053f0:	0800580d 	.word	0x0800580d
 80053f4:	40003800 	.word	0x40003800
 80053f8:	40003400 	.word	0x40003400

080053fc <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	4613      	mov	r3, r2
 8005408:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <HAL_I2S_Transmit_DMA+0x1a>
 8005410:	88fb      	ldrh	r3, [r7, #6]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e08a      	b.n	8005530 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b01      	cmp	r3, #1
 8005424:	d001      	beq.n	800542a <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8005426:	2302      	movs	r3, #2
 8005428:	e082      	b.n	8005530 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b01      	cmp	r3, #1
 8005434:	d101      	bne.n	800543a <HAL_I2S_Transmit_DMA+0x3e>
 8005436:	2302      	movs	r3, #2
 8005438:	e07a      	b.n	8005530 <HAL_I2S_Transmit_DMA+0x134>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2203      	movs	r2, #3
 8005446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b03      	cmp	r3, #3
 8005466:	d002      	beq.n	800546e <HAL_I2S_Transmit_DMA+0x72>
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	2b05      	cmp	r3, #5
 800546c:	d10a      	bne.n	8005484 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800546e:	88fb      	ldrh	r3, [r7, #6]
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005478:	88fb      	ldrh	r3, [r7, #6]
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005482:	e005      	b.n	8005490 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	88fa      	ldrh	r2, [r7, #6]
 8005488:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	88fa      	ldrh	r2, [r7, #6]
 800548e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005494:	4a28      	ldr	r2, [pc, #160]	@ (8005538 <HAL_I2S_Transmit_DMA+0x13c>)
 8005496:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549c:	4a27      	ldr	r2, [pc, #156]	@ (800553c <HAL_I2S_Transmit_DMA+0x140>)
 800549e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a4:	4a26      	ldr	r2, [pc, #152]	@ (8005540 <HAL_I2S_Transmit_DMA+0x144>)
 80054a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80054b0:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80054b8:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054be:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80054c0:	f7fe f98e 	bl	80037e0 <HAL_DMA_Start_IT>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00f      	beq.n	80054ea <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ce:	f043 0208 	orr.w	r2, r3, #8
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e022      	b.n	8005530 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d107      	bne.n	8005510 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0202 	orr.w	r2, r2, #2
 800550e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800551a:	2b00      	cmp	r3, #0
 800551c:	d107      	bne.n	800552e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69da      	ldr	r2, [r3, #28]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800552c:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	080055d7 	.word	0x080055d7
 800553c:	08005595 	.word	0x08005595
 8005540:	080055f3 	.word	0x080055f3

08005544 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10e      	bne.n	80055c8 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0202 	bic.w	r2, r2, #2
 80055b8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f7ff ffc5 	bl	8005558 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80055ce:	bf00      	nop
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff ffad 	bl	8005544 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80055ea:	bf00      	nop
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0203 	bic.w	r2, r2, #3
 800560e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005628:	f043 0208 	orr.w	r2, r3, #8
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f7ff ffa5 	bl	8005580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005636:	bf00      	nop
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b082      	sub	sp, #8
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564a:	881a      	ldrh	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005656:	1c9a      	adds	r2, r3, #2
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005660:	b29b      	uxth	r3, r3
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800566e:	b29b      	uxth	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10e      	bne.n	8005692 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005682:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff ff63 	bl	8005558 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005692:	bf00      	nop
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b082      	sub	sp, #8
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ac:	b292      	uxth	r2, r2
 80056ae:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b4:	1c9a      	adds	r2, r3, #2
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80056be:	b29b      	uxth	r3, r3
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10e      	bne.n	80056f0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80056e0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7ff ff3e 	bl	800556c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b04      	cmp	r3, #4
 8005712:	d13a      	bne.n	800578a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b01      	cmp	r3, #1
 800571c:	d109      	bne.n	8005732 <I2S_IRQHandler+0x3a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005728:	2b40      	cmp	r3, #64	@ 0x40
 800572a:	d102      	bne.n	8005732 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7ff ffb4 	bl	800569a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005738:	2b40      	cmp	r3, #64	@ 0x40
 800573a:	d126      	bne.n	800578a <I2S_IRQHandler+0x92>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b20      	cmp	r3, #32
 8005748:	d11f      	bne.n	800578a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005758:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800575a:	2300      	movs	r3, #0
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800577c:	f043 0202 	orr.w	r2, r3, #2
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7ff fefb 	bl	8005580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b03      	cmp	r3, #3
 8005794:	d136      	bne.n	8005804 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b02      	cmp	r3, #2
 800579e:	d109      	bne.n	80057b4 <I2S_IRQHandler+0xbc>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057aa:	2b80      	cmp	r3, #128	@ 0x80
 80057ac:	d102      	bne.n	80057b4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff ff45 	bl	800563e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f003 0308 	and.w	r3, r3, #8
 80057ba:	2b08      	cmp	r3, #8
 80057bc:	d122      	bne.n	8005804 <I2S_IRQHandler+0x10c>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f003 0320 	and.w	r3, r3, #32
 80057c8:	2b20      	cmp	r3, #32
 80057ca:	d11b      	bne.n	8005804 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80057da:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80057dc:	2300      	movs	r3, #0
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f6:	f043 0204 	orr.w	r2, r3, #4
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7ff febe 	bl	8005580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005804:	bf00      	nop
 8005806:	3718      	adds	r7, #24
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a92      	ldr	r2, [pc, #584]	@ (8005a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d101      	bne.n	800582a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005826:	4b92      	ldr	r3, [pc, #584]	@ (8005a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005828:	e001      	b.n	800582e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800582a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a8b      	ldr	r2, [pc, #556]	@ (8005a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d101      	bne.n	8005848 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005844:	4b8a      	ldr	r3, [pc, #552]	@ (8005a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005846:	e001      	b.n	800584c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005848:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005858:	d004      	beq.n	8005864 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	f040 8099 	bne.w	8005996 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b02      	cmp	r3, #2
 800586c:	d107      	bne.n	800587e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f925 	bl	8005ac8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b01      	cmp	r3, #1
 8005886:	d107      	bne.n	8005898 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f9c8 	bl	8005c28 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800589e:	2b40      	cmp	r3, #64	@ 0x40
 80058a0:	d13a      	bne.n	8005918 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f003 0320 	and.w	r3, r3, #32
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d035      	beq.n	8005918 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a6e      	ldr	r2, [pc, #440]	@ (8005a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d101      	bne.n	80058ba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80058b6:	4b6e      	ldr	r3, [pc, #440]	@ (8005a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058b8:	e001      	b.n	80058be <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80058ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4969      	ldr	r1, [pc, #420]	@ (8005a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058c6:	428b      	cmp	r3, r1
 80058c8:	d101      	bne.n	80058ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80058ca:	4b69      	ldr	r3, [pc, #420]	@ (8005a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058cc:	e001      	b.n	80058d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80058ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80058d6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80058e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590a:	f043 0202 	orr.w	r2, r3, #2
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7ff fe34 	bl	8005580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	f003 0308 	and.w	r3, r3, #8
 800591e:	2b08      	cmp	r3, #8
 8005920:	f040 80c3 	bne.w	8005aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 80bd 	beq.w	8005aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800593e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a49      	ldr	r2, [pc, #292]	@ (8005a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d101      	bne.n	800594e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800594a:	4b49      	ldr	r3, [pc, #292]	@ (8005a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800594c:	e001      	b.n	8005952 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800594e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4944      	ldr	r1, [pc, #272]	@ (8005a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800595a:	428b      	cmp	r3, r1
 800595c:	d101      	bne.n	8005962 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800595e:	4b44      	ldr	r3, [pc, #272]	@ (8005a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005960:	e001      	b.n	8005966 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005962:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005966:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800596a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800596c:	2300      	movs	r3, #0
 800596e:	60bb      	str	r3, [r7, #8]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	60bb      	str	r3, [r7, #8]
 8005978:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005986:	f043 0204 	orr.w	r2, r3, #4
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7ff fdf6 	bl	8005580 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005994:	e089      	b.n	8005aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b02      	cmp	r3, #2
 800599e:	d107      	bne.n	80059b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f8be 	bl	8005b2c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d107      	bne.n	80059ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f8fd 	bl	8005bc4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d0:	2b40      	cmp	r3, #64	@ 0x40
 80059d2:	d12f      	bne.n	8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d02a      	beq.n	8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80059ec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a1e      	ldr	r2, [pc, #120]	@ (8005a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d101      	bne.n	80059fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80059f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059fa:	e001      	b.n	8005a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80059fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4919      	ldr	r1, [pc, #100]	@ (8005a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a08:	428b      	cmp	r3, r1
 8005a0a:	d101      	bne.n	8005a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005a0c:	4b18      	ldr	r3, [pc, #96]	@ (8005a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a0e:	e001      	b.n	8005a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005a10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a14:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a18:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a26:	f043 0202 	orr.w	r2, r3, #2
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7ff fda6 	bl	8005580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	2b08      	cmp	r3, #8
 8005a3c:	d136      	bne.n	8005aac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f003 0320 	and.w	r3, r3, #32
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d031      	beq.n	8005aac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a07      	ldr	r2, [pc, #28]	@ (8005a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d101      	bne.n	8005a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005a52:	4b07      	ldr	r3, [pc, #28]	@ (8005a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a54:	e001      	b.n	8005a5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005a56:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4902      	ldr	r1, [pc, #8]	@ (8005a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a62:	428b      	cmp	r3, r1
 8005a64:	d106      	bne.n	8005a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005a66:	4b02      	ldr	r3, [pc, #8]	@ (8005a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a68:	e006      	b.n	8005a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005a6a:	bf00      	nop
 8005a6c:	40003800 	.word	0x40003800
 8005a70:	40003400 	.word	0x40003400
 8005a74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a78:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a7c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a8c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a9a:	f043 0204 	orr.w	r2, r3, #4
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7ff fd6c 	bl	8005580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005aa8:	e000      	b.n	8005aac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005aaa:	bf00      	nop
}
 8005aac:	bf00      	nop
 8005aae:	3720      	adds	r7, #32
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad4:	1c99      	adds	r1, r3, #2
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6251      	str	r1, [r2, #36]	@ 0x24
 8005ada:	881a      	ldrh	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d113      	bne.n	8005b22 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b08:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d106      	bne.n	8005b22 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff ffc9 	bl	8005ab4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b22:	bf00      	nop
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b38:	1c99      	adds	r1, r3, #2
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6251      	str	r1, [r2, #36]	@ 0x24
 8005b3e:	8819      	ldrh	r1, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a1d      	ldr	r2, [pc, #116]	@ (8005bbc <I2SEx_TxISR_I2SExt+0x90>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d101      	bne.n	8005b4e <I2SEx_TxISR_I2SExt+0x22>
 8005b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8005bc0 <I2SEx_TxISR_I2SExt+0x94>)
 8005b4c:	e001      	b.n	8005b52 <I2SEx_TxISR_I2SExt+0x26>
 8005b4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b52:	460a      	mov	r2, r1
 8005b54:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d121      	bne.n	8005bb2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a12      	ldr	r2, [pc, #72]	@ (8005bbc <I2SEx_TxISR_I2SExt+0x90>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d101      	bne.n	8005b7c <I2SEx_TxISR_I2SExt+0x50>
 8005b78:	4b11      	ldr	r3, [pc, #68]	@ (8005bc0 <I2SEx_TxISR_I2SExt+0x94>)
 8005b7a:	e001      	b.n	8005b80 <I2SEx_TxISR_I2SExt+0x54>
 8005b7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	490d      	ldr	r1, [pc, #52]	@ (8005bbc <I2SEx_TxISR_I2SExt+0x90>)
 8005b88:	428b      	cmp	r3, r1
 8005b8a:	d101      	bne.n	8005b90 <I2SEx_TxISR_I2SExt+0x64>
 8005b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc0 <I2SEx_TxISR_I2SExt+0x94>)
 8005b8e:	e001      	b.n	8005b94 <I2SEx_TxISR_I2SExt+0x68>
 8005b90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b98:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d106      	bne.n	8005bb2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff ff81 	bl	8005ab4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005bb2:	bf00      	nop
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	40003800 	.word	0x40003800
 8005bc0:	40003400 	.word	0x40003400

08005bc4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68d8      	ldr	r0, [r3, #12]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd6:	1c99      	adds	r1, r3, #2
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005bdc:	b282      	uxth	r2, r0
 8005bde:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d113      	bne.n	8005c20 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c06:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d106      	bne.n	8005c20 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff ff4a 	bl	8005ab4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c20:	bf00      	nop
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a20      	ldr	r2, [pc, #128]	@ (8005cb8 <I2SEx_RxISR_I2SExt+0x90>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d101      	bne.n	8005c3e <I2SEx_RxISR_I2SExt+0x16>
 8005c3a:	4b20      	ldr	r3, [pc, #128]	@ (8005cbc <I2SEx_RxISR_I2SExt+0x94>)
 8005c3c:	e001      	b.n	8005c42 <I2SEx_RxISR_I2SExt+0x1a>
 8005c3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c42:	68d8      	ldr	r0, [r3, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c48:	1c99      	adds	r1, r3, #2
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005c4e:	b282      	uxth	r2, r0
 8005c50:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d121      	bne.n	8005cae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a12      	ldr	r2, [pc, #72]	@ (8005cb8 <I2SEx_RxISR_I2SExt+0x90>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d101      	bne.n	8005c78 <I2SEx_RxISR_I2SExt+0x50>
 8005c74:	4b11      	ldr	r3, [pc, #68]	@ (8005cbc <I2SEx_RxISR_I2SExt+0x94>)
 8005c76:	e001      	b.n	8005c7c <I2SEx_RxISR_I2SExt+0x54>
 8005c78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	490d      	ldr	r1, [pc, #52]	@ (8005cb8 <I2SEx_RxISR_I2SExt+0x90>)
 8005c84:	428b      	cmp	r3, r1
 8005c86:	d101      	bne.n	8005c8c <I2SEx_RxISR_I2SExt+0x64>
 8005c88:	4b0c      	ldr	r3, [pc, #48]	@ (8005cbc <I2SEx_RxISR_I2SExt+0x94>)
 8005c8a:	e001      	b.n	8005c90 <I2SEx_RxISR_I2SExt+0x68>
 8005c8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c90:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c94:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d106      	bne.n	8005cae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff ff03 	bl	8005ab4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005cae:	bf00      	nop
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40003800 	.word	0x40003800
 8005cbc:	40003400 	.word	0x40003400

08005cc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e101      	b.n	8005ed6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d106      	bne.n	8005cf2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f006 fee7 	bl	800cac0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2203      	movs	r2, #3
 8005cf6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d00:	d102      	bne.n	8005d08 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f003 fb34 	bl	800937a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6818      	ldr	r0, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	7c1a      	ldrb	r2, [r3, #16]
 8005d1a:	f88d 2000 	strb.w	r2, [sp]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d22:	f003 fa13 	bl	800914c <USB_CoreInit>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d005      	beq.n	8005d38 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e0ce      	b.n	8005ed6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f003 fb2c 	bl	800939c <USB_SetCurrentMode>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d005      	beq.n	8005d56 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e0bf      	b.n	8005ed6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d56:	2300      	movs	r3, #0
 8005d58:	73fb      	strb	r3, [r7, #15]
 8005d5a:	e04a      	b.n	8005df2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005d5c:	7bfa      	ldrb	r2, [r7, #15]
 8005d5e:	6879      	ldr	r1, [r7, #4]
 8005d60:	4613      	mov	r3, r2
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	440b      	add	r3, r1
 8005d6a:	3315      	adds	r3, #21
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005d70:	7bfa      	ldrb	r2, [r7, #15]
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	4613      	mov	r3, r2
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	3314      	adds	r3, #20
 8005d80:	7bfa      	ldrb	r2, [r7, #15]
 8005d82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005d84:	7bfa      	ldrb	r2, [r7, #15]
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
 8005d88:	b298      	uxth	r0, r3
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	4413      	add	r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	440b      	add	r3, r1
 8005d96:	332e      	adds	r3, #46	@ 0x2e
 8005d98:	4602      	mov	r2, r0
 8005d9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005d9c:	7bfa      	ldrb	r2, [r7, #15]
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	4613      	mov	r3, r2
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	4413      	add	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	440b      	add	r3, r1
 8005daa:	3318      	adds	r3, #24
 8005dac:	2200      	movs	r2, #0
 8005dae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005db0:	7bfa      	ldrb	r2, [r7, #15]
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	4613      	mov	r3, r2
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	4413      	add	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	440b      	add	r3, r1
 8005dbe:	331c      	adds	r3, #28
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005dc4:	7bfa      	ldrb	r2, [r7, #15]
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	4413      	add	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	3320      	adds	r3, #32
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005dd8:	7bfa      	ldrb	r2, [r7, #15]
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	440b      	add	r3, r1
 8005de6:	3324      	adds	r3, #36	@ 0x24
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	3301      	adds	r3, #1
 8005df0:	73fb      	strb	r3, [r7, #15]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	791b      	ldrb	r3, [r3, #4]
 8005df6:	7bfa      	ldrb	r2, [r7, #15]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d3af      	bcc.n	8005d5c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	73fb      	strb	r3, [r7, #15]
 8005e00:	e044      	b.n	8005e8c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e02:	7bfa      	ldrb	r2, [r7, #15]
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	4613      	mov	r3, r2
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	440b      	add	r3, r1
 8005e10:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005e14:	2200      	movs	r2, #0
 8005e16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005e18:	7bfa      	ldrb	r2, [r7, #15]
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	4413      	add	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	440b      	add	r3, r1
 8005e26:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005e2a:	7bfa      	ldrb	r2, [r7, #15]
 8005e2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005e2e:	7bfa      	ldrb	r2, [r7, #15]
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	4613      	mov	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005e40:	2200      	movs	r2, #0
 8005e42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005e44:	7bfa      	ldrb	r2, [r7, #15]
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	4413      	add	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	440b      	add	r3, r1
 8005e52:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005e5a:	7bfa      	ldrb	r2, [r7, #15]
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	4413      	add	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	440b      	add	r3, r1
 8005e68:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005e70:	7bfa      	ldrb	r2, [r7, #15]
 8005e72:	6879      	ldr	r1, [r7, #4]
 8005e74:	4613      	mov	r3, r2
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	4413      	add	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	440b      	add	r3, r1
 8005e7e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	73fb      	strb	r3, [r7, #15]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	791b      	ldrb	r3, [r3, #4]
 8005e90:	7bfa      	ldrb	r2, [r7, #15]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d3b5      	bcc.n	8005e02 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	7c1a      	ldrb	r2, [r3, #16]
 8005e9e:	f88d 2000 	strb.w	r2, [sp]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ea6:	f003 fac5 	bl	8009434 <USB_DevInit>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e00c      	b.n	8005ed6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f004 fb0f 	bl	800a4f2 <USB_DevDisconnect>

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b084      	sub	sp, #16
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d101      	bne.n	8005efa <HAL_PCD_Start+0x1c>
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	e022      	b.n	8005f40 <HAL_PCD_Start+0x62>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d009      	beq.n	8005f22 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d105      	bne.n	8005f22 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f1a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f003 fa16 	bl	8009358 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f004 fabd 	bl	800a4b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005f48:	b590      	push	{r4, r7, lr}
 8005f4a:	b08d      	sub	sp, #52	@ 0x34
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f004 fb7b 	bl	800a65a <USB_GetMode>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f040 848c 	bne.w	8006884 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f004 fadf 	bl	800a534 <USB_ReadInterrupts>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 8482 	beq.w	8006882 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	0a1b      	lsrs	r3, r3, #8
 8005f88:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f004 facc 	bl	800a534 <USB_ReadInterrupts>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d107      	bne.n	8005fb6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	695a      	ldr	r2, [r3, #20]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f002 0202 	and.w	r2, r2, #2
 8005fb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f004 faba 	bl	800a534 <USB_ReadInterrupts>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f003 0310 	and.w	r3, r3, #16
 8005fc6:	2b10      	cmp	r3, #16
 8005fc8:	d161      	bne.n	800608e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	699a      	ldr	r2, [r3, #24]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0210 	bic.w	r2, r2, #16
 8005fd8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	f003 020f 	and.w	r2, r3, #15
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	4413      	add	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	0c5b      	lsrs	r3, r3, #17
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	2b02      	cmp	r3, #2
 8006004:	d124      	bne.n	8006050 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006006:	69ba      	ldr	r2, [r7, #24]
 8006008:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800600c:	4013      	ands	r3, r2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d035      	beq.n	800607e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	091b      	lsrs	r3, r3, #4
 800601a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800601c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006020:	b29b      	uxth	r3, r3
 8006022:	461a      	mov	r2, r3
 8006024:	6a38      	ldr	r0, [r7, #32]
 8006026:	f004 f8f1 	bl	800a20c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	091b      	lsrs	r3, r3, #4
 8006032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006036:	441a      	add	r2, r3
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	695a      	ldr	r2, [r3, #20]
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	091b      	lsrs	r3, r3, #4
 8006044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006048:	441a      	add	r2, r3
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	615a      	str	r2, [r3, #20]
 800604e:	e016      	b.n	800607e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	0c5b      	lsrs	r3, r3, #17
 8006054:	f003 030f 	and.w	r3, r3, #15
 8006058:	2b06      	cmp	r3, #6
 800605a:	d110      	bne.n	800607e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006062:	2208      	movs	r2, #8
 8006064:	4619      	mov	r1, r3
 8006066:	6a38      	ldr	r0, [r7, #32]
 8006068:	f004 f8d0 	bl	800a20c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	695a      	ldr	r2, [r3, #20]
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	091b      	lsrs	r3, r3, #4
 8006074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006078:	441a      	add	r2, r3
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	699a      	ldr	r2, [r3, #24]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0210 	orr.w	r2, r2, #16
 800608c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4618      	mov	r0, r3
 8006094:	f004 fa4e 	bl	800a534 <USB_ReadInterrupts>
 8006098:	4603      	mov	r3, r0
 800609a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800609e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80060a2:	f040 80a7 	bne.w	80061f4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f004 fa53 	bl	800a55a <USB_ReadDevAllOutEpInterrupt>
 80060b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80060b6:	e099      	b.n	80061ec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80060b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 808e 	beq.w	80061e0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060ca:	b2d2      	uxtb	r2, r2
 80060cc:	4611      	mov	r1, r2
 80060ce:	4618      	mov	r0, r3
 80060d0:	f004 fa77 	bl	800a5c2 <USB_ReadDevOutEPInterrupt>
 80060d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00c      	beq.n	80060fa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80060e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ec:	461a      	mov	r2, r3
 80060ee:	2301      	movs	r3, #1
 80060f0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80060f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fea3 	bl	8006e40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00c      	beq.n	800611e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006110:	461a      	mov	r2, r3
 8006112:	2308      	movs	r3, #8
 8006114:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006116:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 ff79 	bl	8007010 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	2b00      	cmp	r3, #0
 8006126:	d008      	beq.n	800613a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006134:	461a      	mov	r2, r3
 8006136:	2310      	movs	r3, #16
 8006138:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d030      	beq.n	80061a6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800614c:	2b80      	cmp	r3, #128	@ 0x80
 800614e:	d109      	bne.n	8006164 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	69fa      	ldr	r2, [r7, #28]
 800615a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800615e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006162:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006166:	4613      	mov	r3, r2
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	4413      	add	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	4413      	add	r3, r2
 8006176:	3304      	adds	r3, #4
 8006178:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	78db      	ldrb	r3, [r3, #3]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d108      	bne.n	8006194 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2200      	movs	r2, #0
 8006186:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618a:	b2db      	uxtb	r3, r3
 800618c:	4619      	mov	r1, r3
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f006 fdaa 	bl	800cce8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061a0:	461a      	mov	r2, r3
 80061a2:	2302      	movs	r3, #2
 80061a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f003 0320 	and.w	r3, r3, #32
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d008      	beq.n	80061c2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80061b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061bc:	461a      	mov	r2, r3
 80061be:	2320      	movs	r3, #32
 80061c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d009      	beq.n	80061e0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80061cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d8:	461a      	mov	r2, r3
 80061da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80061de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80061e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e2:	3301      	adds	r3, #1
 80061e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80061e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e8:	085b      	lsrs	r3, r3, #1
 80061ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80061ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f47f af62 	bne.w	80060b8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f004 f99b 	bl	800a534 <USB_ReadInterrupts>
 80061fe:	4603      	mov	r3, r0
 8006200:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006204:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006208:	f040 80db 	bne.w	80063c2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4618      	mov	r0, r3
 8006212:	f004 f9bc 	bl	800a58e <USB_ReadDevAllInEpInterrupt>
 8006216:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800621c:	e0cd      	b.n	80063ba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800621e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 80c2 	beq.w	80063ae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006230:	b2d2      	uxtb	r2, r2
 8006232:	4611      	mov	r1, r2
 8006234:	4618      	mov	r0, r3
 8006236:	f004 f9e2 	bl	800a5fe <USB_ReadDevInEPInterrupt>
 800623a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d057      	beq.n	80062f6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006248:	f003 030f 	and.w	r3, r3, #15
 800624c:	2201      	movs	r2, #1
 800624e:	fa02 f303 	lsl.w	r3, r2, r3
 8006252:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800625a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	43db      	mvns	r3, r3
 8006260:	69f9      	ldr	r1, [r7, #28]
 8006262:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006266:	4013      	ands	r3, r2
 8006268:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006276:	461a      	mov	r2, r3
 8006278:	2301      	movs	r3, #1
 800627a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	799b      	ldrb	r3, [r3, #6]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d132      	bne.n	80062ea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006284:	6879      	ldr	r1, [r7, #4]
 8006286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006288:	4613      	mov	r3, r2
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	4413      	add	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	440b      	add	r3, r1
 8006292:	3320      	adds	r3, #32
 8006294:	6819      	ldr	r1, [r3, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800629a:	4613      	mov	r3, r2
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	4413      	add	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4403      	add	r3, r0
 80062a4:	331c      	adds	r3, #28
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4419      	add	r1, r3
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062ae:	4613      	mov	r3, r2
 80062b0:	00db      	lsls	r3, r3, #3
 80062b2:	4413      	add	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4403      	add	r3, r0
 80062b8:	3320      	adds	r3, #32
 80062ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d113      	bne.n	80062ea <HAL_PCD_IRQHandler+0x3a2>
 80062c2:	6879      	ldr	r1, [r7, #4]
 80062c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062c6:	4613      	mov	r3, r2
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	4413      	add	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	440b      	add	r3, r1
 80062d0:	3324      	adds	r3, #36	@ 0x24
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d108      	bne.n	80062ea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6818      	ldr	r0, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80062e2:	461a      	mov	r2, r3
 80062e4:	2101      	movs	r1, #1
 80062e6:	f004 f9e9 	bl	800a6bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f006 fc74 	bl	800cbde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f003 0308 	and.w	r3, r3, #8
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d008      	beq.n	8006312 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800630c:	461a      	mov	r2, r3
 800630e:	2308      	movs	r3, #8
 8006310:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	2b00      	cmp	r3, #0
 800631a:	d008      	beq.n	800632e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006328:	461a      	mov	r2, r3
 800632a:	2310      	movs	r3, #16
 800632c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006334:	2b00      	cmp	r3, #0
 8006336:	d008      	beq.n	800634a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006344:	461a      	mov	r2, r3
 8006346:	2340      	movs	r3, #64	@ 0x40
 8006348:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d023      	beq.n	800639c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006354:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006356:	6a38      	ldr	r0, [r7, #32]
 8006358:	f003 f9d0 	bl	80096fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800635c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800635e:	4613      	mov	r3, r2
 8006360:	00db      	lsls	r3, r3, #3
 8006362:	4413      	add	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	3310      	adds	r3, #16
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	4413      	add	r3, r2
 800636c:	3304      	adds	r3, #4
 800636e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	78db      	ldrb	r3, [r3, #3]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d108      	bne.n	800638a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	2200      	movs	r2, #0
 800637c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	b2db      	uxtb	r3, r3
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f006 fcc1 	bl	800cd0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006396:	461a      	mov	r2, r3
 8006398:	2302      	movs	r3, #2
 800639a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80063a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fcbd 	bl	8006d28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	3301      	adds	r3, #1
 80063b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80063b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b6:	085b      	lsrs	r3, r3, #1
 80063b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80063ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f47f af2e 	bne.w	800621e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f004 f8b4 	bl	800a534 <USB_ReadInterrupts>
 80063cc:	4603      	mov	r3, r0
 80063ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063d6:	d122      	bne.n	800641e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	69fa      	ldr	r2, [r7, #28]
 80063e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063e6:	f023 0301 	bic.w	r3, r3, #1
 80063ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d108      	bne.n	8006408 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80063fe:	2100      	movs	r1, #0
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fea3 	bl	800714c <HAL_PCDEx_LPM_Callback>
 8006406:	e002      	b.n	800640e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f006 fc5f 	bl	800cccc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	695a      	ldr	r2, [r3, #20]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800641c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4618      	mov	r0, r3
 8006424:	f004 f886 	bl	800a534 <USB_ReadInterrupts>
 8006428:	4603      	mov	r3, r0
 800642a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800642e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006432:	d112      	bne.n	800645a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b01      	cmp	r3, #1
 8006442:	d102      	bne.n	800644a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f006 fc1b 	bl	800cc80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	695a      	ldr	r2, [r3, #20]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006458:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4618      	mov	r0, r3
 8006460:	f004 f868 	bl	800a534 <USB_ReadInterrupts>
 8006464:	4603      	mov	r3, r0
 8006466:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800646a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800646e:	f040 80b7 	bne.w	80065e0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	69fa      	ldr	r2, [r7, #28]
 800647c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006480:	f023 0301 	bic.w	r3, r3, #1
 8006484:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2110      	movs	r1, #16
 800648c:	4618      	mov	r0, r3
 800648e:	f003 f935 	bl	80096fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006492:	2300      	movs	r3, #0
 8006494:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006496:	e046      	b.n	8006526 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064a4:	461a      	mov	r2, r3
 80064a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80064aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80064ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064bc:	0151      	lsls	r1, r2, #5
 80064be:	69fa      	ldr	r2, [r7, #28]
 80064c0:	440a      	add	r2, r1
 80064c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80064ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80064cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d8:	461a      	mov	r2, r3
 80064da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80064de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064f0:	0151      	lsls	r1, r2, #5
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	440a      	add	r2, r1
 80064f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80064fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006510:	0151      	lsls	r1, r2, #5
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	440a      	add	r2, r1
 8006516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800651a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800651e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006522:	3301      	adds	r3, #1
 8006524:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	791b      	ldrb	r3, [r3, #4]
 800652a:	461a      	mov	r2, r3
 800652c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652e:	4293      	cmp	r3, r2
 8006530:	d3b2      	bcc.n	8006498 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006540:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006544:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	7bdb      	ldrb	r3, [r3, #15]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d016      	beq.n	800657c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006554:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006558:	69fa      	ldr	r2, [r7, #28]
 800655a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800655e:	f043 030b 	orr.w	r3, r3, #11
 8006562:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800656c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800656e:	69fa      	ldr	r2, [r7, #28]
 8006570:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006574:	f043 030b 	orr.w	r3, r3, #11
 8006578:	6453      	str	r3, [r2, #68]	@ 0x44
 800657a:	e015      	b.n	80065a8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	69fa      	ldr	r2, [r7, #28]
 8006586:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800658a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800658e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006592:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	69fa      	ldr	r2, [r7, #28]
 800659e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065a2:	f043 030b 	orr.w	r3, r3, #11
 80065a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065b6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80065ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6818      	ldr	r0, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80065ca:	461a      	mov	r2, r3
 80065cc:	f004 f876 	bl	800a6bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	695a      	ldr	r2, [r3, #20]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80065de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f003 ffa5 	bl	800a534 <USB_ReadInterrupts>
 80065ea:	4603      	mov	r3, r0
 80065ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065f4:	d123      	bne.n	800663e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f004 f83b 	bl	800a676 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4618      	mov	r0, r3
 8006606:	f003 f8f2 	bl	80097ee <USB_GetDevSpeed>
 800660a:	4603      	mov	r3, r0
 800660c:	461a      	mov	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681c      	ldr	r4, [r3, #0]
 8006616:	f001 fa09 	bl	8007a2c <HAL_RCC_GetHCLKFreq>
 800661a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006620:	461a      	mov	r2, r3
 8006622:	4620      	mov	r0, r4
 8006624:	f002 fdf6 	bl	8009214 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f006 fb00 	bl	800cc2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	695a      	ldr	r2, [r3, #20]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800663c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4618      	mov	r0, r3
 8006644:	f003 ff76 	bl	800a534 <USB_ReadInterrupts>
 8006648:	4603      	mov	r3, r0
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b08      	cmp	r3, #8
 8006650:	d10a      	bne.n	8006668 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f006 fadd 	bl	800cc12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695a      	ldr	r2, [r3, #20]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f002 0208 	and.w	r2, r2, #8
 8006666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4618      	mov	r0, r3
 800666e:	f003 ff61 	bl	800a534 <USB_ReadInterrupts>
 8006672:	4603      	mov	r3, r0
 8006674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006678:	2b80      	cmp	r3, #128	@ 0x80
 800667a:	d123      	bne.n	80066c4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006688:	2301      	movs	r3, #1
 800668a:	627b      	str	r3, [r7, #36]	@ 0x24
 800668c:	e014      	b.n	80066b8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006692:	4613      	mov	r3, r2
 8006694:	00db      	lsls	r3, r3, #3
 8006696:	4413      	add	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	440b      	add	r3, r1
 800669c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d105      	bne.n	80066b2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80066a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fb0a 	bl	8006cc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b4:	3301      	adds	r3, #1
 80066b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	791b      	ldrb	r3, [r3, #4]
 80066bc:	461a      	mov	r2, r3
 80066be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d3e4      	bcc.n	800668e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f003 ff33 	bl	800a534 <USB_ReadInterrupts>
 80066ce:	4603      	mov	r3, r0
 80066d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066d8:	d13c      	bne.n	8006754 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066da:	2301      	movs	r3, #1
 80066dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80066de:	e02b      	b.n	8006738 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80066e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066f4:	4613      	mov	r3, r2
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	4413      	add	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	440b      	add	r3, r1
 80066fe:	3318      	adds	r3, #24
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d115      	bne.n	8006732 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006706:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006708:	2b00      	cmp	r3, #0
 800670a:	da12      	bge.n	8006732 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800670c:	6879      	ldr	r1, [r7, #4]
 800670e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006710:	4613      	mov	r3, r2
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	4413      	add	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	440b      	add	r3, r1
 800671a:	3317      	adds	r3, #23
 800671c:	2201      	movs	r2, #1
 800671e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006722:	b2db      	uxtb	r3, r3
 8006724:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006728:	b2db      	uxtb	r3, r3
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 faca 	bl	8006cc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006734:	3301      	adds	r3, #1
 8006736:	627b      	str	r3, [r7, #36]	@ 0x24
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	791b      	ldrb	r3, [r3, #4]
 800673c:	461a      	mov	r2, r3
 800673e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006740:	4293      	cmp	r3, r2
 8006742:	d3cd      	bcc.n	80066e0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	695a      	ldr	r2, [r3, #20]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006752:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4618      	mov	r0, r3
 800675a:	f003 feeb 	bl	800a534 <USB_ReadInterrupts>
 800675e:	4603      	mov	r3, r0
 8006760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006764:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006768:	d156      	bne.n	8006818 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800676a:	2301      	movs	r3, #1
 800676c:	627b      	str	r3, [r7, #36]	@ 0x24
 800676e:	e045      	b.n	80067fc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006780:	6879      	ldr	r1, [r7, #4]
 8006782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006784:	4613      	mov	r3, r2
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	4413      	add	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	440b      	add	r3, r1
 800678e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d12e      	bne.n	80067f6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006798:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800679a:	2b00      	cmp	r3, #0
 800679c:	da2b      	bge.n	80067f6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80067aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d121      	bne.n	80067f6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067b6:	4613      	mov	r3, r2
 80067b8:	00db      	lsls	r3, r3, #3
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	440b      	add	r3, r1
 80067c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80067c4:	2201      	movs	r2, #1
 80067c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10a      	bne.n	80067f6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	69fa      	ldr	r2, [r7, #28]
 80067ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80067f2:	6053      	str	r3, [r2, #4]
            break;
 80067f4:	e008      	b.n	8006808 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f8:	3301      	adds	r3, #1
 80067fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	791b      	ldrb	r3, [r3, #4]
 8006800:	461a      	mov	r2, r3
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	4293      	cmp	r3, r2
 8006806:	d3b3      	bcc.n	8006770 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	695a      	ldr	r2, [r3, #20]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006816:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4618      	mov	r0, r3
 800681e:	f003 fe89 	bl	800a534 <USB_ReadInterrupts>
 8006822:	4603      	mov	r3, r0
 8006824:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800682c:	d10a      	bne.n	8006844 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f006 fa7e 	bl	800cd30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	695a      	ldr	r2, [r3, #20]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006842:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4618      	mov	r0, r3
 800684a:	f003 fe73 	bl	800a534 <USB_ReadInterrupts>
 800684e:	4603      	mov	r3, r0
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	2b04      	cmp	r3, #4
 8006856:	d115      	bne.n	8006884 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	f003 0304 	and.w	r3, r3, #4
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f006 fa6e 	bl	800cd4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6859      	ldr	r1, [r3, #4]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	430a      	orrs	r2, r1
 800687e:	605a      	str	r2, [r3, #4]
 8006880:	e000      	b.n	8006884 <HAL_PCD_IRQHandler+0x93c>
      return;
 8006882:	bf00      	nop
    }
  }
}
 8006884:	3734      	adds	r7, #52	@ 0x34
 8006886:	46bd      	mov	sp, r7
 8006888:	bd90      	pop	{r4, r7, pc}

0800688a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b082      	sub	sp, #8
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	460b      	mov	r3, r1
 8006894:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800689c:	2b01      	cmp	r3, #1
 800689e:	d101      	bne.n	80068a4 <HAL_PCD_SetAddress+0x1a>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e012      	b.n	80068ca <HAL_PCD_SetAddress+0x40>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	78fa      	ldrb	r2, [r7, #3]
 80068b0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	78fa      	ldrb	r2, [r7, #3]
 80068b8:	4611      	mov	r1, r2
 80068ba:	4618      	mov	r0, r3
 80068bc:	f003 fdd2 	bl	800a464 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b084      	sub	sp, #16
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	4608      	mov	r0, r1
 80068dc:	4611      	mov	r1, r2
 80068de:	461a      	mov	r2, r3
 80068e0:	4603      	mov	r3, r0
 80068e2:	70fb      	strb	r3, [r7, #3]
 80068e4:	460b      	mov	r3, r1
 80068e6:	803b      	strh	r3, [r7, #0]
 80068e8:	4613      	mov	r3, r2
 80068ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80068f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	da0f      	bge.n	8006918 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	f003 020f 	and.w	r2, r3, #15
 80068fe:	4613      	mov	r3, r2
 8006900:	00db      	lsls	r3, r3, #3
 8006902:	4413      	add	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	3310      	adds	r3, #16
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	4413      	add	r3, r2
 800690c:	3304      	adds	r3, #4
 800690e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2201      	movs	r2, #1
 8006914:	705a      	strb	r2, [r3, #1]
 8006916:	e00f      	b.n	8006938 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	f003 020f 	and.w	r2, r3, #15
 800691e:	4613      	mov	r3, r2
 8006920:	00db      	lsls	r3, r3, #3
 8006922:	4413      	add	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	4413      	add	r3, r2
 800692e:	3304      	adds	r3, #4
 8006930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006938:	78fb      	ldrb	r3, [r7, #3]
 800693a:	f003 030f 	and.w	r3, r3, #15
 800693e:	b2da      	uxtb	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006944:	883b      	ldrh	r3, [r7, #0]
 8006946:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	78ba      	ldrb	r2, [r7, #2]
 8006952:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	785b      	ldrb	r3, [r3, #1]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d004      	beq.n	8006966 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	461a      	mov	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006966:	78bb      	ldrb	r3, [r7, #2]
 8006968:	2b02      	cmp	r3, #2
 800696a:	d102      	bne.n	8006972 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006978:	2b01      	cmp	r3, #1
 800697a:	d101      	bne.n	8006980 <HAL_PCD_EP_Open+0xae>
 800697c:	2302      	movs	r3, #2
 800697e:	e00e      	b.n	800699e <HAL_PCD_EP_Open+0xcc>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68f9      	ldr	r1, [r7, #12]
 800698e:	4618      	mov	r0, r3
 8006990:	f002 ff52 	bl	8009838 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800699c:	7afb      	ldrb	r3, [r7, #11]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b084      	sub	sp, #16
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	460b      	mov	r3, r1
 80069b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	da0f      	bge.n	80069da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069ba:	78fb      	ldrb	r3, [r7, #3]
 80069bc:	f003 020f 	and.w	r2, r3, #15
 80069c0:	4613      	mov	r3, r2
 80069c2:	00db      	lsls	r3, r3, #3
 80069c4:	4413      	add	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	3310      	adds	r3, #16
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	4413      	add	r3, r2
 80069ce:	3304      	adds	r3, #4
 80069d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2201      	movs	r2, #1
 80069d6:	705a      	strb	r2, [r3, #1]
 80069d8:	e00f      	b.n	80069fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069da:	78fb      	ldrb	r3, [r7, #3]
 80069dc:	f003 020f 	and.w	r2, r3, #15
 80069e0:	4613      	mov	r3, r2
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	4413      	add	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	4413      	add	r3, r2
 80069f0:	3304      	adds	r3, #4
 80069f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80069fa:	78fb      	ldrb	r3, [r7, #3]
 80069fc:	f003 030f 	and.w	r3, r3, #15
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d101      	bne.n	8006a14 <HAL_PCD_EP_Close+0x6e>
 8006a10:	2302      	movs	r3, #2
 8006a12:	e00e      	b.n	8006a32 <HAL_PCD_EP_Close+0x8c>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68f9      	ldr	r1, [r7, #12]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f002 ff90 	bl	8009948 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b086      	sub	sp, #24
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	603b      	str	r3, [r7, #0]
 8006a46:	460b      	mov	r3, r1
 8006a48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a4a:	7afb      	ldrb	r3, [r7, #11]
 8006a4c:	f003 020f 	and.w	r2, r3, #15
 8006a50:	4613      	mov	r3, r2
 8006a52:	00db      	lsls	r3, r3, #3
 8006a54:	4413      	add	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	4413      	add	r3, r2
 8006a60:	3304      	adds	r3, #4
 8006a62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	2200      	movs	r2, #0
 8006a74:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a7c:	7afb      	ldrb	r3, [r7, #11]
 8006a7e:	f003 030f 	and.w	r3, r3, #15
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	799b      	ldrb	r3, [r3, #6]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d102      	bne.n	8006a96 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6818      	ldr	r0, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	799b      	ldrb	r3, [r3, #6]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	6979      	ldr	r1, [r7, #20]
 8006aa2:	f003 f82d 	bl	8009b00 <USB_EPStartXfer>

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	f003 020f 	and.w	r2, r3, #15
 8006ac2:	6879      	ldr	r1, [r7, #4]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	440b      	add	r3, r1
 8006ace:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006ad2:	681b      	ldr	r3, [r3, #0]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	607a      	str	r2, [r7, #4]
 8006aea:	603b      	str	r3, [r7, #0]
 8006aec:	460b      	mov	r3, r1
 8006aee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006af0:	7afb      	ldrb	r3, [r7, #11]
 8006af2:	f003 020f 	and.w	r2, r3, #15
 8006af6:	4613      	mov	r3, r2
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	4413      	add	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	3310      	adds	r3, #16
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	4413      	add	r3, r2
 8006b04:	3304      	adds	r3, #4
 8006b06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	2200      	movs	r2, #0
 8006b18:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b20:	7afb      	ldrb	r3, [r7, #11]
 8006b22:	f003 030f 	and.w	r3, r3, #15
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	799b      	ldrb	r3, [r3, #6]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d102      	bne.n	8006b3a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6818      	ldr	r0, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	799b      	ldrb	r3, [r3, #6]
 8006b42:	461a      	mov	r2, r3
 8006b44:	6979      	ldr	r1, [r7, #20]
 8006b46:	f002 ffdb 	bl	8009b00 <USB_EPStartXfer>

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3718      	adds	r7, #24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006b60:	78fb      	ldrb	r3, [r7, #3]
 8006b62:	f003 030f 	and.w	r3, r3, #15
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	7912      	ldrb	r2, [r2, #4]
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d901      	bls.n	8006b72 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e04f      	b.n	8006c12 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006b72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	da0f      	bge.n	8006b9a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b7a:	78fb      	ldrb	r3, [r7, #3]
 8006b7c:	f003 020f 	and.w	r2, r3, #15
 8006b80:	4613      	mov	r3, r2
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	4413      	add	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	3310      	adds	r3, #16
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	3304      	adds	r3, #4
 8006b90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2201      	movs	r2, #1
 8006b96:	705a      	strb	r2, [r3, #1]
 8006b98:	e00d      	b.n	8006bb6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006b9a:	78fa      	ldrb	r2, [r7, #3]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	4413      	add	r3, r2
 8006bac:	3304      	adds	r3, #4
 8006bae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	f003 030f 	and.w	r3, r3, #15
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d101      	bne.n	8006bd6 <HAL_PCD_EP_SetStall+0x82>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	e01d      	b.n	8006c12 <HAL_PCD_EP_SetStall+0xbe>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68f9      	ldr	r1, [r7, #12]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f003 fb69 	bl	800a2bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006bea:	78fb      	ldrb	r3, [r7, #3]
 8006bec:	f003 030f 	and.w	r3, r3, #15
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d109      	bne.n	8006c08 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6818      	ldr	r0, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	7999      	ldrb	r1, [r3, #6]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006c02:	461a      	mov	r2, r3
 8006c04:	f003 fd5a 	bl	800a6bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b084      	sub	sp, #16
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	460b      	mov	r3, r1
 8006c24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006c26:	78fb      	ldrb	r3, [r7, #3]
 8006c28:	f003 030f 	and.w	r3, r3, #15
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	7912      	ldrb	r2, [r2, #4]
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d901      	bls.n	8006c38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e042      	b.n	8006cbe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	da0f      	bge.n	8006c60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c40:	78fb      	ldrb	r3, [r7, #3]
 8006c42:	f003 020f 	and.w	r2, r3, #15
 8006c46:	4613      	mov	r3, r2
 8006c48:	00db      	lsls	r3, r3, #3
 8006c4a:	4413      	add	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	3310      	adds	r3, #16
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	4413      	add	r3, r2
 8006c54:	3304      	adds	r3, #4
 8006c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	705a      	strb	r2, [r3, #1]
 8006c5e:	e00f      	b.n	8006c80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c60:	78fb      	ldrb	r3, [r7, #3]
 8006c62:	f003 020f 	and.w	r2, r3, #15
 8006c66:	4613      	mov	r3, r2
 8006c68:	00db      	lsls	r3, r3, #3
 8006c6a:	4413      	add	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	4413      	add	r3, r2
 8006c76:	3304      	adds	r3, #4
 8006c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c86:	78fb      	ldrb	r3, [r7, #3]
 8006c88:	f003 030f 	and.w	r3, r3, #15
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d101      	bne.n	8006ca0 <HAL_PCD_EP_ClrStall+0x86>
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	e00e      	b.n	8006cbe <HAL_PCD_EP_ClrStall+0xa4>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68f9      	ldr	r1, [r7, #12]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f003 fb72 	bl	800a398 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	460b      	mov	r3, r1
 8006cd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	da0c      	bge.n	8006cf4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cda:	78fb      	ldrb	r3, [r7, #3]
 8006cdc:	f003 020f 	and.w	r2, r3, #15
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	4413      	add	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	3310      	adds	r3, #16
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	4413      	add	r3, r2
 8006cee:	3304      	adds	r3, #4
 8006cf0:	60fb      	str	r3, [r7, #12]
 8006cf2:	e00c      	b.n	8006d0e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cf4:	78fb      	ldrb	r3, [r7, #3]
 8006cf6:	f003 020f 	and.w	r2, r3, #15
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	4413      	add	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	4413      	add	r3, r2
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68f9      	ldr	r1, [r7, #12]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f003 f991 	bl	800a03c <USB_EPStopXfer>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006d1e:	7afb      	ldrb	r3, [r7, #11]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08a      	sub	sp, #40	@ 0x28
 8006d2c:	af02      	add	r7, sp, #8
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	00db      	lsls	r3, r3, #3
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	3310      	adds	r3, #16
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	695a      	ldr	r2, [r3, #20]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d901      	bls.n	8006d60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e06b      	b.n	8006e38 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	691a      	ldr	r2, [r3, #16]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d902      	bls.n	8006d7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	3303      	adds	r3, #3
 8006d80:	089b      	lsrs	r3, r3, #2
 8006d82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006d84:	e02a      	b.n	8006ddc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	691a      	ldr	r2, [r3, #16]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	69fa      	ldr	r2, [r7, #28]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d902      	bls.n	8006da2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	3303      	adds	r3, #3
 8006da6:	089b      	lsrs	r3, r3, #2
 8006da8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	68d9      	ldr	r1, [r3, #12]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	6978      	ldr	r0, [r7, #20]
 8006dc0:	f003 f9e6 	bl	800a190 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	68da      	ldr	r2, [r3, #12]
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	441a      	add	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	695a      	ldr	r2, [r3, #20]
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	441a      	add	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d809      	bhi.n	8006e06 <PCD_WriteEmptyTxFifo+0xde>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	695a      	ldr	r2, [r3, #20]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d203      	bcs.n	8006e06 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1bf      	bne.n	8006d86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	691a      	ldr	r2, [r3, #16]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d811      	bhi.n	8006e36 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	f003 030f 	and.w	r3, r3, #15
 8006e18:	2201      	movs	r2, #1
 8006e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	43db      	mvns	r3, r3
 8006e2c:	6939      	ldr	r1, [r7, #16]
 8006e2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e32:	4013      	ands	r3, r2
 8006e34:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3720      	adds	r7, #32
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b088      	sub	sp, #32
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	333c      	adds	r3, #60	@ 0x3c
 8006e58:	3304      	adds	r3, #4
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	799b      	ldrb	r3, [r3, #6]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d17b      	bne.n	8006f6e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	f003 0308 	and.w	r3, r3, #8
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d015      	beq.n	8006eac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	4a61      	ldr	r2, [pc, #388]	@ (8007008 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	f240 80b9 	bls.w	8006ffc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 80b3 	beq.w	8006ffc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ea8:	6093      	str	r3, [r2, #8]
 8006eaa:	e0a7      	b.n	8006ffc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	f003 0320 	and.w	r3, r3, #32
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d009      	beq.n	8006eca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	2320      	movs	r3, #32
 8006ec6:	6093      	str	r3, [r2, #8]
 8006ec8:	e098      	b.n	8006ffc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f040 8093 	bne.w	8006ffc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	4a4b      	ldr	r2, [pc, #300]	@ (8007008 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d90f      	bls.n	8006efe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00a      	beq.n	8006efe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006efa:	6093      	str	r3, [r2, #8]
 8006efc:	e07e      	b.n	8006ffc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	4613      	mov	r3, r2
 8006f02:	00db      	lsls	r3, r3, #3
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	4413      	add	r3, r2
 8006f10:	3304      	adds	r3, #4
 8006f12:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a1a      	ldr	r2, [r3, #32]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	0159      	lsls	r1, r3, #5
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	440b      	add	r3, r1
 8006f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f2a:	1ad2      	subs	r2, r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d114      	bne.n	8006f60 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d109      	bne.n	8006f52 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006f48:	461a      	mov	r2, r3
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	f003 fbb6 	bl	800a6bc <USB_EP0_OutStart>
 8006f50:	e006      	b.n	8006f60 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	68da      	ldr	r2, [r3, #12]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	441a      	add	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	4619      	mov	r1, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f005 fe1e 	bl	800cba8 <HAL_PCD_DataOutStageCallback>
 8006f6c:	e046      	b.n	8006ffc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	4a26      	ldr	r2, [pc, #152]	@ (800700c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d124      	bne.n	8006fc0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00a      	beq.n	8006f96 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f92:	6093      	str	r3, [r2, #8]
 8006f94:	e032      	b.n	8006ffc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f003 0320 	and.w	r3, r3, #32
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d008      	beq.n	8006fb2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fac:	461a      	mov	r2, r3
 8006fae:	2320      	movs	r3, #32
 8006fb0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f005 fdf5 	bl	800cba8 <HAL_PCD_DataOutStageCallback>
 8006fbe:	e01d      	b.n	8006ffc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d114      	bne.n	8006ff0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006fc6:	6879      	ldr	r1, [r7, #4]
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	00db      	lsls	r3, r3, #3
 8006fce:	4413      	add	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	440b      	add	r3, r1
 8006fd4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d108      	bne.n	8006ff0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6818      	ldr	r0, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006fe8:	461a      	mov	r2, r3
 8006fea:	2100      	movs	r1, #0
 8006fec:	f003 fb66 	bl	800a6bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f005 fdd6 	bl	800cba8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3720      	adds	r7, #32
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	4f54300a 	.word	0x4f54300a
 800700c:	4f54310a 	.word	0x4f54310a

08007010 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	333c      	adds	r3, #60	@ 0x3c
 8007028:	3304      	adds	r3, #4
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	4413      	add	r3, r2
 8007036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4a15      	ldr	r2, [pc, #84]	@ (8007098 <PCD_EP_OutSetupPacket_int+0x88>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d90e      	bls.n	8007064 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800704c:	2b00      	cmp	r3, #0
 800704e:	d009      	beq.n	8007064 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800705c:	461a      	mov	r2, r3
 800705e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007062:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f005 fd8d 	bl	800cb84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4a0a      	ldr	r2, [pc, #40]	@ (8007098 <PCD_EP_OutSetupPacket_int+0x88>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d90c      	bls.n	800708c <PCD_EP_OutSetupPacket_int+0x7c>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	799b      	ldrb	r3, [r3, #6]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d108      	bne.n	800708c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6818      	ldr	r0, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007084:	461a      	mov	r2, r3
 8007086:	2101      	movs	r1, #1
 8007088:	f003 fb18 	bl	800a6bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	4f54300a 	.word	0x4f54300a

0800709c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	460b      	mov	r3, r1
 80070a6:	70fb      	strb	r3, [r7, #3]
 80070a8:	4613      	mov	r3, r2
 80070aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80070b4:	78fb      	ldrb	r3, [r7, #3]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d107      	bne.n	80070ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80070ba:	883b      	ldrh	r3, [r7, #0]
 80070bc:	0419      	lsls	r1, r3, #16
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80070c8:	e028      	b.n	800711c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d0:	0c1b      	lsrs	r3, r3, #16
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	4413      	add	r3, r2
 80070d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80070d8:	2300      	movs	r3, #0
 80070da:	73fb      	strb	r3, [r7, #15]
 80070dc:	e00d      	b.n	80070fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
 80070e4:	3340      	adds	r3, #64	@ 0x40
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	0c1b      	lsrs	r3, r3, #16
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	4413      	add	r3, r2
 80070f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
 80070f6:	3301      	adds	r3, #1
 80070f8:	73fb      	strb	r3, [r7, #15]
 80070fa:	7bfa      	ldrb	r2, [r7, #15]
 80070fc:	78fb      	ldrb	r3, [r7, #3]
 80070fe:	3b01      	subs	r3, #1
 8007100:	429a      	cmp	r2, r3
 8007102:	d3ec      	bcc.n	80070de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007104:	883b      	ldrh	r3, [r7, #0]
 8007106:	0418      	lsls	r0, r3, #16
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6819      	ldr	r1, [r3, #0]
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	3b01      	subs	r3, #1
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	4302      	orrs	r2, r0
 8007114:	3340      	adds	r3, #64	@ 0x40
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	440b      	add	r3, r1
 800711a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3714      	adds	r7, #20
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	460b      	mov	r3, r1
 8007134:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	887a      	ldrh	r2, [r7, #2]
 800713c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e267      	b.n	8007646 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	2b00      	cmp	r3, #0
 8007180:	d075      	beq.n	800726e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007182:	4b88      	ldr	r3, [pc, #544]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f003 030c 	and.w	r3, r3, #12
 800718a:	2b04      	cmp	r3, #4
 800718c:	d00c      	beq.n	80071a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800718e:	4b85      	ldr	r3, [pc, #532]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007196:	2b08      	cmp	r3, #8
 8007198:	d112      	bne.n	80071c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800719a:	4b82      	ldr	r3, [pc, #520]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071a6:	d10b      	bne.n	80071c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071a8:	4b7e      	ldr	r3, [pc, #504]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d05b      	beq.n	800726c <HAL_RCC_OscConfig+0x108>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d157      	bne.n	800726c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e242      	b.n	8007646 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071c8:	d106      	bne.n	80071d8 <HAL_RCC_OscConfig+0x74>
 80071ca:	4b76      	ldr	r3, [pc, #472]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a75      	ldr	r2, [pc, #468]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 80071d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071d4:	6013      	str	r3, [r2, #0]
 80071d6:	e01d      	b.n	8007214 <HAL_RCC_OscConfig+0xb0>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071e0:	d10c      	bne.n	80071fc <HAL_RCC_OscConfig+0x98>
 80071e2:	4b70      	ldr	r3, [pc, #448]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a6f      	ldr	r2, [pc, #444]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 80071e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80071ec:	6013      	str	r3, [r2, #0]
 80071ee:	4b6d      	ldr	r3, [pc, #436]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a6c      	ldr	r2, [pc, #432]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 80071f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071f8:	6013      	str	r3, [r2, #0]
 80071fa:	e00b      	b.n	8007214 <HAL_RCC_OscConfig+0xb0>
 80071fc:	4b69      	ldr	r3, [pc, #420]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a68      	ldr	r2, [pc, #416]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 8007202:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	4b66      	ldr	r3, [pc, #408]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a65      	ldr	r2, [pc, #404]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 800720e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d013      	beq.n	8007244 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800721c:	f7fb fce8 	bl	8002bf0 <HAL_GetTick>
 8007220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007222:	e008      	b.n	8007236 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007224:	f7fb fce4 	bl	8002bf0 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	2b64      	cmp	r3, #100	@ 0x64
 8007230:	d901      	bls.n	8007236 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e207      	b.n	8007646 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007236:	4b5b      	ldr	r3, [pc, #364]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d0f0      	beq.n	8007224 <HAL_RCC_OscConfig+0xc0>
 8007242:	e014      	b.n	800726e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007244:	f7fb fcd4 	bl	8002bf0 <HAL_GetTick>
 8007248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800724a:	e008      	b.n	800725e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800724c:	f7fb fcd0 	bl	8002bf0 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	2b64      	cmp	r3, #100	@ 0x64
 8007258:	d901      	bls.n	800725e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e1f3      	b.n	8007646 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800725e:	4b51      	ldr	r3, [pc, #324]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1f0      	bne.n	800724c <HAL_RCC_OscConfig+0xe8>
 800726a:	e000      	b.n	800726e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800726c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d063      	beq.n	8007342 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800727a:	4b4a      	ldr	r3, [pc, #296]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f003 030c 	and.w	r3, r3, #12
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00b      	beq.n	800729e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007286:	4b47      	ldr	r3, [pc, #284]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800728e:	2b08      	cmp	r3, #8
 8007290:	d11c      	bne.n	80072cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007292:	4b44      	ldr	r3, [pc, #272]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d116      	bne.n	80072cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800729e:	4b41      	ldr	r3, [pc, #260]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0302 	and.w	r3, r3, #2
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d005      	beq.n	80072b6 <HAL_RCC_OscConfig+0x152>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d001      	beq.n	80072b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e1c7      	b.n	8007646 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072b6:	4b3b      	ldr	r3, [pc, #236]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	00db      	lsls	r3, r3, #3
 80072c4:	4937      	ldr	r1, [pc, #220]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072ca:	e03a      	b.n	8007342 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d020      	beq.n	8007316 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072d4:	4b34      	ldr	r3, [pc, #208]	@ (80073a8 <HAL_RCC_OscConfig+0x244>)
 80072d6:	2201      	movs	r2, #1
 80072d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072da:	f7fb fc89 	bl	8002bf0 <HAL_GetTick>
 80072de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072e0:	e008      	b.n	80072f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072e2:	f7fb fc85 	bl	8002bf0 <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d901      	bls.n	80072f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e1a8      	b.n	8007646 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072f4:	4b2b      	ldr	r3, [pc, #172]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0302 	and.w	r3, r3, #2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d0f0      	beq.n	80072e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007300:	4b28      	ldr	r3, [pc, #160]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	00db      	lsls	r3, r3, #3
 800730e:	4925      	ldr	r1, [pc, #148]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 8007310:	4313      	orrs	r3, r2
 8007312:	600b      	str	r3, [r1, #0]
 8007314:	e015      	b.n	8007342 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007316:	4b24      	ldr	r3, [pc, #144]	@ (80073a8 <HAL_RCC_OscConfig+0x244>)
 8007318:	2200      	movs	r2, #0
 800731a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800731c:	f7fb fc68 	bl	8002bf0 <HAL_GetTick>
 8007320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007322:	e008      	b.n	8007336 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007324:	f7fb fc64 	bl	8002bf0 <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b02      	cmp	r3, #2
 8007330:	d901      	bls.n	8007336 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e187      	b.n	8007646 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007336:	4b1b      	ldr	r3, [pc, #108]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0302 	and.w	r3, r3, #2
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1f0      	bne.n	8007324 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0308 	and.w	r3, r3, #8
 800734a:	2b00      	cmp	r3, #0
 800734c:	d036      	beq.n	80073bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d016      	beq.n	8007384 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007356:	4b15      	ldr	r3, [pc, #84]	@ (80073ac <HAL_RCC_OscConfig+0x248>)
 8007358:	2201      	movs	r2, #1
 800735a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800735c:	f7fb fc48 	bl	8002bf0 <HAL_GetTick>
 8007360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007362:	e008      	b.n	8007376 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007364:	f7fb fc44 	bl	8002bf0 <HAL_GetTick>
 8007368:	4602      	mov	r2, r0
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	2b02      	cmp	r3, #2
 8007370:	d901      	bls.n	8007376 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e167      	b.n	8007646 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007376:	4b0b      	ldr	r3, [pc, #44]	@ (80073a4 <HAL_RCC_OscConfig+0x240>)
 8007378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800737a:	f003 0302 	and.w	r3, r3, #2
 800737e:	2b00      	cmp	r3, #0
 8007380:	d0f0      	beq.n	8007364 <HAL_RCC_OscConfig+0x200>
 8007382:	e01b      	b.n	80073bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007384:	4b09      	ldr	r3, [pc, #36]	@ (80073ac <HAL_RCC_OscConfig+0x248>)
 8007386:	2200      	movs	r2, #0
 8007388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800738a:	f7fb fc31 	bl	8002bf0 <HAL_GetTick>
 800738e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007390:	e00e      	b.n	80073b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007392:	f7fb fc2d 	bl	8002bf0 <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	2b02      	cmp	r3, #2
 800739e:	d907      	bls.n	80073b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e150      	b.n	8007646 <HAL_RCC_OscConfig+0x4e2>
 80073a4:	40023800 	.word	0x40023800
 80073a8:	42470000 	.word	0x42470000
 80073ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073b0:	4b88      	ldr	r3, [pc, #544]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 80073b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073b4:	f003 0302 	and.w	r3, r3, #2
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1ea      	bne.n	8007392 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0304 	and.w	r3, r3, #4
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 8097 	beq.w	80074f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073ca:	2300      	movs	r3, #0
 80073cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073ce:	4b81      	ldr	r3, [pc, #516]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 80073d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10f      	bne.n	80073fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073da:	2300      	movs	r3, #0
 80073dc:	60bb      	str	r3, [r7, #8]
 80073de:	4b7d      	ldr	r3, [pc, #500]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 80073e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e2:	4a7c      	ldr	r2, [pc, #496]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 80073e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80073ea:	4b7a      	ldr	r3, [pc, #488]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 80073ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073f2:	60bb      	str	r3, [r7, #8]
 80073f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073f6:	2301      	movs	r3, #1
 80073f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073fa:	4b77      	ldr	r3, [pc, #476]	@ (80075d8 <HAL_RCC_OscConfig+0x474>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007402:	2b00      	cmp	r3, #0
 8007404:	d118      	bne.n	8007438 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007406:	4b74      	ldr	r3, [pc, #464]	@ (80075d8 <HAL_RCC_OscConfig+0x474>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a73      	ldr	r2, [pc, #460]	@ (80075d8 <HAL_RCC_OscConfig+0x474>)
 800740c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007412:	f7fb fbed 	bl	8002bf0 <HAL_GetTick>
 8007416:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007418:	e008      	b.n	800742c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800741a:	f7fb fbe9 	bl	8002bf0 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	2b02      	cmp	r3, #2
 8007426:	d901      	bls.n	800742c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e10c      	b.n	8007646 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800742c:	4b6a      	ldr	r3, [pc, #424]	@ (80075d8 <HAL_RCC_OscConfig+0x474>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0f0      	beq.n	800741a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d106      	bne.n	800744e <HAL_RCC_OscConfig+0x2ea>
 8007440:	4b64      	ldr	r3, [pc, #400]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 8007442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007444:	4a63      	ldr	r2, [pc, #396]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 8007446:	f043 0301 	orr.w	r3, r3, #1
 800744a:	6713      	str	r3, [r2, #112]	@ 0x70
 800744c:	e01c      	b.n	8007488 <HAL_RCC_OscConfig+0x324>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	2b05      	cmp	r3, #5
 8007454:	d10c      	bne.n	8007470 <HAL_RCC_OscConfig+0x30c>
 8007456:	4b5f      	ldr	r3, [pc, #380]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 8007458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800745a:	4a5e      	ldr	r2, [pc, #376]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 800745c:	f043 0304 	orr.w	r3, r3, #4
 8007460:	6713      	str	r3, [r2, #112]	@ 0x70
 8007462:	4b5c      	ldr	r3, [pc, #368]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 8007464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007466:	4a5b      	ldr	r2, [pc, #364]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 8007468:	f043 0301 	orr.w	r3, r3, #1
 800746c:	6713      	str	r3, [r2, #112]	@ 0x70
 800746e:	e00b      	b.n	8007488 <HAL_RCC_OscConfig+0x324>
 8007470:	4b58      	ldr	r3, [pc, #352]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 8007472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007474:	4a57      	ldr	r2, [pc, #348]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 8007476:	f023 0301 	bic.w	r3, r3, #1
 800747a:	6713      	str	r3, [r2, #112]	@ 0x70
 800747c:	4b55      	ldr	r3, [pc, #340]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 800747e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007480:	4a54      	ldr	r2, [pc, #336]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 8007482:	f023 0304 	bic.w	r3, r3, #4
 8007486:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d015      	beq.n	80074bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007490:	f7fb fbae 	bl	8002bf0 <HAL_GetTick>
 8007494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007496:	e00a      	b.n	80074ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007498:	f7fb fbaa 	bl	8002bf0 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d901      	bls.n	80074ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e0cb      	b.n	8007646 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ae:	4b49      	ldr	r3, [pc, #292]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 80074b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074b2:	f003 0302 	and.w	r3, r3, #2
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0ee      	beq.n	8007498 <HAL_RCC_OscConfig+0x334>
 80074ba:	e014      	b.n	80074e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074bc:	f7fb fb98 	bl	8002bf0 <HAL_GetTick>
 80074c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074c2:	e00a      	b.n	80074da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074c4:	f7fb fb94 	bl	8002bf0 <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d901      	bls.n	80074da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e0b5      	b.n	8007646 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074da:	4b3e      	ldr	r3, [pc, #248]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 80074dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074de:	f003 0302 	and.w	r3, r3, #2
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1ee      	bne.n	80074c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d105      	bne.n	80074f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074ec:	4b39      	ldr	r3, [pc, #228]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 80074ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f0:	4a38      	ldr	r2, [pc, #224]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 80074f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 80a1 	beq.w	8007644 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007502:	4b34      	ldr	r3, [pc, #208]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f003 030c 	and.w	r3, r3, #12
 800750a:	2b08      	cmp	r3, #8
 800750c:	d05c      	beq.n	80075c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	2b02      	cmp	r3, #2
 8007514:	d141      	bne.n	800759a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007516:	4b31      	ldr	r3, [pc, #196]	@ (80075dc <HAL_RCC_OscConfig+0x478>)
 8007518:	2200      	movs	r2, #0
 800751a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800751c:	f7fb fb68 	bl	8002bf0 <HAL_GetTick>
 8007520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007522:	e008      	b.n	8007536 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007524:	f7fb fb64 	bl	8002bf0 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b02      	cmp	r3, #2
 8007530:	d901      	bls.n	8007536 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e087      	b.n	8007646 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007536:	4b27      	ldr	r3, [pc, #156]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1f0      	bne.n	8007524 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69da      	ldr	r2, [r3, #28]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	431a      	orrs	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007550:	019b      	lsls	r3, r3, #6
 8007552:	431a      	orrs	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007558:	085b      	lsrs	r3, r3, #1
 800755a:	3b01      	subs	r3, #1
 800755c:	041b      	lsls	r3, r3, #16
 800755e:	431a      	orrs	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007564:	061b      	lsls	r3, r3, #24
 8007566:	491b      	ldr	r1, [pc, #108]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 8007568:	4313      	orrs	r3, r2
 800756a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800756c:	4b1b      	ldr	r3, [pc, #108]	@ (80075dc <HAL_RCC_OscConfig+0x478>)
 800756e:	2201      	movs	r2, #1
 8007570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007572:	f7fb fb3d 	bl	8002bf0 <HAL_GetTick>
 8007576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007578:	e008      	b.n	800758c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800757a:	f7fb fb39 	bl	8002bf0 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	2b02      	cmp	r3, #2
 8007586:	d901      	bls.n	800758c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e05c      	b.n	8007646 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800758c:	4b11      	ldr	r3, [pc, #68]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d0f0      	beq.n	800757a <HAL_RCC_OscConfig+0x416>
 8007598:	e054      	b.n	8007644 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800759a:	4b10      	ldr	r3, [pc, #64]	@ (80075dc <HAL_RCC_OscConfig+0x478>)
 800759c:	2200      	movs	r2, #0
 800759e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075a0:	f7fb fb26 	bl	8002bf0 <HAL_GetTick>
 80075a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075a6:	e008      	b.n	80075ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075a8:	f7fb fb22 	bl	8002bf0 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d901      	bls.n	80075ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e045      	b.n	8007646 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075ba:	4b06      	ldr	r3, [pc, #24]	@ (80075d4 <HAL_RCC_OscConfig+0x470>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1f0      	bne.n	80075a8 <HAL_RCC_OscConfig+0x444>
 80075c6:	e03d      	b.n	8007644 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d107      	bne.n	80075e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e038      	b.n	8007646 <HAL_RCC_OscConfig+0x4e2>
 80075d4:	40023800 	.word	0x40023800
 80075d8:	40007000 	.word	0x40007000
 80075dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80075e0:	4b1b      	ldr	r3, [pc, #108]	@ (8007650 <HAL_RCC_OscConfig+0x4ec>)
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d028      	beq.n	8007640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d121      	bne.n	8007640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007606:	429a      	cmp	r2, r3
 8007608:	d11a      	bne.n	8007640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007610:	4013      	ands	r3, r2
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007616:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007618:	4293      	cmp	r3, r2
 800761a:	d111      	bne.n	8007640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007626:	085b      	lsrs	r3, r3, #1
 8007628:	3b01      	subs	r3, #1
 800762a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800762c:	429a      	cmp	r2, r3
 800762e:	d107      	bne.n	8007640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800763a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800763c:	429a      	cmp	r2, r3
 800763e:	d001      	beq.n	8007644 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e000      	b.n	8007646 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3718      	adds	r7, #24
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	40023800 	.word	0x40023800

08007654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e0cc      	b.n	8007802 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007668:	4b68      	ldr	r3, [pc, #416]	@ (800780c <HAL_RCC_ClockConfig+0x1b8>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0307 	and.w	r3, r3, #7
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	429a      	cmp	r2, r3
 8007674:	d90c      	bls.n	8007690 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007676:	4b65      	ldr	r3, [pc, #404]	@ (800780c <HAL_RCC_ClockConfig+0x1b8>)
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	b2d2      	uxtb	r2, r2
 800767c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800767e:	4b63      	ldr	r3, [pc, #396]	@ (800780c <HAL_RCC_ClockConfig+0x1b8>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0307 	and.w	r3, r3, #7
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	429a      	cmp	r2, r3
 800768a:	d001      	beq.n	8007690 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e0b8      	b.n	8007802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0302 	and.w	r3, r3, #2
 8007698:	2b00      	cmp	r3, #0
 800769a:	d020      	beq.n	80076de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0304 	and.w	r3, r3, #4
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d005      	beq.n	80076b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076a8:	4b59      	ldr	r3, [pc, #356]	@ (8007810 <HAL_RCC_ClockConfig+0x1bc>)
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	4a58      	ldr	r2, [pc, #352]	@ (8007810 <HAL_RCC_ClockConfig+0x1bc>)
 80076ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80076b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0308 	and.w	r3, r3, #8
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d005      	beq.n	80076cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80076c0:	4b53      	ldr	r3, [pc, #332]	@ (8007810 <HAL_RCC_ClockConfig+0x1bc>)
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	4a52      	ldr	r2, [pc, #328]	@ (8007810 <HAL_RCC_ClockConfig+0x1bc>)
 80076c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80076ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076cc:	4b50      	ldr	r3, [pc, #320]	@ (8007810 <HAL_RCC_ClockConfig+0x1bc>)
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	494d      	ldr	r1, [pc, #308]	@ (8007810 <HAL_RCC_ClockConfig+0x1bc>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d044      	beq.n	8007774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d107      	bne.n	8007702 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076f2:	4b47      	ldr	r3, [pc, #284]	@ (8007810 <HAL_RCC_ClockConfig+0x1bc>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d119      	bne.n	8007732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e07f      	b.n	8007802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2b02      	cmp	r3, #2
 8007708:	d003      	beq.n	8007712 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800770e:	2b03      	cmp	r3, #3
 8007710:	d107      	bne.n	8007722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007712:	4b3f      	ldr	r3, [pc, #252]	@ (8007810 <HAL_RCC_ClockConfig+0x1bc>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d109      	bne.n	8007732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e06f      	b.n	8007802 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007722:	4b3b      	ldr	r3, [pc, #236]	@ (8007810 <HAL_RCC_ClockConfig+0x1bc>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e067      	b.n	8007802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007732:	4b37      	ldr	r3, [pc, #220]	@ (8007810 <HAL_RCC_ClockConfig+0x1bc>)
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f023 0203 	bic.w	r2, r3, #3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	4934      	ldr	r1, [pc, #208]	@ (8007810 <HAL_RCC_ClockConfig+0x1bc>)
 8007740:	4313      	orrs	r3, r2
 8007742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007744:	f7fb fa54 	bl	8002bf0 <HAL_GetTick>
 8007748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800774a:	e00a      	b.n	8007762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800774c:	f7fb fa50 	bl	8002bf0 <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800775a:	4293      	cmp	r3, r2
 800775c:	d901      	bls.n	8007762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	e04f      	b.n	8007802 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007762:	4b2b      	ldr	r3, [pc, #172]	@ (8007810 <HAL_RCC_ClockConfig+0x1bc>)
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f003 020c 	and.w	r2, r3, #12
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	429a      	cmp	r2, r3
 8007772:	d1eb      	bne.n	800774c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007774:	4b25      	ldr	r3, [pc, #148]	@ (800780c <HAL_RCC_ClockConfig+0x1b8>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0307 	and.w	r3, r3, #7
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	429a      	cmp	r2, r3
 8007780:	d20c      	bcs.n	800779c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007782:	4b22      	ldr	r3, [pc, #136]	@ (800780c <HAL_RCC_ClockConfig+0x1b8>)
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	b2d2      	uxtb	r2, r2
 8007788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800778a:	4b20      	ldr	r3, [pc, #128]	@ (800780c <HAL_RCC_ClockConfig+0x1b8>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0307 	and.w	r3, r3, #7
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	429a      	cmp	r2, r3
 8007796:	d001      	beq.n	800779c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e032      	b.n	8007802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0304 	and.w	r3, r3, #4
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d008      	beq.n	80077ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077a8:	4b19      	ldr	r3, [pc, #100]	@ (8007810 <HAL_RCC_ClockConfig+0x1bc>)
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	4916      	ldr	r1, [pc, #88]	@ (8007810 <HAL_RCC_ClockConfig+0x1bc>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0308 	and.w	r3, r3, #8
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d009      	beq.n	80077da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077c6:	4b12      	ldr	r3, [pc, #72]	@ (8007810 <HAL_RCC_ClockConfig+0x1bc>)
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	490e      	ldr	r1, [pc, #56]	@ (8007810 <HAL_RCC_ClockConfig+0x1bc>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80077da:	f000 f821 	bl	8007820 <HAL_RCC_GetSysClockFreq>
 80077de:	4602      	mov	r2, r0
 80077e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007810 <HAL_RCC_ClockConfig+0x1bc>)
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	091b      	lsrs	r3, r3, #4
 80077e6:	f003 030f 	and.w	r3, r3, #15
 80077ea:	490a      	ldr	r1, [pc, #40]	@ (8007814 <HAL_RCC_ClockConfig+0x1c0>)
 80077ec:	5ccb      	ldrb	r3, [r1, r3]
 80077ee:	fa22 f303 	lsr.w	r3, r2, r3
 80077f2:	4a09      	ldr	r2, [pc, #36]	@ (8007818 <HAL_RCC_ClockConfig+0x1c4>)
 80077f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80077f6:	4b09      	ldr	r3, [pc, #36]	@ (800781c <HAL_RCC_ClockConfig+0x1c8>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fb f9b4 	bl	8002b68 <HAL_InitTick>

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	40023c00 	.word	0x40023c00
 8007810:	40023800 	.word	0x40023800
 8007814:	08010370 	.word	0x08010370
 8007818:	20000004 	.word	0x20000004
 800781c:	20000008 	.word	0x20000008

08007820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007824:	b094      	sub	sp, #80	@ 0x50
 8007826:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007830:	2300      	movs	r3, #0
 8007832:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007834:	2300      	movs	r3, #0
 8007836:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007838:	4b79      	ldr	r3, [pc, #484]	@ (8007a20 <HAL_RCC_GetSysClockFreq+0x200>)
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f003 030c 	and.w	r3, r3, #12
 8007840:	2b08      	cmp	r3, #8
 8007842:	d00d      	beq.n	8007860 <HAL_RCC_GetSysClockFreq+0x40>
 8007844:	2b08      	cmp	r3, #8
 8007846:	f200 80e1 	bhi.w	8007a0c <HAL_RCC_GetSysClockFreq+0x1ec>
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <HAL_RCC_GetSysClockFreq+0x34>
 800784e:	2b04      	cmp	r3, #4
 8007850:	d003      	beq.n	800785a <HAL_RCC_GetSysClockFreq+0x3a>
 8007852:	e0db      	b.n	8007a0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007854:	4b73      	ldr	r3, [pc, #460]	@ (8007a24 <HAL_RCC_GetSysClockFreq+0x204>)
 8007856:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007858:	e0db      	b.n	8007a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800785a:	4b73      	ldr	r3, [pc, #460]	@ (8007a28 <HAL_RCC_GetSysClockFreq+0x208>)
 800785c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800785e:	e0d8      	b.n	8007a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007860:	4b6f      	ldr	r3, [pc, #444]	@ (8007a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007868:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800786a:	4b6d      	ldr	r3, [pc, #436]	@ (8007a20 <HAL_RCC_GetSysClockFreq+0x200>)
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d063      	beq.n	800793e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007876:	4b6a      	ldr	r3, [pc, #424]	@ (8007a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	099b      	lsrs	r3, r3, #6
 800787c:	2200      	movs	r2, #0
 800787e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007880:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007888:	633b      	str	r3, [r7, #48]	@ 0x30
 800788a:	2300      	movs	r3, #0
 800788c:	637b      	str	r3, [r7, #52]	@ 0x34
 800788e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007892:	4622      	mov	r2, r4
 8007894:	462b      	mov	r3, r5
 8007896:	f04f 0000 	mov.w	r0, #0
 800789a:	f04f 0100 	mov.w	r1, #0
 800789e:	0159      	lsls	r1, r3, #5
 80078a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078a4:	0150      	lsls	r0, r2, #5
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	4621      	mov	r1, r4
 80078ac:	1a51      	subs	r1, r2, r1
 80078ae:	6139      	str	r1, [r7, #16]
 80078b0:	4629      	mov	r1, r5
 80078b2:	eb63 0301 	sbc.w	r3, r3, r1
 80078b6:	617b      	str	r3, [r7, #20]
 80078b8:	f04f 0200 	mov.w	r2, #0
 80078bc:	f04f 0300 	mov.w	r3, #0
 80078c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80078c4:	4659      	mov	r1, fp
 80078c6:	018b      	lsls	r3, r1, #6
 80078c8:	4651      	mov	r1, sl
 80078ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80078ce:	4651      	mov	r1, sl
 80078d0:	018a      	lsls	r2, r1, #6
 80078d2:	4651      	mov	r1, sl
 80078d4:	ebb2 0801 	subs.w	r8, r2, r1
 80078d8:	4659      	mov	r1, fp
 80078da:	eb63 0901 	sbc.w	r9, r3, r1
 80078de:	f04f 0200 	mov.w	r2, #0
 80078e2:	f04f 0300 	mov.w	r3, #0
 80078e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80078ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80078ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80078f2:	4690      	mov	r8, r2
 80078f4:	4699      	mov	r9, r3
 80078f6:	4623      	mov	r3, r4
 80078f8:	eb18 0303 	adds.w	r3, r8, r3
 80078fc:	60bb      	str	r3, [r7, #8]
 80078fe:	462b      	mov	r3, r5
 8007900:	eb49 0303 	adc.w	r3, r9, r3
 8007904:	60fb      	str	r3, [r7, #12]
 8007906:	f04f 0200 	mov.w	r2, #0
 800790a:	f04f 0300 	mov.w	r3, #0
 800790e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007912:	4629      	mov	r1, r5
 8007914:	024b      	lsls	r3, r1, #9
 8007916:	4621      	mov	r1, r4
 8007918:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800791c:	4621      	mov	r1, r4
 800791e:	024a      	lsls	r2, r1, #9
 8007920:	4610      	mov	r0, r2
 8007922:	4619      	mov	r1, r3
 8007924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007926:	2200      	movs	r2, #0
 8007928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800792a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800792c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007930:	f7f9 f9aa 	bl	8000c88 <__aeabi_uldivmod>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	4613      	mov	r3, r2
 800793a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800793c:	e058      	b.n	80079f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800793e:	4b38      	ldr	r3, [pc, #224]	@ (8007a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	099b      	lsrs	r3, r3, #6
 8007944:	2200      	movs	r2, #0
 8007946:	4618      	mov	r0, r3
 8007948:	4611      	mov	r1, r2
 800794a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800794e:	623b      	str	r3, [r7, #32]
 8007950:	2300      	movs	r3, #0
 8007952:	627b      	str	r3, [r7, #36]	@ 0x24
 8007954:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007958:	4642      	mov	r2, r8
 800795a:	464b      	mov	r3, r9
 800795c:	f04f 0000 	mov.w	r0, #0
 8007960:	f04f 0100 	mov.w	r1, #0
 8007964:	0159      	lsls	r1, r3, #5
 8007966:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800796a:	0150      	lsls	r0, r2, #5
 800796c:	4602      	mov	r2, r0
 800796e:	460b      	mov	r3, r1
 8007970:	4641      	mov	r1, r8
 8007972:	ebb2 0a01 	subs.w	sl, r2, r1
 8007976:	4649      	mov	r1, r9
 8007978:	eb63 0b01 	sbc.w	fp, r3, r1
 800797c:	f04f 0200 	mov.w	r2, #0
 8007980:	f04f 0300 	mov.w	r3, #0
 8007984:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007988:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800798c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007990:	ebb2 040a 	subs.w	r4, r2, sl
 8007994:	eb63 050b 	sbc.w	r5, r3, fp
 8007998:	f04f 0200 	mov.w	r2, #0
 800799c:	f04f 0300 	mov.w	r3, #0
 80079a0:	00eb      	lsls	r3, r5, #3
 80079a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079a6:	00e2      	lsls	r2, r4, #3
 80079a8:	4614      	mov	r4, r2
 80079aa:	461d      	mov	r5, r3
 80079ac:	4643      	mov	r3, r8
 80079ae:	18e3      	adds	r3, r4, r3
 80079b0:	603b      	str	r3, [r7, #0]
 80079b2:	464b      	mov	r3, r9
 80079b4:	eb45 0303 	adc.w	r3, r5, r3
 80079b8:	607b      	str	r3, [r7, #4]
 80079ba:	f04f 0200 	mov.w	r2, #0
 80079be:	f04f 0300 	mov.w	r3, #0
 80079c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80079c6:	4629      	mov	r1, r5
 80079c8:	028b      	lsls	r3, r1, #10
 80079ca:	4621      	mov	r1, r4
 80079cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80079d0:	4621      	mov	r1, r4
 80079d2:	028a      	lsls	r2, r1, #10
 80079d4:	4610      	mov	r0, r2
 80079d6:	4619      	mov	r1, r3
 80079d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079da:	2200      	movs	r2, #0
 80079dc:	61bb      	str	r3, [r7, #24]
 80079de:	61fa      	str	r2, [r7, #28]
 80079e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079e4:	f7f9 f950 	bl	8000c88 <__aeabi_uldivmod>
 80079e8:	4602      	mov	r2, r0
 80079ea:	460b      	mov	r3, r1
 80079ec:	4613      	mov	r3, r2
 80079ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80079f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007a20 <HAL_RCC_GetSysClockFreq+0x200>)
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	0c1b      	lsrs	r3, r3, #16
 80079f6:	f003 0303 	and.w	r3, r3, #3
 80079fa:	3301      	adds	r3, #1
 80079fc:	005b      	lsls	r3, r3, #1
 80079fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007a00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007a0a:	e002      	b.n	8007a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a0c:	4b05      	ldr	r3, [pc, #20]	@ (8007a24 <HAL_RCC_GetSysClockFreq+0x204>)
 8007a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3750      	adds	r7, #80	@ 0x50
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a1e:	bf00      	nop
 8007a20:	40023800 	.word	0x40023800
 8007a24:	00f42400 	.word	0x00f42400
 8007a28:	007a1200 	.word	0x007a1200

08007a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a30:	4b03      	ldr	r3, [pc, #12]	@ (8007a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a32:	681b      	ldr	r3, [r3, #0]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	20000004 	.word	0x20000004

08007a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a48:	f7ff fff0 	bl	8007a2c <HAL_RCC_GetHCLKFreq>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	4b05      	ldr	r3, [pc, #20]	@ (8007a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	0a9b      	lsrs	r3, r3, #10
 8007a54:	f003 0307 	and.w	r3, r3, #7
 8007a58:	4903      	ldr	r1, [pc, #12]	@ (8007a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a5a:	5ccb      	ldrb	r3, [r1, r3]
 8007a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	40023800 	.word	0x40023800
 8007a68:	08010380 	.word	0x08010380

08007a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007a70:	f7ff ffdc 	bl	8007a2c <HAL_RCC_GetHCLKFreq>
 8007a74:	4602      	mov	r2, r0
 8007a76:	4b05      	ldr	r3, [pc, #20]	@ (8007a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	0b5b      	lsrs	r3, r3, #13
 8007a7c:	f003 0307 	and.w	r3, r3, #7
 8007a80:	4903      	ldr	r1, [pc, #12]	@ (8007a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a82:	5ccb      	ldrb	r3, [r1, r3]
 8007a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	40023800 	.word	0x40023800
 8007a90:	08010380 	.word	0x08010380

08007a94 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d105      	bne.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d035      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007abc:	4b62      	ldr	r3, [pc, #392]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ac2:	f7fb f895 	bl	8002bf0 <HAL_GetTick>
 8007ac6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ac8:	e008      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007aca:	f7fb f891 	bl	8002bf0 <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d901      	bls.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e0b0      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007adc:	4b5b      	ldr	r3, [pc, #364]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1f0      	bne.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	019a      	lsls	r2, r3, #6
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	071b      	lsls	r3, r3, #28
 8007af4:	4955      	ldr	r1, [pc, #340]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007afc:	4b52      	ldr	r3, [pc, #328]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007afe:	2201      	movs	r2, #1
 8007b00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b02:	f7fb f875 	bl	8002bf0 <HAL_GetTick>
 8007b06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b08:	e008      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007b0a:	f7fb f871 	bl	8002bf0 <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d901      	bls.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e090      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b1c:	4b4b      	ldr	r3, [pc, #300]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d0f0      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0302 	and.w	r3, r3, #2
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 8083 	beq.w	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]
 8007b3a:	4b44      	ldr	r3, [pc, #272]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b3e:	4a43      	ldr	r2, [pc, #268]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b46:	4b41      	ldr	r3, [pc, #260]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b4e:	60fb      	str	r3, [r7, #12]
 8007b50:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007b52:	4b3f      	ldr	r3, [pc, #252]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a3e      	ldr	r2, [pc, #248]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b5c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b5e:	f7fb f847 	bl	8002bf0 <HAL_GetTick>
 8007b62:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007b64:	e008      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b66:	f7fb f843 	bl	8002bf0 <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d901      	bls.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e062      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007b78:	4b35      	ldr	r3, [pc, #212]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d0f0      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b84:	4b31      	ldr	r3, [pc, #196]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b8c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d02f      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d028      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ba6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007baa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007bac:	4b29      	ldr	r3, [pc, #164]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007bae:	2201      	movs	r2, #1
 8007bb0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007bb2:	4b28      	ldr	r3, [pc, #160]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007bb8:	4a24      	ldr	r2, [pc, #144]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007bbe:	4b23      	ldr	r3, [pc, #140]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d114      	bne.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007bca:	f7fb f811 	bl	8002bf0 <HAL_GetTick>
 8007bce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bd0:	e00a      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bd2:	f7fb f80d 	bl	8002bf0 <HAL_GetTick>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d901      	bls.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e02a      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007be8:	4b18      	ldr	r3, [pc, #96]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bec:	f003 0302 	and.w	r3, r3, #2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d0ee      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c00:	d10d      	bne.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007c02:	4b12      	ldr	r3, [pc, #72]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007c12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c16:	490d      	ldr	r1, [pc, #52]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	608b      	str	r3, [r1, #8]
 8007c1c:	e005      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	4a0a      	ldr	r2, [pc, #40]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c24:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007c28:	6093      	str	r3, [r2, #8]
 8007c2a:	4b08      	ldr	r3, [pc, #32]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c2c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c36:	4905      	ldr	r1, [pc, #20]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3718      	adds	r7, #24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	42470068 	.word	0x42470068
 8007c4c:	40023800 	.word	0x40023800
 8007c50:	40007000 	.word	0x40007000
 8007c54:	42470e40 	.word	0x42470e40

08007c58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007c60:	2300      	movs	r3, #0
 8007c62:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007c64:	2300      	movs	r3, #0
 8007c66:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d13f      	bne.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007c76:	4b24      	ldr	r3, [pc, #144]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d006      	beq.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c8c:	d12f      	bne.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007c90:	617b      	str	r3, [r7, #20]
          break;
 8007c92:	e02f      	b.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007c94:	4b1c      	ldr	r3, [pc, #112]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ca0:	d108      	bne.n	8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007ca2:	4b19      	ldr	r3, [pc, #100]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007caa:	4a19      	ldr	r2, [pc, #100]	@ (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb0:	613b      	str	r3, [r7, #16]
 8007cb2:	e007      	b.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007cb4:	4b14      	ldr	r3, [pc, #80]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cbc:	4a15      	ldr	r2, [pc, #84]	@ (8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007cc4:	4b10      	ldr	r3, [pc, #64]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cca:	099b      	lsrs	r3, r3, #6
 8007ccc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	fb02 f303 	mul.w	r3, r2, r3
 8007cd6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cde:	0f1b      	lsrs	r3, r3, #28
 8007ce0:	f003 0307 	and.w	r3, r3, #7
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cea:	617b      	str	r3, [r7, #20]
          break;
 8007cec:	e002      	b.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	617b      	str	r3, [r7, #20]
          break;
 8007cf2:	bf00      	nop
        }
      }
      break;
 8007cf4:	e000      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8007cf6:	bf00      	nop
    }
  }
  return frequency;
 8007cf8:	697b      	ldr	r3, [r7, #20]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	40023800 	.word	0x40023800
 8007d0c:	00bb8000 	.word	0x00bb8000
 8007d10:	007a1200 	.word	0x007a1200
 8007d14:	00f42400 	.word	0x00f42400

08007d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e041      	b.n	8007dae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d106      	bne.n	8007d44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7fa fd00 	bl	8002744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2202      	movs	r2, #2
 8007d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	3304      	adds	r3, #4
 8007d54:	4619      	mov	r1, r3
 8007d56:	4610      	mov	r0, r2
 8007d58:	f000 fa7a 	bl	8008250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
	...

08007db8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d001      	beq.n	8007dd0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e046      	b.n	8007e5e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a23      	ldr	r2, [pc, #140]	@ (8007e6c <HAL_TIM_Base_Start+0xb4>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d022      	beq.n	8007e28 <HAL_TIM_Base_Start+0x70>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dea:	d01d      	beq.n	8007e28 <HAL_TIM_Base_Start+0x70>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a1f      	ldr	r2, [pc, #124]	@ (8007e70 <HAL_TIM_Base_Start+0xb8>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d018      	beq.n	8007e28 <HAL_TIM_Base_Start+0x70>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8007e74 <HAL_TIM_Base_Start+0xbc>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d013      	beq.n	8007e28 <HAL_TIM_Base_Start+0x70>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a1c      	ldr	r2, [pc, #112]	@ (8007e78 <HAL_TIM_Base_Start+0xc0>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d00e      	beq.n	8007e28 <HAL_TIM_Base_Start+0x70>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8007e7c <HAL_TIM_Base_Start+0xc4>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d009      	beq.n	8007e28 <HAL_TIM_Base_Start+0x70>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a19      	ldr	r2, [pc, #100]	@ (8007e80 <HAL_TIM_Base_Start+0xc8>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d004      	beq.n	8007e28 <HAL_TIM_Base_Start+0x70>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a18      	ldr	r2, [pc, #96]	@ (8007e84 <HAL_TIM_Base_Start+0xcc>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d111      	bne.n	8007e4c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f003 0307 	and.w	r3, r3, #7
 8007e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2b06      	cmp	r3, #6
 8007e38:	d010      	beq.n	8007e5c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f042 0201 	orr.w	r2, r2, #1
 8007e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e4a:	e007      	b.n	8007e5c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 0201 	orr.w	r2, r2, #1
 8007e5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	40010000 	.word	0x40010000
 8007e70:	40000400 	.word	0x40000400
 8007e74:	40000800 	.word	0x40000800
 8007e78:	40000c00 	.word	0x40000c00
 8007e7c:	40010400 	.word	0x40010400
 8007e80:	40014000 	.word	0x40014000
 8007e84:	40001800 	.word	0x40001800

08007e88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e041      	b.n	8007f1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d106      	bne.n	8007eb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f839 	bl	8007f26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	3304      	adds	r3, #4
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	4610      	mov	r0, r2
 8007ec8:	f000 f9c2 	bl	8008250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b083      	sub	sp, #12
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f2e:	bf00      	nop
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
	...

08007f3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d101      	bne.n	8007f5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f56:	2302      	movs	r3, #2
 8007f58:	e0ae      	b.n	80080b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b0c      	cmp	r3, #12
 8007f66:	f200 809f 	bhi.w	80080a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f70:	08007fa5 	.word	0x08007fa5
 8007f74:	080080a9 	.word	0x080080a9
 8007f78:	080080a9 	.word	0x080080a9
 8007f7c:	080080a9 	.word	0x080080a9
 8007f80:	08007fe5 	.word	0x08007fe5
 8007f84:	080080a9 	.word	0x080080a9
 8007f88:	080080a9 	.word	0x080080a9
 8007f8c:	080080a9 	.word	0x080080a9
 8007f90:	08008027 	.word	0x08008027
 8007f94:	080080a9 	.word	0x080080a9
 8007f98:	080080a9 	.word	0x080080a9
 8007f9c:	080080a9 	.word	0x080080a9
 8007fa0:	08008067 	.word	0x08008067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68b9      	ldr	r1, [r7, #8]
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 f9fc 	bl	80083a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	699a      	ldr	r2, [r3, #24]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f042 0208 	orr.w	r2, r2, #8
 8007fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	699a      	ldr	r2, [r3, #24]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 0204 	bic.w	r2, r2, #4
 8007fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6999      	ldr	r1, [r3, #24]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	691a      	ldr	r2, [r3, #16]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	619a      	str	r2, [r3, #24]
      break;
 8007fe2:	e064      	b.n	80080ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68b9      	ldr	r1, [r7, #8]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f000 fa4c 	bl	8008488 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	699a      	ldr	r2, [r3, #24]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	699a      	ldr	r2, [r3, #24]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800800e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	6999      	ldr	r1, [r3, #24]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	021a      	lsls	r2, r3, #8
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	430a      	orrs	r2, r1
 8008022:	619a      	str	r2, [r3, #24]
      break;
 8008024:	e043      	b.n	80080ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68b9      	ldr	r1, [r7, #8]
 800802c:	4618      	mov	r0, r3
 800802e:	f000 faa1 	bl	8008574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	69da      	ldr	r2, [r3, #28]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f042 0208 	orr.w	r2, r2, #8
 8008040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69da      	ldr	r2, [r3, #28]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 0204 	bic.w	r2, r2, #4
 8008050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	69d9      	ldr	r1, [r3, #28]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	691a      	ldr	r2, [r3, #16]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	430a      	orrs	r2, r1
 8008062:	61da      	str	r2, [r3, #28]
      break;
 8008064:	e023      	b.n	80080ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68b9      	ldr	r1, [r7, #8]
 800806c:	4618      	mov	r0, r3
 800806e:	f000 faf5 	bl	800865c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	69da      	ldr	r2, [r3, #28]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	69da      	ldr	r2, [r3, #28]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	69d9      	ldr	r1, [r3, #28]
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	021a      	lsls	r2, r3, #8
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	61da      	str	r2, [r3, #28]
      break;
 80080a6:	e002      	b.n	80080ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	75fb      	strb	r3, [r7, #23]
      break;
 80080ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3718      	adds	r7, #24
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d101      	bne.n	80080dc <HAL_TIM_ConfigClockSource+0x1c>
 80080d8:	2302      	movs	r3, #2
 80080da:	e0b4      	b.n	8008246 <HAL_TIM_ConfigClockSource+0x186>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2202      	movs	r2, #2
 80080e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80080fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008102:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008114:	d03e      	beq.n	8008194 <HAL_TIM_ConfigClockSource+0xd4>
 8008116:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800811a:	f200 8087 	bhi.w	800822c <HAL_TIM_ConfigClockSource+0x16c>
 800811e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008122:	f000 8086 	beq.w	8008232 <HAL_TIM_ConfigClockSource+0x172>
 8008126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800812a:	d87f      	bhi.n	800822c <HAL_TIM_ConfigClockSource+0x16c>
 800812c:	2b70      	cmp	r3, #112	@ 0x70
 800812e:	d01a      	beq.n	8008166 <HAL_TIM_ConfigClockSource+0xa6>
 8008130:	2b70      	cmp	r3, #112	@ 0x70
 8008132:	d87b      	bhi.n	800822c <HAL_TIM_ConfigClockSource+0x16c>
 8008134:	2b60      	cmp	r3, #96	@ 0x60
 8008136:	d050      	beq.n	80081da <HAL_TIM_ConfigClockSource+0x11a>
 8008138:	2b60      	cmp	r3, #96	@ 0x60
 800813a:	d877      	bhi.n	800822c <HAL_TIM_ConfigClockSource+0x16c>
 800813c:	2b50      	cmp	r3, #80	@ 0x50
 800813e:	d03c      	beq.n	80081ba <HAL_TIM_ConfigClockSource+0xfa>
 8008140:	2b50      	cmp	r3, #80	@ 0x50
 8008142:	d873      	bhi.n	800822c <HAL_TIM_ConfigClockSource+0x16c>
 8008144:	2b40      	cmp	r3, #64	@ 0x40
 8008146:	d058      	beq.n	80081fa <HAL_TIM_ConfigClockSource+0x13a>
 8008148:	2b40      	cmp	r3, #64	@ 0x40
 800814a:	d86f      	bhi.n	800822c <HAL_TIM_ConfigClockSource+0x16c>
 800814c:	2b30      	cmp	r3, #48	@ 0x30
 800814e:	d064      	beq.n	800821a <HAL_TIM_ConfigClockSource+0x15a>
 8008150:	2b30      	cmp	r3, #48	@ 0x30
 8008152:	d86b      	bhi.n	800822c <HAL_TIM_ConfigClockSource+0x16c>
 8008154:	2b20      	cmp	r3, #32
 8008156:	d060      	beq.n	800821a <HAL_TIM_ConfigClockSource+0x15a>
 8008158:	2b20      	cmp	r3, #32
 800815a:	d867      	bhi.n	800822c <HAL_TIM_ConfigClockSource+0x16c>
 800815c:	2b00      	cmp	r3, #0
 800815e:	d05c      	beq.n	800821a <HAL_TIM_ConfigClockSource+0x15a>
 8008160:	2b10      	cmp	r3, #16
 8008162:	d05a      	beq.n	800821a <HAL_TIM_ConfigClockSource+0x15a>
 8008164:	e062      	b.n	800822c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008176:	f000 fb41 	bl	80087fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	609a      	str	r2, [r3, #8]
      break;
 8008192:	e04f      	b.n	8008234 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80081a4:	f000 fb2a 	bl	80087fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	689a      	ldr	r2, [r3, #8]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80081b6:	609a      	str	r2, [r3, #8]
      break;
 80081b8:	e03c      	b.n	8008234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081c6:	461a      	mov	r2, r3
 80081c8:	f000 fa9e 	bl	8008708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2150      	movs	r1, #80	@ 0x50
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 faf7 	bl	80087c6 <TIM_ITRx_SetConfig>
      break;
 80081d8:	e02c      	b.n	8008234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081e6:	461a      	mov	r2, r3
 80081e8:	f000 fabd 	bl	8008766 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2160      	movs	r1, #96	@ 0x60
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 fae7 	bl	80087c6 <TIM_ITRx_SetConfig>
      break;
 80081f8:	e01c      	b.n	8008234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008206:	461a      	mov	r2, r3
 8008208:	f000 fa7e 	bl	8008708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2140      	movs	r1, #64	@ 0x40
 8008212:	4618      	mov	r0, r3
 8008214:	f000 fad7 	bl	80087c6 <TIM_ITRx_SetConfig>
      break;
 8008218:	e00c      	b.n	8008234 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4619      	mov	r1, r3
 8008224:	4610      	mov	r0, r2
 8008226:	f000 face 	bl	80087c6 <TIM_ITRx_SetConfig>
      break;
 800822a:	e003      	b.n	8008234 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	73fb      	strb	r3, [r7, #15]
      break;
 8008230:	e000      	b.n	8008234 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008244:	7bfb      	ldrb	r3, [r7, #15]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
	...

08008250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a46      	ldr	r2, [pc, #280]	@ (800837c <TIM_Base_SetConfig+0x12c>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d013      	beq.n	8008290 <TIM_Base_SetConfig+0x40>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800826e:	d00f      	beq.n	8008290 <TIM_Base_SetConfig+0x40>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a43      	ldr	r2, [pc, #268]	@ (8008380 <TIM_Base_SetConfig+0x130>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d00b      	beq.n	8008290 <TIM_Base_SetConfig+0x40>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a42      	ldr	r2, [pc, #264]	@ (8008384 <TIM_Base_SetConfig+0x134>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d007      	beq.n	8008290 <TIM_Base_SetConfig+0x40>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a41      	ldr	r2, [pc, #260]	@ (8008388 <TIM_Base_SetConfig+0x138>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d003      	beq.n	8008290 <TIM_Base_SetConfig+0x40>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a40      	ldr	r2, [pc, #256]	@ (800838c <TIM_Base_SetConfig+0x13c>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d108      	bne.n	80082a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a35      	ldr	r2, [pc, #212]	@ (800837c <TIM_Base_SetConfig+0x12c>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d02b      	beq.n	8008302 <TIM_Base_SetConfig+0xb2>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082b0:	d027      	beq.n	8008302 <TIM_Base_SetConfig+0xb2>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a32      	ldr	r2, [pc, #200]	@ (8008380 <TIM_Base_SetConfig+0x130>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d023      	beq.n	8008302 <TIM_Base_SetConfig+0xb2>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a31      	ldr	r2, [pc, #196]	@ (8008384 <TIM_Base_SetConfig+0x134>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d01f      	beq.n	8008302 <TIM_Base_SetConfig+0xb2>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a30      	ldr	r2, [pc, #192]	@ (8008388 <TIM_Base_SetConfig+0x138>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d01b      	beq.n	8008302 <TIM_Base_SetConfig+0xb2>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a2f      	ldr	r2, [pc, #188]	@ (800838c <TIM_Base_SetConfig+0x13c>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d017      	beq.n	8008302 <TIM_Base_SetConfig+0xb2>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a2e      	ldr	r2, [pc, #184]	@ (8008390 <TIM_Base_SetConfig+0x140>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d013      	beq.n	8008302 <TIM_Base_SetConfig+0xb2>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a2d      	ldr	r2, [pc, #180]	@ (8008394 <TIM_Base_SetConfig+0x144>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d00f      	beq.n	8008302 <TIM_Base_SetConfig+0xb2>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a2c      	ldr	r2, [pc, #176]	@ (8008398 <TIM_Base_SetConfig+0x148>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d00b      	beq.n	8008302 <TIM_Base_SetConfig+0xb2>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a2b      	ldr	r2, [pc, #172]	@ (800839c <TIM_Base_SetConfig+0x14c>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d007      	beq.n	8008302 <TIM_Base_SetConfig+0xb2>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a2a      	ldr	r2, [pc, #168]	@ (80083a0 <TIM_Base_SetConfig+0x150>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d003      	beq.n	8008302 <TIM_Base_SetConfig+0xb2>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a29      	ldr	r2, [pc, #164]	@ (80083a4 <TIM_Base_SetConfig+0x154>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d108      	bne.n	8008314 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	4313      	orrs	r3, r2
 8008312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	4313      	orrs	r3, r2
 8008320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	689a      	ldr	r2, [r3, #8]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a10      	ldr	r2, [pc, #64]	@ (800837c <TIM_Base_SetConfig+0x12c>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d003      	beq.n	8008348 <TIM_Base_SetConfig+0xf8>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a12      	ldr	r2, [pc, #72]	@ (800838c <TIM_Base_SetConfig+0x13c>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d103      	bne.n	8008350 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	691a      	ldr	r2, [r3, #16]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b01      	cmp	r3, #1
 8008360:	d105      	bne.n	800836e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	f023 0201 	bic.w	r2, r3, #1
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	611a      	str	r2, [r3, #16]
  }
}
 800836e:	bf00      	nop
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	40010000 	.word	0x40010000
 8008380:	40000400 	.word	0x40000400
 8008384:	40000800 	.word	0x40000800
 8008388:	40000c00 	.word	0x40000c00
 800838c:	40010400 	.word	0x40010400
 8008390:	40014000 	.word	0x40014000
 8008394:	40014400 	.word	0x40014400
 8008398:	40014800 	.word	0x40014800
 800839c:	40001800 	.word	0x40001800
 80083a0:	40001c00 	.word	0x40001c00
 80083a4:	40002000 	.word	0x40002000

080083a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b087      	sub	sp, #28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a1b      	ldr	r3, [r3, #32]
 80083bc:	f023 0201 	bic.w	r2, r3, #1
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f023 0303 	bic.w	r3, r3, #3
 80083de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	f023 0302 	bic.w	r3, r3, #2
 80083f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a20      	ldr	r2, [pc, #128]	@ (8008480 <TIM_OC1_SetConfig+0xd8>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d003      	beq.n	800840c <TIM_OC1_SetConfig+0x64>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a1f      	ldr	r2, [pc, #124]	@ (8008484 <TIM_OC1_SetConfig+0xdc>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d10c      	bne.n	8008426 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f023 0308 	bic.w	r3, r3, #8
 8008412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	697a      	ldr	r2, [r7, #20]
 800841a:	4313      	orrs	r3, r2
 800841c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f023 0304 	bic.w	r3, r3, #4
 8008424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a15      	ldr	r2, [pc, #84]	@ (8008480 <TIM_OC1_SetConfig+0xd8>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d003      	beq.n	8008436 <TIM_OC1_SetConfig+0x8e>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a14      	ldr	r2, [pc, #80]	@ (8008484 <TIM_OC1_SetConfig+0xdc>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d111      	bne.n	800845a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800843c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	4313      	orrs	r3, r2
 800844e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	4313      	orrs	r3, r2
 8008458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	685a      	ldr	r2, [r3, #4]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	621a      	str	r2, [r3, #32]
}
 8008474:	bf00      	nop
 8008476:	371c      	adds	r7, #28
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	40010000 	.word	0x40010000
 8008484:	40010400 	.word	0x40010400

08008488 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a1b      	ldr	r3, [r3, #32]
 800849c:	f023 0210 	bic.w	r2, r3, #16
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	699b      	ldr	r3, [r3, #24]
 80084ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	021b      	lsls	r3, r3, #8
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	f023 0320 	bic.w	r3, r3, #32
 80084d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	011b      	lsls	r3, r3, #4
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	4313      	orrs	r3, r2
 80084de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a22      	ldr	r2, [pc, #136]	@ (800856c <TIM_OC2_SetConfig+0xe4>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d003      	beq.n	80084f0 <TIM_OC2_SetConfig+0x68>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a21      	ldr	r2, [pc, #132]	@ (8008570 <TIM_OC2_SetConfig+0xe8>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d10d      	bne.n	800850c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	011b      	lsls	r3, r3, #4
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	4313      	orrs	r3, r2
 8008502:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800850a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a17      	ldr	r2, [pc, #92]	@ (800856c <TIM_OC2_SetConfig+0xe4>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d003      	beq.n	800851c <TIM_OC2_SetConfig+0x94>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a16      	ldr	r2, [pc, #88]	@ (8008570 <TIM_OC2_SetConfig+0xe8>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d113      	bne.n	8008544 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008522:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800852a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	695b      	ldr	r3, [r3, #20]
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	4313      	orrs	r3, r2
 8008536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	693a      	ldr	r2, [r7, #16]
 8008540:	4313      	orrs	r3, r2
 8008542:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	621a      	str	r2, [r3, #32]
}
 800855e:	bf00      	nop
 8008560:	371c      	adds	r7, #28
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	40010000 	.word	0x40010000
 8008570:	40010400 	.word	0x40010400

08008574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008574:	b480      	push	{r7}
 8008576:	b087      	sub	sp, #28
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a1b      	ldr	r3, [r3, #32]
 8008588:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	69db      	ldr	r3, [r3, #28]
 800859a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f023 0303 	bic.w	r3, r3, #3
 80085aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80085bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	021b      	lsls	r3, r3, #8
 80085c4:	697a      	ldr	r2, [r7, #20]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a21      	ldr	r2, [pc, #132]	@ (8008654 <TIM_OC3_SetConfig+0xe0>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d003      	beq.n	80085da <TIM_OC3_SetConfig+0x66>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a20      	ldr	r2, [pc, #128]	@ (8008658 <TIM_OC3_SetConfig+0xe4>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d10d      	bne.n	80085f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80085e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	021b      	lsls	r3, r3, #8
 80085e8:	697a      	ldr	r2, [r7, #20]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80085f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a16      	ldr	r2, [pc, #88]	@ (8008654 <TIM_OC3_SetConfig+0xe0>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d003      	beq.n	8008606 <TIM_OC3_SetConfig+0x92>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a15      	ldr	r2, [pc, #84]	@ (8008658 <TIM_OC3_SetConfig+0xe4>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d113      	bne.n	800862e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800860c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	011b      	lsls	r3, r3, #4
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	4313      	orrs	r3, r2
 8008620:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	011b      	lsls	r3, r3, #4
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	4313      	orrs	r3, r2
 800862c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	685a      	ldr	r2, [r3, #4]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	621a      	str	r2, [r3, #32]
}
 8008648:	bf00      	nop
 800864a:	371c      	adds	r7, #28
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr
 8008654:	40010000 	.word	0x40010000
 8008658:	40010400 	.word	0x40010400

0800865c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a1b      	ldr	r3, [r3, #32]
 8008670:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800868a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	021b      	lsls	r3, r3, #8
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	4313      	orrs	r3, r2
 800869e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80086a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	031b      	lsls	r3, r3, #12
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a12      	ldr	r2, [pc, #72]	@ (8008700 <TIM_OC4_SetConfig+0xa4>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d003      	beq.n	80086c4 <TIM_OC4_SetConfig+0x68>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a11      	ldr	r2, [pc, #68]	@ (8008704 <TIM_OC4_SetConfig+0xa8>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d109      	bne.n	80086d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	019b      	lsls	r3, r3, #6
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	621a      	str	r2, [r3, #32]
}
 80086f2:	bf00      	nop
 80086f4:	371c      	adds	r7, #28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	40010000 	.word	0x40010000
 8008704:	40010400 	.word	0x40010400

08008708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008708:	b480      	push	{r7}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a1b      	ldr	r3, [r3, #32]
 8008718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	f023 0201 	bic.w	r2, r3, #1
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	011b      	lsls	r3, r3, #4
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	4313      	orrs	r3, r2
 800873c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f023 030a 	bic.w	r3, r3, #10
 8008744:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	4313      	orrs	r3, r2
 800874c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	621a      	str	r2, [r3, #32]
}
 800875a:	bf00      	nop
 800875c:	371c      	adds	r7, #28
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008766:	b480      	push	{r7}
 8008768:	b087      	sub	sp, #28
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	60b9      	str	r1, [r7, #8]
 8008770:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6a1b      	ldr	r3, [r3, #32]
 800877c:	f023 0210 	bic.w	r2, r3, #16
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008790:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	031b      	lsls	r3, r3, #12
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	4313      	orrs	r3, r2
 800879a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80087a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	011b      	lsls	r3, r3, #4
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	621a      	str	r2, [r3, #32]
}
 80087ba:	bf00      	nop
 80087bc:	371c      	adds	r7, #28
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b085      	sub	sp, #20
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	f043 0307 	orr.w	r3, r3, #7
 80087e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	609a      	str	r2, [r3, #8]
}
 80087f0:	bf00      	nop
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b087      	sub	sp, #28
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
 8008808:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008816:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	021a      	lsls	r2, r3, #8
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	431a      	orrs	r2, r3
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	4313      	orrs	r3, r2
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	4313      	orrs	r3, r2
 8008828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	609a      	str	r2, [r3, #8]
}
 8008830:	bf00      	nop
 8008832:	371c      	adds	r7, #28
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800884c:	2b01      	cmp	r3, #1
 800884e:	d101      	bne.n	8008854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008850:	2302      	movs	r3, #2
 8008852:	e05a      	b.n	800890a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2202      	movs	r2, #2
 8008860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800887a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	4313      	orrs	r3, r2
 8008884:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a21      	ldr	r2, [pc, #132]	@ (8008918 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d022      	beq.n	80088de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088a0:	d01d      	beq.n	80088de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a1d      	ldr	r2, [pc, #116]	@ (800891c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d018      	beq.n	80088de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a1b      	ldr	r2, [pc, #108]	@ (8008920 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d013      	beq.n	80088de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a1a      	ldr	r2, [pc, #104]	@ (8008924 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d00e      	beq.n	80088de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a18      	ldr	r2, [pc, #96]	@ (8008928 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d009      	beq.n	80088de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a17      	ldr	r2, [pc, #92]	@ (800892c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d004      	beq.n	80088de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a15      	ldr	r2, [pc, #84]	@ (8008930 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d10c      	bne.n	80088f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	40010000 	.word	0x40010000
 800891c:	40000400 	.word	0x40000400
 8008920:	40000800 	.word	0x40000800
 8008924:	40000c00 	.word	0x40000c00
 8008928:	40010400 	.word	0x40010400
 800892c:	40014000 	.word	0x40014000
 8008930:	40001800 	.word	0x40001800

08008934 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d101      	bne.n	8008946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	e042      	b.n	80089cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800894c:	b2db      	uxtb	r3, r3
 800894e:	2b00      	cmp	r3, #0
 8008950:	d106      	bne.n	8008960 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7f9 ff12 	bl	8002784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2224      	movs	r2, #36	@ 0x24
 8008964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68da      	ldr	r2, [r3, #12]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008976:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f973 	bl	8008c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	691a      	ldr	r2, [r3, #16]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800898c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	695a      	ldr	r2, [r3, #20]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800899c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68da      	ldr	r2, [r3, #12]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80089ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2220      	movs	r2, #32
 80089b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2220      	movs	r2, #32
 80089c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b08a      	sub	sp, #40	@ 0x28
 80089d8:	af02      	add	r7, sp, #8
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	603b      	str	r3, [r7, #0]
 80089e0:	4613      	mov	r3, r2
 80089e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80089e4:	2300      	movs	r3, #0
 80089e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b20      	cmp	r3, #32
 80089f2:	d175      	bne.n	8008ae0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d002      	beq.n	8008a00 <HAL_UART_Transmit+0x2c>
 80089fa:	88fb      	ldrh	r3, [r7, #6]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e06e      	b.n	8008ae2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2200      	movs	r2, #0
 8008a08:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2221      	movs	r2, #33	@ 0x21
 8008a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a12:	f7fa f8ed 	bl	8002bf0 <HAL_GetTick>
 8008a16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	88fa      	ldrh	r2, [r7, #6]
 8008a1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	88fa      	ldrh	r2, [r7, #6]
 8008a22:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a2c:	d108      	bne.n	8008a40 <HAL_UART_Transmit+0x6c>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d104      	bne.n	8008a40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008a36:	2300      	movs	r3, #0
 8008a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	61bb      	str	r3, [r7, #24]
 8008a3e:	e003      	b.n	8008a48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a44:	2300      	movs	r3, #0
 8008a46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a48:	e02e      	b.n	8008aa8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	2200      	movs	r2, #0
 8008a52:	2180      	movs	r1, #128	@ 0x80
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f000 f848 	bl	8008aea <UART_WaitOnFlagUntilTimeout>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d005      	beq.n	8008a6c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2220      	movs	r2, #32
 8008a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e03a      	b.n	8008ae2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10b      	bne.n	8008a8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	461a      	mov	r2, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	3302      	adds	r3, #2
 8008a86:	61bb      	str	r3, [r7, #24]
 8008a88:	e007      	b.n	8008a9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	781a      	ldrb	r2, [r3, #0]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	3301      	adds	r3, #1
 8008a98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1cb      	bne.n	8008a4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	2140      	movs	r1, #64	@ 0x40
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f000 f814 	bl	8008aea <UART_WaitOnFlagUntilTimeout>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d005      	beq.n	8008ad4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2220      	movs	r2, #32
 8008acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e006      	b.n	8008ae2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2220      	movs	r2, #32
 8008ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	e000      	b.n	8008ae2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008ae0:	2302      	movs	r3, #2
  }
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3720      	adds	r7, #32
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b086      	sub	sp, #24
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	60f8      	str	r0, [r7, #12]
 8008af2:	60b9      	str	r1, [r7, #8]
 8008af4:	603b      	str	r3, [r7, #0]
 8008af6:	4613      	mov	r3, r2
 8008af8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008afa:	e03b      	b.n	8008b74 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b02:	d037      	beq.n	8008b74 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b04:	f7fa f874 	bl	8002bf0 <HAL_GetTick>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	6a3a      	ldr	r2, [r7, #32]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d302      	bcc.n	8008b1a <UART_WaitOnFlagUntilTimeout+0x30>
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d101      	bne.n	8008b1e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e03a      	b.n	8008b94 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	f003 0304 	and.w	r3, r3, #4
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d023      	beq.n	8008b74 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2b80      	cmp	r3, #128	@ 0x80
 8008b30:	d020      	beq.n	8008b74 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2b40      	cmp	r3, #64	@ 0x40
 8008b36:	d01d      	beq.n	8008b74 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 0308 	and.w	r3, r3, #8
 8008b42:	2b08      	cmp	r3, #8
 8008b44:	d116      	bne.n	8008b74 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008b46:	2300      	movs	r3, #0
 8008b48:	617b      	str	r3, [r7, #20]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	617b      	str	r3, [r7, #20]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	617b      	str	r3, [r7, #20]
 8008b5a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 f81d 	bl	8008b9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2208      	movs	r2, #8
 8008b66:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e00f      	b.n	8008b94 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	bf0c      	ite	eq
 8008b84:	2301      	moveq	r3, #1
 8008b86:	2300      	movne	r3, #0
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	79fb      	ldrb	r3, [r7, #7]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d0b4      	beq.n	8008afc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3718      	adds	r7, #24
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b095      	sub	sp, #84	@ 0x54
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	330c      	adds	r3, #12
 8008baa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bae:	e853 3f00 	ldrex	r3, [r3]
 8008bb2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	330c      	adds	r3, #12
 8008bc2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008bc4:	643a      	str	r2, [r7, #64]	@ 0x40
 8008bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008bca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008bcc:	e841 2300 	strex	r3, r2, [r1]
 8008bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1e5      	bne.n	8008ba4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	3314      	adds	r3, #20
 8008bde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be0:	6a3b      	ldr	r3, [r7, #32]
 8008be2:	e853 3f00 	ldrex	r3, [r3]
 8008be6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	f023 0301 	bic.w	r3, r3, #1
 8008bee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	3314      	adds	r3, #20
 8008bf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c00:	e841 2300 	strex	r3, r2, [r1]
 8008c04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1e5      	bne.n	8008bd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d119      	bne.n	8008c48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	330c      	adds	r3, #12
 8008c1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	e853 3f00 	ldrex	r3, [r3]
 8008c22:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	f023 0310 	bic.w	r3, r3, #16
 8008c2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	330c      	adds	r3, #12
 8008c32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c34:	61ba      	str	r2, [r7, #24]
 8008c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c38:	6979      	ldr	r1, [r7, #20]
 8008c3a:	69ba      	ldr	r2, [r7, #24]
 8008c3c:	e841 2300 	strex	r3, r2, [r1]
 8008c40:	613b      	str	r3, [r7, #16]
   return(result);
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1e5      	bne.n	8008c14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2220      	movs	r2, #32
 8008c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008c56:	bf00      	nop
 8008c58:	3754      	adds	r7, #84	@ 0x54
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
	...

08008c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c68:	b0c0      	sub	sp, #256	@ 0x100
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c80:	68d9      	ldr	r1, [r3, #12]
 8008c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	ea40 0301 	orr.w	r3, r0, r1
 8008c8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c92:	689a      	ldr	r2, [r3, #8]
 8008c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	431a      	orrs	r2, r3
 8008c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ca0:	695b      	ldr	r3, [r3, #20]
 8008ca2:	431a      	orrs	r2, r3
 8008ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ca8:	69db      	ldr	r3, [r3, #28]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008cbc:	f021 010c 	bic.w	r1, r1, #12
 8008cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008cca:	430b      	orrs	r3, r1
 8008ccc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	695b      	ldr	r3, [r3, #20]
 8008cd6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cde:	6999      	ldr	r1, [r3, #24]
 8008ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	ea40 0301 	orr.w	r3, r0, r1
 8008cea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	4b8f      	ldr	r3, [pc, #572]	@ (8008f30 <UART_SetConfig+0x2cc>)
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d005      	beq.n	8008d04 <UART_SetConfig+0xa0>
 8008cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	4b8d      	ldr	r3, [pc, #564]	@ (8008f34 <UART_SetConfig+0x2d0>)
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d104      	bne.n	8008d0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d04:	f7fe feb2 	bl	8007a6c <HAL_RCC_GetPCLK2Freq>
 8008d08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008d0c:	e003      	b.n	8008d16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d0e:	f7fe fe99 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 8008d12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d1a:	69db      	ldr	r3, [r3, #28]
 8008d1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d20:	f040 810c 	bne.w	8008f3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008d2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008d32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008d36:	4622      	mov	r2, r4
 8008d38:	462b      	mov	r3, r5
 8008d3a:	1891      	adds	r1, r2, r2
 8008d3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008d3e:	415b      	adcs	r3, r3
 8008d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008d46:	4621      	mov	r1, r4
 8008d48:	eb12 0801 	adds.w	r8, r2, r1
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	eb43 0901 	adc.w	r9, r3, r1
 8008d52:	f04f 0200 	mov.w	r2, #0
 8008d56:	f04f 0300 	mov.w	r3, #0
 8008d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d66:	4690      	mov	r8, r2
 8008d68:	4699      	mov	r9, r3
 8008d6a:	4623      	mov	r3, r4
 8008d6c:	eb18 0303 	adds.w	r3, r8, r3
 8008d70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008d74:	462b      	mov	r3, r5
 8008d76:	eb49 0303 	adc.w	r3, r9, r3
 8008d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008d8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008d8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008d92:	460b      	mov	r3, r1
 8008d94:	18db      	adds	r3, r3, r3
 8008d96:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d98:	4613      	mov	r3, r2
 8008d9a:	eb42 0303 	adc.w	r3, r2, r3
 8008d9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008da0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008da4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008da8:	f7f7 ff6e 	bl	8000c88 <__aeabi_uldivmod>
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	4b61      	ldr	r3, [pc, #388]	@ (8008f38 <UART_SetConfig+0x2d4>)
 8008db2:	fba3 2302 	umull	r2, r3, r3, r2
 8008db6:	095b      	lsrs	r3, r3, #5
 8008db8:	011c      	lsls	r4, r3, #4
 8008dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008dc4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008dc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008dcc:	4642      	mov	r2, r8
 8008dce:	464b      	mov	r3, r9
 8008dd0:	1891      	adds	r1, r2, r2
 8008dd2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008dd4:	415b      	adcs	r3, r3
 8008dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008ddc:	4641      	mov	r1, r8
 8008dde:	eb12 0a01 	adds.w	sl, r2, r1
 8008de2:	4649      	mov	r1, r9
 8008de4:	eb43 0b01 	adc.w	fp, r3, r1
 8008de8:	f04f 0200 	mov.w	r2, #0
 8008dec:	f04f 0300 	mov.w	r3, #0
 8008df0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008df4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008df8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008dfc:	4692      	mov	sl, r2
 8008dfe:	469b      	mov	fp, r3
 8008e00:	4643      	mov	r3, r8
 8008e02:	eb1a 0303 	adds.w	r3, sl, r3
 8008e06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e0a:	464b      	mov	r3, r9
 8008e0c:	eb4b 0303 	adc.w	r3, fp, r3
 8008e10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008e24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008e28:	460b      	mov	r3, r1
 8008e2a:	18db      	adds	r3, r3, r3
 8008e2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e2e:	4613      	mov	r3, r2
 8008e30:	eb42 0303 	adc.w	r3, r2, r3
 8008e34:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008e3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008e3e:	f7f7 ff23 	bl	8000c88 <__aeabi_uldivmod>
 8008e42:	4602      	mov	r2, r0
 8008e44:	460b      	mov	r3, r1
 8008e46:	4611      	mov	r1, r2
 8008e48:	4b3b      	ldr	r3, [pc, #236]	@ (8008f38 <UART_SetConfig+0x2d4>)
 8008e4a:	fba3 2301 	umull	r2, r3, r3, r1
 8008e4e:	095b      	lsrs	r3, r3, #5
 8008e50:	2264      	movs	r2, #100	@ 0x64
 8008e52:	fb02 f303 	mul.w	r3, r2, r3
 8008e56:	1acb      	subs	r3, r1, r3
 8008e58:	00db      	lsls	r3, r3, #3
 8008e5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008e5e:	4b36      	ldr	r3, [pc, #216]	@ (8008f38 <UART_SetConfig+0x2d4>)
 8008e60:	fba3 2302 	umull	r2, r3, r3, r2
 8008e64:	095b      	lsrs	r3, r3, #5
 8008e66:	005b      	lsls	r3, r3, #1
 8008e68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008e6c:	441c      	add	r4, r3
 8008e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e72:	2200      	movs	r2, #0
 8008e74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008e7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008e80:	4642      	mov	r2, r8
 8008e82:	464b      	mov	r3, r9
 8008e84:	1891      	adds	r1, r2, r2
 8008e86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008e88:	415b      	adcs	r3, r3
 8008e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008e90:	4641      	mov	r1, r8
 8008e92:	1851      	adds	r1, r2, r1
 8008e94:	6339      	str	r1, [r7, #48]	@ 0x30
 8008e96:	4649      	mov	r1, r9
 8008e98:	414b      	adcs	r3, r1
 8008e9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e9c:	f04f 0200 	mov.w	r2, #0
 8008ea0:	f04f 0300 	mov.w	r3, #0
 8008ea4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008ea8:	4659      	mov	r1, fp
 8008eaa:	00cb      	lsls	r3, r1, #3
 8008eac:	4651      	mov	r1, sl
 8008eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008eb2:	4651      	mov	r1, sl
 8008eb4:	00ca      	lsls	r2, r1, #3
 8008eb6:	4610      	mov	r0, r2
 8008eb8:	4619      	mov	r1, r3
 8008eba:	4603      	mov	r3, r0
 8008ebc:	4642      	mov	r2, r8
 8008ebe:	189b      	adds	r3, r3, r2
 8008ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ec4:	464b      	mov	r3, r9
 8008ec6:	460a      	mov	r2, r1
 8008ec8:	eb42 0303 	adc.w	r3, r2, r3
 8008ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008edc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008ee0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	18db      	adds	r3, r3, r3
 8008ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008eea:	4613      	mov	r3, r2
 8008eec:	eb42 0303 	adc.w	r3, r2, r3
 8008ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ef2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008ef6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008efa:	f7f7 fec5 	bl	8000c88 <__aeabi_uldivmod>
 8008efe:	4602      	mov	r2, r0
 8008f00:	460b      	mov	r3, r1
 8008f02:	4b0d      	ldr	r3, [pc, #52]	@ (8008f38 <UART_SetConfig+0x2d4>)
 8008f04:	fba3 1302 	umull	r1, r3, r3, r2
 8008f08:	095b      	lsrs	r3, r3, #5
 8008f0a:	2164      	movs	r1, #100	@ 0x64
 8008f0c:	fb01 f303 	mul.w	r3, r1, r3
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	00db      	lsls	r3, r3, #3
 8008f14:	3332      	adds	r3, #50	@ 0x32
 8008f16:	4a08      	ldr	r2, [pc, #32]	@ (8008f38 <UART_SetConfig+0x2d4>)
 8008f18:	fba2 2303 	umull	r2, r3, r2, r3
 8008f1c:	095b      	lsrs	r3, r3, #5
 8008f1e:	f003 0207 	and.w	r2, r3, #7
 8008f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4422      	add	r2, r4
 8008f2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008f2c:	e106      	b.n	800913c <UART_SetConfig+0x4d8>
 8008f2e:	bf00      	nop
 8008f30:	40011000 	.word	0x40011000
 8008f34:	40011400 	.word	0x40011400
 8008f38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f40:	2200      	movs	r2, #0
 8008f42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008f4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008f4e:	4642      	mov	r2, r8
 8008f50:	464b      	mov	r3, r9
 8008f52:	1891      	adds	r1, r2, r2
 8008f54:	6239      	str	r1, [r7, #32]
 8008f56:	415b      	adcs	r3, r3
 8008f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f5e:	4641      	mov	r1, r8
 8008f60:	1854      	adds	r4, r2, r1
 8008f62:	4649      	mov	r1, r9
 8008f64:	eb43 0501 	adc.w	r5, r3, r1
 8008f68:	f04f 0200 	mov.w	r2, #0
 8008f6c:	f04f 0300 	mov.w	r3, #0
 8008f70:	00eb      	lsls	r3, r5, #3
 8008f72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f76:	00e2      	lsls	r2, r4, #3
 8008f78:	4614      	mov	r4, r2
 8008f7a:	461d      	mov	r5, r3
 8008f7c:	4643      	mov	r3, r8
 8008f7e:	18e3      	adds	r3, r4, r3
 8008f80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f84:	464b      	mov	r3, r9
 8008f86:	eb45 0303 	adc.w	r3, r5, r3
 8008f8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008f9e:	f04f 0200 	mov.w	r2, #0
 8008fa2:	f04f 0300 	mov.w	r3, #0
 8008fa6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008faa:	4629      	mov	r1, r5
 8008fac:	008b      	lsls	r3, r1, #2
 8008fae:	4621      	mov	r1, r4
 8008fb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fb4:	4621      	mov	r1, r4
 8008fb6:	008a      	lsls	r2, r1, #2
 8008fb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008fbc:	f7f7 fe64 	bl	8000c88 <__aeabi_uldivmod>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	4b60      	ldr	r3, [pc, #384]	@ (8009148 <UART_SetConfig+0x4e4>)
 8008fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8008fca:	095b      	lsrs	r3, r3, #5
 8008fcc:	011c      	lsls	r4, r3, #4
 8008fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008fd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008fdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008fe0:	4642      	mov	r2, r8
 8008fe2:	464b      	mov	r3, r9
 8008fe4:	1891      	adds	r1, r2, r2
 8008fe6:	61b9      	str	r1, [r7, #24]
 8008fe8:	415b      	adcs	r3, r3
 8008fea:	61fb      	str	r3, [r7, #28]
 8008fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ff0:	4641      	mov	r1, r8
 8008ff2:	1851      	adds	r1, r2, r1
 8008ff4:	6139      	str	r1, [r7, #16]
 8008ff6:	4649      	mov	r1, r9
 8008ff8:	414b      	adcs	r3, r1
 8008ffa:	617b      	str	r3, [r7, #20]
 8008ffc:	f04f 0200 	mov.w	r2, #0
 8009000:	f04f 0300 	mov.w	r3, #0
 8009004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009008:	4659      	mov	r1, fp
 800900a:	00cb      	lsls	r3, r1, #3
 800900c:	4651      	mov	r1, sl
 800900e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009012:	4651      	mov	r1, sl
 8009014:	00ca      	lsls	r2, r1, #3
 8009016:	4610      	mov	r0, r2
 8009018:	4619      	mov	r1, r3
 800901a:	4603      	mov	r3, r0
 800901c:	4642      	mov	r2, r8
 800901e:	189b      	adds	r3, r3, r2
 8009020:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009024:	464b      	mov	r3, r9
 8009026:	460a      	mov	r2, r1
 8009028:	eb42 0303 	adc.w	r3, r2, r3
 800902c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	67bb      	str	r3, [r7, #120]	@ 0x78
 800903a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800903c:	f04f 0200 	mov.w	r2, #0
 8009040:	f04f 0300 	mov.w	r3, #0
 8009044:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009048:	4649      	mov	r1, r9
 800904a:	008b      	lsls	r3, r1, #2
 800904c:	4641      	mov	r1, r8
 800904e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009052:	4641      	mov	r1, r8
 8009054:	008a      	lsls	r2, r1, #2
 8009056:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800905a:	f7f7 fe15 	bl	8000c88 <__aeabi_uldivmod>
 800905e:	4602      	mov	r2, r0
 8009060:	460b      	mov	r3, r1
 8009062:	4611      	mov	r1, r2
 8009064:	4b38      	ldr	r3, [pc, #224]	@ (8009148 <UART_SetConfig+0x4e4>)
 8009066:	fba3 2301 	umull	r2, r3, r3, r1
 800906a:	095b      	lsrs	r3, r3, #5
 800906c:	2264      	movs	r2, #100	@ 0x64
 800906e:	fb02 f303 	mul.w	r3, r2, r3
 8009072:	1acb      	subs	r3, r1, r3
 8009074:	011b      	lsls	r3, r3, #4
 8009076:	3332      	adds	r3, #50	@ 0x32
 8009078:	4a33      	ldr	r2, [pc, #204]	@ (8009148 <UART_SetConfig+0x4e4>)
 800907a:	fba2 2303 	umull	r2, r3, r2, r3
 800907e:	095b      	lsrs	r3, r3, #5
 8009080:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009084:	441c      	add	r4, r3
 8009086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800908a:	2200      	movs	r2, #0
 800908c:	673b      	str	r3, [r7, #112]	@ 0x70
 800908e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009090:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009094:	4642      	mov	r2, r8
 8009096:	464b      	mov	r3, r9
 8009098:	1891      	adds	r1, r2, r2
 800909a:	60b9      	str	r1, [r7, #8]
 800909c:	415b      	adcs	r3, r3
 800909e:	60fb      	str	r3, [r7, #12]
 80090a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80090a4:	4641      	mov	r1, r8
 80090a6:	1851      	adds	r1, r2, r1
 80090a8:	6039      	str	r1, [r7, #0]
 80090aa:	4649      	mov	r1, r9
 80090ac:	414b      	adcs	r3, r1
 80090ae:	607b      	str	r3, [r7, #4]
 80090b0:	f04f 0200 	mov.w	r2, #0
 80090b4:	f04f 0300 	mov.w	r3, #0
 80090b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80090bc:	4659      	mov	r1, fp
 80090be:	00cb      	lsls	r3, r1, #3
 80090c0:	4651      	mov	r1, sl
 80090c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090c6:	4651      	mov	r1, sl
 80090c8:	00ca      	lsls	r2, r1, #3
 80090ca:	4610      	mov	r0, r2
 80090cc:	4619      	mov	r1, r3
 80090ce:	4603      	mov	r3, r0
 80090d0:	4642      	mov	r2, r8
 80090d2:	189b      	adds	r3, r3, r2
 80090d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80090d6:	464b      	mov	r3, r9
 80090d8:	460a      	mov	r2, r1
 80090da:	eb42 0303 	adc.w	r3, r2, r3
 80090de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80090e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80090ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80090ec:	f04f 0200 	mov.w	r2, #0
 80090f0:	f04f 0300 	mov.w	r3, #0
 80090f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80090f8:	4649      	mov	r1, r9
 80090fa:	008b      	lsls	r3, r1, #2
 80090fc:	4641      	mov	r1, r8
 80090fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009102:	4641      	mov	r1, r8
 8009104:	008a      	lsls	r2, r1, #2
 8009106:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800910a:	f7f7 fdbd 	bl	8000c88 <__aeabi_uldivmod>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	4b0d      	ldr	r3, [pc, #52]	@ (8009148 <UART_SetConfig+0x4e4>)
 8009114:	fba3 1302 	umull	r1, r3, r3, r2
 8009118:	095b      	lsrs	r3, r3, #5
 800911a:	2164      	movs	r1, #100	@ 0x64
 800911c:	fb01 f303 	mul.w	r3, r1, r3
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	011b      	lsls	r3, r3, #4
 8009124:	3332      	adds	r3, #50	@ 0x32
 8009126:	4a08      	ldr	r2, [pc, #32]	@ (8009148 <UART_SetConfig+0x4e4>)
 8009128:	fba2 2303 	umull	r2, r3, r2, r3
 800912c:	095b      	lsrs	r3, r3, #5
 800912e:	f003 020f 	and.w	r2, r3, #15
 8009132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4422      	add	r2, r4
 800913a:	609a      	str	r2, [r3, #8]
}
 800913c:	bf00      	nop
 800913e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009142:	46bd      	mov	sp, r7
 8009144:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009148:	51eb851f 	.word	0x51eb851f

0800914c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800914c:	b084      	sub	sp, #16
 800914e:	b580      	push	{r7, lr}
 8009150:	b084      	sub	sp, #16
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	f107 001c 	add.w	r0, r7, #28
 800915a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800915e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009162:	2b01      	cmp	r3, #1
 8009164:	d123      	bne.n	80091ae <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800916a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800917a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800918e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009192:	2b01      	cmp	r3, #1
 8009194:	d105      	bne.n	80091a2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f001 fae8 	bl	800a778 <USB_CoreReset>
 80091a8:	4603      	mov	r3, r0
 80091aa:	73fb      	strb	r3, [r7, #15]
 80091ac:	e01b      	b.n	80091e6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f001 fadc 	bl	800a778 <USB_CoreReset>
 80091c0:	4603      	mov	r3, r0
 80091c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80091c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d106      	bne.n	80091da <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80091d8:	e005      	b.n	80091e6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80091e6:	7fbb      	ldrb	r3, [r7, #30]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d10b      	bne.n	8009204 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	f043 0206 	orr.w	r2, r3, #6
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	f043 0220 	orr.w	r2, r3, #32
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009204:	7bfb      	ldrb	r3, [r7, #15]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009210:	b004      	add	sp, #16
 8009212:	4770      	bx	lr

08009214 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009214:	b480      	push	{r7}
 8009216:	b087      	sub	sp, #28
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	4613      	mov	r3, r2
 8009220:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009222:	79fb      	ldrb	r3, [r7, #7]
 8009224:	2b02      	cmp	r3, #2
 8009226:	d165      	bne.n	80092f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	4a41      	ldr	r2, [pc, #260]	@ (8009330 <USB_SetTurnaroundTime+0x11c>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d906      	bls.n	800923e <USB_SetTurnaroundTime+0x2a>
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	4a40      	ldr	r2, [pc, #256]	@ (8009334 <USB_SetTurnaroundTime+0x120>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d202      	bcs.n	800923e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009238:	230f      	movs	r3, #15
 800923a:	617b      	str	r3, [r7, #20]
 800923c:	e062      	b.n	8009304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	4a3c      	ldr	r2, [pc, #240]	@ (8009334 <USB_SetTurnaroundTime+0x120>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d306      	bcc.n	8009254 <USB_SetTurnaroundTime+0x40>
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	4a3b      	ldr	r2, [pc, #236]	@ (8009338 <USB_SetTurnaroundTime+0x124>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d202      	bcs.n	8009254 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800924e:	230e      	movs	r3, #14
 8009250:	617b      	str	r3, [r7, #20]
 8009252:	e057      	b.n	8009304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	4a38      	ldr	r2, [pc, #224]	@ (8009338 <USB_SetTurnaroundTime+0x124>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d306      	bcc.n	800926a <USB_SetTurnaroundTime+0x56>
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	4a37      	ldr	r2, [pc, #220]	@ (800933c <USB_SetTurnaroundTime+0x128>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d202      	bcs.n	800926a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009264:	230d      	movs	r3, #13
 8009266:	617b      	str	r3, [r7, #20]
 8009268:	e04c      	b.n	8009304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	4a33      	ldr	r2, [pc, #204]	@ (800933c <USB_SetTurnaroundTime+0x128>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d306      	bcc.n	8009280 <USB_SetTurnaroundTime+0x6c>
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	4a32      	ldr	r2, [pc, #200]	@ (8009340 <USB_SetTurnaroundTime+0x12c>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d802      	bhi.n	8009280 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800927a:	230c      	movs	r3, #12
 800927c:	617b      	str	r3, [r7, #20]
 800927e:	e041      	b.n	8009304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	4a2f      	ldr	r2, [pc, #188]	@ (8009340 <USB_SetTurnaroundTime+0x12c>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d906      	bls.n	8009296 <USB_SetTurnaroundTime+0x82>
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	4a2e      	ldr	r2, [pc, #184]	@ (8009344 <USB_SetTurnaroundTime+0x130>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d802      	bhi.n	8009296 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009290:	230b      	movs	r3, #11
 8009292:	617b      	str	r3, [r7, #20]
 8009294:	e036      	b.n	8009304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	4a2a      	ldr	r2, [pc, #168]	@ (8009344 <USB_SetTurnaroundTime+0x130>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d906      	bls.n	80092ac <USB_SetTurnaroundTime+0x98>
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	4a29      	ldr	r2, [pc, #164]	@ (8009348 <USB_SetTurnaroundTime+0x134>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d802      	bhi.n	80092ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80092a6:	230a      	movs	r3, #10
 80092a8:	617b      	str	r3, [r7, #20]
 80092aa:	e02b      	b.n	8009304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	4a26      	ldr	r2, [pc, #152]	@ (8009348 <USB_SetTurnaroundTime+0x134>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d906      	bls.n	80092c2 <USB_SetTurnaroundTime+0xae>
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	4a25      	ldr	r2, [pc, #148]	@ (800934c <USB_SetTurnaroundTime+0x138>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d202      	bcs.n	80092c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80092bc:	2309      	movs	r3, #9
 80092be:	617b      	str	r3, [r7, #20]
 80092c0:	e020      	b.n	8009304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	4a21      	ldr	r2, [pc, #132]	@ (800934c <USB_SetTurnaroundTime+0x138>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d306      	bcc.n	80092d8 <USB_SetTurnaroundTime+0xc4>
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	4a20      	ldr	r2, [pc, #128]	@ (8009350 <USB_SetTurnaroundTime+0x13c>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d802      	bhi.n	80092d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80092d2:	2308      	movs	r3, #8
 80092d4:	617b      	str	r3, [r7, #20]
 80092d6:	e015      	b.n	8009304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	4a1d      	ldr	r2, [pc, #116]	@ (8009350 <USB_SetTurnaroundTime+0x13c>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d906      	bls.n	80092ee <USB_SetTurnaroundTime+0xda>
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	4a1c      	ldr	r2, [pc, #112]	@ (8009354 <USB_SetTurnaroundTime+0x140>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d202      	bcs.n	80092ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80092e8:	2307      	movs	r3, #7
 80092ea:	617b      	str	r3, [r7, #20]
 80092ec:	e00a      	b.n	8009304 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80092ee:	2306      	movs	r3, #6
 80092f0:	617b      	str	r3, [r7, #20]
 80092f2:	e007      	b.n	8009304 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80092f4:	79fb      	ldrb	r3, [r7, #7]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d102      	bne.n	8009300 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80092fa:	2309      	movs	r3, #9
 80092fc:	617b      	str	r3, [r7, #20]
 80092fe:	e001      	b.n	8009304 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009300:	2309      	movs	r3, #9
 8009302:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	68da      	ldr	r2, [r3, #12]
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	029b      	lsls	r3, r3, #10
 8009318:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800931c:	431a      	orrs	r2, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	371c      	adds	r7, #28
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	00d8acbf 	.word	0x00d8acbf
 8009334:	00e4e1c0 	.word	0x00e4e1c0
 8009338:	00f42400 	.word	0x00f42400
 800933c:	01067380 	.word	0x01067380
 8009340:	011a499f 	.word	0x011a499f
 8009344:	01312cff 	.word	0x01312cff
 8009348:	014ca43f 	.word	0x014ca43f
 800934c:	016e3600 	.word	0x016e3600
 8009350:	01a6ab1f 	.word	0x01a6ab1f
 8009354:	01e84800 	.word	0x01e84800

08009358 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	f043 0201 	orr.w	r2, r3, #1
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	370c      	adds	r7, #12
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr

0800937a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800937a:	b480      	push	{r7}
 800937c:	b083      	sub	sp, #12
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f023 0201 	bic.w	r2, r3, #1
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80093a8:	2300      	movs	r3, #0
 80093aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80093b8:	78fb      	ldrb	r3, [r7, #3]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d115      	bne.n	80093ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80093ca:	200a      	movs	r0, #10
 80093cc:	f7f9 fc1c 	bl	8002c08 <HAL_Delay>
      ms += 10U;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	330a      	adds	r3, #10
 80093d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 f93f 	bl	800a65a <USB_GetMode>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d01e      	beq.n	8009420 <USB_SetCurrentMode+0x84>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80093e6:	d9f0      	bls.n	80093ca <USB_SetCurrentMode+0x2e>
 80093e8:	e01a      	b.n	8009420 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80093ea:	78fb      	ldrb	r3, [r7, #3]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d115      	bne.n	800941c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80093fc:	200a      	movs	r0, #10
 80093fe:	f7f9 fc03 	bl	8002c08 <HAL_Delay>
      ms += 10U;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	330a      	adds	r3, #10
 8009406:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f001 f926 	bl	800a65a <USB_GetMode>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d005      	beq.n	8009420 <USB_SetCurrentMode+0x84>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2bc7      	cmp	r3, #199	@ 0xc7
 8009418:	d9f0      	bls.n	80093fc <USB_SetCurrentMode+0x60>
 800941a:	e001      	b.n	8009420 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e005      	b.n	800942c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2bc8      	cmp	r3, #200	@ 0xc8
 8009424:	d101      	bne.n	800942a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e000      	b.n	800942c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009434:	b084      	sub	sp, #16
 8009436:	b580      	push	{r7, lr}
 8009438:	b086      	sub	sp, #24
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009442:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800944e:	2300      	movs	r3, #0
 8009450:	613b      	str	r3, [r7, #16]
 8009452:	e009      	b.n	8009468 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	3340      	adds	r3, #64	@ 0x40
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	4413      	add	r3, r2
 800945e:	2200      	movs	r2, #0
 8009460:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	3301      	adds	r3, #1
 8009466:	613b      	str	r3, [r7, #16]
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	2b0e      	cmp	r3, #14
 800946c:	d9f2      	bls.n	8009454 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800946e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009472:	2b00      	cmp	r3, #0
 8009474:	d11c      	bne.n	80094b0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009484:	f043 0302 	orr.w	r3, r3, #2
 8009488:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800948e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800949a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80094ae:	e00b      	b.n	80094c8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094b4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094c0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80094ce:	461a      	mov	r2, r3
 80094d0:	2300      	movs	r3, #0
 80094d2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094d4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d10d      	bne.n	80094f8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80094dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d104      	bne.n	80094ee <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80094e4:	2100      	movs	r1, #0
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f968 	bl	80097bc <USB_SetDevSpeed>
 80094ec:	e008      	b.n	8009500 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80094ee:	2101      	movs	r1, #1
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f963 	bl	80097bc <USB_SetDevSpeed>
 80094f6:	e003      	b.n	8009500 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80094f8:	2103      	movs	r1, #3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f95e 	bl	80097bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009500:	2110      	movs	r1, #16
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f8fa 	bl	80096fc <USB_FlushTxFifo>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d001      	beq.n	8009512 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f924 	bl	8009760 <USB_FlushRxFifo>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009528:	461a      	mov	r2, r3
 800952a:	2300      	movs	r3, #0
 800952c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009534:	461a      	mov	r2, r3
 8009536:	2300      	movs	r3, #0
 8009538:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009540:	461a      	mov	r2, r3
 8009542:	2300      	movs	r3, #0
 8009544:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009546:	2300      	movs	r3, #0
 8009548:	613b      	str	r3, [r7, #16]
 800954a:	e043      	b.n	80095d4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	015a      	lsls	r2, r3, #5
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	4413      	add	r3, r2
 8009554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800955e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009562:	d118      	bne.n	8009596 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d10a      	bne.n	8009580 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	015a      	lsls	r2, r3, #5
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	4413      	add	r3, r2
 8009572:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009576:	461a      	mov	r2, r3
 8009578:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800957c:	6013      	str	r3, [r2, #0]
 800957e:	e013      	b.n	80095a8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	015a      	lsls	r2, r3, #5
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	4413      	add	r3, r2
 8009588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800958c:	461a      	mov	r2, r3
 800958e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009592:	6013      	str	r3, [r2, #0]
 8009594:	e008      	b.n	80095a8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	015a      	lsls	r2, r3, #5
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	4413      	add	r3, r2
 800959e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095a2:	461a      	mov	r2, r3
 80095a4:	2300      	movs	r3, #0
 80095a6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	015a      	lsls	r2, r3, #5
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	4413      	add	r3, r2
 80095b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095b4:	461a      	mov	r2, r3
 80095b6:	2300      	movs	r3, #0
 80095b8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	015a      	lsls	r2, r3, #5
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	4413      	add	r3, r2
 80095c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095c6:	461a      	mov	r2, r3
 80095c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80095cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	3301      	adds	r3, #1
 80095d2:	613b      	str	r3, [r7, #16]
 80095d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80095d8:	461a      	mov	r2, r3
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	4293      	cmp	r3, r2
 80095de:	d3b5      	bcc.n	800954c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095e0:	2300      	movs	r3, #0
 80095e2:	613b      	str	r3, [r7, #16]
 80095e4:	e043      	b.n	800966e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	015a      	lsls	r2, r3, #5
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	4413      	add	r3, r2
 80095ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095fc:	d118      	bne.n	8009630 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10a      	bne.n	800961a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	015a      	lsls	r2, r3, #5
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	4413      	add	r3, r2
 800960c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009610:	461a      	mov	r2, r3
 8009612:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009616:	6013      	str	r3, [r2, #0]
 8009618:	e013      	b.n	8009642 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	015a      	lsls	r2, r3, #5
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	4413      	add	r3, r2
 8009622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009626:	461a      	mov	r2, r3
 8009628:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800962c:	6013      	str	r3, [r2, #0]
 800962e:	e008      	b.n	8009642 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	015a      	lsls	r2, r3, #5
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	4413      	add	r3, r2
 8009638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800963c:	461a      	mov	r2, r3
 800963e:	2300      	movs	r3, #0
 8009640:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	015a      	lsls	r2, r3, #5
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	4413      	add	r3, r2
 800964a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800964e:	461a      	mov	r2, r3
 8009650:	2300      	movs	r3, #0
 8009652:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	015a      	lsls	r2, r3, #5
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	4413      	add	r3, r2
 800965c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009660:	461a      	mov	r2, r3
 8009662:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009666:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	3301      	adds	r3, #1
 800966c:	613b      	str	r3, [r7, #16]
 800966e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009672:	461a      	mov	r2, r3
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	4293      	cmp	r3, r2
 8009678:	d3b5      	bcc.n	80095e6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800968c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800969a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800969c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d105      	bne.n	80096b0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	f043 0210 	orr.w	r2, r3, #16
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	699a      	ldr	r2, [r3, #24]
 80096b4:	4b10      	ldr	r3, [pc, #64]	@ (80096f8 <USB_DevInit+0x2c4>)
 80096b6:	4313      	orrs	r3, r2
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80096bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d005      	beq.n	80096d0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	f043 0208 	orr.w	r2, r3, #8
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80096d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d107      	bne.n	80096e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80096e0:	f043 0304 	orr.w	r3, r3, #4
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80096e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3718      	adds	r7, #24
 80096ee:	46bd      	mov	sp, r7
 80096f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096f4:	b004      	add	sp, #16
 80096f6:	4770      	bx	lr
 80096f8:	803c3800 	.word	0x803c3800

080096fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b085      	sub	sp, #20
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009706:	2300      	movs	r3, #0
 8009708:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	3301      	adds	r3, #1
 800970e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009716:	d901      	bls.n	800971c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	e01b      	b.n	8009754 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	2b00      	cmp	r3, #0
 8009722:	daf2      	bge.n	800970a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009724:	2300      	movs	r3, #0
 8009726:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	019b      	lsls	r3, r3, #6
 800972c:	f043 0220 	orr.w	r2, r3, #32
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	3301      	adds	r3, #1
 8009738:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009740:	d901      	bls.n	8009746 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009742:	2303      	movs	r3, #3
 8009744:	e006      	b.n	8009754 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	f003 0320 	and.w	r3, r3, #32
 800974e:	2b20      	cmp	r3, #32
 8009750:	d0f0      	beq.n	8009734 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009768:	2300      	movs	r3, #0
 800976a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	3301      	adds	r3, #1
 8009770:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009778:	d901      	bls.n	800977e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800977a:	2303      	movs	r3, #3
 800977c:	e018      	b.n	80097b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	2b00      	cmp	r3, #0
 8009784:	daf2      	bge.n	800976c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009786:	2300      	movs	r3, #0
 8009788:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2210      	movs	r2, #16
 800978e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	3301      	adds	r3, #1
 8009794:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800979c:	d901      	bls.n	80097a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e006      	b.n	80097b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	f003 0310 	and.w	r3, r3, #16
 80097aa:	2b10      	cmp	r3, #16
 80097ac:	d0f0      	beq.n	8009790 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3714      	adds	r7, #20
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	460b      	mov	r3, r1
 80097c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	78fb      	ldrb	r3, [r7, #3]
 80097d6:	68f9      	ldr	r1, [r7, #12]
 80097d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80097dc:	4313      	orrs	r3, r2
 80097de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b087      	sub	sp, #28
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	f003 0306 	and.w	r3, r3, #6
 8009806:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d102      	bne.n	8009814 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800980e:	2300      	movs	r3, #0
 8009810:	75fb      	strb	r3, [r7, #23]
 8009812:	e00a      	b.n	800982a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2b02      	cmp	r3, #2
 8009818:	d002      	beq.n	8009820 <USB_GetDevSpeed+0x32>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2b06      	cmp	r3, #6
 800981e:	d102      	bne.n	8009826 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009820:	2302      	movs	r3, #2
 8009822:	75fb      	strb	r3, [r7, #23]
 8009824:	e001      	b.n	800982a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009826:	230f      	movs	r3, #15
 8009828:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800982a:	7dfb      	ldrb	r3, [r7, #23]
}
 800982c:	4618      	mov	r0, r3
 800982e:	371c      	adds	r7, #28
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	785b      	ldrb	r3, [r3, #1]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d13a      	bne.n	80098ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800985a:	69da      	ldr	r2, [r3, #28]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	f003 030f 	and.w	r3, r3, #15
 8009864:	2101      	movs	r1, #1
 8009866:	fa01 f303 	lsl.w	r3, r1, r3
 800986a:	b29b      	uxth	r3, r3
 800986c:	68f9      	ldr	r1, [r7, #12]
 800986e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009872:	4313      	orrs	r3, r2
 8009874:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	015a      	lsls	r2, r3, #5
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4413      	add	r3, r2
 800987e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009888:	2b00      	cmp	r3, #0
 800988a:	d155      	bne.n	8009938 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	015a      	lsls	r2, r3, #5
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	4413      	add	r3, r2
 8009894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	791b      	ldrb	r3, [r3, #4]
 80098a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80098a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	059b      	lsls	r3, r3, #22
 80098ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80098b0:	4313      	orrs	r3, r2
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	0151      	lsls	r1, r2, #5
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	440a      	add	r2, r1
 80098ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098c6:	6013      	str	r3, [r2, #0]
 80098c8:	e036      	b.n	8009938 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098d0:	69da      	ldr	r2, [r3, #28]
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	f003 030f 	and.w	r3, r3, #15
 80098da:	2101      	movs	r1, #1
 80098dc:	fa01 f303 	lsl.w	r3, r1, r3
 80098e0:	041b      	lsls	r3, r3, #16
 80098e2:	68f9      	ldr	r1, [r7, #12]
 80098e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80098e8:	4313      	orrs	r3, r2
 80098ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	015a      	lsls	r2, r3, #5
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	4413      	add	r3, r2
 80098f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d11a      	bne.n	8009938 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	015a      	lsls	r2, r3, #5
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	4413      	add	r3, r2
 800990a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	791b      	ldrb	r3, [r3, #4]
 800991c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800991e:	430b      	orrs	r3, r1
 8009920:	4313      	orrs	r3, r2
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	0151      	lsls	r1, r2, #5
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	440a      	add	r2, r1
 800992a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800992e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009932:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009936:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3714      	adds	r7, #20
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
	...

08009948 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	785b      	ldrb	r3, [r3, #1]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d161      	bne.n	8009a28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	015a      	lsls	r2, r3, #5
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	4413      	add	r3, r2
 800996c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009976:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800997a:	d11f      	bne.n	80099bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	015a      	lsls	r2, r3, #5
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	4413      	add	r3, r2
 8009984:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	0151      	lsls	r1, r2, #5
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	440a      	add	r2, r1
 8009992:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009996:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800999a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	015a      	lsls	r2, r3, #5
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	4413      	add	r3, r2
 80099a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	0151      	lsls	r1, r2, #5
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	440a      	add	r2, r1
 80099b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80099ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	f003 030f 	and.w	r3, r3, #15
 80099cc:	2101      	movs	r1, #1
 80099ce:	fa01 f303 	lsl.w	r3, r1, r3
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	43db      	mvns	r3, r3
 80099d6:	68f9      	ldr	r1, [r7, #12]
 80099d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80099dc:	4013      	ands	r3, r2
 80099de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099e6:	69da      	ldr	r2, [r3, #28]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	f003 030f 	and.w	r3, r3, #15
 80099f0:	2101      	movs	r1, #1
 80099f2:	fa01 f303 	lsl.w	r3, r1, r3
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	43db      	mvns	r3, r3
 80099fa:	68f9      	ldr	r1, [r7, #12]
 80099fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a00:	4013      	ands	r3, r2
 8009a02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	015a      	lsls	r2, r3, #5
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	0159      	lsls	r1, r3, #5
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	440b      	add	r3, r1
 8009a1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a1e:	4619      	mov	r1, r3
 8009a20:	4b35      	ldr	r3, [pc, #212]	@ (8009af8 <USB_DeactivateEndpoint+0x1b0>)
 8009a22:	4013      	ands	r3, r2
 8009a24:	600b      	str	r3, [r1, #0]
 8009a26:	e060      	b.n	8009aea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	015a      	lsls	r2, r3, #5
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	4413      	add	r3, r2
 8009a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a3e:	d11f      	bne.n	8009a80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	0151      	lsls	r1, r2, #5
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	440a      	add	r2, r1
 8009a56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009a5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	0151      	lsls	r1, r2, #5
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	440a      	add	r2, r1
 8009a76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	f003 030f 	and.w	r3, r3, #15
 8009a90:	2101      	movs	r1, #1
 8009a92:	fa01 f303 	lsl.w	r3, r1, r3
 8009a96:	041b      	lsls	r3, r3, #16
 8009a98:	43db      	mvns	r3, r3
 8009a9a:	68f9      	ldr	r1, [r7, #12]
 8009a9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aaa:	69da      	ldr	r2, [r3, #28]
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	f003 030f 	and.w	r3, r3, #15
 8009ab4:	2101      	movs	r1, #1
 8009ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8009aba:	041b      	lsls	r3, r3, #16
 8009abc:	43db      	mvns	r3, r3
 8009abe:	68f9      	ldr	r1, [r7, #12]
 8009ac0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	0159      	lsls	r1, r3, #5
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	440b      	add	r3, r1
 8009ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	4b05      	ldr	r3, [pc, #20]	@ (8009afc <USB_DeactivateEndpoint+0x1b4>)
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	ec337800 	.word	0xec337800
 8009afc:	eff37800 	.word	0xeff37800

08009b00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b08a      	sub	sp, #40	@ 0x28
 8009b04:	af02      	add	r7, sp, #8
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	785b      	ldrb	r3, [r3, #1]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	f040 817f 	bne.w	8009e20 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d132      	bne.n	8009b90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	015a      	lsls	r2, r3, #5
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	4413      	add	r3, r2
 8009b32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	69ba      	ldr	r2, [r7, #24]
 8009b3a:	0151      	lsls	r1, r2, #5
 8009b3c:	69fa      	ldr	r2, [r7, #28]
 8009b3e:	440a      	add	r2, r1
 8009b40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b44:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009b48:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009b4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	015a      	lsls	r2, r3, #5
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	4413      	add	r3, r2
 8009b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	69ba      	ldr	r2, [r7, #24]
 8009b5e:	0151      	lsls	r1, r2, #5
 8009b60:	69fa      	ldr	r2, [r7, #28]
 8009b62:	440a      	add	r2, r1
 8009b64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	015a      	lsls	r2, r3, #5
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	4413      	add	r3, r2
 8009b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	69ba      	ldr	r2, [r7, #24]
 8009b7e:	0151      	lsls	r1, r2, #5
 8009b80:	69fa      	ldr	r2, [r7, #28]
 8009b82:	440a      	add	r2, r1
 8009b84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b88:	0cdb      	lsrs	r3, r3, #19
 8009b8a:	04db      	lsls	r3, r3, #19
 8009b8c:	6113      	str	r3, [r2, #16]
 8009b8e:	e097      	b.n	8009cc0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	015a      	lsls	r2, r3, #5
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	4413      	add	r3, r2
 8009b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	69ba      	ldr	r2, [r7, #24]
 8009ba0:	0151      	lsls	r1, r2, #5
 8009ba2:	69fa      	ldr	r2, [r7, #28]
 8009ba4:	440a      	add	r2, r1
 8009ba6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009baa:	0cdb      	lsrs	r3, r3, #19
 8009bac:	04db      	lsls	r3, r3, #19
 8009bae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	015a      	lsls	r2, r3, #5
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	69ba      	ldr	r2, [r7, #24]
 8009bc0:	0151      	lsls	r1, r2, #5
 8009bc2:	69fa      	ldr	r2, [r7, #28]
 8009bc4:	440a      	add	r2, r1
 8009bc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009bce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009bd2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d11a      	bne.n	8009c10 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	691a      	ldr	r2, [r3, #16]
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d903      	bls.n	8009bee <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	689a      	ldr	r2, [r3, #8]
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	015a      	lsls	r2, r3, #5
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bfa:	691b      	ldr	r3, [r3, #16]
 8009bfc:	69ba      	ldr	r2, [r7, #24]
 8009bfe:	0151      	lsls	r1, r2, #5
 8009c00:	69fa      	ldr	r2, [r7, #28]
 8009c02:	440a      	add	r2, r1
 8009c04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c0c:	6113      	str	r3, [r2, #16]
 8009c0e:	e044      	b.n	8009c9a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	691a      	ldr	r2, [r3, #16]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	4413      	add	r3, r2
 8009c1a:	1e5a      	subs	r2, r3, #1
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c24:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	015a      	lsls	r2, r3, #5
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c32:	691a      	ldr	r2, [r3, #16]
 8009c34:	8afb      	ldrh	r3, [r7, #22]
 8009c36:	04d9      	lsls	r1, r3, #19
 8009c38:	4ba4      	ldr	r3, [pc, #656]	@ (8009ecc <USB_EPStartXfer+0x3cc>)
 8009c3a:	400b      	ands	r3, r1
 8009c3c:	69b9      	ldr	r1, [r7, #24]
 8009c3e:	0148      	lsls	r0, r1, #5
 8009c40:	69f9      	ldr	r1, [r7, #28]
 8009c42:	4401      	add	r1, r0
 8009c44:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	791b      	ldrb	r3, [r3, #4]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d122      	bne.n	8009c9a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	015a      	lsls	r2, r3, #5
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	69ba      	ldr	r2, [r7, #24]
 8009c64:	0151      	lsls	r1, r2, #5
 8009c66:	69fa      	ldr	r2, [r7, #28]
 8009c68:	440a      	add	r2, r1
 8009c6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c6e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009c72:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c80:	691a      	ldr	r2, [r3, #16]
 8009c82:	8afb      	ldrh	r3, [r7, #22]
 8009c84:	075b      	lsls	r3, r3, #29
 8009c86:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009c8a:	69b9      	ldr	r1, [r7, #24]
 8009c8c:	0148      	lsls	r0, r1, #5
 8009c8e:	69f9      	ldr	r1, [r7, #28]
 8009c90:	4401      	add	r1, r0
 8009c92:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009c96:	4313      	orrs	r3, r2
 8009c98:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	015a      	lsls	r2, r3, #5
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ca6:	691a      	ldr	r2, [r3, #16]
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cb0:	69b9      	ldr	r1, [r7, #24]
 8009cb2:	0148      	lsls	r0, r1, #5
 8009cb4:	69f9      	ldr	r1, [r7, #28]
 8009cb6:	4401      	add	r1, r0
 8009cb8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009cc0:	79fb      	ldrb	r3, [r7, #7]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d14b      	bne.n	8009d5e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	69db      	ldr	r3, [r3, #28]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d009      	beq.n	8009ce2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	015a      	lsls	r2, r3, #5
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cda:	461a      	mov	r2, r3
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	69db      	ldr	r3, [r3, #28]
 8009ce0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	791b      	ldrb	r3, [r3, #4]
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d128      	bne.n	8009d3c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d110      	bne.n	8009d1c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	015a      	lsls	r2, r3, #5
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	4413      	add	r3, r2
 8009d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	69ba      	ldr	r2, [r7, #24]
 8009d0a:	0151      	lsls	r1, r2, #5
 8009d0c:	69fa      	ldr	r2, [r7, #28]
 8009d0e:	440a      	add	r2, r1
 8009d10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009d18:	6013      	str	r3, [r2, #0]
 8009d1a:	e00f      	b.n	8009d3c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	015a      	lsls	r2, r3, #5
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	4413      	add	r3, r2
 8009d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	69ba      	ldr	r2, [r7, #24]
 8009d2c:	0151      	lsls	r1, r2, #5
 8009d2e:	69fa      	ldr	r2, [r7, #28]
 8009d30:	440a      	add	r2, r1
 8009d32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d3a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	015a      	lsls	r2, r3, #5
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	4413      	add	r3, r2
 8009d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	69ba      	ldr	r2, [r7, #24]
 8009d4c:	0151      	lsls	r1, r2, #5
 8009d4e:	69fa      	ldr	r2, [r7, #28]
 8009d50:	440a      	add	r2, r1
 8009d52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d56:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009d5a:	6013      	str	r3, [r2, #0]
 8009d5c:	e166      	b.n	800a02c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	015a      	lsls	r2, r3, #5
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	4413      	add	r3, r2
 8009d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	69ba      	ldr	r2, [r7, #24]
 8009d6e:	0151      	lsls	r1, r2, #5
 8009d70:	69fa      	ldr	r2, [r7, #28]
 8009d72:	440a      	add	r2, r1
 8009d74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d78:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009d7c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	791b      	ldrb	r3, [r3, #4]
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d015      	beq.n	8009db2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f000 814e 	beq.w	800a02c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	f003 030f 	and.w	r3, r3, #15
 8009da0:	2101      	movs	r1, #1
 8009da2:	fa01 f303 	lsl.w	r3, r1, r3
 8009da6:	69f9      	ldr	r1, [r7, #28]
 8009da8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009dac:	4313      	orrs	r3, r2
 8009dae:	634b      	str	r3, [r1, #52]	@ 0x34
 8009db0:	e13c      	b.n	800a02c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d110      	bne.n	8009de4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	015a      	lsls	r2, r3, #5
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	4413      	add	r3, r2
 8009dca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	69ba      	ldr	r2, [r7, #24]
 8009dd2:	0151      	lsls	r1, r2, #5
 8009dd4:	69fa      	ldr	r2, [r7, #28]
 8009dd6:	440a      	add	r2, r1
 8009dd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ddc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009de0:	6013      	str	r3, [r2, #0]
 8009de2:	e00f      	b.n	8009e04 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009de4:	69bb      	ldr	r3, [r7, #24]
 8009de6:	015a      	lsls	r2, r3, #5
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	4413      	add	r3, r2
 8009dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	69ba      	ldr	r2, [r7, #24]
 8009df4:	0151      	lsls	r1, r2, #5
 8009df6:	69fa      	ldr	r2, [r7, #28]
 8009df8:	440a      	add	r2, r1
 8009dfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e02:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	68d9      	ldr	r1, [r3, #12]
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	781a      	ldrb	r2, [r3, #0]
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	b298      	uxth	r0, r3
 8009e12:	79fb      	ldrb	r3, [r7, #7]
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	4603      	mov	r3, r0
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f000 f9b9 	bl	800a190 <USB_WritePacket>
 8009e1e:	e105      	b.n	800a02c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	015a      	lsls	r2, r3, #5
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	4413      	add	r3, r2
 8009e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	69ba      	ldr	r2, [r7, #24]
 8009e30:	0151      	lsls	r1, r2, #5
 8009e32:	69fa      	ldr	r2, [r7, #28]
 8009e34:	440a      	add	r2, r1
 8009e36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e3a:	0cdb      	lsrs	r3, r3, #19
 8009e3c:	04db      	lsls	r3, r3, #19
 8009e3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	015a      	lsls	r2, r3, #5
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	4413      	add	r3, r2
 8009e48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	69ba      	ldr	r2, [r7, #24]
 8009e50:	0151      	lsls	r1, r2, #5
 8009e52:	69fa      	ldr	r2, [r7, #28]
 8009e54:	440a      	add	r2, r1
 8009e56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e5a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009e5e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009e62:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d132      	bne.n	8009ed0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d003      	beq.n	8009e7a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	689a      	ldr	r2, [r3, #8]
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	689a      	ldr	r2, [r3, #8]
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	015a      	lsls	r2, r3, #5
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	4413      	add	r3, r2
 8009e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e8e:	691a      	ldr	r2, [r3, #16]
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	6a1b      	ldr	r3, [r3, #32]
 8009e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e98:	69b9      	ldr	r1, [r7, #24]
 8009e9a:	0148      	lsls	r0, r1, #5
 8009e9c:	69f9      	ldr	r1, [r7, #28]
 8009e9e:	4401      	add	r1, r0
 8009ea0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	015a      	lsls	r2, r3, #5
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	4413      	add	r3, r2
 8009eb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	69ba      	ldr	r2, [r7, #24]
 8009eb8:	0151      	lsls	r1, r2, #5
 8009eba:	69fa      	ldr	r2, [r7, #28]
 8009ebc:	440a      	add	r2, r1
 8009ebe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ec2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ec6:	6113      	str	r3, [r2, #16]
 8009ec8:	e062      	b.n	8009f90 <USB_EPStartXfer+0x490>
 8009eca:	bf00      	nop
 8009ecc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d123      	bne.n	8009f20 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	015a      	lsls	r2, r3, #5
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	4413      	add	r3, r2
 8009ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ee4:	691a      	ldr	r2, [r3, #16]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009eee:	69b9      	ldr	r1, [r7, #24]
 8009ef0:	0148      	lsls	r0, r1, #5
 8009ef2:	69f9      	ldr	r1, [r7, #28]
 8009ef4:	4401      	add	r1, r0
 8009ef6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009efa:	4313      	orrs	r3, r2
 8009efc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009efe:	69bb      	ldr	r3, [r7, #24]
 8009f00:	015a      	lsls	r2, r3, #5
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	4413      	add	r3, r2
 8009f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	69ba      	ldr	r2, [r7, #24]
 8009f0e:	0151      	lsls	r1, r2, #5
 8009f10:	69fa      	ldr	r2, [r7, #28]
 8009f12:	440a      	add	r2, r1
 8009f14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009f1c:	6113      	str	r3, [r2, #16]
 8009f1e:	e037      	b.n	8009f90 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	691a      	ldr	r2, [r3, #16]
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	4413      	add	r3, r2
 8009f2a:	1e5a      	subs	r2, r3, #1
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f34:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	8afa      	ldrh	r2, [r7, #22]
 8009f3c:	fb03 f202 	mul.w	r2, r3, r2
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	015a      	lsls	r2, r3, #5
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f50:	691a      	ldr	r2, [r3, #16]
 8009f52:	8afb      	ldrh	r3, [r7, #22]
 8009f54:	04d9      	lsls	r1, r3, #19
 8009f56:	4b38      	ldr	r3, [pc, #224]	@ (800a038 <USB_EPStartXfer+0x538>)
 8009f58:	400b      	ands	r3, r1
 8009f5a:	69b9      	ldr	r1, [r7, #24]
 8009f5c:	0148      	lsls	r0, r1, #5
 8009f5e:	69f9      	ldr	r1, [r7, #28]
 8009f60:	4401      	add	r1, r0
 8009f62:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009f66:	4313      	orrs	r3, r2
 8009f68:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	015a      	lsls	r2, r3, #5
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	4413      	add	r3, r2
 8009f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f76:	691a      	ldr	r2, [r3, #16]
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	6a1b      	ldr	r3, [r3, #32]
 8009f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f80:	69b9      	ldr	r1, [r7, #24]
 8009f82:	0148      	lsls	r0, r1, #5
 8009f84:	69f9      	ldr	r1, [r7, #28]
 8009f86:	4401      	add	r1, r0
 8009f88:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009f90:	79fb      	ldrb	r3, [r7, #7]
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d10d      	bne.n	8009fb2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d009      	beq.n	8009fb2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	68d9      	ldr	r1, [r3, #12]
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	015a      	lsls	r2, r3, #5
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	4413      	add	r3, r2
 8009faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fae:	460a      	mov	r2, r1
 8009fb0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	791b      	ldrb	r3, [r3, #4]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d128      	bne.n	800a00c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009fba:	69fb      	ldr	r3, [r7, #28]
 8009fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d110      	bne.n	8009fec <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	015a      	lsls	r2, r3, #5
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	69ba      	ldr	r2, [r7, #24]
 8009fda:	0151      	lsls	r1, r2, #5
 8009fdc:	69fa      	ldr	r2, [r7, #28]
 8009fde:	440a      	add	r2, r1
 8009fe0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fe4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009fe8:	6013      	str	r3, [r2, #0]
 8009fea:	e00f      	b.n	800a00c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	69ba      	ldr	r2, [r7, #24]
 8009ffc:	0151      	lsls	r1, r2, #5
 8009ffe:	69fa      	ldr	r2, [r7, #28]
 800a000:	440a      	add	r2, r1
 800a002:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a006:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a00a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	015a      	lsls	r2, r3, #5
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	4413      	add	r3, r2
 800a014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	69ba      	ldr	r2, [r7, #24]
 800a01c:	0151      	lsls	r1, r2, #5
 800a01e:	69fa      	ldr	r2, [r7, #28]
 800a020:	440a      	add	r2, r1
 800a022:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a026:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a02a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3720      	adds	r7, #32
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	1ff80000 	.word	0x1ff80000

0800a03c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b087      	sub	sp, #28
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a046:	2300      	movs	r3, #0
 800a048:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	785b      	ldrb	r3, [r3, #1]
 800a056:	2b01      	cmp	r3, #1
 800a058:	d14a      	bne.n	800a0f0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	015a      	lsls	r2, r3, #5
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	4413      	add	r3, r2
 800a064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a06e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a072:	f040 8086 	bne.w	800a182 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	015a      	lsls	r2, r3, #5
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	4413      	add	r3, r2
 800a080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	7812      	ldrb	r2, [r2, #0]
 800a08a:	0151      	lsls	r1, r2, #5
 800a08c:	693a      	ldr	r2, [r7, #16]
 800a08e:	440a      	add	r2, r1
 800a090:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a094:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a098:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	015a      	lsls	r2, r3, #5
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	7812      	ldrb	r2, [r2, #0]
 800a0ae:	0151      	lsls	r1, r2, #5
 800a0b0:	693a      	ldr	r2, [r7, #16]
 800a0b2:	440a      	add	r2, r1
 800a0b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a0bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d902      	bls.n	800a0d4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	75fb      	strb	r3, [r7, #23]
          break;
 800a0d2:	e056      	b.n	800a182 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	015a      	lsls	r2, r3, #5
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	4413      	add	r3, r2
 800a0de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0ec:	d0e7      	beq.n	800a0be <USB_EPStopXfer+0x82>
 800a0ee:	e048      	b.n	800a182 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	015a      	lsls	r2, r3, #5
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a104:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a108:	d13b      	bne.n	800a182 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	015a      	lsls	r2, r3, #5
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	4413      	add	r3, r2
 800a114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	683a      	ldr	r2, [r7, #0]
 800a11c:	7812      	ldrb	r2, [r2, #0]
 800a11e:	0151      	lsls	r1, r2, #5
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	440a      	add	r2, r1
 800a124:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a128:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a12c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	015a      	lsls	r2, r3, #5
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	4413      	add	r3, r2
 800a138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	683a      	ldr	r2, [r7, #0]
 800a140:	7812      	ldrb	r2, [r2, #0]
 800a142:	0151      	lsls	r1, r2, #5
 800a144:	693a      	ldr	r2, [r7, #16]
 800a146:	440a      	add	r2, r1
 800a148:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a14c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a150:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	3301      	adds	r3, #1
 800a156:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a15e:	4293      	cmp	r3, r2
 800a160:	d902      	bls.n	800a168 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	75fb      	strb	r3, [r7, #23]
          break;
 800a166:	e00c      	b.n	800a182 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	015a      	lsls	r2, r3, #5
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	4413      	add	r3, r2
 800a172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a17c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a180:	d0e7      	beq.n	800a152 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a182:	7dfb      	ldrb	r3, [r7, #23]
}
 800a184:	4618      	mov	r0, r3
 800a186:	371c      	adds	r7, #28
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a190:	b480      	push	{r7}
 800a192:	b089      	sub	sp, #36	@ 0x24
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	4611      	mov	r1, r2
 800a19c:	461a      	mov	r2, r3
 800a19e:	460b      	mov	r3, r1
 800a1a0:	71fb      	strb	r3, [r7, #7]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a1ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d123      	bne.n	800a1fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a1b6:	88bb      	ldrh	r3, [r7, #4]
 800a1b8:	3303      	adds	r3, #3
 800a1ba:	089b      	lsrs	r3, r3, #2
 800a1bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a1be:	2300      	movs	r3, #0
 800a1c0:	61bb      	str	r3, [r7, #24]
 800a1c2:	e018      	b.n	800a1f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a1c4:	79fb      	ldrb	r3, [r7, #7]
 800a1c6:	031a      	lsls	r2, r3, #12
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	3301      	adds	r3, #1
 800a1dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	61bb      	str	r3, [r7, #24]
 800a1f6:	69ba      	ldr	r2, [r7, #24]
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d3e2      	bcc.n	800a1c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3724      	adds	r7, #36	@ 0x24
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b08b      	sub	sp, #44	@ 0x2c
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	4613      	mov	r3, r2
 800a218:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a222:	88fb      	ldrh	r3, [r7, #6]
 800a224:	089b      	lsrs	r3, r3, #2
 800a226:	b29b      	uxth	r3, r3
 800a228:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a22a:	88fb      	ldrh	r3, [r7, #6]
 800a22c:	f003 0303 	and.w	r3, r3, #3
 800a230:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a232:	2300      	movs	r3, #0
 800a234:	623b      	str	r3, [r7, #32]
 800a236:	e014      	b.n	800a262 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a242:	601a      	str	r2, [r3, #0]
    pDest++;
 800a244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a246:	3301      	adds	r3, #1
 800a248:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a24c:	3301      	adds	r3, #1
 800a24e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a252:	3301      	adds	r3, #1
 800a254:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a258:	3301      	adds	r3, #1
 800a25a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a25c:	6a3b      	ldr	r3, [r7, #32]
 800a25e:	3301      	adds	r3, #1
 800a260:	623b      	str	r3, [r7, #32]
 800a262:	6a3a      	ldr	r2, [r7, #32]
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	429a      	cmp	r2, r3
 800a268:	d3e6      	bcc.n	800a238 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a26a:	8bfb      	ldrh	r3, [r7, #30]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d01e      	beq.n	800a2ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a270:	2300      	movs	r3, #0
 800a272:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a27a:	461a      	mov	r2, r3
 800a27c:	f107 0310 	add.w	r3, r7, #16
 800a280:	6812      	ldr	r2, [r2, #0]
 800a282:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a284:	693a      	ldr	r2, [r7, #16]
 800a286:	6a3b      	ldr	r3, [r7, #32]
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	00db      	lsls	r3, r3, #3
 800a28c:	fa22 f303 	lsr.w	r3, r2, r3
 800a290:	b2da      	uxtb	r2, r3
 800a292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a294:	701a      	strb	r2, [r3, #0]
      i++;
 800a296:	6a3b      	ldr	r3, [r7, #32]
 800a298:	3301      	adds	r3, #1
 800a29a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a29e:	3301      	adds	r3, #1
 800a2a0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a2a2:	8bfb      	ldrh	r3, [r7, #30]
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a2a8:	8bfb      	ldrh	r3, [r7, #30]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d1ea      	bne.n	800a284 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	372c      	adds	r7, #44	@ 0x2c
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	785b      	ldrb	r3, [r3, #1]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d12c      	bne.n	800a332 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	015a      	lsls	r2, r3, #5
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	4413      	add	r3, r2
 800a2e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	db12      	blt.n	800a310 <USB_EPSetStall+0x54>
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00f      	beq.n	800a310 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	015a      	lsls	r2, r3, #5
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	0151      	lsls	r1, r2, #5
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	440a      	add	r2, r1
 800a306:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a30a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a30e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	015a      	lsls	r2, r3, #5
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	4413      	add	r3, r2
 800a318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	68ba      	ldr	r2, [r7, #8]
 800a320:	0151      	lsls	r1, r2, #5
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	440a      	add	r2, r1
 800a326:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a32a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a32e:	6013      	str	r3, [r2, #0]
 800a330:	e02b      	b.n	800a38a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	015a      	lsls	r2, r3, #5
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	4413      	add	r3, r2
 800a33a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2b00      	cmp	r3, #0
 800a342:	db12      	blt.n	800a36a <USB_EPSetStall+0xae>
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00f      	beq.n	800a36a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	015a      	lsls	r2, r3, #5
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	4413      	add	r3, r2
 800a352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	0151      	lsls	r1, r2, #5
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	440a      	add	r2, r1
 800a360:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a364:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a368:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	015a      	lsls	r2, r3, #5
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	4413      	add	r3, r2
 800a372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	0151      	lsls	r1, r2, #5
 800a37c:	68fa      	ldr	r2, [r7, #12]
 800a37e:	440a      	add	r2, r1
 800a380:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a384:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a388:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3714      	adds	r7, #20
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	785b      	ldrb	r3, [r3, #1]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d128      	bne.n	800a406 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	015a      	lsls	r2, r3, #5
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68ba      	ldr	r2, [r7, #8]
 800a3c4:	0151      	lsls	r1, r2, #5
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	440a      	add	r2, r1
 800a3ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a3d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	791b      	ldrb	r3, [r3, #4]
 800a3d8:	2b03      	cmp	r3, #3
 800a3da:	d003      	beq.n	800a3e4 <USB_EPClearStall+0x4c>
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	791b      	ldrb	r3, [r3, #4]
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d138      	bne.n	800a456 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	015a      	lsls	r2, r3, #5
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	0151      	lsls	r1, r2, #5
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	440a      	add	r2, r1
 800a3fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a402:	6013      	str	r3, [r2, #0]
 800a404:	e027      	b.n	800a456 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	0151      	lsls	r1, r2, #5
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	440a      	add	r2, r1
 800a41c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a420:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a424:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	791b      	ldrb	r3, [r3, #4]
 800a42a:	2b03      	cmp	r3, #3
 800a42c:	d003      	beq.n	800a436 <USB_EPClearStall+0x9e>
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	791b      	ldrb	r3, [r3, #4]
 800a432:	2b02      	cmp	r3, #2
 800a434:	d10f      	bne.n	800a456 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	015a      	lsls	r2, r3, #5
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	4413      	add	r3, r2
 800a43e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68ba      	ldr	r2, [r7, #8]
 800a446:	0151      	lsls	r1, r2, #5
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	440a      	add	r2, r1
 800a44c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a454:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3714      	adds	r7, #20
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	460b      	mov	r3, r1
 800a46e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a482:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a486:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	78fb      	ldrb	r3, [r7, #3]
 800a492:	011b      	lsls	r3, r3, #4
 800a494:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a498:	68f9      	ldr	r1, [r7, #12]
 800a49a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3714      	adds	r7, #20
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a4ca:	f023 0303 	bic.w	r3, r3, #3
 800a4ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4de:	f023 0302 	bic.w	r3, r3, #2
 800a4e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4e4:	2300      	movs	r3, #0
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3714      	adds	r7, #20
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr

0800a4f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a4f2:	b480      	push	{r7}
 800a4f4:	b085      	sub	sp, #20
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a50c:	f023 0303 	bic.w	r3, r3, #3
 800a510:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a520:	f043 0302 	orr.w	r3, r3, #2
 800a524:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a526:	2300      	movs	r3, #0
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3714      	adds	r7, #20
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a534:	b480      	push	{r7}
 800a536:	b085      	sub	sp, #20
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	695b      	ldr	r3, [r3, #20]
 800a540:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	699b      	ldr	r3, [r3, #24]
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	4013      	ands	r3, r2
 800a54a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a54c:	68fb      	ldr	r3, [r7, #12]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3714      	adds	r7, #20
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr

0800a55a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a55a:	b480      	push	{r7}
 800a55c:	b085      	sub	sp, #20
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a576:	69db      	ldr	r3, [r3, #28]
 800a578:	68ba      	ldr	r2, [r7, #8]
 800a57a:	4013      	ands	r3, r2
 800a57c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	0c1b      	lsrs	r3, r3, #16
}
 800a582:	4618      	mov	r0, r3
 800a584:	3714      	adds	r7, #20
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr

0800a58e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a58e:	b480      	push	{r7}
 800a590:	b085      	sub	sp, #20
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5a0:	699b      	ldr	r3, [r3, #24]
 800a5a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5aa:	69db      	ldr	r3, [r3, #28]
 800a5ac:	68ba      	ldr	r2, [r7, #8]
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	b29b      	uxth	r3, r3
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3714      	adds	r7, #20
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr

0800a5c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a5c2:	b480      	push	{r7}
 800a5c4:	b085      	sub	sp, #20
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a5d2:	78fb      	ldrb	r3, [r7, #3]
 800a5d4:	015a      	lsls	r2, r3, #5
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	4413      	add	r3, r2
 800a5da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	68ba      	ldr	r2, [r7, #8]
 800a5ec:	4013      	ands	r3, r2
 800a5ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a5f0:	68bb      	ldr	r3, [r7, #8]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3714      	adds	r7, #20
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a5fe:	b480      	push	{r7}
 800a600:	b087      	sub	sp, #28
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	460b      	mov	r3, r1
 800a608:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a61e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a620:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a622:	78fb      	ldrb	r3, [r7, #3]
 800a624:	f003 030f 	and.w	r3, r3, #15
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	fa22 f303 	lsr.w	r3, r2, r3
 800a62e:	01db      	lsls	r3, r3, #7
 800a630:	b2db      	uxtb	r3, r3
 800a632:	693a      	ldr	r2, [r7, #16]
 800a634:	4313      	orrs	r3, r2
 800a636:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a638:	78fb      	ldrb	r3, [r7, #3]
 800a63a:	015a      	lsls	r2, r3, #5
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	4413      	add	r3, r2
 800a640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	693a      	ldr	r2, [r7, #16]
 800a648:	4013      	ands	r3, r2
 800a64a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a64c:	68bb      	ldr	r3, [r7, #8]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	371c      	adds	r7, #28
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a65a:	b480      	push	{r7}
 800a65c:	b083      	sub	sp, #12
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	695b      	ldr	r3, [r3, #20]
 800a666:	f003 0301 	and.w	r3, r3, #1
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr

0800a676 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a676:	b480      	push	{r7}
 800a678:	b085      	sub	sp, #20
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a690:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a694:	f023 0307 	bic.w	r3, r3, #7
 800a698:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a6a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a6ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3714      	adds	r7, #20
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b087      	sub	sp, #28
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	607a      	str	r2, [r7, #4]
 800a6c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	333c      	adds	r3, #60	@ 0x3c
 800a6d2:	3304      	adds	r3, #4
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	4a26      	ldr	r2, [pc, #152]	@ (800a774 <USB_EP0_OutStart+0xb8>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d90a      	bls.n	800a6f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6f0:	d101      	bne.n	800a6f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	e037      	b.n	800a766 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	2300      	movs	r3, #0
 800a700:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a708:	691b      	ldr	r3, [r3, #16]
 800a70a:	697a      	ldr	r2, [r7, #20]
 800a70c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a710:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a714:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a71c:	691b      	ldr	r3, [r3, #16]
 800a71e:	697a      	ldr	r2, [r7, #20]
 800a720:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a724:	f043 0318 	orr.w	r3, r3, #24
 800a728:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	697a      	ldr	r2, [r7, #20]
 800a734:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a738:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a73c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a73e:	7afb      	ldrb	r3, [r7, #11]
 800a740:	2b01      	cmp	r3, #1
 800a742:	d10f      	bne.n	800a764 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a74a:	461a      	mov	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	697a      	ldr	r2, [r7, #20]
 800a75a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a75e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a762:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	371c      	adds	r7, #28
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	4f54300a 	.word	0x4f54300a

0800a778 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a780:	2300      	movs	r3, #0
 800a782:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	3301      	adds	r3, #1
 800a788:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a790:	d901      	bls.n	800a796 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a792:	2303      	movs	r3, #3
 800a794:	e01b      	b.n	800a7ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	691b      	ldr	r3, [r3, #16]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	daf2      	bge.n	800a784 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	f043 0201 	orr.w	r2, r3, #1
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7ba:	d901      	bls.n	800a7c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a7bc:	2303      	movs	r3, #3
 800a7be:	e006      	b.n	800a7ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	691b      	ldr	r3, [r3, #16]
 800a7c4:	f003 0301 	and.w	r3, r3, #1
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d0f0      	beq.n	800a7ae <USB_CoreReset+0x36>

  return HAL_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3714      	adds	r7, #20
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr
	...

0800a7dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a7e8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a7ec:	f002 fc46 	bl	800d07c <USBD_static_malloc>
 800a7f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d109      	bne.n	800a80c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	32b0      	adds	r2, #176	@ 0xb0
 800a802:	2100      	movs	r1, #0
 800a804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a808:	2302      	movs	r3, #2
 800a80a:	e0d4      	b.n	800a9b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a80c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a810:	2100      	movs	r1, #0
 800a812:	68f8      	ldr	r0, [r7, #12]
 800a814:	f003 fb53 	bl	800debe <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	32b0      	adds	r2, #176	@ 0xb0
 800a822:	68f9      	ldr	r1, [r7, #12]
 800a824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	32b0      	adds	r2, #176	@ 0xb0
 800a832:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	7c1b      	ldrb	r3, [r3, #16]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d138      	bne.n	800a8b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a844:	4b5e      	ldr	r3, [pc, #376]	@ (800a9c0 <USBD_CDC_Init+0x1e4>)
 800a846:	7819      	ldrb	r1, [r3, #0]
 800a848:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a84c:	2202      	movs	r2, #2
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f002 faf1 	bl	800ce36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a854:	4b5a      	ldr	r3, [pc, #360]	@ (800a9c0 <USBD_CDC_Init+0x1e4>)
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	f003 020f 	and.w	r2, r3, #15
 800a85c:	6879      	ldr	r1, [r7, #4]
 800a85e:	4613      	mov	r3, r2
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	4413      	add	r3, r2
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	440b      	add	r3, r1
 800a868:	3324      	adds	r3, #36	@ 0x24
 800a86a:	2201      	movs	r2, #1
 800a86c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a86e:	4b55      	ldr	r3, [pc, #340]	@ (800a9c4 <USBD_CDC_Init+0x1e8>)
 800a870:	7819      	ldrb	r1, [r3, #0]
 800a872:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a876:	2202      	movs	r2, #2
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f002 fadc 	bl	800ce36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a87e:	4b51      	ldr	r3, [pc, #324]	@ (800a9c4 <USBD_CDC_Init+0x1e8>)
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	f003 020f 	and.w	r2, r3, #15
 800a886:	6879      	ldr	r1, [r7, #4]
 800a888:	4613      	mov	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	440b      	add	r3, r1
 800a892:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a896:	2201      	movs	r2, #1
 800a898:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a89a:	4b4b      	ldr	r3, [pc, #300]	@ (800a9c8 <USBD_CDC_Init+0x1ec>)
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	f003 020f 	and.w	r2, r3, #15
 800a8a2:	6879      	ldr	r1, [r7, #4]
 800a8a4:	4613      	mov	r3, r2
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	4413      	add	r3, r2
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	440b      	add	r3, r1
 800a8ae:	3326      	adds	r3, #38	@ 0x26
 800a8b0:	2210      	movs	r2, #16
 800a8b2:	801a      	strh	r2, [r3, #0]
 800a8b4:	e035      	b.n	800a922 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a8b6:	4b42      	ldr	r3, [pc, #264]	@ (800a9c0 <USBD_CDC_Init+0x1e4>)
 800a8b8:	7819      	ldrb	r1, [r3, #0]
 800a8ba:	2340      	movs	r3, #64	@ 0x40
 800a8bc:	2202      	movs	r2, #2
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f002 fab9 	bl	800ce36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a8c4:	4b3e      	ldr	r3, [pc, #248]	@ (800a9c0 <USBD_CDC_Init+0x1e4>)
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	f003 020f 	and.w	r2, r3, #15
 800a8cc:	6879      	ldr	r1, [r7, #4]
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	4413      	add	r3, r2
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	440b      	add	r3, r1
 800a8d8:	3324      	adds	r3, #36	@ 0x24
 800a8da:	2201      	movs	r2, #1
 800a8dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a8de:	4b39      	ldr	r3, [pc, #228]	@ (800a9c4 <USBD_CDC_Init+0x1e8>)
 800a8e0:	7819      	ldrb	r1, [r3, #0]
 800a8e2:	2340      	movs	r3, #64	@ 0x40
 800a8e4:	2202      	movs	r2, #2
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f002 faa5 	bl	800ce36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a8ec:	4b35      	ldr	r3, [pc, #212]	@ (800a9c4 <USBD_CDC_Init+0x1e8>)
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	f003 020f 	and.w	r2, r3, #15
 800a8f4:	6879      	ldr	r1, [r7, #4]
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	4413      	add	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	440b      	add	r3, r1
 800a900:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a904:	2201      	movs	r2, #1
 800a906:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a908:	4b2f      	ldr	r3, [pc, #188]	@ (800a9c8 <USBD_CDC_Init+0x1ec>)
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	f003 020f 	and.w	r2, r3, #15
 800a910:	6879      	ldr	r1, [r7, #4]
 800a912:	4613      	mov	r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4413      	add	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	440b      	add	r3, r1
 800a91c:	3326      	adds	r3, #38	@ 0x26
 800a91e:	2210      	movs	r2, #16
 800a920:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a922:	4b29      	ldr	r3, [pc, #164]	@ (800a9c8 <USBD_CDC_Init+0x1ec>)
 800a924:	7819      	ldrb	r1, [r3, #0]
 800a926:	2308      	movs	r3, #8
 800a928:	2203      	movs	r2, #3
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f002 fa83 	bl	800ce36 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a930:	4b25      	ldr	r3, [pc, #148]	@ (800a9c8 <USBD_CDC_Init+0x1ec>)
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	f003 020f 	and.w	r2, r3, #15
 800a938:	6879      	ldr	r1, [r7, #4]
 800a93a:	4613      	mov	r3, r2
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	4413      	add	r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	440b      	add	r3, r1
 800a944:	3324      	adds	r3, #36	@ 0x24
 800a946:	2201      	movs	r2, #1
 800a948:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	33b0      	adds	r3, #176	@ 0xb0
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	4413      	add	r3, r2
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2200      	movs	r2, #0
 800a96a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2200      	movs	r2, #0
 800a972:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d101      	bne.n	800a984 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a980:	2302      	movs	r3, #2
 800a982:	e018      	b.n	800a9b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	7c1b      	ldrb	r3, [r3, #16]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10a      	bne.n	800a9a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a98c:	4b0d      	ldr	r3, [pc, #52]	@ (800a9c4 <USBD_CDC_Init+0x1e8>)
 800a98e:	7819      	ldrb	r1, [r3, #0]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a996:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f002 fb3a 	bl	800d014 <USBD_LL_PrepareReceive>
 800a9a0:	e008      	b.n	800a9b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a9a2:	4b08      	ldr	r3, [pc, #32]	@ (800a9c4 <USBD_CDC_Init+0x1e8>)
 800a9a4:	7819      	ldrb	r1, [r3, #0]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a9ac:	2340      	movs	r3, #64	@ 0x40
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f002 fb30 	bl	800d014 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	20000097 	.word	0x20000097
 800a9c4:	20000098 	.word	0x20000098
 800a9c8:	20000099 	.word	0x20000099

0800a9cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a9d8:	4b3a      	ldr	r3, [pc, #232]	@ (800aac4 <USBD_CDC_DeInit+0xf8>)
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	4619      	mov	r1, r3
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f002 fa4f 	bl	800ce82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a9e4:	4b37      	ldr	r3, [pc, #220]	@ (800aac4 <USBD_CDC_DeInit+0xf8>)
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	f003 020f 	and.w	r2, r3, #15
 800a9ec:	6879      	ldr	r1, [r7, #4]
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	4413      	add	r3, r2
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	440b      	add	r3, r1
 800a9f8:	3324      	adds	r3, #36	@ 0x24
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a9fe:	4b32      	ldr	r3, [pc, #200]	@ (800aac8 <USBD_CDC_DeInit+0xfc>)
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	4619      	mov	r1, r3
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f002 fa3c 	bl	800ce82 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800aa0a:	4b2f      	ldr	r3, [pc, #188]	@ (800aac8 <USBD_CDC_DeInit+0xfc>)
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	f003 020f 	and.w	r2, r3, #15
 800aa12:	6879      	ldr	r1, [r7, #4]
 800aa14:	4613      	mov	r3, r2
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4413      	add	r3, r2
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	440b      	add	r3, r1
 800aa1e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa22:	2200      	movs	r2, #0
 800aa24:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800aa26:	4b29      	ldr	r3, [pc, #164]	@ (800aacc <USBD_CDC_DeInit+0x100>)
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f002 fa28 	bl	800ce82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800aa32:	4b26      	ldr	r3, [pc, #152]	@ (800aacc <USBD_CDC_DeInit+0x100>)
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	f003 020f 	and.w	r2, r3, #15
 800aa3a:	6879      	ldr	r1, [r7, #4]
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	4413      	add	r3, r2
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	440b      	add	r3, r1
 800aa46:	3324      	adds	r3, #36	@ 0x24
 800aa48:	2200      	movs	r2, #0
 800aa4a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800aa4c:	4b1f      	ldr	r3, [pc, #124]	@ (800aacc <USBD_CDC_DeInit+0x100>)
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	f003 020f 	and.w	r2, r3, #15
 800aa54:	6879      	ldr	r1, [r7, #4]
 800aa56:	4613      	mov	r3, r2
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	4413      	add	r3, r2
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	440b      	add	r3, r1
 800aa60:	3326      	adds	r3, #38	@ 0x26
 800aa62:	2200      	movs	r2, #0
 800aa64:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	32b0      	adds	r2, #176	@ 0xb0
 800aa70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d01f      	beq.n	800aab8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	33b0      	adds	r3, #176	@ 0xb0
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	4413      	add	r3, r2
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	32b0      	adds	r2, #176	@ 0xb0
 800aa96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f002 fafc 	bl	800d098 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	32b0      	adds	r2, #176	@ 0xb0
 800aaaa:	2100      	movs	r1, #0
 800aaac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3708      	adds	r7, #8
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	20000097 	.word	0x20000097
 800aac8:	20000098 	.word	0x20000098
 800aacc:	20000099 	.word	0x20000099

0800aad0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b086      	sub	sp, #24
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	32b0      	adds	r2, #176	@ 0xb0
 800aae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aae8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aaea:	2300      	movs	r3, #0
 800aaec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d101      	bne.n	800ab00 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800aafc:	2303      	movs	r3, #3
 800aafe:	e0bf      	b.n	800ac80 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d050      	beq.n	800abae <USBD_CDC_Setup+0xde>
 800ab0c:	2b20      	cmp	r3, #32
 800ab0e:	f040 80af 	bne.w	800ac70 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	88db      	ldrh	r3, [r3, #6]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d03a      	beq.n	800ab90 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	b25b      	sxtb	r3, r3
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	da1b      	bge.n	800ab5c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	33b0      	adds	r3, #176	@ 0xb0
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	4413      	add	r3, r2
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	683a      	ldr	r2, [r7, #0]
 800ab38:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ab3a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	88d2      	ldrh	r2, [r2, #6]
 800ab40:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	88db      	ldrh	r3, [r3, #6]
 800ab46:	2b07      	cmp	r3, #7
 800ab48:	bf28      	it	cs
 800ab4a:	2307      	movcs	r3, #7
 800ab4c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	89fa      	ldrh	r2, [r7, #14]
 800ab52:	4619      	mov	r1, r3
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f001 fd53 	bl	800c600 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ab5a:	e090      	b.n	800ac7e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	785a      	ldrb	r2, [r3, #1]
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	88db      	ldrh	r3, [r3, #6]
 800ab6a:	2b3f      	cmp	r3, #63	@ 0x3f
 800ab6c:	d803      	bhi.n	800ab76 <USBD_CDC_Setup+0xa6>
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	88db      	ldrh	r3, [r3, #6]
 800ab72:	b2da      	uxtb	r2, r3
 800ab74:	e000      	b.n	800ab78 <USBD_CDC_Setup+0xa8>
 800ab76:	2240      	movs	r2, #64	@ 0x40
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ab7e:	6939      	ldr	r1, [r7, #16]
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ab86:	461a      	mov	r2, r3
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f001 fd65 	bl	800c658 <USBD_CtlPrepareRx>
      break;
 800ab8e:	e076      	b.n	800ac7e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	33b0      	adds	r3, #176	@ 0xb0
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	4413      	add	r3, r2
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	7850      	ldrb	r0, [r2, #1]
 800aba6:	2200      	movs	r2, #0
 800aba8:	6839      	ldr	r1, [r7, #0]
 800abaa:	4798      	blx	r3
      break;
 800abac:	e067      	b.n	800ac7e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	785b      	ldrb	r3, [r3, #1]
 800abb2:	2b0b      	cmp	r3, #11
 800abb4:	d851      	bhi.n	800ac5a <USBD_CDC_Setup+0x18a>
 800abb6:	a201      	add	r2, pc, #4	@ (adr r2, 800abbc <USBD_CDC_Setup+0xec>)
 800abb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abbc:	0800abed 	.word	0x0800abed
 800abc0:	0800ac69 	.word	0x0800ac69
 800abc4:	0800ac5b 	.word	0x0800ac5b
 800abc8:	0800ac5b 	.word	0x0800ac5b
 800abcc:	0800ac5b 	.word	0x0800ac5b
 800abd0:	0800ac5b 	.word	0x0800ac5b
 800abd4:	0800ac5b 	.word	0x0800ac5b
 800abd8:	0800ac5b 	.word	0x0800ac5b
 800abdc:	0800ac5b 	.word	0x0800ac5b
 800abe0:	0800ac5b 	.word	0x0800ac5b
 800abe4:	0800ac17 	.word	0x0800ac17
 800abe8:	0800ac41 	.word	0x0800ac41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	2b03      	cmp	r3, #3
 800abf6:	d107      	bne.n	800ac08 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800abf8:	f107 030a 	add.w	r3, r7, #10
 800abfc:	2202      	movs	r2, #2
 800abfe:	4619      	mov	r1, r3
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f001 fcfd 	bl	800c600 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac06:	e032      	b.n	800ac6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ac08:	6839      	ldr	r1, [r7, #0]
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f001 fc7b 	bl	800c506 <USBD_CtlError>
            ret = USBD_FAIL;
 800ac10:	2303      	movs	r3, #3
 800ac12:	75fb      	strb	r3, [r7, #23]
          break;
 800ac14:	e02b      	b.n	800ac6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	2b03      	cmp	r3, #3
 800ac20:	d107      	bne.n	800ac32 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ac22:	f107 030d 	add.w	r3, r7, #13
 800ac26:	2201      	movs	r2, #1
 800ac28:	4619      	mov	r1, r3
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f001 fce8 	bl	800c600 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac30:	e01d      	b.n	800ac6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ac32:	6839      	ldr	r1, [r7, #0]
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f001 fc66 	bl	800c506 <USBD_CtlError>
            ret = USBD_FAIL;
 800ac3a:	2303      	movs	r3, #3
 800ac3c:	75fb      	strb	r3, [r7, #23]
          break;
 800ac3e:	e016      	b.n	800ac6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	2b03      	cmp	r3, #3
 800ac4a:	d00f      	beq.n	800ac6c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ac4c:	6839      	ldr	r1, [r7, #0]
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f001 fc59 	bl	800c506 <USBD_CtlError>
            ret = USBD_FAIL;
 800ac54:	2303      	movs	r3, #3
 800ac56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ac58:	e008      	b.n	800ac6c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ac5a:	6839      	ldr	r1, [r7, #0]
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f001 fc52 	bl	800c506 <USBD_CtlError>
          ret = USBD_FAIL;
 800ac62:	2303      	movs	r3, #3
 800ac64:	75fb      	strb	r3, [r7, #23]
          break;
 800ac66:	e002      	b.n	800ac6e <USBD_CDC_Setup+0x19e>
          break;
 800ac68:	bf00      	nop
 800ac6a:	e008      	b.n	800ac7e <USBD_CDC_Setup+0x1ae>
          break;
 800ac6c:	bf00      	nop
      }
      break;
 800ac6e:	e006      	b.n	800ac7e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ac70:	6839      	ldr	r1, [r7, #0]
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f001 fc47 	bl	800c506 <USBD_CtlError>
      ret = USBD_FAIL;
 800ac78:	2303      	movs	r3, #3
 800ac7a:	75fb      	strb	r3, [r7, #23]
      break;
 800ac7c:	bf00      	nop
  }

  return (uint8_t)ret;
 800ac7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3718      	adds	r7, #24
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	460b      	mov	r3, r1
 800ac92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	32b0      	adds	r2, #176	@ 0xb0
 800aca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d101      	bne.n	800acb2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800acae:	2303      	movs	r3, #3
 800acb0:	e065      	b.n	800ad7e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	32b0      	adds	r2, #176	@ 0xb0
 800acbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800acc2:	78fb      	ldrb	r3, [r7, #3]
 800acc4:	f003 020f 	and.w	r2, r3, #15
 800acc8:	6879      	ldr	r1, [r7, #4]
 800acca:	4613      	mov	r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	4413      	add	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	440b      	add	r3, r1
 800acd4:	3318      	adds	r3, #24
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d02f      	beq.n	800ad3c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800acdc:	78fb      	ldrb	r3, [r7, #3]
 800acde:	f003 020f 	and.w	r2, r3, #15
 800ace2:	6879      	ldr	r1, [r7, #4]
 800ace4:	4613      	mov	r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	4413      	add	r3, r2
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	440b      	add	r3, r1
 800acee:	3318      	adds	r3, #24
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	78fb      	ldrb	r3, [r7, #3]
 800acf4:	f003 010f 	and.w	r1, r3, #15
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	460b      	mov	r3, r1
 800acfc:	00db      	lsls	r3, r3, #3
 800acfe:	440b      	add	r3, r1
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	4403      	add	r3, r0
 800ad04:	331c      	adds	r3, #28
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	fbb2 f1f3 	udiv	r1, r2, r3
 800ad0c:	fb01 f303 	mul.w	r3, r1, r3
 800ad10:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d112      	bne.n	800ad3c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ad16:	78fb      	ldrb	r3, [r7, #3]
 800ad18:	f003 020f 	and.w	r2, r3, #15
 800ad1c:	6879      	ldr	r1, [r7, #4]
 800ad1e:	4613      	mov	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	4413      	add	r3, r2
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	440b      	add	r3, r1
 800ad28:	3318      	adds	r3, #24
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ad2e:	78f9      	ldrb	r1, [r7, #3]
 800ad30:	2300      	movs	r3, #0
 800ad32:	2200      	movs	r2, #0
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f002 f94c 	bl	800cfd2 <USBD_LL_Transmit>
 800ad3a:	e01f      	b.n	800ad7c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	33b0      	adds	r3, #176	@ 0xb0
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	4413      	add	r3, r2
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	691b      	ldr	r3, [r3, #16]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d010      	beq.n	800ad7c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	33b0      	adds	r3, #176	@ 0xb0
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	4413      	add	r3, r2
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	691b      	ldr	r3, [r3, #16]
 800ad6c:	68ba      	ldr	r2, [r7, #8]
 800ad6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ad72:	68ba      	ldr	r2, [r7, #8]
 800ad74:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ad78:	78fa      	ldrb	r2, [r7, #3]
 800ad7a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b084      	sub	sp, #16
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
 800ad8e:	460b      	mov	r3, r1
 800ad90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	32b0      	adds	r2, #176	@ 0xb0
 800ad9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	32b0      	adds	r2, #176	@ 0xb0
 800adac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d101      	bne.n	800adb8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800adb4:	2303      	movs	r3, #3
 800adb6:	e01a      	b.n	800adee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800adb8:	78fb      	ldrb	r3, [r7, #3]
 800adba:	4619      	mov	r1, r3
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f002 f94a 	bl	800d056 <USBD_LL_GetRxDataSize>
 800adc2:	4602      	mov	r2, r0
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	33b0      	adds	r3, #176	@ 0xb0
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	4413      	add	r3, r2
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ade2:	68fa      	ldr	r2, [r7, #12]
 800ade4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ade8:	4611      	mov	r1, r2
 800adea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3710      	adds	r7, #16
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b084      	sub	sp, #16
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	32b0      	adds	r2, #176	@ 0xb0
 800ae08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d101      	bne.n	800ae18 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ae14:	2303      	movs	r3, #3
 800ae16:	e024      	b.n	800ae62 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	33b0      	adds	r3, #176	@ 0xb0
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	4413      	add	r3, r2
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d019      	beq.n	800ae60 <USBD_CDC_EP0_RxReady+0x6a>
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ae32:	2bff      	cmp	r3, #255	@ 0xff
 800ae34:	d014      	beq.n	800ae60 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	33b0      	adds	r3, #176	@ 0xb0
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ae4e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ae56:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	22ff      	movs	r2, #255	@ 0xff
 800ae5c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
	...

0800ae6c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b086      	sub	sp, #24
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ae74:	2182      	movs	r1, #130	@ 0x82
 800ae76:	4818      	ldr	r0, [pc, #96]	@ (800aed8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ae78:	f000 fd0f 	bl	800b89a <USBD_GetEpDesc>
 800ae7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ae7e:	2101      	movs	r1, #1
 800ae80:	4815      	ldr	r0, [pc, #84]	@ (800aed8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ae82:	f000 fd0a 	bl	800b89a <USBD_GetEpDesc>
 800ae86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ae88:	2181      	movs	r1, #129	@ 0x81
 800ae8a:	4813      	ldr	r0, [pc, #76]	@ (800aed8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ae8c:	f000 fd05 	bl	800b89a <USBD_GetEpDesc>
 800ae90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d002      	beq.n	800ae9e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	2210      	movs	r2, #16
 800ae9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d006      	beq.n	800aeb2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aeac:	711a      	strb	r2, [r3, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d006      	beq.n	800aec6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aec0:	711a      	strb	r2, [r3, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2243      	movs	r2, #67	@ 0x43
 800aeca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aecc:	4b02      	ldr	r3, [pc, #8]	@ (800aed8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3718      	adds	r7, #24
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	20000054 	.word	0x20000054

0800aedc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aee4:	2182      	movs	r1, #130	@ 0x82
 800aee6:	4818      	ldr	r0, [pc, #96]	@ (800af48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aee8:	f000 fcd7 	bl	800b89a <USBD_GetEpDesc>
 800aeec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aeee:	2101      	movs	r1, #1
 800aef0:	4815      	ldr	r0, [pc, #84]	@ (800af48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aef2:	f000 fcd2 	bl	800b89a <USBD_GetEpDesc>
 800aef6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aef8:	2181      	movs	r1, #129	@ 0x81
 800aefa:	4813      	ldr	r0, [pc, #76]	@ (800af48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aefc:	f000 fccd 	bl	800b89a <USBD_GetEpDesc>
 800af00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d002      	beq.n	800af0e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	2210      	movs	r2, #16
 800af0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d006      	beq.n	800af22 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	2200      	movs	r2, #0
 800af18:	711a      	strb	r2, [r3, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f042 0202 	orr.w	r2, r2, #2
 800af20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d006      	beq.n	800af36 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2200      	movs	r2, #0
 800af2c:	711a      	strb	r2, [r3, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	f042 0202 	orr.w	r2, r2, #2
 800af34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2243      	movs	r2, #67	@ 0x43
 800af3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800af3c:	4b02      	ldr	r3, [pc, #8]	@ (800af48 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3718      	adds	r7, #24
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	20000054 	.word	0x20000054

0800af4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b086      	sub	sp, #24
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800af54:	2182      	movs	r1, #130	@ 0x82
 800af56:	4818      	ldr	r0, [pc, #96]	@ (800afb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800af58:	f000 fc9f 	bl	800b89a <USBD_GetEpDesc>
 800af5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800af5e:	2101      	movs	r1, #1
 800af60:	4815      	ldr	r0, [pc, #84]	@ (800afb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800af62:	f000 fc9a 	bl	800b89a <USBD_GetEpDesc>
 800af66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800af68:	2181      	movs	r1, #129	@ 0x81
 800af6a:	4813      	ldr	r0, [pc, #76]	@ (800afb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800af6c:	f000 fc95 	bl	800b89a <USBD_GetEpDesc>
 800af70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d002      	beq.n	800af7e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	2210      	movs	r2, #16
 800af7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d006      	beq.n	800af92 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	2200      	movs	r2, #0
 800af88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af8c:	711a      	strb	r2, [r3, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d006      	beq.n	800afa6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800afa0:	711a      	strb	r2, [r3, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2243      	movs	r2, #67	@ 0x43
 800afaa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800afac:	4b02      	ldr	r3, [pc, #8]	@ (800afb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3718      	adds	r7, #24
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	20000054 	.word	0x20000054

0800afbc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	220a      	movs	r2, #10
 800afc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800afca:	4b03      	ldr	r3, [pc, #12]	@ (800afd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800afcc:	4618      	mov	r0, r3
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr
 800afd8:	20000010 	.word	0x20000010

0800afdc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d101      	bne.n	800aff0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800afec:	2303      	movs	r3, #3
 800afee:	e009      	b.n	800b004 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	33b0      	adds	r3, #176	@ 0xb0
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	4413      	add	r3, r2
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	370c      	adds	r7, #12
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b010:	b480      	push	{r7}
 800b012:	b087      	sub	sp, #28
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	32b0      	adds	r2, #176	@ 0xb0
 800b026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b02a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d101      	bne.n	800b036 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b032:	2303      	movs	r3, #3
 800b034:	e008      	b.n	800b048 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	68ba      	ldr	r2, [r7, #8]
 800b03a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	371c      	adds	r7, #28
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	32b0      	adds	r2, #176	@ 0xb0
 800b068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b06c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d101      	bne.n	800b078 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b074:	2303      	movs	r3, #3
 800b076:	e004      	b.n	800b082 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3714      	adds	r7, #20
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
	...

0800b090 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	32b0      	adds	r2, #176	@ 0xb0
 800b0a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	32b0      	adds	r2, #176	@ 0xb0
 800b0b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d101      	bne.n	800b0be <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b0ba:	2303      	movs	r3, #3
 800b0bc:	e018      	b.n	800b0f0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	7c1b      	ldrb	r3, [r3, #16]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d10a      	bne.n	800b0dc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b0c6:	4b0c      	ldr	r3, [pc, #48]	@ (800b0f8 <USBD_CDC_ReceivePacket+0x68>)
 800b0c8:	7819      	ldrb	r1, [r3, #0]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b0d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f001 ff9d 	bl	800d014 <USBD_LL_PrepareReceive>
 800b0da:	e008      	b.n	800b0ee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b0dc:	4b06      	ldr	r3, [pc, #24]	@ (800b0f8 <USBD_CDC_ReceivePacket+0x68>)
 800b0de:	7819      	ldrb	r1, [r3, #0]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b0e6:	2340      	movs	r3, #64	@ 0x40
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f001 ff93 	bl	800d014 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	20000098 	.word	0x20000098

0800b0fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b086      	sub	sp, #24
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	4613      	mov	r3, r2
 800b108:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d101      	bne.n	800b114 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b110:	2303      	movs	r3, #3
 800b112:	e01f      	b.n	800b154 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2200      	movs	r2, #0
 800b118:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2200      	movs	r2, #0
 800b120:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2200      	movs	r2, #0
 800b128:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d003      	beq.n	800b13a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	68ba      	ldr	r2, [r7, #8]
 800b136:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2201      	movs	r2, #1
 800b13e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	79fa      	ldrb	r2, [r7, #7]
 800b146:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b148:	68f8      	ldr	r0, [r7, #12]
 800b14a:	f001 fe0d 	bl	800cd68 <USBD_LL_Init>
 800b14e:	4603      	mov	r3, r0
 800b150:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b152:	7dfb      	ldrb	r3, [r7, #23]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3718      	adds	r7, #24
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b166:	2300      	movs	r3, #0
 800b168:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d101      	bne.n	800b174 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b170:	2303      	movs	r3, #3
 800b172:	e025      	b.n	800b1c0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	683a      	ldr	r2, [r7, #0]
 800b178:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	32ae      	adds	r2, #174	@ 0xae
 800b186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b18a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d00f      	beq.n	800b1b0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	32ae      	adds	r2, #174	@ 0xae
 800b19a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1a0:	f107 020e 	add.w	r2, r7, #14
 800b1a4:	4610      	mov	r0, r2
 800b1a6:	4798      	blx	r3
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b1b6:	1c5a      	adds	r2, r3, #1
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3710      	adds	r7, #16
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f001 fe15 	bl	800ce00 <USBD_LL_Start>
 800b1d6:	4603      	mov	r3, r0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3708      	adds	r7, #8
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b1e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	370c      	adds	r7, #12
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr

0800b1f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b084      	sub	sp, #16
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
 800b1fe:	460b      	mov	r3, r1
 800b200:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b202:	2300      	movs	r3, #0
 800b204:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d009      	beq.n	800b224 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	78fa      	ldrb	r2, [r7, #3]
 800b21a:	4611      	mov	r1, r2
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	4798      	blx	r3
 800b220:	4603      	mov	r3, r0
 800b222:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b224:	7bfb      	ldrb	r3, [r7, #15]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b084      	sub	sp, #16
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
 800b236:	460b      	mov	r3, r1
 800b238:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b23a:	2300      	movs	r3, #0
 800b23c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	78fa      	ldrb	r2, [r7, #3]
 800b248:	4611      	mov	r1, r2
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	4798      	blx	r3
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d001      	beq.n	800b258 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b254:	2303      	movs	r3, #3
 800b256:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b258:	7bfb      	ldrb	r3, [r7, #15]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b084      	sub	sp, #16
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
 800b26a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b272:	6839      	ldr	r1, [r7, #0]
 800b274:	4618      	mov	r0, r3
 800b276:	f001 f90c 	bl	800c492 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2201      	movs	r2, #1
 800b27e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b288:	461a      	mov	r2, r3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b296:	f003 031f 	and.w	r3, r3, #31
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d01a      	beq.n	800b2d4 <USBD_LL_SetupStage+0x72>
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	d822      	bhi.n	800b2e8 <USBD_LL_SetupStage+0x86>
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d002      	beq.n	800b2ac <USBD_LL_SetupStage+0x4a>
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d00a      	beq.n	800b2c0 <USBD_LL_SetupStage+0x5e>
 800b2aa:	e01d      	b.n	800b2e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fb63 	bl	800b980 <USBD_StdDevReq>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b2be:	e020      	b.n	800b302 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 fbcb 	bl	800ba64 <USBD_StdItfReq>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	73fb      	strb	r3, [r7, #15]
      break;
 800b2d2:	e016      	b.n	800b302 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b2da:	4619      	mov	r1, r3
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 fc2d 	bl	800bb3c <USBD_StdEPReq>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	73fb      	strb	r3, [r7, #15]
      break;
 800b2e6:	e00c      	b.n	800b302 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b2ee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b2f2:	b2db      	uxtb	r3, r3
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f001 fde2 	bl	800cec0 <USBD_LL_StallEP>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b300:	bf00      	nop
  }

  return ret;
 800b302:	7bfb      	ldrb	r3, [r7, #15]
}
 800b304:	4618      	mov	r0, r3
 800b306:	3710      	adds	r7, #16
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b086      	sub	sp, #24
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	460b      	mov	r3, r1
 800b316:	607a      	str	r2, [r7, #4]
 800b318:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b31a:	2300      	movs	r3, #0
 800b31c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b31e:	7afb      	ldrb	r3, [r7, #11]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d16e      	bne.n	800b402 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b32a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b332:	2b03      	cmp	r3, #3
 800b334:	f040 8098 	bne.w	800b468 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	689a      	ldr	r2, [r3, #8]
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	429a      	cmp	r2, r3
 800b342:	d913      	bls.n	800b36c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	689a      	ldr	r2, [r3, #8]
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	1ad2      	subs	r2, r2, r3
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	68da      	ldr	r2, [r3, #12]
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	689b      	ldr	r3, [r3, #8]
 800b35a:	4293      	cmp	r3, r2
 800b35c:	bf28      	it	cs
 800b35e:	4613      	movcs	r3, r2
 800b360:	461a      	mov	r2, r3
 800b362:	6879      	ldr	r1, [r7, #4]
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	f001 f994 	bl	800c692 <USBD_CtlContinueRx>
 800b36a:	e07d      	b.n	800b468 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b372:	f003 031f 	and.w	r3, r3, #31
 800b376:	2b02      	cmp	r3, #2
 800b378:	d014      	beq.n	800b3a4 <USBD_LL_DataOutStage+0x98>
 800b37a:	2b02      	cmp	r3, #2
 800b37c:	d81d      	bhi.n	800b3ba <USBD_LL_DataOutStage+0xae>
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d002      	beq.n	800b388 <USBD_LL_DataOutStage+0x7c>
 800b382:	2b01      	cmp	r3, #1
 800b384:	d003      	beq.n	800b38e <USBD_LL_DataOutStage+0x82>
 800b386:	e018      	b.n	800b3ba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b388:	2300      	movs	r3, #0
 800b38a:	75bb      	strb	r3, [r7, #22]
            break;
 800b38c:	e018      	b.n	800b3c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b394:	b2db      	uxtb	r3, r3
 800b396:	4619      	mov	r1, r3
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f000 fa64 	bl	800b866 <USBD_CoreFindIF>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	75bb      	strb	r3, [r7, #22]
            break;
 800b3a2:	e00d      	b.n	800b3c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f000 fa66 	bl	800b880 <USBD_CoreFindEP>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	75bb      	strb	r3, [r7, #22]
            break;
 800b3b8:	e002      	b.n	800b3c0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	75bb      	strb	r3, [r7, #22]
            break;
 800b3be:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b3c0:	7dbb      	ldrb	r3, [r7, #22]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d119      	bne.n	800b3fa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	2b03      	cmp	r3, #3
 800b3d0:	d113      	bne.n	800b3fa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b3d2:	7dba      	ldrb	r2, [r7, #22]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	32ae      	adds	r2, #174	@ 0xae
 800b3d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00b      	beq.n	800b3fa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b3e2:	7dba      	ldrb	r2, [r7, #22]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b3ea:	7dba      	ldrb	r2, [r7, #22]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	32ae      	adds	r2, #174	@ 0xae
 800b3f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3f4:	691b      	ldr	r3, [r3, #16]
 800b3f6:	68f8      	ldr	r0, [r7, #12]
 800b3f8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b3fa:	68f8      	ldr	r0, [r7, #12]
 800b3fc:	f001 f95a 	bl	800c6b4 <USBD_CtlSendStatus>
 800b400:	e032      	b.n	800b468 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b402:	7afb      	ldrb	r3, [r7, #11]
 800b404:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	4619      	mov	r1, r3
 800b40c:	68f8      	ldr	r0, [r7, #12]
 800b40e:	f000 fa37 	bl	800b880 <USBD_CoreFindEP>
 800b412:	4603      	mov	r3, r0
 800b414:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b416:	7dbb      	ldrb	r3, [r7, #22]
 800b418:	2bff      	cmp	r3, #255	@ 0xff
 800b41a:	d025      	beq.n	800b468 <USBD_LL_DataOutStage+0x15c>
 800b41c:	7dbb      	ldrb	r3, [r7, #22]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d122      	bne.n	800b468 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	2b03      	cmp	r3, #3
 800b42c:	d117      	bne.n	800b45e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b42e:	7dba      	ldrb	r2, [r7, #22]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	32ae      	adds	r2, #174	@ 0xae
 800b434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00f      	beq.n	800b45e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b43e:	7dba      	ldrb	r2, [r7, #22]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b446:	7dba      	ldrb	r2, [r7, #22]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	32ae      	adds	r2, #174	@ 0xae
 800b44c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b450:	699b      	ldr	r3, [r3, #24]
 800b452:	7afa      	ldrb	r2, [r7, #11]
 800b454:	4611      	mov	r1, r2
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	4798      	blx	r3
 800b45a:	4603      	mov	r3, r0
 800b45c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b45e:	7dfb      	ldrb	r3, [r7, #23]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d001      	beq.n	800b468 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b464:	7dfb      	ldrb	r3, [r7, #23]
 800b466:	e000      	b.n	800b46a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b468:	2300      	movs	r3, #0
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3718      	adds	r7, #24
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}

0800b472 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b472:	b580      	push	{r7, lr}
 800b474:	b086      	sub	sp, #24
 800b476:	af00      	add	r7, sp, #0
 800b478:	60f8      	str	r0, [r7, #12]
 800b47a:	460b      	mov	r3, r1
 800b47c:	607a      	str	r2, [r7, #4]
 800b47e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b480:	7afb      	ldrb	r3, [r7, #11]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d16f      	bne.n	800b566 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	3314      	adds	r3, #20
 800b48a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b492:	2b02      	cmp	r3, #2
 800b494:	d15a      	bne.n	800b54c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	689a      	ldr	r2, [r3, #8]
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d914      	bls.n	800b4cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	689a      	ldr	r2, [r3, #8]
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	1ad2      	subs	r2, r2, r3
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	6879      	ldr	r1, [r7, #4]
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f001 f8bc 	bl	800c636 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4be:	2300      	movs	r3, #0
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	2100      	movs	r1, #0
 800b4c4:	68f8      	ldr	r0, [r7, #12]
 800b4c6:	f001 fda5 	bl	800d014 <USBD_LL_PrepareReceive>
 800b4ca:	e03f      	b.n	800b54c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	68da      	ldr	r2, [r3, #12]
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d11c      	bne.n	800b512 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	685a      	ldr	r2, [r3, #4]
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d316      	bcc.n	800b512 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	685a      	ldr	r2, [r3, #4]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d20f      	bcs.n	800b512 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f001 f89d 	bl	800c636 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b504:	2300      	movs	r3, #0
 800b506:	2200      	movs	r2, #0
 800b508:	2100      	movs	r1, #0
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f001 fd82 	bl	800d014 <USBD_LL_PrepareReceive>
 800b510:	e01c      	b.n	800b54c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	2b03      	cmp	r3, #3
 800b51c:	d10f      	bne.n	800b53e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b524:	68db      	ldr	r3, [r3, #12]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d009      	beq.n	800b53e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2200      	movs	r2, #0
 800b52e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	68f8      	ldr	r0, [r7, #12]
 800b53c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b53e:	2180      	movs	r1, #128	@ 0x80
 800b540:	68f8      	ldr	r0, [r7, #12]
 800b542:	f001 fcbd 	bl	800cec0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b546:	68f8      	ldr	r0, [r7, #12]
 800b548:	f001 f8c7 	bl	800c6da <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d03a      	beq.n	800b5cc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b556:	68f8      	ldr	r0, [r7, #12]
 800b558:	f7ff fe42 	bl	800b1e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2200      	movs	r2, #0
 800b560:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b564:	e032      	b.n	800b5cc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b566:	7afb      	ldrb	r3, [r7, #11]
 800b568:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	4619      	mov	r1, r3
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f000 f985 	bl	800b880 <USBD_CoreFindEP>
 800b576:	4603      	mov	r3, r0
 800b578:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b57a:	7dfb      	ldrb	r3, [r7, #23]
 800b57c:	2bff      	cmp	r3, #255	@ 0xff
 800b57e:	d025      	beq.n	800b5cc <USBD_LL_DataInStage+0x15a>
 800b580:	7dfb      	ldrb	r3, [r7, #23]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d122      	bne.n	800b5cc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	2b03      	cmp	r3, #3
 800b590:	d11c      	bne.n	800b5cc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b592:	7dfa      	ldrb	r2, [r7, #23]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	32ae      	adds	r2, #174	@ 0xae
 800b598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b59c:	695b      	ldr	r3, [r3, #20]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d014      	beq.n	800b5cc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b5a2:	7dfa      	ldrb	r2, [r7, #23]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b5aa:	7dfa      	ldrb	r2, [r7, #23]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	32ae      	adds	r2, #174	@ 0xae
 800b5b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5b4:	695b      	ldr	r3, [r3, #20]
 800b5b6:	7afa      	ldrb	r2, [r7, #11]
 800b5b8:	4611      	mov	r1, r2
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	4798      	blx	r3
 800b5be:	4603      	mov	r3, r0
 800b5c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b5c2:	7dbb      	ldrb	r3, [r7, #22]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d001      	beq.n	800b5cc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b5c8:	7dbb      	ldrb	r3, [r7, #22]
 800b5ca:	e000      	b.n	800b5ce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b5cc:	2300      	movs	r3, #0
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3718      	adds	r7, #24
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b084      	sub	sp, #16
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d014      	beq.n	800b63c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00e      	beq.n	800b63c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	6852      	ldr	r2, [r2, #4]
 800b62a:	b2d2      	uxtb	r2, r2
 800b62c:	4611      	mov	r1, r2
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	4798      	blx	r3
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d001      	beq.n	800b63c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b638:	2303      	movs	r3, #3
 800b63a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b63c:	2340      	movs	r3, #64	@ 0x40
 800b63e:	2200      	movs	r2, #0
 800b640:	2100      	movs	r1, #0
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f001 fbf7 	bl	800ce36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2201      	movs	r2, #1
 800b64c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2240      	movs	r2, #64	@ 0x40
 800b654:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b658:	2340      	movs	r3, #64	@ 0x40
 800b65a:	2200      	movs	r2, #0
 800b65c:	2180      	movs	r1, #128	@ 0x80
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f001 fbe9 	bl	800ce36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2201      	movs	r2, #1
 800b668:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2240      	movs	r2, #64	@ 0x40
 800b66e:	621a      	str	r2, [r3, #32]

  return ret;
 800b670:	7bfb      	ldrb	r3, [r7, #15]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}

0800b67a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b67a:	b480      	push	{r7}
 800b67c:	b083      	sub	sp, #12
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
 800b682:	460b      	mov	r3, r1
 800b684:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	78fa      	ldrb	r2, [r7, #3]
 800b68a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	370c      	adds	r7, #12
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr

0800b69a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b69a:	b480      	push	{r7}
 800b69c:	b083      	sub	sp, #12
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6a8:	b2db      	uxtb	r3, r3
 800b6aa:	2b04      	cmp	r3, #4
 800b6ac:	d006      	beq.n	800b6bc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6b4:	b2da      	uxtb	r2, r3
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2204      	movs	r2, #4
 800b6c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b6c4:	2300      	movs	r3, #0
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	370c      	adds	r7, #12
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr

0800b6d2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b6d2:	b480      	push	{r7}
 800b6d4:	b083      	sub	sp, #12
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	2b04      	cmp	r3, #4
 800b6e4:	d106      	bne.n	800b6f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b6ec:	b2da      	uxtb	r2, r3
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	370c      	adds	r7, #12
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr

0800b702 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b702:	b580      	push	{r7, lr}
 800b704:	b082      	sub	sp, #8
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b710:	b2db      	uxtb	r3, r3
 800b712:	2b03      	cmp	r3, #3
 800b714:	d110      	bne.n	800b738 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d00b      	beq.n	800b738 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b726:	69db      	ldr	r3, [r3, #28]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d005      	beq.n	800b738 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b732:	69db      	ldr	r3, [r3, #28]
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b738:	2300      	movs	r3, #0
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3708      	adds	r7, #8
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}

0800b742 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b742:	b580      	push	{r7, lr}
 800b744:	b082      	sub	sp, #8
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	460b      	mov	r3, r1
 800b74c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	32ae      	adds	r2, #174	@ 0xae
 800b758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d101      	bne.n	800b764 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b760:	2303      	movs	r3, #3
 800b762:	e01c      	b.n	800b79e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	2b03      	cmp	r3, #3
 800b76e:	d115      	bne.n	800b79c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	32ae      	adds	r2, #174	@ 0xae
 800b77a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b77e:	6a1b      	ldr	r3, [r3, #32]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00b      	beq.n	800b79c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	32ae      	adds	r2, #174	@ 0xae
 800b78e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b792:	6a1b      	ldr	r3, [r3, #32]
 800b794:	78fa      	ldrb	r2, [r7, #3]
 800b796:	4611      	mov	r1, r2
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b082      	sub	sp, #8
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	32ae      	adds	r2, #174	@ 0xae
 800b7bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d101      	bne.n	800b7c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b7c4:	2303      	movs	r3, #3
 800b7c6:	e01c      	b.n	800b802 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	2b03      	cmp	r3, #3
 800b7d2:	d115      	bne.n	800b800 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	32ae      	adds	r2, #174	@ 0xae
 800b7de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d00b      	beq.n	800b800 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	32ae      	adds	r2, #174	@ 0xae
 800b7f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7f8:	78fa      	ldrb	r2, [r7, #3]
 800b7fa:	4611      	mov	r1, r2
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b800:	2300      	movs	r3, #0
}
 800b802:	4618      	mov	r0, r3
 800b804:	3708      	adds	r7, #8
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}

0800b80a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b80a:	b480      	push	{r7}
 800b80c:	b083      	sub	sp, #12
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b812:	2300      	movs	r3, #0
}
 800b814:	4618      	mov	r0, r3
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b828:	2300      	movs	r3, #0
 800b82a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00e      	beq.n	800b85c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	6852      	ldr	r2, [r2, #4]
 800b84a:	b2d2      	uxtb	r2, r2
 800b84c:	4611      	mov	r1, r2
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	4798      	blx	r3
 800b852:	4603      	mov	r3, r0
 800b854:	2b00      	cmp	r3, #0
 800b856:	d001      	beq.n	800b85c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b858:	2303      	movs	r3, #3
 800b85a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b866:	b480      	push	{r7}
 800b868:	b083      	sub	sp, #12
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
 800b86e:	460b      	mov	r3, r1
 800b870:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b872:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b874:	4618      	mov	r0, r3
 800b876:	370c      	adds	r7, #12
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	460b      	mov	r3, r1
 800b88a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b88c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b88e:	4618      	mov	r0, r3
 800b890:	370c      	adds	r7, #12
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b086      	sub	sp, #24
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	885b      	ldrh	r3, [r3, #2]
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	68fa      	ldr	r2, [r7, #12]
 800b8ba:	7812      	ldrb	r2, [r2, #0]
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d91f      	bls.n	800b900 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b8c6:	e013      	b.n	800b8f0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b8c8:	f107 030a 	add.w	r3, r7, #10
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	6978      	ldr	r0, [r7, #20]
 800b8d0:	f000 f81b 	bl	800b90a <USBD_GetNextDesc>
 800b8d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	785b      	ldrb	r3, [r3, #1]
 800b8da:	2b05      	cmp	r3, #5
 800b8dc:	d108      	bne.n	800b8f0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	789b      	ldrb	r3, [r3, #2]
 800b8e6:	78fa      	ldrb	r2, [r7, #3]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d008      	beq.n	800b8fe <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	885b      	ldrh	r3, [r3, #2]
 800b8f4:	b29a      	uxth	r2, r3
 800b8f6:	897b      	ldrh	r3, [r7, #10]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d8e5      	bhi.n	800b8c8 <USBD_GetEpDesc+0x2e>
 800b8fc:	e000      	b.n	800b900 <USBD_GetEpDesc+0x66>
          break;
 800b8fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b900:	693b      	ldr	r3, [r7, #16]
}
 800b902:	4618      	mov	r0, r3
 800b904:	3718      	adds	r7, #24
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b90a:	b480      	push	{r7}
 800b90c:	b085      	sub	sp, #20
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
 800b912:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	881b      	ldrh	r3, [r3, #0]
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	7812      	ldrb	r2, [r2, #0]
 800b920:	4413      	add	r3, r2
 800b922:	b29a      	uxth	r2, r3
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	461a      	mov	r2, r3
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	4413      	add	r3, r2
 800b932:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b934:	68fb      	ldr	r3, [r7, #12]
}
 800b936:	4618      	mov	r0, r3
 800b938:	3714      	adds	r7, #20
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr

0800b942 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b942:	b480      	push	{r7}
 800b944:	b087      	sub	sp, #28
 800b946:	af00      	add	r7, sp, #0
 800b948:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	3301      	adds	r3, #1
 800b958:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b960:	8a3b      	ldrh	r3, [r7, #16]
 800b962:	021b      	lsls	r3, r3, #8
 800b964:	b21a      	sxth	r2, r3
 800b966:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	b21b      	sxth	r3, r3
 800b96e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b970:	89fb      	ldrh	r3, [r7, #14]
}
 800b972:	4618      	mov	r0, r3
 800b974:	371c      	adds	r7, #28
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr
	...

0800b980 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b98a:	2300      	movs	r3, #0
 800b98c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b996:	2b40      	cmp	r3, #64	@ 0x40
 800b998:	d005      	beq.n	800b9a6 <USBD_StdDevReq+0x26>
 800b99a:	2b40      	cmp	r3, #64	@ 0x40
 800b99c:	d857      	bhi.n	800ba4e <USBD_StdDevReq+0xce>
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d00f      	beq.n	800b9c2 <USBD_StdDevReq+0x42>
 800b9a2:	2b20      	cmp	r3, #32
 800b9a4:	d153      	bne.n	800ba4e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	32ae      	adds	r2, #174	@ 0xae
 800b9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	6839      	ldr	r1, [r7, #0]
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	4798      	blx	r3
 800b9bc:	4603      	mov	r3, r0
 800b9be:	73fb      	strb	r3, [r7, #15]
      break;
 800b9c0:	e04a      	b.n	800ba58 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	785b      	ldrb	r3, [r3, #1]
 800b9c6:	2b09      	cmp	r3, #9
 800b9c8:	d83b      	bhi.n	800ba42 <USBD_StdDevReq+0xc2>
 800b9ca:	a201      	add	r2, pc, #4	@ (adr r2, 800b9d0 <USBD_StdDevReq+0x50>)
 800b9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d0:	0800ba25 	.word	0x0800ba25
 800b9d4:	0800ba39 	.word	0x0800ba39
 800b9d8:	0800ba43 	.word	0x0800ba43
 800b9dc:	0800ba2f 	.word	0x0800ba2f
 800b9e0:	0800ba43 	.word	0x0800ba43
 800b9e4:	0800ba03 	.word	0x0800ba03
 800b9e8:	0800b9f9 	.word	0x0800b9f9
 800b9ec:	0800ba43 	.word	0x0800ba43
 800b9f0:	0800ba1b 	.word	0x0800ba1b
 800b9f4:	0800ba0d 	.word	0x0800ba0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b9f8:	6839      	ldr	r1, [r7, #0]
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 fa3c 	bl	800be78 <USBD_GetDescriptor>
          break;
 800ba00:	e024      	b.n	800ba4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ba02:	6839      	ldr	r1, [r7, #0]
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 fba1 	bl	800c14c <USBD_SetAddress>
          break;
 800ba0a:	e01f      	b.n	800ba4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ba0c:	6839      	ldr	r1, [r7, #0]
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 fbe0 	bl	800c1d4 <USBD_SetConfig>
 800ba14:	4603      	mov	r3, r0
 800ba16:	73fb      	strb	r3, [r7, #15]
          break;
 800ba18:	e018      	b.n	800ba4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ba1a:	6839      	ldr	r1, [r7, #0]
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 fc83 	bl	800c328 <USBD_GetConfig>
          break;
 800ba22:	e013      	b.n	800ba4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ba24:	6839      	ldr	r1, [r7, #0]
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 fcb4 	bl	800c394 <USBD_GetStatus>
          break;
 800ba2c:	e00e      	b.n	800ba4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ba2e:	6839      	ldr	r1, [r7, #0]
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 fce3 	bl	800c3fc <USBD_SetFeature>
          break;
 800ba36:	e009      	b.n	800ba4c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ba38:	6839      	ldr	r1, [r7, #0]
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 fd07 	bl	800c44e <USBD_ClrFeature>
          break;
 800ba40:	e004      	b.n	800ba4c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ba42:	6839      	ldr	r1, [r7, #0]
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 fd5e 	bl	800c506 <USBD_CtlError>
          break;
 800ba4a:	bf00      	nop
      }
      break;
 800ba4c:	e004      	b.n	800ba58 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ba4e:	6839      	ldr	r1, [r7, #0]
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 fd58 	bl	800c506 <USBD_CtlError>
      break;
 800ba56:	bf00      	nop
  }

  return ret;
 800ba58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop

0800ba64 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba7a:	2b40      	cmp	r3, #64	@ 0x40
 800ba7c:	d005      	beq.n	800ba8a <USBD_StdItfReq+0x26>
 800ba7e:	2b40      	cmp	r3, #64	@ 0x40
 800ba80:	d852      	bhi.n	800bb28 <USBD_StdItfReq+0xc4>
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d001      	beq.n	800ba8a <USBD_StdItfReq+0x26>
 800ba86:	2b20      	cmp	r3, #32
 800ba88:	d14e      	bne.n	800bb28 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	3b01      	subs	r3, #1
 800ba94:	2b02      	cmp	r3, #2
 800ba96:	d840      	bhi.n	800bb1a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	889b      	ldrh	r3, [r3, #4]
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d836      	bhi.n	800bb10 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	889b      	ldrh	r3, [r3, #4]
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	4619      	mov	r1, r3
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f7ff fedb 	bl	800b866 <USBD_CoreFindIF>
 800bab0:	4603      	mov	r3, r0
 800bab2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bab4:	7bbb      	ldrb	r3, [r7, #14]
 800bab6:	2bff      	cmp	r3, #255	@ 0xff
 800bab8:	d01d      	beq.n	800baf6 <USBD_StdItfReq+0x92>
 800baba:	7bbb      	ldrb	r3, [r7, #14]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d11a      	bne.n	800baf6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bac0:	7bba      	ldrb	r2, [r7, #14]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	32ae      	adds	r2, #174	@ 0xae
 800bac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baca:	689b      	ldr	r3, [r3, #8]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d00f      	beq.n	800baf0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bad0:	7bba      	ldrb	r2, [r7, #14]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bad8:	7bba      	ldrb	r2, [r7, #14]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	32ae      	adds	r2, #174	@ 0xae
 800bade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	6839      	ldr	r1, [r7, #0]
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	4798      	blx	r3
 800baea:	4603      	mov	r3, r0
 800baec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800baee:	e004      	b.n	800bafa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800baf0:	2303      	movs	r3, #3
 800baf2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800baf4:	e001      	b.n	800bafa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800baf6:	2303      	movs	r3, #3
 800baf8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	88db      	ldrh	r3, [r3, #6]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d110      	bne.n	800bb24 <USBD_StdItfReq+0xc0>
 800bb02:	7bfb      	ldrb	r3, [r7, #15]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d10d      	bne.n	800bb24 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 fdd3 	bl	800c6b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bb0e:	e009      	b.n	800bb24 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bb10:	6839      	ldr	r1, [r7, #0]
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 fcf7 	bl	800c506 <USBD_CtlError>
          break;
 800bb18:	e004      	b.n	800bb24 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bb1a:	6839      	ldr	r1, [r7, #0]
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 fcf2 	bl	800c506 <USBD_CtlError>
          break;
 800bb22:	e000      	b.n	800bb26 <USBD_StdItfReq+0xc2>
          break;
 800bb24:	bf00      	nop
      }
      break;
 800bb26:	e004      	b.n	800bb32 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bb28:	6839      	ldr	r1, [r7, #0]
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 fceb 	bl	800c506 <USBD_CtlError>
      break;
 800bb30:	bf00      	nop
  }

  return ret;
 800bb32:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	889b      	ldrh	r3, [r3, #4]
 800bb4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bb58:	2b40      	cmp	r3, #64	@ 0x40
 800bb5a:	d007      	beq.n	800bb6c <USBD_StdEPReq+0x30>
 800bb5c:	2b40      	cmp	r3, #64	@ 0x40
 800bb5e:	f200 817f 	bhi.w	800be60 <USBD_StdEPReq+0x324>
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d02a      	beq.n	800bbbc <USBD_StdEPReq+0x80>
 800bb66:	2b20      	cmp	r3, #32
 800bb68:	f040 817a 	bne.w	800be60 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bb6c:	7bbb      	ldrb	r3, [r7, #14]
 800bb6e:	4619      	mov	r1, r3
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f7ff fe85 	bl	800b880 <USBD_CoreFindEP>
 800bb76:	4603      	mov	r3, r0
 800bb78:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb7a:	7b7b      	ldrb	r3, [r7, #13]
 800bb7c:	2bff      	cmp	r3, #255	@ 0xff
 800bb7e:	f000 8174 	beq.w	800be6a <USBD_StdEPReq+0x32e>
 800bb82:	7b7b      	ldrb	r3, [r7, #13]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	f040 8170 	bne.w	800be6a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bb8a:	7b7a      	ldrb	r2, [r7, #13]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bb92:	7b7a      	ldrb	r2, [r7, #13]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	32ae      	adds	r2, #174	@ 0xae
 800bb98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	f000 8163 	beq.w	800be6a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bba4:	7b7a      	ldrb	r2, [r7, #13]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	32ae      	adds	r2, #174	@ 0xae
 800bbaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbae:	689b      	ldr	r3, [r3, #8]
 800bbb0:	6839      	ldr	r1, [r7, #0]
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	4798      	blx	r3
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bbba:	e156      	b.n	800be6a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	785b      	ldrb	r3, [r3, #1]
 800bbc0:	2b03      	cmp	r3, #3
 800bbc2:	d008      	beq.n	800bbd6 <USBD_StdEPReq+0x9a>
 800bbc4:	2b03      	cmp	r3, #3
 800bbc6:	f300 8145 	bgt.w	800be54 <USBD_StdEPReq+0x318>
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	f000 809b 	beq.w	800bd06 <USBD_StdEPReq+0x1ca>
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d03c      	beq.n	800bc4e <USBD_StdEPReq+0x112>
 800bbd4:	e13e      	b.n	800be54 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	2b02      	cmp	r3, #2
 800bbe0:	d002      	beq.n	800bbe8 <USBD_StdEPReq+0xac>
 800bbe2:	2b03      	cmp	r3, #3
 800bbe4:	d016      	beq.n	800bc14 <USBD_StdEPReq+0xd8>
 800bbe6:	e02c      	b.n	800bc42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbe8:	7bbb      	ldrb	r3, [r7, #14]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00d      	beq.n	800bc0a <USBD_StdEPReq+0xce>
 800bbee:	7bbb      	ldrb	r3, [r7, #14]
 800bbf0:	2b80      	cmp	r3, #128	@ 0x80
 800bbf2:	d00a      	beq.n	800bc0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bbf4:	7bbb      	ldrb	r3, [r7, #14]
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f001 f961 	bl	800cec0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbfe:	2180      	movs	r1, #128	@ 0x80
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f001 f95d 	bl	800cec0 <USBD_LL_StallEP>
 800bc06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc08:	e020      	b.n	800bc4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bc0a:	6839      	ldr	r1, [r7, #0]
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 fc7a 	bl	800c506 <USBD_CtlError>
              break;
 800bc12:	e01b      	b.n	800bc4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	885b      	ldrh	r3, [r3, #2]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d10e      	bne.n	800bc3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bc1c:	7bbb      	ldrb	r3, [r7, #14]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d00b      	beq.n	800bc3a <USBD_StdEPReq+0xfe>
 800bc22:	7bbb      	ldrb	r3, [r7, #14]
 800bc24:	2b80      	cmp	r3, #128	@ 0x80
 800bc26:	d008      	beq.n	800bc3a <USBD_StdEPReq+0xfe>
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	88db      	ldrh	r3, [r3, #6]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d104      	bne.n	800bc3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc30:	7bbb      	ldrb	r3, [r7, #14]
 800bc32:	4619      	mov	r1, r3
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f001 f943 	bl	800cec0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 fd3a 	bl	800c6b4 <USBD_CtlSendStatus>

              break;
 800bc40:	e004      	b.n	800bc4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bc42:	6839      	ldr	r1, [r7, #0]
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 fc5e 	bl	800c506 <USBD_CtlError>
              break;
 800bc4a:	bf00      	nop
          }
          break;
 800bc4c:	e107      	b.n	800be5e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	2b02      	cmp	r3, #2
 800bc58:	d002      	beq.n	800bc60 <USBD_StdEPReq+0x124>
 800bc5a:	2b03      	cmp	r3, #3
 800bc5c:	d016      	beq.n	800bc8c <USBD_StdEPReq+0x150>
 800bc5e:	e04b      	b.n	800bcf8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc60:	7bbb      	ldrb	r3, [r7, #14]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00d      	beq.n	800bc82 <USBD_StdEPReq+0x146>
 800bc66:	7bbb      	ldrb	r3, [r7, #14]
 800bc68:	2b80      	cmp	r3, #128	@ 0x80
 800bc6a:	d00a      	beq.n	800bc82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc6c:	7bbb      	ldrb	r3, [r7, #14]
 800bc6e:	4619      	mov	r1, r3
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f001 f925 	bl	800cec0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc76:	2180      	movs	r1, #128	@ 0x80
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f001 f921 	bl	800cec0 <USBD_LL_StallEP>
 800bc7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc80:	e040      	b.n	800bd04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bc82:	6839      	ldr	r1, [r7, #0]
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f000 fc3e 	bl	800c506 <USBD_CtlError>
              break;
 800bc8a:	e03b      	b.n	800bd04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	885b      	ldrh	r3, [r3, #2]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d136      	bne.n	800bd02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bc94:	7bbb      	ldrb	r3, [r7, #14]
 800bc96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d004      	beq.n	800bca8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bc9e:	7bbb      	ldrb	r3, [r7, #14]
 800bca0:	4619      	mov	r1, r3
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f001 f92b 	bl	800cefe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f000 fd03 	bl	800c6b4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bcae:	7bbb      	ldrb	r3, [r7, #14]
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7ff fde4 	bl	800b880 <USBD_CoreFindEP>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcbc:	7b7b      	ldrb	r3, [r7, #13]
 800bcbe:	2bff      	cmp	r3, #255	@ 0xff
 800bcc0:	d01f      	beq.n	800bd02 <USBD_StdEPReq+0x1c6>
 800bcc2:	7b7b      	ldrb	r3, [r7, #13]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d11c      	bne.n	800bd02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bcc8:	7b7a      	ldrb	r2, [r7, #13]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bcd0:	7b7a      	ldrb	r2, [r7, #13]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	32ae      	adds	r2, #174	@ 0xae
 800bcd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcda:	689b      	ldr	r3, [r3, #8]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d010      	beq.n	800bd02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bce0:	7b7a      	ldrb	r2, [r7, #13]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	32ae      	adds	r2, #174	@ 0xae
 800bce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcea:	689b      	ldr	r3, [r3, #8]
 800bcec:	6839      	ldr	r1, [r7, #0]
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	4798      	blx	r3
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bcf6:	e004      	b.n	800bd02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bcf8:	6839      	ldr	r1, [r7, #0]
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 fc03 	bl	800c506 <USBD_CtlError>
              break;
 800bd00:	e000      	b.n	800bd04 <USBD_StdEPReq+0x1c8>
              break;
 800bd02:	bf00      	nop
          }
          break;
 800bd04:	e0ab      	b.n	800be5e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	2b02      	cmp	r3, #2
 800bd10:	d002      	beq.n	800bd18 <USBD_StdEPReq+0x1dc>
 800bd12:	2b03      	cmp	r3, #3
 800bd14:	d032      	beq.n	800bd7c <USBD_StdEPReq+0x240>
 800bd16:	e097      	b.n	800be48 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd18:	7bbb      	ldrb	r3, [r7, #14]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d007      	beq.n	800bd2e <USBD_StdEPReq+0x1f2>
 800bd1e:	7bbb      	ldrb	r3, [r7, #14]
 800bd20:	2b80      	cmp	r3, #128	@ 0x80
 800bd22:	d004      	beq.n	800bd2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bd24:	6839      	ldr	r1, [r7, #0]
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f000 fbed 	bl	800c506 <USBD_CtlError>
                break;
 800bd2c:	e091      	b.n	800be52 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	da0b      	bge.n	800bd4e <USBD_StdEPReq+0x212>
 800bd36:	7bbb      	ldrb	r3, [r7, #14]
 800bd38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	4413      	add	r3, r2
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	3310      	adds	r3, #16
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	4413      	add	r3, r2
 800bd4a:	3304      	adds	r3, #4
 800bd4c:	e00b      	b.n	800bd66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd4e:	7bbb      	ldrb	r3, [r7, #14]
 800bd50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd54:	4613      	mov	r3, r2
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	4413      	add	r3, r2
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	4413      	add	r3, r2
 800bd64:	3304      	adds	r3, #4
 800bd66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	2202      	movs	r2, #2
 800bd72:	4619      	mov	r1, r3
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f000 fc43 	bl	800c600 <USBD_CtlSendData>
              break;
 800bd7a:	e06a      	b.n	800be52 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bd7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	da11      	bge.n	800bda8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bd84:	7bbb      	ldrb	r3, [r7, #14]
 800bd86:	f003 020f 	and.w	r2, r3, #15
 800bd8a:	6879      	ldr	r1, [r7, #4]
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	4413      	add	r3, r2
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	440b      	add	r3, r1
 800bd96:	3324      	adds	r3, #36	@ 0x24
 800bd98:	881b      	ldrh	r3, [r3, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d117      	bne.n	800bdce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bd9e:	6839      	ldr	r1, [r7, #0]
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 fbb0 	bl	800c506 <USBD_CtlError>
                  break;
 800bda6:	e054      	b.n	800be52 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bda8:	7bbb      	ldrb	r3, [r7, #14]
 800bdaa:	f003 020f 	and.w	r2, r3, #15
 800bdae:	6879      	ldr	r1, [r7, #4]
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	4413      	add	r3, r2
 800bdb6:	009b      	lsls	r3, r3, #2
 800bdb8:	440b      	add	r3, r1
 800bdba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bdbe:	881b      	ldrh	r3, [r3, #0]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d104      	bne.n	800bdce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bdc4:	6839      	ldr	r1, [r7, #0]
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fb9d 	bl	800c506 <USBD_CtlError>
                  break;
 800bdcc:	e041      	b.n	800be52 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	da0b      	bge.n	800bdee <USBD_StdEPReq+0x2b2>
 800bdd6:	7bbb      	ldrb	r3, [r7, #14]
 800bdd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bddc:	4613      	mov	r3, r2
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	4413      	add	r3, r2
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	3310      	adds	r3, #16
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	4413      	add	r3, r2
 800bdea:	3304      	adds	r3, #4
 800bdec:	e00b      	b.n	800be06 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bdee:	7bbb      	ldrb	r3, [r7, #14]
 800bdf0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdf4:	4613      	mov	r3, r2
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	4413      	add	r3, r2
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	4413      	add	r3, r2
 800be04:	3304      	adds	r3, #4
 800be06:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800be08:	7bbb      	ldrb	r3, [r7, #14]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d002      	beq.n	800be14 <USBD_StdEPReq+0x2d8>
 800be0e:	7bbb      	ldrb	r3, [r7, #14]
 800be10:	2b80      	cmp	r3, #128	@ 0x80
 800be12:	d103      	bne.n	800be1c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	2200      	movs	r2, #0
 800be18:	601a      	str	r2, [r3, #0]
 800be1a:	e00e      	b.n	800be3a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800be1c:	7bbb      	ldrb	r3, [r7, #14]
 800be1e:	4619      	mov	r1, r3
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f001 f88b 	bl	800cf3c <USBD_LL_IsStallEP>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d003      	beq.n	800be34 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	2201      	movs	r2, #1
 800be30:	601a      	str	r2, [r3, #0]
 800be32:	e002      	b.n	800be3a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	2200      	movs	r2, #0
 800be38:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	2202      	movs	r2, #2
 800be3e:	4619      	mov	r1, r3
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 fbdd 	bl	800c600 <USBD_CtlSendData>
              break;
 800be46:	e004      	b.n	800be52 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800be48:	6839      	ldr	r1, [r7, #0]
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 fb5b 	bl	800c506 <USBD_CtlError>
              break;
 800be50:	bf00      	nop
          }
          break;
 800be52:	e004      	b.n	800be5e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800be54:	6839      	ldr	r1, [r7, #0]
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 fb55 	bl	800c506 <USBD_CtlError>
          break;
 800be5c:	bf00      	nop
      }
      break;
 800be5e:	e005      	b.n	800be6c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800be60:	6839      	ldr	r1, [r7, #0]
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 fb4f 	bl	800c506 <USBD_CtlError>
      break;
 800be68:	e000      	b.n	800be6c <USBD_StdEPReq+0x330>
      break;
 800be6a:	bf00      	nop
  }

  return ret;
 800be6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
	...

0800be78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800be82:	2300      	movs	r3, #0
 800be84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800be86:	2300      	movs	r3, #0
 800be88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800be8a:	2300      	movs	r3, #0
 800be8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	885b      	ldrh	r3, [r3, #2]
 800be92:	0a1b      	lsrs	r3, r3, #8
 800be94:	b29b      	uxth	r3, r3
 800be96:	3b01      	subs	r3, #1
 800be98:	2b06      	cmp	r3, #6
 800be9a:	f200 8128 	bhi.w	800c0ee <USBD_GetDescriptor+0x276>
 800be9e:	a201      	add	r2, pc, #4	@ (adr r2, 800bea4 <USBD_GetDescriptor+0x2c>)
 800bea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea4:	0800bec1 	.word	0x0800bec1
 800bea8:	0800bed9 	.word	0x0800bed9
 800beac:	0800bf19 	.word	0x0800bf19
 800beb0:	0800c0ef 	.word	0x0800c0ef
 800beb4:	0800c0ef 	.word	0x0800c0ef
 800beb8:	0800c08f 	.word	0x0800c08f
 800bebc:	0800c0bb 	.word	0x0800c0bb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	7c12      	ldrb	r2, [r2, #16]
 800becc:	f107 0108 	add.w	r1, r7, #8
 800bed0:	4610      	mov	r0, r2
 800bed2:	4798      	blx	r3
 800bed4:	60f8      	str	r0, [r7, #12]
      break;
 800bed6:	e112      	b.n	800c0fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	7c1b      	ldrb	r3, [r3, #16]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d10d      	bne.n	800befc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bee8:	f107 0208 	add.w	r2, r7, #8
 800beec:	4610      	mov	r0, r2
 800beee:	4798      	blx	r3
 800bef0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	3301      	adds	r3, #1
 800bef6:	2202      	movs	r2, #2
 800bef8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800befa:	e100      	b.n	800c0fe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf04:	f107 0208 	add.w	r2, r7, #8
 800bf08:	4610      	mov	r0, r2
 800bf0a:	4798      	blx	r3
 800bf0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	3301      	adds	r3, #1
 800bf12:	2202      	movs	r2, #2
 800bf14:	701a      	strb	r2, [r3, #0]
      break;
 800bf16:	e0f2      	b.n	800c0fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	885b      	ldrh	r3, [r3, #2]
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	2b05      	cmp	r3, #5
 800bf20:	f200 80ac 	bhi.w	800c07c <USBD_GetDescriptor+0x204>
 800bf24:	a201      	add	r2, pc, #4	@ (adr r2, 800bf2c <USBD_GetDescriptor+0xb4>)
 800bf26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf2a:	bf00      	nop
 800bf2c:	0800bf45 	.word	0x0800bf45
 800bf30:	0800bf79 	.word	0x0800bf79
 800bf34:	0800bfad 	.word	0x0800bfad
 800bf38:	0800bfe1 	.word	0x0800bfe1
 800bf3c:	0800c015 	.word	0x0800c015
 800bf40:	0800c049 	.word	0x0800c049
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d00b      	beq.n	800bf68 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	7c12      	ldrb	r2, [r2, #16]
 800bf5c:	f107 0108 	add.w	r1, r7, #8
 800bf60:	4610      	mov	r0, r2
 800bf62:	4798      	blx	r3
 800bf64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf66:	e091      	b.n	800c08c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf68:	6839      	ldr	r1, [r7, #0]
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 facb 	bl	800c506 <USBD_CtlError>
            err++;
 800bf70:	7afb      	ldrb	r3, [r7, #11]
 800bf72:	3301      	adds	r3, #1
 800bf74:	72fb      	strb	r3, [r7, #11]
          break;
 800bf76:	e089      	b.n	800c08c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d00b      	beq.n	800bf9c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf8a:	689b      	ldr	r3, [r3, #8]
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	7c12      	ldrb	r2, [r2, #16]
 800bf90:	f107 0108 	add.w	r1, r7, #8
 800bf94:	4610      	mov	r0, r2
 800bf96:	4798      	blx	r3
 800bf98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf9a:	e077      	b.n	800c08c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf9c:	6839      	ldr	r1, [r7, #0]
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 fab1 	bl	800c506 <USBD_CtlError>
            err++;
 800bfa4:	7afb      	ldrb	r3, [r7, #11]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	72fb      	strb	r3, [r7, #11]
          break;
 800bfaa:	e06f      	b.n	800c08c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00b      	beq.n	800bfd0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	7c12      	ldrb	r2, [r2, #16]
 800bfc4:	f107 0108 	add.w	r1, r7, #8
 800bfc8:	4610      	mov	r0, r2
 800bfca:	4798      	blx	r3
 800bfcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfce:	e05d      	b.n	800c08c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfd0:	6839      	ldr	r1, [r7, #0]
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 fa97 	bl	800c506 <USBD_CtlError>
            err++;
 800bfd8:	7afb      	ldrb	r3, [r7, #11]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	72fb      	strb	r3, [r7, #11]
          break;
 800bfde:	e055      	b.n	800c08c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d00b      	beq.n	800c004 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bff2:	691b      	ldr	r3, [r3, #16]
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	7c12      	ldrb	r2, [r2, #16]
 800bff8:	f107 0108 	add.w	r1, r7, #8
 800bffc:	4610      	mov	r0, r2
 800bffe:	4798      	blx	r3
 800c000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c002:	e043      	b.n	800c08c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c004:	6839      	ldr	r1, [r7, #0]
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 fa7d 	bl	800c506 <USBD_CtlError>
            err++;
 800c00c:	7afb      	ldrb	r3, [r7, #11]
 800c00e:	3301      	adds	r3, #1
 800c010:	72fb      	strb	r3, [r7, #11]
          break;
 800c012:	e03b      	b.n	800c08c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c01a:	695b      	ldr	r3, [r3, #20]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00b      	beq.n	800c038 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c026:	695b      	ldr	r3, [r3, #20]
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	7c12      	ldrb	r2, [r2, #16]
 800c02c:	f107 0108 	add.w	r1, r7, #8
 800c030:	4610      	mov	r0, r2
 800c032:	4798      	blx	r3
 800c034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c036:	e029      	b.n	800c08c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c038:	6839      	ldr	r1, [r7, #0]
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 fa63 	bl	800c506 <USBD_CtlError>
            err++;
 800c040:	7afb      	ldrb	r3, [r7, #11]
 800c042:	3301      	adds	r3, #1
 800c044:	72fb      	strb	r3, [r7, #11]
          break;
 800c046:	e021      	b.n	800c08c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c04e:	699b      	ldr	r3, [r3, #24]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d00b      	beq.n	800c06c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c05a:	699b      	ldr	r3, [r3, #24]
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	7c12      	ldrb	r2, [r2, #16]
 800c060:	f107 0108 	add.w	r1, r7, #8
 800c064:	4610      	mov	r0, r2
 800c066:	4798      	blx	r3
 800c068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c06a:	e00f      	b.n	800c08c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c06c:	6839      	ldr	r1, [r7, #0]
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 fa49 	bl	800c506 <USBD_CtlError>
            err++;
 800c074:	7afb      	ldrb	r3, [r7, #11]
 800c076:	3301      	adds	r3, #1
 800c078:	72fb      	strb	r3, [r7, #11]
          break;
 800c07a:	e007      	b.n	800c08c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c07c:	6839      	ldr	r1, [r7, #0]
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fa41 	bl	800c506 <USBD_CtlError>
          err++;
 800c084:	7afb      	ldrb	r3, [r7, #11]
 800c086:	3301      	adds	r3, #1
 800c088:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c08a:	bf00      	nop
      }
      break;
 800c08c:	e037      	b.n	800c0fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	7c1b      	ldrb	r3, [r3, #16]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d109      	bne.n	800c0aa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c09c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c09e:	f107 0208 	add.w	r2, r7, #8
 800c0a2:	4610      	mov	r0, r2
 800c0a4:	4798      	blx	r3
 800c0a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c0a8:	e029      	b.n	800c0fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c0aa:	6839      	ldr	r1, [r7, #0]
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 fa2a 	bl	800c506 <USBD_CtlError>
        err++;
 800c0b2:	7afb      	ldrb	r3, [r7, #11]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	72fb      	strb	r3, [r7, #11]
      break;
 800c0b8:	e021      	b.n	800c0fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	7c1b      	ldrb	r3, [r3, #16]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d10d      	bne.n	800c0de <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0ca:	f107 0208 	add.w	r2, r7, #8
 800c0ce:	4610      	mov	r0, r2
 800c0d0:	4798      	blx	r3
 800c0d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	2207      	movs	r2, #7
 800c0da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c0dc:	e00f      	b.n	800c0fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c0de:	6839      	ldr	r1, [r7, #0]
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 fa10 	bl	800c506 <USBD_CtlError>
        err++;
 800c0e6:	7afb      	ldrb	r3, [r7, #11]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	72fb      	strb	r3, [r7, #11]
      break;
 800c0ec:	e007      	b.n	800c0fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c0ee:	6839      	ldr	r1, [r7, #0]
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 fa08 	bl	800c506 <USBD_CtlError>
      err++;
 800c0f6:	7afb      	ldrb	r3, [r7, #11]
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	72fb      	strb	r3, [r7, #11]
      break;
 800c0fc:	bf00      	nop
  }

  if (err != 0U)
 800c0fe:	7afb      	ldrb	r3, [r7, #11]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d11e      	bne.n	800c142 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	88db      	ldrh	r3, [r3, #6]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d016      	beq.n	800c13a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c10c:	893b      	ldrh	r3, [r7, #8]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d00e      	beq.n	800c130 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	88da      	ldrh	r2, [r3, #6]
 800c116:	893b      	ldrh	r3, [r7, #8]
 800c118:	4293      	cmp	r3, r2
 800c11a:	bf28      	it	cs
 800c11c:	4613      	movcs	r3, r2
 800c11e:	b29b      	uxth	r3, r3
 800c120:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c122:	893b      	ldrh	r3, [r7, #8]
 800c124:	461a      	mov	r2, r3
 800c126:	68f9      	ldr	r1, [r7, #12]
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 fa69 	bl	800c600 <USBD_CtlSendData>
 800c12e:	e009      	b.n	800c144 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c130:	6839      	ldr	r1, [r7, #0]
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 f9e7 	bl	800c506 <USBD_CtlError>
 800c138:	e004      	b.n	800c144 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 faba 	bl	800c6b4 <USBD_CtlSendStatus>
 800c140:	e000      	b.n	800c144 <USBD_GetDescriptor+0x2cc>
    return;
 800c142:	bf00      	nop
  }
}
 800c144:	3710      	adds	r7, #16
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop

0800c14c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	889b      	ldrh	r3, [r3, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d131      	bne.n	800c1c2 <USBD_SetAddress+0x76>
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	88db      	ldrh	r3, [r3, #6]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d12d      	bne.n	800c1c2 <USBD_SetAddress+0x76>
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	885b      	ldrh	r3, [r3, #2]
 800c16a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c16c:	d829      	bhi.n	800c1c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	885b      	ldrh	r3, [r3, #2]
 800c172:	b2db      	uxtb	r3, r3
 800c174:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c178:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c180:	b2db      	uxtb	r3, r3
 800c182:	2b03      	cmp	r3, #3
 800c184:	d104      	bne.n	800c190 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 f9bc 	bl	800c506 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c18e:	e01d      	b.n	800c1cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	7bfa      	ldrb	r2, [r7, #15]
 800c194:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c198:	7bfb      	ldrb	r3, [r7, #15]
 800c19a:	4619      	mov	r1, r3
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f000 fef9 	bl	800cf94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 fa86 	bl	800c6b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c1a8:	7bfb      	ldrb	r3, [r7, #15]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d004      	beq.n	800c1b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2202      	movs	r2, #2
 800c1b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1b6:	e009      	b.n	800c1cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1c0:	e004      	b.n	800c1cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c1c2:	6839      	ldr	r1, [r7, #0]
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 f99e 	bl	800c506 <USBD_CtlError>
  }
}
 800c1ca:	bf00      	nop
 800c1cc:	bf00      	nop
 800c1ce:	3710      	adds	r7, #16
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	885b      	ldrh	r3, [r3, #2]
 800c1e6:	b2da      	uxtb	r2, r3
 800c1e8:	4b4e      	ldr	r3, [pc, #312]	@ (800c324 <USBD_SetConfig+0x150>)
 800c1ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c1ec:	4b4d      	ldr	r3, [pc, #308]	@ (800c324 <USBD_SetConfig+0x150>)
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d905      	bls.n	800c200 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c1f4:	6839      	ldr	r1, [r7, #0]
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 f985 	bl	800c506 <USBD_CtlError>
    return USBD_FAIL;
 800c1fc:	2303      	movs	r3, #3
 800c1fe:	e08c      	b.n	800c31a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c206:	b2db      	uxtb	r3, r3
 800c208:	2b02      	cmp	r3, #2
 800c20a:	d002      	beq.n	800c212 <USBD_SetConfig+0x3e>
 800c20c:	2b03      	cmp	r3, #3
 800c20e:	d029      	beq.n	800c264 <USBD_SetConfig+0x90>
 800c210:	e075      	b.n	800c2fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c212:	4b44      	ldr	r3, [pc, #272]	@ (800c324 <USBD_SetConfig+0x150>)
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d020      	beq.n	800c25c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c21a:	4b42      	ldr	r3, [pc, #264]	@ (800c324 <USBD_SetConfig+0x150>)
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	461a      	mov	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c224:	4b3f      	ldr	r3, [pc, #252]	@ (800c324 <USBD_SetConfig+0x150>)
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	4619      	mov	r1, r3
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f7fe ffe3 	bl	800b1f6 <USBD_SetClassConfig>
 800c230:	4603      	mov	r3, r0
 800c232:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c234:	7bfb      	ldrb	r3, [r7, #15]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d008      	beq.n	800c24c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c23a:	6839      	ldr	r1, [r7, #0]
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 f962 	bl	800c506 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2202      	movs	r2, #2
 800c246:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c24a:	e065      	b.n	800c318 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 fa31 	bl	800c6b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2203      	movs	r2, #3
 800c256:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c25a:	e05d      	b.n	800c318 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 fa29 	bl	800c6b4 <USBD_CtlSendStatus>
      break;
 800c262:	e059      	b.n	800c318 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c264:	4b2f      	ldr	r3, [pc, #188]	@ (800c324 <USBD_SetConfig+0x150>)
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d112      	bne.n	800c292 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2202      	movs	r2, #2
 800c270:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c274:	4b2b      	ldr	r3, [pc, #172]	@ (800c324 <USBD_SetConfig+0x150>)
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	461a      	mov	r2, r3
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c27e:	4b29      	ldr	r3, [pc, #164]	@ (800c324 <USBD_SetConfig+0x150>)
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	4619      	mov	r1, r3
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f7fe ffd2 	bl	800b22e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 fa12 	bl	800c6b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c290:	e042      	b.n	800c318 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c292:	4b24      	ldr	r3, [pc, #144]	@ (800c324 <USBD_SetConfig+0x150>)
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	461a      	mov	r2, r3
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d02a      	beq.n	800c2f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f7fe ffc0 	bl	800b22e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c2ae:	4b1d      	ldr	r3, [pc, #116]	@ (800c324 <USBD_SetConfig+0x150>)
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c2b8:	4b1a      	ldr	r3, [pc, #104]	@ (800c324 <USBD_SetConfig+0x150>)
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	4619      	mov	r1, r3
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f7fe ff99 	bl	800b1f6 <USBD_SetClassConfig>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c2c8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d00f      	beq.n	800c2ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 f918 	bl	800c506 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	4619      	mov	r1, r3
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f7fe ffa5 	bl	800b22e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2202      	movs	r2, #2
 800c2e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c2ec:	e014      	b.n	800c318 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 f9e0 	bl	800c6b4 <USBD_CtlSendStatus>
      break;
 800c2f4:	e010      	b.n	800c318 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 f9dc 	bl	800c6b4 <USBD_CtlSendStatus>
      break;
 800c2fc:	e00c      	b.n	800c318 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c2fe:	6839      	ldr	r1, [r7, #0]
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 f900 	bl	800c506 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c306:	4b07      	ldr	r3, [pc, #28]	@ (800c324 <USBD_SetConfig+0x150>)
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	4619      	mov	r1, r3
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f7fe ff8e 	bl	800b22e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c312:	2303      	movs	r3, #3
 800c314:	73fb      	strb	r3, [r7, #15]
      break;
 800c316:	bf00      	nop
  }

  return ret;
 800c318:	7bfb      	ldrb	r3, [r7, #15]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3710      	adds	r7, #16
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	200007b8 	.word	0x200007b8

0800c328 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	88db      	ldrh	r3, [r3, #6]
 800c336:	2b01      	cmp	r3, #1
 800c338:	d004      	beq.n	800c344 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c33a:	6839      	ldr	r1, [r7, #0]
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 f8e2 	bl	800c506 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c342:	e023      	b.n	800c38c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	2b02      	cmp	r3, #2
 800c34e:	dc02      	bgt.n	800c356 <USBD_GetConfig+0x2e>
 800c350:	2b00      	cmp	r3, #0
 800c352:	dc03      	bgt.n	800c35c <USBD_GetConfig+0x34>
 800c354:	e015      	b.n	800c382 <USBD_GetConfig+0x5a>
 800c356:	2b03      	cmp	r3, #3
 800c358:	d00b      	beq.n	800c372 <USBD_GetConfig+0x4a>
 800c35a:	e012      	b.n	800c382 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2200      	movs	r2, #0
 800c360:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	3308      	adds	r3, #8
 800c366:	2201      	movs	r2, #1
 800c368:	4619      	mov	r1, r3
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 f948 	bl	800c600 <USBD_CtlSendData>
        break;
 800c370:	e00c      	b.n	800c38c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	3304      	adds	r3, #4
 800c376:	2201      	movs	r2, #1
 800c378:	4619      	mov	r1, r3
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 f940 	bl	800c600 <USBD_CtlSendData>
        break;
 800c380:	e004      	b.n	800c38c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c382:	6839      	ldr	r1, [r7, #0]
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 f8be 	bl	800c506 <USBD_CtlError>
        break;
 800c38a:	bf00      	nop
}
 800c38c:	bf00      	nop
 800c38e:	3708      	adds	r7, #8
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	2b02      	cmp	r3, #2
 800c3aa:	d81e      	bhi.n	800c3ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	88db      	ldrh	r3, [r3, #6]
 800c3b0:	2b02      	cmp	r3, #2
 800c3b2:	d004      	beq.n	800c3be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c3b4:	6839      	ldr	r1, [r7, #0]
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 f8a5 	bl	800c506 <USBD_CtlError>
        break;
 800c3bc:	e01a      	b.n	800c3f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d005      	beq.n	800c3da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	f043 0202 	orr.w	r2, r3, #2
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	330c      	adds	r3, #12
 800c3de:	2202      	movs	r2, #2
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 f90c 	bl	800c600 <USBD_CtlSendData>
      break;
 800c3e8:	e004      	b.n	800c3f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c3ea:	6839      	ldr	r1, [r7, #0]
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 f88a 	bl	800c506 <USBD_CtlError>
      break;
 800c3f2:	bf00      	nop
  }
}
 800c3f4:	bf00      	nop
 800c3f6:	3708      	adds	r7, #8
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	885b      	ldrh	r3, [r3, #2]
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d107      	bne.n	800c41e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2201      	movs	r2, #1
 800c412:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 f94c 	bl	800c6b4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c41c:	e013      	b.n	800c446 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	885b      	ldrh	r3, [r3, #2]
 800c422:	2b02      	cmp	r3, #2
 800c424:	d10b      	bne.n	800c43e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	889b      	ldrh	r3, [r3, #4]
 800c42a:	0a1b      	lsrs	r3, r3, #8
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	b2da      	uxtb	r2, r3
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 f93c 	bl	800c6b4 <USBD_CtlSendStatus>
}
 800c43c:	e003      	b.n	800c446 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c43e:	6839      	ldr	r1, [r7, #0]
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 f860 	bl	800c506 <USBD_CtlError>
}
 800c446:	bf00      	nop
 800c448:	3708      	adds	r7, #8
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}

0800c44e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c44e:	b580      	push	{r7, lr}
 800c450:	b082      	sub	sp, #8
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
 800c456:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c45e:	b2db      	uxtb	r3, r3
 800c460:	3b01      	subs	r3, #1
 800c462:	2b02      	cmp	r3, #2
 800c464:	d80b      	bhi.n	800c47e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	885b      	ldrh	r3, [r3, #2]
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d10c      	bne.n	800c488 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2200      	movs	r2, #0
 800c472:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 f91c 	bl	800c6b4 <USBD_CtlSendStatus>
      }
      break;
 800c47c:	e004      	b.n	800c488 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c47e:	6839      	ldr	r1, [r7, #0]
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 f840 	bl	800c506 <USBD_CtlError>
      break;
 800c486:	e000      	b.n	800c48a <USBD_ClrFeature+0x3c>
      break;
 800c488:	bf00      	nop
  }
}
 800c48a:	bf00      	nop
 800c48c:	3708      	adds	r7, #8
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c492:	b580      	push	{r7, lr}
 800c494:	b084      	sub	sp, #16
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
 800c49a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	781a      	ldrb	r2, [r3, #0]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	781a      	ldrb	r2, [r3, #0]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c4bc:	68f8      	ldr	r0, [r7, #12]
 800c4be:	f7ff fa40 	bl	800b942 <SWAPBYTE>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c4d6:	68f8      	ldr	r0, [r7, #12]
 800c4d8:	f7ff fa33 	bl	800b942 <SWAPBYTE>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	461a      	mov	r2, r3
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	f7ff fa26 	bl	800b942 <SWAPBYTE>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	80da      	strh	r2, [r3, #6]
}
 800c4fe:	bf00      	nop
 800c500:	3710      	adds	r7, #16
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b082      	sub	sp, #8
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
 800c50e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c510:	2180      	movs	r1, #128	@ 0x80
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 fcd4 	bl	800cec0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c518:	2100      	movs	r1, #0
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fcd0 	bl	800cec0 <USBD_LL_StallEP>
}
 800c520:	bf00      	nop
 800c522:	3708      	adds	r7, #8
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b086      	sub	sp, #24
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	60f8      	str	r0, [r7, #12]
 800c530:	60b9      	str	r1, [r7, #8]
 800c532:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c534:	2300      	movs	r3, #0
 800c536:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d042      	beq.n	800c5c4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c542:	6938      	ldr	r0, [r7, #16]
 800c544:	f000 f842 	bl	800c5cc <USBD_GetLen>
 800c548:	4603      	mov	r3, r0
 800c54a:	3301      	adds	r3, #1
 800c54c:	005b      	lsls	r3, r3, #1
 800c54e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c552:	d808      	bhi.n	800c566 <USBD_GetString+0x3e>
 800c554:	6938      	ldr	r0, [r7, #16]
 800c556:	f000 f839 	bl	800c5cc <USBD_GetLen>
 800c55a:	4603      	mov	r3, r0
 800c55c:	3301      	adds	r3, #1
 800c55e:	b29b      	uxth	r3, r3
 800c560:	005b      	lsls	r3, r3, #1
 800c562:	b29a      	uxth	r2, r3
 800c564:	e001      	b.n	800c56a <USBD_GetString+0x42>
 800c566:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c56e:	7dfb      	ldrb	r3, [r7, #23]
 800c570:	68ba      	ldr	r2, [r7, #8]
 800c572:	4413      	add	r3, r2
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	7812      	ldrb	r2, [r2, #0]
 800c578:	701a      	strb	r2, [r3, #0]
  idx++;
 800c57a:	7dfb      	ldrb	r3, [r7, #23]
 800c57c:	3301      	adds	r3, #1
 800c57e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c580:	7dfb      	ldrb	r3, [r7, #23]
 800c582:	68ba      	ldr	r2, [r7, #8]
 800c584:	4413      	add	r3, r2
 800c586:	2203      	movs	r2, #3
 800c588:	701a      	strb	r2, [r3, #0]
  idx++;
 800c58a:	7dfb      	ldrb	r3, [r7, #23]
 800c58c:	3301      	adds	r3, #1
 800c58e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c590:	e013      	b.n	800c5ba <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c592:	7dfb      	ldrb	r3, [r7, #23]
 800c594:	68ba      	ldr	r2, [r7, #8]
 800c596:	4413      	add	r3, r2
 800c598:	693a      	ldr	r2, [r7, #16]
 800c59a:	7812      	ldrb	r2, [r2, #0]
 800c59c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	613b      	str	r3, [r7, #16]
    idx++;
 800c5a4:	7dfb      	ldrb	r3, [r7, #23]
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c5aa:	7dfb      	ldrb	r3, [r7, #23]
 800c5ac:	68ba      	ldr	r2, [r7, #8]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	701a      	strb	r2, [r3, #0]
    idx++;
 800c5b4:	7dfb      	ldrb	r3, [r7, #23]
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d1e7      	bne.n	800c592 <USBD_GetString+0x6a>
 800c5c2:	e000      	b.n	800c5c6 <USBD_GetString+0x9e>
    return;
 800c5c4:	bf00      	nop
  }
}
 800c5c6:	3718      	adds	r7, #24
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b085      	sub	sp, #20
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c5dc:	e005      	b.n	800c5ea <USBD_GetLen+0x1e>
  {
    len++;
 800c5de:	7bfb      	ldrb	r3, [r7, #15]
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1f5      	bne.n	800c5de <USBD_GetLen+0x12>
  }

  return len;
 800c5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr

0800c600 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2202      	movs	r2, #2
 800c610:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	68ba      	ldr	r2, [r7, #8]
 800c624:	2100      	movs	r1, #0
 800c626:	68f8      	ldr	r0, [r7, #12]
 800c628:	f000 fcd3 	bl	800cfd2 <USBD_LL_Transmit>

  return USBD_OK;
 800c62c:	2300      	movs	r3, #0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3710      	adds	r7, #16
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b084      	sub	sp, #16
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	60f8      	str	r0, [r7, #12]
 800c63e:	60b9      	str	r1, [r7, #8]
 800c640:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	68ba      	ldr	r2, [r7, #8]
 800c646:	2100      	movs	r1, #0
 800c648:	68f8      	ldr	r0, [r7, #12]
 800c64a:	f000 fcc2 	bl	800cfd2 <USBD_LL_Transmit>

  return USBD_OK;
 800c64e:	2300      	movs	r3, #0
}
 800c650:	4618      	mov	r0, r3
 800c652:	3710      	adds	r7, #16
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2203      	movs	r2, #3
 800c668:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	68ba      	ldr	r2, [r7, #8]
 800c680:	2100      	movs	r1, #0
 800c682:	68f8      	ldr	r0, [r7, #12]
 800c684:	f000 fcc6 	bl	800d014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c688:	2300      	movs	r3, #0
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3710      	adds	r7, #16
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}

0800c692 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c692:	b580      	push	{r7, lr}
 800c694:	b084      	sub	sp, #16
 800c696:	af00      	add	r7, sp, #0
 800c698:	60f8      	str	r0, [r7, #12]
 800c69a:	60b9      	str	r1, [r7, #8]
 800c69c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	68ba      	ldr	r2, [r7, #8]
 800c6a2:	2100      	movs	r1, #0
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	f000 fcb5 	bl	800d014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6aa:	2300      	movs	r3, #0
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3710      	adds	r7, #16
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2204      	movs	r2, #4
 800c6c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 fc81 	bl	800cfd2 <USBD_LL_Transmit>

  return USBD_OK;
 800c6d0:	2300      	movs	r3, #0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3708      	adds	r7, #8
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b082      	sub	sp, #8
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2205      	movs	r2, #5
 800c6e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	2100      	movs	r1, #0
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 fc8f 	bl	800d014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3708      	adds	r7, #8
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c704:	2200      	movs	r2, #0
 800c706:	4912      	ldr	r1, [pc, #72]	@ (800c750 <MX_USB_DEVICE_Init+0x50>)
 800c708:	4812      	ldr	r0, [pc, #72]	@ (800c754 <MX_USB_DEVICE_Init+0x54>)
 800c70a:	f7fe fcf7 	bl	800b0fc <USBD_Init>
 800c70e:	4603      	mov	r3, r0
 800c710:	2b00      	cmp	r3, #0
 800c712:	d001      	beq.n	800c718 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c714:	f7f5 f9fe 	bl	8001b14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c718:	490f      	ldr	r1, [pc, #60]	@ (800c758 <MX_USB_DEVICE_Init+0x58>)
 800c71a:	480e      	ldr	r0, [pc, #56]	@ (800c754 <MX_USB_DEVICE_Init+0x54>)
 800c71c:	f7fe fd1e 	bl	800b15c <USBD_RegisterClass>
 800c720:	4603      	mov	r3, r0
 800c722:	2b00      	cmp	r3, #0
 800c724:	d001      	beq.n	800c72a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c726:	f7f5 f9f5 	bl	8001b14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c72a:	490c      	ldr	r1, [pc, #48]	@ (800c75c <MX_USB_DEVICE_Init+0x5c>)
 800c72c:	4809      	ldr	r0, [pc, #36]	@ (800c754 <MX_USB_DEVICE_Init+0x54>)
 800c72e:	f7fe fc55 	bl	800afdc <USBD_CDC_RegisterInterface>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d001      	beq.n	800c73c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c738:	f7f5 f9ec 	bl	8001b14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c73c:	4805      	ldr	r0, [pc, #20]	@ (800c754 <MX_USB_DEVICE_Init+0x54>)
 800c73e:	f7fe fd43 	bl	800b1c8 <USBD_Start>
 800c742:	4603      	mov	r3, r0
 800c744:	2b00      	cmp	r3, #0
 800c746:	d001      	beq.n	800c74c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c748:	f7f5 f9e4 	bl	8001b14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c74c:	bf00      	nop
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	200000b0 	.word	0x200000b0
 800c754:	200007bc 	.word	0x200007bc
 800c758:	2000001c 	.word	0x2000001c
 800c75c:	2000009c 	.word	0x2000009c

0800c760 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c764:	2200      	movs	r2, #0
 800c766:	4905      	ldr	r1, [pc, #20]	@ (800c77c <CDC_Init_FS+0x1c>)
 800c768:	4805      	ldr	r0, [pc, #20]	@ (800c780 <CDC_Init_FS+0x20>)
 800c76a:	f7fe fc51 	bl	800b010 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c76e:	4905      	ldr	r1, [pc, #20]	@ (800c784 <CDC_Init_FS+0x24>)
 800c770:	4803      	ldr	r0, [pc, #12]	@ (800c780 <CDC_Init_FS+0x20>)
 800c772:	f7fe fc6f 	bl	800b054 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c776:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c778:	4618      	mov	r0, r3
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	20001298 	.word	0x20001298
 800c780:	200007bc 	.word	0x200007bc
 800c784:	20000a98 	.word	0x20000a98

0800c788 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c788:	b480      	push	{r7}
 800c78a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c78c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c78e:	4618      	mov	r0, r3
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c798:	b480      	push	{r7}
 800c79a:	b083      	sub	sp, #12
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	4603      	mov	r3, r0
 800c7a0:	6039      	str	r1, [r7, #0]
 800c7a2:	71fb      	strb	r3, [r7, #7]
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c7a8:	79fb      	ldrb	r3, [r7, #7]
 800c7aa:	2b23      	cmp	r3, #35	@ 0x23
 800c7ac:	d84a      	bhi.n	800c844 <CDC_Control_FS+0xac>
 800c7ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c7b4 <CDC_Control_FS+0x1c>)
 800c7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b4:	0800c845 	.word	0x0800c845
 800c7b8:	0800c845 	.word	0x0800c845
 800c7bc:	0800c845 	.word	0x0800c845
 800c7c0:	0800c845 	.word	0x0800c845
 800c7c4:	0800c845 	.word	0x0800c845
 800c7c8:	0800c845 	.word	0x0800c845
 800c7cc:	0800c845 	.word	0x0800c845
 800c7d0:	0800c845 	.word	0x0800c845
 800c7d4:	0800c845 	.word	0x0800c845
 800c7d8:	0800c845 	.word	0x0800c845
 800c7dc:	0800c845 	.word	0x0800c845
 800c7e0:	0800c845 	.word	0x0800c845
 800c7e4:	0800c845 	.word	0x0800c845
 800c7e8:	0800c845 	.word	0x0800c845
 800c7ec:	0800c845 	.word	0x0800c845
 800c7f0:	0800c845 	.word	0x0800c845
 800c7f4:	0800c845 	.word	0x0800c845
 800c7f8:	0800c845 	.word	0x0800c845
 800c7fc:	0800c845 	.word	0x0800c845
 800c800:	0800c845 	.word	0x0800c845
 800c804:	0800c845 	.word	0x0800c845
 800c808:	0800c845 	.word	0x0800c845
 800c80c:	0800c845 	.word	0x0800c845
 800c810:	0800c845 	.word	0x0800c845
 800c814:	0800c845 	.word	0x0800c845
 800c818:	0800c845 	.word	0x0800c845
 800c81c:	0800c845 	.word	0x0800c845
 800c820:	0800c845 	.word	0x0800c845
 800c824:	0800c845 	.word	0x0800c845
 800c828:	0800c845 	.word	0x0800c845
 800c82c:	0800c845 	.word	0x0800c845
 800c830:	0800c845 	.word	0x0800c845
 800c834:	0800c845 	.word	0x0800c845
 800c838:	0800c845 	.word	0x0800c845
 800c83c:	0800c845 	.word	0x0800c845
 800c840:	0800c845 	.word	0x0800c845
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c844:	bf00      	nop
  }

  return (USBD_OK);
 800c846:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c848:	4618      	mov	r0, r3
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c85e:	6879      	ldr	r1, [r7, #4]
 800c860:	4805      	ldr	r0, [pc, #20]	@ (800c878 <CDC_Receive_FS+0x24>)
 800c862:	f7fe fbf7 	bl	800b054 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c866:	4804      	ldr	r0, [pc, #16]	@ (800c878 <CDC_Receive_FS+0x24>)
 800c868:	f7fe fc12 	bl	800b090 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c86c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3708      	adds	r7, #8
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	200007bc 	.word	0x200007bc

0800c87c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b087      	sub	sp, #28
 800c880:	af00      	add	r7, sp, #0
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	4613      	mov	r3, r2
 800c888:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c88a:	2300      	movs	r3, #0
 800c88c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c88e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c892:	4618      	mov	r0, r3
 800c894:	371c      	adds	r7, #28
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr
	...

0800c8a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	6039      	str	r1, [r7, #0]
 800c8aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	2212      	movs	r2, #18
 800c8b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c8b2:	4b03      	ldr	r3, [pc, #12]	@ (800c8c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	370c      	adds	r7, #12
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr
 800c8c0:	200000cc 	.word	0x200000cc

0800c8c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	6039      	str	r1, [r7, #0]
 800c8ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	2204      	movs	r2, #4
 800c8d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c8d6:	4b03      	ldr	r3, [pc, #12]	@ (800c8e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr
 800c8e4:	200000e0 	.word	0x200000e0

0800c8e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	6039      	str	r1, [r7, #0]
 800c8f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c8f4:	79fb      	ldrb	r3, [r7, #7]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d105      	bne.n	800c906 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c8fa:	683a      	ldr	r2, [r7, #0]
 800c8fc:	4907      	ldr	r1, [pc, #28]	@ (800c91c <USBD_FS_ProductStrDescriptor+0x34>)
 800c8fe:	4808      	ldr	r0, [pc, #32]	@ (800c920 <USBD_FS_ProductStrDescriptor+0x38>)
 800c900:	f7ff fe12 	bl	800c528 <USBD_GetString>
 800c904:	e004      	b.n	800c910 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c906:	683a      	ldr	r2, [r7, #0]
 800c908:	4904      	ldr	r1, [pc, #16]	@ (800c91c <USBD_FS_ProductStrDescriptor+0x34>)
 800c90a:	4805      	ldr	r0, [pc, #20]	@ (800c920 <USBD_FS_ProductStrDescriptor+0x38>)
 800c90c:	f7ff fe0c 	bl	800c528 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c910:	4b02      	ldr	r3, [pc, #8]	@ (800c91c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c912:	4618      	mov	r0, r3
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	20001a98 	.word	0x20001a98
 800c920:	08010328 	.word	0x08010328

0800c924 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	4603      	mov	r3, r0
 800c92c:	6039      	str	r1, [r7, #0]
 800c92e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c930:	683a      	ldr	r2, [r7, #0]
 800c932:	4904      	ldr	r1, [pc, #16]	@ (800c944 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c934:	4804      	ldr	r0, [pc, #16]	@ (800c948 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c936:	f7ff fdf7 	bl	800c528 <USBD_GetString>
  return USBD_StrDesc;
 800c93a:	4b02      	ldr	r3, [pc, #8]	@ (800c944 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	20001a98 	.word	0x20001a98
 800c948:	08010340 	.word	0x08010340

0800c94c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	4603      	mov	r3, r0
 800c954:	6039      	str	r1, [r7, #0]
 800c956:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	221a      	movs	r2, #26
 800c95c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c95e:	f000 f843 	bl	800c9e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c962:	4b02      	ldr	r3, [pc, #8]	@ (800c96c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c964:	4618      	mov	r0, r3
 800c966:	3708      	adds	r7, #8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	200000e4 	.word	0x200000e4

0800c970 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	4603      	mov	r3, r0
 800c978:	6039      	str	r1, [r7, #0]
 800c97a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c97c:	79fb      	ldrb	r3, [r7, #7]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d105      	bne.n	800c98e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c982:	683a      	ldr	r2, [r7, #0]
 800c984:	4907      	ldr	r1, [pc, #28]	@ (800c9a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c986:	4808      	ldr	r0, [pc, #32]	@ (800c9a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c988:	f7ff fdce 	bl	800c528 <USBD_GetString>
 800c98c:	e004      	b.n	800c998 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c98e:	683a      	ldr	r2, [r7, #0]
 800c990:	4904      	ldr	r1, [pc, #16]	@ (800c9a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c992:	4805      	ldr	r0, [pc, #20]	@ (800c9a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c994:	f7ff fdc8 	bl	800c528 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c998:	4b02      	ldr	r3, [pc, #8]	@ (800c9a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3708      	adds	r7, #8
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	20001a98 	.word	0x20001a98
 800c9a8:	08010354 	.word	0x08010354

0800c9ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b082      	sub	sp, #8
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	6039      	str	r1, [r7, #0]
 800c9b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c9b8:	79fb      	ldrb	r3, [r7, #7]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d105      	bne.n	800c9ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c9be:	683a      	ldr	r2, [r7, #0]
 800c9c0:	4907      	ldr	r1, [pc, #28]	@ (800c9e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c9c2:	4808      	ldr	r0, [pc, #32]	@ (800c9e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c9c4:	f7ff fdb0 	bl	800c528 <USBD_GetString>
 800c9c8:	e004      	b.n	800c9d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c9ca:	683a      	ldr	r2, [r7, #0]
 800c9cc:	4904      	ldr	r1, [pc, #16]	@ (800c9e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c9ce:	4805      	ldr	r0, [pc, #20]	@ (800c9e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c9d0:	f7ff fdaa 	bl	800c528 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9d4:	4b02      	ldr	r3, [pc, #8]	@ (800c9e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3708      	adds	r7, #8
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	20001a98 	.word	0x20001a98
 800c9e4:	08010360 	.word	0x08010360

0800c9e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b084      	sub	sp, #16
 800c9ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c9ee:	4b0f      	ldr	r3, [pc, #60]	@ (800ca2c <Get_SerialNum+0x44>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c9f4:	4b0e      	ldr	r3, [pc, #56]	@ (800ca30 <Get_SerialNum+0x48>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c9fa:	4b0e      	ldr	r3, [pc, #56]	@ (800ca34 <Get_SerialNum+0x4c>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ca00:	68fa      	ldr	r2, [r7, #12]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4413      	add	r3, r2
 800ca06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d009      	beq.n	800ca22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ca0e:	2208      	movs	r2, #8
 800ca10:	4909      	ldr	r1, [pc, #36]	@ (800ca38 <Get_SerialNum+0x50>)
 800ca12:	68f8      	ldr	r0, [r7, #12]
 800ca14:	f000 f814 	bl	800ca40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ca18:	2204      	movs	r2, #4
 800ca1a:	4908      	ldr	r1, [pc, #32]	@ (800ca3c <Get_SerialNum+0x54>)
 800ca1c:	68b8      	ldr	r0, [r7, #8]
 800ca1e:	f000 f80f 	bl	800ca40 <IntToUnicode>
  }
}
 800ca22:	bf00      	nop
 800ca24:	3710      	adds	r7, #16
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	1fff7a10 	.word	0x1fff7a10
 800ca30:	1fff7a14 	.word	0x1fff7a14
 800ca34:	1fff7a18 	.word	0x1fff7a18
 800ca38:	200000e6 	.word	0x200000e6
 800ca3c:	200000f6 	.word	0x200000f6

0800ca40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b087      	sub	sp, #28
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ca52:	2300      	movs	r3, #0
 800ca54:	75fb      	strb	r3, [r7, #23]
 800ca56:	e027      	b.n	800caa8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	0f1b      	lsrs	r3, r3, #28
 800ca5c:	2b09      	cmp	r3, #9
 800ca5e:	d80b      	bhi.n	800ca78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	0f1b      	lsrs	r3, r3, #28
 800ca64:	b2da      	uxtb	r2, r3
 800ca66:	7dfb      	ldrb	r3, [r7, #23]
 800ca68:	005b      	lsls	r3, r3, #1
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	440b      	add	r3, r1
 800ca70:	3230      	adds	r2, #48	@ 0x30
 800ca72:	b2d2      	uxtb	r2, r2
 800ca74:	701a      	strb	r2, [r3, #0]
 800ca76:	e00a      	b.n	800ca8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	0f1b      	lsrs	r3, r3, #28
 800ca7c:	b2da      	uxtb	r2, r3
 800ca7e:	7dfb      	ldrb	r3, [r7, #23]
 800ca80:	005b      	lsls	r3, r3, #1
 800ca82:	4619      	mov	r1, r3
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	440b      	add	r3, r1
 800ca88:	3237      	adds	r2, #55	@ 0x37
 800ca8a:	b2d2      	uxtb	r2, r2
 800ca8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	011b      	lsls	r3, r3, #4
 800ca92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ca94:	7dfb      	ldrb	r3, [r7, #23]
 800ca96:	005b      	lsls	r3, r3, #1
 800ca98:	3301      	adds	r3, #1
 800ca9a:	68ba      	ldr	r2, [r7, #8]
 800ca9c:	4413      	add	r3, r2
 800ca9e:	2200      	movs	r2, #0
 800caa0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800caa2:	7dfb      	ldrb	r3, [r7, #23]
 800caa4:	3301      	adds	r3, #1
 800caa6:	75fb      	strb	r3, [r7, #23]
 800caa8:	7dfa      	ldrb	r2, [r7, #23]
 800caaa:	79fb      	ldrb	r3, [r7, #7]
 800caac:	429a      	cmp	r2, r3
 800caae:	d3d3      	bcc.n	800ca58 <IntToUnicode+0x18>
  }
}
 800cab0:	bf00      	nop
 800cab2:	bf00      	nop
 800cab4:	371c      	adds	r7, #28
 800cab6:	46bd      	mov	sp, r7
 800cab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabc:	4770      	bx	lr
	...

0800cac0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b08a      	sub	sp, #40	@ 0x28
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cac8:	f107 0314 	add.w	r3, r7, #20
 800cacc:	2200      	movs	r2, #0
 800cace:	601a      	str	r2, [r3, #0]
 800cad0:	605a      	str	r2, [r3, #4]
 800cad2:	609a      	str	r2, [r3, #8]
 800cad4:	60da      	str	r2, [r3, #12]
 800cad6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cae0:	d147      	bne.n	800cb72 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cae2:	2300      	movs	r3, #0
 800cae4:	613b      	str	r3, [r7, #16]
 800cae6:	4b25      	ldr	r3, [pc, #148]	@ (800cb7c <HAL_PCD_MspInit+0xbc>)
 800cae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caea:	4a24      	ldr	r2, [pc, #144]	@ (800cb7c <HAL_PCD_MspInit+0xbc>)
 800caec:	f043 0301 	orr.w	r3, r3, #1
 800caf0:	6313      	str	r3, [r2, #48]	@ 0x30
 800caf2:	4b22      	ldr	r3, [pc, #136]	@ (800cb7c <HAL_PCD_MspInit+0xbc>)
 800caf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caf6:	f003 0301 	and.w	r3, r3, #1
 800cafa:	613b      	str	r3, [r7, #16]
 800cafc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800cafe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cb02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cb04:	2300      	movs	r3, #0
 800cb06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800cb0c:	f107 0314 	add.w	r3, r7, #20
 800cb10:	4619      	mov	r1, r3
 800cb12:	481b      	ldr	r0, [pc, #108]	@ (800cb80 <HAL_PCD_MspInit+0xc0>)
 800cb14:	f7f7 f926 	bl	8003d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800cb18:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800cb1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb1e:	2302      	movs	r3, #2
 800cb20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb22:	2300      	movs	r3, #0
 800cb24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb26:	2300      	movs	r3, #0
 800cb28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cb2a:	230a      	movs	r3, #10
 800cb2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb2e:	f107 0314 	add.w	r3, r7, #20
 800cb32:	4619      	mov	r1, r3
 800cb34:	4812      	ldr	r0, [pc, #72]	@ (800cb80 <HAL_PCD_MspInit+0xc0>)
 800cb36:	f7f7 f915 	bl	8003d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cb3a:	4b10      	ldr	r3, [pc, #64]	@ (800cb7c <HAL_PCD_MspInit+0xbc>)
 800cb3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb3e:	4a0f      	ldr	r2, [pc, #60]	@ (800cb7c <HAL_PCD_MspInit+0xbc>)
 800cb40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb44:	6353      	str	r3, [r2, #52]	@ 0x34
 800cb46:	2300      	movs	r3, #0
 800cb48:	60fb      	str	r3, [r7, #12]
 800cb4a:	4b0c      	ldr	r3, [pc, #48]	@ (800cb7c <HAL_PCD_MspInit+0xbc>)
 800cb4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb4e:	4a0b      	ldr	r2, [pc, #44]	@ (800cb7c <HAL_PCD_MspInit+0xbc>)
 800cb50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cb54:	6453      	str	r3, [r2, #68]	@ 0x44
 800cb56:	4b09      	ldr	r3, [pc, #36]	@ (800cb7c <HAL_PCD_MspInit+0xbc>)
 800cb58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb5e:	60fb      	str	r3, [r7, #12]
 800cb60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cb62:	2200      	movs	r2, #0
 800cb64:	2100      	movs	r1, #0
 800cb66:	2043      	movs	r0, #67	@ 0x43
 800cb68:	f7f6 fd55 	bl	8003616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cb6c:	2043      	movs	r0, #67	@ 0x43
 800cb6e:	f7f6 fd6e 	bl	800364e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cb72:	bf00      	nop
 800cb74:	3728      	adds	r7, #40	@ 0x28
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	40023800 	.word	0x40023800
 800cb80:	40020000 	.word	0x40020000

0800cb84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cb98:	4619      	mov	r1, r3
 800cb9a:	4610      	mov	r0, r2
 800cb9c:	f7fe fb61 	bl	800b262 <USBD_LL_SetupStage>
}
 800cba0:	bf00      	nop
 800cba2:	3708      	adds	r7, #8
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cbba:	78fa      	ldrb	r2, [r7, #3]
 800cbbc:	6879      	ldr	r1, [r7, #4]
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	00db      	lsls	r3, r3, #3
 800cbc2:	4413      	add	r3, r2
 800cbc4:	009b      	lsls	r3, r3, #2
 800cbc6:	440b      	add	r3, r1
 800cbc8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	78fb      	ldrb	r3, [r7, #3]
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	f7fe fb9b 	bl	800b30c <USBD_LL_DataOutStage>
}
 800cbd6:	bf00      	nop
 800cbd8:	3708      	adds	r7, #8
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b082      	sub	sp, #8
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cbf0:	78fa      	ldrb	r2, [r7, #3]
 800cbf2:	6879      	ldr	r1, [r7, #4]
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	00db      	lsls	r3, r3, #3
 800cbf8:	4413      	add	r3, r2
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	440b      	add	r3, r1
 800cbfe:	3320      	adds	r3, #32
 800cc00:	681a      	ldr	r2, [r3, #0]
 800cc02:	78fb      	ldrb	r3, [r7, #3]
 800cc04:	4619      	mov	r1, r3
 800cc06:	f7fe fc34 	bl	800b472 <USBD_LL_DataInStage>
}
 800cc0a:	bf00      	nop
 800cc0c:	3708      	adds	r7, #8
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}

0800cc12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc12:	b580      	push	{r7, lr}
 800cc14:	b082      	sub	sp, #8
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7fe fd6e 	bl	800b702 <USBD_LL_SOF>
}
 800cc26:	bf00      	nop
 800cc28:	3708      	adds	r7, #8
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc2e:	b580      	push	{r7, lr}
 800cc30:	b084      	sub	sp, #16
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cc36:	2301      	movs	r3, #1
 800cc38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	79db      	ldrb	r3, [r3, #7]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d102      	bne.n	800cc48 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cc42:	2300      	movs	r3, #0
 800cc44:	73fb      	strb	r3, [r7, #15]
 800cc46:	e008      	b.n	800cc5a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	79db      	ldrb	r3, [r3, #7]
 800cc4c:	2b02      	cmp	r3, #2
 800cc4e:	d102      	bne.n	800cc56 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cc50:	2301      	movs	r3, #1
 800cc52:	73fb      	strb	r3, [r7, #15]
 800cc54:	e001      	b.n	800cc5a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cc56:	f7f4 ff5d 	bl	8001b14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc60:	7bfa      	ldrb	r2, [r7, #15]
 800cc62:	4611      	mov	r1, r2
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7fe fd08 	bl	800b67a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7fe fcb0 	bl	800b5d6 <USBD_LL_Reset>
}
 800cc76:	bf00      	nop
 800cc78:	3710      	adds	r7, #16
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
	...

0800cc80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7fe fd03 	bl	800b69a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	6812      	ldr	r2, [r2, #0]
 800cca2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cca6:	f043 0301 	orr.w	r3, r3, #1
 800ccaa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	7adb      	ldrb	r3, [r3, #11]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d005      	beq.n	800ccc0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ccb4:	4b04      	ldr	r3, [pc, #16]	@ (800ccc8 <HAL_PCD_SuspendCallback+0x48>)
 800ccb6:	691b      	ldr	r3, [r3, #16]
 800ccb8:	4a03      	ldr	r2, [pc, #12]	@ (800ccc8 <HAL_PCD_SuspendCallback+0x48>)
 800ccba:	f043 0306 	orr.w	r3, r3, #6
 800ccbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ccc0:	bf00      	nop
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	e000ed00 	.word	0xe000ed00

0800cccc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7fe fcf9 	bl	800b6d2 <USBD_LL_Resume>
}
 800cce0:	bf00      	nop
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	460b      	mov	r3, r1
 800ccf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ccfa:	78fa      	ldrb	r2, [r7, #3]
 800ccfc:	4611      	mov	r1, r2
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7fe fd51 	bl	800b7a6 <USBD_LL_IsoOUTIncomplete>
}
 800cd04:	bf00      	nop
 800cd06:	3708      	adds	r7, #8
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b082      	sub	sp, #8
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	460b      	mov	r3, r1
 800cd16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd1e:	78fa      	ldrb	r2, [r7, #3]
 800cd20:	4611      	mov	r1, r2
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7fe fd0d 	bl	800b742 <USBD_LL_IsoINIncomplete>
}
 800cd28:	bf00      	nop
 800cd2a:	3708      	adds	r7, #8
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7fe fd63 	bl	800b80a <USBD_LL_DevConnected>
}
 800cd44:	bf00      	nop
 800cd46:	3708      	adds	r7, #8
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7fe fd60 	bl	800b820 <USBD_LL_DevDisconnected>
}
 800cd60:	bf00      	nop
 800cd62:	3708      	adds	r7, #8
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d13c      	bne.n	800cdf2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cd78:	4a20      	ldr	r2, [pc, #128]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	4a1e      	ldr	r2, [pc, #120]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cd84:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cd88:	4b1c      	ldr	r3, [pc, #112]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cd8a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cd8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cd90:	4b1a      	ldr	r3, [pc, #104]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cd92:	2204      	movs	r2, #4
 800cd94:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cd96:	4b19      	ldr	r3, [pc, #100]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cd98:	2202      	movs	r2, #2
 800cd9a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cd9c:	4b17      	ldr	r3, [pc, #92]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cd9e:	2200      	movs	r2, #0
 800cda0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cda2:	4b16      	ldr	r3, [pc, #88]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cda4:	2202      	movs	r2, #2
 800cda6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cda8:	4b14      	ldr	r3, [pc, #80]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cdaa:	2200      	movs	r2, #0
 800cdac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cdae:	4b13      	ldr	r3, [pc, #76]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cdb4:	4b11      	ldr	r3, [pc, #68]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800cdba:	4b10      	ldr	r3, [pc, #64]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cdc0:	4b0e      	ldr	r3, [pc, #56]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cdc6:	480d      	ldr	r0, [pc, #52]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cdc8:	f7f8 ff7a 	bl	8005cc0 <HAL_PCD_Init>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d001      	beq.n	800cdd6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cdd2:	f7f4 fe9f 	bl	8001b14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cdd6:	2180      	movs	r1, #128	@ 0x80
 800cdd8:	4808      	ldr	r0, [pc, #32]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cdda:	f7fa f9a6 	bl	800712a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cdde:	2240      	movs	r2, #64	@ 0x40
 800cde0:	2100      	movs	r1, #0
 800cde2:	4806      	ldr	r0, [pc, #24]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cde4:	f7fa f95a 	bl	800709c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cde8:	2280      	movs	r2, #128	@ 0x80
 800cdea:	2101      	movs	r1, #1
 800cdec:	4803      	ldr	r0, [pc, #12]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cdee:	f7fa f955 	bl	800709c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cdf2:	2300      	movs	r3, #0
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3708      	adds	r7, #8
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}
 800cdfc:	20001c98 	.word	0x20001c98

0800ce00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7f9 f861 	bl	8005ede <HAL_PCD_Start>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce20:	7bfb      	ldrb	r3, [r7, #15]
 800ce22:	4618      	mov	r0, r3
 800ce24:	f000 f942 	bl	800d0ac <USBD_Get_USB_Status>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b084      	sub	sp, #16
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
 800ce3e:	4608      	mov	r0, r1
 800ce40:	4611      	mov	r1, r2
 800ce42:	461a      	mov	r2, r3
 800ce44:	4603      	mov	r3, r0
 800ce46:	70fb      	strb	r3, [r7, #3]
 800ce48:	460b      	mov	r3, r1
 800ce4a:	70bb      	strb	r3, [r7, #2]
 800ce4c:	4613      	mov	r3, r2
 800ce4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce50:	2300      	movs	r3, #0
 800ce52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce54:	2300      	movs	r3, #0
 800ce56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ce5e:	78bb      	ldrb	r3, [r7, #2]
 800ce60:	883a      	ldrh	r2, [r7, #0]
 800ce62:	78f9      	ldrb	r1, [r7, #3]
 800ce64:	f7f9 fd35 	bl	80068d2 <HAL_PCD_EP_Open>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce6c:	7bfb      	ldrb	r3, [r7, #15]
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f000 f91c 	bl	800d0ac <USBD_Get_USB_Status>
 800ce74:	4603      	mov	r3, r0
 800ce76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce78:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3710      	adds	r7, #16
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce82:	b580      	push	{r7, lr}
 800ce84:	b084      	sub	sp, #16
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce92:	2300      	movs	r3, #0
 800ce94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce9c:	78fa      	ldrb	r2, [r7, #3]
 800ce9e:	4611      	mov	r1, r2
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7f9 fd80 	bl	80069a6 <HAL_PCD_EP_Close>
 800cea6:	4603      	mov	r3, r0
 800cea8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ceaa:	7bfb      	ldrb	r3, [r7, #15]
 800ceac:	4618      	mov	r0, r3
 800ceae:	f000 f8fd 	bl	800d0ac <USBD_Get_USB_Status>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ceb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3710      	adds	r7, #16
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	460b      	mov	r3, r1
 800ceca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cecc:	2300      	movs	r3, #0
 800cece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ced0:	2300      	movs	r3, #0
 800ced2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ceda:	78fa      	ldrb	r2, [r7, #3]
 800cedc:	4611      	mov	r1, r2
 800cede:	4618      	mov	r0, r3
 800cee0:	f7f9 fe38 	bl	8006b54 <HAL_PCD_EP_SetStall>
 800cee4:	4603      	mov	r3, r0
 800cee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cee8:	7bfb      	ldrb	r3, [r7, #15]
 800ceea:	4618      	mov	r0, r3
 800ceec:	f000 f8de 	bl	800d0ac <USBD_Get_USB_Status>
 800cef0:	4603      	mov	r3, r0
 800cef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cef4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b084      	sub	sp, #16
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
 800cf06:	460b      	mov	r3, r1
 800cf08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf18:	78fa      	ldrb	r2, [r7, #3]
 800cf1a:	4611      	mov	r1, r2
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7f9 fe7c 	bl	8006c1a <HAL_PCD_EP_ClrStall>
 800cf22:	4603      	mov	r3, r0
 800cf24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf26:	7bfb      	ldrb	r3, [r7, #15]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f000 f8bf 	bl	800d0ac <USBD_Get_USB_Status>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf32:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3710      	adds	r7, #16
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
 800cf44:	460b      	mov	r3, r1
 800cf46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cf50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	da0b      	bge.n	800cf70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cf58:	78fb      	ldrb	r3, [r7, #3]
 800cf5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf5e:	68f9      	ldr	r1, [r7, #12]
 800cf60:	4613      	mov	r3, r2
 800cf62:	00db      	lsls	r3, r3, #3
 800cf64:	4413      	add	r3, r2
 800cf66:	009b      	lsls	r3, r3, #2
 800cf68:	440b      	add	r3, r1
 800cf6a:	3316      	adds	r3, #22
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	e00b      	b.n	800cf88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cf70:	78fb      	ldrb	r3, [r7, #3]
 800cf72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf76:	68f9      	ldr	r1, [r7, #12]
 800cf78:	4613      	mov	r3, r2
 800cf7a:	00db      	lsls	r3, r3, #3
 800cf7c:	4413      	add	r3, r2
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	440b      	add	r3, r1
 800cf82:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800cf86:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3714      	adds	r7, #20
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cfae:	78fa      	ldrb	r2, [r7, #3]
 800cfb0:	4611      	mov	r1, r2
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7f9 fc69 	bl	800688a <HAL_PCD_SetAddress>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfbc:	7bfb      	ldrb	r3, [r7, #15]
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f000 f874 	bl	800d0ac <USBD_Get_USB_Status>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3710      	adds	r7, #16
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}

0800cfd2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cfd2:	b580      	push	{r7, lr}
 800cfd4:	b086      	sub	sp, #24
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	60f8      	str	r0, [r7, #12]
 800cfda:	607a      	str	r2, [r7, #4]
 800cfdc:	603b      	str	r3, [r7, #0]
 800cfde:	460b      	mov	r3, r1
 800cfe0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cff0:	7af9      	ldrb	r1, [r7, #11]
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	687a      	ldr	r2, [r7, #4]
 800cff6:	f7f9 fd73 	bl	8006ae0 <HAL_PCD_EP_Transmit>
 800cffa:	4603      	mov	r3, r0
 800cffc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cffe:	7dfb      	ldrb	r3, [r7, #23]
 800d000:	4618      	mov	r0, r3
 800d002:	f000 f853 	bl	800d0ac <USBD_Get_USB_Status>
 800d006:	4603      	mov	r3, r0
 800d008:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d00a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3718      	adds	r7, #24
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b086      	sub	sp, #24
 800d018:	af00      	add	r7, sp, #0
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	607a      	str	r2, [r7, #4]
 800d01e:	603b      	str	r3, [r7, #0]
 800d020:	460b      	mov	r3, r1
 800d022:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d024:	2300      	movs	r3, #0
 800d026:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d028:	2300      	movs	r3, #0
 800d02a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d032:	7af9      	ldrb	r1, [r7, #11]
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	687a      	ldr	r2, [r7, #4]
 800d038:	f7f9 fcff 	bl	8006a3a <HAL_PCD_EP_Receive>
 800d03c:	4603      	mov	r3, r0
 800d03e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d040:	7dfb      	ldrb	r3, [r7, #23]
 800d042:	4618      	mov	r0, r3
 800d044:	f000 f832 	bl	800d0ac <USBD_Get_USB_Status>
 800d048:	4603      	mov	r3, r0
 800d04a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d04c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3718      	adds	r7, #24
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}

0800d056 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d056:	b580      	push	{r7, lr}
 800d058:	b082      	sub	sp, #8
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	6078      	str	r0, [r7, #4]
 800d05e:	460b      	mov	r3, r1
 800d060:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d068:	78fa      	ldrb	r2, [r7, #3]
 800d06a:	4611      	mov	r1, r2
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7f9 fd1f 	bl	8006ab0 <HAL_PCD_EP_GetRxCount>
 800d072:	4603      	mov	r3, r0
}
 800d074:	4618      	mov	r0, r3
 800d076:	3708      	adds	r7, #8
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d084:	4b03      	ldr	r3, [pc, #12]	@ (800d094 <USBD_static_malloc+0x18>)
}
 800d086:	4618      	mov	r0, r3
 800d088:	370c      	adds	r7, #12
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr
 800d092:	bf00      	nop
 800d094:	2000217c 	.word	0x2000217c

0800d098 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]

}
 800d0a0:	bf00      	nop
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d0ba:	79fb      	ldrb	r3, [r7, #7]
 800d0bc:	2b03      	cmp	r3, #3
 800d0be:	d817      	bhi.n	800d0f0 <USBD_Get_USB_Status+0x44>
 800d0c0:	a201      	add	r2, pc, #4	@ (adr r2, 800d0c8 <USBD_Get_USB_Status+0x1c>)
 800d0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c6:	bf00      	nop
 800d0c8:	0800d0d9 	.word	0x0800d0d9
 800d0cc:	0800d0df 	.word	0x0800d0df
 800d0d0:	0800d0e5 	.word	0x0800d0e5
 800d0d4:	0800d0eb 	.word	0x0800d0eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	73fb      	strb	r3, [r7, #15]
    break;
 800d0dc:	e00b      	b.n	800d0f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d0de:	2303      	movs	r3, #3
 800d0e0:	73fb      	strb	r3, [r7, #15]
    break;
 800d0e2:	e008      	b.n	800d0f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d0e8:	e005      	b.n	800d0f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d0ea:	2303      	movs	r3, #3
 800d0ec:	73fb      	strb	r3, [r7, #15]
    break;
 800d0ee:	e002      	b.n	800d0f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d0f0:	2303      	movs	r3, #3
 800d0f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d0f4:	bf00      	nop
  }
  return usb_status;
 800d0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3714      	adds	r7, #20
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <swapfunc>:
 800d104:	2b02      	cmp	r3, #2
 800d106:	b510      	push	{r4, lr}
 800d108:	d00a      	beq.n	800d120 <swapfunc+0x1c>
 800d10a:	0892      	lsrs	r2, r2, #2
 800d10c:	3a01      	subs	r2, #1
 800d10e:	6803      	ldr	r3, [r0, #0]
 800d110:	680c      	ldr	r4, [r1, #0]
 800d112:	f840 4b04 	str.w	r4, [r0], #4
 800d116:	2a00      	cmp	r2, #0
 800d118:	f841 3b04 	str.w	r3, [r1], #4
 800d11c:	dcf6      	bgt.n	800d10c <swapfunc+0x8>
 800d11e:	bd10      	pop	{r4, pc}
 800d120:	4402      	add	r2, r0
 800d122:	780c      	ldrb	r4, [r1, #0]
 800d124:	7803      	ldrb	r3, [r0, #0]
 800d126:	f800 4b01 	strb.w	r4, [r0], #1
 800d12a:	f801 3b01 	strb.w	r3, [r1], #1
 800d12e:	1a13      	subs	r3, r2, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	dcf6      	bgt.n	800d122 <swapfunc+0x1e>
 800d134:	e7f3      	b.n	800d11e <swapfunc+0x1a>

0800d136 <med3.constprop.0>:
 800d136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d138:	460f      	mov	r7, r1
 800d13a:	4616      	mov	r6, r2
 800d13c:	4604      	mov	r4, r0
 800d13e:	461d      	mov	r5, r3
 800d140:	4798      	blx	r3
 800d142:	2800      	cmp	r0, #0
 800d144:	4631      	mov	r1, r6
 800d146:	4638      	mov	r0, r7
 800d148:	da0c      	bge.n	800d164 <med3.constprop.0+0x2e>
 800d14a:	47a8      	blx	r5
 800d14c:	2800      	cmp	r0, #0
 800d14e:	da02      	bge.n	800d156 <med3.constprop.0+0x20>
 800d150:	463c      	mov	r4, r7
 800d152:	4620      	mov	r0, r4
 800d154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d156:	4631      	mov	r1, r6
 800d158:	4620      	mov	r0, r4
 800d15a:	47a8      	blx	r5
 800d15c:	2800      	cmp	r0, #0
 800d15e:	daf8      	bge.n	800d152 <med3.constprop.0+0x1c>
 800d160:	4634      	mov	r4, r6
 800d162:	e7f6      	b.n	800d152 <med3.constprop.0+0x1c>
 800d164:	47a8      	blx	r5
 800d166:	2800      	cmp	r0, #0
 800d168:	dcf2      	bgt.n	800d150 <med3.constprop.0+0x1a>
 800d16a:	4631      	mov	r1, r6
 800d16c:	4620      	mov	r0, r4
 800d16e:	47a8      	blx	r5
 800d170:	2800      	cmp	r0, #0
 800d172:	daf5      	bge.n	800d160 <med3.constprop.0+0x2a>
 800d174:	e7ed      	b.n	800d152 <med3.constprop.0+0x1c>

0800d176 <qsort>:
 800d176:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d17a:	b095      	sub	sp, #84	@ 0x54
 800d17c:	4606      	mov	r6, r0
 800d17e:	9300      	str	r3, [sp, #0]
 800d180:	ea40 0302 	orr.w	r3, r0, r2
 800d184:	079b      	lsls	r3, r3, #30
 800d186:	4614      	mov	r4, r2
 800d188:	d118      	bne.n	800d1bc <qsort+0x46>
 800d18a:	f1b2 0804 	subs.w	r8, r2, #4
 800d18e:	bf18      	it	ne
 800d190:	f04f 0801 	movne.w	r8, #1
 800d194:	2300      	movs	r3, #0
 800d196:	9301      	str	r3, [sp, #4]
 800d198:	fb04 f701 	mul.w	r7, r4, r1
 800d19c:	19f3      	adds	r3, r6, r7
 800d19e:	2906      	cmp	r1, #6
 800d1a0:	eb06 0b04 	add.w	fp, r6, r4
 800d1a4:	9302      	str	r3, [sp, #8]
 800d1a6:	d828      	bhi.n	800d1fa <qsort+0x84>
 800d1a8:	9b02      	ldr	r3, [sp, #8]
 800d1aa:	459b      	cmp	fp, r3
 800d1ac:	d310      	bcc.n	800d1d0 <qsort+0x5a>
 800d1ae:	9b01      	ldr	r3, [sp, #4]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	f040 8117 	bne.w	800d3e4 <qsort+0x26e>
 800d1b6:	b015      	add	sp, #84	@ 0x54
 800d1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1bc:	f04f 0802 	mov.w	r8, #2
 800d1c0:	e7e8      	b.n	800d194 <qsort+0x1e>
 800d1c2:	4643      	mov	r3, r8
 800d1c4:	4622      	mov	r2, r4
 800d1c6:	4639      	mov	r1, r7
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	f7ff ff9b 	bl	800d104 <swapfunc>
 800d1ce:	e00f      	b.n	800d1f0 <qsort+0x7a>
 800d1d0:	465d      	mov	r5, fp
 800d1d2:	e00e      	b.n	800d1f2 <qsort+0x7c>
 800d1d4:	1b2f      	subs	r7, r5, r4
 800d1d6:	9b00      	ldr	r3, [sp, #0]
 800d1d8:	4629      	mov	r1, r5
 800d1da:	4638      	mov	r0, r7
 800d1dc:	4798      	blx	r3
 800d1de:	2800      	cmp	r0, #0
 800d1e0:	dd09      	ble.n	800d1f6 <qsort+0x80>
 800d1e2:	f1b8 0f00 	cmp.w	r8, #0
 800d1e6:	d1ec      	bne.n	800d1c2 <qsort+0x4c>
 800d1e8:	682b      	ldr	r3, [r5, #0]
 800d1ea:	683a      	ldr	r2, [r7, #0]
 800d1ec:	602a      	str	r2, [r5, #0]
 800d1ee:	603b      	str	r3, [r7, #0]
 800d1f0:	463d      	mov	r5, r7
 800d1f2:	42ae      	cmp	r6, r5
 800d1f4:	d3ee      	bcc.n	800d1d4 <qsort+0x5e>
 800d1f6:	44a3      	add	fp, r4
 800d1f8:	e7d6      	b.n	800d1a8 <qsort+0x32>
 800d1fa:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800d1fe:	1b3f      	subs	r7, r7, r4
 800d200:	2907      	cmp	r1, #7
 800d202:	fb04 6909 	mla	r9, r4, r9, r6
 800d206:	4437      	add	r7, r6
 800d208:	d021      	beq.n	800d24e <qsort+0xd8>
 800d20a:	2928      	cmp	r1, #40	@ 0x28
 800d20c:	d944      	bls.n	800d298 <qsort+0x122>
 800d20e:	08cd      	lsrs	r5, r1, #3
 800d210:	4365      	muls	r5, r4
 800d212:	9b00      	ldr	r3, [sp, #0]
 800d214:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 800d218:	1971      	adds	r1, r6, r5
 800d21a:	4630      	mov	r0, r6
 800d21c:	f7ff ff8b 	bl	800d136 <med3.constprop.0>
 800d220:	4649      	mov	r1, r9
 800d222:	eb09 0205 	add.w	r2, r9, r5
 800d226:	9b00      	ldr	r3, [sp, #0]
 800d228:	4682      	mov	sl, r0
 800d22a:	1b48      	subs	r0, r1, r5
 800d22c:	f7ff ff83 	bl	800d136 <med3.constprop.0>
 800d230:	463a      	mov	r2, r7
 800d232:	9b00      	ldr	r3, [sp, #0]
 800d234:	4681      	mov	r9, r0
 800d236:	1b79      	subs	r1, r7, r5
 800d238:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800d23c:	f7ff ff7b 	bl	800d136 <med3.constprop.0>
 800d240:	4602      	mov	r2, r0
 800d242:	4649      	mov	r1, r9
 800d244:	9b00      	ldr	r3, [sp, #0]
 800d246:	4650      	mov	r0, sl
 800d248:	f7ff ff75 	bl	800d136 <med3.constprop.0>
 800d24c:	4681      	mov	r9, r0
 800d24e:	f1b8 0f00 	cmp.w	r8, #0
 800d252:	d124      	bne.n	800d29e <qsort+0x128>
 800d254:	6833      	ldr	r3, [r6, #0]
 800d256:	f8d9 2000 	ldr.w	r2, [r9]
 800d25a:	6032      	str	r2, [r6, #0]
 800d25c:	f8c9 3000 	str.w	r3, [r9]
 800d260:	46d9      	mov	r9, fp
 800d262:	46ba      	mov	sl, r7
 800d264:	465d      	mov	r5, fp
 800d266:	2300      	movs	r3, #0
 800d268:	45b9      	cmp	r9, r7
 800d26a:	d857      	bhi.n	800d31c <qsort+0x1a6>
 800d26c:	9303      	str	r3, [sp, #12]
 800d26e:	4631      	mov	r1, r6
 800d270:	9b00      	ldr	r3, [sp, #0]
 800d272:	4648      	mov	r0, r9
 800d274:	4798      	blx	r3
 800d276:	2800      	cmp	r0, #0
 800d278:	9b03      	ldr	r3, [sp, #12]
 800d27a:	dc2c      	bgt.n	800d2d6 <qsort+0x160>
 800d27c:	d10a      	bne.n	800d294 <qsort+0x11e>
 800d27e:	f1b8 0f00 	cmp.w	r8, #0
 800d282:	d113      	bne.n	800d2ac <qsort+0x136>
 800d284:	682b      	ldr	r3, [r5, #0]
 800d286:	f8d9 2000 	ldr.w	r2, [r9]
 800d28a:	602a      	str	r2, [r5, #0]
 800d28c:	f8c9 3000 	str.w	r3, [r9]
 800d290:	4425      	add	r5, r4
 800d292:	2301      	movs	r3, #1
 800d294:	44a1      	add	r9, r4
 800d296:	e7e7      	b.n	800d268 <qsort+0xf2>
 800d298:	463a      	mov	r2, r7
 800d29a:	46b2      	mov	sl, r6
 800d29c:	e7d1      	b.n	800d242 <qsort+0xcc>
 800d29e:	4643      	mov	r3, r8
 800d2a0:	4622      	mov	r2, r4
 800d2a2:	4649      	mov	r1, r9
 800d2a4:	4630      	mov	r0, r6
 800d2a6:	f7ff ff2d 	bl	800d104 <swapfunc>
 800d2aa:	e7d9      	b.n	800d260 <qsort+0xea>
 800d2ac:	4643      	mov	r3, r8
 800d2ae:	4622      	mov	r2, r4
 800d2b0:	4649      	mov	r1, r9
 800d2b2:	4628      	mov	r0, r5
 800d2b4:	f7ff ff26 	bl	800d104 <swapfunc>
 800d2b8:	e7ea      	b.n	800d290 <qsort+0x11a>
 800d2ba:	d10b      	bne.n	800d2d4 <qsort+0x15e>
 800d2bc:	f1b8 0f00 	cmp.w	r8, #0
 800d2c0:	d11e      	bne.n	800d300 <qsort+0x18a>
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	f8da 2000 	ldr.w	r2, [sl]
 800d2c8:	603a      	str	r2, [r7, #0]
 800d2ca:	f8ca 3000 	str.w	r3, [sl]
 800d2ce:	ebaa 0a04 	sub.w	sl, sl, r4
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	1b3f      	subs	r7, r7, r4
 800d2d6:	45b9      	cmp	r9, r7
 800d2d8:	d820      	bhi.n	800d31c <qsort+0x1a6>
 800d2da:	9303      	str	r3, [sp, #12]
 800d2dc:	4631      	mov	r1, r6
 800d2de:	9b00      	ldr	r3, [sp, #0]
 800d2e0:	4638      	mov	r0, r7
 800d2e2:	4798      	blx	r3
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	9b03      	ldr	r3, [sp, #12]
 800d2e8:	dae7      	bge.n	800d2ba <qsort+0x144>
 800d2ea:	f1b8 0f00 	cmp.w	r8, #0
 800d2ee:	d10e      	bne.n	800d30e <qsort+0x198>
 800d2f0:	f8d9 3000 	ldr.w	r3, [r9]
 800d2f4:	683a      	ldr	r2, [r7, #0]
 800d2f6:	f8c9 2000 	str.w	r2, [r9]
 800d2fa:	603b      	str	r3, [r7, #0]
 800d2fc:	1b3f      	subs	r7, r7, r4
 800d2fe:	e7c8      	b.n	800d292 <qsort+0x11c>
 800d300:	4643      	mov	r3, r8
 800d302:	4622      	mov	r2, r4
 800d304:	4651      	mov	r1, sl
 800d306:	4638      	mov	r0, r7
 800d308:	f7ff fefc 	bl	800d104 <swapfunc>
 800d30c:	e7df      	b.n	800d2ce <qsort+0x158>
 800d30e:	4643      	mov	r3, r8
 800d310:	4622      	mov	r2, r4
 800d312:	4639      	mov	r1, r7
 800d314:	4648      	mov	r0, r9
 800d316:	f7ff fef5 	bl	800d104 <swapfunc>
 800d31a:	e7ef      	b.n	800d2fc <qsort+0x186>
 800d31c:	b9fb      	cbnz	r3, 800d35e <qsort+0x1e8>
 800d31e:	9b02      	ldr	r3, [sp, #8]
 800d320:	459b      	cmp	fp, r3
 800d322:	f4bf af44 	bcs.w	800d1ae <qsort+0x38>
 800d326:	465d      	mov	r5, fp
 800d328:	e015      	b.n	800d356 <qsort+0x1e0>
 800d32a:	4643      	mov	r3, r8
 800d32c:	4622      	mov	r2, r4
 800d32e:	4639      	mov	r1, r7
 800d330:	4628      	mov	r0, r5
 800d332:	f7ff fee7 	bl	800d104 <swapfunc>
 800d336:	e00d      	b.n	800d354 <qsort+0x1de>
 800d338:	1b2f      	subs	r7, r5, r4
 800d33a:	9b00      	ldr	r3, [sp, #0]
 800d33c:	4629      	mov	r1, r5
 800d33e:	4638      	mov	r0, r7
 800d340:	4798      	blx	r3
 800d342:	2800      	cmp	r0, #0
 800d344:	dd09      	ble.n	800d35a <qsort+0x1e4>
 800d346:	f1b8 0f00 	cmp.w	r8, #0
 800d34a:	d1ee      	bne.n	800d32a <qsort+0x1b4>
 800d34c:	682b      	ldr	r3, [r5, #0]
 800d34e:	683a      	ldr	r2, [r7, #0]
 800d350:	602a      	str	r2, [r5, #0]
 800d352:	603b      	str	r3, [r7, #0]
 800d354:	463d      	mov	r5, r7
 800d356:	42ae      	cmp	r6, r5
 800d358:	d3ee      	bcc.n	800d338 <qsort+0x1c2>
 800d35a:	44a3      	add	fp, r4
 800d35c:	e7df      	b.n	800d31e <qsort+0x1a8>
 800d35e:	eba9 0b05 	sub.w	fp, r9, r5
 800d362:	1baa      	subs	r2, r5, r6
 800d364:	455a      	cmp	r2, fp
 800d366:	bfa8      	it	ge
 800d368:	465a      	movge	r2, fp
 800d36a:	b12a      	cbz	r2, 800d378 <qsort+0x202>
 800d36c:	4643      	mov	r3, r8
 800d36e:	eba9 0102 	sub.w	r1, r9, r2
 800d372:	4630      	mov	r0, r6
 800d374:	f7ff fec6 	bl	800d104 <swapfunc>
 800d378:	9b02      	ldr	r3, [sp, #8]
 800d37a:	eba3 020a 	sub.w	r2, r3, sl
 800d37e:	ebaa 0507 	sub.w	r5, sl, r7
 800d382:	1b12      	subs	r2, r2, r4
 800d384:	42aa      	cmp	r2, r5
 800d386:	bf28      	it	cs
 800d388:	462a      	movcs	r2, r5
 800d38a:	b12a      	cbz	r2, 800d398 <qsort+0x222>
 800d38c:	9902      	ldr	r1, [sp, #8]
 800d38e:	4643      	mov	r3, r8
 800d390:	1a89      	subs	r1, r1, r2
 800d392:	4648      	mov	r0, r9
 800d394:	f7ff feb6 	bl	800d104 <swapfunc>
 800d398:	9b02      	ldr	r3, [sp, #8]
 800d39a:	455d      	cmp	r5, fp
 800d39c:	465f      	mov	r7, fp
 800d39e:	eba3 0005 	sub.w	r0, r3, r5
 800d3a2:	d904      	bls.n	800d3ae <qsort+0x238>
 800d3a4:	4633      	mov	r3, r6
 800d3a6:	462f      	mov	r7, r5
 800d3a8:	4606      	mov	r6, r0
 800d3aa:	465d      	mov	r5, fp
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	42a5      	cmp	r5, r4
 800d3b0:	d921      	bls.n	800d3f6 <qsort+0x280>
 800d3b2:	fbb5 f1f4 	udiv	r1, r5, r4
 800d3b6:	9b01      	ldr	r3, [sp, #4]
 800d3b8:	2b07      	cmp	r3, #7
 800d3ba:	d80d      	bhi.n	800d3d8 <qsort+0x262>
 800d3bc:	fbb7 f7f4 	udiv	r7, r7, r4
 800d3c0:	aa14      	add	r2, sp, #80	@ 0x50
 800d3c2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d3c6:	f843 6c40 	str.w	r6, [r3, #-64]
 800d3ca:	f843 7c3c 	str.w	r7, [r3, #-60]
 800d3ce:	9b01      	ldr	r3, [sp, #4]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	9301      	str	r3, [sp, #4]
 800d3d4:	4606      	mov	r6, r0
 800d3d6:	e6df      	b.n	800d198 <qsort+0x22>
 800d3d8:	9b00      	ldr	r3, [sp, #0]
 800d3da:	4622      	mov	r2, r4
 800d3dc:	f7ff fecb 	bl	800d176 <qsort>
 800d3e0:	42a7      	cmp	r7, r4
 800d3e2:	d80b      	bhi.n	800d3fc <qsort+0x286>
 800d3e4:	9b01      	ldr	r3, [sp, #4]
 800d3e6:	aa14      	add	r2, sp, #80	@ 0x50
 800d3e8:	3b01      	subs	r3, #1
 800d3ea:	9301      	str	r3, [sp, #4]
 800d3ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d3f0:	e953 0110 	ldrd	r0, r1, [r3, #-64]	@ 0x40
 800d3f4:	e7ee      	b.n	800d3d4 <qsort+0x25e>
 800d3f6:	42a7      	cmp	r7, r4
 800d3f8:	f67f aed9 	bls.w	800d1ae <qsort+0x38>
 800d3fc:	fbb7 f1f4 	udiv	r1, r7, r4
 800d400:	4630      	mov	r0, r6
 800d402:	e7e7      	b.n	800d3d4 <qsort+0x25e>

0800d404 <__cvt>:
 800d404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d408:	ec57 6b10 	vmov	r6, r7, d0
 800d40c:	2f00      	cmp	r7, #0
 800d40e:	460c      	mov	r4, r1
 800d410:	4619      	mov	r1, r3
 800d412:	463b      	mov	r3, r7
 800d414:	bfbb      	ittet	lt
 800d416:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d41a:	461f      	movlt	r7, r3
 800d41c:	2300      	movge	r3, #0
 800d41e:	232d      	movlt	r3, #45	@ 0x2d
 800d420:	700b      	strb	r3, [r1, #0]
 800d422:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d424:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d428:	4691      	mov	r9, r2
 800d42a:	f023 0820 	bic.w	r8, r3, #32
 800d42e:	bfbc      	itt	lt
 800d430:	4632      	movlt	r2, r6
 800d432:	4616      	movlt	r6, r2
 800d434:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d438:	d005      	beq.n	800d446 <__cvt+0x42>
 800d43a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d43e:	d100      	bne.n	800d442 <__cvt+0x3e>
 800d440:	3401      	adds	r4, #1
 800d442:	2102      	movs	r1, #2
 800d444:	e000      	b.n	800d448 <__cvt+0x44>
 800d446:	2103      	movs	r1, #3
 800d448:	ab03      	add	r3, sp, #12
 800d44a:	9301      	str	r3, [sp, #4]
 800d44c:	ab02      	add	r3, sp, #8
 800d44e:	9300      	str	r3, [sp, #0]
 800d450:	ec47 6b10 	vmov	d0, r6, r7
 800d454:	4653      	mov	r3, sl
 800d456:	4622      	mov	r2, r4
 800d458:	f000 fe3a 	bl	800e0d0 <_dtoa_r>
 800d45c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d460:	4605      	mov	r5, r0
 800d462:	d119      	bne.n	800d498 <__cvt+0x94>
 800d464:	f019 0f01 	tst.w	r9, #1
 800d468:	d00e      	beq.n	800d488 <__cvt+0x84>
 800d46a:	eb00 0904 	add.w	r9, r0, r4
 800d46e:	2200      	movs	r2, #0
 800d470:	2300      	movs	r3, #0
 800d472:	4630      	mov	r0, r6
 800d474:	4639      	mov	r1, r7
 800d476:	f7f3 fb27 	bl	8000ac8 <__aeabi_dcmpeq>
 800d47a:	b108      	cbz	r0, 800d480 <__cvt+0x7c>
 800d47c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d480:	2230      	movs	r2, #48	@ 0x30
 800d482:	9b03      	ldr	r3, [sp, #12]
 800d484:	454b      	cmp	r3, r9
 800d486:	d31e      	bcc.n	800d4c6 <__cvt+0xc2>
 800d488:	9b03      	ldr	r3, [sp, #12]
 800d48a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d48c:	1b5b      	subs	r3, r3, r5
 800d48e:	4628      	mov	r0, r5
 800d490:	6013      	str	r3, [r2, #0]
 800d492:	b004      	add	sp, #16
 800d494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d498:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d49c:	eb00 0904 	add.w	r9, r0, r4
 800d4a0:	d1e5      	bne.n	800d46e <__cvt+0x6a>
 800d4a2:	7803      	ldrb	r3, [r0, #0]
 800d4a4:	2b30      	cmp	r3, #48	@ 0x30
 800d4a6:	d10a      	bne.n	800d4be <__cvt+0xba>
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	4630      	mov	r0, r6
 800d4ae:	4639      	mov	r1, r7
 800d4b0:	f7f3 fb0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d4b4:	b918      	cbnz	r0, 800d4be <__cvt+0xba>
 800d4b6:	f1c4 0401 	rsb	r4, r4, #1
 800d4ba:	f8ca 4000 	str.w	r4, [sl]
 800d4be:	f8da 3000 	ldr.w	r3, [sl]
 800d4c2:	4499      	add	r9, r3
 800d4c4:	e7d3      	b.n	800d46e <__cvt+0x6a>
 800d4c6:	1c59      	adds	r1, r3, #1
 800d4c8:	9103      	str	r1, [sp, #12]
 800d4ca:	701a      	strb	r2, [r3, #0]
 800d4cc:	e7d9      	b.n	800d482 <__cvt+0x7e>

0800d4ce <__exponent>:
 800d4ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4d0:	2900      	cmp	r1, #0
 800d4d2:	bfba      	itte	lt
 800d4d4:	4249      	neglt	r1, r1
 800d4d6:	232d      	movlt	r3, #45	@ 0x2d
 800d4d8:	232b      	movge	r3, #43	@ 0x2b
 800d4da:	2909      	cmp	r1, #9
 800d4dc:	7002      	strb	r2, [r0, #0]
 800d4de:	7043      	strb	r3, [r0, #1]
 800d4e0:	dd29      	ble.n	800d536 <__exponent+0x68>
 800d4e2:	f10d 0307 	add.w	r3, sp, #7
 800d4e6:	461d      	mov	r5, r3
 800d4e8:	270a      	movs	r7, #10
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	fbb1 f6f7 	udiv	r6, r1, r7
 800d4f0:	fb07 1416 	mls	r4, r7, r6, r1
 800d4f4:	3430      	adds	r4, #48	@ 0x30
 800d4f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	2c63      	cmp	r4, #99	@ 0x63
 800d4fe:	f103 33ff 	add.w	r3, r3, #4294967295
 800d502:	4631      	mov	r1, r6
 800d504:	dcf1      	bgt.n	800d4ea <__exponent+0x1c>
 800d506:	3130      	adds	r1, #48	@ 0x30
 800d508:	1e94      	subs	r4, r2, #2
 800d50a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d50e:	1c41      	adds	r1, r0, #1
 800d510:	4623      	mov	r3, r4
 800d512:	42ab      	cmp	r3, r5
 800d514:	d30a      	bcc.n	800d52c <__exponent+0x5e>
 800d516:	f10d 0309 	add.w	r3, sp, #9
 800d51a:	1a9b      	subs	r3, r3, r2
 800d51c:	42ac      	cmp	r4, r5
 800d51e:	bf88      	it	hi
 800d520:	2300      	movhi	r3, #0
 800d522:	3302      	adds	r3, #2
 800d524:	4403      	add	r3, r0
 800d526:	1a18      	subs	r0, r3, r0
 800d528:	b003      	add	sp, #12
 800d52a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d52c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d530:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d534:	e7ed      	b.n	800d512 <__exponent+0x44>
 800d536:	2330      	movs	r3, #48	@ 0x30
 800d538:	3130      	adds	r1, #48	@ 0x30
 800d53a:	7083      	strb	r3, [r0, #2]
 800d53c:	70c1      	strb	r1, [r0, #3]
 800d53e:	1d03      	adds	r3, r0, #4
 800d540:	e7f1      	b.n	800d526 <__exponent+0x58>
	...

0800d544 <_printf_float>:
 800d544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d548:	b08d      	sub	sp, #52	@ 0x34
 800d54a:	460c      	mov	r4, r1
 800d54c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d550:	4616      	mov	r6, r2
 800d552:	461f      	mov	r7, r3
 800d554:	4605      	mov	r5, r0
 800d556:	f000 fcbb 	bl	800ded0 <_localeconv_r>
 800d55a:	6803      	ldr	r3, [r0, #0]
 800d55c:	9304      	str	r3, [sp, #16]
 800d55e:	4618      	mov	r0, r3
 800d560:	f7f2 fe86 	bl	8000270 <strlen>
 800d564:	2300      	movs	r3, #0
 800d566:	930a      	str	r3, [sp, #40]	@ 0x28
 800d568:	f8d8 3000 	ldr.w	r3, [r8]
 800d56c:	9005      	str	r0, [sp, #20]
 800d56e:	3307      	adds	r3, #7
 800d570:	f023 0307 	bic.w	r3, r3, #7
 800d574:	f103 0208 	add.w	r2, r3, #8
 800d578:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d57c:	f8d4 b000 	ldr.w	fp, [r4]
 800d580:	f8c8 2000 	str.w	r2, [r8]
 800d584:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d588:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d58c:	9307      	str	r3, [sp, #28]
 800d58e:	f8cd 8018 	str.w	r8, [sp, #24]
 800d592:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d596:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d59a:	4b9c      	ldr	r3, [pc, #624]	@ (800d80c <_printf_float+0x2c8>)
 800d59c:	f04f 32ff 	mov.w	r2, #4294967295
 800d5a0:	f7f3 fac4 	bl	8000b2c <__aeabi_dcmpun>
 800d5a4:	bb70      	cbnz	r0, 800d604 <_printf_float+0xc0>
 800d5a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5aa:	4b98      	ldr	r3, [pc, #608]	@ (800d80c <_printf_float+0x2c8>)
 800d5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d5b0:	f7f3 fa9e 	bl	8000af0 <__aeabi_dcmple>
 800d5b4:	bb30      	cbnz	r0, 800d604 <_printf_float+0xc0>
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	4640      	mov	r0, r8
 800d5bc:	4649      	mov	r1, r9
 800d5be:	f7f3 fa8d 	bl	8000adc <__aeabi_dcmplt>
 800d5c2:	b110      	cbz	r0, 800d5ca <_printf_float+0x86>
 800d5c4:	232d      	movs	r3, #45	@ 0x2d
 800d5c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5ca:	4a91      	ldr	r2, [pc, #580]	@ (800d810 <_printf_float+0x2cc>)
 800d5cc:	4b91      	ldr	r3, [pc, #580]	@ (800d814 <_printf_float+0x2d0>)
 800d5ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d5d2:	bf94      	ite	ls
 800d5d4:	4690      	movls	r8, r2
 800d5d6:	4698      	movhi	r8, r3
 800d5d8:	2303      	movs	r3, #3
 800d5da:	6123      	str	r3, [r4, #16]
 800d5dc:	f02b 0304 	bic.w	r3, fp, #4
 800d5e0:	6023      	str	r3, [r4, #0]
 800d5e2:	f04f 0900 	mov.w	r9, #0
 800d5e6:	9700      	str	r7, [sp, #0]
 800d5e8:	4633      	mov	r3, r6
 800d5ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d5ec:	4621      	mov	r1, r4
 800d5ee:	4628      	mov	r0, r5
 800d5f0:	f000 f9d2 	bl	800d998 <_printf_common>
 800d5f4:	3001      	adds	r0, #1
 800d5f6:	f040 808d 	bne.w	800d714 <_printf_float+0x1d0>
 800d5fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d5fe:	b00d      	add	sp, #52	@ 0x34
 800d600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d604:	4642      	mov	r2, r8
 800d606:	464b      	mov	r3, r9
 800d608:	4640      	mov	r0, r8
 800d60a:	4649      	mov	r1, r9
 800d60c:	f7f3 fa8e 	bl	8000b2c <__aeabi_dcmpun>
 800d610:	b140      	cbz	r0, 800d624 <_printf_float+0xe0>
 800d612:	464b      	mov	r3, r9
 800d614:	2b00      	cmp	r3, #0
 800d616:	bfbc      	itt	lt
 800d618:	232d      	movlt	r3, #45	@ 0x2d
 800d61a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d61e:	4a7e      	ldr	r2, [pc, #504]	@ (800d818 <_printf_float+0x2d4>)
 800d620:	4b7e      	ldr	r3, [pc, #504]	@ (800d81c <_printf_float+0x2d8>)
 800d622:	e7d4      	b.n	800d5ce <_printf_float+0x8a>
 800d624:	6863      	ldr	r3, [r4, #4]
 800d626:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d62a:	9206      	str	r2, [sp, #24]
 800d62c:	1c5a      	adds	r2, r3, #1
 800d62e:	d13b      	bne.n	800d6a8 <_printf_float+0x164>
 800d630:	2306      	movs	r3, #6
 800d632:	6063      	str	r3, [r4, #4]
 800d634:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d638:	2300      	movs	r3, #0
 800d63a:	6022      	str	r2, [r4, #0]
 800d63c:	9303      	str	r3, [sp, #12]
 800d63e:	ab0a      	add	r3, sp, #40	@ 0x28
 800d640:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d644:	ab09      	add	r3, sp, #36	@ 0x24
 800d646:	9300      	str	r3, [sp, #0]
 800d648:	6861      	ldr	r1, [r4, #4]
 800d64a:	ec49 8b10 	vmov	d0, r8, r9
 800d64e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d652:	4628      	mov	r0, r5
 800d654:	f7ff fed6 	bl	800d404 <__cvt>
 800d658:	9b06      	ldr	r3, [sp, #24]
 800d65a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d65c:	2b47      	cmp	r3, #71	@ 0x47
 800d65e:	4680      	mov	r8, r0
 800d660:	d129      	bne.n	800d6b6 <_printf_float+0x172>
 800d662:	1cc8      	adds	r0, r1, #3
 800d664:	db02      	blt.n	800d66c <_printf_float+0x128>
 800d666:	6863      	ldr	r3, [r4, #4]
 800d668:	4299      	cmp	r1, r3
 800d66a:	dd41      	ble.n	800d6f0 <_printf_float+0x1ac>
 800d66c:	f1aa 0a02 	sub.w	sl, sl, #2
 800d670:	fa5f fa8a 	uxtb.w	sl, sl
 800d674:	3901      	subs	r1, #1
 800d676:	4652      	mov	r2, sl
 800d678:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d67c:	9109      	str	r1, [sp, #36]	@ 0x24
 800d67e:	f7ff ff26 	bl	800d4ce <__exponent>
 800d682:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d684:	1813      	adds	r3, r2, r0
 800d686:	2a01      	cmp	r2, #1
 800d688:	4681      	mov	r9, r0
 800d68a:	6123      	str	r3, [r4, #16]
 800d68c:	dc02      	bgt.n	800d694 <_printf_float+0x150>
 800d68e:	6822      	ldr	r2, [r4, #0]
 800d690:	07d2      	lsls	r2, r2, #31
 800d692:	d501      	bpl.n	800d698 <_printf_float+0x154>
 800d694:	3301      	adds	r3, #1
 800d696:	6123      	str	r3, [r4, #16]
 800d698:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d0a2      	beq.n	800d5e6 <_printf_float+0xa2>
 800d6a0:	232d      	movs	r3, #45	@ 0x2d
 800d6a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6a6:	e79e      	b.n	800d5e6 <_printf_float+0xa2>
 800d6a8:	9a06      	ldr	r2, [sp, #24]
 800d6aa:	2a47      	cmp	r2, #71	@ 0x47
 800d6ac:	d1c2      	bne.n	800d634 <_printf_float+0xf0>
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d1c0      	bne.n	800d634 <_printf_float+0xf0>
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e7bd      	b.n	800d632 <_printf_float+0xee>
 800d6b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d6ba:	d9db      	bls.n	800d674 <_printf_float+0x130>
 800d6bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d6c0:	d118      	bne.n	800d6f4 <_printf_float+0x1b0>
 800d6c2:	2900      	cmp	r1, #0
 800d6c4:	6863      	ldr	r3, [r4, #4]
 800d6c6:	dd0b      	ble.n	800d6e0 <_printf_float+0x19c>
 800d6c8:	6121      	str	r1, [r4, #16]
 800d6ca:	b913      	cbnz	r3, 800d6d2 <_printf_float+0x18e>
 800d6cc:	6822      	ldr	r2, [r4, #0]
 800d6ce:	07d0      	lsls	r0, r2, #31
 800d6d0:	d502      	bpl.n	800d6d8 <_printf_float+0x194>
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	440b      	add	r3, r1
 800d6d6:	6123      	str	r3, [r4, #16]
 800d6d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d6da:	f04f 0900 	mov.w	r9, #0
 800d6de:	e7db      	b.n	800d698 <_printf_float+0x154>
 800d6e0:	b913      	cbnz	r3, 800d6e8 <_printf_float+0x1a4>
 800d6e2:	6822      	ldr	r2, [r4, #0]
 800d6e4:	07d2      	lsls	r2, r2, #31
 800d6e6:	d501      	bpl.n	800d6ec <_printf_float+0x1a8>
 800d6e8:	3302      	adds	r3, #2
 800d6ea:	e7f4      	b.n	800d6d6 <_printf_float+0x192>
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	e7f2      	b.n	800d6d6 <_printf_float+0x192>
 800d6f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d6f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6f6:	4299      	cmp	r1, r3
 800d6f8:	db05      	blt.n	800d706 <_printf_float+0x1c2>
 800d6fa:	6823      	ldr	r3, [r4, #0]
 800d6fc:	6121      	str	r1, [r4, #16]
 800d6fe:	07d8      	lsls	r0, r3, #31
 800d700:	d5ea      	bpl.n	800d6d8 <_printf_float+0x194>
 800d702:	1c4b      	adds	r3, r1, #1
 800d704:	e7e7      	b.n	800d6d6 <_printf_float+0x192>
 800d706:	2900      	cmp	r1, #0
 800d708:	bfd4      	ite	le
 800d70a:	f1c1 0202 	rsble	r2, r1, #2
 800d70e:	2201      	movgt	r2, #1
 800d710:	4413      	add	r3, r2
 800d712:	e7e0      	b.n	800d6d6 <_printf_float+0x192>
 800d714:	6823      	ldr	r3, [r4, #0]
 800d716:	055a      	lsls	r2, r3, #21
 800d718:	d407      	bmi.n	800d72a <_printf_float+0x1e6>
 800d71a:	6923      	ldr	r3, [r4, #16]
 800d71c:	4642      	mov	r2, r8
 800d71e:	4631      	mov	r1, r6
 800d720:	4628      	mov	r0, r5
 800d722:	47b8      	blx	r7
 800d724:	3001      	adds	r0, #1
 800d726:	d12b      	bne.n	800d780 <_printf_float+0x23c>
 800d728:	e767      	b.n	800d5fa <_printf_float+0xb6>
 800d72a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d72e:	f240 80dd 	bls.w	800d8ec <_printf_float+0x3a8>
 800d732:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d736:	2200      	movs	r2, #0
 800d738:	2300      	movs	r3, #0
 800d73a:	f7f3 f9c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800d73e:	2800      	cmp	r0, #0
 800d740:	d033      	beq.n	800d7aa <_printf_float+0x266>
 800d742:	4a37      	ldr	r2, [pc, #220]	@ (800d820 <_printf_float+0x2dc>)
 800d744:	2301      	movs	r3, #1
 800d746:	4631      	mov	r1, r6
 800d748:	4628      	mov	r0, r5
 800d74a:	47b8      	blx	r7
 800d74c:	3001      	adds	r0, #1
 800d74e:	f43f af54 	beq.w	800d5fa <_printf_float+0xb6>
 800d752:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d756:	4543      	cmp	r3, r8
 800d758:	db02      	blt.n	800d760 <_printf_float+0x21c>
 800d75a:	6823      	ldr	r3, [r4, #0]
 800d75c:	07d8      	lsls	r0, r3, #31
 800d75e:	d50f      	bpl.n	800d780 <_printf_float+0x23c>
 800d760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d764:	4631      	mov	r1, r6
 800d766:	4628      	mov	r0, r5
 800d768:	47b8      	blx	r7
 800d76a:	3001      	adds	r0, #1
 800d76c:	f43f af45 	beq.w	800d5fa <_printf_float+0xb6>
 800d770:	f04f 0900 	mov.w	r9, #0
 800d774:	f108 38ff 	add.w	r8, r8, #4294967295
 800d778:	f104 0a1a 	add.w	sl, r4, #26
 800d77c:	45c8      	cmp	r8, r9
 800d77e:	dc09      	bgt.n	800d794 <_printf_float+0x250>
 800d780:	6823      	ldr	r3, [r4, #0]
 800d782:	079b      	lsls	r3, r3, #30
 800d784:	f100 8103 	bmi.w	800d98e <_printf_float+0x44a>
 800d788:	68e0      	ldr	r0, [r4, #12]
 800d78a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d78c:	4298      	cmp	r0, r3
 800d78e:	bfb8      	it	lt
 800d790:	4618      	movlt	r0, r3
 800d792:	e734      	b.n	800d5fe <_printf_float+0xba>
 800d794:	2301      	movs	r3, #1
 800d796:	4652      	mov	r2, sl
 800d798:	4631      	mov	r1, r6
 800d79a:	4628      	mov	r0, r5
 800d79c:	47b8      	blx	r7
 800d79e:	3001      	adds	r0, #1
 800d7a0:	f43f af2b 	beq.w	800d5fa <_printf_float+0xb6>
 800d7a4:	f109 0901 	add.w	r9, r9, #1
 800d7a8:	e7e8      	b.n	800d77c <_printf_float+0x238>
 800d7aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	dc39      	bgt.n	800d824 <_printf_float+0x2e0>
 800d7b0:	4a1b      	ldr	r2, [pc, #108]	@ (800d820 <_printf_float+0x2dc>)
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	4631      	mov	r1, r6
 800d7b6:	4628      	mov	r0, r5
 800d7b8:	47b8      	blx	r7
 800d7ba:	3001      	adds	r0, #1
 800d7bc:	f43f af1d 	beq.w	800d5fa <_printf_float+0xb6>
 800d7c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d7c4:	ea59 0303 	orrs.w	r3, r9, r3
 800d7c8:	d102      	bne.n	800d7d0 <_printf_float+0x28c>
 800d7ca:	6823      	ldr	r3, [r4, #0]
 800d7cc:	07d9      	lsls	r1, r3, #31
 800d7ce:	d5d7      	bpl.n	800d780 <_printf_float+0x23c>
 800d7d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7d4:	4631      	mov	r1, r6
 800d7d6:	4628      	mov	r0, r5
 800d7d8:	47b8      	blx	r7
 800d7da:	3001      	adds	r0, #1
 800d7dc:	f43f af0d 	beq.w	800d5fa <_printf_float+0xb6>
 800d7e0:	f04f 0a00 	mov.w	sl, #0
 800d7e4:	f104 0b1a 	add.w	fp, r4, #26
 800d7e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7ea:	425b      	negs	r3, r3
 800d7ec:	4553      	cmp	r3, sl
 800d7ee:	dc01      	bgt.n	800d7f4 <_printf_float+0x2b0>
 800d7f0:	464b      	mov	r3, r9
 800d7f2:	e793      	b.n	800d71c <_printf_float+0x1d8>
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	465a      	mov	r2, fp
 800d7f8:	4631      	mov	r1, r6
 800d7fa:	4628      	mov	r0, r5
 800d7fc:	47b8      	blx	r7
 800d7fe:	3001      	adds	r0, #1
 800d800:	f43f aefb 	beq.w	800d5fa <_printf_float+0xb6>
 800d804:	f10a 0a01 	add.w	sl, sl, #1
 800d808:	e7ee      	b.n	800d7e8 <_printf_float+0x2a4>
 800d80a:	bf00      	nop
 800d80c:	7fefffff 	.word	0x7fefffff
 800d810:	08010390 	.word	0x08010390
 800d814:	08010394 	.word	0x08010394
 800d818:	08010398 	.word	0x08010398
 800d81c:	0801039c 	.word	0x0801039c
 800d820:	080103a0 	.word	0x080103a0
 800d824:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d826:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d82a:	4553      	cmp	r3, sl
 800d82c:	bfa8      	it	ge
 800d82e:	4653      	movge	r3, sl
 800d830:	2b00      	cmp	r3, #0
 800d832:	4699      	mov	r9, r3
 800d834:	dc36      	bgt.n	800d8a4 <_printf_float+0x360>
 800d836:	f04f 0b00 	mov.w	fp, #0
 800d83a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d83e:	f104 021a 	add.w	r2, r4, #26
 800d842:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d844:	9306      	str	r3, [sp, #24]
 800d846:	eba3 0309 	sub.w	r3, r3, r9
 800d84a:	455b      	cmp	r3, fp
 800d84c:	dc31      	bgt.n	800d8b2 <_printf_float+0x36e>
 800d84e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d850:	459a      	cmp	sl, r3
 800d852:	dc3a      	bgt.n	800d8ca <_printf_float+0x386>
 800d854:	6823      	ldr	r3, [r4, #0]
 800d856:	07da      	lsls	r2, r3, #31
 800d858:	d437      	bmi.n	800d8ca <_printf_float+0x386>
 800d85a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d85c:	ebaa 0903 	sub.w	r9, sl, r3
 800d860:	9b06      	ldr	r3, [sp, #24]
 800d862:	ebaa 0303 	sub.w	r3, sl, r3
 800d866:	4599      	cmp	r9, r3
 800d868:	bfa8      	it	ge
 800d86a:	4699      	movge	r9, r3
 800d86c:	f1b9 0f00 	cmp.w	r9, #0
 800d870:	dc33      	bgt.n	800d8da <_printf_float+0x396>
 800d872:	f04f 0800 	mov.w	r8, #0
 800d876:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d87a:	f104 0b1a 	add.w	fp, r4, #26
 800d87e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d880:	ebaa 0303 	sub.w	r3, sl, r3
 800d884:	eba3 0309 	sub.w	r3, r3, r9
 800d888:	4543      	cmp	r3, r8
 800d88a:	f77f af79 	ble.w	800d780 <_printf_float+0x23c>
 800d88e:	2301      	movs	r3, #1
 800d890:	465a      	mov	r2, fp
 800d892:	4631      	mov	r1, r6
 800d894:	4628      	mov	r0, r5
 800d896:	47b8      	blx	r7
 800d898:	3001      	adds	r0, #1
 800d89a:	f43f aeae 	beq.w	800d5fa <_printf_float+0xb6>
 800d89e:	f108 0801 	add.w	r8, r8, #1
 800d8a2:	e7ec      	b.n	800d87e <_printf_float+0x33a>
 800d8a4:	4642      	mov	r2, r8
 800d8a6:	4631      	mov	r1, r6
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	47b8      	blx	r7
 800d8ac:	3001      	adds	r0, #1
 800d8ae:	d1c2      	bne.n	800d836 <_printf_float+0x2f2>
 800d8b0:	e6a3      	b.n	800d5fa <_printf_float+0xb6>
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	4631      	mov	r1, r6
 800d8b6:	4628      	mov	r0, r5
 800d8b8:	9206      	str	r2, [sp, #24]
 800d8ba:	47b8      	blx	r7
 800d8bc:	3001      	adds	r0, #1
 800d8be:	f43f ae9c 	beq.w	800d5fa <_printf_float+0xb6>
 800d8c2:	9a06      	ldr	r2, [sp, #24]
 800d8c4:	f10b 0b01 	add.w	fp, fp, #1
 800d8c8:	e7bb      	b.n	800d842 <_printf_float+0x2fe>
 800d8ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8ce:	4631      	mov	r1, r6
 800d8d0:	4628      	mov	r0, r5
 800d8d2:	47b8      	blx	r7
 800d8d4:	3001      	adds	r0, #1
 800d8d6:	d1c0      	bne.n	800d85a <_printf_float+0x316>
 800d8d8:	e68f      	b.n	800d5fa <_printf_float+0xb6>
 800d8da:	9a06      	ldr	r2, [sp, #24]
 800d8dc:	464b      	mov	r3, r9
 800d8de:	4442      	add	r2, r8
 800d8e0:	4631      	mov	r1, r6
 800d8e2:	4628      	mov	r0, r5
 800d8e4:	47b8      	blx	r7
 800d8e6:	3001      	adds	r0, #1
 800d8e8:	d1c3      	bne.n	800d872 <_printf_float+0x32e>
 800d8ea:	e686      	b.n	800d5fa <_printf_float+0xb6>
 800d8ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d8f0:	f1ba 0f01 	cmp.w	sl, #1
 800d8f4:	dc01      	bgt.n	800d8fa <_printf_float+0x3b6>
 800d8f6:	07db      	lsls	r3, r3, #31
 800d8f8:	d536      	bpl.n	800d968 <_printf_float+0x424>
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	4642      	mov	r2, r8
 800d8fe:	4631      	mov	r1, r6
 800d900:	4628      	mov	r0, r5
 800d902:	47b8      	blx	r7
 800d904:	3001      	adds	r0, #1
 800d906:	f43f ae78 	beq.w	800d5fa <_printf_float+0xb6>
 800d90a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d90e:	4631      	mov	r1, r6
 800d910:	4628      	mov	r0, r5
 800d912:	47b8      	blx	r7
 800d914:	3001      	adds	r0, #1
 800d916:	f43f ae70 	beq.w	800d5fa <_printf_float+0xb6>
 800d91a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d91e:	2200      	movs	r2, #0
 800d920:	2300      	movs	r3, #0
 800d922:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d926:	f7f3 f8cf 	bl	8000ac8 <__aeabi_dcmpeq>
 800d92a:	b9c0      	cbnz	r0, 800d95e <_printf_float+0x41a>
 800d92c:	4653      	mov	r3, sl
 800d92e:	f108 0201 	add.w	r2, r8, #1
 800d932:	4631      	mov	r1, r6
 800d934:	4628      	mov	r0, r5
 800d936:	47b8      	blx	r7
 800d938:	3001      	adds	r0, #1
 800d93a:	d10c      	bne.n	800d956 <_printf_float+0x412>
 800d93c:	e65d      	b.n	800d5fa <_printf_float+0xb6>
 800d93e:	2301      	movs	r3, #1
 800d940:	465a      	mov	r2, fp
 800d942:	4631      	mov	r1, r6
 800d944:	4628      	mov	r0, r5
 800d946:	47b8      	blx	r7
 800d948:	3001      	adds	r0, #1
 800d94a:	f43f ae56 	beq.w	800d5fa <_printf_float+0xb6>
 800d94e:	f108 0801 	add.w	r8, r8, #1
 800d952:	45d0      	cmp	r8, sl
 800d954:	dbf3      	blt.n	800d93e <_printf_float+0x3fa>
 800d956:	464b      	mov	r3, r9
 800d958:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d95c:	e6df      	b.n	800d71e <_printf_float+0x1da>
 800d95e:	f04f 0800 	mov.w	r8, #0
 800d962:	f104 0b1a 	add.w	fp, r4, #26
 800d966:	e7f4      	b.n	800d952 <_printf_float+0x40e>
 800d968:	2301      	movs	r3, #1
 800d96a:	4642      	mov	r2, r8
 800d96c:	e7e1      	b.n	800d932 <_printf_float+0x3ee>
 800d96e:	2301      	movs	r3, #1
 800d970:	464a      	mov	r2, r9
 800d972:	4631      	mov	r1, r6
 800d974:	4628      	mov	r0, r5
 800d976:	47b8      	blx	r7
 800d978:	3001      	adds	r0, #1
 800d97a:	f43f ae3e 	beq.w	800d5fa <_printf_float+0xb6>
 800d97e:	f108 0801 	add.w	r8, r8, #1
 800d982:	68e3      	ldr	r3, [r4, #12]
 800d984:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d986:	1a5b      	subs	r3, r3, r1
 800d988:	4543      	cmp	r3, r8
 800d98a:	dcf0      	bgt.n	800d96e <_printf_float+0x42a>
 800d98c:	e6fc      	b.n	800d788 <_printf_float+0x244>
 800d98e:	f04f 0800 	mov.w	r8, #0
 800d992:	f104 0919 	add.w	r9, r4, #25
 800d996:	e7f4      	b.n	800d982 <_printf_float+0x43e>

0800d998 <_printf_common>:
 800d998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d99c:	4616      	mov	r6, r2
 800d99e:	4698      	mov	r8, r3
 800d9a0:	688a      	ldr	r2, [r1, #8]
 800d9a2:	690b      	ldr	r3, [r1, #16]
 800d9a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	bfb8      	it	lt
 800d9ac:	4613      	movlt	r3, r2
 800d9ae:	6033      	str	r3, [r6, #0]
 800d9b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d9b4:	4607      	mov	r7, r0
 800d9b6:	460c      	mov	r4, r1
 800d9b8:	b10a      	cbz	r2, 800d9be <_printf_common+0x26>
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	6033      	str	r3, [r6, #0]
 800d9be:	6823      	ldr	r3, [r4, #0]
 800d9c0:	0699      	lsls	r1, r3, #26
 800d9c2:	bf42      	ittt	mi
 800d9c4:	6833      	ldrmi	r3, [r6, #0]
 800d9c6:	3302      	addmi	r3, #2
 800d9c8:	6033      	strmi	r3, [r6, #0]
 800d9ca:	6825      	ldr	r5, [r4, #0]
 800d9cc:	f015 0506 	ands.w	r5, r5, #6
 800d9d0:	d106      	bne.n	800d9e0 <_printf_common+0x48>
 800d9d2:	f104 0a19 	add.w	sl, r4, #25
 800d9d6:	68e3      	ldr	r3, [r4, #12]
 800d9d8:	6832      	ldr	r2, [r6, #0]
 800d9da:	1a9b      	subs	r3, r3, r2
 800d9dc:	42ab      	cmp	r3, r5
 800d9de:	dc26      	bgt.n	800da2e <_printf_common+0x96>
 800d9e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d9e4:	6822      	ldr	r2, [r4, #0]
 800d9e6:	3b00      	subs	r3, #0
 800d9e8:	bf18      	it	ne
 800d9ea:	2301      	movne	r3, #1
 800d9ec:	0692      	lsls	r2, r2, #26
 800d9ee:	d42b      	bmi.n	800da48 <_printf_common+0xb0>
 800d9f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d9f4:	4641      	mov	r1, r8
 800d9f6:	4638      	mov	r0, r7
 800d9f8:	47c8      	blx	r9
 800d9fa:	3001      	adds	r0, #1
 800d9fc:	d01e      	beq.n	800da3c <_printf_common+0xa4>
 800d9fe:	6823      	ldr	r3, [r4, #0]
 800da00:	6922      	ldr	r2, [r4, #16]
 800da02:	f003 0306 	and.w	r3, r3, #6
 800da06:	2b04      	cmp	r3, #4
 800da08:	bf02      	ittt	eq
 800da0a:	68e5      	ldreq	r5, [r4, #12]
 800da0c:	6833      	ldreq	r3, [r6, #0]
 800da0e:	1aed      	subeq	r5, r5, r3
 800da10:	68a3      	ldr	r3, [r4, #8]
 800da12:	bf0c      	ite	eq
 800da14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da18:	2500      	movne	r5, #0
 800da1a:	4293      	cmp	r3, r2
 800da1c:	bfc4      	itt	gt
 800da1e:	1a9b      	subgt	r3, r3, r2
 800da20:	18ed      	addgt	r5, r5, r3
 800da22:	2600      	movs	r6, #0
 800da24:	341a      	adds	r4, #26
 800da26:	42b5      	cmp	r5, r6
 800da28:	d11a      	bne.n	800da60 <_printf_common+0xc8>
 800da2a:	2000      	movs	r0, #0
 800da2c:	e008      	b.n	800da40 <_printf_common+0xa8>
 800da2e:	2301      	movs	r3, #1
 800da30:	4652      	mov	r2, sl
 800da32:	4641      	mov	r1, r8
 800da34:	4638      	mov	r0, r7
 800da36:	47c8      	blx	r9
 800da38:	3001      	adds	r0, #1
 800da3a:	d103      	bne.n	800da44 <_printf_common+0xac>
 800da3c:	f04f 30ff 	mov.w	r0, #4294967295
 800da40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da44:	3501      	adds	r5, #1
 800da46:	e7c6      	b.n	800d9d6 <_printf_common+0x3e>
 800da48:	18e1      	adds	r1, r4, r3
 800da4a:	1c5a      	adds	r2, r3, #1
 800da4c:	2030      	movs	r0, #48	@ 0x30
 800da4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800da52:	4422      	add	r2, r4
 800da54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800da58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800da5c:	3302      	adds	r3, #2
 800da5e:	e7c7      	b.n	800d9f0 <_printf_common+0x58>
 800da60:	2301      	movs	r3, #1
 800da62:	4622      	mov	r2, r4
 800da64:	4641      	mov	r1, r8
 800da66:	4638      	mov	r0, r7
 800da68:	47c8      	blx	r9
 800da6a:	3001      	adds	r0, #1
 800da6c:	d0e6      	beq.n	800da3c <_printf_common+0xa4>
 800da6e:	3601      	adds	r6, #1
 800da70:	e7d9      	b.n	800da26 <_printf_common+0x8e>
	...

0800da74 <_printf_i>:
 800da74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da78:	7e0f      	ldrb	r7, [r1, #24]
 800da7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800da7c:	2f78      	cmp	r7, #120	@ 0x78
 800da7e:	4691      	mov	r9, r2
 800da80:	4680      	mov	r8, r0
 800da82:	460c      	mov	r4, r1
 800da84:	469a      	mov	sl, r3
 800da86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800da8a:	d807      	bhi.n	800da9c <_printf_i+0x28>
 800da8c:	2f62      	cmp	r7, #98	@ 0x62
 800da8e:	d80a      	bhi.n	800daa6 <_printf_i+0x32>
 800da90:	2f00      	cmp	r7, #0
 800da92:	f000 80d2 	beq.w	800dc3a <_printf_i+0x1c6>
 800da96:	2f58      	cmp	r7, #88	@ 0x58
 800da98:	f000 80b9 	beq.w	800dc0e <_printf_i+0x19a>
 800da9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800daa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800daa4:	e03a      	b.n	800db1c <_printf_i+0xa8>
 800daa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800daaa:	2b15      	cmp	r3, #21
 800daac:	d8f6      	bhi.n	800da9c <_printf_i+0x28>
 800daae:	a101      	add	r1, pc, #4	@ (adr r1, 800dab4 <_printf_i+0x40>)
 800dab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dab4:	0800db0d 	.word	0x0800db0d
 800dab8:	0800db21 	.word	0x0800db21
 800dabc:	0800da9d 	.word	0x0800da9d
 800dac0:	0800da9d 	.word	0x0800da9d
 800dac4:	0800da9d 	.word	0x0800da9d
 800dac8:	0800da9d 	.word	0x0800da9d
 800dacc:	0800db21 	.word	0x0800db21
 800dad0:	0800da9d 	.word	0x0800da9d
 800dad4:	0800da9d 	.word	0x0800da9d
 800dad8:	0800da9d 	.word	0x0800da9d
 800dadc:	0800da9d 	.word	0x0800da9d
 800dae0:	0800dc21 	.word	0x0800dc21
 800dae4:	0800db4b 	.word	0x0800db4b
 800dae8:	0800dbdb 	.word	0x0800dbdb
 800daec:	0800da9d 	.word	0x0800da9d
 800daf0:	0800da9d 	.word	0x0800da9d
 800daf4:	0800dc43 	.word	0x0800dc43
 800daf8:	0800da9d 	.word	0x0800da9d
 800dafc:	0800db4b 	.word	0x0800db4b
 800db00:	0800da9d 	.word	0x0800da9d
 800db04:	0800da9d 	.word	0x0800da9d
 800db08:	0800dbe3 	.word	0x0800dbe3
 800db0c:	6833      	ldr	r3, [r6, #0]
 800db0e:	1d1a      	adds	r2, r3, #4
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	6032      	str	r2, [r6, #0]
 800db14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800db1c:	2301      	movs	r3, #1
 800db1e:	e09d      	b.n	800dc5c <_printf_i+0x1e8>
 800db20:	6833      	ldr	r3, [r6, #0]
 800db22:	6820      	ldr	r0, [r4, #0]
 800db24:	1d19      	adds	r1, r3, #4
 800db26:	6031      	str	r1, [r6, #0]
 800db28:	0606      	lsls	r6, r0, #24
 800db2a:	d501      	bpl.n	800db30 <_printf_i+0xbc>
 800db2c:	681d      	ldr	r5, [r3, #0]
 800db2e:	e003      	b.n	800db38 <_printf_i+0xc4>
 800db30:	0645      	lsls	r5, r0, #25
 800db32:	d5fb      	bpl.n	800db2c <_printf_i+0xb8>
 800db34:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db38:	2d00      	cmp	r5, #0
 800db3a:	da03      	bge.n	800db44 <_printf_i+0xd0>
 800db3c:	232d      	movs	r3, #45	@ 0x2d
 800db3e:	426d      	negs	r5, r5
 800db40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db44:	4859      	ldr	r0, [pc, #356]	@ (800dcac <_printf_i+0x238>)
 800db46:	230a      	movs	r3, #10
 800db48:	e011      	b.n	800db6e <_printf_i+0xfa>
 800db4a:	6821      	ldr	r1, [r4, #0]
 800db4c:	6833      	ldr	r3, [r6, #0]
 800db4e:	0608      	lsls	r0, r1, #24
 800db50:	f853 5b04 	ldr.w	r5, [r3], #4
 800db54:	d402      	bmi.n	800db5c <_printf_i+0xe8>
 800db56:	0649      	lsls	r1, r1, #25
 800db58:	bf48      	it	mi
 800db5a:	b2ad      	uxthmi	r5, r5
 800db5c:	2f6f      	cmp	r7, #111	@ 0x6f
 800db5e:	4853      	ldr	r0, [pc, #332]	@ (800dcac <_printf_i+0x238>)
 800db60:	6033      	str	r3, [r6, #0]
 800db62:	bf14      	ite	ne
 800db64:	230a      	movne	r3, #10
 800db66:	2308      	moveq	r3, #8
 800db68:	2100      	movs	r1, #0
 800db6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800db6e:	6866      	ldr	r6, [r4, #4]
 800db70:	60a6      	str	r6, [r4, #8]
 800db72:	2e00      	cmp	r6, #0
 800db74:	bfa2      	ittt	ge
 800db76:	6821      	ldrge	r1, [r4, #0]
 800db78:	f021 0104 	bicge.w	r1, r1, #4
 800db7c:	6021      	strge	r1, [r4, #0]
 800db7e:	b90d      	cbnz	r5, 800db84 <_printf_i+0x110>
 800db80:	2e00      	cmp	r6, #0
 800db82:	d04b      	beq.n	800dc1c <_printf_i+0x1a8>
 800db84:	4616      	mov	r6, r2
 800db86:	fbb5 f1f3 	udiv	r1, r5, r3
 800db8a:	fb03 5711 	mls	r7, r3, r1, r5
 800db8e:	5dc7      	ldrb	r7, [r0, r7]
 800db90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db94:	462f      	mov	r7, r5
 800db96:	42bb      	cmp	r3, r7
 800db98:	460d      	mov	r5, r1
 800db9a:	d9f4      	bls.n	800db86 <_printf_i+0x112>
 800db9c:	2b08      	cmp	r3, #8
 800db9e:	d10b      	bne.n	800dbb8 <_printf_i+0x144>
 800dba0:	6823      	ldr	r3, [r4, #0]
 800dba2:	07df      	lsls	r7, r3, #31
 800dba4:	d508      	bpl.n	800dbb8 <_printf_i+0x144>
 800dba6:	6923      	ldr	r3, [r4, #16]
 800dba8:	6861      	ldr	r1, [r4, #4]
 800dbaa:	4299      	cmp	r1, r3
 800dbac:	bfde      	ittt	le
 800dbae:	2330      	movle	r3, #48	@ 0x30
 800dbb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dbb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dbb8:	1b92      	subs	r2, r2, r6
 800dbba:	6122      	str	r2, [r4, #16]
 800dbbc:	f8cd a000 	str.w	sl, [sp]
 800dbc0:	464b      	mov	r3, r9
 800dbc2:	aa03      	add	r2, sp, #12
 800dbc4:	4621      	mov	r1, r4
 800dbc6:	4640      	mov	r0, r8
 800dbc8:	f7ff fee6 	bl	800d998 <_printf_common>
 800dbcc:	3001      	adds	r0, #1
 800dbce:	d14a      	bne.n	800dc66 <_printf_i+0x1f2>
 800dbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbd4:	b004      	add	sp, #16
 800dbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbda:	6823      	ldr	r3, [r4, #0]
 800dbdc:	f043 0320 	orr.w	r3, r3, #32
 800dbe0:	6023      	str	r3, [r4, #0]
 800dbe2:	4833      	ldr	r0, [pc, #204]	@ (800dcb0 <_printf_i+0x23c>)
 800dbe4:	2778      	movs	r7, #120	@ 0x78
 800dbe6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dbea:	6823      	ldr	r3, [r4, #0]
 800dbec:	6831      	ldr	r1, [r6, #0]
 800dbee:	061f      	lsls	r7, r3, #24
 800dbf0:	f851 5b04 	ldr.w	r5, [r1], #4
 800dbf4:	d402      	bmi.n	800dbfc <_printf_i+0x188>
 800dbf6:	065f      	lsls	r7, r3, #25
 800dbf8:	bf48      	it	mi
 800dbfa:	b2ad      	uxthmi	r5, r5
 800dbfc:	6031      	str	r1, [r6, #0]
 800dbfe:	07d9      	lsls	r1, r3, #31
 800dc00:	bf44      	itt	mi
 800dc02:	f043 0320 	orrmi.w	r3, r3, #32
 800dc06:	6023      	strmi	r3, [r4, #0]
 800dc08:	b11d      	cbz	r5, 800dc12 <_printf_i+0x19e>
 800dc0a:	2310      	movs	r3, #16
 800dc0c:	e7ac      	b.n	800db68 <_printf_i+0xf4>
 800dc0e:	4827      	ldr	r0, [pc, #156]	@ (800dcac <_printf_i+0x238>)
 800dc10:	e7e9      	b.n	800dbe6 <_printf_i+0x172>
 800dc12:	6823      	ldr	r3, [r4, #0]
 800dc14:	f023 0320 	bic.w	r3, r3, #32
 800dc18:	6023      	str	r3, [r4, #0]
 800dc1a:	e7f6      	b.n	800dc0a <_printf_i+0x196>
 800dc1c:	4616      	mov	r6, r2
 800dc1e:	e7bd      	b.n	800db9c <_printf_i+0x128>
 800dc20:	6833      	ldr	r3, [r6, #0]
 800dc22:	6825      	ldr	r5, [r4, #0]
 800dc24:	6961      	ldr	r1, [r4, #20]
 800dc26:	1d18      	adds	r0, r3, #4
 800dc28:	6030      	str	r0, [r6, #0]
 800dc2a:	062e      	lsls	r6, r5, #24
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	d501      	bpl.n	800dc34 <_printf_i+0x1c0>
 800dc30:	6019      	str	r1, [r3, #0]
 800dc32:	e002      	b.n	800dc3a <_printf_i+0x1c6>
 800dc34:	0668      	lsls	r0, r5, #25
 800dc36:	d5fb      	bpl.n	800dc30 <_printf_i+0x1bc>
 800dc38:	8019      	strh	r1, [r3, #0]
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	6123      	str	r3, [r4, #16]
 800dc3e:	4616      	mov	r6, r2
 800dc40:	e7bc      	b.n	800dbbc <_printf_i+0x148>
 800dc42:	6833      	ldr	r3, [r6, #0]
 800dc44:	1d1a      	adds	r2, r3, #4
 800dc46:	6032      	str	r2, [r6, #0]
 800dc48:	681e      	ldr	r6, [r3, #0]
 800dc4a:	6862      	ldr	r2, [r4, #4]
 800dc4c:	2100      	movs	r1, #0
 800dc4e:	4630      	mov	r0, r6
 800dc50:	f7f2 fabe 	bl	80001d0 <memchr>
 800dc54:	b108      	cbz	r0, 800dc5a <_printf_i+0x1e6>
 800dc56:	1b80      	subs	r0, r0, r6
 800dc58:	6060      	str	r0, [r4, #4]
 800dc5a:	6863      	ldr	r3, [r4, #4]
 800dc5c:	6123      	str	r3, [r4, #16]
 800dc5e:	2300      	movs	r3, #0
 800dc60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc64:	e7aa      	b.n	800dbbc <_printf_i+0x148>
 800dc66:	6923      	ldr	r3, [r4, #16]
 800dc68:	4632      	mov	r2, r6
 800dc6a:	4649      	mov	r1, r9
 800dc6c:	4640      	mov	r0, r8
 800dc6e:	47d0      	blx	sl
 800dc70:	3001      	adds	r0, #1
 800dc72:	d0ad      	beq.n	800dbd0 <_printf_i+0x15c>
 800dc74:	6823      	ldr	r3, [r4, #0]
 800dc76:	079b      	lsls	r3, r3, #30
 800dc78:	d413      	bmi.n	800dca2 <_printf_i+0x22e>
 800dc7a:	68e0      	ldr	r0, [r4, #12]
 800dc7c:	9b03      	ldr	r3, [sp, #12]
 800dc7e:	4298      	cmp	r0, r3
 800dc80:	bfb8      	it	lt
 800dc82:	4618      	movlt	r0, r3
 800dc84:	e7a6      	b.n	800dbd4 <_printf_i+0x160>
 800dc86:	2301      	movs	r3, #1
 800dc88:	4632      	mov	r2, r6
 800dc8a:	4649      	mov	r1, r9
 800dc8c:	4640      	mov	r0, r8
 800dc8e:	47d0      	blx	sl
 800dc90:	3001      	adds	r0, #1
 800dc92:	d09d      	beq.n	800dbd0 <_printf_i+0x15c>
 800dc94:	3501      	adds	r5, #1
 800dc96:	68e3      	ldr	r3, [r4, #12]
 800dc98:	9903      	ldr	r1, [sp, #12]
 800dc9a:	1a5b      	subs	r3, r3, r1
 800dc9c:	42ab      	cmp	r3, r5
 800dc9e:	dcf2      	bgt.n	800dc86 <_printf_i+0x212>
 800dca0:	e7eb      	b.n	800dc7a <_printf_i+0x206>
 800dca2:	2500      	movs	r5, #0
 800dca4:	f104 0619 	add.w	r6, r4, #25
 800dca8:	e7f5      	b.n	800dc96 <_printf_i+0x222>
 800dcaa:	bf00      	nop
 800dcac:	080103a2 	.word	0x080103a2
 800dcb0:	080103b3 	.word	0x080103b3

0800dcb4 <std>:
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	b510      	push	{r4, lr}
 800dcb8:	4604      	mov	r4, r0
 800dcba:	e9c0 3300 	strd	r3, r3, [r0]
 800dcbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dcc2:	6083      	str	r3, [r0, #8]
 800dcc4:	8181      	strh	r1, [r0, #12]
 800dcc6:	6643      	str	r3, [r0, #100]	@ 0x64
 800dcc8:	81c2      	strh	r2, [r0, #14]
 800dcca:	6183      	str	r3, [r0, #24]
 800dccc:	4619      	mov	r1, r3
 800dcce:	2208      	movs	r2, #8
 800dcd0:	305c      	adds	r0, #92	@ 0x5c
 800dcd2:	f000 f8f4 	bl	800debe <memset>
 800dcd6:	4b0d      	ldr	r3, [pc, #52]	@ (800dd0c <std+0x58>)
 800dcd8:	6263      	str	r3, [r4, #36]	@ 0x24
 800dcda:	4b0d      	ldr	r3, [pc, #52]	@ (800dd10 <std+0x5c>)
 800dcdc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dcde:	4b0d      	ldr	r3, [pc, #52]	@ (800dd14 <std+0x60>)
 800dce0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dce2:	4b0d      	ldr	r3, [pc, #52]	@ (800dd18 <std+0x64>)
 800dce4:	6323      	str	r3, [r4, #48]	@ 0x30
 800dce6:	4b0d      	ldr	r3, [pc, #52]	@ (800dd1c <std+0x68>)
 800dce8:	6224      	str	r4, [r4, #32]
 800dcea:	429c      	cmp	r4, r3
 800dcec:	d006      	beq.n	800dcfc <std+0x48>
 800dcee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dcf2:	4294      	cmp	r4, r2
 800dcf4:	d002      	beq.n	800dcfc <std+0x48>
 800dcf6:	33d0      	adds	r3, #208	@ 0xd0
 800dcf8:	429c      	cmp	r4, r3
 800dcfa:	d105      	bne.n	800dd08 <std+0x54>
 800dcfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dd00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd04:	f000 b958 	b.w	800dfb8 <__retarget_lock_init_recursive>
 800dd08:	bd10      	pop	{r4, pc}
 800dd0a:	bf00      	nop
 800dd0c:	0800de39 	.word	0x0800de39
 800dd10:	0800de5b 	.word	0x0800de5b
 800dd14:	0800de93 	.word	0x0800de93
 800dd18:	0800deb7 	.word	0x0800deb7
 800dd1c:	2000239c 	.word	0x2000239c

0800dd20 <stdio_exit_handler>:
 800dd20:	4a02      	ldr	r2, [pc, #8]	@ (800dd2c <stdio_exit_handler+0xc>)
 800dd22:	4903      	ldr	r1, [pc, #12]	@ (800dd30 <stdio_exit_handler+0x10>)
 800dd24:	4803      	ldr	r0, [pc, #12]	@ (800dd34 <stdio_exit_handler+0x14>)
 800dd26:	f000 b869 	b.w	800ddfc <_fwalk_sglue>
 800dd2a:	bf00      	nop
 800dd2c:	20000100 	.word	0x20000100
 800dd30:	0800f665 	.word	0x0800f665
 800dd34:	20000110 	.word	0x20000110

0800dd38 <cleanup_stdio>:
 800dd38:	6841      	ldr	r1, [r0, #4]
 800dd3a:	4b0c      	ldr	r3, [pc, #48]	@ (800dd6c <cleanup_stdio+0x34>)
 800dd3c:	4299      	cmp	r1, r3
 800dd3e:	b510      	push	{r4, lr}
 800dd40:	4604      	mov	r4, r0
 800dd42:	d001      	beq.n	800dd48 <cleanup_stdio+0x10>
 800dd44:	f001 fc8e 	bl	800f664 <_fflush_r>
 800dd48:	68a1      	ldr	r1, [r4, #8]
 800dd4a:	4b09      	ldr	r3, [pc, #36]	@ (800dd70 <cleanup_stdio+0x38>)
 800dd4c:	4299      	cmp	r1, r3
 800dd4e:	d002      	beq.n	800dd56 <cleanup_stdio+0x1e>
 800dd50:	4620      	mov	r0, r4
 800dd52:	f001 fc87 	bl	800f664 <_fflush_r>
 800dd56:	68e1      	ldr	r1, [r4, #12]
 800dd58:	4b06      	ldr	r3, [pc, #24]	@ (800dd74 <cleanup_stdio+0x3c>)
 800dd5a:	4299      	cmp	r1, r3
 800dd5c:	d004      	beq.n	800dd68 <cleanup_stdio+0x30>
 800dd5e:	4620      	mov	r0, r4
 800dd60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd64:	f001 bc7e 	b.w	800f664 <_fflush_r>
 800dd68:	bd10      	pop	{r4, pc}
 800dd6a:	bf00      	nop
 800dd6c:	2000239c 	.word	0x2000239c
 800dd70:	20002404 	.word	0x20002404
 800dd74:	2000246c 	.word	0x2000246c

0800dd78 <global_stdio_init.part.0>:
 800dd78:	b510      	push	{r4, lr}
 800dd7a:	4b0b      	ldr	r3, [pc, #44]	@ (800dda8 <global_stdio_init.part.0+0x30>)
 800dd7c:	4c0b      	ldr	r4, [pc, #44]	@ (800ddac <global_stdio_init.part.0+0x34>)
 800dd7e:	4a0c      	ldr	r2, [pc, #48]	@ (800ddb0 <global_stdio_init.part.0+0x38>)
 800dd80:	601a      	str	r2, [r3, #0]
 800dd82:	4620      	mov	r0, r4
 800dd84:	2200      	movs	r2, #0
 800dd86:	2104      	movs	r1, #4
 800dd88:	f7ff ff94 	bl	800dcb4 <std>
 800dd8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dd90:	2201      	movs	r2, #1
 800dd92:	2109      	movs	r1, #9
 800dd94:	f7ff ff8e 	bl	800dcb4 <std>
 800dd98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dd9c:	2202      	movs	r2, #2
 800dd9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dda2:	2112      	movs	r1, #18
 800dda4:	f7ff bf86 	b.w	800dcb4 <std>
 800dda8:	200024d4 	.word	0x200024d4
 800ddac:	2000239c 	.word	0x2000239c
 800ddb0:	0800dd21 	.word	0x0800dd21

0800ddb4 <__sfp_lock_acquire>:
 800ddb4:	4801      	ldr	r0, [pc, #4]	@ (800ddbc <__sfp_lock_acquire+0x8>)
 800ddb6:	f000 b900 	b.w	800dfba <__retarget_lock_acquire_recursive>
 800ddba:	bf00      	nop
 800ddbc:	200024dd 	.word	0x200024dd

0800ddc0 <__sfp_lock_release>:
 800ddc0:	4801      	ldr	r0, [pc, #4]	@ (800ddc8 <__sfp_lock_release+0x8>)
 800ddc2:	f000 b8fb 	b.w	800dfbc <__retarget_lock_release_recursive>
 800ddc6:	bf00      	nop
 800ddc8:	200024dd 	.word	0x200024dd

0800ddcc <__sinit>:
 800ddcc:	b510      	push	{r4, lr}
 800ddce:	4604      	mov	r4, r0
 800ddd0:	f7ff fff0 	bl	800ddb4 <__sfp_lock_acquire>
 800ddd4:	6a23      	ldr	r3, [r4, #32]
 800ddd6:	b11b      	cbz	r3, 800dde0 <__sinit+0x14>
 800ddd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dddc:	f7ff bff0 	b.w	800ddc0 <__sfp_lock_release>
 800dde0:	4b04      	ldr	r3, [pc, #16]	@ (800ddf4 <__sinit+0x28>)
 800dde2:	6223      	str	r3, [r4, #32]
 800dde4:	4b04      	ldr	r3, [pc, #16]	@ (800ddf8 <__sinit+0x2c>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d1f5      	bne.n	800ddd8 <__sinit+0xc>
 800ddec:	f7ff ffc4 	bl	800dd78 <global_stdio_init.part.0>
 800ddf0:	e7f2      	b.n	800ddd8 <__sinit+0xc>
 800ddf2:	bf00      	nop
 800ddf4:	0800dd39 	.word	0x0800dd39
 800ddf8:	200024d4 	.word	0x200024d4

0800ddfc <_fwalk_sglue>:
 800ddfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de00:	4607      	mov	r7, r0
 800de02:	4688      	mov	r8, r1
 800de04:	4614      	mov	r4, r2
 800de06:	2600      	movs	r6, #0
 800de08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800de0c:	f1b9 0901 	subs.w	r9, r9, #1
 800de10:	d505      	bpl.n	800de1e <_fwalk_sglue+0x22>
 800de12:	6824      	ldr	r4, [r4, #0]
 800de14:	2c00      	cmp	r4, #0
 800de16:	d1f7      	bne.n	800de08 <_fwalk_sglue+0xc>
 800de18:	4630      	mov	r0, r6
 800de1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de1e:	89ab      	ldrh	r3, [r5, #12]
 800de20:	2b01      	cmp	r3, #1
 800de22:	d907      	bls.n	800de34 <_fwalk_sglue+0x38>
 800de24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de28:	3301      	adds	r3, #1
 800de2a:	d003      	beq.n	800de34 <_fwalk_sglue+0x38>
 800de2c:	4629      	mov	r1, r5
 800de2e:	4638      	mov	r0, r7
 800de30:	47c0      	blx	r8
 800de32:	4306      	orrs	r6, r0
 800de34:	3568      	adds	r5, #104	@ 0x68
 800de36:	e7e9      	b.n	800de0c <_fwalk_sglue+0x10>

0800de38 <__sread>:
 800de38:	b510      	push	{r4, lr}
 800de3a:	460c      	mov	r4, r1
 800de3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de40:	f000 f86c 	bl	800df1c <_read_r>
 800de44:	2800      	cmp	r0, #0
 800de46:	bfab      	itete	ge
 800de48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800de4a:	89a3      	ldrhlt	r3, [r4, #12]
 800de4c:	181b      	addge	r3, r3, r0
 800de4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800de52:	bfac      	ite	ge
 800de54:	6563      	strge	r3, [r4, #84]	@ 0x54
 800de56:	81a3      	strhlt	r3, [r4, #12]
 800de58:	bd10      	pop	{r4, pc}

0800de5a <__swrite>:
 800de5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de5e:	461f      	mov	r7, r3
 800de60:	898b      	ldrh	r3, [r1, #12]
 800de62:	05db      	lsls	r3, r3, #23
 800de64:	4605      	mov	r5, r0
 800de66:	460c      	mov	r4, r1
 800de68:	4616      	mov	r6, r2
 800de6a:	d505      	bpl.n	800de78 <__swrite+0x1e>
 800de6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de70:	2302      	movs	r3, #2
 800de72:	2200      	movs	r2, #0
 800de74:	f000 f840 	bl	800def8 <_lseek_r>
 800de78:	89a3      	ldrh	r3, [r4, #12]
 800de7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800de82:	81a3      	strh	r3, [r4, #12]
 800de84:	4632      	mov	r2, r6
 800de86:	463b      	mov	r3, r7
 800de88:	4628      	mov	r0, r5
 800de8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de8e:	f000 b857 	b.w	800df40 <_write_r>

0800de92 <__sseek>:
 800de92:	b510      	push	{r4, lr}
 800de94:	460c      	mov	r4, r1
 800de96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de9a:	f000 f82d 	bl	800def8 <_lseek_r>
 800de9e:	1c43      	adds	r3, r0, #1
 800dea0:	89a3      	ldrh	r3, [r4, #12]
 800dea2:	bf15      	itete	ne
 800dea4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dea6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800deaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800deae:	81a3      	strheq	r3, [r4, #12]
 800deb0:	bf18      	it	ne
 800deb2:	81a3      	strhne	r3, [r4, #12]
 800deb4:	bd10      	pop	{r4, pc}

0800deb6 <__sclose>:
 800deb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deba:	f000 b80d 	b.w	800ded8 <_close_r>

0800debe <memset>:
 800debe:	4402      	add	r2, r0
 800dec0:	4603      	mov	r3, r0
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d100      	bne.n	800dec8 <memset+0xa>
 800dec6:	4770      	bx	lr
 800dec8:	f803 1b01 	strb.w	r1, [r3], #1
 800decc:	e7f9      	b.n	800dec2 <memset+0x4>
	...

0800ded0 <_localeconv_r>:
 800ded0:	4800      	ldr	r0, [pc, #0]	@ (800ded4 <_localeconv_r+0x4>)
 800ded2:	4770      	bx	lr
 800ded4:	2000024c 	.word	0x2000024c

0800ded8 <_close_r>:
 800ded8:	b538      	push	{r3, r4, r5, lr}
 800deda:	4d06      	ldr	r5, [pc, #24]	@ (800def4 <_close_r+0x1c>)
 800dedc:	2300      	movs	r3, #0
 800dede:	4604      	mov	r4, r0
 800dee0:	4608      	mov	r0, r1
 800dee2:	602b      	str	r3, [r5, #0]
 800dee4:	f7f4 fd70 	bl	80029c8 <_close>
 800dee8:	1c43      	adds	r3, r0, #1
 800deea:	d102      	bne.n	800def2 <_close_r+0x1a>
 800deec:	682b      	ldr	r3, [r5, #0]
 800deee:	b103      	cbz	r3, 800def2 <_close_r+0x1a>
 800def0:	6023      	str	r3, [r4, #0]
 800def2:	bd38      	pop	{r3, r4, r5, pc}
 800def4:	200024d8 	.word	0x200024d8

0800def8 <_lseek_r>:
 800def8:	b538      	push	{r3, r4, r5, lr}
 800defa:	4d07      	ldr	r5, [pc, #28]	@ (800df18 <_lseek_r+0x20>)
 800defc:	4604      	mov	r4, r0
 800defe:	4608      	mov	r0, r1
 800df00:	4611      	mov	r1, r2
 800df02:	2200      	movs	r2, #0
 800df04:	602a      	str	r2, [r5, #0]
 800df06:	461a      	mov	r2, r3
 800df08:	f7f4 fd85 	bl	8002a16 <_lseek>
 800df0c:	1c43      	adds	r3, r0, #1
 800df0e:	d102      	bne.n	800df16 <_lseek_r+0x1e>
 800df10:	682b      	ldr	r3, [r5, #0]
 800df12:	b103      	cbz	r3, 800df16 <_lseek_r+0x1e>
 800df14:	6023      	str	r3, [r4, #0]
 800df16:	bd38      	pop	{r3, r4, r5, pc}
 800df18:	200024d8 	.word	0x200024d8

0800df1c <_read_r>:
 800df1c:	b538      	push	{r3, r4, r5, lr}
 800df1e:	4d07      	ldr	r5, [pc, #28]	@ (800df3c <_read_r+0x20>)
 800df20:	4604      	mov	r4, r0
 800df22:	4608      	mov	r0, r1
 800df24:	4611      	mov	r1, r2
 800df26:	2200      	movs	r2, #0
 800df28:	602a      	str	r2, [r5, #0]
 800df2a:	461a      	mov	r2, r3
 800df2c:	f7f4 fd13 	bl	8002956 <_read>
 800df30:	1c43      	adds	r3, r0, #1
 800df32:	d102      	bne.n	800df3a <_read_r+0x1e>
 800df34:	682b      	ldr	r3, [r5, #0]
 800df36:	b103      	cbz	r3, 800df3a <_read_r+0x1e>
 800df38:	6023      	str	r3, [r4, #0]
 800df3a:	bd38      	pop	{r3, r4, r5, pc}
 800df3c:	200024d8 	.word	0x200024d8

0800df40 <_write_r>:
 800df40:	b538      	push	{r3, r4, r5, lr}
 800df42:	4d07      	ldr	r5, [pc, #28]	@ (800df60 <_write_r+0x20>)
 800df44:	4604      	mov	r4, r0
 800df46:	4608      	mov	r0, r1
 800df48:	4611      	mov	r1, r2
 800df4a:	2200      	movs	r2, #0
 800df4c:	602a      	str	r2, [r5, #0]
 800df4e:	461a      	mov	r2, r3
 800df50:	f7f4 fd1e 	bl	8002990 <_write>
 800df54:	1c43      	adds	r3, r0, #1
 800df56:	d102      	bne.n	800df5e <_write_r+0x1e>
 800df58:	682b      	ldr	r3, [r5, #0]
 800df5a:	b103      	cbz	r3, 800df5e <_write_r+0x1e>
 800df5c:	6023      	str	r3, [r4, #0]
 800df5e:	bd38      	pop	{r3, r4, r5, pc}
 800df60:	200024d8 	.word	0x200024d8

0800df64 <__errno>:
 800df64:	4b01      	ldr	r3, [pc, #4]	@ (800df6c <__errno+0x8>)
 800df66:	6818      	ldr	r0, [r3, #0]
 800df68:	4770      	bx	lr
 800df6a:	bf00      	nop
 800df6c:	2000010c 	.word	0x2000010c

0800df70 <__libc_init_array>:
 800df70:	b570      	push	{r4, r5, r6, lr}
 800df72:	4d0d      	ldr	r5, [pc, #52]	@ (800dfa8 <__libc_init_array+0x38>)
 800df74:	4c0d      	ldr	r4, [pc, #52]	@ (800dfac <__libc_init_array+0x3c>)
 800df76:	1b64      	subs	r4, r4, r5
 800df78:	10a4      	asrs	r4, r4, #2
 800df7a:	2600      	movs	r6, #0
 800df7c:	42a6      	cmp	r6, r4
 800df7e:	d109      	bne.n	800df94 <__libc_init_array+0x24>
 800df80:	4d0b      	ldr	r5, [pc, #44]	@ (800dfb0 <__libc_init_array+0x40>)
 800df82:	4c0c      	ldr	r4, [pc, #48]	@ (800dfb4 <__libc_init_array+0x44>)
 800df84:	f002 f9c2 	bl	801030c <_init>
 800df88:	1b64      	subs	r4, r4, r5
 800df8a:	10a4      	asrs	r4, r4, #2
 800df8c:	2600      	movs	r6, #0
 800df8e:	42a6      	cmp	r6, r4
 800df90:	d105      	bne.n	800df9e <__libc_init_array+0x2e>
 800df92:	bd70      	pop	{r4, r5, r6, pc}
 800df94:	f855 3b04 	ldr.w	r3, [r5], #4
 800df98:	4798      	blx	r3
 800df9a:	3601      	adds	r6, #1
 800df9c:	e7ee      	b.n	800df7c <__libc_init_array+0xc>
 800df9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfa2:	4798      	blx	r3
 800dfa4:	3601      	adds	r6, #1
 800dfa6:	e7f2      	b.n	800df8e <__libc_init_array+0x1e>
 800dfa8:	08010708 	.word	0x08010708
 800dfac:	08010708 	.word	0x08010708
 800dfb0:	08010708 	.word	0x08010708
 800dfb4:	0801070c 	.word	0x0801070c

0800dfb8 <__retarget_lock_init_recursive>:
 800dfb8:	4770      	bx	lr

0800dfba <__retarget_lock_acquire_recursive>:
 800dfba:	4770      	bx	lr

0800dfbc <__retarget_lock_release_recursive>:
 800dfbc:	4770      	bx	lr

0800dfbe <quorem>:
 800dfbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfc2:	6903      	ldr	r3, [r0, #16]
 800dfc4:	690c      	ldr	r4, [r1, #16]
 800dfc6:	42a3      	cmp	r3, r4
 800dfc8:	4607      	mov	r7, r0
 800dfca:	db7e      	blt.n	800e0ca <quorem+0x10c>
 800dfcc:	3c01      	subs	r4, #1
 800dfce:	f101 0814 	add.w	r8, r1, #20
 800dfd2:	00a3      	lsls	r3, r4, #2
 800dfd4:	f100 0514 	add.w	r5, r0, #20
 800dfd8:	9300      	str	r3, [sp, #0]
 800dfda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dfde:	9301      	str	r3, [sp, #4]
 800dfe0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dfe4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dfe8:	3301      	adds	r3, #1
 800dfea:	429a      	cmp	r2, r3
 800dfec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dff0:	fbb2 f6f3 	udiv	r6, r2, r3
 800dff4:	d32e      	bcc.n	800e054 <quorem+0x96>
 800dff6:	f04f 0a00 	mov.w	sl, #0
 800dffa:	46c4      	mov	ip, r8
 800dffc:	46ae      	mov	lr, r5
 800dffe:	46d3      	mov	fp, sl
 800e000:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e004:	b298      	uxth	r0, r3
 800e006:	fb06 a000 	mla	r0, r6, r0, sl
 800e00a:	0c02      	lsrs	r2, r0, #16
 800e00c:	0c1b      	lsrs	r3, r3, #16
 800e00e:	fb06 2303 	mla	r3, r6, r3, r2
 800e012:	f8de 2000 	ldr.w	r2, [lr]
 800e016:	b280      	uxth	r0, r0
 800e018:	b292      	uxth	r2, r2
 800e01a:	1a12      	subs	r2, r2, r0
 800e01c:	445a      	add	r2, fp
 800e01e:	f8de 0000 	ldr.w	r0, [lr]
 800e022:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e026:	b29b      	uxth	r3, r3
 800e028:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e02c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e030:	b292      	uxth	r2, r2
 800e032:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e036:	45e1      	cmp	r9, ip
 800e038:	f84e 2b04 	str.w	r2, [lr], #4
 800e03c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e040:	d2de      	bcs.n	800e000 <quorem+0x42>
 800e042:	9b00      	ldr	r3, [sp, #0]
 800e044:	58eb      	ldr	r3, [r5, r3]
 800e046:	b92b      	cbnz	r3, 800e054 <quorem+0x96>
 800e048:	9b01      	ldr	r3, [sp, #4]
 800e04a:	3b04      	subs	r3, #4
 800e04c:	429d      	cmp	r5, r3
 800e04e:	461a      	mov	r2, r3
 800e050:	d32f      	bcc.n	800e0b2 <quorem+0xf4>
 800e052:	613c      	str	r4, [r7, #16]
 800e054:	4638      	mov	r0, r7
 800e056:	f001 f979 	bl	800f34c <__mcmp>
 800e05a:	2800      	cmp	r0, #0
 800e05c:	db25      	blt.n	800e0aa <quorem+0xec>
 800e05e:	4629      	mov	r1, r5
 800e060:	2000      	movs	r0, #0
 800e062:	f858 2b04 	ldr.w	r2, [r8], #4
 800e066:	f8d1 c000 	ldr.w	ip, [r1]
 800e06a:	fa1f fe82 	uxth.w	lr, r2
 800e06e:	fa1f f38c 	uxth.w	r3, ip
 800e072:	eba3 030e 	sub.w	r3, r3, lr
 800e076:	4403      	add	r3, r0
 800e078:	0c12      	lsrs	r2, r2, #16
 800e07a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e07e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e082:	b29b      	uxth	r3, r3
 800e084:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e088:	45c1      	cmp	r9, r8
 800e08a:	f841 3b04 	str.w	r3, [r1], #4
 800e08e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e092:	d2e6      	bcs.n	800e062 <quorem+0xa4>
 800e094:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e098:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e09c:	b922      	cbnz	r2, 800e0a8 <quorem+0xea>
 800e09e:	3b04      	subs	r3, #4
 800e0a0:	429d      	cmp	r5, r3
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	d30b      	bcc.n	800e0be <quorem+0x100>
 800e0a6:	613c      	str	r4, [r7, #16]
 800e0a8:	3601      	adds	r6, #1
 800e0aa:	4630      	mov	r0, r6
 800e0ac:	b003      	add	sp, #12
 800e0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0b2:	6812      	ldr	r2, [r2, #0]
 800e0b4:	3b04      	subs	r3, #4
 800e0b6:	2a00      	cmp	r2, #0
 800e0b8:	d1cb      	bne.n	800e052 <quorem+0x94>
 800e0ba:	3c01      	subs	r4, #1
 800e0bc:	e7c6      	b.n	800e04c <quorem+0x8e>
 800e0be:	6812      	ldr	r2, [r2, #0]
 800e0c0:	3b04      	subs	r3, #4
 800e0c2:	2a00      	cmp	r2, #0
 800e0c4:	d1ef      	bne.n	800e0a6 <quorem+0xe8>
 800e0c6:	3c01      	subs	r4, #1
 800e0c8:	e7ea      	b.n	800e0a0 <quorem+0xe2>
 800e0ca:	2000      	movs	r0, #0
 800e0cc:	e7ee      	b.n	800e0ac <quorem+0xee>
	...

0800e0d0 <_dtoa_r>:
 800e0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0d4:	69c7      	ldr	r7, [r0, #28]
 800e0d6:	b099      	sub	sp, #100	@ 0x64
 800e0d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e0dc:	ec55 4b10 	vmov	r4, r5, d0
 800e0e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e0e2:	9109      	str	r1, [sp, #36]	@ 0x24
 800e0e4:	4683      	mov	fp, r0
 800e0e6:	920e      	str	r2, [sp, #56]	@ 0x38
 800e0e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e0ea:	b97f      	cbnz	r7, 800e10c <_dtoa_r+0x3c>
 800e0ec:	2010      	movs	r0, #16
 800e0ee:	f000 fdfd 	bl	800ecec <malloc>
 800e0f2:	4602      	mov	r2, r0
 800e0f4:	f8cb 001c 	str.w	r0, [fp, #28]
 800e0f8:	b920      	cbnz	r0, 800e104 <_dtoa_r+0x34>
 800e0fa:	4ba7      	ldr	r3, [pc, #668]	@ (800e398 <_dtoa_r+0x2c8>)
 800e0fc:	21ef      	movs	r1, #239	@ 0xef
 800e0fe:	48a7      	ldr	r0, [pc, #668]	@ (800e39c <_dtoa_r+0x2cc>)
 800e100:	f001 faf6 	bl	800f6f0 <__assert_func>
 800e104:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e108:	6007      	str	r7, [r0, #0]
 800e10a:	60c7      	str	r7, [r0, #12]
 800e10c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e110:	6819      	ldr	r1, [r3, #0]
 800e112:	b159      	cbz	r1, 800e12c <_dtoa_r+0x5c>
 800e114:	685a      	ldr	r2, [r3, #4]
 800e116:	604a      	str	r2, [r1, #4]
 800e118:	2301      	movs	r3, #1
 800e11a:	4093      	lsls	r3, r2
 800e11c:	608b      	str	r3, [r1, #8]
 800e11e:	4658      	mov	r0, fp
 800e120:	f000 feda 	bl	800eed8 <_Bfree>
 800e124:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e128:	2200      	movs	r2, #0
 800e12a:	601a      	str	r2, [r3, #0]
 800e12c:	1e2b      	subs	r3, r5, #0
 800e12e:	bfb9      	ittee	lt
 800e130:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e134:	9303      	strlt	r3, [sp, #12]
 800e136:	2300      	movge	r3, #0
 800e138:	6033      	strge	r3, [r6, #0]
 800e13a:	9f03      	ldr	r7, [sp, #12]
 800e13c:	4b98      	ldr	r3, [pc, #608]	@ (800e3a0 <_dtoa_r+0x2d0>)
 800e13e:	bfbc      	itt	lt
 800e140:	2201      	movlt	r2, #1
 800e142:	6032      	strlt	r2, [r6, #0]
 800e144:	43bb      	bics	r3, r7
 800e146:	d112      	bne.n	800e16e <_dtoa_r+0x9e>
 800e148:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e14a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e14e:	6013      	str	r3, [r2, #0]
 800e150:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e154:	4323      	orrs	r3, r4
 800e156:	f000 854d 	beq.w	800ebf4 <_dtoa_r+0xb24>
 800e15a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e15c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e3b4 <_dtoa_r+0x2e4>
 800e160:	2b00      	cmp	r3, #0
 800e162:	f000 854f 	beq.w	800ec04 <_dtoa_r+0xb34>
 800e166:	f10a 0303 	add.w	r3, sl, #3
 800e16a:	f000 bd49 	b.w	800ec00 <_dtoa_r+0xb30>
 800e16e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e172:	2200      	movs	r2, #0
 800e174:	ec51 0b17 	vmov	r0, r1, d7
 800e178:	2300      	movs	r3, #0
 800e17a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e17e:	f7f2 fca3 	bl	8000ac8 <__aeabi_dcmpeq>
 800e182:	4680      	mov	r8, r0
 800e184:	b158      	cbz	r0, 800e19e <_dtoa_r+0xce>
 800e186:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e188:	2301      	movs	r3, #1
 800e18a:	6013      	str	r3, [r2, #0]
 800e18c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e18e:	b113      	cbz	r3, 800e196 <_dtoa_r+0xc6>
 800e190:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e192:	4b84      	ldr	r3, [pc, #528]	@ (800e3a4 <_dtoa_r+0x2d4>)
 800e194:	6013      	str	r3, [r2, #0]
 800e196:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e3b8 <_dtoa_r+0x2e8>
 800e19a:	f000 bd33 	b.w	800ec04 <_dtoa_r+0xb34>
 800e19e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e1a2:	aa16      	add	r2, sp, #88	@ 0x58
 800e1a4:	a917      	add	r1, sp, #92	@ 0x5c
 800e1a6:	4658      	mov	r0, fp
 800e1a8:	f001 f980 	bl	800f4ac <__d2b>
 800e1ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e1b0:	4681      	mov	r9, r0
 800e1b2:	2e00      	cmp	r6, #0
 800e1b4:	d077      	beq.n	800e2a6 <_dtoa_r+0x1d6>
 800e1b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e1b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e1bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e1c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e1c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e1c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e1cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	4b74      	ldr	r3, [pc, #464]	@ (800e3a8 <_dtoa_r+0x2d8>)
 800e1d6:	f7f2 f857 	bl	8000288 <__aeabi_dsub>
 800e1da:	a369      	add	r3, pc, #420	@ (adr r3, 800e380 <_dtoa_r+0x2b0>)
 800e1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e0:	f7f2 fa0a 	bl	80005f8 <__aeabi_dmul>
 800e1e4:	a368      	add	r3, pc, #416	@ (adr r3, 800e388 <_dtoa_r+0x2b8>)
 800e1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ea:	f7f2 f84f 	bl	800028c <__adddf3>
 800e1ee:	4604      	mov	r4, r0
 800e1f0:	4630      	mov	r0, r6
 800e1f2:	460d      	mov	r5, r1
 800e1f4:	f7f2 f996 	bl	8000524 <__aeabi_i2d>
 800e1f8:	a365      	add	r3, pc, #404	@ (adr r3, 800e390 <_dtoa_r+0x2c0>)
 800e1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fe:	f7f2 f9fb 	bl	80005f8 <__aeabi_dmul>
 800e202:	4602      	mov	r2, r0
 800e204:	460b      	mov	r3, r1
 800e206:	4620      	mov	r0, r4
 800e208:	4629      	mov	r1, r5
 800e20a:	f7f2 f83f 	bl	800028c <__adddf3>
 800e20e:	4604      	mov	r4, r0
 800e210:	460d      	mov	r5, r1
 800e212:	f7f2 fca1 	bl	8000b58 <__aeabi_d2iz>
 800e216:	2200      	movs	r2, #0
 800e218:	4607      	mov	r7, r0
 800e21a:	2300      	movs	r3, #0
 800e21c:	4620      	mov	r0, r4
 800e21e:	4629      	mov	r1, r5
 800e220:	f7f2 fc5c 	bl	8000adc <__aeabi_dcmplt>
 800e224:	b140      	cbz	r0, 800e238 <_dtoa_r+0x168>
 800e226:	4638      	mov	r0, r7
 800e228:	f7f2 f97c 	bl	8000524 <__aeabi_i2d>
 800e22c:	4622      	mov	r2, r4
 800e22e:	462b      	mov	r3, r5
 800e230:	f7f2 fc4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e234:	b900      	cbnz	r0, 800e238 <_dtoa_r+0x168>
 800e236:	3f01      	subs	r7, #1
 800e238:	2f16      	cmp	r7, #22
 800e23a:	d851      	bhi.n	800e2e0 <_dtoa_r+0x210>
 800e23c:	4b5b      	ldr	r3, [pc, #364]	@ (800e3ac <_dtoa_r+0x2dc>)
 800e23e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e246:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e24a:	f7f2 fc47 	bl	8000adc <__aeabi_dcmplt>
 800e24e:	2800      	cmp	r0, #0
 800e250:	d048      	beq.n	800e2e4 <_dtoa_r+0x214>
 800e252:	3f01      	subs	r7, #1
 800e254:	2300      	movs	r3, #0
 800e256:	9312      	str	r3, [sp, #72]	@ 0x48
 800e258:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e25a:	1b9b      	subs	r3, r3, r6
 800e25c:	1e5a      	subs	r2, r3, #1
 800e25e:	bf44      	itt	mi
 800e260:	f1c3 0801 	rsbmi	r8, r3, #1
 800e264:	2300      	movmi	r3, #0
 800e266:	9208      	str	r2, [sp, #32]
 800e268:	bf54      	ite	pl
 800e26a:	f04f 0800 	movpl.w	r8, #0
 800e26e:	9308      	strmi	r3, [sp, #32]
 800e270:	2f00      	cmp	r7, #0
 800e272:	db39      	blt.n	800e2e8 <_dtoa_r+0x218>
 800e274:	9b08      	ldr	r3, [sp, #32]
 800e276:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e278:	443b      	add	r3, r7
 800e27a:	9308      	str	r3, [sp, #32]
 800e27c:	2300      	movs	r3, #0
 800e27e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e282:	2b09      	cmp	r3, #9
 800e284:	d864      	bhi.n	800e350 <_dtoa_r+0x280>
 800e286:	2b05      	cmp	r3, #5
 800e288:	bfc4      	itt	gt
 800e28a:	3b04      	subgt	r3, #4
 800e28c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e28e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e290:	f1a3 0302 	sub.w	r3, r3, #2
 800e294:	bfcc      	ite	gt
 800e296:	2400      	movgt	r4, #0
 800e298:	2401      	movle	r4, #1
 800e29a:	2b03      	cmp	r3, #3
 800e29c:	d863      	bhi.n	800e366 <_dtoa_r+0x296>
 800e29e:	e8df f003 	tbb	[pc, r3]
 800e2a2:	372a      	.short	0x372a
 800e2a4:	5535      	.short	0x5535
 800e2a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e2aa:	441e      	add	r6, r3
 800e2ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e2b0:	2b20      	cmp	r3, #32
 800e2b2:	bfc1      	itttt	gt
 800e2b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e2b8:	409f      	lslgt	r7, r3
 800e2ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e2be:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e2c2:	bfd6      	itet	le
 800e2c4:	f1c3 0320 	rsble	r3, r3, #32
 800e2c8:	ea47 0003 	orrgt.w	r0, r7, r3
 800e2cc:	fa04 f003 	lslle.w	r0, r4, r3
 800e2d0:	f7f2 f918 	bl	8000504 <__aeabi_ui2d>
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e2da:	3e01      	subs	r6, #1
 800e2dc:	9214      	str	r2, [sp, #80]	@ 0x50
 800e2de:	e777      	b.n	800e1d0 <_dtoa_r+0x100>
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	e7b8      	b.n	800e256 <_dtoa_r+0x186>
 800e2e4:	9012      	str	r0, [sp, #72]	@ 0x48
 800e2e6:	e7b7      	b.n	800e258 <_dtoa_r+0x188>
 800e2e8:	427b      	negs	r3, r7
 800e2ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	eba8 0807 	sub.w	r8, r8, r7
 800e2f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e2f4:	e7c4      	b.n	800e280 <_dtoa_r+0x1b0>
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e2fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	dc35      	bgt.n	800e36c <_dtoa_r+0x29c>
 800e300:	2301      	movs	r3, #1
 800e302:	9300      	str	r3, [sp, #0]
 800e304:	9307      	str	r3, [sp, #28]
 800e306:	461a      	mov	r2, r3
 800e308:	920e      	str	r2, [sp, #56]	@ 0x38
 800e30a:	e00b      	b.n	800e324 <_dtoa_r+0x254>
 800e30c:	2301      	movs	r3, #1
 800e30e:	e7f3      	b.n	800e2f8 <_dtoa_r+0x228>
 800e310:	2300      	movs	r3, #0
 800e312:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e314:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e316:	18fb      	adds	r3, r7, r3
 800e318:	9300      	str	r3, [sp, #0]
 800e31a:	3301      	adds	r3, #1
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	9307      	str	r3, [sp, #28]
 800e320:	bfb8      	it	lt
 800e322:	2301      	movlt	r3, #1
 800e324:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e328:	2100      	movs	r1, #0
 800e32a:	2204      	movs	r2, #4
 800e32c:	f102 0514 	add.w	r5, r2, #20
 800e330:	429d      	cmp	r5, r3
 800e332:	d91f      	bls.n	800e374 <_dtoa_r+0x2a4>
 800e334:	6041      	str	r1, [r0, #4]
 800e336:	4658      	mov	r0, fp
 800e338:	f000 fd8e 	bl	800ee58 <_Balloc>
 800e33c:	4682      	mov	sl, r0
 800e33e:	2800      	cmp	r0, #0
 800e340:	d13c      	bne.n	800e3bc <_dtoa_r+0x2ec>
 800e342:	4b1b      	ldr	r3, [pc, #108]	@ (800e3b0 <_dtoa_r+0x2e0>)
 800e344:	4602      	mov	r2, r0
 800e346:	f240 11af 	movw	r1, #431	@ 0x1af
 800e34a:	e6d8      	b.n	800e0fe <_dtoa_r+0x2e>
 800e34c:	2301      	movs	r3, #1
 800e34e:	e7e0      	b.n	800e312 <_dtoa_r+0x242>
 800e350:	2401      	movs	r4, #1
 800e352:	2300      	movs	r3, #0
 800e354:	9309      	str	r3, [sp, #36]	@ 0x24
 800e356:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e358:	f04f 33ff 	mov.w	r3, #4294967295
 800e35c:	9300      	str	r3, [sp, #0]
 800e35e:	9307      	str	r3, [sp, #28]
 800e360:	2200      	movs	r2, #0
 800e362:	2312      	movs	r3, #18
 800e364:	e7d0      	b.n	800e308 <_dtoa_r+0x238>
 800e366:	2301      	movs	r3, #1
 800e368:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e36a:	e7f5      	b.n	800e358 <_dtoa_r+0x288>
 800e36c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e36e:	9300      	str	r3, [sp, #0]
 800e370:	9307      	str	r3, [sp, #28]
 800e372:	e7d7      	b.n	800e324 <_dtoa_r+0x254>
 800e374:	3101      	adds	r1, #1
 800e376:	0052      	lsls	r2, r2, #1
 800e378:	e7d8      	b.n	800e32c <_dtoa_r+0x25c>
 800e37a:	bf00      	nop
 800e37c:	f3af 8000 	nop.w
 800e380:	636f4361 	.word	0x636f4361
 800e384:	3fd287a7 	.word	0x3fd287a7
 800e388:	8b60c8b3 	.word	0x8b60c8b3
 800e38c:	3fc68a28 	.word	0x3fc68a28
 800e390:	509f79fb 	.word	0x509f79fb
 800e394:	3fd34413 	.word	0x3fd34413
 800e398:	080103d1 	.word	0x080103d1
 800e39c:	080103e8 	.word	0x080103e8
 800e3a0:	7ff00000 	.word	0x7ff00000
 800e3a4:	080103a1 	.word	0x080103a1
 800e3a8:	3ff80000 	.word	0x3ff80000
 800e3ac:	080104e0 	.word	0x080104e0
 800e3b0:	08010440 	.word	0x08010440
 800e3b4:	080103cd 	.word	0x080103cd
 800e3b8:	080103a0 	.word	0x080103a0
 800e3bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e3c0:	6018      	str	r0, [r3, #0]
 800e3c2:	9b07      	ldr	r3, [sp, #28]
 800e3c4:	2b0e      	cmp	r3, #14
 800e3c6:	f200 80a4 	bhi.w	800e512 <_dtoa_r+0x442>
 800e3ca:	2c00      	cmp	r4, #0
 800e3cc:	f000 80a1 	beq.w	800e512 <_dtoa_r+0x442>
 800e3d0:	2f00      	cmp	r7, #0
 800e3d2:	dd33      	ble.n	800e43c <_dtoa_r+0x36c>
 800e3d4:	4bad      	ldr	r3, [pc, #692]	@ (800e68c <_dtoa_r+0x5bc>)
 800e3d6:	f007 020f 	and.w	r2, r7, #15
 800e3da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3de:	ed93 7b00 	vldr	d7, [r3]
 800e3e2:	05f8      	lsls	r0, r7, #23
 800e3e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e3e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e3ec:	d516      	bpl.n	800e41c <_dtoa_r+0x34c>
 800e3ee:	4ba8      	ldr	r3, [pc, #672]	@ (800e690 <_dtoa_r+0x5c0>)
 800e3f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e3f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e3f8:	f7f2 fa28 	bl	800084c <__aeabi_ddiv>
 800e3fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e400:	f004 040f 	and.w	r4, r4, #15
 800e404:	2603      	movs	r6, #3
 800e406:	4da2      	ldr	r5, [pc, #648]	@ (800e690 <_dtoa_r+0x5c0>)
 800e408:	b954      	cbnz	r4, 800e420 <_dtoa_r+0x350>
 800e40a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e40e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e412:	f7f2 fa1b 	bl	800084c <__aeabi_ddiv>
 800e416:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e41a:	e028      	b.n	800e46e <_dtoa_r+0x39e>
 800e41c:	2602      	movs	r6, #2
 800e41e:	e7f2      	b.n	800e406 <_dtoa_r+0x336>
 800e420:	07e1      	lsls	r1, r4, #31
 800e422:	d508      	bpl.n	800e436 <_dtoa_r+0x366>
 800e424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e428:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e42c:	f7f2 f8e4 	bl	80005f8 <__aeabi_dmul>
 800e430:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e434:	3601      	adds	r6, #1
 800e436:	1064      	asrs	r4, r4, #1
 800e438:	3508      	adds	r5, #8
 800e43a:	e7e5      	b.n	800e408 <_dtoa_r+0x338>
 800e43c:	f000 80d2 	beq.w	800e5e4 <_dtoa_r+0x514>
 800e440:	427c      	negs	r4, r7
 800e442:	4b92      	ldr	r3, [pc, #584]	@ (800e68c <_dtoa_r+0x5bc>)
 800e444:	4d92      	ldr	r5, [pc, #584]	@ (800e690 <_dtoa_r+0x5c0>)
 800e446:	f004 020f 	and.w	r2, r4, #15
 800e44a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e452:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e456:	f7f2 f8cf 	bl	80005f8 <__aeabi_dmul>
 800e45a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e45e:	1124      	asrs	r4, r4, #4
 800e460:	2300      	movs	r3, #0
 800e462:	2602      	movs	r6, #2
 800e464:	2c00      	cmp	r4, #0
 800e466:	f040 80b2 	bne.w	800e5ce <_dtoa_r+0x4fe>
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d1d3      	bne.n	800e416 <_dtoa_r+0x346>
 800e46e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e470:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e474:	2b00      	cmp	r3, #0
 800e476:	f000 80b7 	beq.w	800e5e8 <_dtoa_r+0x518>
 800e47a:	4b86      	ldr	r3, [pc, #536]	@ (800e694 <_dtoa_r+0x5c4>)
 800e47c:	2200      	movs	r2, #0
 800e47e:	4620      	mov	r0, r4
 800e480:	4629      	mov	r1, r5
 800e482:	f7f2 fb2b 	bl	8000adc <__aeabi_dcmplt>
 800e486:	2800      	cmp	r0, #0
 800e488:	f000 80ae 	beq.w	800e5e8 <_dtoa_r+0x518>
 800e48c:	9b07      	ldr	r3, [sp, #28]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	f000 80aa 	beq.w	800e5e8 <_dtoa_r+0x518>
 800e494:	9b00      	ldr	r3, [sp, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	dd37      	ble.n	800e50a <_dtoa_r+0x43a>
 800e49a:	1e7b      	subs	r3, r7, #1
 800e49c:	9304      	str	r3, [sp, #16]
 800e49e:	4620      	mov	r0, r4
 800e4a0:	4b7d      	ldr	r3, [pc, #500]	@ (800e698 <_dtoa_r+0x5c8>)
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	4629      	mov	r1, r5
 800e4a6:	f7f2 f8a7 	bl	80005f8 <__aeabi_dmul>
 800e4aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4ae:	9c00      	ldr	r4, [sp, #0]
 800e4b0:	3601      	adds	r6, #1
 800e4b2:	4630      	mov	r0, r6
 800e4b4:	f7f2 f836 	bl	8000524 <__aeabi_i2d>
 800e4b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e4bc:	f7f2 f89c 	bl	80005f8 <__aeabi_dmul>
 800e4c0:	4b76      	ldr	r3, [pc, #472]	@ (800e69c <_dtoa_r+0x5cc>)
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	f7f1 fee2 	bl	800028c <__adddf3>
 800e4c8:	4605      	mov	r5, r0
 800e4ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e4ce:	2c00      	cmp	r4, #0
 800e4d0:	f040 808d 	bne.w	800e5ee <_dtoa_r+0x51e>
 800e4d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4d8:	4b71      	ldr	r3, [pc, #452]	@ (800e6a0 <_dtoa_r+0x5d0>)
 800e4da:	2200      	movs	r2, #0
 800e4dc:	f7f1 fed4 	bl	8000288 <__aeabi_dsub>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e4e8:	462a      	mov	r2, r5
 800e4ea:	4633      	mov	r3, r6
 800e4ec:	f7f2 fb14 	bl	8000b18 <__aeabi_dcmpgt>
 800e4f0:	2800      	cmp	r0, #0
 800e4f2:	f040 828b 	bne.w	800ea0c <_dtoa_r+0x93c>
 800e4f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4fa:	462a      	mov	r2, r5
 800e4fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e500:	f7f2 faec 	bl	8000adc <__aeabi_dcmplt>
 800e504:	2800      	cmp	r0, #0
 800e506:	f040 8128 	bne.w	800e75a <_dtoa_r+0x68a>
 800e50a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e50e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e512:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e514:	2b00      	cmp	r3, #0
 800e516:	f2c0 815a 	blt.w	800e7ce <_dtoa_r+0x6fe>
 800e51a:	2f0e      	cmp	r7, #14
 800e51c:	f300 8157 	bgt.w	800e7ce <_dtoa_r+0x6fe>
 800e520:	4b5a      	ldr	r3, [pc, #360]	@ (800e68c <_dtoa_r+0x5bc>)
 800e522:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e526:	ed93 7b00 	vldr	d7, [r3]
 800e52a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	ed8d 7b00 	vstr	d7, [sp]
 800e532:	da03      	bge.n	800e53c <_dtoa_r+0x46c>
 800e534:	9b07      	ldr	r3, [sp, #28]
 800e536:	2b00      	cmp	r3, #0
 800e538:	f340 8101 	ble.w	800e73e <_dtoa_r+0x66e>
 800e53c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e540:	4656      	mov	r6, sl
 800e542:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e546:	4620      	mov	r0, r4
 800e548:	4629      	mov	r1, r5
 800e54a:	f7f2 f97f 	bl	800084c <__aeabi_ddiv>
 800e54e:	f7f2 fb03 	bl	8000b58 <__aeabi_d2iz>
 800e552:	4680      	mov	r8, r0
 800e554:	f7f1 ffe6 	bl	8000524 <__aeabi_i2d>
 800e558:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e55c:	f7f2 f84c 	bl	80005f8 <__aeabi_dmul>
 800e560:	4602      	mov	r2, r0
 800e562:	460b      	mov	r3, r1
 800e564:	4620      	mov	r0, r4
 800e566:	4629      	mov	r1, r5
 800e568:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e56c:	f7f1 fe8c 	bl	8000288 <__aeabi_dsub>
 800e570:	f806 4b01 	strb.w	r4, [r6], #1
 800e574:	9d07      	ldr	r5, [sp, #28]
 800e576:	eba6 040a 	sub.w	r4, r6, sl
 800e57a:	42a5      	cmp	r5, r4
 800e57c:	4602      	mov	r2, r0
 800e57e:	460b      	mov	r3, r1
 800e580:	f040 8117 	bne.w	800e7b2 <_dtoa_r+0x6e2>
 800e584:	f7f1 fe82 	bl	800028c <__adddf3>
 800e588:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e58c:	4604      	mov	r4, r0
 800e58e:	460d      	mov	r5, r1
 800e590:	f7f2 fac2 	bl	8000b18 <__aeabi_dcmpgt>
 800e594:	2800      	cmp	r0, #0
 800e596:	f040 80f9 	bne.w	800e78c <_dtoa_r+0x6bc>
 800e59a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e59e:	4620      	mov	r0, r4
 800e5a0:	4629      	mov	r1, r5
 800e5a2:	f7f2 fa91 	bl	8000ac8 <__aeabi_dcmpeq>
 800e5a6:	b118      	cbz	r0, 800e5b0 <_dtoa_r+0x4e0>
 800e5a8:	f018 0f01 	tst.w	r8, #1
 800e5ac:	f040 80ee 	bne.w	800e78c <_dtoa_r+0x6bc>
 800e5b0:	4649      	mov	r1, r9
 800e5b2:	4658      	mov	r0, fp
 800e5b4:	f000 fc90 	bl	800eed8 <_Bfree>
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	7033      	strb	r3, [r6, #0]
 800e5bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e5be:	3701      	adds	r7, #1
 800e5c0:	601f      	str	r7, [r3, #0]
 800e5c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	f000 831d 	beq.w	800ec04 <_dtoa_r+0xb34>
 800e5ca:	601e      	str	r6, [r3, #0]
 800e5cc:	e31a      	b.n	800ec04 <_dtoa_r+0xb34>
 800e5ce:	07e2      	lsls	r2, r4, #31
 800e5d0:	d505      	bpl.n	800e5de <_dtoa_r+0x50e>
 800e5d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e5d6:	f7f2 f80f 	bl	80005f8 <__aeabi_dmul>
 800e5da:	3601      	adds	r6, #1
 800e5dc:	2301      	movs	r3, #1
 800e5de:	1064      	asrs	r4, r4, #1
 800e5e0:	3508      	adds	r5, #8
 800e5e2:	e73f      	b.n	800e464 <_dtoa_r+0x394>
 800e5e4:	2602      	movs	r6, #2
 800e5e6:	e742      	b.n	800e46e <_dtoa_r+0x39e>
 800e5e8:	9c07      	ldr	r4, [sp, #28]
 800e5ea:	9704      	str	r7, [sp, #16]
 800e5ec:	e761      	b.n	800e4b2 <_dtoa_r+0x3e2>
 800e5ee:	4b27      	ldr	r3, [pc, #156]	@ (800e68c <_dtoa_r+0x5bc>)
 800e5f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e5f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e5f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e5fa:	4454      	add	r4, sl
 800e5fc:	2900      	cmp	r1, #0
 800e5fe:	d053      	beq.n	800e6a8 <_dtoa_r+0x5d8>
 800e600:	4928      	ldr	r1, [pc, #160]	@ (800e6a4 <_dtoa_r+0x5d4>)
 800e602:	2000      	movs	r0, #0
 800e604:	f7f2 f922 	bl	800084c <__aeabi_ddiv>
 800e608:	4633      	mov	r3, r6
 800e60a:	462a      	mov	r2, r5
 800e60c:	f7f1 fe3c 	bl	8000288 <__aeabi_dsub>
 800e610:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e614:	4656      	mov	r6, sl
 800e616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e61a:	f7f2 fa9d 	bl	8000b58 <__aeabi_d2iz>
 800e61e:	4605      	mov	r5, r0
 800e620:	f7f1 ff80 	bl	8000524 <__aeabi_i2d>
 800e624:	4602      	mov	r2, r0
 800e626:	460b      	mov	r3, r1
 800e628:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e62c:	f7f1 fe2c 	bl	8000288 <__aeabi_dsub>
 800e630:	3530      	adds	r5, #48	@ 0x30
 800e632:	4602      	mov	r2, r0
 800e634:	460b      	mov	r3, r1
 800e636:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e63a:	f806 5b01 	strb.w	r5, [r6], #1
 800e63e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e642:	f7f2 fa4b 	bl	8000adc <__aeabi_dcmplt>
 800e646:	2800      	cmp	r0, #0
 800e648:	d171      	bne.n	800e72e <_dtoa_r+0x65e>
 800e64a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e64e:	4911      	ldr	r1, [pc, #68]	@ (800e694 <_dtoa_r+0x5c4>)
 800e650:	2000      	movs	r0, #0
 800e652:	f7f1 fe19 	bl	8000288 <__aeabi_dsub>
 800e656:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e65a:	f7f2 fa3f 	bl	8000adc <__aeabi_dcmplt>
 800e65e:	2800      	cmp	r0, #0
 800e660:	f040 8095 	bne.w	800e78e <_dtoa_r+0x6be>
 800e664:	42a6      	cmp	r6, r4
 800e666:	f43f af50 	beq.w	800e50a <_dtoa_r+0x43a>
 800e66a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e66e:	4b0a      	ldr	r3, [pc, #40]	@ (800e698 <_dtoa_r+0x5c8>)
 800e670:	2200      	movs	r2, #0
 800e672:	f7f1 ffc1 	bl	80005f8 <__aeabi_dmul>
 800e676:	4b08      	ldr	r3, [pc, #32]	@ (800e698 <_dtoa_r+0x5c8>)
 800e678:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e67c:	2200      	movs	r2, #0
 800e67e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e682:	f7f1 ffb9 	bl	80005f8 <__aeabi_dmul>
 800e686:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e68a:	e7c4      	b.n	800e616 <_dtoa_r+0x546>
 800e68c:	080104e0 	.word	0x080104e0
 800e690:	080104b8 	.word	0x080104b8
 800e694:	3ff00000 	.word	0x3ff00000
 800e698:	40240000 	.word	0x40240000
 800e69c:	401c0000 	.word	0x401c0000
 800e6a0:	40140000 	.word	0x40140000
 800e6a4:	3fe00000 	.word	0x3fe00000
 800e6a8:	4631      	mov	r1, r6
 800e6aa:	4628      	mov	r0, r5
 800e6ac:	f7f1 ffa4 	bl	80005f8 <__aeabi_dmul>
 800e6b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e6b4:	9415      	str	r4, [sp, #84]	@ 0x54
 800e6b6:	4656      	mov	r6, sl
 800e6b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6bc:	f7f2 fa4c 	bl	8000b58 <__aeabi_d2iz>
 800e6c0:	4605      	mov	r5, r0
 800e6c2:	f7f1 ff2f 	bl	8000524 <__aeabi_i2d>
 800e6c6:	4602      	mov	r2, r0
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6ce:	f7f1 fddb 	bl	8000288 <__aeabi_dsub>
 800e6d2:	3530      	adds	r5, #48	@ 0x30
 800e6d4:	f806 5b01 	strb.w	r5, [r6], #1
 800e6d8:	4602      	mov	r2, r0
 800e6da:	460b      	mov	r3, r1
 800e6dc:	42a6      	cmp	r6, r4
 800e6de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e6e2:	f04f 0200 	mov.w	r2, #0
 800e6e6:	d124      	bne.n	800e732 <_dtoa_r+0x662>
 800e6e8:	4bac      	ldr	r3, [pc, #688]	@ (800e99c <_dtoa_r+0x8cc>)
 800e6ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e6ee:	f7f1 fdcd 	bl	800028c <__adddf3>
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	460b      	mov	r3, r1
 800e6f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6fa:	f7f2 fa0d 	bl	8000b18 <__aeabi_dcmpgt>
 800e6fe:	2800      	cmp	r0, #0
 800e700:	d145      	bne.n	800e78e <_dtoa_r+0x6be>
 800e702:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e706:	49a5      	ldr	r1, [pc, #660]	@ (800e99c <_dtoa_r+0x8cc>)
 800e708:	2000      	movs	r0, #0
 800e70a:	f7f1 fdbd 	bl	8000288 <__aeabi_dsub>
 800e70e:	4602      	mov	r2, r0
 800e710:	460b      	mov	r3, r1
 800e712:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e716:	f7f2 f9e1 	bl	8000adc <__aeabi_dcmplt>
 800e71a:	2800      	cmp	r0, #0
 800e71c:	f43f aef5 	beq.w	800e50a <_dtoa_r+0x43a>
 800e720:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e722:	1e73      	subs	r3, r6, #1
 800e724:	9315      	str	r3, [sp, #84]	@ 0x54
 800e726:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e72a:	2b30      	cmp	r3, #48	@ 0x30
 800e72c:	d0f8      	beq.n	800e720 <_dtoa_r+0x650>
 800e72e:	9f04      	ldr	r7, [sp, #16]
 800e730:	e73e      	b.n	800e5b0 <_dtoa_r+0x4e0>
 800e732:	4b9b      	ldr	r3, [pc, #620]	@ (800e9a0 <_dtoa_r+0x8d0>)
 800e734:	f7f1 ff60 	bl	80005f8 <__aeabi_dmul>
 800e738:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e73c:	e7bc      	b.n	800e6b8 <_dtoa_r+0x5e8>
 800e73e:	d10c      	bne.n	800e75a <_dtoa_r+0x68a>
 800e740:	4b98      	ldr	r3, [pc, #608]	@ (800e9a4 <_dtoa_r+0x8d4>)
 800e742:	2200      	movs	r2, #0
 800e744:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e748:	f7f1 ff56 	bl	80005f8 <__aeabi_dmul>
 800e74c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e750:	f7f2 f9d8 	bl	8000b04 <__aeabi_dcmpge>
 800e754:	2800      	cmp	r0, #0
 800e756:	f000 8157 	beq.w	800ea08 <_dtoa_r+0x938>
 800e75a:	2400      	movs	r4, #0
 800e75c:	4625      	mov	r5, r4
 800e75e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e760:	43db      	mvns	r3, r3
 800e762:	9304      	str	r3, [sp, #16]
 800e764:	4656      	mov	r6, sl
 800e766:	2700      	movs	r7, #0
 800e768:	4621      	mov	r1, r4
 800e76a:	4658      	mov	r0, fp
 800e76c:	f000 fbb4 	bl	800eed8 <_Bfree>
 800e770:	2d00      	cmp	r5, #0
 800e772:	d0dc      	beq.n	800e72e <_dtoa_r+0x65e>
 800e774:	b12f      	cbz	r7, 800e782 <_dtoa_r+0x6b2>
 800e776:	42af      	cmp	r7, r5
 800e778:	d003      	beq.n	800e782 <_dtoa_r+0x6b2>
 800e77a:	4639      	mov	r1, r7
 800e77c:	4658      	mov	r0, fp
 800e77e:	f000 fbab 	bl	800eed8 <_Bfree>
 800e782:	4629      	mov	r1, r5
 800e784:	4658      	mov	r0, fp
 800e786:	f000 fba7 	bl	800eed8 <_Bfree>
 800e78a:	e7d0      	b.n	800e72e <_dtoa_r+0x65e>
 800e78c:	9704      	str	r7, [sp, #16]
 800e78e:	4633      	mov	r3, r6
 800e790:	461e      	mov	r6, r3
 800e792:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e796:	2a39      	cmp	r2, #57	@ 0x39
 800e798:	d107      	bne.n	800e7aa <_dtoa_r+0x6da>
 800e79a:	459a      	cmp	sl, r3
 800e79c:	d1f8      	bne.n	800e790 <_dtoa_r+0x6c0>
 800e79e:	9a04      	ldr	r2, [sp, #16]
 800e7a0:	3201      	adds	r2, #1
 800e7a2:	9204      	str	r2, [sp, #16]
 800e7a4:	2230      	movs	r2, #48	@ 0x30
 800e7a6:	f88a 2000 	strb.w	r2, [sl]
 800e7aa:	781a      	ldrb	r2, [r3, #0]
 800e7ac:	3201      	adds	r2, #1
 800e7ae:	701a      	strb	r2, [r3, #0]
 800e7b0:	e7bd      	b.n	800e72e <_dtoa_r+0x65e>
 800e7b2:	4b7b      	ldr	r3, [pc, #492]	@ (800e9a0 <_dtoa_r+0x8d0>)
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	f7f1 ff1f 	bl	80005f8 <__aeabi_dmul>
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	2300      	movs	r3, #0
 800e7be:	4604      	mov	r4, r0
 800e7c0:	460d      	mov	r5, r1
 800e7c2:	f7f2 f981 	bl	8000ac8 <__aeabi_dcmpeq>
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	f43f aebb 	beq.w	800e542 <_dtoa_r+0x472>
 800e7cc:	e6f0      	b.n	800e5b0 <_dtoa_r+0x4e0>
 800e7ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e7d0:	2a00      	cmp	r2, #0
 800e7d2:	f000 80db 	beq.w	800e98c <_dtoa_r+0x8bc>
 800e7d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7d8:	2a01      	cmp	r2, #1
 800e7da:	f300 80bf 	bgt.w	800e95c <_dtoa_r+0x88c>
 800e7de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e7e0:	2a00      	cmp	r2, #0
 800e7e2:	f000 80b7 	beq.w	800e954 <_dtoa_r+0x884>
 800e7e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e7ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e7ec:	4646      	mov	r6, r8
 800e7ee:	9a08      	ldr	r2, [sp, #32]
 800e7f0:	2101      	movs	r1, #1
 800e7f2:	441a      	add	r2, r3
 800e7f4:	4658      	mov	r0, fp
 800e7f6:	4498      	add	r8, r3
 800e7f8:	9208      	str	r2, [sp, #32]
 800e7fa:	f000 fc21 	bl	800f040 <__i2b>
 800e7fe:	4605      	mov	r5, r0
 800e800:	b15e      	cbz	r6, 800e81a <_dtoa_r+0x74a>
 800e802:	9b08      	ldr	r3, [sp, #32]
 800e804:	2b00      	cmp	r3, #0
 800e806:	dd08      	ble.n	800e81a <_dtoa_r+0x74a>
 800e808:	42b3      	cmp	r3, r6
 800e80a:	9a08      	ldr	r2, [sp, #32]
 800e80c:	bfa8      	it	ge
 800e80e:	4633      	movge	r3, r6
 800e810:	eba8 0803 	sub.w	r8, r8, r3
 800e814:	1af6      	subs	r6, r6, r3
 800e816:	1ad3      	subs	r3, r2, r3
 800e818:	9308      	str	r3, [sp, #32]
 800e81a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e81c:	b1f3      	cbz	r3, 800e85c <_dtoa_r+0x78c>
 800e81e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e820:	2b00      	cmp	r3, #0
 800e822:	f000 80b7 	beq.w	800e994 <_dtoa_r+0x8c4>
 800e826:	b18c      	cbz	r4, 800e84c <_dtoa_r+0x77c>
 800e828:	4629      	mov	r1, r5
 800e82a:	4622      	mov	r2, r4
 800e82c:	4658      	mov	r0, fp
 800e82e:	f000 fcc7 	bl	800f1c0 <__pow5mult>
 800e832:	464a      	mov	r2, r9
 800e834:	4601      	mov	r1, r0
 800e836:	4605      	mov	r5, r0
 800e838:	4658      	mov	r0, fp
 800e83a:	f000 fc17 	bl	800f06c <__multiply>
 800e83e:	4649      	mov	r1, r9
 800e840:	9004      	str	r0, [sp, #16]
 800e842:	4658      	mov	r0, fp
 800e844:	f000 fb48 	bl	800eed8 <_Bfree>
 800e848:	9b04      	ldr	r3, [sp, #16]
 800e84a:	4699      	mov	r9, r3
 800e84c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e84e:	1b1a      	subs	r2, r3, r4
 800e850:	d004      	beq.n	800e85c <_dtoa_r+0x78c>
 800e852:	4649      	mov	r1, r9
 800e854:	4658      	mov	r0, fp
 800e856:	f000 fcb3 	bl	800f1c0 <__pow5mult>
 800e85a:	4681      	mov	r9, r0
 800e85c:	2101      	movs	r1, #1
 800e85e:	4658      	mov	r0, fp
 800e860:	f000 fbee 	bl	800f040 <__i2b>
 800e864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e866:	4604      	mov	r4, r0
 800e868:	2b00      	cmp	r3, #0
 800e86a:	f000 81cf 	beq.w	800ec0c <_dtoa_r+0xb3c>
 800e86e:	461a      	mov	r2, r3
 800e870:	4601      	mov	r1, r0
 800e872:	4658      	mov	r0, fp
 800e874:	f000 fca4 	bl	800f1c0 <__pow5mult>
 800e878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	4604      	mov	r4, r0
 800e87e:	f300 8095 	bgt.w	800e9ac <_dtoa_r+0x8dc>
 800e882:	9b02      	ldr	r3, [sp, #8]
 800e884:	2b00      	cmp	r3, #0
 800e886:	f040 8087 	bne.w	800e998 <_dtoa_r+0x8c8>
 800e88a:	9b03      	ldr	r3, [sp, #12]
 800e88c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e890:	2b00      	cmp	r3, #0
 800e892:	f040 8089 	bne.w	800e9a8 <_dtoa_r+0x8d8>
 800e896:	9b03      	ldr	r3, [sp, #12]
 800e898:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e89c:	0d1b      	lsrs	r3, r3, #20
 800e89e:	051b      	lsls	r3, r3, #20
 800e8a0:	b12b      	cbz	r3, 800e8ae <_dtoa_r+0x7de>
 800e8a2:	9b08      	ldr	r3, [sp, #32]
 800e8a4:	3301      	adds	r3, #1
 800e8a6:	9308      	str	r3, [sp, #32]
 800e8a8:	f108 0801 	add.w	r8, r8, #1
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	f000 81b0 	beq.w	800ec18 <_dtoa_r+0xb48>
 800e8b8:	6923      	ldr	r3, [r4, #16]
 800e8ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e8be:	6918      	ldr	r0, [r3, #16]
 800e8c0:	f000 fb72 	bl	800efa8 <__hi0bits>
 800e8c4:	f1c0 0020 	rsb	r0, r0, #32
 800e8c8:	9b08      	ldr	r3, [sp, #32]
 800e8ca:	4418      	add	r0, r3
 800e8cc:	f010 001f 	ands.w	r0, r0, #31
 800e8d0:	d077      	beq.n	800e9c2 <_dtoa_r+0x8f2>
 800e8d2:	f1c0 0320 	rsb	r3, r0, #32
 800e8d6:	2b04      	cmp	r3, #4
 800e8d8:	dd6b      	ble.n	800e9b2 <_dtoa_r+0x8e2>
 800e8da:	9b08      	ldr	r3, [sp, #32]
 800e8dc:	f1c0 001c 	rsb	r0, r0, #28
 800e8e0:	4403      	add	r3, r0
 800e8e2:	4480      	add	r8, r0
 800e8e4:	4406      	add	r6, r0
 800e8e6:	9308      	str	r3, [sp, #32]
 800e8e8:	f1b8 0f00 	cmp.w	r8, #0
 800e8ec:	dd05      	ble.n	800e8fa <_dtoa_r+0x82a>
 800e8ee:	4649      	mov	r1, r9
 800e8f0:	4642      	mov	r2, r8
 800e8f2:	4658      	mov	r0, fp
 800e8f4:	f000 fcbe 	bl	800f274 <__lshift>
 800e8f8:	4681      	mov	r9, r0
 800e8fa:	9b08      	ldr	r3, [sp, #32]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	dd05      	ble.n	800e90c <_dtoa_r+0x83c>
 800e900:	4621      	mov	r1, r4
 800e902:	461a      	mov	r2, r3
 800e904:	4658      	mov	r0, fp
 800e906:	f000 fcb5 	bl	800f274 <__lshift>
 800e90a:	4604      	mov	r4, r0
 800e90c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d059      	beq.n	800e9c6 <_dtoa_r+0x8f6>
 800e912:	4621      	mov	r1, r4
 800e914:	4648      	mov	r0, r9
 800e916:	f000 fd19 	bl	800f34c <__mcmp>
 800e91a:	2800      	cmp	r0, #0
 800e91c:	da53      	bge.n	800e9c6 <_dtoa_r+0x8f6>
 800e91e:	1e7b      	subs	r3, r7, #1
 800e920:	9304      	str	r3, [sp, #16]
 800e922:	4649      	mov	r1, r9
 800e924:	2300      	movs	r3, #0
 800e926:	220a      	movs	r2, #10
 800e928:	4658      	mov	r0, fp
 800e92a:	f000 faf7 	bl	800ef1c <__multadd>
 800e92e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e930:	4681      	mov	r9, r0
 800e932:	2b00      	cmp	r3, #0
 800e934:	f000 8172 	beq.w	800ec1c <_dtoa_r+0xb4c>
 800e938:	2300      	movs	r3, #0
 800e93a:	4629      	mov	r1, r5
 800e93c:	220a      	movs	r2, #10
 800e93e:	4658      	mov	r0, fp
 800e940:	f000 faec 	bl	800ef1c <__multadd>
 800e944:	9b00      	ldr	r3, [sp, #0]
 800e946:	2b00      	cmp	r3, #0
 800e948:	4605      	mov	r5, r0
 800e94a:	dc67      	bgt.n	800ea1c <_dtoa_r+0x94c>
 800e94c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e94e:	2b02      	cmp	r3, #2
 800e950:	dc41      	bgt.n	800e9d6 <_dtoa_r+0x906>
 800e952:	e063      	b.n	800ea1c <_dtoa_r+0x94c>
 800e954:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e956:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e95a:	e746      	b.n	800e7ea <_dtoa_r+0x71a>
 800e95c:	9b07      	ldr	r3, [sp, #28]
 800e95e:	1e5c      	subs	r4, r3, #1
 800e960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e962:	42a3      	cmp	r3, r4
 800e964:	bfbf      	itttt	lt
 800e966:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e968:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e96a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e96c:	1ae3      	sublt	r3, r4, r3
 800e96e:	bfb4      	ite	lt
 800e970:	18d2      	addlt	r2, r2, r3
 800e972:	1b1c      	subge	r4, r3, r4
 800e974:	9b07      	ldr	r3, [sp, #28]
 800e976:	bfbc      	itt	lt
 800e978:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e97a:	2400      	movlt	r4, #0
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	bfb5      	itete	lt
 800e980:	eba8 0603 	sublt.w	r6, r8, r3
 800e984:	9b07      	ldrge	r3, [sp, #28]
 800e986:	2300      	movlt	r3, #0
 800e988:	4646      	movge	r6, r8
 800e98a:	e730      	b.n	800e7ee <_dtoa_r+0x71e>
 800e98c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e98e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e990:	4646      	mov	r6, r8
 800e992:	e735      	b.n	800e800 <_dtoa_r+0x730>
 800e994:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e996:	e75c      	b.n	800e852 <_dtoa_r+0x782>
 800e998:	2300      	movs	r3, #0
 800e99a:	e788      	b.n	800e8ae <_dtoa_r+0x7de>
 800e99c:	3fe00000 	.word	0x3fe00000
 800e9a0:	40240000 	.word	0x40240000
 800e9a4:	40140000 	.word	0x40140000
 800e9a8:	9b02      	ldr	r3, [sp, #8]
 800e9aa:	e780      	b.n	800e8ae <_dtoa_r+0x7de>
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800e9b0:	e782      	b.n	800e8b8 <_dtoa_r+0x7e8>
 800e9b2:	d099      	beq.n	800e8e8 <_dtoa_r+0x818>
 800e9b4:	9a08      	ldr	r2, [sp, #32]
 800e9b6:	331c      	adds	r3, #28
 800e9b8:	441a      	add	r2, r3
 800e9ba:	4498      	add	r8, r3
 800e9bc:	441e      	add	r6, r3
 800e9be:	9208      	str	r2, [sp, #32]
 800e9c0:	e792      	b.n	800e8e8 <_dtoa_r+0x818>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	e7f6      	b.n	800e9b4 <_dtoa_r+0x8e4>
 800e9c6:	9b07      	ldr	r3, [sp, #28]
 800e9c8:	9704      	str	r7, [sp, #16]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	dc20      	bgt.n	800ea10 <_dtoa_r+0x940>
 800e9ce:	9300      	str	r3, [sp, #0]
 800e9d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9d2:	2b02      	cmp	r3, #2
 800e9d4:	dd1e      	ble.n	800ea14 <_dtoa_r+0x944>
 800e9d6:	9b00      	ldr	r3, [sp, #0]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	f47f aec0 	bne.w	800e75e <_dtoa_r+0x68e>
 800e9de:	4621      	mov	r1, r4
 800e9e0:	2205      	movs	r2, #5
 800e9e2:	4658      	mov	r0, fp
 800e9e4:	f000 fa9a 	bl	800ef1c <__multadd>
 800e9e8:	4601      	mov	r1, r0
 800e9ea:	4604      	mov	r4, r0
 800e9ec:	4648      	mov	r0, r9
 800e9ee:	f000 fcad 	bl	800f34c <__mcmp>
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	f77f aeb3 	ble.w	800e75e <_dtoa_r+0x68e>
 800e9f8:	4656      	mov	r6, sl
 800e9fa:	2331      	movs	r3, #49	@ 0x31
 800e9fc:	f806 3b01 	strb.w	r3, [r6], #1
 800ea00:	9b04      	ldr	r3, [sp, #16]
 800ea02:	3301      	adds	r3, #1
 800ea04:	9304      	str	r3, [sp, #16]
 800ea06:	e6ae      	b.n	800e766 <_dtoa_r+0x696>
 800ea08:	9c07      	ldr	r4, [sp, #28]
 800ea0a:	9704      	str	r7, [sp, #16]
 800ea0c:	4625      	mov	r5, r4
 800ea0e:	e7f3      	b.n	800e9f8 <_dtoa_r+0x928>
 800ea10:	9b07      	ldr	r3, [sp, #28]
 800ea12:	9300      	str	r3, [sp, #0]
 800ea14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	f000 8104 	beq.w	800ec24 <_dtoa_r+0xb54>
 800ea1c:	2e00      	cmp	r6, #0
 800ea1e:	dd05      	ble.n	800ea2c <_dtoa_r+0x95c>
 800ea20:	4629      	mov	r1, r5
 800ea22:	4632      	mov	r2, r6
 800ea24:	4658      	mov	r0, fp
 800ea26:	f000 fc25 	bl	800f274 <__lshift>
 800ea2a:	4605      	mov	r5, r0
 800ea2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d05a      	beq.n	800eae8 <_dtoa_r+0xa18>
 800ea32:	6869      	ldr	r1, [r5, #4]
 800ea34:	4658      	mov	r0, fp
 800ea36:	f000 fa0f 	bl	800ee58 <_Balloc>
 800ea3a:	4606      	mov	r6, r0
 800ea3c:	b928      	cbnz	r0, 800ea4a <_dtoa_r+0x97a>
 800ea3e:	4b84      	ldr	r3, [pc, #528]	@ (800ec50 <_dtoa_r+0xb80>)
 800ea40:	4602      	mov	r2, r0
 800ea42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ea46:	f7ff bb5a 	b.w	800e0fe <_dtoa_r+0x2e>
 800ea4a:	692a      	ldr	r2, [r5, #16]
 800ea4c:	3202      	adds	r2, #2
 800ea4e:	0092      	lsls	r2, r2, #2
 800ea50:	f105 010c 	add.w	r1, r5, #12
 800ea54:	300c      	adds	r0, #12
 800ea56:	f000 fe3d 	bl	800f6d4 <memcpy>
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	4631      	mov	r1, r6
 800ea5e:	4658      	mov	r0, fp
 800ea60:	f000 fc08 	bl	800f274 <__lshift>
 800ea64:	f10a 0301 	add.w	r3, sl, #1
 800ea68:	9307      	str	r3, [sp, #28]
 800ea6a:	9b00      	ldr	r3, [sp, #0]
 800ea6c:	4453      	add	r3, sl
 800ea6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ea70:	9b02      	ldr	r3, [sp, #8]
 800ea72:	f003 0301 	and.w	r3, r3, #1
 800ea76:	462f      	mov	r7, r5
 800ea78:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea7a:	4605      	mov	r5, r0
 800ea7c:	9b07      	ldr	r3, [sp, #28]
 800ea7e:	4621      	mov	r1, r4
 800ea80:	3b01      	subs	r3, #1
 800ea82:	4648      	mov	r0, r9
 800ea84:	9300      	str	r3, [sp, #0]
 800ea86:	f7ff fa9a 	bl	800dfbe <quorem>
 800ea8a:	4639      	mov	r1, r7
 800ea8c:	9002      	str	r0, [sp, #8]
 800ea8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ea92:	4648      	mov	r0, r9
 800ea94:	f000 fc5a 	bl	800f34c <__mcmp>
 800ea98:	462a      	mov	r2, r5
 800ea9a:	9008      	str	r0, [sp, #32]
 800ea9c:	4621      	mov	r1, r4
 800ea9e:	4658      	mov	r0, fp
 800eaa0:	f000 fc70 	bl	800f384 <__mdiff>
 800eaa4:	68c2      	ldr	r2, [r0, #12]
 800eaa6:	4606      	mov	r6, r0
 800eaa8:	bb02      	cbnz	r2, 800eaec <_dtoa_r+0xa1c>
 800eaaa:	4601      	mov	r1, r0
 800eaac:	4648      	mov	r0, r9
 800eaae:	f000 fc4d 	bl	800f34c <__mcmp>
 800eab2:	4602      	mov	r2, r0
 800eab4:	4631      	mov	r1, r6
 800eab6:	4658      	mov	r0, fp
 800eab8:	920e      	str	r2, [sp, #56]	@ 0x38
 800eaba:	f000 fa0d 	bl	800eed8 <_Bfree>
 800eabe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eac0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eac2:	9e07      	ldr	r6, [sp, #28]
 800eac4:	ea43 0102 	orr.w	r1, r3, r2
 800eac8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eaca:	4319      	orrs	r1, r3
 800eacc:	d110      	bne.n	800eaf0 <_dtoa_r+0xa20>
 800eace:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ead2:	d029      	beq.n	800eb28 <_dtoa_r+0xa58>
 800ead4:	9b08      	ldr	r3, [sp, #32]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	dd02      	ble.n	800eae0 <_dtoa_r+0xa10>
 800eada:	9b02      	ldr	r3, [sp, #8]
 800eadc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800eae0:	9b00      	ldr	r3, [sp, #0]
 800eae2:	f883 8000 	strb.w	r8, [r3]
 800eae6:	e63f      	b.n	800e768 <_dtoa_r+0x698>
 800eae8:	4628      	mov	r0, r5
 800eaea:	e7bb      	b.n	800ea64 <_dtoa_r+0x994>
 800eaec:	2201      	movs	r2, #1
 800eaee:	e7e1      	b.n	800eab4 <_dtoa_r+0x9e4>
 800eaf0:	9b08      	ldr	r3, [sp, #32]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	db04      	blt.n	800eb00 <_dtoa_r+0xa30>
 800eaf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eaf8:	430b      	orrs	r3, r1
 800eafa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eafc:	430b      	orrs	r3, r1
 800eafe:	d120      	bne.n	800eb42 <_dtoa_r+0xa72>
 800eb00:	2a00      	cmp	r2, #0
 800eb02:	dded      	ble.n	800eae0 <_dtoa_r+0xa10>
 800eb04:	4649      	mov	r1, r9
 800eb06:	2201      	movs	r2, #1
 800eb08:	4658      	mov	r0, fp
 800eb0a:	f000 fbb3 	bl	800f274 <__lshift>
 800eb0e:	4621      	mov	r1, r4
 800eb10:	4681      	mov	r9, r0
 800eb12:	f000 fc1b 	bl	800f34c <__mcmp>
 800eb16:	2800      	cmp	r0, #0
 800eb18:	dc03      	bgt.n	800eb22 <_dtoa_r+0xa52>
 800eb1a:	d1e1      	bne.n	800eae0 <_dtoa_r+0xa10>
 800eb1c:	f018 0f01 	tst.w	r8, #1
 800eb20:	d0de      	beq.n	800eae0 <_dtoa_r+0xa10>
 800eb22:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eb26:	d1d8      	bne.n	800eada <_dtoa_r+0xa0a>
 800eb28:	9a00      	ldr	r2, [sp, #0]
 800eb2a:	2339      	movs	r3, #57	@ 0x39
 800eb2c:	7013      	strb	r3, [r2, #0]
 800eb2e:	4633      	mov	r3, r6
 800eb30:	461e      	mov	r6, r3
 800eb32:	3b01      	subs	r3, #1
 800eb34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800eb38:	2a39      	cmp	r2, #57	@ 0x39
 800eb3a:	d052      	beq.n	800ebe2 <_dtoa_r+0xb12>
 800eb3c:	3201      	adds	r2, #1
 800eb3e:	701a      	strb	r2, [r3, #0]
 800eb40:	e612      	b.n	800e768 <_dtoa_r+0x698>
 800eb42:	2a00      	cmp	r2, #0
 800eb44:	dd07      	ble.n	800eb56 <_dtoa_r+0xa86>
 800eb46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eb4a:	d0ed      	beq.n	800eb28 <_dtoa_r+0xa58>
 800eb4c:	9a00      	ldr	r2, [sp, #0]
 800eb4e:	f108 0301 	add.w	r3, r8, #1
 800eb52:	7013      	strb	r3, [r2, #0]
 800eb54:	e608      	b.n	800e768 <_dtoa_r+0x698>
 800eb56:	9b07      	ldr	r3, [sp, #28]
 800eb58:	9a07      	ldr	r2, [sp, #28]
 800eb5a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800eb5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb60:	4293      	cmp	r3, r2
 800eb62:	d028      	beq.n	800ebb6 <_dtoa_r+0xae6>
 800eb64:	4649      	mov	r1, r9
 800eb66:	2300      	movs	r3, #0
 800eb68:	220a      	movs	r2, #10
 800eb6a:	4658      	mov	r0, fp
 800eb6c:	f000 f9d6 	bl	800ef1c <__multadd>
 800eb70:	42af      	cmp	r7, r5
 800eb72:	4681      	mov	r9, r0
 800eb74:	f04f 0300 	mov.w	r3, #0
 800eb78:	f04f 020a 	mov.w	r2, #10
 800eb7c:	4639      	mov	r1, r7
 800eb7e:	4658      	mov	r0, fp
 800eb80:	d107      	bne.n	800eb92 <_dtoa_r+0xac2>
 800eb82:	f000 f9cb 	bl	800ef1c <__multadd>
 800eb86:	4607      	mov	r7, r0
 800eb88:	4605      	mov	r5, r0
 800eb8a:	9b07      	ldr	r3, [sp, #28]
 800eb8c:	3301      	adds	r3, #1
 800eb8e:	9307      	str	r3, [sp, #28]
 800eb90:	e774      	b.n	800ea7c <_dtoa_r+0x9ac>
 800eb92:	f000 f9c3 	bl	800ef1c <__multadd>
 800eb96:	4629      	mov	r1, r5
 800eb98:	4607      	mov	r7, r0
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	220a      	movs	r2, #10
 800eb9e:	4658      	mov	r0, fp
 800eba0:	f000 f9bc 	bl	800ef1c <__multadd>
 800eba4:	4605      	mov	r5, r0
 800eba6:	e7f0      	b.n	800eb8a <_dtoa_r+0xaba>
 800eba8:	9b00      	ldr	r3, [sp, #0]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	bfcc      	ite	gt
 800ebae:	461e      	movgt	r6, r3
 800ebb0:	2601      	movle	r6, #1
 800ebb2:	4456      	add	r6, sl
 800ebb4:	2700      	movs	r7, #0
 800ebb6:	4649      	mov	r1, r9
 800ebb8:	2201      	movs	r2, #1
 800ebba:	4658      	mov	r0, fp
 800ebbc:	f000 fb5a 	bl	800f274 <__lshift>
 800ebc0:	4621      	mov	r1, r4
 800ebc2:	4681      	mov	r9, r0
 800ebc4:	f000 fbc2 	bl	800f34c <__mcmp>
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	dcb0      	bgt.n	800eb2e <_dtoa_r+0xa5e>
 800ebcc:	d102      	bne.n	800ebd4 <_dtoa_r+0xb04>
 800ebce:	f018 0f01 	tst.w	r8, #1
 800ebd2:	d1ac      	bne.n	800eb2e <_dtoa_r+0xa5e>
 800ebd4:	4633      	mov	r3, r6
 800ebd6:	461e      	mov	r6, r3
 800ebd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ebdc:	2a30      	cmp	r2, #48	@ 0x30
 800ebde:	d0fa      	beq.n	800ebd6 <_dtoa_r+0xb06>
 800ebe0:	e5c2      	b.n	800e768 <_dtoa_r+0x698>
 800ebe2:	459a      	cmp	sl, r3
 800ebe4:	d1a4      	bne.n	800eb30 <_dtoa_r+0xa60>
 800ebe6:	9b04      	ldr	r3, [sp, #16]
 800ebe8:	3301      	adds	r3, #1
 800ebea:	9304      	str	r3, [sp, #16]
 800ebec:	2331      	movs	r3, #49	@ 0x31
 800ebee:	f88a 3000 	strb.w	r3, [sl]
 800ebf2:	e5b9      	b.n	800e768 <_dtoa_r+0x698>
 800ebf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ebf6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ec54 <_dtoa_r+0xb84>
 800ebfa:	b11b      	cbz	r3, 800ec04 <_dtoa_r+0xb34>
 800ebfc:	f10a 0308 	add.w	r3, sl, #8
 800ec00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ec02:	6013      	str	r3, [r2, #0]
 800ec04:	4650      	mov	r0, sl
 800ec06:	b019      	add	sp, #100	@ 0x64
 800ec08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	f77f ae37 	ble.w	800e882 <_dtoa_r+0x7b2>
 800ec14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec16:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec18:	2001      	movs	r0, #1
 800ec1a:	e655      	b.n	800e8c8 <_dtoa_r+0x7f8>
 800ec1c:	9b00      	ldr	r3, [sp, #0]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	f77f aed6 	ble.w	800e9d0 <_dtoa_r+0x900>
 800ec24:	4656      	mov	r6, sl
 800ec26:	4621      	mov	r1, r4
 800ec28:	4648      	mov	r0, r9
 800ec2a:	f7ff f9c8 	bl	800dfbe <quorem>
 800ec2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ec32:	f806 8b01 	strb.w	r8, [r6], #1
 800ec36:	9b00      	ldr	r3, [sp, #0]
 800ec38:	eba6 020a 	sub.w	r2, r6, sl
 800ec3c:	4293      	cmp	r3, r2
 800ec3e:	ddb3      	ble.n	800eba8 <_dtoa_r+0xad8>
 800ec40:	4649      	mov	r1, r9
 800ec42:	2300      	movs	r3, #0
 800ec44:	220a      	movs	r2, #10
 800ec46:	4658      	mov	r0, fp
 800ec48:	f000 f968 	bl	800ef1c <__multadd>
 800ec4c:	4681      	mov	r9, r0
 800ec4e:	e7ea      	b.n	800ec26 <_dtoa_r+0xb56>
 800ec50:	08010440 	.word	0x08010440
 800ec54:	080103c4 	.word	0x080103c4

0800ec58 <_free_r>:
 800ec58:	b538      	push	{r3, r4, r5, lr}
 800ec5a:	4605      	mov	r5, r0
 800ec5c:	2900      	cmp	r1, #0
 800ec5e:	d041      	beq.n	800ece4 <_free_r+0x8c>
 800ec60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec64:	1f0c      	subs	r4, r1, #4
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	bfb8      	it	lt
 800ec6a:	18e4      	addlt	r4, r4, r3
 800ec6c:	f000 f8e8 	bl	800ee40 <__malloc_lock>
 800ec70:	4a1d      	ldr	r2, [pc, #116]	@ (800ece8 <_free_r+0x90>)
 800ec72:	6813      	ldr	r3, [r2, #0]
 800ec74:	b933      	cbnz	r3, 800ec84 <_free_r+0x2c>
 800ec76:	6063      	str	r3, [r4, #4]
 800ec78:	6014      	str	r4, [r2, #0]
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec80:	f000 b8e4 	b.w	800ee4c <__malloc_unlock>
 800ec84:	42a3      	cmp	r3, r4
 800ec86:	d908      	bls.n	800ec9a <_free_r+0x42>
 800ec88:	6820      	ldr	r0, [r4, #0]
 800ec8a:	1821      	adds	r1, r4, r0
 800ec8c:	428b      	cmp	r3, r1
 800ec8e:	bf01      	itttt	eq
 800ec90:	6819      	ldreq	r1, [r3, #0]
 800ec92:	685b      	ldreq	r3, [r3, #4]
 800ec94:	1809      	addeq	r1, r1, r0
 800ec96:	6021      	streq	r1, [r4, #0]
 800ec98:	e7ed      	b.n	800ec76 <_free_r+0x1e>
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	685b      	ldr	r3, [r3, #4]
 800ec9e:	b10b      	cbz	r3, 800eca4 <_free_r+0x4c>
 800eca0:	42a3      	cmp	r3, r4
 800eca2:	d9fa      	bls.n	800ec9a <_free_r+0x42>
 800eca4:	6811      	ldr	r1, [r2, #0]
 800eca6:	1850      	adds	r0, r2, r1
 800eca8:	42a0      	cmp	r0, r4
 800ecaa:	d10b      	bne.n	800ecc4 <_free_r+0x6c>
 800ecac:	6820      	ldr	r0, [r4, #0]
 800ecae:	4401      	add	r1, r0
 800ecb0:	1850      	adds	r0, r2, r1
 800ecb2:	4283      	cmp	r3, r0
 800ecb4:	6011      	str	r1, [r2, #0]
 800ecb6:	d1e0      	bne.n	800ec7a <_free_r+0x22>
 800ecb8:	6818      	ldr	r0, [r3, #0]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	6053      	str	r3, [r2, #4]
 800ecbe:	4408      	add	r0, r1
 800ecc0:	6010      	str	r0, [r2, #0]
 800ecc2:	e7da      	b.n	800ec7a <_free_r+0x22>
 800ecc4:	d902      	bls.n	800eccc <_free_r+0x74>
 800ecc6:	230c      	movs	r3, #12
 800ecc8:	602b      	str	r3, [r5, #0]
 800ecca:	e7d6      	b.n	800ec7a <_free_r+0x22>
 800eccc:	6820      	ldr	r0, [r4, #0]
 800ecce:	1821      	adds	r1, r4, r0
 800ecd0:	428b      	cmp	r3, r1
 800ecd2:	bf04      	itt	eq
 800ecd4:	6819      	ldreq	r1, [r3, #0]
 800ecd6:	685b      	ldreq	r3, [r3, #4]
 800ecd8:	6063      	str	r3, [r4, #4]
 800ecda:	bf04      	itt	eq
 800ecdc:	1809      	addeq	r1, r1, r0
 800ecde:	6021      	streq	r1, [r4, #0]
 800ece0:	6054      	str	r4, [r2, #4]
 800ece2:	e7ca      	b.n	800ec7a <_free_r+0x22>
 800ece4:	bd38      	pop	{r3, r4, r5, pc}
 800ece6:	bf00      	nop
 800ece8:	200024e4 	.word	0x200024e4

0800ecec <malloc>:
 800ecec:	4b02      	ldr	r3, [pc, #8]	@ (800ecf8 <malloc+0xc>)
 800ecee:	4601      	mov	r1, r0
 800ecf0:	6818      	ldr	r0, [r3, #0]
 800ecf2:	f000 b825 	b.w	800ed40 <_malloc_r>
 800ecf6:	bf00      	nop
 800ecf8:	2000010c 	.word	0x2000010c

0800ecfc <sbrk_aligned>:
 800ecfc:	b570      	push	{r4, r5, r6, lr}
 800ecfe:	4e0f      	ldr	r6, [pc, #60]	@ (800ed3c <sbrk_aligned+0x40>)
 800ed00:	460c      	mov	r4, r1
 800ed02:	6831      	ldr	r1, [r6, #0]
 800ed04:	4605      	mov	r5, r0
 800ed06:	b911      	cbnz	r1, 800ed0e <sbrk_aligned+0x12>
 800ed08:	f000 fcd4 	bl	800f6b4 <_sbrk_r>
 800ed0c:	6030      	str	r0, [r6, #0]
 800ed0e:	4621      	mov	r1, r4
 800ed10:	4628      	mov	r0, r5
 800ed12:	f000 fccf 	bl	800f6b4 <_sbrk_r>
 800ed16:	1c43      	adds	r3, r0, #1
 800ed18:	d103      	bne.n	800ed22 <sbrk_aligned+0x26>
 800ed1a:	f04f 34ff 	mov.w	r4, #4294967295
 800ed1e:	4620      	mov	r0, r4
 800ed20:	bd70      	pop	{r4, r5, r6, pc}
 800ed22:	1cc4      	adds	r4, r0, #3
 800ed24:	f024 0403 	bic.w	r4, r4, #3
 800ed28:	42a0      	cmp	r0, r4
 800ed2a:	d0f8      	beq.n	800ed1e <sbrk_aligned+0x22>
 800ed2c:	1a21      	subs	r1, r4, r0
 800ed2e:	4628      	mov	r0, r5
 800ed30:	f000 fcc0 	bl	800f6b4 <_sbrk_r>
 800ed34:	3001      	adds	r0, #1
 800ed36:	d1f2      	bne.n	800ed1e <sbrk_aligned+0x22>
 800ed38:	e7ef      	b.n	800ed1a <sbrk_aligned+0x1e>
 800ed3a:	bf00      	nop
 800ed3c:	200024e0 	.word	0x200024e0

0800ed40 <_malloc_r>:
 800ed40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed44:	1ccd      	adds	r5, r1, #3
 800ed46:	f025 0503 	bic.w	r5, r5, #3
 800ed4a:	3508      	adds	r5, #8
 800ed4c:	2d0c      	cmp	r5, #12
 800ed4e:	bf38      	it	cc
 800ed50:	250c      	movcc	r5, #12
 800ed52:	2d00      	cmp	r5, #0
 800ed54:	4606      	mov	r6, r0
 800ed56:	db01      	blt.n	800ed5c <_malloc_r+0x1c>
 800ed58:	42a9      	cmp	r1, r5
 800ed5a:	d904      	bls.n	800ed66 <_malloc_r+0x26>
 800ed5c:	230c      	movs	r3, #12
 800ed5e:	6033      	str	r3, [r6, #0]
 800ed60:	2000      	movs	r0, #0
 800ed62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ee3c <_malloc_r+0xfc>
 800ed6a:	f000 f869 	bl	800ee40 <__malloc_lock>
 800ed6e:	f8d8 3000 	ldr.w	r3, [r8]
 800ed72:	461c      	mov	r4, r3
 800ed74:	bb44      	cbnz	r4, 800edc8 <_malloc_r+0x88>
 800ed76:	4629      	mov	r1, r5
 800ed78:	4630      	mov	r0, r6
 800ed7a:	f7ff ffbf 	bl	800ecfc <sbrk_aligned>
 800ed7e:	1c43      	adds	r3, r0, #1
 800ed80:	4604      	mov	r4, r0
 800ed82:	d158      	bne.n	800ee36 <_malloc_r+0xf6>
 800ed84:	f8d8 4000 	ldr.w	r4, [r8]
 800ed88:	4627      	mov	r7, r4
 800ed8a:	2f00      	cmp	r7, #0
 800ed8c:	d143      	bne.n	800ee16 <_malloc_r+0xd6>
 800ed8e:	2c00      	cmp	r4, #0
 800ed90:	d04b      	beq.n	800ee2a <_malloc_r+0xea>
 800ed92:	6823      	ldr	r3, [r4, #0]
 800ed94:	4639      	mov	r1, r7
 800ed96:	4630      	mov	r0, r6
 800ed98:	eb04 0903 	add.w	r9, r4, r3
 800ed9c:	f000 fc8a 	bl	800f6b4 <_sbrk_r>
 800eda0:	4581      	cmp	r9, r0
 800eda2:	d142      	bne.n	800ee2a <_malloc_r+0xea>
 800eda4:	6821      	ldr	r1, [r4, #0]
 800eda6:	1a6d      	subs	r5, r5, r1
 800eda8:	4629      	mov	r1, r5
 800edaa:	4630      	mov	r0, r6
 800edac:	f7ff ffa6 	bl	800ecfc <sbrk_aligned>
 800edb0:	3001      	adds	r0, #1
 800edb2:	d03a      	beq.n	800ee2a <_malloc_r+0xea>
 800edb4:	6823      	ldr	r3, [r4, #0]
 800edb6:	442b      	add	r3, r5
 800edb8:	6023      	str	r3, [r4, #0]
 800edba:	f8d8 3000 	ldr.w	r3, [r8]
 800edbe:	685a      	ldr	r2, [r3, #4]
 800edc0:	bb62      	cbnz	r2, 800ee1c <_malloc_r+0xdc>
 800edc2:	f8c8 7000 	str.w	r7, [r8]
 800edc6:	e00f      	b.n	800ede8 <_malloc_r+0xa8>
 800edc8:	6822      	ldr	r2, [r4, #0]
 800edca:	1b52      	subs	r2, r2, r5
 800edcc:	d420      	bmi.n	800ee10 <_malloc_r+0xd0>
 800edce:	2a0b      	cmp	r2, #11
 800edd0:	d917      	bls.n	800ee02 <_malloc_r+0xc2>
 800edd2:	1961      	adds	r1, r4, r5
 800edd4:	42a3      	cmp	r3, r4
 800edd6:	6025      	str	r5, [r4, #0]
 800edd8:	bf18      	it	ne
 800edda:	6059      	strne	r1, [r3, #4]
 800eddc:	6863      	ldr	r3, [r4, #4]
 800edde:	bf08      	it	eq
 800ede0:	f8c8 1000 	streq.w	r1, [r8]
 800ede4:	5162      	str	r2, [r4, r5]
 800ede6:	604b      	str	r3, [r1, #4]
 800ede8:	4630      	mov	r0, r6
 800edea:	f000 f82f 	bl	800ee4c <__malloc_unlock>
 800edee:	f104 000b 	add.w	r0, r4, #11
 800edf2:	1d23      	adds	r3, r4, #4
 800edf4:	f020 0007 	bic.w	r0, r0, #7
 800edf8:	1ac2      	subs	r2, r0, r3
 800edfa:	bf1c      	itt	ne
 800edfc:	1a1b      	subne	r3, r3, r0
 800edfe:	50a3      	strne	r3, [r4, r2]
 800ee00:	e7af      	b.n	800ed62 <_malloc_r+0x22>
 800ee02:	6862      	ldr	r2, [r4, #4]
 800ee04:	42a3      	cmp	r3, r4
 800ee06:	bf0c      	ite	eq
 800ee08:	f8c8 2000 	streq.w	r2, [r8]
 800ee0c:	605a      	strne	r2, [r3, #4]
 800ee0e:	e7eb      	b.n	800ede8 <_malloc_r+0xa8>
 800ee10:	4623      	mov	r3, r4
 800ee12:	6864      	ldr	r4, [r4, #4]
 800ee14:	e7ae      	b.n	800ed74 <_malloc_r+0x34>
 800ee16:	463c      	mov	r4, r7
 800ee18:	687f      	ldr	r7, [r7, #4]
 800ee1a:	e7b6      	b.n	800ed8a <_malloc_r+0x4a>
 800ee1c:	461a      	mov	r2, r3
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	42a3      	cmp	r3, r4
 800ee22:	d1fb      	bne.n	800ee1c <_malloc_r+0xdc>
 800ee24:	2300      	movs	r3, #0
 800ee26:	6053      	str	r3, [r2, #4]
 800ee28:	e7de      	b.n	800ede8 <_malloc_r+0xa8>
 800ee2a:	230c      	movs	r3, #12
 800ee2c:	6033      	str	r3, [r6, #0]
 800ee2e:	4630      	mov	r0, r6
 800ee30:	f000 f80c 	bl	800ee4c <__malloc_unlock>
 800ee34:	e794      	b.n	800ed60 <_malloc_r+0x20>
 800ee36:	6005      	str	r5, [r0, #0]
 800ee38:	e7d6      	b.n	800ede8 <_malloc_r+0xa8>
 800ee3a:	bf00      	nop
 800ee3c:	200024e4 	.word	0x200024e4

0800ee40 <__malloc_lock>:
 800ee40:	4801      	ldr	r0, [pc, #4]	@ (800ee48 <__malloc_lock+0x8>)
 800ee42:	f7ff b8ba 	b.w	800dfba <__retarget_lock_acquire_recursive>
 800ee46:	bf00      	nop
 800ee48:	200024dc 	.word	0x200024dc

0800ee4c <__malloc_unlock>:
 800ee4c:	4801      	ldr	r0, [pc, #4]	@ (800ee54 <__malloc_unlock+0x8>)
 800ee4e:	f7ff b8b5 	b.w	800dfbc <__retarget_lock_release_recursive>
 800ee52:	bf00      	nop
 800ee54:	200024dc 	.word	0x200024dc

0800ee58 <_Balloc>:
 800ee58:	b570      	push	{r4, r5, r6, lr}
 800ee5a:	69c6      	ldr	r6, [r0, #28]
 800ee5c:	4604      	mov	r4, r0
 800ee5e:	460d      	mov	r5, r1
 800ee60:	b976      	cbnz	r6, 800ee80 <_Balloc+0x28>
 800ee62:	2010      	movs	r0, #16
 800ee64:	f7ff ff42 	bl	800ecec <malloc>
 800ee68:	4602      	mov	r2, r0
 800ee6a:	61e0      	str	r0, [r4, #28]
 800ee6c:	b920      	cbnz	r0, 800ee78 <_Balloc+0x20>
 800ee6e:	4b18      	ldr	r3, [pc, #96]	@ (800eed0 <_Balloc+0x78>)
 800ee70:	4818      	ldr	r0, [pc, #96]	@ (800eed4 <_Balloc+0x7c>)
 800ee72:	216b      	movs	r1, #107	@ 0x6b
 800ee74:	f000 fc3c 	bl	800f6f0 <__assert_func>
 800ee78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee7c:	6006      	str	r6, [r0, #0]
 800ee7e:	60c6      	str	r6, [r0, #12]
 800ee80:	69e6      	ldr	r6, [r4, #28]
 800ee82:	68f3      	ldr	r3, [r6, #12]
 800ee84:	b183      	cbz	r3, 800eea8 <_Balloc+0x50>
 800ee86:	69e3      	ldr	r3, [r4, #28]
 800ee88:	68db      	ldr	r3, [r3, #12]
 800ee8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ee8e:	b9b8      	cbnz	r0, 800eec0 <_Balloc+0x68>
 800ee90:	2101      	movs	r1, #1
 800ee92:	fa01 f605 	lsl.w	r6, r1, r5
 800ee96:	1d72      	adds	r2, r6, #5
 800ee98:	0092      	lsls	r2, r2, #2
 800ee9a:	4620      	mov	r0, r4
 800ee9c:	f000 fc46 	bl	800f72c <_calloc_r>
 800eea0:	b160      	cbz	r0, 800eebc <_Balloc+0x64>
 800eea2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eea6:	e00e      	b.n	800eec6 <_Balloc+0x6e>
 800eea8:	2221      	movs	r2, #33	@ 0x21
 800eeaa:	2104      	movs	r1, #4
 800eeac:	4620      	mov	r0, r4
 800eeae:	f000 fc3d 	bl	800f72c <_calloc_r>
 800eeb2:	69e3      	ldr	r3, [r4, #28]
 800eeb4:	60f0      	str	r0, [r6, #12]
 800eeb6:	68db      	ldr	r3, [r3, #12]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d1e4      	bne.n	800ee86 <_Balloc+0x2e>
 800eebc:	2000      	movs	r0, #0
 800eebe:	bd70      	pop	{r4, r5, r6, pc}
 800eec0:	6802      	ldr	r2, [r0, #0]
 800eec2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eec6:	2300      	movs	r3, #0
 800eec8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eecc:	e7f7      	b.n	800eebe <_Balloc+0x66>
 800eece:	bf00      	nop
 800eed0:	080103d1 	.word	0x080103d1
 800eed4:	08010451 	.word	0x08010451

0800eed8 <_Bfree>:
 800eed8:	b570      	push	{r4, r5, r6, lr}
 800eeda:	69c6      	ldr	r6, [r0, #28]
 800eedc:	4605      	mov	r5, r0
 800eede:	460c      	mov	r4, r1
 800eee0:	b976      	cbnz	r6, 800ef00 <_Bfree+0x28>
 800eee2:	2010      	movs	r0, #16
 800eee4:	f7ff ff02 	bl	800ecec <malloc>
 800eee8:	4602      	mov	r2, r0
 800eeea:	61e8      	str	r0, [r5, #28]
 800eeec:	b920      	cbnz	r0, 800eef8 <_Bfree+0x20>
 800eeee:	4b09      	ldr	r3, [pc, #36]	@ (800ef14 <_Bfree+0x3c>)
 800eef0:	4809      	ldr	r0, [pc, #36]	@ (800ef18 <_Bfree+0x40>)
 800eef2:	218f      	movs	r1, #143	@ 0x8f
 800eef4:	f000 fbfc 	bl	800f6f0 <__assert_func>
 800eef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eefc:	6006      	str	r6, [r0, #0]
 800eefe:	60c6      	str	r6, [r0, #12]
 800ef00:	b13c      	cbz	r4, 800ef12 <_Bfree+0x3a>
 800ef02:	69eb      	ldr	r3, [r5, #28]
 800ef04:	6862      	ldr	r2, [r4, #4]
 800ef06:	68db      	ldr	r3, [r3, #12]
 800ef08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ef0c:	6021      	str	r1, [r4, #0]
 800ef0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ef12:	bd70      	pop	{r4, r5, r6, pc}
 800ef14:	080103d1 	.word	0x080103d1
 800ef18:	08010451 	.word	0x08010451

0800ef1c <__multadd>:
 800ef1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef20:	690d      	ldr	r5, [r1, #16]
 800ef22:	4607      	mov	r7, r0
 800ef24:	460c      	mov	r4, r1
 800ef26:	461e      	mov	r6, r3
 800ef28:	f101 0c14 	add.w	ip, r1, #20
 800ef2c:	2000      	movs	r0, #0
 800ef2e:	f8dc 3000 	ldr.w	r3, [ip]
 800ef32:	b299      	uxth	r1, r3
 800ef34:	fb02 6101 	mla	r1, r2, r1, r6
 800ef38:	0c1e      	lsrs	r6, r3, #16
 800ef3a:	0c0b      	lsrs	r3, r1, #16
 800ef3c:	fb02 3306 	mla	r3, r2, r6, r3
 800ef40:	b289      	uxth	r1, r1
 800ef42:	3001      	adds	r0, #1
 800ef44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ef48:	4285      	cmp	r5, r0
 800ef4a:	f84c 1b04 	str.w	r1, [ip], #4
 800ef4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ef52:	dcec      	bgt.n	800ef2e <__multadd+0x12>
 800ef54:	b30e      	cbz	r6, 800ef9a <__multadd+0x7e>
 800ef56:	68a3      	ldr	r3, [r4, #8]
 800ef58:	42ab      	cmp	r3, r5
 800ef5a:	dc19      	bgt.n	800ef90 <__multadd+0x74>
 800ef5c:	6861      	ldr	r1, [r4, #4]
 800ef5e:	4638      	mov	r0, r7
 800ef60:	3101      	adds	r1, #1
 800ef62:	f7ff ff79 	bl	800ee58 <_Balloc>
 800ef66:	4680      	mov	r8, r0
 800ef68:	b928      	cbnz	r0, 800ef76 <__multadd+0x5a>
 800ef6a:	4602      	mov	r2, r0
 800ef6c:	4b0c      	ldr	r3, [pc, #48]	@ (800efa0 <__multadd+0x84>)
 800ef6e:	480d      	ldr	r0, [pc, #52]	@ (800efa4 <__multadd+0x88>)
 800ef70:	21ba      	movs	r1, #186	@ 0xba
 800ef72:	f000 fbbd 	bl	800f6f0 <__assert_func>
 800ef76:	6922      	ldr	r2, [r4, #16]
 800ef78:	3202      	adds	r2, #2
 800ef7a:	f104 010c 	add.w	r1, r4, #12
 800ef7e:	0092      	lsls	r2, r2, #2
 800ef80:	300c      	adds	r0, #12
 800ef82:	f000 fba7 	bl	800f6d4 <memcpy>
 800ef86:	4621      	mov	r1, r4
 800ef88:	4638      	mov	r0, r7
 800ef8a:	f7ff ffa5 	bl	800eed8 <_Bfree>
 800ef8e:	4644      	mov	r4, r8
 800ef90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ef94:	3501      	adds	r5, #1
 800ef96:	615e      	str	r6, [r3, #20]
 800ef98:	6125      	str	r5, [r4, #16]
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efa0:	08010440 	.word	0x08010440
 800efa4:	08010451 	.word	0x08010451

0800efa8 <__hi0bits>:
 800efa8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800efac:	4603      	mov	r3, r0
 800efae:	bf36      	itet	cc
 800efb0:	0403      	lslcc	r3, r0, #16
 800efb2:	2000      	movcs	r0, #0
 800efb4:	2010      	movcc	r0, #16
 800efb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800efba:	bf3c      	itt	cc
 800efbc:	021b      	lslcc	r3, r3, #8
 800efbe:	3008      	addcc	r0, #8
 800efc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800efc4:	bf3c      	itt	cc
 800efc6:	011b      	lslcc	r3, r3, #4
 800efc8:	3004      	addcc	r0, #4
 800efca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800efce:	bf3c      	itt	cc
 800efd0:	009b      	lslcc	r3, r3, #2
 800efd2:	3002      	addcc	r0, #2
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	db05      	blt.n	800efe4 <__hi0bits+0x3c>
 800efd8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800efdc:	f100 0001 	add.w	r0, r0, #1
 800efe0:	bf08      	it	eq
 800efe2:	2020      	moveq	r0, #32
 800efe4:	4770      	bx	lr

0800efe6 <__lo0bits>:
 800efe6:	6803      	ldr	r3, [r0, #0]
 800efe8:	4602      	mov	r2, r0
 800efea:	f013 0007 	ands.w	r0, r3, #7
 800efee:	d00b      	beq.n	800f008 <__lo0bits+0x22>
 800eff0:	07d9      	lsls	r1, r3, #31
 800eff2:	d421      	bmi.n	800f038 <__lo0bits+0x52>
 800eff4:	0798      	lsls	r0, r3, #30
 800eff6:	bf49      	itett	mi
 800eff8:	085b      	lsrmi	r3, r3, #1
 800effa:	089b      	lsrpl	r3, r3, #2
 800effc:	2001      	movmi	r0, #1
 800effe:	6013      	strmi	r3, [r2, #0]
 800f000:	bf5c      	itt	pl
 800f002:	6013      	strpl	r3, [r2, #0]
 800f004:	2002      	movpl	r0, #2
 800f006:	4770      	bx	lr
 800f008:	b299      	uxth	r1, r3
 800f00a:	b909      	cbnz	r1, 800f010 <__lo0bits+0x2a>
 800f00c:	0c1b      	lsrs	r3, r3, #16
 800f00e:	2010      	movs	r0, #16
 800f010:	b2d9      	uxtb	r1, r3
 800f012:	b909      	cbnz	r1, 800f018 <__lo0bits+0x32>
 800f014:	3008      	adds	r0, #8
 800f016:	0a1b      	lsrs	r3, r3, #8
 800f018:	0719      	lsls	r1, r3, #28
 800f01a:	bf04      	itt	eq
 800f01c:	091b      	lsreq	r3, r3, #4
 800f01e:	3004      	addeq	r0, #4
 800f020:	0799      	lsls	r1, r3, #30
 800f022:	bf04      	itt	eq
 800f024:	089b      	lsreq	r3, r3, #2
 800f026:	3002      	addeq	r0, #2
 800f028:	07d9      	lsls	r1, r3, #31
 800f02a:	d403      	bmi.n	800f034 <__lo0bits+0x4e>
 800f02c:	085b      	lsrs	r3, r3, #1
 800f02e:	f100 0001 	add.w	r0, r0, #1
 800f032:	d003      	beq.n	800f03c <__lo0bits+0x56>
 800f034:	6013      	str	r3, [r2, #0]
 800f036:	4770      	bx	lr
 800f038:	2000      	movs	r0, #0
 800f03a:	4770      	bx	lr
 800f03c:	2020      	movs	r0, #32
 800f03e:	4770      	bx	lr

0800f040 <__i2b>:
 800f040:	b510      	push	{r4, lr}
 800f042:	460c      	mov	r4, r1
 800f044:	2101      	movs	r1, #1
 800f046:	f7ff ff07 	bl	800ee58 <_Balloc>
 800f04a:	4602      	mov	r2, r0
 800f04c:	b928      	cbnz	r0, 800f05a <__i2b+0x1a>
 800f04e:	4b05      	ldr	r3, [pc, #20]	@ (800f064 <__i2b+0x24>)
 800f050:	4805      	ldr	r0, [pc, #20]	@ (800f068 <__i2b+0x28>)
 800f052:	f240 1145 	movw	r1, #325	@ 0x145
 800f056:	f000 fb4b 	bl	800f6f0 <__assert_func>
 800f05a:	2301      	movs	r3, #1
 800f05c:	6144      	str	r4, [r0, #20]
 800f05e:	6103      	str	r3, [r0, #16]
 800f060:	bd10      	pop	{r4, pc}
 800f062:	bf00      	nop
 800f064:	08010440 	.word	0x08010440
 800f068:	08010451 	.word	0x08010451

0800f06c <__multiply>:
 800f06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f070:	4614      	mov	r4, r2
 800f072:	690a      	ldr	r2, [r1, #16]
 800f074:	6923      	ldr	r3, [r4, #16]
 800f076:	429a      	cmp	r2, r3
 800f078:	bfa8      	it	ge
 800f07a:	4623      	movge	r3, r4
 800f07c:	460f      	mov	r7, r1
 800f07e:	bfa4      	itt	ge
 800f080:	460c      	movge	r4, r1
 800f082:	461f      	movge	r7, r3
 800f084:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f088:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f08c:	68a3      	ldr	r3, [r4, #8]
 800f08e:	6861      	ldr	r1, [r4, #4]
 800f090:	eb0a 0609 	add.w	r6, sl, r9
 800f094:	42b3      	cmp	r3, r6
 800f096:	b085      	sub	sp, #20
 800f098:	bfb8      	it	lt
 800f09a:	3101      	addlt	r1, #1
 800f09c:	f7ff fedc 	bl	800ee58 <_Balloc>
 800f0a0:	b930      	cbnz	r0, 800f0b0 <__multiply+0x44>
 800f0a2:	4602      	mov	r2, r0
 800f0a4:	4b44      	ldr	r3, [pc, #272]	@ (800f1b8 <__multiply+0x14c>)
 800f0a6:	4845      	ldr	r0, [pc, #276]	@ (800f1bc <__multiply+0x150>)
 800f0a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f0ac:	f000 fb20 	bl	800f6f0 <__assert_func>
 800f0b0:	f100 0514 	add.w	r5, r0, #20
 800f0b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f0b8:	462b      	mov	r3, r5
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	4543      	cmp	r3, r8
 800f0be:	d321      	bcc.n	800f104 <__multiply+0x98>
 800f0c0:	f107 0114 	add.w	r1, r7, #20
 800f0c4:	f104 0214 	add.w	r2, r4, #20
 800f0c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f0cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f0d0:	9302      	str	r3, [sp, #8]
 800f0d2:	1b13      	subs	r3, r2, r4
 800f0d4:	3b15      	subs	r3, #21
 800f0d6:	f023 0303 	bic.w	r3, r3, #3
 800f0da:	3304      	adds	r3, #4
 800f0dc:	f104 0715 	add.w	r7, r4, #21
 800f0e0:	42ba      	cmp	r2, r7
 800f0e2:	bf38      	it	cc
 800f0e4:	2304      	movcc	r3, #4
 800f0e6:	9301      	str	r3, [sp, #4]
 800f0e8:	9b02      	ldr	r3, [sp, #8]
 800f0ea:	9103      	str	r1, [sp, #12]
 800f0ec:	428b      	cmp	r3, r1
 800f0ee:	d80c      	bhi.n	800f10a <__multiply+0x9e>
 800f0f0:	2e00      	cmp	r6, #0
 800f0f2:	dd03      	ble.n	800f0fc <__multiply+0x90>
 800f0f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d05b      	beq.n	800f1b4 <__multiply+0x148>
 800f0fc:	6106      	str	r6, [r0, #16]
 800f0fe:	b005      	add	sp, #20
 800f100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f104:	f843 2b04 	str.w	r2, [r3], #4
 800f108:	e7d8      	b.n	800f0bc <__multiply+0x50>
 800f10a:	f8b1 a000 	ldrh.w	sl, [r1]
 800f10e:	f1ba 0f00 	cmp.w	sl, #0
 800f112:	d024      	beq.n	800f15e <__multiply+0xf2>
 800f114:	f104 0e14 	add.w	lr, r4, #20
 800f118:	46a9      	mov	r9, r5
 800f11a:	f04f 0c00 	mov.w	ip, #0
 800f11e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f122:	f8d9 3000 	ldr.w	r3, [r9]
 800f126:	fa1f fb87 	uxth.w	fp, r7
 800f12a:	b29b      	uxth	r3, r3
 800f12c:	fb0a 330b 	mla	r3, sl, fp, r3
 800f130:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f134:	f8d9 7000 	ldr.w	r7, [r9]
 800f138:	4463      	add	r3, ip
 800f13a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f13e:	fb0a c70b 	mla	r7, sl, fp, ip
 800f142:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f146:	b29b      	uxth	r3, r3
 800f148:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f14c:	4572      	cmp	r2, lr
 800f14e:	f849 3b04 	str.w	r3, [r9], #4
 800f152:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f156:	d8e2      	bhi.n	800f11e <__multiply+0xb2>
 800f158:	9b01      	ldr	r3, [sp, #4]
 800f15a:	f845 c003 	str.w	ip, [r5, r3]
 800f15e:	9b03      	ldr	r3, [sp, #12]
 800f160:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f164:	3104      	adds	r1, #4
 800f166:	f1b9 0f00 	cmp.w	r9, #0
 800f16a:	d021      	beq.n	800f1b0 <__multiply+0x144>
 800f16c:	682b      	ldr	r3, [r5, #0]
 800f16e:	f104 0c14 	add.w	ip, r4, #20
 800f172:	46ae      	mov	lr, r5
 800f174:	f04f 0a00 	mov.w	sl, #0
 800f178:	f8bc b000 	ldrh.w	fp, [ip]
 800f17c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f180:	fb09 770b 	mla	r7, r9, fp, r7
 800f184:	4457      	add	r7, sl
 800f186:	b29b      	uxth	r3, r3
 800f188:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f18c:	f84e 3b04 	str.w	r3, [lr], #4
 800f190:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f194:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f198:	f8be 3000 	ldrh.w	r3, [lr]
 800f19c:	fb09 330a 	mla	r3, r9, sl, r3
 800f1a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f1a4:	4562      	cmp	r2, ip
 800f1a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f1aa:	d8e5      	bhi.n	800f178 <__multiply+0x10c>
 800f1ac:	9f01      	ldr	r7, [sp, #4]
 800f1ae:	51eb      	str	r3, [r5, r7]
 800f1b0:	3504      	adds	r5, #4
 800f1b2:	e799      	b.n	800f0e8 <__multiply+0x7c>
 800f1b4:	3e01      	subs	r6, #1
 800f1b6:	e79b      	b.n	800f0f0 <__multiply+0x84>
 800f1b8:	08010440 	.word	0x08010440
 800f1bc:	08010451 	.word	0x08010451

0800f1c0 <__pow5mult>:
 800f1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1c4:	4615      	mov	r5, r2
 800f1c6:	f012 0203 	ands.w	r2, r2, #3
 800f1ca:	4607      	mov	r7, r0
 800f1cc:	460e      	mov	r6, r1
 800f1ce:	d007      	beq.n	800f1e0 <__pow5mult+0x20>
 800f1d0:	4c25      	ldr	r4, [pc, #148]	@ (800f268 <__pow5mult+0xa8>)
 800f1d2:	3a01      	subs	r2, #1
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f1da:	f7ff fe9f 	bl	800ef1c <__multadd>
 800f1de:	4606      	mov	r6, r0
 800f1e0:	10ad      	asrs	r5, r5, #2
 800f1e2:	d03d      	beq.n	800f260 <__pow5mult+0xa0>
 800f1e4:	69fc      	ldr	r4, [r7, #28]
 800f1e6:	b97c      	cbnz	r4, 800f208 <__pow5mult+0x48>
 800f1e8:	2010      	movs	r0, #16
 800f1ea:	f7ff fd7f 	bl	800ecec <malloc>
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	61f8      	str	r0, [r7, #28]
 800f1f2:	b928      	cbnz	r0, 800f200 <__pow5mult+0x40>
 800f1f4:	4b1d      	ldr	r3, [pc, #116]	@ (800f26c <__pow5mult+0xac>)
 800f1f6:	481e      	ldr	r0, [pc, #120]	@ (800f270 <__pow5mult+0xb0>)
 800f1f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f1fc:	f000 fa78 	bl	800f6f0 <__assert_func>
 800f200:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f204:	6004      	str	r4, [r0, #0]
 800f206:	60c4      	str	r4, [r0, #12]
 800f208:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f20c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f210:	b94c      	cbnz	r4, 800f226 <__pow5mult+0x66>
 800f212:	f240 2171 	movw	r1, #625	@ 0x271
 800f216:	4638      	mov	r0, r7
 800f218:	f7ff ff12 	bl	800f040 <__i2b>
 800f21c:	2300      	movs	r3, #0
 800f21e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f222:	4604      	mov	r4, r0
 800f224:	6003      	str	r3, [r0, #0]
 800f226:	f04f 0900 	mov.w	r9, #0
 800f22a:	07eb      	lsls	r3, r5, #31
 800f22c:	d50a      	bpl.n	800f244 <__pow5mult+0x84>
 800f22e:	4631      	mov	r1, r6
 800f230:	4622      	mov	r2, r4
 800f232:	4638      	mov	r0, r7
 800f234:	f7ff ff1a 	bl	800f06c <__multiply>
 800f238:	4631      	mov	r1, r6
 800f23a:	4680      	mov	r8, r0
 800f23c:	4638      	mov	r0, r7
 800f23e:	f7ff fe4b 	bl	800eed8 <_Bfree>
 800f242:	4646      	mov	r6, r8
 800f244:	106d      	asrs	r5, r5, #1
 800f246:	d00b      	beq.n	800f260 <__pow5mult+0xa0>
 800f248:	6820      	ldr	r0, [r4, #0]
 800f24a:	b938      	cbnz	r0, 800f25c <__pow5mult+0x9c>
 800f24c:	4622      	mov	r2, r4
 800f24e:	4621      	mov	r1, r4
 800f250:	4638      	mov	r0, r7
 800f252:	f7ff ff0b 	bl	800f06c <__multiply>
 800f256:	6020      	str	r0, [r4, #0]
 800f258:	f8c0 9000 	str.w	r9, [r0]
 800f25c:	4604      	mov	r4, r0
 800f25e:	e7e4      	b.n	800f22a <__pow5mult+0x6a>
 800f260:	4630      	mov	r0, r6
 800f262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f266:	bf00      	nop
 800f268:	080104ac 	.word	0x080104ac
 800f26c:	080103d1 	.word	0x080103d1
 800f270:	08010451 	.word	0x08010451

0800f274 <__lshift>:
 800f274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f278:	460c      	mov	r4, r1
 800f27a:	6849      	ldr	r1, [r1, #4]
 800f27c:	6923      	ldr	r3, [r4, #16]
 800f27e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f282:	68a3      	ldr	r3, [r4, #8]
 800f284:	4607      	mov	r7, r0
 800f286:	4691      	mov	r9, r2
 800f288:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f28c:	f108 0601 	add.w	r6, r8, #1
 800f290:	42b3      	cmp	r3, r6
 800f292:	db0b      	blt.n	800f2ac <__lshift+0x38>
 800f294:	4638      	mov	r0, r7
 800f296:	f7ff fddf 	bl	800ee58 <_Balloc>
 800f29a:	4605      	mov	r5, r0
 800f29c:	b948      	cbnz	r0, 800f2b2 <__lshift+0x3e>
 800f29e:	4602      	mov	r2, r0
 800f2a0:	4b28      	ldr	r3, [pc, #160]	@ (800f344 <__lshift+0xd0>)
 800f2a2:	4829      	ldr	r0, [pc, #164]	@ (800f348 <__lshift+0xd4>)
 800f2a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f2a8:	f000 fa22 	bl	800f6f0 <__assert_func>
 800f2ac:	3101      	adds	r1, #1
 800f2ae:	005b      	lsls	r3, r3, #1
 800f2b0:	e7ee      	b.n	800f290 <__lshift+0x1c>
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	f100 0114 	add.w	r1, r0, #20
 800f2b8:	f100 0210 	add.w	r2, r0, #16
 800f2bc:	4618      	mov	r0, r3
 800f2be:	4553      	cmp	r3, sl
 800f2c0:	db33      	blt.n	800f32a <__lshift+0xb6>
 800f2c2:	6920      	ldr	r0, [r4, #16]
 800f2c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f2c8:	f104 0314 	add.w	r3, r4, #20
 800f2cc:	f019 091f 	ands.w	r9, r9, #31
 800f2d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f2d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f2d8:	d02b      	beq.n	800f332 <__lshift+0xbe>
 800f2da:	f1c9 0e20 	rsb	lr, r9, #32
 800f2de:	468a      	mov	sl, r1
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	6818      	ldr	r0, [r3, #0]
 800f2e4:	fa00 f009 	lsl.w	r0, r0, r9
 800f2e8:	4310      	orrs	r0, r2
 800f2ea:	f84a 0b04 	str.w	r0, [sl], #4
 800f2ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2f2:	459c      	cmp	ip, r3
 800f2f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800f2f8:	d8f3      	bhi.n	800f2e2 <__lshift+0x6e>
 800f2fa:	ebac 0304 	sub.w	r3, ip, r4
 800f2fe:	3b15      	subs	r3, #21
 800f300:	f023 0303 	bic.w	r3, r3, #3
 800f304:	3304      	adds	r3, #4
 800f306:	f104 0015 	add.w	r0, r4, #21
 800f30a:	4584      	cmp	ip, r0
 800f30c:	bf38      	it	cc
 800f30e:	2304      	movcc	r3, #4
 800f310:	50ca      	str	r2, [r1, r3]
 800f312:	b10a      	cbz	r2, 800f318 <__lshift+0xa4>
 800f314:	f108 0602 	add.w	r6, r8, #2
 800f318:	3e01      	subs	r6, #1
 800f31a:	4638      	mov	r0, r7
 800f31c:	612e      	str	r6, [r5, #16]
 800f31e:	4621      	mov	r1, r4
 800f320:	f7ff fdda 	bl	800eed8 <_Bfree>
 800f324:	4628      	mov	r0, r5
 800f326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f32a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f32e:	3301      	adds	r3, #1
 800f330:	e7c5      	b.n	800f2be <__lshift+0x4a>
 800f332:	3904      	subs	r1, #4
 800f334:	f853 2b04 	ldr.w	r2, [r3], #4
 800f338:	f841 2f04 	str.w	r2, [r1, #4]!
 800f33c:	459c      	cmp	ip, r3
 800f33e:	d8f9      	bhi.n	800f334 <__lshift+0xc0>
 800f340:	e7ea      	b.n	800f318 <__lshift+0xa4>
 800f342:	bf00      	nop
 800f344:	08010440 	.word	0x08010440
 800f348:	08010451 	.word	0x08010451

0800f34c <__mcmp>:
 800f34c:	690a      	ldr	r2, [r1, #16]
 800f34e:	4603      	mov	r3, r0
 800f350:	6900      	ldr	r0, [r0, #16]
 800f352:	1a80      	subs	r0, r0, r2
 800f354:	b530      	push	{r4, r5, lr}
 800f356:	d10e      	bne.n	800f376 <__mcmp+0x2a>
 800f358:	3314      	adds	r3, #20
 800f35a:	3114      	adds	r1, #20
 800f35c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f360:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f364:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f368:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f36c:	4295      	cmp	r5, r2
 800f36e:	d003      	beq.n	800f378 <__mcmp+0x2c>
 800f370:	d205      	bcs.n	800f37e <__mcmp+0x32>
 800f372:	f04f 30ff 	mov.w	r0, #4294967295
 800f376:	bd30      	pop	{r4, r5, pc}
 800f378:	42a3      	cmp	r3, r4
 800f37a:	d3f3      	bcc.n	800f364 <__mcmp+0x18>
 800f37c:	e7fb      	b.n	800f376 <__mcmp+0x2a>
 800f37e:	2001      	movs	r0, #1
 800f380:	e7f9      	b.n	800f376 <__mcmp+0x2a>
	...

0800f384 <__mdiff>:
 800f384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f388:	4689      	mov	r9, r1
 800f38a:	4606      	mov	r6, r0
 800f38c:	4611      	mov	r1, r2
 800f38e:	4648      	mov	r0, r9
 800f390:	4614      	mov	r4, r2
 800f392:	f7ff ffdb 	bl	800f34c <__mcmp>
 800f396:	1e05      	subs	r5, r0, #0
 800f398:	d112      	bne.n	800f3c0 <__mdiff+0x3c>
 800f39a:	4629      	mov	r1, r5
 800f39c:	4630      	mov	r0, r6
 800f39e:	f7ff fd5b 	bl	800ee58 <_Balloc>
 800f3a2:	4602      	mov	r2, r0
 800f3a4:	b928      	cbnz	r0, 800f3b2 <__mdiff+0x2e>
 800f3a6:	4b3f      	ldr	r3, [pc, #252]	@ (800f4a4 <__mdiff+0x120>)
 800f3a8:	f240 2137 	movw	r1, #567	@ 0x237
 800f3ac:	483e      	ldr	r0, [pc, #248]	@ (800f4a8 <__mdiff+0x124>)
 800f3ae:	f000 f99f 	bl	800f6f0 <__assert_func>
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f3b8:	4610      	mov	r0, r2
 800f3ba:	b003      	add	sp, #12
 800f3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3c0:	bfbc      	itt	lt
 800f3c2:	464b      	movlt	r3, r9
 800f3c4:	46a1      	movlt	r9, r4
 800f3c6:	4630      	mov	r0, r6
 800f3c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f3cc:	bfba      	itte	lt
 800f3ce:	461c      	movlt	r4, r3
 800f3d0:	2501      	movlt	r5, #1
 800f3d2:	2500      	movge	r5, #0
 800f3d4:	f7ff fd40 	bl	800ee58 <_Balloc>
 800f3d8:	4602      	mov	r2, r0
 800f3da:	b918      	cbnz	r0, 800f3e4 <__mdiff+0x60>
 800f3dc:	4b31      	ldr	r3, [pc, #196]	@ (800f4a4 <__mdiff+0x120>)
 800f3de:	f240 2145 	movw	r1, #581	@ 0x245
 800f3e2:	e7e3      	b.n	800f3ac <__mdiff+0x28>
 800f3e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f3e8:	6926      	ldr	r6, [r4, #16]
 800f3ea:	60c5      	str	r5, [r0, #12]
 800f3ec:	f109 0310 	add.w	r3, r9, #16
 800f3f0:	f109 0514 	add.w	r5, r9, #20
 800f3f4:	f104 0e14 	add.w	lr, r4, #20
 800f3f8:	f100 0b14 	add.w	fp, r0, #20
 800f3fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f400:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f404:	9301      	str	r3, [sp, #4]
 800f406:	46d9      	mov	r9, fp
 800f408:	f04f 0c00 	mov.w	ip, #0
 800f40c:	9b01      	ldr	r3, [sp, #4]
 800f40e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f412:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f416:	9301      	str	r3, [sp, #4]
 800f418:	fa1f f38a 	uxth.w	r3, sl
 800f41c:	4619      	mov	r1, r3
 800f41e:	b283      	uxth	r3, r0
 800f420:	1acb      	subs	r3, r1, r3
 800f422:	0c00      	lsrs	r0, r0, #16
 800f424:	4463      	add	r3, ip
 800f426:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f42a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f42e:	b29b      	uxth	r3, r3
 800f430:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f434:	4576      	cmp	r6, lr
 800f436:	f849 3b04 	str.w	r3, [r9], #4
 800f43a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f43e:	d8e5      	bhi.n	800f40c <__mdiff+0x88>
 800f440:	1b33      	subs	r3, r6, r4
 800f442:	3b15      	subs	r3, #21
 800f444:	f023 0303 	bic.w	r3, r3, #3
 800f448:	3415      	adds	r4, #21
 800f44a:	3304      	adds	r3, #4
 800f44c:	42a6      	cmp	r6, r4
 800f44e:	bf38      	it	cc
 800f450:	2304      	movcc	r3, #4
 800f452:	441d      	add	r5, r3
 800f454:	445b      	add	r3, fp
 800f456:	461e      	mov	r6, r3
 800f458:	462c      	mov	r4, r5
 800f45a:	4544      	cmp	r4, r8
 800f45c:	d30e      	bcc.n	800f47c <__mdiff+0xf8>
 800f45e:	f108 0103 	add.w	r1, r8, #3
 800f462:	1b49      	subs	r1, r1, r5
 800f464:	f021 0103 	bic.w	r1, r1, #3
 800f468:	3d03      	subs	r5, #3
 800f46a:	45a8      	cmp	r8, r5
 800f46c:	bf38      	it	cc
 800f46e:	2100      	movcc	r1, #0
 800f470:	440b      	add	r3, r1
 800f472:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f476:	b191      	cbz	r1, 800f49e <__mdiff+0x11a>
 800f478:	6117      	str	r7, [r2, #16]
 800f47a:	e79d      	b.n	800f3b8 <__mdiff+0x34>
 800f47c:	f854 1b04 	ldr.w	r1, [r4], #4
 800f480:	46e6      	mov	lr, ip
 800f482:	0c08      	lsrs	r0, r1, #16
 800f484:	fa1c fc81 	uxtah	ip, ip, r1
 800f488:	4471      	add	r1, lr
 800f48a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f48e:	b289      	uxth	r1, r1
 800f490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f494:	f846 1b04 	str.w	r1, [r6], #4
 800f498:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f49c:	e7dd      	b.n	800f45a <__mdiff+0xd6>
 800f49e:	3f01      	subs	r7, #1
 800f4a0:	e7e7      	b.n	800f472 <__mdiff+0xee>
 800f4a2:	bf00      	nop
 800f4a4:	08010440 	.word	0x08010440
 800f4a8:	08010451 	.word	0x08010451

0800f4ac <__d2b>:
 800f4ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f4b0:	460f      	mov	r7, r1
 800f4b2:	2101      	movs	r1, #1
 800f4b4:	ec59 8b10 	vmov	r8, r9, d0
 800f4b8:	4616      	mov	r6, r2
 800f4ba:	f7ff fccd 	bl	800ee58 <_Balloc>
 800f4be:	4604      	mov	r4, r0
 800f4c0:	b930      	cbnz	r0, 800f4d0 <__d2b+0x24>
 800f4c2:	4602      	mov	r2, r0
 800f4c4:	4b23      	ldr	r3, [pc, #140]	@ (800f554 <__d2b+0xa8>)
 800f4c6:	4824      	ldr	r0, [pc, #144]	@ (800f558 <__d2b+0xac>)
 800f4c8:	f240 310f 	movw	r1, #783	@ 0x30f
 800f4cc:	f000 f910 	bl	800f6f0 <__assert_func>
 800f4d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f4d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f4d8:	b10d      	cbz	r5, 800f4de <__d2b+0x32>
 800f4da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f4de:	9301      	str	r3, [sp, #4]
 800f4e0:	f1b8 0300 	subs.w	r3, r8, #0
 800f4e4:	d023      	beq.n	800f52e <__d2b+0x82>
 800f4e6:	4668      	mov	r0, sp
 800f4e8:	9300      	str	r3, [sp, #0]
 800f4ea:	f7ff fd7c 	bl	800efe6 <__lo0bits>
 800f4ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f4f2:	b1d0      	cbz	r0, 800f52a <__d2b+0x7e>
 800f4f4:	f1c0 0320 	rsb	r3, r0, #32
 800f4f8:	fa02 f303 	lsl.w	r3, r2, r3
 800f4fc:	430b      	orrs	r3, r1
 800f4fe:	40c2      	lsrs	r2, r0
 800f500:	6163      	str	r3, [r4, #20]
 800f502:	9201      	str	r2, [sp, #4]
 800f504:	9b01      	ldr	r3, [sp, #4]
 800f506:	61a3      	str	r3, [r4, #24]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	bf0c      	ite	eq
 800f50c:	2201      	moveq	r2, #1
 800f50e:	2202      	movne	r2, #2
 800f510:	6122      	str	r2, [r4, #16]
 800f512:	b1a5      	cbz	r5, 800f53e <__d2b+0x92>
 800f514:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f518:	4405      	add	r5, r0
 800f51a:	603d      	str	r5, [r7, #0]
 800f51c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f520:	6030      	str	r0, [r6, #0]
 800f522:	4620      	mov	r0, r4
 800f524:	b003      	add	sp, #12
 800f526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f52a:	6161      	str	r1, [r4, #20]
 800f52c:	e7ea      	b.n	800f504 <__d2b+0x58>
 800f52e:	a801      	add	r0, sp, #4
 800f530:	f7ff fd59 	bl	800efe6 <__lo0bits>
 800f534:	9b01      	ldr	r3, [sp, #4]
 800f536:	6163      	str	r3, [r4, #20]
 800f538:	3020      	adds	r0, #32
 800f53a:	2201      	movs	r2, #1
 800f53c:	e7e8      	b.n	800f510 <__d2b+0x64>
 800f53e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f542:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f546:	6038      	str	r0, [r7, #0]
 800f548:	6918      	ldr	r0, [r3, #16]
 800f54a:	f7ff fd2d 	bl	800efa8 <__hi0bits>
 800f54e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f552:	e7e5      	b.n	800f520 <__d2b+0x74>
 800f554:	08010440 	.word	0x08010440
 800f558:	08010451 	.word	0x08010451

0800f55c <__sflush_r>:
 800f55c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f564:	0716      	lsls	r6, r2, #28
 800f566:	4605      	mov	r5, r0
 800f568:	460c      	mov	r4, r1
 800f56a:	d454      	bmi.n	800f616 <__sflush_r+0xba>
 800f56c:	684b      	ldr	r3, [r1, #4]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	dc02      	bgt.n	800f578 <__sflush_r+0x1c>
 800f572:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f574:	2b00      	cmp	r3, #0
 800f576:	dd48      	ble.n	800f60a <__sflush_r+0xae>
 800f578:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f57a:	2e00      	cmp	r6, #0
 800f57c:	d045      	beq.n	800f60a <__sflush_r+0xae>
 800f57e:	2300      	movs	r3, #0
 800f580:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f584:	682f      	ldr	r7, [r5, #0]
 800f586:	6a21      	ldr	r1, [r4, #32]
 800f588:	602b      	str	r3, [r5, #0]
 800f58a:	d030      	beq.n	800f5ee <__sflush_r+0x92>
 800f58c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f58e:	89a3      	ldrh	r3, [r4, #12]
 800f590:	0759      	lsls	r1, r3, #29
 800f592:	d505      	bpl.n	800f5a0 <__sflush_r+0x44>
 800f594:	6863      	ldr	r3, [r4, #4]
 800f596:	1ad2      	subs	r2, r2, r3
 800f598:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f59a:	b10b      	cbz	r3, 800f5a0 <__sflush_r+0x44>
 800f59c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f59e:	1ad2      	subs	r2, r2, r3
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f5a4:	6a21      	ldr	r1, [r4, #32]
 800f5a6:	4628      	mov	r0, r5
 800f5a8:	47b0      	blx	r6
 800f5aa:	1c43      	adds	r3, r0, #1
 800f5ac:	89a3      	ldrh	r3, [r4, #12]
 800f5ae:	d106      	bne.n	800f5be <__sflush_r+0x62>
 800f5b0:	6829      	ldr	r1, [r5, #0]
 800f5b2:	291d      	cmp	r1, #29
 800f5b4:	d82b      	bhi.n	800f60e <__sflush_r+0xb2>
 800f5b6:	4a2a      	ldr	r2, [pc, #168]	@ (800f660 <__sflush_r+0x104>)
 800f5b8:	410a      	asrs	r2, r1
 800f5ba:	07d6      	lsls	r6, r2, #31
 800f5bc:	d427      	bmi.n	800f60e <__sflush_r+0xb2>
 800f5be:	2200      	movs	r2, #0
 800f5c0:	6062      	str	r2, [r4, #4]
 800f5c2:	04d9      	lsls	r1, r3, #19
 800f5c4:	6922      	ldr	r2, [r4, #16]
 800f5c6:	6022      	str	r2, [r4, #0]
 800f5c8:	d504      	bpl.n	800f5d4 <__sflush_r+0x78>
 800f5ca:	1c42      	adds	r2, r0, #1
 800f5cc:	d101      	bne.n	800f5d2 <__sflush_r+0x76>
 800f5ce:	682b      	ldr	r3, [r5, #0]
 800f5d0:	b903      	cbnz	r3, 800f5d4 <__sflush_r+0x78>
 800f5d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800f5d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f5d6:	602f      	str	r7, [r5, #0]
 800f5d8:	b1b9      	cbz	r1, 800f60a <__sflush_r+0xae>
 800f5da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f5de:	4299      	cmp	r1, r3
 800f5e0:	d002      	beq.n	800f5e8 <__sflush_r+0x8c>
 800f5e2:	4628      	mov	r0, r5
 800f5e4:	f7ff fb38 	bl	800ec58 <_free_r>
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800f5ec:	e00d      	b.n	800f60a <__sflush_r+0xae>
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	4628      	mov	r0, r5
 800f5f2:	47b0      	blx	r6
 800f5f4:	4602      	mov	r2, r0
 800f5f6:	1c50      	adds	r0, r2, #1
 800f5f8:	d1c9      	bne.n	800f58e <__sflush_r+0x32>
 800f5fa:	682b      	ldr	r3, [r5, #0]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d0c6      	beq.n	800f58e <__sflush_r+0x32>
 800f600:	2b1d      	cmp	r3, #29
 800f602:	d001      	beq.n	800f608 <__sflush_r+0xac>
 800f604:	2b16      	cmp	r3, #22
 800f606:	d11e      	bne.n	800f646 <__sflush_r+0xea>
 800f608:	602f      	str	r7, [r5, #0]
 800f60a:	2000      	movs	r0, #0
 800f60c:	e022      	b.n	800f654 <__sflush_r+0xf8>
 800f60e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f612:	b21b      	sxth	r3, r3
 800f614:	e01b      	b.n	800f64e <__sflush_r+0xf2>
 800f616:	690f      	ldr	r7, [r1, #16]
 800f618:	2f00      	cmp	r7, #0
 800f61a:	d0f6      	beq.n	800f60a <__sflush_r+0xae>
 800f61c:	0793      	lsls	r3, r2, #30
 800f61e:	680e      	ldr	r6, [r1, #0]
 800f620:	bf08      	it	eq
 800f622:	694b      	ldreq	r3, [r1, #20]
 800f624:	600f      	str	r7, [r1, #0]
 800f626:	bf18      	it	ne
 800f628:	2300      	movne	r3, #0
 800f62a:	eba6 0807 	sub.w	r8, r6, r7
 800f62e:	608b      	str	r3, [r1, #8]
 800f630:	f1b8 0f00 	cmp.w	r8, #0
 800f634:	dde9      	ble.n	800f60a <__sflush_r+0xae>
 800f636:	6a21      	ldr	r1, [r4, #32]
 800f638:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f63a:	4643      	mov	r3, r8
 800f63c:	463a      	mov	r2, r7
 800f63e:	4628      	mov	r0, r5
 800f640:	47b0      	blx	r6
 800f642:	2800      	cmp	r0, #0
 800f644:	dc08      	bgt.n	800f658 <__sflush_r+0xfc>
 800f646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f64a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f64e:	81a3      	strh	r3, [r4, #12]
 800f650:	f04f 30ff 	mov.w	r0, #4294967295
 800f654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f658:	4407      	add	r7, r0
 800f65a:	eba8 0800 	sub.w	r8, r8, r0
 800f65e:	e7e7      	b.n	800f630 <__sflush_r+0xd4>
 800f660:	dfbffffe 	.word	0xdfbffffe

0800f664 <_fflush_r>:
 800f664:	b538      	push	{r3, r4, r5, lr}
 800f666:	690b      	ldr	r3, [r1, #16]
 800f668:	4605      	mov	r5, r0
 800f66a:	460c      	mov	r4, r1
 800f66c:	b913      	cbnz	r3, 800f674 <_fflush_r+0x10>
 800f66e:	2500      	movs	r5, #0
 800f670:	4628      	mov	r0, r5
 800f672:	bd38      	pop	{r3, r4, r5, pc}
 800f674:	b118      	cbz	r0, 800f67e <_fflush_r+0x1a>
 800f676:	6a03      	ldr	r3, [r0, #32]
 800f678:	b90b      	cbnz	r3, 800f67e <_fflush_r+0x1a>
 800f67a:	f7fe fba7 	bl	800ddcc <__sinit>
 800f67e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d0f3      	beq.n	800f66e <_fflush_r+0xa>
 800f686:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f688:	07d0      	lsls	r0, r2, #31
 800f68a:	d404      	bmi.n	800f696 <_fflush_r+0x32>
 800f68c:	0599      	lsls	r1, r3, #22
 800f68e:	d402      	bmi.n	800f696 <_fflush_r+0x32>
 800f690:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f692:	f7fe fc92 	bl	800dfba <__retarget_lock_acquire_recursive>
 800f696:	4628      	mov	r0, r5
 800f698:	4621      	mov	r1, r4
 800f69a:	f7ff ff5f 	bl	800f55c <__sflush_r>
 800f69e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f6a0:	07da      	lsls	r2, r3, #31
 800f6a2:	4605      	mov	r5, r0
 800f6a4:	d4e4      	bmi.n	800f670 <_fflush_r+0xc>
 800f6a6:	89a3      	ldrh	r3, [r4, #12]
 800f6a8:	059b      	lsls	r3, r3, #22
 800f6aa:	d4e1      	bmi.n	800f670 <_fflush_r+0xc>
 800f6ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6ae:	f7fe fc85 	bl	800dfbc <__retarget_lock_release_recursive>
 800f6b2:	e7dd      	b.n	800f670 <_fflush_r+0xc>

0800f6b4 <_sbrk_r>:
 800f6b4:	b538      	push	{r3, r4, r5, lr}
 800f6b6:	4d06      	ldr	r5, [pc, #24]	@ (800f6d0 <_sbrk_r+0x1c>)
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	4604      	mov	r4, r0
 800f6bc:	4608      	mov	r0, r1
 800f6be:	602b      	str	r3, [r5, #0]
 800f6c0:	f7f3 f9b6 	bl	8002a30 <_sbrk>
 800f6c4:	1c43      	adds	r3, r0, #1
 800f6c6:	d102      	bne.n	800f6ce <_sbrk_r+0x1a>
 800f6c8:	682b      	ldr	r3, [r5, #0]
 800f6ca:	b103      	cbz	r3, 800f6ce <_sbrk_r+0x1a>
 800f6cc:	6023      	str	r3, [r4, #0]
 800f6ce:	bd38      	pop	{r3, r4, r5, pc}
 800f6d0:	200024d8 	.word	0x200024d8

0800f6d4 <memcpy>:
 800f6d4:	440a      	add	r2, r1
 800f6d6:	4291      	cmp	r1, r2
 800f6d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f6dc:	d100      	bne.n	800f6e0 <memcpy+0xc>
 800f6de:	4770      	bx	lr
 800f6e0:	b510      	push	{r4, lr}
 800f6e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f6ea:	4291      	cmp	r1, r2
 800f6ec:	d1f9      	bne.n	800f6e2 <memcpy+0xe>
 800f6ee:	bd10      	pop	{r4, pc}

0800f6f0 <__assert_func>:
 800f6f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f6f2:	4614      	mov	r4, r2
 800f6f4:	461a      	mov	r2, r3
 800f6f6:	4b09      	ldr	r3, [pc, #36]	@ (800f71c <__assert_func+0x2c>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	4605      	mov	r5, r0
 800f6fc:	68d8      	ldr	r0, [r3, #12]
 800f6fe:	b954      	cbnz	r4, 800f716 <__assert_func+0x26>
 800f700:	4b07      	ldr	r3, [pc, #28]	@ (800f720 <__assert_func+0x30>)
 800f702:	461c      	mov	r4, r3
 800f704:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f708:	9100      	str	r1, [sp, #0]
 800f70a:	462b      	mov	r3, r5
 800f70c:	4905      	ldr	r1, [pc, #20]	@ (800f724 <__assert_func+0x34>)
 800f70e:	f000 f841 	bl	800f794 <fiprintf>
 800f712:	f000 f851 	bl	800f7b8 <abort>
 800f716:	4b04      	ldr	r3, [pc, #16]	@ (800f728 <__assert_func+0x38>)
 800f718:	e7f4      	b.n	800f704 <__assert_func+0x14>
 800f71a:	bf00      	nop
 800f71c:	2000010c 	.word	0x2000010c
 800f720:	080105ed 	.word	0x080105ed
 800f724:	080105bf 	.word	0x080105bf
 800f728:	080105b2 	.word	0x080105b2

0800f72c <_calloc_r>:
 800f72c:	b570      	push	{r4, r5, r6, lr}
 800f72e:	fba1 5402 	umull	r5, r4, r1, r2
 800f732:	b93c      	cbnz	r4, 800f744 <_calloc_r+0x18>
 800f734:	4629      	mov	r1, r5
 800f736:	f7ff fb03 	bl	800ed40 <_malloc_r>
 800f73a:	4606      	mov	r6, r0
 800f73c:	b928      	cbnz	r0, 800f74a <_calloc_r+0x1e>
 800f73e:	2600      	movs	r6, #0
 800f740:	4630      	mov	r0, r6
 800f742:	bd70      	pop	{r4, r5, r6, pc}
 800f744:	220c      	movs	r2, #12
 800f746:	6002      	str	r2, [r0, #0]
 800f748:	e7f9      	b.n	800f73e <_calloc_r+0x12>
 800f74a:	462a      	mov	r2, r5
 800f74c:	4621      	mov	r1, r4
 800f74e:	f7fe fbb6 	bl	800debe <memset>
 800f752:	e7f5      	b.n	800f740 <_calloc_r+0x14>

0800f754 <__ascii_mbtowc>:
 800f754:	b082      	sub	sp, #8
 800f756:	b901      	cbnz	r1, 800f75a <__ascii_mbtowc+0x6>
 800f758:	a901      	add	r1, sp, #4
 800f75a:	b142      	cbz	r2, 800f76e <__ascii_mbtowc+0x1a>
 800f75c:	b14b      	cbz	r3, 800f772 <__ascii_mbtowc+0x1e>
 800f75e:	7813      	ldrb	r3, [r2, #0]
 800f760:	600b      	str	r3, [r1, #0]
 800f762:	7812      	ldrb	r2, [r2, #0]
 800f764:	1e10      	subs	r0, r2, #0
 800f766:	bf18      	it	ne
 800f768:	2001      	movne	r0, #1
 800f76a:	b002      	add	sp, #8
 800f76c:	4770      	bx	lr
 800f76e:	4610      	mov	r0, r2
 800f770:	e7fb      	b.n	800f76a <__ascii_mbtowc+0x16>
 800f772:	f06f 0001 	mvn.w	r0, #1
 800f776:	e7f8      	b.n	800f76a <__ascii_mbtowc+0x16>

0800f778 <__ascii_wctomb>:
 800f778:	4603      	mov	r3, r0
 800f77a:	4608      	mov	r0, r1
 800f77c:	b141      	cbz	r1, 800f790 <__ascii_wctomb+0x18>
 800f77e:	2aff      	cmp	r2, #255	@ 0xff
 800f780:	d904      	bls.n	800f78c <__ascii_wctomb+0x14>
 800f782:	228a      	movs	r2, #138	@ 0x8a
 800f784:	601a      	str	r2, [r3, #0]
 800f786:	f04f 30ff 	mov.w	r0, #4294967295
 800f78a:	4770      	bx	lr
 800f78c:	700a      	strb	r2, [r1, #0]
 800f78e:	2001      	movs	r0, #1
 800f790:	4770      	bx	lr
	...

0800f794 <fiprintf>:
 800f794:	b40e      	push	{r1, r2, r3}
 800f796:	b503      	push	{r0, r1, lr}
 800f798:	4601      	mov	r1, r0
 800f79a:	ab03      	add	r3, sp, #12
 800f79c:	4805      	ldr	r0, [pc, #20]	@ (800f7b4 <fiprintf+0x20>)
 800f79e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7a2:	6800      	ldr	r0, [r0, #0]
 800f7a4:	9301      	str	r3, [sp, #4]
 800f7a6:	f000 f837 	bl	800f818 <_vfiprintf_r>
 800f7aa:	b002      	add	sp, #8
 800f7ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7b0:	b003      	add	sp, #12
 800f7b2:	4770      	bx	lr
 800f7b4:	2000010c 	.word	0x2000010c

0800f7b8 <abort>:
 800f7b8:	b508      	push	{r3, lr}
 800f7ba:	2006      	movs	r0, #6
 800f7bc:	f000 fa00 	bl	800fbc0 <raise>
 800f7c0:	2001      	movs	r0, #1
 800f7c2:	f7f3 f8bd 	bl	8002940 <_exit>

0800f7c6 <__sfputc_r>:
 800f7c6:	6893      	ldr	r3, [r2, #8]
 800f7c8:	3b01      	subs	r3, #1
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	b410      	push	{r4}
 800f7ce:	6093      	str	r3, [r2, #8]
 800f7d0:	da08      	bge.n	800f7e4 <__sfputc_r+0x1e>
 800f7d2:	6994      	ldr	r4, [r2, #24]
 800f7d4:	42a3      	cmp	r3, r4
 800f7d6:	db01      	blt.n	800f7dc <__sfputc_r+0x16>
 800f7d8:	290a      	cmp	r1, #10
 800f7da:	d103      	bne.n	800f7e4 <__sfputc_r+0x1e>
 800f7dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7e0:	f000 b932 	b.w	800fa48 <__swbuf_r>
 800f7e4:	6813      	ldr	r3, [r2, #0]
 800f7e6:	1c58      	adds	r0, r3, #1
 800f7e8:	6010      	str	r0, [r2, #0]
 800f7ea:	7019      	strb	r1, [r3, #0]
 800f7ec:	4608      	mov	r0, r1
 800f7ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7f2:	4770      	bx	lr

0800f7f4 <__sfputs_r>:
 800f7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7f6:	4606      	mov	r6, r0
 800f7f8:	460f      	mov	r7, r1
 800f7fa:	4614      	mov	r4, r2
 800f7fc:	18d5      	adds	r5, r2, r3
 800f7fe:	42ac      	cmp	r4, r5
 800f800:	d101      	bne.n	800f806 <__sfputs_r+0x12>
 800f802:	2000      	movs	r0, #0
 800f804:	e007      	b.n	800f816 <__sfputs_r+0x22>
 800f806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f80a:	463a      	mov	r2, r7
 800f80c:	4630      	mov	r0, r6
 800f80e:	f7ff ffda 	bl	800f7c6 <__sfputc_r>
 800f812:	1c43      	adds	r3, r0, #1
 800f814:	d1f3      	bne.n	800f7fe <__sfputs_r+0xa>
 800f816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f818 <_vfiprintf_r>:
 800f818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f81c:	460d      	mov	r5, r1
 800f81e:	b09d      	sub	sp, #116	@ 0x74
 800f820:	4614      	mov	r4, r2
 800f822:	4698      	mov	r8, r3
 800f824:	4606      	mov	r6, r0
 800f826:	b118      	cbz	r0, 800f830 <_vfiprintf_r+0x18>
 800f828:	6a03      	ldr	r3, [r0, #32]
 800f82a:	b90b      	cbnz	r3, 800f830 <_vfiprintf_r+0x18>
 800f82c:	f7fe face 	bl	800ddcc <__sinit>
 800f830:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f832:	07d9      	lsls	r1, r3, #31
 800f834:	d405      	bmi.n	800f842 <_vfiprintf_r+0x2a>
 800f836:	89ab      	ldrh	r3, [r5, #12]
 800f838:	059a      	lsls	r2, r3, #22
 800f83a:	d402      	bmi.n	800f842 <_vfiprintf_r+0x2a>
 800f83c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f83e:	f7fe fbbc 	bl	800dfba <__retarget_lock_acquire_recursive>
 800f842:	89ab      	ldrh	r3, [r5, #12]
 800f844:	071b      	lsls	r3, r3, #28
 800f846:	d501      	bpl.n	800f84c <_vfiprintf_r+0x34>
 800f848:	692b      	ldr	r3, [r5, #16]
 800f84a:	b99b      	cbnz	r3, 800f874 <_vfiprintf_r+0x5c>
 800f84c:	4629      	mov	r1, r5
 800f84e:	4630      	mov	r0, r6
 800f850:	f000 f938 	bl	800fac4 <__swsetup_r>
 800f854:	b170      	cbz	r0, 800f874 <_vfiprintf_r+0x5c>
 800f856:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f858:	07dc      	lsls	r4, r3, #31
 800f85a:	d504      	bpl.n	800f866 <_vfiprintf_r+0x4e>
 800f85c:	f04f 30ff 	mov.w	r0, #4294967295
 800f860:	b01d      	add	sp, #116	@ 0x74
 800f862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f866:	89ab      	ldrh	r3, [r5, #12]
 800f868:	0598      	lsls	r0, r3, #22
 800f86a:	d4f7      	bmi.n	800f85c <_vfiprintf_r+0x44>
 800f86c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f86e:	f7fe fba5 	bl	800dfbc <__retarget_lock_release_recursive>
 800f872:	e7f3      	b.n	800f85c <_vfiprintf_r+0x44>
 800f874:	2300      	movs	r3, #0
 800f876:	9309      	str	r3, [sp, #36]	@ 0x24
 800f878:	2320      	movs	r3, #32
 800f87a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f87e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f882:	2330      	movs	r3, #48	@ 0x30
 800f884:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fa34 <_vfiprintf_r+0x21c>
 800f888:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f88c:	f04f 0901 	mov.w	r9, #1
 800f890:	4623      	mov	r3, r4
 800f892:	469a      	mov	sl, r3
 800f894:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f898:	b10a      	cbz	r2, 800f89e <_vfiprintf_r+0x86>
 800f89a:	2a25      	cmp	r2, #37	@ 0x25
 800f89c:	d1f9      	bne.n	800f892 <_vfiprintf_r+0x7a>
 800f89e:	ebba 0b04 	subs.w	fp, sl, r4
 800f8a2:	d00b      	beq.n	800f8bc <_vfiprintf_r+0xa4>
 800f8a4:	465b      	mov	r3, fp
 800f8a6:	4622      	mov	r2, r4
 800f8a8:	4629      	mov	r1, r5
 800f8aa:	4630      	mov	r0, r6
 800f8ac:	f7ff ffa2 	bl	800f7f4 <__sfputs_r>
 800f8b0:	3001      	adds	r0, #1
 800f8b2:	f000 80a7 	beq.w	800fa04 <_vfiprintf_r+0x1ec>
 800f8b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f8b8:	445a      	add	r2, fp
 800f8ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800f8bc:	f89a 3000 	ldrb.w	r3, [sl]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	f000 809f 	beq.w	800fa04 <_vfiprintf_r+0x1ec>
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800f8cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8d0:	f10a 0a01 	add.w	sl, sl, #1
 800f8d4:	9304      	str	r3, [sp, #16]
 800f8d6:	9307      	str	r3, [sp, #28]
 800f8d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f8dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800f8de:	4654      	mov	r4, sl
 800f8e0:	2205      	movs	r2, #5
 800f8e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8e6:	4853      	ldr	r0, [pc, #332]	@ (800fa34 <_vfiprintf_r+0x21c>)
 800f8e8:	f7f0 fc72 	bl	80001d0 <memchr>
 800f8ec:	9a04      	ldr	r2, [sp, #16]
 800f8ee:	b9d8      	cbnz	r0, 800f928 <_vfiprintf_r+0x110>
 800f8f0:	06d1      	lsls	r1, r2, #27
 800f8f2:	bf44      	itt	mi
 800f8f4:	2320      	movmi	r3, #32
 800f8f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f8fa:	0713      	lsls	r3, r2, #28
 800f8fc:	bf44      	itt	mi
 800f8fe:	232b      	movmi	r3, #43	@ 0x2b
 800f900:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f904:	f89a 3000 	ldrb.w	r3, [sl]
 800f908:	2b2a      	cmp	r3, #42	@ 0x2a
 800f90a:	d015      	beq.n	800f938 <_vfiprintf_r+0x120>
 800f90c:	9a07      	ldr	r2, [sp, #28]
 800f90e:	4654      	mov	r4, sl
 800f910:	2000      	movs	r0, #0
 800f912:	f04f 0c0a 	mov.w	ip, #10
 800f916:	4621      	mov	r1, r4
 800f918:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f91c:	3b30      	subs	r3, #48	@ 0x30
 800f91e:	2b09      	cmp	r3, #9
 800f920:	d94b      	bls.n	800f9ba <_vfiprintf_r+0x1a2>
 800f922:	b1b0      	cbz	r0, 800f952 <_vfiprintf_r+0x13a>
 800f924:	9207      	str	r2, [sp, #28]
 800f926:	e014      	b.n	800f952 <_vfiprintf_r+0x13a>
 800f928:	eba0 0308 	sub.w	r3, r0, r8
 800f92c:	fa09 f303 	lsl.w	r3, r9, r3
 800f930:	4313      	orrs	r3, r2
 800f932:	9304      	str	r3, [sp, #16]
 800f934:	46a2      	mov	sl, r4
 800f936:	e7d2      	b.n	800f8de <_vfiprintf_r+0xc6>
 800f938:	9b03      	ldr	r3, [sp, #12]
 800f93a:	1d19      	adds	r1, r3, #4
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	9103      	str	r1, [sp, #12]
 800f940:	2b00      	cmp	r3, #0
 800f942:	bfbb      	ittet	lt
 800f944:	425b      	neglt	r3, r3
 800f946:	f042 0202 	orrlt.w	r2, r2, #2
 800f94a:	9307      	strge	r3, [sp, #28]
 800f94c:	9307      	strlt	r3, [sp, #28]
 800f94e:	bfb8      	it	lt
 800f950:	9204      	strlt	r2, [sp, #16]
 800f952:	7823      	ldrb	r3, [r4, #0]
 800f954:	2b2e      	cmp	r3, #46	@ 0x2e
 800f956:	d10a      	bne.n	800f96e <_vfiprintf_r+0x156>
 800f958:	7863      	ldrb	r3, [r4, #1]
 800f95a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f95c:	d132      	bne.n	800f9c4 <_vfiprintf_r+0x1ac>
 800f95e:	9b03      	ldr	r3, [sp, #12]
 800f960:	1d1a      	adds	r2, r3, #4
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	9203      	str	r2, [sp, #12]
 800f966:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f96a:	3402      	adds	r4, #2
 800f96c:	9305      	str	r3, [sp, #20]
 800f96e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fa44 <_vfiprintf_r+0x22c>
 800f972:	7821      	ldrb	r1, [r4, #0]
 800f974:	2203      	movs	r2, #3
 800f976:	4650      	mov	r0, sl
 800f978:	f7f0 fc2a 	bl	80001d0 <memchr>
 800f97c:	b138      	cbz	r0, 800f98e <_vfiprintf_r+0x176>
 800f97e:	9b04      	ldr	r3, [sp, #16]
 800f980:	eba0 000a 	sub.w	r0, r0, sl
 800f984:	2240      	movs	r2, #64	@ 0x40
 800f986:	4082      	lsls	r2, r0
 800f988:	4313      	orrs	r3, r2
 800f98a:	3401      	adds	r4, #1
 800f98c:	9304      	str	r3, [sp, #16]
 800f98e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f992:	4829      	ldr	r0, [pc, #164]	@ (800fa38 <_vfiprintf_r+0x220>)
 800f994:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f998:	2206      	movs	r2, #6
 800f99a:	f7f0 fc19 	bl	80001d0 <memchr>
 800f99e:	2800      	cmp	r0, #0
 800f9a0:	d03f      	beq.n	800fa22 <_vfiprintf_r+0x20a>
 800f9a2:	4b26      	ldr	r3, [pc, #152]	@ (800fa3c <_vfiprintf_r+0x224>)
 800f9a4:	bb1b      	cbnz	r3, 800f9ee <_vfiprintf_r+0x1d6>
 800f9a6:	9b03      	ldr	r3, [sp, #12]
 800f9a8:	3307      	adds	r3, #7
 800f9aa:	f023 0307 	bic.w	r3, r3, #7
 800f9ae:	3308      	adds	r3, #8
 800f9b0:	9303      	str	r3, [sp, #12]
 800f9b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9b4:	443b      	add	r3, r7
 800f9b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9b8:	e76a      	b.n	800f890 <_vfiprintf_r+0x78>
 800f9ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9be:	460c      	mov	r4, r1
 800f9c0:	2001      	movs	r0, #1
 800f9c2:	e7a8      	b.n	800f916 <_vfiprintf_r+0xfe>
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	3401      	adds	r4, #1
 800f9c8:	9305      	str	r3, [sp, #20]
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	f04f 0c0a 	mov.w	ip, #10
 800f9d0:	4620      	mov	r0, r4
 800f9d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9d6:	3a30      	subs	r2, #48	@ 0x30
 800f9d8:	2a09      	cmp	r2, #9
 800f9da:	d903      	bls.n	800f9e4 <_vfiprintf_r+0x1cc>
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d0c6      	beq.n	800f96e <_vfiprintf_r+0x156>
 800f9e0:	9105      	str	r1, [sp, #20]
 800f9e2:	e7c4      	b.n	800f96e <_vfiprintf_r+0x156>
 800f9e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9e8:	4604      	mov	r4, r0
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	e7f0      	b.n	800f9d0 <_vfiprintf_r+0x1b8>
 800f9ee:	ab03      	add	r3, sp, #12
 800f9f0:	9300      	str	r3, [sp, #0]
 800f9f2:	462a      	mov	r2, r5
 800f9f4:	4b12      	ldr	r3, [pc, #72]	@ (800fa40 <_vfiprintf_r+0x228>)
 800f9f6:	a904      	add	r1, sp, #16
 800f9f8:	4630      	mov	r0, r6
 800f9fa:	f7fd fda3 	bl	800d544 <_printf_float>
 800f9fe:	4607      	mov	r7, r0
 800fa00:	1c78      	adds	r0, r7, #1
 800fa02:	d1d6      	bne.n	800f9b2 <_vfiprintf_r+0x19a>
 800fa04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa06:	07d9      	lsls	r1, r3, #31
 800fa08:	d405      	bmi.n	800fa16 <_vfiprintf_r+0x1fe>
 800fa0a:	89ab      	ldrh	r3, [r5, #12]
 800fa0c:	059a      	lsls	r2, r3, #22
 800fa0e:	d402      	bmi.n	800fa16 <_vfiprintf_r+0x1fe>
 800fa10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa12:	f7fe fad3 	bl	800dfbc <__retarget_lock_release_recursive>
 800fa16:	89ab      	ldrh	r3, [r5, #12]
 800fa18:	065b      	lsls	r3, r3, #25
 800fa1a:	f53f af1f 	bmi.w	800f85c <_vfiprintf_r+0x44>
 800fa1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa20:	e71e      	b.n	800f860 <_vfiprintf_r+0x48>
 800fa22:	ab03      	add	r3, sp, #12
 800fa24:	9300      	str	r3, [sp, #0]
 800fa26:	462a      	mov	r2, r5
 800fa28:	4b05      	ldr	r3, [pc, #20]	@ (800fa40 <_vfiprintf_r+0x228>)
 800fa2a:	a904      	add	r1, sp, #16
 800fa2c:	4630      	mov	r0, r6
 800fa2e:	f7fe f821 	bl	800da74 <_printf_i>
 800fa32:	e7e4      	b.n	800f9fe <_vfiprintf_r+0x1e6>
 800fa34:	080106ef 	.word	0x080106ef
 800fa38:	080106f9 	.word	0x080106f9
 800fa3c:	0800d545 	.word	0x0800d545
 800fa40:	0800f7f5 	.word	0x0800f7f5
 800fa44:	080106f5 	.word	0x080106f5

0800fa48 <__swbuf_r>:
 800fa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa4a:	460e      	mov	r6, r1
 800fa4c:	4614      	mov	r4, r2
 800fa4e:	4605      	mov	r5, r0
 800fa50:	b118      	cbz	r0, 800fa5a <__swbuf_r+0x12>
 800fa52:	6a03      	ldr	r3, [r0, #32]
 800fa54:	b90b      	cbnz	r3, 800fa5a <__swbuf_r+0x12>
 800fa56:	f7fe f9b9 	bl	800ddcc <__sinit>
 800fa5a:	69a3      	ldr	r3, [r4, #24]
 800fa5c:	60a3      	str	r3, [r4, #8]
 800fa5e:	89a3      	ldrh	r3, [r4, #12]
 800fa60:	071a      	lsls	r2, r3, #28
 800fa62:	d501      	bpl.n	800fa68 <__swbuf_r+0x20>
 800fa64:	6923      	ldr	r3, [r4, #16]
 800fa66:	b943      	cbnz	r3, 800fa7a <__swbuf_r+0x32>
 800fa68:	4621      	mov	r1, r4
 800fa6a:	4628      	mov	r0, r5
 800fa6c:	f000 f82a 	bl	800fac4 <__swsetup_r>
 800fa70:	b118      	cbz	r0, 800fa7a <__swbuf_r+0x32>
 800fa72:	f04f 37ff 	mov.w	r7, #4294967295
 800fa76:	4638      	mov	r0, r7
 800fa78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa7a:	6823      	ldr	r3, [r4, #0]
 800fa7c:	6922      	ldr	r2, [r4, #16]
 800fa7e:	1a98      	subs	r0, r3, r2
 800fa80:	6963      	ldr	r3, [r4, #20]
 800fa82:	b2f6      	uxtb	r6, r6
 800fa84:	4283      	cmp	r3, r0
 800fa86:	4637      	mov	r7, r6
 800fa88:	dc05      	bgt.n	800fa96 <__swbuf_r+0x4e>
 800fa8a:	4621      	mov	r1, r4
 800fa8c:	4628      	mov	r0, r5
 800fa8e:	f7ff fde9 	bl	800f664 <_fflush_r>
 800fa92:	2800      	cmp	r0, #0
 800fa94:	d1ed      	bne.n	800fa72 <__swbuf_r+0x2a>
 800fa96:	68a3      	ldr	r3, [r4, #8]
 800fa98:	3b01      	subs	r3, #1
 800fa9a:	60a3      	str	r3, [r4, #8]
 800fa9c:	6823      	ldr	r3, [r4, #0]
 800fa9e:	1c5a      	adds	r2, r3, #1
 800faa0:	6022      	str	r2, [r4, #0]
 800faa2:	701e      	strb	r6, [r3, #0]
 800faa4:	6962      	ldr	r2, [r4, #20]
 800faa6:	1c43      	adds	r3, r0, #1
 800faa8:	429a      	cmp	r2, r3
 800faaa:	d004      	beq.n	800fab6 <__swbuf_r+0x6e>
 800faac:	89a3      	ldrh	r3, [r4, #12]
 800faae:	07db      	lsls	r3, r3, #31
 800fab0:	d5e1      	bpl.n	800fa76 <__swbuf_r+0x2e>
 800fab2:	2e0a      	cmp	r6, #10
 800fab4:	d1df      	bne.n	800fa76 <__swbuf_r+0x2e>
 800fab6:	4621      	mov	r1, r4
 800fab8:	4628      	mov	r0, r5
 800faba:	f7ff fdd3 	bl	800f664 <_fflush_r>
 800fabe:	2800      	cmp	r0, #0
 800fac0:	d0d9      	beq.n	800fa76 <__swbuf_r+0x2e>
 800fac2:	e7d6      	b.n	800fa72 <__swbuf_r+0x2a>

0800fac4 <__swsetup_r>:
 800fac4:	b538      	push	{r3, r4, r5, lr}
 800fac6:	4b29      	ldr	r3, [pc, #164]	@ (800fb6c <__swsetup_r+0xa8>)
 800fac8:	4605      	mov	r5, r0
 800faca:	6818      	ldr	r0, [r3, #0]
 800facc:	460c      	mov	r4, r1
 800face:	b118      	cbz	r0, 800fad8 <__swsetup_r+0x14>
 800fad0:	6a03      	ldr	r3, [r0, #32]
 800fad2:	b90b      	cbnz	r3, 800fad8 <__swsetup_r+0x14>
 800fad4:	f7fe f97a 	bl	800ddcc <__sinit>
 800fad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fadc:	0719      	lsls	r1, r3, #28
 800fade:	d422      	bmi.n	800fb26 <__swsetup_r+0x62>
 800fae0:	06da      	lsls	r2, r3, #27
 800fae2:	d407      	bmi.n	800faf4 <__swsetup_r+0x30>
 800fae4:	2209      	movs	r2, #9
 800fae6:	602a      	str	r2, [r5, #0]
 800fae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800faec:	81a3      	strh	r3, [r4, #12]
 800faee:	f04f 30ff 	mov.w	r0, #4294967295
 800faf2:	e033      	b.n	800fb5c <__swsetup_r+0x98>
 800faf4:	0758      	lsls	r0, r3, #29
 800faf6:	d512      	bpl.n	800fb1e <__swsetup_r+0x5a>
 800faf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fafa:	b141      	cbz	r1, 800fb0e <__swsetup_r+0x4a>
 800fafc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb00:	4299      	cmp	r1, r3
 800fb02:	d002      	beq.n	800fb0a <__swsetup_r+0x46>
 800fb04:	4628      	mov	r0, r5
 800fb06:	f7ff f8a7 	bl	800ec58 <_free_r>
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb0e:	89a3      	ldrh	r3, [r4, #12]
 800fb10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fb14:	81a3      	strh	r3, [r4, #12]
 800fb16:	2300      	movs	r3, #0
 800fb18:	6063      	str	r3, [r4, #4]
 800fb1a:	6923      	ldr	r3, [r4, #16]
 800fb1c:	6023      	str	r3, [r4, #0]
 800fb1e:	89a3      	ldrh	r3, [r4, #12]
 800fb20:	f043 0308 	orr.w	r3, r3, #8
 800fb24:	81a3      	strh	r3, [r4, #12]
 800fb26:	6923      	ldr	r3, [r4, #16]
 800fb28:	b94b      	cbnz	r3, 800fb3e <__swsetup_r+0x7a>
 800fb2a:	89a3      	ldrh	r3, [r4, #12]
 800fb2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fb30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb34:	d003      	beq.n	800fb3e <__swsetup_r+0x7a>
 800fb36:	4621      	mov	r1, r4
 800fb38:	4628      	mov	r0, r5
 800fb3a:	f000 f883 	bl	800fc44 <__smakebuf_r>
 800fb3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb42:	f013 0201 	ands.w	r2, r3, #1
 800fb46:	d00a      	beq.n	800fb5e <__swsetup_r+0x9a>
 800fb48:	2200      	movs	r2, #0
 800fb4a:	60a2      	str	r2, [r4, #8]
 800fb4c:	6962      	ldr	r2, [r4, #20]
 800fb4e:	4252      	negs	r2, r2
 800fb50:	61a2      	str	r2, [r4, #24]
 800fb52:	6922      	ldr	r2, [r4, #16]
 800fb54:	b942      	cbnz	r2, 800fb68 <__swsetup_r+0xa4>
 800fb56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fb5a:	d1c5      	bne.n	800fae8 <__swsetup_r+0x24>
 800fb5c:	bd38      	pop	{r3, r4, r5, pc}
 800fb5e:	0799      	lsls	r1, r3, #30
 800fb60:	bf58      	it	pl
 800fb62:	6962      	ldrpl	r2, [r4, #20]
 800fb64:	60a2      	str	r2, [r4, #8]
 800fb66:	e7f4      	b.n	800fb52 <__swsetup_r+0x8e>
 800fb68:	2000      	movs	r0, #0
 800fb6a:	e7f7      	b.n	800fb5c <__swsetup_r+0x98>
 800fb6c:	2000010c 	.word	0x2000010c

0800fb70 <_raise_r>:
 800fb70:	291f      	cmp	r1, #31
 800fb72:	b538      	push	{r3, r4, r5, lr}
 800fb74:	4605      	mov	r5, r0
 800fb76:	460c      	mov	r4, r1
 800fb78:	d904      	bls.n	800fb84 <_raise_r+0x14>
 800fb7a:	2316      	movs	r3, #22
 800fb7c:	6003      	str	r3, [r0, #0]
 800fb7e:	f04f 30ff 	mov.w	r0, #4294967295
 800fb82:	bd38      	pop	{r3, r4, r5, pc}
 800fb84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fb86:	b112      	cbz	r2, 800fb8e <_raise_r+0x1e>
 800fb88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fb8c:	b94b      	cbnz	r3, 800fba2 <_raise_r+0x32>
 800fb8e:	4628      	mov	r0, r5
 800fb90:	f000 f830 	bl	800fbf4 <_getpid_r>
 800fb94:	4622      	mov	r2, r4
 800fb96:	4601      	mov	r1, r0
 800fb98:	4628      	mov	r0, r5
 800fb9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb9e:	f000 b817 	b.w	800fbd0 <_kill_r>
 800fba2:	2b01      	cmp	r3, #1
 800fba4:	d00a      	beq.n	800fbbc <_raise_r+0x4c>
 800fba6:	1c59      	adds	r1, r3, #1
 800fba8:	d103      	bne.n	800fbb2 <_raise_r+0x42>
 800fbaa:	2316      	movs	r3, #22
 800fbac:	6003      	str	r3, [r0, #0]
 800fbae:	2001      	movs	r0, #1
 800fbb0:	e7e7      	b.n	800fb82 <_raise_r+0x12>
 800fbb2:	2100      	movs	r1, #0
 800fbb4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fbb8:	4620      	mov	r0, r4
 800fbba:	4798      	blx	r3
 800fbbc:	2000      	movs	r0, #0
 800fbbe:	e7e0      	b.n	800fb82 <_raise_r+0x12>

0800fbc0 <raise>:
 800fbc0:	4b02      	ldr	r3, [pc, #8]	@ (800fbcc <raise+0xc>)
 800fbc2:	4601      	mov	r1, r0
 800fbc4:	6818      	ldr	r0, [r3, #0]
 800fbc6:	f7ff bfd3 	b.w	800fb70 <_raise_r>
 800fbca:	bf00      	nop
 800fbcc:	2000010c 	.word	0x2000010c

0800fbd0 <_kill_r>:
 800fbd0:	b538      	push	{r3, r4, r5, lr}
 800fbd2:	4d07      	ldr	r5, [pc, #28]	@ (800fbf0 <_kill_r+0x20>)
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	4604      	mov	r4, r0
 800fbd8:	4608      	mov	r0, r1
 800fbda:	4611      	mov	r1, r2
 800fbdc:	602b      	str	r3, [r5, #0]
 800fbde:	f7f2 fe9f 	bl	8002920 <_kill>
 800fbe2:	1c43      	adds	r3, r0, #1
 800fbe4:	d102      	bne.n	800fbec <_kill_r+0x1c>
 800fbe6:	682b      	ldr	r3, [r5, #0]
 800fbe8:	b103      	cbz	r3, 800fbec <_kill_r+0x1c>
 800fbea:	6023      	str	r3, [r4, #0]
 800fbec:	bd38      	pop	{r3, r4, r5, pc}
 800fbee:	bf00      	nop
 800fbf0:	200024d8 	.word	0x200024d8

0800fbf4 <_getpid_r>:
 800fbf4:	f7f2 be8c 	b.w	8002910 <_getpid>

0800fbf8 <__swhatbuf_r>:
 800fbf8:	b570      	push	{r4, r5, r6, lr}
 800fbfa:	460c      	mov	r4, r1
 800fbfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc00:	2900      	cmp	r1, #0
 800fc02:	b096      	sub	sp, #88	@ 0x58
 800fc04:	4615      	mov	r5, r2
 800fc06:	461e      	mov	r6, r3
 800fc08:	da0d      	bge.n	800fc26 <__swhatbuf_r+0x2e>
 800fc0a:	89a3      	ldrh	r3, [r4, #12]
 800fc0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fc10:	f04f 0100 	mov.w	r1, #0
 800fc14:	bf14      	ite	ne
 800fc16:	2340      	movne	r3, #64	@ 0x40
 800fc18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fc1c:	2000      	movs	r0, #0
 800fc1e:	6031      	str	r1, [r6, #0]
 800fc20:	602b      	str	r3, [r5, #0]
 800fc22:	b016      	add	sp, #88	@ 0x58
 800fc24:	bd70      	pop	{r4, r5, r6, pc}
 800fc26:	466a      	mov	r2, sp
 800fc28:	f000 f848 	bl	800fcbc <_fstat_r>
 800fc2c:	2800      	cmp	r0, #0
 800fc2e:	dbec      	blt.n	800fc0a <__swhatbuf_r+0x12>
 800fc30:	9901      	ldr	r1, [sp, #4]
 800fc32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fc36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fc3a:	4259      	negs	r1, r3
 800fc3c:	4159      	adcs	r1, r3
 800fc3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc42:	e7eb      	b.n	800fc1c <__swhatbuf_r+0x24>

0800fc44 <__smakebuf_r>:
 800fc44:	898b      	ldrh	r3, [r1, #12]
 800fc46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc48:	079d      	lsls	r5, r3, #30
 800fc4a:	4606      	mov	r6, r0
 800fc4c:	460c      	mov	r4, r1
 800fc4e:	d507      	bpl.n	800fc60 <__smakebuf_r+0x1c>
 800fc50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fc54:	6023      	str	r3, [r4, #0]
 800fc56:	6123      	str	r3, [r4, #16]
 800fc58:	2301      	movs	r3, #1
 800fc5a:	6163      	str	r3, [r4, #20]
 800fc5c:	b003      	add	sp, #12
 800fc5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc60:	ab01      	add	r3, sp, #4
 800fc62:	466a      	mov	r2, sp
 800fc64:	f7ff ffc8 	bl	800fbf8 <__swhatbuf_r>
 800fc68:	9f00      	ldr	r7, [sp, #0]
 800fc6a:	4605      	mov	r5, r0
 800fc6c:	4639      	mov	r1, r7
 800fc6e:	4630      	mov	r0, r6
 800fc70:	f7ff f866 	bl	800ed40 <_malloc_r>
 800fc74:	b948      	cbnz	r0, 800fc8a <__smakebuf_r+0x46>
 800fc76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc7a:	059a      	lsls	r2, r3, #22
 800fc7c:	d4ee      	bmi.n	800fc5c <__smakebuf_r+0x18>
 800fc7e:	f023 0303 	bic.w	r3, r3, #3
 800fc82:	f043 0302 	orr.w	r3, r3, #2
 800fc86:	81a3      	strh	r3, [r4, #12]
 800fc88:	e7e2      	b.n	800fc50 <__smakebuf_r+0xc>
 800fc8a:	89a3      	ldrh	r3, [r4, #12]
 800fc8c:	6020      	str	r0, [r4, #0]
 800fc8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc92:	81a3      	strh	r3, [r4, #12]
 800fc94:	9b01      	ldr	r3, [sp, #4]
 800fc96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fc9a:	b15b      	cbz	r3, 800fcb4 <__smakebuf_r+0x70>
 800fc9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fca0:	4630      	mov	r0, r6
 800fca2:	f000 f81d 	bl	800fce0 <_isatty_r>
 800fca6:	b128      	cbz	r0, 800fcb4 <__smakebuf_r+0x70>
 800fca8:	89a3      	ldrh	r3, [r4, #12]
 800fcaa:	f023 0303 	bic.w	r3, r3, #3
 800fcae:	f043 0301 	orr.w	r3, r3, #1
 800fcb2:	81a3      	strh	r3, [r4, #12]
 800fcb4:	89a3      	ldrh	r3, [r4, #12]
 800fcb6:	431d      	orrs	r5, r3
 800fcb8:	81a5      	strh	r5, [r4, #12]
 800fcba:	e7cf      	b.n	800fc5c <__smakebuf_r+0x18>

0800fcbc <_fstat_r>:
 800fcbc:	b538      	push	{r3, r4, r5, lr}
 800fcbe:	4d07      	ldr	r5, [pc, #28]	@ (800fcdc <_fstat_r+0x20>)
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	4604      	mov	r4, r0
 800fcc4:	4608      	mov	r0, r1
 800fcc6:	4611      	mov	r1, r2
 800fcc8:	602b      	str	r3, [r5, #0]
 800fcca:	f7f2 fe89 	bl	80029e0 <_fstat>
 800fcce:	1c43      	adds	r3, r0, #1
 800fcd0:	d102      	bne.n	800fcd8 <_fstat_r+0x1c>
 800fcd2:	682b      	ldr	r3, [r5, #0]
 800fcd4:	b103      	cbz	r3, 800fcd8 <_fstat_r+0x1c>
 800fcd6:	6023      	str	r3, [r4, #0]
 800fcd8:	bd38      	pop	{r3, r4, r5, pc}
 800fcda:	bf00      	nop
 800fcdc:	200024d8 	.word	0x200024d8

0800fce0 <_isatty_r>:
 800fce0:	b538      	push	{r3, r4, r5, lr}
 800fce2:	4d06      	ldr	r5, [pc, #24]	@ (800fcfc <_isatty_r+0x1c>)
 800fce4:	2300      	movs	r3, #0
 800fce6:	4604      	mov	r4, r0
 800fce8:	4608      	mov	r0, r1
 800fcea:	602b      	str	r3, [r5, #0]
 800fcec:	f7f2 fe88 	bl	8002a00 <_isatty>
 800fcf0:	1c43      	adds	r3, r0, #1
 800fcf2:	d102      	bne.n	800fcfa <_isatty_r+0x1a>
 800fcf4:	682b      	ldr	r3, [r5, #0]
 800fcf6:	b103      	cbz	r3, 800fcfa <_isatty_r+0x1a>
 800fcf8:	6023      	str	r3, [r4, #0]
 800fcfa:	bd38      	pop	{r3, r4, r5, pc}
 800fcfc:	200024d8 	.word	0x200024d8

0800fd00 <log>:
 800fd00:	b538      	push	{r3, r4, r5, lr}
 800fd02:	ed2d 8b02 	vpush	{d8}
 800fd06:	ec55 4b10 	vmov	r4, r5, d0
 800fd0a:	f000 f949 	bl	800ffa0 <__ieee754_log>
 800fd0e:	4622      	mov	r2, r4
 800fd10:	462b      	mov	r3, r5
 800fd12:	4620      	mov	r0, r4
 800fd14:	4629      	mov	r1, r5
 800fd16:	eeb0 8a40 	vmov.f32	s16, s0
 800fd1a:	eef0 8a60 	vmov.f32	s17, s1
 800fd1e:	f7f0 ff05 	bl	8000b2c <__aeabi_dcmpun>
 800fd22:	b998      	cbnz	r0, 800fd4c <log+0x4c>
 800fd24:	2200      	movs	r2, #0
 800fd26:	2300      	movs	r3, #0
 800fd28:	4620      	mov	r0, r4
 800fd2a:	4629      	mov	r1, r5
 800fd2c:	f7f0 fef4 	bl	8000b18 <__aeabi_dcmpgt>
 800fd30:	b960      	cbnz	r0, 800fd4c <log+0x4c>
 800fd32:	2200      	movs	r2, #0
 800fd34:	2300      	movs	r3, #0
 800fd36:	4620      	mov	r0, r4
 800fd38:	4629      	mov	r1, r5
 800fd3a:	f7f0 fec5 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd3e:	b160      	cbz	r0, 800fd5a <log+0x5a>
 800fd40:	f7fe f910 	bl	800df64 <__errno>
 800fd44:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800fd70 <log+0x70>
 800fd48:	2322      	movs	r3, #34	@ 0x22
 800fd4a:	6003      	str	r3, [r0, #0]
 800fd4c:	eeb0 0a48 	vmov.f32	s0, s16
 800fd50:	eef0 0a68 	vmov.f32	s1, s17
 800fd54:	ecbd 8b02 	vpop	{d8}
 800fd58:	bd38      	pop	{r3, r4, r5, pc}
 800fd5a:	f7fe f903 	bl	800df64 <__errno>
 800fd5e:	ecbd 8b02 	vpop	{d8}
 800fd62:	2321      	movs	r3, #33	@ 0x21
 800fd64:	6003      	str	r3, [r0, #0]
 800fd66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd6a:	4803      	ldr	r0, [pc, #12]	@ (800fd78 <log+0x78>)
 800fd6c:	f000 b834 	b.w	800fdd8 <nan>
 800fd70:	00000000 	.word	0x00000000
 800fd74:	fff00000 	.word	0xfff00000
 800fd78:	080105ed 	.word	0x080105ed

0800fd7c <sqrt>:
 800fd7c:	b538      	push	{r3, r4, r5, lr}
 800fd7e:	ed2d 8b02 	vpush	{d8}
 800fd82:	ec55 4b10 	vmov	r4, r5, d0
 800fd86:	f000 f82f 	bl	800fde8 <__ieee754_sqrt>
 800fd8a:	4622      	mov	r2, r4
 800fd8c:	462b      	mov	r3, r5
 800fd8e:	4620      	mov	r0, r4
 800fd90:	4629      	mov	r1, r5
 800fd92:	eeb0 8a40 	vmov.f32	s16, s0
 800fd96:	eef0 8a60 	vmov.f32	s17, s1
 800fd9a:	f7f0 fec7 	bl	8000b2c <__aeabi_dcmpun>
 800fd9e:	b990      	cbnz	r0, 800fdc6 <sqrt+0x4a>
 800fda0:	2200      	movs	r2, #0
 800fda2:	2300      	movs	r3, #0
 800fda4:	4620      	mov	r0, r4
 800fda6:	4629      	mov	r1, r5
 800fda8:	f7f0 fe98 	bl	8000adc <__aeabi_dcmplt>
 800fdac:	b158      	cbz	r0, 800fdc6 <sqrt+0x4a>
 800fdae:	f7fe f8d9 	bl	800df64 <__errno>
 800fdb2:	2321      	movs	r3, #33	@ 0x21
 800fdb4:	6003      	str	r3, [r0, #0]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	2300      	movs	r3, #0
 800fdba:	4610      	mov	r0, r2
 800fdbc:	4619      	mov	r1, r3
 800fdbe:	f7f0 fd45 	bl	800084c <__aeabi_ddiv>
 800fdc2:	ec41 0b18 	vmov	d8, r0, r1
 800fdc6:	eeb0 0a48 	vmov.f32	s0, s16
 800fdca:	eef0 0a68 	vmov.f32	s1, s17
 800fdce:	ecbd 8b02 	vpop	{d8}
 800fdd2:	bd38      	pop	{r3, r4, r5, pc}
 800fdd4:	0000      	movs	r0, r0
	...

0800fdd8 <nan>:
 800fdd8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fde0 <nan+0x8>
 800fddc:	4770      	bx	lr
 800fdde:	bf00      	nop
 800fde0:	00000000 	.word	0x00000000
 800fde4:	7ff80000 	.word	0x7ff80000

0800fde8 <__ieee754_sqrt>:
 800fde8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdec:	4a68      	ldr	r2, [pc, #416]	@ (800ff90 <__ieee754_sqrt+0x1a8>)
 800fdee:	ec55 4b10 	vmov	r4, r5, d0
 800fdf2:	43aa      	bics	r2, r5
 800fdf4:	462b      	mov	r3, r5
 800fdf6:	4621      	mov	r1, r4
 800fdf8:	d110      	bne.n	800fe1c <__ieee754_sqrt+0x34>
 800fdfa:	4622      	mov	r2, r4
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	4629      	mov	r1, r5
 800fe00:	f7f0 fbfa 	bl	80005f8 <__aeabi_dmul>
 800fe04:	4602      	mov	r2, r0
 800fe06:	460b      	mov	r3, r1
 800fe08:	4620      	mov	r0, r4
 800fe0a:	4629      	mov	r1, r5
 800fe0c:	f7f0 fa3e 	bl	800028c <__adddf3>
 800fe10:	4604      	mov	r4, r0
 800fe12:	460d      	mov	r5, r1
 800fe14:	ec45 4b10 	vmov	d0, r4, r5
 800fe18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe1c:	2d00      	cmp	r5, #0
 800fe1e:	dc0e      	bgt.n	800fe3e <__ieee754_sqrt+0x56>
 800fe20:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800fe24:	4322      	orrs	r2, r4
 800fe26:	d0f5      	beq.n	800fe14 <__ieee754_sqrt+0x2c>
 800fe28:	b19d      	cbz	r5, 800fe52 <__ieee754_sqrt+0x6a>
 800fe2a:	4622      	mov	r2, r4
 800fe2c:	4620      	mov	r0, r4
 800fe2e:	4629      	mov	r1, r5
 800fe30:	f7f0 fa2a 	bl	8000288 <__aeabi_dsub>
 800fe34:	4602      	mov	r2, r0
 800fe36:	460b      	mov	r3, r1
 800fe38:	f7f0 fd08 	bl	800084c <__aeabi_ddiv>
 800fe3c:	e7e8      	b.n	800fe10 <__ieee754_sqrt+0x28>
 800fe3e:	152a      	asrs	r2, r5, #20
 800fe40:	d115      	bne.n	800fe6e <__ieee754_sqrt+0x86>
 800fe42:	2000      	movs	r0, #0
 800fe44:	e009      	b.n	800fe5a <__ieee754_sqrt+0x72>
 800fe46:	0acb      	lsrs	r3, r1, #11
 800fe48:	3a15      	subs	r2, #21
 800fe4a:	0549      	lsls	r1, r1, #21
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d0fa      	beq.n	800fe46 <__ieee754_sqrt+0x5e>
 800fe50:	e7f7      	b.n	800fe42 <__ieee754_sqrt+0x5a>
 800fe52:	462a      	mov	r2, r5
 800fe54:	e7fa      	b.n	800fe4c <__ieee754_sqrt+0x64>
 800fe56:	005b      	lsls	r3, r3, #1
 800fe58:	3001      	adds	r0, #1
 800fe5a:	02dc      	lsls	r4, r3, #11
 800fe5c:	d5fb      	bpl.n	800fe56 <__ieee754_sqrt+0x6e>
 800fe5e:	1e44      	subs	r4, r0, #1
 800fe60:	1b12      	subs	r2, r2, r4
 800fe62:	f1c0 0420 	rsb	r4, r0, #32
 800fe66:	fa21 f404 	lsr.w	r4, r1, r4
 800fe6a:	4323      	orrs	r3, r4
 800fe6c:	4081      	lsls	r1, r0
 800fe6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe72:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800fe76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fe7a:	07d2      	lsls	r2, r2, #31
 800fe7c:	bf5c      	itt	pl
 800fe7e:	005b      	lslpl	r3, r3, #1
 800fe80:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800fe84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fe88:	bf58      	it	pl
 800fe8a:	0049      	lslpl	r1, r1, #1
 800fe8c:	2600      	movs	r6, #0
 800fe8e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800fe92:	106d      	asrs	r5, r5, #1
 800fe94:	0049      	lsls	r1, r1, #1
 800fe96:	2016      	movs	r0, #22
 800fe98:	4632      	mov	r2, r6
 800fe9a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800fe9e:	1917      	adds	r7, r2, r4
 800fea0:	429f      	cmp	r7, r3
 800fea2:	bfde      	ittt	le
 800fea4:	193a      	addle	r2, r7, r4
 800fea6:	1bdb      	suble	r3, r3, r7
 800fea8:	1936      	addle	r6, r6, r4
 800feaa:	0fcf      	lsrs	r7, r1, #31
 800feac:	3801      	subs	r0, #1
 800feae:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800feb2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800feb6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800feba:	d1f0      	bne.n	800fe9e <__ieee754_sqrt+0xb6>
 800febc:	4604      	mov	r4, r0
 800febe:	2720      	movs	r7, #32
 800fec0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800fec4:	429a      	cmp	r2, r3
 800fec6:	eb00 0e0c 	add.w	lr, r0, ip
 800feca:	db02      	blt.n	800fed2 <__ieee754_sqrt+0xea>
 800fecc:	d113      	bne.n	800fef6 <__ieee754_sqrt+0x10e>
 800fece:	458e      	cmp	lr, r1
 800fed0:	d811      	bhi.n	800fef6 <__ieee754_sqrt+0x10e>
 800fed2:	f1be 0f00 	cmp.w	lr, #0
 800fed6:	eb0e 000c 	add.w	r0, lr, ip
 800feda:	da42      	bge.n	800ff62 <__ieee754_sqrt+0x17a>
 800fedc:	2800      	cmp	r0, #0
 800fede:	db40      	blt.n	800ff62 <__ieee754_sqrt+0x17a>
 800fee0:	f102 0801 	add.w	r8, r2, #1
 800fee4:	1a9b      	subs	r3, r3, r2
 800fee6:	458e      	cmp	lr, r1
 800fee8:	bf88      	it	hi
 800feea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800feee:	eba1 010e 	sub.w	r1, r1, lr
 800fef2:	4464      	add	r4, ip
 800fef4:	4642      	mov	r2, r8
 800fef6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800fefa:	3f01      	subs	r7, #1
 800fefc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ff00:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ff04:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ff08:	d1dc      	bne.n	800fec4 <__ieee754_sqrt+0xdc>
 800ff0a:	4319      	orrs	r1, r3
 800ff0c:	d01b      	beq.n	800ff46 <__ieee754_sqrt+0x15e>
 800ff0e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ff94 <__ieee754_sqrt+0x1ac>
 800ff12:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ff98 <__ieee754_sqrt+0x1b0>
 800ff16:	e9da 0100 	ldrd	r0, r1, [sl]
 800ff1a:	e9db 2300 	ldrd	r2, r3, [fp]
 800ff1e:	f7f0 f9b3 	bl	8000288 <__aeabi_dsub>
 800ff22:	e9da 8900 	ldrd	r8, r9, [sl]
 800ff26:	4602      	mov	r2, r0
 800ff28:	460b      	mov	r3, r1
 800ff2a:	4640      	mov	r0, r8
 800ff2c:	4649      	mov	r1, r9
 800ff2e:	f7f0 fddf 	bl	8000af0 <__aeabi_dcmple>
 800ff32:	b140      	cbz	r0, 800ff46 <__ieee754_sqrt+0x15e>
 800ff34:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ff38:	e9da 0100 	ldrd	r0, r1, [sl]
 800ff3c:	e9db 2300 	ldrd	r2, r3, [fp]
 800ff40:	d111      	bne.n	800ff66 <__ieee754_sqrt+0x17e>
 800ff42:	3601      	adds	r6, #1
 800ff44:	463c      	mov	r4, r7
 800ff46:	1072      	asrs	r2, r6, #1
 800ff48:	0863      	lsrs	r3, r4, #1
 800ff4a:	07f1      	lsls	r1, r6, #31
 800ff4c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ff50:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ff54:	bf48      	it	mi
 800ff56:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ff5a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ff5e:	4618      	mov	r0, r3
 800ff60:	e756      	b.n	800fe10 <__ieee754_sqrt+0x28>
 800ff62:	4690      	mov	r8, r2
 800ff64:	e7be      	b.n	800fee4 <__ieee754_sqrt+0xfc>
 800ff66:	f7f0 f991 	bl	800028c <__adddf3>
 800ff6a:	e9da 8900 	ldrd	r8, r9, [sl]
 800ff6e:	4602      	mov	r2, r0
 800ff70:	460b      	mov	r3, r1
 800ff72:	4640      	mov	r0, r8
 800ff74:	4649      	mov	r1, r9
 800ff76:	f7f0 fdb1 	bl	8000adc <__aeabi_dcmplt>
 800ff7a:	b120      	cbz	r0, 800ff86 <__ieee754_sqrt+0x19e>
 800ff7c:	1ca0      	adds	r0, r4, #2
 800ff7e:	bf08      	it	eq
 800ff80:	3601      	addeq	r6, #1
 800ff82:	3402      	adds	r4, #2
 800ff84:	e7df      	b.n	800ff46 <__ieee754_sqrt+0x15e>
 800ff86:	1c63      	adds	r3, r4, #1
 800ff88:	f023 0401 	bic.w	r4, r3, #1
 800ff8c:	e7db      	b.n	800ff46 <__ieee754_sqrt+0x15e>
 800ff8e:	bf00      	nop
 800ff90:	7ff00000 	.word	0x7ff00000
 800ff94:	200002d0 	.word	0x200002d0
 800ff98:	200002c8 	.word	0x200002c8
 800ff9c:	00000000 	.word	0x00000000

0800ffa0 <__ieee754_log>:
 800ffa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffa4:	ec51 0b10 	vmov	r0, r1, d0
 800ffa8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800ffac:	b087      	sub	sp, #28
 800ffae:	460d      	mov	r5, r1
 800ffb0:	da26      	bge.n	8010000 <__ieee754_log+0x60>
 800ffb2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ffb6:	4303      	orrs	r3, r0
 800ffb8:	4602      	mov	r2, r0
 800ffba:	d10a      	bne.n	800ffd2 <__ieee754_log+0x32>
 800ffbc:	49ce      	ldr	r1, [pc, #824]	@ (80102f8 <__ieee754_log+0x358>)
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	2000      	movs	r0, #0
 800ffc4:	f7f0 fc42 	bl	800084c <__aeabi_ddiv>
 800ffc8:	ec41 0b10 	vmov	d0, r0, r1
 800ffcc:	b007      	add	sp, #28
 800ffce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffd2:	2900      	cmp	r1, #0
 800ffd4:	da05      	bge.n	800ffe2 <__ieee754_log+0x42>
 800ffd6:	460b      	mov	r3, r1
 800ffd8:	f7f0 f956 	bl	8000288 <__aeabi_dsub>
 800ffdc:	2200      	movs	r2, #0
 800ffde:	2300      	movs	r3, #0
 800ffe0:	e7f0      	b.n	800ffc4 <__ieee754_log+0x24>
 800ffe2:	4bc6      	ldr	r3, [pc, #792]	@ (80102fc <__ieee754_log+0x35c>)
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	f7f0 fb07 	bl	80005f8 <__aeabi_dmul>
 800ffea:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800ffee:	460d      	mov	r5, r1
 800fff0:	4ac3      	ldr	r2, [pc, #780]	@ (8010300 <__ieee754_log+0x360>)
 800fff2:	4295      	cmp	r5, r2
 800fff4:	dd06      	ble.n	8010004 <__ieee754_log+0x64>
 800fff6:	4602      	mov	r2, r0
 800fff8:	460b      	mov	r3, r1
 800fffa:	f7f0 f947 	bl	800028c <__adddf3>
 800fffe:	e7e3      	b.n	800ffc8 <__ieee754_log+0x28>
 8010000:	2300      	movs	r3, #0
 8010002:	e7f5      	b.n	800fff0 <__ieee754_log+0x50>
 8010004:	152c      	asrs	r4, r5, #20
 8010006:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 801000a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801000e:	441c      	add	r4, r3
 8010010:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8010014:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8010018:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801001c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8010020:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8010024:	ea42 0105 	orr.w	r1, r2, r5
 8010028:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801002c:	2200      	movs	r2, #0
 801002e:	4bb5      	ldr	r3, [pc, #724]	@ (8010304 <__ieee754_log+0x364>)
 8010030:	f7f0 f92a 	bl	8000288 <__aeabi_dsub>
 8010034:	1cab      	adds	r3, r5, #2
 8010036:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801003a:	2b02      	cmp	r3, #2
 801003c:	4682      	mov	sl, r0
 801003e:	468b      	mov	fp, r1
 8010040:	f04f 0200 	mov.w	r2, #0
 8010044:	dc53      	bgt.n	80100ee <__ieee754_log+0x14e>
 8010046:	2300      	movs	r3, #0
 8010048:	f7f0 fd3e 	bl	8000ac8 <__aeabi_dcmpeq>
 801004c:	b1d0      	cbz	r0, 8010084 <__ieee754_log+0xe4>
 801004e:	2c00      	cmp	r4, #0
 8010050:	f000 8120 	beq.w	8010294 <__ieee754_log+0x2f4>
 8010054:	4620      	mov	r0, r4
 8010056:	f7f0 fa65 	bl	8000524 <__aeabi_i2d>
 801005a:	a391      	add	r3, pc, #580	@ (adr r3, 80102a0 <__ieee754_log+0x300>)
 801005c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010060:	4606      	mov	r6, r0
 8010062:	460f      	mov	r7, r1
 8010064:	f7f0 fac8 	bl	80005f8 <__aeabi_dmul>
 8010068:	a38f      	add	r3, pc, #572	@ (adr r3, 80102a8 <__ieee754_log+0x308>)
 801006a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801006e:	4604      	mov	r4, r0
 8010070:	460d      	mov	r5, r1
 8010072:	4630      	mov	r0, r6
 8010074:	4639      	mov	r1, r7
 8010076:	f7f0 fabf 	bl	80005f8 <__aeabi_dmul>
 801007a:	4602      	mov	r2, r0
 801007c:	460b      	mov	r3, r1
 801007e:	4620      	mov	r0, r4
 8010080:	4629      	mov	r1, r5
 8010082:	e7ba      	b.n	800fffa <__ieee754_log+0x5a>
 8010084:	a38a      	add	r3, pc, #552	@ (adr r3, 80102b0 <__ieee754_log+0x310>)
 8010086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801008a:	4650      	mov	r0, sl
 801008c:	4659      	mov	r1, fp
 801008e:	f7f0 fab3 	bl	80005f8 <__aeabi_dmul>
 8010092:	4602      	mov	r2, r0
 8010094:	460b      	mov	r3, r1
 8010096:	2000      	movs	r0, #0
 8010098:	499b      	ldr	r1, [pc, #620]	@ (8010308 <__ieee754_log+0x368>)
 801009a:	f7f0 f8f5 	bl	8000288 <__aeabi_dsub>
 801009e:	4652      	mov	r2, sl
 80100a0:	4606      	mov	r6, r0
 80100a2:	460f      	mov	r7, r1
 80100a4:	465b      	mov	r3, fp
 80100a6:	4650      	mov	r0, sl
 80100a8:	4659      	mov	r1, fp
 80100aa:	f7f0 faa5 	bl	80005f8 <__aeabi_dmul>
 80100ae:	4602      	mov	r2, r0
 80100b0:	460b      	mov	r3, r1
 80100b2:	4630      	mov	r0, r6
 80100b4:	4639      	mov	r1, r7
 80100b6:	f7f0 fa9f 	bl	80005f8 <__aeabi_dmul>
 80100ba:	4606      	mov	r6, r0
 80100bc:	460f      	mov	r7, r1
 80100be:	b914      	cbnz	r4, 80100c6 <__ieee754_log+0x126>
 80100c0:	4632      	mov	r2, r6
 80100c2:	463b      	mov	r3, r7
 80100c4:	e0a0      	b.n	8010208 <__ieee754_log+0x268>
 80100c6:	4620      	mov	r0, r4
 80100c8:	f7f0 fa2c 	bl	8000524 <__aeabi_i2d>
 80100cc:	a374      	add	r3, pc, #464	@ (adr r3, 80102a0 <__ieee754_log+0x300>)
 80100ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d2:	4680      	mov	r8, r0
 80100d4:	4689      	mov	r9, r1
 80100d6:	f7f0 fa8f 	bl	80005f8 <__aeabi_dmul>
 80100da:	a373      	add	r3, pc, #460	@ (adr r3, 80102a8 <__ieee754_log+0x308>)
 80100dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e0:	4604      	mov	r4, r0
 80100e2:	460d      	mov	r5, r1
 80100e4:	4640      	mov	r0, r8
 80100e6:	4649      	mov	r1, r9
 80100e8:	f7f0 fa86 	bl	80005f8 <__aeabi_dmul>
 80100ec:	e0a5      	b.n	801023a <__ieee754_log+0x29a>
 80100ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80100f2:	f7f0 f8cb 	bl	800028c <__adddf3>
 80100f6:	4602      	mov	r2, r0
 80100f8:	460b      	mov	r3, r1
 80100fa:	4650      	mov	r0, sl
 80100fc:	4659      	mov	r1, fp
 80100fe:	f7f0 fba5 	bl	800084c <__aeabi_ddiv>
 8010102:	e9cd 0100 	strd	r0, r1, [sp]
 8010106:	4620      	mov	r0, r4
 8010108:	f7f0 fa0c 	bl	8000524 <__aeabi_i2d>
 801010c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010110:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010114:	4610      	mov	r0, r2
 8010116:	4619      	mov	r1, r3
 8010118:	f7f0 fa6e 	bl	80005f8 <__aeabi_dmul>
 801011c:	4602      	mov	r2, r0
 801011e:	460b      	mov	r3, r1
 8010120:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010124:	f7f0 fa68 	bl	80005f8 <__aeabi_dmul>
 8010128:	a363      	add	r3, pc, #396	@ (adr r3, 80102b8 <__ieee754_log+0x318>)
 801012a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801012e:	4680      	mov	r8, r0
 8010130:	4689      	mov	r9, r1
 8010132:	f7f0 fa61 	bl	80005f8 <__aeabi_dmul>
 8010136:	a362      	add	r3, pc, #392	@ (adr r3, 80102c0 <__ieee754_log+0x320>)
 8010138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801013c:	f7f0 f8a6 	bl	800028c <__adddf3>
 8010140:	4642      	mov	r2, r8
 8010142:	464b      	mov	r3, r9
 8010144:	f7f0 fa58 	bl	80005f8 <__aeabi_dmul>
 8010148:	a35f      	add	r3, pc, #380	@ (adr r3, 80102c8 <__ieee754_log+0x328>)
 801014a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801014e:	f7f0 f89d 	bl	800028c <__adddf3>
 8010152:	4642      	mov	r2, r8
 8010154:	464b      	mov	r3, r9
 8010156:	f7f0 fa4f 	bl	80005f8 <__aeabi_dmul>
 801015a:	a35d      	add	r3, pc, #372	@ (adr r3, 80102d0 <__ieee754_log+0x330>)
 801015c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010160:	f7f0 f894 	bl	800028c <__adddf3>
 8010164:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010168:	f7f0 fa46 	bl	80005f8 <__aeabi_dmul>
 801016c:	a35a      	add	r3, pc, #360	@ (adr r3, 80102d8 <__ieee754_log+0x338>)
 801016e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010172:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010176:	4640      	mov	r0, r8
 8010178:	4649      	mov	r1, r9
 801017a:	f7f0 fa3d 	bl	80005f8 <__aeabi_dmul>
 801017e:	a358      	add	r3, pc, #352	@ (adr r3, 80102e0 <__ieee754_log+0x340>)
 8010180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010184:	f7f0 f882 	bl	800028c <__adddf3>
 8010188:	4642      	mov	r2, r8
 801018a:	464b      	mov	r3, r9
 801018c:	f7f0 fa34 	bl	80005f8 <__aeabi_dmul>
 8010190:	a355      	add	r3, pc, #340	@ (adr r3, 80102e8 <__ieee754_log+0x348>)
 8010192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010196:	f7f0 f879 	bl	800028c <__adddf3>
 801019a:	4642      	mov	r2, r8
 801019c:	464b      	mov	r3, r9
 801019e:	f7f0 fa2b 	bl	80005f8 <__aeabi_dmul>
 80101a2:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80101a6:	4602      	mov	r2, r0
 80101a8:	460b      	mov	r3, r1
 80101aa:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80101ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80101b2:	f7f0 f86b 	bl	800028c <__adddf3>
 80101b6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80101ba:	3551      	adds	r5, #81	@ 0x51
 80101bc:	4335      	orrs	r5, r6
 80101be:	2d00      	cmp	r5, #0
 80101c0:	4680      	mov	r8, r0
 80101c2:	4689      	mov	r9, r1
 80101c4:	dd48      	ble.n	8010258 <__ieee754_log+0x2b8>
 80101c6:	4b50      	ldr	r3, [pc, #320]	@ (8010308 <__ieee754_log+0x368>)
 80101c8:	2200      	movs	r2, #0
 80101ca:	4650      	mov	r0, sl
 80101cc:	4659      	mov	r1, fp
 80101ce:	f7f0 fa13 	bl	80005f8 <__aeabi_dmul>
 80101d2:	4652      	mov	r2, sl
 80101d4:	465b      	mov	r3, fp
 80101d6:	f7f0 fa0f 	bl	80005f8 <__aeabi_dmul>
 80101da:	4602      	mov	r2, r0
 80101dc:	460b      	mov	r3, r1
 80101de:	4606      	mov	r6, r0
 80101e0:	460f      	mov	r7, r1
 80101e2:	4640      	mov	r0, r8
 80101e4:	4649      	mov	r1, r9
 80101e6:	f7f0 f851 	bl	800028c <__adddf3>
 80101ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80101ee:	f7f0 fa03 	bl	80005f8 <__aeabi_dmul>
 80101f2:	4680      	mov	r8, r0
 80101f4:	4689      	mov	r9, r1
 80101f6:	b964      	cbnz	r4, 8010212 <__ieee754_log+0x272>
 80101f8:	4602      	mov	r2, r0
 80101fa:	460b      	mov	r3, r1
 80101fc:	4630      	mov	r0, r6
 80101fe:	4639      	mov	r1, r7
 8010200:	f7f0 f842 	bl	8000288 <__aeabi_dsub>
 8010204:	4602      	mov	r2, r0
 8010206:	460b      	mov	r3, r1
 8010208:	4650      	mov	r0, sl
 801020a:	4659      	mov	r1, fp
 801020c:	f7f0 f83c 	bl	8000288 <__aeabi_dsub>
 8010210:	e6da      	b.n	800ffc8 <__ieee754_log+0x28>
 8010212:	a323      	add	r3, pc, #140	@ (adr r3, 80102a0 <__ieee754_log+0x300>)
 8010214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010218:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801021c:	f7f0 f9ec 	bl	80005f8 <__aeabi_dmul>
 8010220:	a321      	add	r3, pc, #132	@ (adr r3, 80102a8 <__ieee754_log+0x308>)
 8010222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010226:	4604      	mov	r4, r0
 8010228:	460d      	mov	r5, r1
 801022a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801022e:	f7f0 f9e3 	bl	80005f8 <__aeabi_dmul>
 8010232:	4642      	mov	r2, r8
 8010234:	464b      	mov	r3, r9
 8010236:	f7f0 f829 	bl	800028c <__adddf3>
 801023a:	4602      	mov	r2, r0
 801023c:	460b      	mov	r3, r1
 801023e:	4630      	mov	r0, r6
 8010240:	4639      	mov	r1, r7
 8010242:	f7f0 f821 	bl	8000288 <__aeabi_dsub>
 8010246:	4652      	mov	r2, sl
 8010248:	465b      	mov	r3, fp
 801024a:	f7f0 f81d 	bl	8000288 <__aeabi_dsub>
 801024e:	4602      	mov	r2, r0
 8010250:	460b      	mov	r3, r1
 8010252:	4620      	mov	r0, r4
 8010254:	4629      	mov	r1, r5
 8010256:	e7d9      	b.n	801020c <__ieee754_log+0x26c>
 8010258:	4602      	mov	r2, r0
 801025a:	460b      	mov	r3, r1
 801025c:	4650      	mov	r0, sl
 801025e:	4659      	mov	r1, fp
 8010260:	f7f0 f812 	bl	8000288 <__aeabi_dsub>
 8010264:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010268:	f7f0 f9c6 	bl	80005f8 <__aeabi_dmul>
 801026c:	4606      	mov	r6, r0
 801026e:	460f      	mov	r7, r1
 8010270:	2c00      	cmp	r4, #0
 8010272:	f43f af25 	beq.w	80100c0 <__ieee754_log+0x120>
 8010276:	a30a      	add	r3, pc, #40	@ (adr r3, 80102a0 <__ieee754_log+0x300>)
 8010278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801027c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010280:	f7f0 f9ba 	bl	80005f8 <__aeabi_dmul>
 8010284:	a308      	add	r3, pc, #32	@ (adr r3, 80102a8 <__ieee754_log+0x308>)
 8010286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801028a:	4604      	mov	r4, r0
 801028c:	460d      	mov	r5, r1
 801028e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010292:	e729      	b.n	80100e8 <__ieee754_log+0x148>
 8010294:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80102f0 <__ieee754_log+0x350>
 8010298:	e698      	b.n	800ffcc <__ieee754_log+0x2c>
 801029a:	bf00      	nop
 801029c:	f3af 8000 	nop.w
 80102a0:	fee00000 	.word	0xfee00000
 80102a4:	3fe62e42 	.word	0x3fe62e42
 80102a8:	35793c76 	.word	0x35793c76
 80102ac:	3dea39ef 	.word	0x3dea39ef
 80102b0:	55555555 	.word	0x55555555
 80102b4:	3fd55555 	.word	0x3fd55555
 80102b8:	df3e5244 	.word	0xdf3e5244
 80102bc:	3fc2f112 	.word	0x3fc2f112
 80102c0:	96cb03de 	.word	0x96cb03de
 80102c4:	3fc74664 	.word	0x3fc74664
 80102c8:	94229359 	.word	0x94229359
 80102cc:	3fd24924 	.word	0x3fd24924
 80102d0:	55555593 	.word	0x55555593
 80102d4:	3fe55555 	.word	0x3fe55555
 80102d8:	d078c69f 	.word	0xd078c69f
 80102dc:	3fc39a09 	.word	0x3fc39a09
 80102e0:	1d8e78af 	.word	0x1d8e78af
 80102e4:	3fcc71c5 	.word	0x3fcc71c5
 80102e8:	9997fa04 	.word	0x9997fa04
 80102ec:	3fd99999 	.word	0x3fd99999
	...
 80102f8:	c3500000 	.word	0xc3500000
 80102fc:	43500000 	.word	0x43500000
 8010300:	7fefffff 	.word	0x7fefffff
 8010304:	3ff00000 	.word	0x3ff00000
 8010308:	3fe00000 	.word	0x3fe00000

0801030c <_init>:
 801030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801030e:	bf00      	nop
 8010310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010312:	bc08      	pop	{r3}
 8010314:	469e      	mov	lr, r3
 8010316:	4770      	bx	lr

08010318 <_fini>:
 8010318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801031a:	bf00      	nop
 801031c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801031e:	bc08      	pop	{r3}
 8010320:	469e      	mov	lr, r3
 8010322:	4770      	bx	lr
