
STM32_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e61c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000700  0800e7b0  0800e7b0  0000f7b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eeb0  0800eeb0  00010208  2**0
                  CONTENTS
  4 .ARM          00000008  0800eeb0  0800eeb0  0000feb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eeb8  0800eeb8  00010208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eeb8  0800eeb8  0000feb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eebc  0800eebc  0000febc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  0800eec0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010208  2**0
                  CONTENTS
 10 .bss          00000b60  20000208  20000208  00010208  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d68  20000d68  00010208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a815  00000000  00000000  00010238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004474  00000000  00000000  0002aa4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001590  00000000  00000000  0002eec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001087  00000000  00000000  00030458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025cbc  00000000  00000000  000314df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e36b  00000000  00000000  0005719b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1059  00000000  00000000  00075506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014655f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ae4  00000000  00000000  001465a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  0014d088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e794 	.word	0x0800e794

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800e794 	.word	0x0800e794

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <dcRemoval>:

#include "filter.h"


DC_FILTER_T dcRemoval(float x, float prev_w, float alpha)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b08b      	sub	sp, #44	@ 0x2c
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000f82:	edc7 0a04 	vstr	s1, [r7, #16]
 8000f86:	ed87 1a03 	vstr	s2, [r7, #12]
  DC_FILTER_T filtered;
  filtered.w = x + alpha * prev_w;
 8000f8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f96:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9e:	edc7 7a06 	vstr	s15, [r7, #24]
  filtered.result = filtered.w - prev_w;
 8000fa2:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fae:	edc7 7a07 	vstr	s15, [r7, #28]

  return filtered;
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	f107 0218 	add.w	r2, r7, #24
 8000fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fbe:	e883 0003 	stmia.w	r3, {r0, r1}
 8000fc2:	6a3a      	ldr	r2, [r7, #32]
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc6:	ee07 2a10 	vmov	s14, r2
 8000fca:	ee07 3a90 	vmov	s15, r3
}
 8000fce:	eeb0 0a47 	vmov.f32	s0, s14
 8000fd2:	eef0 0a67 	vmov.f32	s1, s15
 8000fd6:	372c      	adds	r7, #44	@ 0x2c
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <lowPassButterworthFilter>:

//Low pass butterworth filter order=1 alpha1=0.1
void lowPassButterworthFilter(float x, BUTTERWORTH_FILTER_T * filterResult)
{
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fea:	6038      	str	r0, [r7, #0]
	filterResult->v[0] = filterResult->v[1];
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	601a      	str	r2, [r3, #0]

    //Fs = 100Hz and Fc = 10Hz
    filterResult->v[1] = (2.452372752527856026e-1 * x) + (0.50952544949442879485 * filterResult->v[0]);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff faa7 	bl	8000548 <__aeabi_f2d>
 8000ffa:	a319      	add	r3, pc, #100	@ (adr r3, 8001060 <lowPassButterworthFilter+0x80>)
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	f7ff fafa 	bl	80005f8 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4614      	mov	r4, r2
 800100a:	461d      	mov	r5, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa99 	bl	8000548 <__aeabi_f2d>
 8001016:	a314      	add	r3, pc, #80	@ (adr r3, 8001068 <lowPassButterworthFilter+0x88>)
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	f7ff faec 	bl	80005f8 <__aeabi_dmul>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4620      	mov	r0, r4
 8001026:	4629      	mov	r1, r5
 8001028:	f7ff f930 	bl	800028c <__adddf3>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fdd8 	bl	8000be8 <__aeabi_d2f>
 8001038:	4602      	mov	r2, r0
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	605a      	str	r2, [r3, #4]

    //Fs = 100Hz and Fc = 4Hz
    //filterResult->v[1] = (1.367287359973195227e-1 * x) + (0.72654252800536101020 * filterResult->v[0]); //Very precise butterworth filter

    filterResult->result = filterResult->v[0] + filterResult->v[1];
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	ed93 7a00 	vldr	s14, [r3]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	edd3 7a01 	vldr	s15, [r3, #4]
 800104a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bdb0      	pop	{r4, r5, r7, pc}
 800105c:	f3af 8000 	nop.w
 8001060:	5e7c4548 	.word	0x5e7c4548
 8001064:	3fcf63ef 	.word	0x3fcf63ef
 8001068:	50c1dd5c 	.word	0x50c1dd5c
 800106c:	3fe04e08 	.word	0x3fe04e08

08001070 <meanDiff>:

float meanDiff(float M, MEAN_DIFF_FILTER_T* filterValues)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	ed87 0a01 	vstr	s0, [r7, #4]
 800107a:	6038      	str	r0, [r7, #0]
  float avg = 0;
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]

  filterValues->sum -= filterValues->values[filterValues->index];
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
  filterValues->values[filterValues->index] = M;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	601a      	str	r2, [r3, #0]
  filterValues->sum += filterValues->values[filterValues->index];
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	edd3 7a00 	vldr	s15, [r3]
 80010c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

  filterValues->index++;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010d8:	3301      	adds	r3, #1
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  filterValues->index = filterValues->index % MEAN_FILTER_SIZE;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 80010e8:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <meanDiff+0xe0>)
 80010ea:	fba3 1302 	umull	r1, r3, r3, r2
 80010ee:	08d9      	lsrs	r1, r3, #3
 80010f0:	460b      	mov	r3, r1
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	1a5b      	subs	r3, r3, r1
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(filterValues->count < MEAN_FILTER_SIZE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001106:	2b0e      	cmp	r3, #14
 8001108:	d807      	bhi.n	800111a <meanDiff+0xaa>
    filterValues->count++;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001110:	3301      	adds	r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  avg = filterValues->sum / filterValues->count;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800112e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001132:	edc7 7a03 	vstr	s15, [r7, #12]
  return avg - M;
 8001136:	ed97 7a03 	vldr	s14, [r7, #12]
 800113a:	edd7 7a01 	vldr	s15, [r7, #4]
 800113e:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001142:	eeb0 0a67 	vmov.f32	s0, s15
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	88888889 	.word	0x88888889

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	b5b0      	push	{r4, r5, r7, lr}
 8001156:	b09c      	sub	sp, #112	@ 0x70
 8001158:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115a:	f001 fc15 	bl	8002988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115e:	f000 f895 	bl	800128c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001162:	f000 f9bb 	bl	80014dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001166:	f000 f8fb 	bl	8001360 <MX_I2C1_Init>
  MX_I2S3_Init();
 800116a:	f000 f927 	bl	80013bc <MX_I2S3_Init>
  MX_SPI1_Init();
 800116e:	f000 f955 	bl	800141c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001172:	f00a f863 	bl	800b23c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8001176:	f000 f987 	bl	8001488 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t message[] = "Hello PC! STM32 is sending data...\r\n";
 800117a:	4b3e      	ldr	r3, [pc, #248]	@ (8001274 <main+0x120>)
 800117c:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001180:	461d      	mov	r5, r3
 8001182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800118a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800118e:	6020      	str	r0, [r4, #0]
 8001190:	3404      	adds	r4, #4
 8001192:	7021      	strb	r1, [r4, #0]

  	OLED_Init();                // Initialize the OLED display
 8001194:	f000 fadc 	bl	8001750 <OLED_Init>
  	OLED_Clear();               // Clear the OLED screen
 8001198:	f000 fb4d 	bl	8001836 <OLED_Clear>
  	OLED_ShowString(0, 0, "Hello, World!");  // Display "Hello, World!" at position (0, 0)
 800119c:	4a36      	ldr	r2, [pc, #216]	@ (8001278 <main+0x124>)
 800119e:	2100      	movs	r1, #0
 80011a0:	2000      	movs	r0, #0
 80011a2:	f000 fbbd 	bl	8001920 <OLED_ShowString>
  	OLED_ShowString(0, 3, "STM32 OLED Demoooooo"); // Display "STM32 OLED Demo" at position (0, 3)
 80011a6:	4a35      	ldr	r2, [pc, #212]	@ (800127c <main+0x128>)
 80011a8:	2103      	movs	r1, #3
 80011aa:	2000      	movs	r0, #0
 80011ac:	f000 fbb8 	bl	8001920 <OLED_ShowString>

	FIFO_LED_DATA fifoLedData;
	long currentMillis = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	663b      	str	r3, [r7, #96]	@ 0x60
	long lastMillis = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	667b      	str	r3, [r7, #100]	@ 0x64


  pulseOximeter_resetRegisters();
 80011b8:	f000 fc86 	bl	8001ac8 <pulseOximeter_resetRegisters>

  // Setup up MAX30102 FIFO registers
  pulseOximeter_initFifo();
 80011bc:	f000 fd68 	bl	8001c90 <pulseOximeter_initFifo>

  // Set sampling rate to 100MSPS and
  // pulse width to 411us
  // See DataSheet for available
  // sampling rate/pulse width combinations
  pulseOximeter_setSampleRate(_100SPS);
 80011c0:	2001      	movs	r0, #1
 80011c2:	f000 fcdb 	bl	8001b7c <pulseOximeter_setSampleRate>
  pulseOximeter_setPulseWidth(_411_US);
 80011c6:	2003      	movs	r0, #3
 80011c8:	f000 fd06 	bl	8001bd8 <pulseOximeter_setPulseWidth>

  // Set Red/IR Led current
  // 0 - 51mA maximum
  pulseOximeter_setLedCurrent(RED_LED, 50);
 80011cc:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001280 <main+0x12c>
 80011d0:	2001      	movs	r0, #1
 80011d2:	f000 fc9f 	bl	8001b14 <pulseOximeter_setLedCurrent>
  pulseOximeter_setLedCurrent(IR_LED, 5);
 80011d6:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 80011da:	2002      	movs	r0, #2
 80011dc:	f000 fc9a 	bl	8001b14 <pulseOximeter_setLedCurrent>

  // Set FIFO registers to zero
  pulseOximeter_resetFifo();
 80011e0:	f000 fd46 	bl	8001c70 <pulseOximeter_resetFifo>
  // Set the Measurement Mode
  // Measurement Modes:
  // HEART_RATE - only Red Led active
  // SPO2 - Both IR & Red Led active
  // MULTI_LED - Both led's active (timing can be configured; see DataSheet)
  pulseOximeter_setMeasurementMode(SPO2);
 80011e4:	2001      	movs	r0, #1
 80011e6:	f000 fc23 	bl	8001a30 <pulseOximeter_setMeasurementMode>

  currentMillis = millis();
 80011ea:	f001 fb89 	bl	8002900 <millis>
 80011ee:	4603      	mov	r3, r0
 80011f0:	663b      	str	r3, [r7, #96]	@ 0x60
		  }

	  }else{

		  // Read FIFO LED Data
		  fifoLedData = pulseOximeter_readFifo();
 80011f2:	f000 fd59 	bl	8001ca8 <pulseOximeter_readFifo>
 80011f6:	4603      	mov	r3, r0
 80011f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		  // Get BPM/SpO2 readings
		  pulseOximeter = pulseOximeter_update(fifoLedData);
 80011fa:	4c22      	ldr	r4, [pc, #136]	@ (8001284 <main+0x130>)
 80011fc:	463b      	mov	r3, r7
 80011fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fde5 	bl	8001dd0 <pulseOximeter_update>
 8001206:	4625      	mov	r5, r4
 8001208:	463c      	mov	r4, r7
 800120a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800120c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800120e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001212:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001216:	e885 0003 	stmia.w	r5, {r0, r1}

		  pulseOximeter_resetFifo();
 800121a:	f000 fd29 	bl	8001c70 <pulseOximeter_resetFifo>

		  // Small delay
		  HAL_Delay(10);
 800121e:	200a      	movs	r0, #10
 8001220:	f001 fc24 	bl	8002a6c <HAL_Delay>
	  }

	  // Display the data over the built in USB
	  // If available; check board specs
	  // use terminal program and set BAUD = 115200
	  currentMillis = millis();
 8001224:	f001 fb6c 	bl	8002900 <millis>
 8001228:	4603      	mov	r3, r0
 800122a:	663b      	str	r3, [r7, #96]	@ 0x60
	  if( currentMillis - lastMillis > 1000 )
 800122c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800122e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001236:	dd1a      	ble.n	800126e <main+0x11a>
	  {
		  float heartRate = pulseOximeter_getBPM();
 8001238:	f001 f8c0 	bl	80023bc <pulseOximeter_getBPM>
 800123c:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
		  float bloodOxygen = pulseOximeter_getSPO2();
 8001240:	f001 f8ca 	bl	80023d8 <pulseOximeter_getSPO2>
 8001244:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
		  printf("BPM: %.2f   SpO2 Level: %.2f%%\n", heartRate, bloodOxygen);
 8001248:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800124a:	f7ff f97d 	bl	8000548 <__aeabi_f2d>
 800124e:	4604      	mov	r4, r0
 8001250:	460d      	mov	r5, r1
 8001252:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001254:	f7ff f978 	bl	8000548 <__aeabi_f2d>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	e9cd 2300 	strd	r2, r3, [sp]
 8001260:	4622      	mov	r2, r4
 8001262:	462b      	mov	r3, r5
 8001264:	4808      	ldr	r0, [pc, #32]	@ (8001288 <main+0x134>)
 8001266:	f00b f8cb 	bl	800c400 <iprintf>

		  lastMillis = currentMillis;
 800126a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800126c:	667b      	str	r3, [r7, #100]	@ 0x64
	  }

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800126e:	f00a f80b 	bl	800b288 <MX_USB_HOST_Process>
	  if( PUSLE_OXIMETER_INTERRUPT == 1 )
 8001272:	e7be      	b.n	80011f2 <main+0x9e>
 8001274:	0800e7f8 	.word	0x0800e7f8
 8001278:	0800e7b0 	.word	0x0800e7b0
 800127c:	0800e7c0 	.word	0x0800e7c0
 8001280:	42480000 	.word	0x42480000
 8001284:	20000364 	.word	0x20000364
 8001288:	0800e7d8 	.word	0x0800e7d8

0800128c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b094      	sub	sp, #80	@ 0x50
 8001290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001292:	f107 0320 	add.w	r3, r7, #32
 8001296:	2230      	movs	r2, #48	@ 0x30
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f00b f905 	bl	800c4aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	4b28      	ldr	r3, [pc, #160]	@ (8001358 <SystemClock_Config+0xcc>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b8:	4a27      	ldr	r2, [pc, #156]	@ (8001358 <SystemClock_Config+0xcc>)
 80012ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012be:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c0:	4b25      	ldr	r3, [pc, #148]	@ (8001358 <SystemClock_Config+0xcc>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012cc:	2300      	movs	r3, #0
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	4b22      	ldr	r3, [pc, #136]	@ (800135c <SystemClock_Config+0xd0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a21      	ldr	r2, [pc, #132]	@ (800135c <SystemClock_Config+0xd0>)
 80012d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b1f      	ldr	r3, [pc, #124]	@ (800135c <SystemClock_Config+0xd0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e8:	2301      	movs	r3, #1
 80012ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f2:	2302      	movs	r3, #2
 80012f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012fc:	2308      	movs	r3, #8
 80012fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001300:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001304:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001306:	2302      	movs	r3, #2
 8001308:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800130a:	2307      	movs	r3, #7
 800130c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130e:	f107 0320 	add.w	r3, r7, #32
 8001312:	4618      	mov	r0, r3
 8001314:	f005 fc7c 	bl	8006c10 <HAL_RCC_OscConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800131e:	f000 f9f5 	bl	800170c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001322:	230f      	movs	r3, #15
 8001324:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001326:	2302      	movs	r3, #2
 8001328:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800132e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001332:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001334:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001338:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	2105      	movs	r1, #5
 8001340:	4618      	mov	r0, r3
 8001342:	f005 fedd 	bl	8007100 <HAL_RCC_ClockConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800134c:	f000 f9de 	bl	800170c <Error_Handler>
  }
}
 8001350:	bf00      	nop
 8001352:	3750      	adds	r7, #80	@ 0x50
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40023800 	.word	0x40023800
 800135c:	40007000 	.word	0x40007000

08001360 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001364:	4b12      	ldr	r3, [pc, #72]	@ (80013b0 <MX_I2C1_Init+0x50>)
 8001366:	4a13      	ldr	r2, [pc, #76]	@ (80013b4 <MX_I2C1_Init+0x54>)
 8001368:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800136a:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <MX_I2C1_Init+0x50>)
 800136c:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <MX_I2C1_Init+0x58>)
 800136e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001370:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <MX_I2C1_Init+0x50>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <MX_I2C1_Init+0x50>)
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <MX_I2C1_Init+0x50>)
 800137e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001382:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001384:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <MX_I2C1_Init+0x50>)
 8001386:	2200      	movs	r2, #0
 8001388:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800138a:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <MX_I2C1_Init+0x50>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001390:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <MX_I2C1_Init+0x50>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <MX_I2C1_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800139c:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <MX_I2C1_Init+0x50>)
 800139e:	f003 ff9d 	bl	80052dc <HAL_I2C_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013a8:	f000 f9b0 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000224 	.word	0x20000224
 80013b4:	40005400 	.word	0x40005400
 80013b8:	000186a0 	.word	0x000186a0

080013bc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80013c0:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <MX_I2S3_Init+0x54>)
 80013c2:	4a14      	ldr	r2, [pc, #80]	@ (8001414 <MX_I2S3_Init+0x58>)
 80013c4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80013c6:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <MX_I2S3_Init+0x54>)
 80013c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013cc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <MX_I2S3_Init+0x54>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80013d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <MX_I2S3_Init+0x54>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80013da:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <MX_I2S3_Init+0x54>)
 80013dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013e0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <MX_I2S3_Init+0x54>)
 80013e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001418 <MX_I2S3_Init+0x5c>)
 80013e6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80013e8:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <MX_I2S3_Init+0x54>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80013ee:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <MX_I2S3_Init+0x54>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <MX_I2S3_Init+0x54>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80013fa:	4805      	ldr	r0, [pc, #20]	@ (8001410 <MX_I2S3_Init+0x54>)
 80013fc:	f004 ff68 	bl	80062d0 <HAL_I2S_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001406:	f000 f981 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000278 	.word	0x20000278
 8001414:	40003c00 	.word	0x40003c00
 8001418:	00017700 	.word	0x00017700

0800141c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001420:	4b17      	ldr	r3, [pc, #92]	@ (8001480 <MX_SPI1_Init+0x64>)
 8001422:	4a18      	ldr	r2, [pc, #96]	@ (8001484 <MX_SPI1_Init+0x68>)
 8001424:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001426:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <MX_SPI1_Init+0x64>)
 8001428:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800142c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800142e:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <MX_SPI1_Init+0x64>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001434:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <MX_SPI1_Init+0x64>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800143a:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <MX_SPI1_Init+0x64>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001440:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <MX_SPI1_Init+0x64>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001446:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <MX_SPI1_Init+0x64>)
 8001448:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800144c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800144e:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <MX_SPI1_Init+0x64>)
 8001450:	2200      	movs	r2, #0
 8001452:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001454:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <MX_SPI1_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800145a:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <MX_SPI1_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001460:	4b07      	ldr	r3, [pc, #28]	@ (8001480 <MX_SPI1_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <MX_SPI1_Init+0x64>)
 8001468:	220a      	movs	r2, #10
 800146a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800146c:	4804      	ldr	r0, [pc, #16]	@ (8001480 <MX_SPI1_Init+0x64>)
 800146e:	f006 f9a9 	bl	80077c4 <HAL_SPI_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001478:	f000 f948 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200002c0 	.word	0x200002c0
 8001484:	40013000 	.word	0x40013000

08001488 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800148c:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <MX_USART2_UART_Init+0x4c>)
 800148e:	4a12      	ldr	r2, [pc, #72]	@ (80014d8 <MX_USART2_UART_Init+0x50>)
 8001490:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001492:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <MX_USART2_UART_Init+0x4c>)
 8001494:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001498:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <MX_USART2_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014ac:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b2:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b8:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014c0:	f006 fa09 	bl	80078d6 <HAL_UART_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ca:	f000 f91f 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000318 	.word	0x20000318
 80014d8:	40004400 	.word	0x40004400

080014dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	@ 0x30
 80014e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	4b76      	ldr	r3, [pc, #472]	@ (80016d0 <MX_GPIO_Init+0x1f4>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	4a75      	ldr	r2, [pc, #468]	@ (80016d0 <MX_GPIO_Init+0x1f4>)
 80014fc:	f043 0310 	orr.w	r3, r3, #16
 8001500:	6313      	str	r3, [r2, #48]	@ 0x30
 8001502:	4b73      	ldr	r3, [pc, #460]	@ (80016d0 <MX_GPIO_Init+0x1f4>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	f003 0310 	and.w	r3, r3, #16
 800150a:	61bb      	str	r3, [r7, #24]
 800150c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	4b6f      	ldr	r3, [pc, #444]	@ (80016d0 <MX_GPIO_Init+0x1f4>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	4a6e      	ldr	r2, [pc, #440]	@ (80016d0 <MX_GPIO_Init+0x1f4>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	6313      	str	r3, [r2, #48]	@ 0x30
 800151e:	4b6c      	ldr	r3, [pc, #432]	@ (80016d0 <MX_GPIO_Init+0x1f4>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b68      	ldr	r3, [pc, #416]	@ (80016d0 <MX_GPIO_Init+0x1f4>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	4a67      	ldr	r2, [pc, #412]	@ (80016d0 <MX_GPIO_Init+0x1f4>)
 8001534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001538:	6313      	str	r3, [r2, #48]	@ 0x30
 800153a:	4b65      	ldr	r3, [pc, #404]	@ (80016d0 <MX_GPIO_Init+0x1f4>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b61      	ldr	r3, [pc, #388]	@ (80016d0 <MX_GPIO_Init+0x1f4>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	4a60      	ldr	r2, [pc, #384]	@ (80016d0 <MX_GPIO_Init+0x1f4>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6313      	str	r3, [r2, #48]	@ 0x30
 8001556:	4b5e      	ldr	r3, [pc, #376]	@ (80016d0 <MX_GPIO_Init+0x1f4>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	4b5a      	ldr	r3, [pc, #360]	@ (80016d0 <MX_GPIO_Init+0x1f4>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a59      	ldr	r2, [pc, #356]	@ (80016d0 <MX_GPIO_Init+0x1f4>)
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b57      	ldr	r3, [pc, #348]	@ (80016d0 <MX_GPIO_Init+0x1f4>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b53      	ldr	r3, [pc, #332]	@ (80016d0 <MX_GPIO_Init+0x1f4>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a52      	ldr	r2, [pc, #328]	@ (80016d0 <MX_GPIO_Init+0x1f4>)
 8001588:	f043 0308 	orr.w	r3, r3, #8
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b50      	ldr	r3, [pc, #320]	@ (80016d0 <MX_GPIO_Init+0x1f4>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	2108      	movs	r1, #8
 800159e:	484d      	ldr	r0, [pc, #308]	@ (80016d4 <MX_GPIO_Init+0x1f8>)
 80015a0:	f001 fd36 	bl	8003010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	2101      	movs	r1, #1
 80015a8:	484b      	ldr	r0, [pc, #300]	@ (80016d8 <MX_GPIO_Init+0x1fc>)
 80015aa:	f001 fd31 	bl	8003010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015ae:	2200      	movs	r2, #0
 80015b0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80015b4:	4849      	ldr	r0, [pc, #292]	@ (80016dc <MX_GPIO_Init+0x200>)
 80015b6:	f001 fd2b 	bl	8003010 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80015ba:	2308      	movs	r3, #8
 80015bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015be:	2301      	movs	r3, #1
 80015c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 031c 	add.w	r3, r7, #28
 80015ce:	4619      	mov	r1, r3
 80015d0:	4840      	ldr	r0, [pc, #256]	@ (80016d4 <MX_GPIO_Init+0x1f8>)
 80015d2:	f001 fb81 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80015d6:	2301      	movs	r3, #1
 80015d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015da:	2301      	movs	r3, #1
 80015dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	4619      	mov	r1, r3
 80015ec:	483a      	ldr	r0, [pc, #232]	@ (80016d8 <MX_GPIO_Init+0x1fc>)
 80015ee:	f001 fb73 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80015f2:	2308      	movs	r3, #8
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001602:	2305      	movs	r3, #5
 8001604:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	4832      	ldr	r0, [pc, #200]	@ (80016d8 <MX_GPIO_Init+0x1fc>)
 800160e:	f001 fb63 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pulse_Oximeter_Int_Pin */
  GPIO_InitStruct.Pin = Pulse_Oximeter_Int_Pin;
 8001612:	2301      	movs	r3, #1
 8001614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001616:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800161a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800161c:	2301      	movs	r3, #1
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Pulse_Oximeter_Int_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	482e      	ldr	r0, [pc, #184]	@ (80016e0 <MX_GPIO_Init+0x204>)
 8001628:	f001 fb56 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800162c:	2304      	movs	r3, #4
 800162e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4619      	mov	r1, r3
 800163e:	4828      	ldr	r0, [pc, #160]	@ (80016e0 <MX_GPIO_Init+0x204>)
 8001640:	f001 fb4a 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001644:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001656:	2305      	movs	r3, #5
 8001658:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	481f      	ldr	r0, [pc, #124]	@ (80016e0 <MX_GPIO_Init+0x204>)
 8001662:	f001 fb39 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001666:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800166a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	4619      	mov	r1, r3
 800167e:	4817      	ldr	r0, [pc, #92]	@ (80016dc <MX_GPIO_Init+0x200>)
 8001680:	f001 fb2a 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001684:	2320      	movs	r3, #32
 8001686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	4619      	mov	r1, r3
 8001696:	4811      	ldr	r0, [pc, #68]	@ (80016dc <MX_GPIO_Init+0x200>)
 8001698:	f001 fb1e 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800169c:	2302      	movs	r3, #2
 800169e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016a0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80016a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	4619      	mov	r1, r3
 80016b0:	4808      	ldr	r0, [pc, #32]	@ (80016d4 <MX_GPIO_Init+0x1f8>)
 80016b2:	f001 fb11 	bl	8002cd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2006      	movs	r0, #6
 80016bc:	f001 fad5 	bl	8002c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016c0:	2006      	movs	r0, #6
 80016c2:	f001 faee 	bl	8002ca2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016c6:	bf00      	nop
 80016c8:	3730      	adds	r7, #48	@ 0x30
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40020800 	.word	0x40020800
 80016dc:	40020c00 	.word	0x40020c00
 80016e0:	40020400 	.word	0x40020400

080016e4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Pulse_Oximeter_Int_Pin)
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d102      	bne.n	80016fa <HAL_GPIO_EXTI_Callback+0x16>
	{
		pulseOximiterIntFlag = 1;
 80016f4:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <HAL_GPIO_EXTI_Callback+0x24>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	701a      	strb	r2, [r3, #0]

		//spO2_registerDump();
	}
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000360 	.word	0x20000360

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <Error_Handler+0x8>

08001718 <OLED_Write>:
/**
 * @brief Send a command or data to the OLED
 * @param mode OLED_CMD indicates command mode, OLED_DATA indicates data mode
 * @param data The byte to be sent
 */
void OLED_Write(uint8_t mode, uint8_t data) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af02      	add	r7, sp, #8
 800171e:	4603      	mov	r3, r0
 8001720:	460a      	mov	r2, r1
 8001722:	71fb      	strb	r3, [r7, #7]
 8001724:	4613      	mov	r3, r2
 8001726:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2];
    buffer[0] = mode;  // Control byte
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	733b      	strb	r3, [r7, #12]
    buffer[1] = data;  // Data
 800172c:	79bb      	ldrb	r3, [r7, #6]
 800172e:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8001730:	f107 020c 	add.w	r2, r7, #12
 8001734:	f04f 33ff 	mov.w	r3, #4294967295
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2302      	movs	r3, #2
 800173c:	2178      	movs	r1, #120	@ 0x78
 800173e:	4803      	ldr	r0, [pc, #12]	@ (800174c <OLED_Write+0x34>)
 8001740:	f003 ff10 	bl	8005564 <HAL_I2C_Master_Transmit>
}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000224 	.word	0x20000224

08001750 <OLED_Init>:

/**
 * @brief Initialize the OLED
 */
void OLED_Init(void) {
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
    HAL_Delay(100); // Wait for the screen to power up and stabilize
 8001754:	2064      	movs	r0, #100	@ 0x64
 8001756:	f001 f989 	bl	8002a6c <HAL_Delay>

    // Initialization commands (based on the SSD1306 datasheet)
    OLED_Write(OLED_CMD, 0xAE); // Turn off display
 800175a:	21ae      	movs	r1, #174	@ 0xae
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff ffdb 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0x20); // Set memory addressing mode
 8001762:	2120      	movs	r1, #32
 8001764:	2000      	movs	r0, #0
 8001766:	f7ff ffd7 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0x10); // Use horizontal addressing mode
 800176a:	2110      	movs	r1, #16
 800176c:	2000      	movs	r0, #0
 800176e:	f7ff ffd3 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0xB0); // Set page start address
 8001772:	21b0      	movs	r1, #176	@ 0xb0
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff ffcf 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0xC8); // Set COM output scan direction (from top to bottom)
 800177a:	21c8      	movs	r1, #200	@ 0xc8
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff ffcb 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0x00); // Set lower column address
 8001782:	2100      	movs	r1, #0
 8001784:	2000      	movs	r0, #0
 8001786:	f7ff ffc7 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0x10); // Set higher column address
 800178a:	2110      	movs	r1, #16
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff ffc3 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0x40); // Set display start line
 8001792:	2140      	movs	r1, #64	@ 0x40
 8001794:	2000      	movs	r0, #0
 8001796:	f7ff ffbf 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0x81); // Set contrast control
 800179a:	2181      	movs	r1, #129	@ 0x81
 800179c:	2000      	movs	r0, #0
 800179e:	f7ff ffbb 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0xFF); // Maximum contrast
 80017a2:	21ff      	movs	r1, #255	@ 0xff
 80017a4:	2000      	movs	r0, #0
 80017a6:	f7ff ffb7 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0xA1); // Set segment re-map (left to right)
 80017aa:	21a1      	movs	r1, #161	@ 0xa1
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7ff ffb3 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0xA6); // Set normal display mode
 80017b2:	21a6      	movs	r1, #166	@ 0xa6
 80017b4:	2000      	movs	r0, #0
 80017b6:	f7ff ffaf 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0xA8); // Set multiplex ratio
 80017ba:	21a8      	movs	r1, #168	@ 0xa8
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff ffab 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0x3F); // 1/64 duty cycle
 80017c2:	213f      	movs	r1, #63	@ 0x3f
 80017c4:	2000      	movs	r0, #0
 80017c6:	f7ff ffa7 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0xD3); // Set display offset
 80017ca:	21d3      	movs	r1, #211	@ 0xd3
 80017cc:	2000      	movs	r0, #0
 80017ce:	f7ff ffa3 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0x00); // No offset
 80017d2:	2100      	movs	r1, #0
 80017d4:	2000      	movs	r0, #0
 80017d6:	f7ff ff9f 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0xD5); // Set display clock divide ratio
 80017da:	21d5      	movs	r1, #213	@ 0xd5
 80017dc:	2000      	movs	r0, #0
 80017de:	f7ff ff9b 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0xF0); // Set to default value
 80017e2:	21f0      	movs	r1, #240	@ 0xf0
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff ff97 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0xD9); // Set pre-charge period
 80017ea:	21d9      	movs	r1, #217	@ 0xd9
 80017ec:	2000      	movs	r0, #0
 80017ee:	f7ff ff93 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0x22); //
 80017f2:	2122      	movs	r1, #34	@ 0x22
 80017f4:	2000      	movs	r0, #0
 80017f6:	f7ff ff8f 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0xDA); // Set COM hardware configuration
 80017fa:	21da      	movs	r1, #218	@ 0xda
 80017fc:	2000      	movs	r0, #0
 80017fe:	f7ff ff8b 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0x12); //
 8001802:	2112      	movs	r1, #18
 8001804:	2000      	movs	r0, #0
 8001806:	f7ff ff87 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0xDB); // Set VCOMH deselect level
 800180a:	21db      	movs	r1, #219	@ 0xdb
 800180c:	2000      	movs	r0, #0
 800180e:	f7ff ff83 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0x20); // ~0.77×VCC
 8001812:	2120      	movs	r1, #32
 8001814:	2000      	movs	r0, #0
 8001816:	f7ff ff7f 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0x8D); // Set charge pump
 800181a:	218d      	movs	r1, #141	@ 0x8d
 800181c:	2000      	movs	r0, #0
 800181e:	f7ff ff7b 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0x14); // Enable charge pump
 8001822:	2114      	movs	r1, #20
 8001824:	2000      	movs	r0, #0
 8001826:	f7ff ff77 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0xAF); // Turn on display
 800182a:	21af      	movs	r1, #175	@ 0xaf
 800182c:	2000      	movs	r0, #0
 800182e:	f7ff ff73 	bl	8001718 <OLED_Write>
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}

08001836 <OLED_Clear>:

/**
 * @brief Clear the OLED display
 */
void OLED_Clear(void) {
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++) {
 800183c:	2300      	movs	r3, #0
 800183e:	71fb      	strb	r3, [r7, #7]
 8001840:	e01f      	b.n	8001882 <OLED_Clear+0x4c>
        OLED_Write(OLED_CMD, 0xB0 + page); // Set page address
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	3b50      	subs	r3, #80	@ 0x50
 8001846:	b2db      	uxtb	r3, r3
 8001848:	4619      	mov	r1, r3
 800184a:	2000      	movs	r0, #0
 800184c:	f7ff ff64 	bl	8001718 <OLED_Write>
        OLED_Write(OLED_CMD, 0x00);        // Set lower column address
 8001850:	2100      	movs	r1, #0
 8001852:	2000      	movs	r0, #0
 8001854:	f7ff ff60 	bl	8001718 <OLED_Write>
        OLED_Write(OLED_CMD, 0x10);        // Set higher column address
 8001858:	2110      	movs	r1, #16
 800185a:	2000      	movs	r0, #0
 800185c:	f7ff ff5c 	bl	8001718 <OLED_Write>
        for (uint8_t col = 0; col < 128; col++) {
 8001860:	2300      	movs	r3, #0
 8001862:	71bb      	strb	r3, [r7, #6]
 8001864:	e006      	b.n	8001874 <OLED_Clear+0x3e>
            OLED_Write(OLED_DATA, 0x00); // Clear display
 8001866:	2100      	movs	r1, #0
 8001868:	2040      	movs	r0, #64	@ 0x40
 800186a:	f7ff ff55 	bl	8001718 <OLED_Write>
        for (uint8_t col = 0; col < 128; col++) {
 800186e:	79bb      	ldrb	r3, [r7, #6]
 8001870:	3301      	adds	r3, #1
 8001872:	71bb      	strb	r3, [r7, #6]
 8001874:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001878:	2b00      	cmp	r3, #0
 800187a:	daf4      	bge.n	8001866 <OLED_Clear+0x30>
    for (uint8_t page = 0; page < 8; page++) {
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	3301      	adds	r3, #1
 8001880:	71fb      	strb	r3, [r7, #7]
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2b07      	cmp	r3, #7
 8001886:	d9dc      	bls.n	8001842 <OLED_Clear+0xc>
        }
    }
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <OLED_ShowChar>:
 * @brief Display a character at a specified position
 * @param x X-coordinate (column address, 0~127)
 * @param y Page address (row number, 0~7)
 * @param ch Character to display
 */
void OLED_ShowChar(uint8_t x, uint8_t y, char ch) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
 800189e:	460b      	mov	r3, r1
 80018a0:	71bb      	strb	r3, [r7, #6]
 80018a2:	4613      	mov	r3, r2
 80018a4:	717b      	strb	r3, [r7, #5]
    if (ch < 32 || ch > 127) return; // Character out of range
 80018a6:	797b      	ldrb	r3, [r7, #5]
 80018a8:	2b1f      	cmp	r3, #31
 80018aa:	d933      	bls.n	8001914 <OLED_ShowChar+0x80>
 80018ac:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db2f      	blt.n	8001914 <OLED_ShowChar+0x80>

    OLED_Write(OLED_CMD, 0xB0 + y);         // Set page address
 80018b4:	79bb      	ldrb	r3, [r7, #6]
 80018b6:	3b50      	subs	r3, #80	@ 0x50
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	4619      	mov	r1, r3
 80018bc:	2000      	movs	r0, #0
 80018be:	f7ff ff2b 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0x00 + (x & 0x0F)); // Set lower column address
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	4619      	mov	r1, r3
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff ff23 	bl	8001718 <OLED_Write>
    OLED_Write(OLED_CMD, 0x10 + ((x >> 4) & 0x0F)); // Set higher column address
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	3310      	adds	r3, #16
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	4619      	mov	r1, r3
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff ff1a 	bl	8001718 <OLED_Write>

    const uint8_t *font_data = Font8x8[ch - 32]; // Get character dot matrix data
 80018e4:	797b      	ldrb	r3, [r7, #5]
 80018e6:	3b20      	subs	r3, #32
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	4a0c      	ldr	r2, [pc, #48]	@ (800191c <OLED_ShowChar+0x88>)
 80018ec:	4413      	add	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < 8; i++) {
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	e00a      	b.n	800190c <OLED_ShowChar+0x78>
        OLED_Write(OLED_DATA, font_data[i]); // Write character dot matrix data
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	4413      	add	r3, r2
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	4619      	mov	r1, r3
 8001900:	2040      	movs	r0, #64	@ 0x40
 8001902:	f7ff ff09 	bl	8001718 <OLED_Write>
    for (int i = 0; i < 8; i++) {
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3301      	adds	r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b07      	cmp	r3, #7
 8001910:	ddf1      	ble.n	80018f6 <OLED_ShowChar+0x62>
 8001912:	e000      	b.n	8001916 <OLED_ShowChar+0x82>
    if (ch < 32 || ch > 127) return; // Character out of range
 8001914:	bf00      	nop
    }
}
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	0800e824 	.word	0x0800e824

08001920 <OLED_ShowString>:
 * @brief Display a string at a specified position
 * @param x Starting X-coordinate (column address)
 * @param y Starting page address (row number)
 * @param str String to display
 */
void OLED_ShowString(uint8_t x, uint8_t y, char* str) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	603a      	str	r2, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
 800192c:	460b      	mov	r3, r1
 800192e:	71bb      	strb	r3, [r7, #6]
    while (*str) {
 8001930:	e014      	b.n	800195c <OLED_ShowString+0x3c>
        OLED_ShowChar(x, y, *str); // Display individual character
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	781a      	ldrb	r2, [r3, #0]
 8001936:	79b9      	ldrb	r1, [r7, #6]
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ffaa 	bl	8001894 <OLED_ShowChar>
        x += 8;                    // Each character occupies 8 columns
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	3308      	adds	r3, #8
 8001944:	71fb      	strb	r3, [r7, #7]
        if (x > 120) {             // Wrap to the next line if exceeding screen width
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	2b78      	cmp	r3, #120	@ 0x78
 800194a:	d904      	bls.n	8001956 <OLED_ShowString+0x36>
            x = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	71fb      	strb	r3, [r7, #7]
            y++;
 8001950:	79bb      	ldrb	r3, [r7, #6]
 8001952:	3301      	adds	r3, #1
 8001954:	71bb      	strb	r3, [r7, #6]
        }
        str++;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	3301      	adds	r3, #1
 800195a:	603b      	str	r3, [r7, #0]
    while (*str) {
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1e6      	bne.n	8001932 <OLED_ShowString+0x12>
    }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <pulseOximeter_readRegister>:

LEDCurrent IrLedCurrent;


int8_t pulseOximeter_readRegister(uint8_t reg, uint8_t* value)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af02      	add	r7, sp, #8
 8001976:	4603      	mov	r3, r0
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retStatus;
	uint8_t buf[2];

	buf[0] = reg;
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x03;
 8001980:	2303      	movs	r3, #3
 8001982:	737b      	strb	r3, [r7, #13]

	uint8_t address = (I2C_SLAVE_ID | I2C_WRITE);
 8001984:	23ae      	movs	r3, #174	@ 0xae
 8001986:	73fb      	strb	r3, [r7, #15]

	retStatus = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	b299      	uxth	r1, r3
 800198c:	f107 020c 	add.w	r2, r7, #12
 8001990:	f04f 33ff 	mov.w	r3, #4294967295
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	4813      	ldr	r0, [pc, #76]	@ (80019e8 <pulseOximeter_readRegister+0x78>)
 800199a:	f003 fde3 	bl	8005564 <HAL_I2C_Master_Transmit>
 800199e:	4603      	mov	r3, r0
 80019a0:	73bb      	strb	r3, [r7, #14]
	if( retStatus != HAL_OK ){
 80019a2:	7bbb      	ldrb	r3, [r7, #14]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <pulseOximeter_readRegister+0x3e>
		return -1;
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ac:	e018      	b.n	80019e0 <pulseOximeter_readRegister+0x70>
	}

	address = (I2C_SLAVE_ID | I2C_READ);
 80019ae:	23af      	movs	r3, #175	@ 0xaf
 80019b0:	73fb      	strb	r3, [r7, #15]
	retStatus = HAL_I2C_Master_Receive(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	b299      	uxth	r1, r3
 80019b6:	f107 020c 	add.w	r2, r7, #12
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	2301      	movs	r3, #1
 80019c2:	4809      	ldr	r0, [pc, #36]	@ (80019e8 <pulseOximeter_readRegister+0x78>)
 80019c4:	f003 fecc 	bl	8005760 <HAL_I2C_Master_Receive>
 80019c8:	4603      	mov	r3, r0
 80019ca:	73bb      	strb	r3, [r7, #14]
	if( retStatus != HAL_OK ){
 80019cc:	7bbb      	ldrb	r3, [r7, #14]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <pulseOximeter_readRegister+0x68>
		return -1;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	e003      	b.n	80019e0 <pulseOximeter_readRegister+0x70>
	}

	*value = buf[0];
 80019d8:	7b3a      	ldrb	r2, [r7, #12]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	701a      	strb	r2, [r3, #0]

	return 0;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000224 	.word	0x20000224

080019ec <pulseOximeter_writeRegister>:

HAL_StatusTypeDef pulseOximeter_writeRegister(uint8_t reg, uint8_t value)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af02      	add	r7, sp, #8
 80019f2:	4603      	mov	r3, r0
 80019f4:	460a      	mov	r2, r1
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	4613      	mov	r3, r2
 80019fa:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef retStatus;
	uint8_t buf[2];
	buf[0] = reg;
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 8001a00:	79bb      	ldrb	r3, [r7, #6]
 8001a02:	737b      	strb	r3, [r7, #13]

	uint8_t address = (I2C_SLAVE_ID | I2C_WRITE);
 8001a04:	23ae      	movs	r3, #174	@ 0xae
 8001a06:	73fb      	strb	r3, [r7, #15]
	retStatus = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 2, HAL_MAX_DELAY);
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	b299      	uxth	r1, r3
 8001a0c:	f107 020c 	add.w	r2, r7, #12
 8001a10:	f04f 33ff 	mov.w	r3, #4294967295
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2302      	movs	r3, #2
 8001a18:	4804      	ldr	r0, [pc, #16]	@ (8001a2c <pulseOximeter_writeRegister+0x40>)
 8001a1a:	f003 fda3 	bl	8005564 <HAL_I2C_Master_Transmit>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	73bb      	strb	r3, [r7, #14]

	return retStatus;
 8001a22:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000224 	.word	0x20000224

08001a30 <pulseOximeter_setMeasurementMode>:


void pulseOximeter_setMeasurementMode(MEASUREMENT_MODE mode)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
	int8_t readStatus = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	73fb      	strb	r3, [r7, #15]
	uint8_t readResult;

	readStatus = pulseOximeter_readRegister(MODE_CONFIG, &readResult);
 8001a3e:	f107 030e 	add.w	r3, r7, #14
 8001a42:	4619      	mov	r1, r3
 8001a44:	2009      	movs	r0, #9
 8001a46:	f7ff ff93 	bl	8001970 <pulseOximeter_readRegister>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	73fb      	strb	r3, [r7, #15]
	if( readStatus == -1){
 8001a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a56:	d02c      	beq.n	8001ab2 <pulseOximeter_setMeasurementMode+0x82>
		return;
	}

	readResult &= ~(0x7 << 0);
 8001a58:	7bbb      	ldrb	r3, [r7, #14]
 8001a5a:	f023 0307 	bic.w	r3, r3, #7
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	73bb      	strb	r3, [r7, #14]

	switch(mode){
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d012      	beq.n	8001a8e <pulseOximeter_setMeasurementMode+0x5e>
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	dc24      	bgt.n	8001ab6 <pulseOximeter_setMeasurementMode+0x86>
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d002      	beq.n	8001a76 <pulseOximeter_setMeasurementMode+0x46>
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d006      	beq.n	8001a82 <pulseOximeter_setMeasurementMode+0x52>
	case HEART_RATE:	readResult = readResult | (0x02 << 0); break;
	case SPO2:	readResult = readResult | (0x03 << 0); break;
	case MULTI_LED:	readResult = readResult | (0x07 << 0); break;
	default: return; break;
 8001a74:	e01f      	b.n	8001ab6 <pulseOximeter_setMeasurementMode+0x86>
	case HEART_RATE:	readResult = readResult | (0x02 << 0); break;
 8001a76:	7bbb      	ldrb	r3, [r7, #14]
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	73bb      	strb	r3, [r7, #14]
 8001a80:	e00b      	b.n	8001a9a <pulseOximeter_setMeasurementMode+0x6a>
	case SPO2:	readResult = readResult | (0x03 << 0); break;
 8001a82:	7bbb      	ldrb	r3, [r7, #14]
 8001a84:	f043 0303 	orr.w	r3, r3, #3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	73bb      	strb	r3, [r7, #14]
 8001a8c:	e005      	b.n	8001a9a <pulseOximeter_setMeasurementMode+0x6a>
	case MULTI_LED:	readResult = readResult | (0x07 << 0); break;
 8001a8e:	7bbb      	ldrb	r3, [r7, #14]
 8001a90:	f043 0307 	orr.w	r3, r3, #7
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	73bb      	strb	r3, [r7, #14]
 8001a98:	bf00      	nop
	}

	if( pulseOximeter_writeRegister(MODE_CONFIG, readResult) != HAL_OK){
 8001a9a:	7bbb      	ldrb	r3, [r7, #14]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	2009      	movs	r0, #9
 8001aa0:	f7ff ffa4 	bl	80019ec <pulseOximeter_writeRegister>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d107      	bne.n	8001aba <pulseOximeter_setMeasurementMode+0x8a>
		return;
	}
	else{
		measurementMode = mode;
 8001aaa:	4a06      	ldr	r2, [pc, #24]	@ (8001ac4 <pulseOximeter_setMeasurementMode+0x94>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	7013      	strb	r3, [r2, #0]
 8001ab0:	e004      	b.n	8001abc <pulseOximeter_setMeasurementMode+0x8c>
		return;
 8001ab2:	bf00      	nop
 8001ab4:	e002      	b.n	8001abc <pulseOximeter_setMeasurementMode+0x8c>
	default: return; break;
 8001ab6:	bf00      	nop
 8001ab8:	e000      	b.n	8001abc <pulseOximeter_setMeasurementMode+0x8c>
		return;
 8001aba:	bf00      	nop
	}
}
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000000 	.word	0x20000000

08001ac8 <pulseOximeter_resetRegisters>:
		default: return NORMAL; break;
	}
}

void pulseOximeter_resetRegisters(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
	int8_t readStatus;
	uint8_t readResult;


	readStatus = pulseOximeter_readRegister(MODE_CONFIG, &readResult);
 8001ace:	1dbb      	adds	r3, r7, #6
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	2009      	movs	r0, #9
 8001ad4:	f7ff ff4c 	bl	8001970 <pulseOximeter_readRegister>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	71fb      	strb	r3, [r7, #7]
	if( readStatus == -1){
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae4:	d011      	beq.n	8001b0a <pulseOximeter_resetRegisters+0x42>
		return;
	}

	readResult &= ~(0x01 << 6);
 8001ae6:	79bb      	ldrb	r3, [r7, #6]
 8001ae8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	71bb      	strb	r3, [r7, #6]
	readResult = readResult | (0x01 << 6);
 8001af0:	79bb      	ldrb	r3, [r7, #6]
 8001af2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	71bb      	strb	r3, [r7, #6]
	if( pulseOximeter_writeRegister(MODE_CONFIG, readResult) != HAL_OK){
 8001afa:	79bb      	ldrb	r3, [r7, #6]
 8001afc:	4619      	mov	r1, r3
 8001afe:	2009      	movs	r0, #9
 8001b00:	f7ff ff74 	bl	80019ec <pulseOximeter_writeRegister>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	e000      	b.n	8001b0c <pulseOximeter_resetRegisters+0x44>
		return;
 8001b0a:	bf00      	nop
		return;
	}
}
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <pulseOximeter_setLedCurrent>:

void pulseOximeter_setLedCurrent(uint8_t led, float currentLevel)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	ed87 0a00 	vstr	s0, [r7]
 8001b20:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	73bb      	strb	r3, [r7, #14]
	uint8_t ledRegister = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	73fb      	strb	r3, [r7, #15]

	switch(led){
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d002      	beq.n	8001b36 <pulseOximeter_setLedCurrent+0x22>
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d003      	beq.n	8001b3c <pulseOximeter_setLedCurrent+0x28>
 8001b34:	e005      	b.n	8001b42 <pulseOximeter_setLedCurrent+0x2e>
	case RED_LED: ledRegister = LED_PULSE_AMP_1; break;
 8001b36:	230c      	movs	r3, #12
 8001b38:	73fb      	strb	r3, [r7, #15]
 8001b3a:	e002      	b.n	8001b42 <pulseOximeter_setLedCurrent+0x2e>
	case IR_LED:	ledRegister = LED_PULSE_AMP_2; break;
 8001b3c:	230d      	movs	r3, #13
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	bf00      	nop
	}

	// slope derived from MAX30102 DataSheet
	value = (uint8_t)(5.0 * currentLevel);
 8001b42:	6838      	ldr	r0, [r7, #0]
 8001b44:	f7fe fd00 	bl	8000548 <__aeabi_f2d>
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b78 <pulseOximeter_setLedCurrent+0x64>)
 8001b4e:	f7fe fd53 	bl	80005f8 <__aeabi_dmul>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f7ff f825 	bl	8000ba8 <__aeabi_d2uiz>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	73bb      	strb	r3, [r7, #14]

	if( pulseOximeter_writeRegister(ledRegister, value) != HAL_OK){
 8001b62:	7bba      	ldrb	r2, [r7, #14]
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff3f 	bl	80019ec <pulseOximeter_writeRegister>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
		return;
	}
	else{

	}
}
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40140000 	.word	0x40140000

08001b7c <pulseOximeter_setSampleRate>:

	return currentLevel;
}

void pulseOximeter_setSampleRate(uint8_t sampleRate)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
	int8_t readStatus = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
	uint8_t readResult;

	readStatus = pulseOximeter_readRegister(SPO2_CONFIG, &readResult);
 8001b8a:	f107 030e 	add.w	r3, r7, #14
 8001b8e:	4619      	mov	r1, r3
 8001b90:	200a      	movs	r0, #10
 8001b92:	f7ff feed 	bl	8001970 <pulseOximeter_readRegister>
 8001b96:	4603      	mov	r3, r0
 8001b98:	73fb      	strb	r3, [r7, #15]
	if( readStatus == -1){
 8001b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba2:	d015      	beq.n	8001bd0 <pulseOximeter_setSampleRate+0x54>
		return;
	}

	readResult &= ~(0x1C << 0);
 8001ba4:	7bbb      	ldrb	r3, [r7, #14]
 8001ba6:	f023 031c 	bic.w	r3, r3, #28
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	73bb      	strb	r3, [r7, #14]

	readResult = readResult | (sampleRate << 2);
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	b25a      	sxtb	r2, r3
 8001bb4:	7bbb      	ldrb	r3, [r7, #14]
 8001bb6:	b25b      	sxtb	r3, r3
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	b25b      	sxtb	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	73bb      	strb	r3, [r7, #14]

	if( pulseOximeter_writeRegister(SPO2_CONFIG, readResult) != HAL_OK){
 8001bc0:	7bbb      	ldrb	r3, [r7, #14]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	200a      	movs	r0, #10
 8001bc6:	f7ff ff11 	bl	80019ec <pulseOximeter_writeRegister>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	e000      	b.n	8001bd2 <pulseOximeter_setSampleRate+0x56>
		return;
 8001bd0:	bf00      	nop
		return;
	}
	else{

	}
}
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <pulseOximeter_setPulseWidth>:

	return (SAMPLE_RATE)result;
}

void pulseOximeter_setPulseWidth(uint8_t pulseWidth)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
	int8_t readStatus = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	73fb      	strb	r3, [r7, #15]
	uint8_t readResult;

	readStatus = pulseOximeter_readRegister(SPO2_CONFIG, &readResult);
 8001be6:	f107 030e 	add.w	r3, r7, #14
 8001bea:	4619      	mov	r1, r3
 8001bec:	200a      	movs	r0, #10
 8001bee:	f7ff febf 	bl	8001970 <pulseOximeter_readRegister>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	73fb      	strb	r3, [r7, #15]
	if( readStatus == -1){
 8001bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfe:	d032      	beq.n	8001c66 <pulseOximeter_setPulseWidth+0x8e>
		return;
	}

	readResult &= ~(0x03 << 0);
 8001c00:	7bbb      	ldrb	r3, [r7, #14]
 8001c02:	f023 0303 	bic.w	r3, r3, #3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	73bb      	strb	r3, [r7, #14]

	switch(pulseWidth)
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d822      	bhi.n	8001c56 <pulseOximeter_setPulseWidth+0x7e>
 8001c10:	a201      	add	r2, pc, #4	@ (adr r2, 8001c18 <pulseOximeter_setPulseWidth+0x40>)
 8001c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c16:	bf00      	nop
 8001c18:	08001c2d 	.word	0x08001c2d
 8001c1c:	08001c33 	.word	0x08001c33
 8001c20:	08001c3f 	.word	0x08001c3f
 8001c24:	08001c4b 	.word	0x08001c4b
 8001c28:	08001c57 	.word	0x08001c57
	{
	case _69_US: readResult = readResult | 0; break;
 8001c2c:	7bbb      	ldrb	r3, [r7, #14]
 8001c2e:	73bb      	strb	r3, [r7, #14]
 8001c30:	e011      	b.n	8001c56 <pulseOximeter_setPulseWidth+0x7e>
	case _118_US: readResult = readResult | (0x01 << 0); break;
 8001c32:	7bbb      	ldrb	r3, [r7, #14]
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	73bb      	strb	r3, [r7, #14]
 8001c3c:	e00b      	b.n	8001c56 <pulseOximeter_setPulseWidth+0x7e>
	case _215_US: readResult = readResult | (0x02 << 0); break;
 8001c3e:	7bbb      	ldrb	r3, [r7, #14]
 8001c40:	f043 0302 	orr.w	r3, r3, #2
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	73bb      	strb	r3, [r7, #14]
 8001c48:	e005      	b.n	8001c56 <pulseOximeter_setPulseWidth+0x7e>
	case _411_US: readResult = readResult | (0x03 << 0); break;
 8001c4a:	7bbb      	ldrb	r3, [r7, #14]
 8001c4c:	f043 0303 	orr.w	r3, r3, #3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	73bb      	strb	r3, [r7, #14]
 8001c54:	bf00      	nop
	case _PULSE_WIDTH_FAIL: break;
	}

	if( pulseOximeter_writeRegister(SPO2_CONFIG, readResult) != HAL_OK){
 8001c56:	7bbb      	ldrb	r3, [r7, #14]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	200a      	movs	r0, #10
 8001c5c:	f7ff fec6 	bl	80019ec <pulseOximeter_writeRegister>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	e000      	b.n	8001c68 <pulseOximeter_setPulseWidth+0x90>
		return;
 8001c66:	bf00      	nop
		return;
	}
	else{

	}
}
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop

08001c70 <pulseOximeter_resetFifo>:
		return (PULSE_WIDTH)result;
}

// Write zero to all FIFO registers
void pulseOximeter_resetFifo(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	pulseOximeter_writeRegister(FIFO_WRITE_PTR, 0);
 8001c74:	2100      	movs	r1, #0
 8001c76:	2004      	movs	r0, #4
 8001c78:	f7ff feb8 	bl	80019ec <pulseOximeter_writeRegister>
	pulseOximeter_writeRegister(FIFO_READ_POINTER, 0);
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	2006      	movs	r0, #6
 8001c80:	f7ff feb4 	bl	80019ec <pulseOximeter_writeRegister>
	pulseOximeter_writeRegister(FIFO_OVF_COUNTER, 0);
 8001c84:	2100      	movs	r1, #0
 8001c86:	2005      	movs	r0, #5
 8001c88:	f7ff feb0 	bl	80019ec <pulseOximeter_writeRegister>
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <pulseOximeter_initFifo>:

//
void pulseOximeter_initFifo(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
		// FIFO almost full interrupt enable
		pulseOximeter_writeRegister(INT_ENABLE_1, 0x40);

		pulseOximeter_clearInterrupt();
	}else{
		pulseOximeter_writeRegister(FIFO_CONFIG, 0x0F);
 8001c94:	210f      	movs	r1, #15
 8001c96:	2008      	movs	r0, #8
 8001c98:	f7ff fea8 	bl	80019ec <pulseOximeter_writeRegister>
		pulseOximeter_writeRegister(INT_ENABLE_1, 0x00);
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	2002      	movs	r0, #2
 8001ca0:	f7ff fea4 	bl	80019ec <pulseOximeter_writeRegister>
	}
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <pulseOximeter_readFifo>:

FIFO_LED_DATA pulseOximeter_readFifo(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af02      	add	r7, sp, #8
	uint8_t address;uint8_t buf[12];
	uint8_t numBytes = 6;
 8001cae:	2306      	movs	r3, #6
 8001cb0:	75fb      	strb	r3, [r7, #23]

	buf[0] = FIFO_DATA;
 8001cb2:	2307      	movs	r3, #7
 8001cb4:	713b      	strb	r3, [r7, #4]

	address = (I2C_SLAVE_ID | I2C_WRITE);
 8001cb6:	23ae      	movs	r3, #174	@ 0xae
 8001cb8:	75bb      	strb	r3, [r7, #22]

	HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 8001cba:	7dbb      	ldrb	r3, [r7, #22]
 8001cbc:	b299      	uxth	r1, r3
 8001cbe:	1d3a      	adds	r2, r7, #4
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	481b      	ldr	r0, [pc, #108]	@ (8001d38 <pulseOximeter_readFifo+0x90>)
 8001cca:	f003 fc4b 	bl	8005564 <HAL_I2C_Master_Transmit>

	address = (I2C_SLAVE_ID | I2C_READ);
 8001cce:	23af      	movs	r3, #175	@ 0xaf
 8001cd0:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Master_Receive(&hi2c1, address, buf, numBytes, HAL_MAX_DELAY);
 8001cd2:	7dbb      	ldrb	r3, [r7, #22]
 8001cd4:	b299      	uxth	r1, r3
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	1d3a      	adds	r2, r7, #4
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	9000      	str	r0, [sp, #0]
 8001ce2:	4815      	ldr	r0, [pc, #84]	@ (8001d38 <pulseOximeter_readFifo+0x90>)
 8001ce4:	f003 fd3c 	bl	8005760 <HAL_I2C_Master_Receive>

	fifoData.irLedRaw = 0;
 8001ce8:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <pulseOximeter_readFifo+0x94>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	805a      	strh	r2, [r3, #2]
	fifoData.redLedRaw = 0;
 8001cee:	4b13      	ldr	r3, [pc, #76]	@ (8001d3c <pulseOximeter_readFifo+0x94>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	801a      	strh	r2, [r3, #0]

	fifoData.irLedRaw = (buf[4] << 8) | (buf[5] << 0);
 8001cf4:	7a3b      	ldrb	r3, [r7, #8]
 8001cf6:	021b      	lsls	r3, r3, #8
 8001cf8:	b21a      	sxth	r2, r3
 8001cfa:	7a7b      	ldrb	r3, [r7, #9]
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	4b0d      	ldr	r3, [pc, #52]	@ (8001d3c <pulseOximeter_readFifo+0x94>)
 8001d06:	805a      	strh	r2, [r3, #2]
	fifoData.redLedRaw =(buf[1] << 8) | (buf[0] << 0);
 8001d08:	797b      	ldrb	r3, [r7, #5]
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	b21a      	sxth	r2, r3
 8001d0e:	793b      	ldrb	r3, [r7, #4]
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	4313      	orrs	r3, r2
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <pulseOximeter_readFifo+0x94>)
 8001d1a:	801a      	strh	r2, [r3, #0]

	return fifoData;
 8001d1c:	4b07      	ldr	r3, [pc, #28]	@ (8001d3c <pulseOximeter_readFifo+0x94>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	2300      	movs	r3, #0
 8001d24:	8a3a      	ldrh	r2, [r7, #16]
 8001d26:	f362 030f 	bfi	r3, r2, #0, #16
 8001d2a:	8a7a      	ldrh	r2, [r7, #18]
 8001d2c:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000224 	.word	0x20000224
 8001d3c:	2000038c 	.word	0x2000038c

08001d40 <pulseOximeter_readTemperature>:
	pulseOximeter_readRegister(INT_STATUS_1, &readResult);
}


float pulseOximeter_readTemperature(void)
{
 8001d40:	b5b0      	push	{r4, r5, r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
	uint8_t tempDone = 1;
 8001d46:	2301      	movs	r3, #1
 8001d48:	71fb      	strb	r3, [r7, #7]
	int8_t tempFraction;
	uint8_t tempInteger;
	float temperature;

	// Initiate a temperature conversion
	pulseOximeter_writeRegister(DIE_TEMP_CONFIG, 1);
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	2021      	movs	r0, #33	@ 0x21
 8001d4e:	f7ff fe4d 	bl	80019ec <pulseOximeter_writeRegister>

	// Wait for conversion finish
	while( tempDone != 0 )
 8001d52:	e004      	b.n	8001d5e <pulseOximeter_readTemperature+0x1e>
	{
		pulseOximeter_readRegister(DIE_TEMP_CONFIG, &tempDone);
 8001d54:	1dfb      	adds	r3, r7, #7
 8001d56:	4619      	mov	r1, r3
 8001d58:	2021      	movs	r0, #33	@ 0x21
 8001d5a:	f7ff fe09 	bl	8001970 <pulseOximeter_readRegister>
	while( tempDone != 0 )
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f7      	bne.n	8001d54 <pulseOximeter_readTemperature+0x14>
	}

	// Read Die temperature integer register
	pulseOximeter_readRegister(DIE_TEMP_INTEGER, &readResult);
 8001d64:	1dbb      	adds	r3, r7, #6
 8001d66:	4619      	mov	r1, r3
 8001d68:	201f      	movs	r0, #31
 8001d6a:	f7ff fe01 	bl	8001970 <pulseOximeter_readRegister>
	tempInteger = readResult;
 8001d6e:	79bb      	ldrb	r3, [r7, #6]
 8001d70:	73fb      	strb	r3, [r7, #15]

	// Read Die temperature fraction register
	pulseOximeter_readRegister(DIE_TEMP_FRACTION, &readResult);
 8001d72:	1dbb      	adds	r3, r7, #6
 8001d74:	4619      	mov	r1, r3
 8001d76:	2020      	movs	r0, #32
 8001d78:	f7ff fdfa 	bl	8001970 <pulseOximeter_readRegister>
	tempFraction = readResult;
 8001d7c:	79bb      	ldrb	r3, [r7, #6]
 8001d7e:	73bb      	strb	r3, [r7, #14]

	// Conversion factor found in MAX30102 DataSheet
	temperature = tempInteger + (tempFraction*0.0625);
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fbce 	bl	8000524 <__aeabi_i2d>
 8001d88:	4604      	mov	r4, r0
 8001d8a:	460d      	mov	r5, r1
 8001d8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fbc7 	bl	8000524 <__aeabi_i2d>
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <pulseOximeter_readTemperature+0x8c>)
 8001d9c:	f7fe fc2c 	bl	80005f8 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4620      	mov	r0, r4
 8001da6:	4629      	mov	r1, r5
 8001da8:	f7fe fa70 	bl	800028c <__adddf3>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f7fe ff18 	bl	8000be8 <__aeabi_d2f>
 8001db8:	4603      	mov	r3, r0
 8001dba:	60bb      	str	r3, [r7, #8]

	return temperature;
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	ee07 3a90 	vmov	s15, r3
}
 8001dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bdb0      	pop	{r4, r5, r7, pc}
 8001dcc:	3fb00000 	.word	0x3fb00000

08001dd0 <pulseOximeter_update>:

MAX30102 pulseOximeter_update(FIFO_LED_DATA m_fifoData)
{
 8001dd0:	b5b0      	push	{r4, r5, r7, lr}
 8001dd2:	b08e      	sub	sp, #56	@ 0x38
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
	MAX30102 result = {
 8001dda:	f107 0308 	add.w	r3, r7, #8
 8001dde:	2228      	movs	r2, #40	@ 0x28
 8001de0:	2100      	movs	r1, #0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f00a fb61 	bl	800c4aa <memset>
 8001de8:	4b99      	ldr	r3, [pc, #612]	@ (8002050 <pulseOximeter_update+0x280>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	61fb      	str	r3, [r7, #28]
	/*float dcFilteredIR*/ 0.0,
	/*float dcFilteredRed*/ 0.0,
	/*float temperature;*/ 0.0
  };

	result.temperature = pulseOximeter_readTemperature();
 8001dee:	f7ff ffa7 	bl	8001d40 <pulseOximeter_readTemperature>
 8001df2:	eef0 7a40 	vmov.f32	s15, s0
 8001df6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	dcFilterIR = dcRemoval( (float)m_fifoData.irLedRaw, dcFilterIR.w, ALPHA );
 8001dfa:	887b      	ldrh	r3, [r7, #2]
 8001dfc:	ee07 3a90 	vmov	s15, r3
 8001e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e04:	4b93      	ldr	r3, [pc, #588]	@ (8002054 <pulseOximeter_update+0x284>)
 8001e06:	ed93 7a00 	vldr	s14, [r3]
 8001e0a:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 8002058 <pulseOximeter_update+0x288>
 8001e0e:	eef0 0a47 	vmov.f32	s1, s14
 8001e12:	eeb0 0a67 	vmov.f32	s0, s15
 8001e16:	f7ff f8af 	bl	8000f78 <dcRemoval>
 8001e1a:	eeb0 7a40 	vmov.f32	s14, s0
 8001e1e:	eef0 7a60 	vmov.f32	s15, s1
 8001e22:	4b8c      	ldr	r3, [pc, #560]	@ (8002054 <pulseOximeter_update+0x284>)
 8001e24:	ed83 7a00 	vstr	s14, [r3]
 8001e28:	edc3 7a01 	vstr	s15, [r3, #4]
	dcFilterRed = dcRemoval( (float)m_fifoData.redLedRaw, dcFilterRed.w, ALPHA );
 8001e2c:	883b      	ldrh	r3, [r7, #0]
 8001e2e:	ee07 3a90 	vmov	s15, r3
 8001e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e36:	4b89      	ldr	r3, [pc, #548]	@ (800205c <pulseOximeter_update+0x28c>)
 8001e38:	ed93 7a00 	vldr	s14, [r3]
 8001e3c:	ed9f 1a86 	vldr	s2, [pc, #536]	@ 8002058 <pulseOximeter_update+0x288>
 8001e40:	eef0 0a47 	vmov.f32	s1, s14
 8001e44:	eeb0 0a67 	vmov.f32	s0, s15
 8001e48:	f7ff f896 	bl	8000f78 <dcRemoval>
 8001e4c:	eeb0 7a40 	vmov.f32	s14, s0
 8001e50:	eef0 7a60 	vmov.f32	s15, s1
 8001e54:	4b81      	ldr	r3, [pc, #516]	@ (800205c <pulseOximeter_update+0x28c>)
 8001e56:	ed83 7a00 	vstr	s14, [r3]
 8001e5a:	edc3 7a01 	vstr	s15, [r3, #4]

	float meanDiffResIR = meanDiff( dcFilterIR.result, &meanDiffIR);
 8001e5e:	4b7d      	ldr	r3, [pc, #500]	@ (8002054 <pulseOximeter_update+0x284>)
 8001e60:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e64:	487e      	ldr	r0, [pc, #504]	@ (8002060 <pulseOximeter_update+0x290>)
 8001e66:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6a:	f7ff f901 	bl	8001070 <meanDiff>
 8001e6e:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	lowPassButterworthFilter( meanDiffResIR/*-dcFilterIR.result*/, &lpbFilterIR );
 8001e72:	487c      	ldr	r0, [pc, #496]	@ (8002064 <pulseOximeter_update+0x294>)
 8001e74:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001e78:	f7ff f8b2 	bl	8000fe0 <lowPassButterworthFilter>

	irACValueSqSum += dcFilterIR.result * dcFilterIR.result;
 8001e7c:	4b75      	ldr	r3, [pc, #468]	@ (8002054 <pulseOximeter_update+0x284>)
 8001e7e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e82:	4b74      	ldr	r3, [pc, #464]	@ (8002054 <pulseOximeter_update+0x284>)
 8001e84:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e8c:	4b76      	ldr	r3, [pc, #472]	@ (8002068 <pulseOximeter_update+0x298>)
 8001e8e:	edd3 7a00 	vldr	s15, [r3]
 8001e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e96:	4b74      	ldr	r3, [pc, #464]	@ (8002068 <pulseOximeter_update+0x298>)
 8001e98:	edc3 7a00 	vstr	s15, [r3]
	redACValueSqSum += dcFilterRed.result * dcFilterRed.result;
 8001e9c:	4b6f      	ldr	r3, [pc, #444]	@ (800205c <pulseOximeter_update+0x28c>)
 8001e9e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ea2:	4b6e      	ldr	r3, [pc, #440]	@ (800205c <pulseOximeter_update+0x28c>)
 8001ea4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ea8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eac:	4b6f      	ldr	r3, [pc, #444]	@ (800206c <pulseOximeter_update+0x29c>)
 8001eae:	edd3 7a00 	vldr	s15, [r3]
 8001eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800206c <pulseOximeter_update+0x29c>)
 8001eb8:	edc3 7a00 	vstr	s15, [r3]
	samplesRecorded++;
 8001ebc:	4b6c      	ldr	r3, [pc, #432]	@ (8002070 <pulseOximeter_update+0x2a0>)
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	4b6a      	ldr	r3, [pc, #424]	@ (8002070 <pulseOximeter_update+0x2a0>)
 8001ec6:	801a      	strh	r2, [r3, #0]

	if( detectPulse( lpbFilterIR.result ) && samplesRecorded > 0 )
 8001ec8:	4b66      	ldr	r3, [pc, #408]	@ (8002064 <pulseOximeter_update+0x294>)
 8001eca:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ece:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed2:	f000 f8d9 	bl	8002088 <detectPulse>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 8088 	beq.w	8001fee <pulseOximeter_update+0x21e>
 8001ede:	4b64      	ldr	r3, [pc, #400]	@ (8002070 <pulseOximeter_update+0x2a0>)
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8083 	beq.w	8001fee <pulseOximeter_update+0x21e>
	{
		result.pulseDetected=true;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	723b      	strb	r3, [r7, #8]
		pulsesDetected++;
 8001eec:	4b61      	ldr	r3, [pc, #388]	@ (8002074 <pulseOximeter_update+0x2a4>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	4b5f      	ldr	r3, [pc, #380]	@ (8002074 <pulseOximeter_update+0x2a4>)
 8001ef6:	801a      	strh	r2, [r3, #0]

		float ratioRMS = log( sqrt(redACValueSqSum/samplesRecorded) ) / log( sqrt(irACValueSqSum/samplesRecorded) );
 8001ef8:	4b5c      	ldr	r3, [pc, #368]	@ (800206c <pulseOximeter_update+0x29c>)
 8001efa:	ed93 7a00 	vldr	s14, [r3]
 8001efe:	4b5c      	ldr	r3, [pc, #368]	@ (8002070 <pulseOximeter_update+0x2a0>)
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f0a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001f0e:	ee16 0a90 	vmov	r0, s13
 8001f12:	f7fe fb19 	bl	8000548 <__aeabi_f2d>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	ec43 2b10 	vmov	d0, r2, r3
 8001f1e:	f00c f971 	bl	800e204 <sqrt>
 8001f22:	eeb0 7a40 	vmov.f32	s14, s0
 8001f26:	eef0 7a60 	vmov.f32	s15, s1
 8001f2a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f2e:	eef0 0a67 	vmov.f32	s1, s15
 8001f32:	f00c f929 	bl	800e188 <log>
 8001f36:	ec55 4b10 	vmov	r4, r5, d0
 8001f3a:	4b4b      	ldr	r3, [pc, #300]	@ (8002068 <pulseOximeter_update+0x298>)
 8001f3c:	ed93 7a00 	vldr	s14, [r3]
 8001f40:	4b4b      	ldr	r3, [pc, #300]	@ (8002070 <pulseOximeter_update+0x2a0>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	ee07 3a90 	vmov	s15, r3
 8001f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f4c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001f50:	ee16 0a90 	vmov	r0, s13
 8001f54:	f7fe faf8 	bl	8000548 <__aeabi_f2d>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	ec43 2b10 	vmov	d0, r2, r3
 8001f60:	f00c f950 	bl	800e204 <sqrt>
 8001f64:	eeb0 7a40 	vmov.f32	s14, s0
 8001f68:	eef0 7a60 	vmov.f32	s15, s1
 8001f6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001f70:	eef0 0a67 	vmov.f32	s1, s15
 8001f74:	f00c f908 	bl	800e188 <log>
 8001f78:	ec53 2b10 	vmov	r2, r3, d0
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	4629      	mov	r1, r5
 8001f80:	f7fe fc64 	bl	800084c <__aeabi_ddiv>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f7fe fe2c 	bl	8000be8 <__aeabi_d2f>
 8001f90:	4603      	mov	r3, r0
 8001f92:	633b      	str	r3, [r7, #48]	@ 0x30

		//This is my adjusted standard model, so it shows 0.89 as 94% saturation. It is probably far from correct, requires proper empircal calibration
		currentSpO2Value = 110.0 - 18.0 * ratioRMS;
 8001f94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f96:	f7fe fad7 	bl	8000548 <__aeabi_f2d>
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	4b36      	ldr	r3, [pc, #216]	@ (8002078 <pulseOximeter_update+0x2a8>)
 8001fa0:	f7fe fb2a 	bl	80005f8 <__aeabi_dmul>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	f04f 0000 	mov.w	r0, #0
 8001fac:	4933      	ldr	r1, [pc, #204]	@ (800207c <pulseOximeter_update+0x2ac>)
 8001fae:	f7fe f96b 	bl	8000288 <__aeabi_dsub>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f7fe fe15 	bl	8000be8 <__aeabi_d2f>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4a23      	ldr	r2, [pc, #140]	@ (8002050 <pulseOximeter_update+0x280>)
 8001fc2:	6013      	str	r3, [r2, #0]
		result.SpO2 = currentSpO2Value;
 8001fc4:	4b22      	ldr	r3, [pc, #136]	@ (8002050 <pulseOximeter_update+0x280>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	61fb      	str	r3, [r7, #28]

		if( pulsesDetected % RESET_SPO2_EVERY_N_PULSES == 0)
 8001fca:	4b2a      	ldr	r3, [pc, #168]	@ (8002074 <pulseOximeter_update+0x2a4>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10a      	bne.n	8001fee <pulseOximeter_update+0x21e>
		{
			irACValueSqSum = 0;
 8001fd8:	4b23      	ldr	r3, [pc, #140]	@ (8002068 <pulseOximeter_update+0x298>)
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
			redACValueSqSum = 0;
 8001fe0:	4b22      	ldr	r3, [pc, #136]	@ (800206c <pulseOximeter_update+0x29c>)
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
			samplesRecorded = 0;
 8001fe8:	4b21      	ldr	r3, [pc, #132]	@ (8002070 <pulseOximeter_update+0x2a0>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	801a      	strh	r2, [r3, #0]
		}
	}

	balanceIntesities( dcFilterRed.w, dcFilterIR.w );
 8001fee:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <pulseOximeter_update+0x28c>)
 8001ff0:	edd3 7a00 	vldr	s15, [r3]
 8001ff4:	4b17      	ldr	r3, [pc, #92]	@ (8002054 <pulseOximeter_update+0x284>)
 8001ff6:	ed93 7a00 	vldr	s14, [r3]
 8001ffa:	eef0 0a47 	vmov.f32	s1, s14
 8001ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8002002:	f000 f94d 	bl	80022a0 <balanceIntesities>


	result.heartBPM = currentBPM;
 8002006:	4b1e      	ldr	r3, [pc, #120]	@ (8002080 <pulseOximeter_update+0x2b0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60fb      	str	r3, [r7, #12]
	result.irCardiogram = lpbFilterIR.result;
 800200c:	4b15      	ldr	r3, [pc, #84]	@ (8002064 <pulseOximeter_update+0x294>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	613b      	str	r3, [r7, #16]
	result.irDcValue = dcFilterIR.w;
 8002012:	4b10      	ldr	r3, [pc, #64]	@ (8002054 <pulseOximeter_update+0x284>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	617b      	str	r3, [r7, #20]
	result.redDcValue = dcFilterRed.w;
 8002018:	4b10      	ldr	r3, [pc, #64]	@ (800205c <pulseOximeter_update+0x28c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	61bb      	str	r3, [r7, #24]
	result.lastBeatThreshold = lastBeatThreshold;
 800201e:	4b19      	ldr	r3, [pc, #100]	@ (8002084 <pulseOximeter_update+0x2b4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	623b      	str	r3, [r7, #32]
	result.dcFilteredIR = dcFilterIR.result;
 8002024:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <pulseOximeter_update+0x284>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
	result.dcFilteredRed = dcFilterRed.result;
 800202a:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <pulseOximeter_update+0x28c>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	62bb      	str	r3, [r7, #40]	@ 0x28

	return result;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	461d      	mov	r5, r3
 8002034:	f107 0408 	add.w	r4, r7, #8
 8002038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800203c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002040:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002044:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	3738      	adds	r7, #56	@ 0x38
 800204c:	46bd      	mov	sp, r7
 800204e:	bdb0      	pop	{r4, r5, r7, pc}
 8002050:	20000438 	.word	0x20000438
 8002054:	20000390 	.word	0x20000390
 8002058:	3f733333 	.word	0x3f733333
 800205c:	20000398 	.word	0x20000398
 8002060:	200003a0 	.word	0x200003a0
 8002064:	200003e8 	.word	0x200003e8
 8002068:	2000042c 	.word	0x2000042c
 800206c:	20000430 	.word	0x20000430
 8002070:	20000434 	.word	0x20000434
 8002074:	20000436 	.word	0x20000436
 8002078:	40320000 	.word	0x40320000
 800207c:	405b8000 	.word	0x405b8000
 8002080:	200003f4 	.word	0x200003f4
 8002084:	20000428 	.word	0x20000428

08002088 <detectPulse>:


bool detectPulse(float sensor_value)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	ed87 0a01 	vstr	s0, [r7, #4]
  static float prev_sensor_value = 0;
  static uint8_t values_went_down = 0;
  static uint32_t currentBeat = 0;
  static uint32_t lastBeat = 0;

  if(sensor_value > PULSE_MAX_THRESHOLD)
 8002092:	edd7 7a01 	vldr	s15, [r7, #4]
 8002096:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8002264 <detectPulse+0x1dc>
 800209a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800209e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a2:	dd14      	ble.n	80020ce <detectPulse+0x46>
  {
    currentPulseDetectorState = PULSE_IDLE;
 80020a4:	4b70      	ldr	r3, [pc, #448]	@ (8002268 <detectPulse+0x1e0>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
    prev_sensor_value = 0;
 80020aa:	4b70      	ldr	r3, [pc, #448]	@ (800226c <detectPulse+0x1e4>)
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
    lastBeat = 0;
 80020b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002270 <detectPulse+0x1e8>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
    currentBeat = 0;
 80020b8:	4b6e      	ldr	r3, [pc, #440]	@ (8002274 <detectPulse+0x1ec>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
    values_went_down = 0;
 80020be:	4b6e      	ldr	r3, [pc, #440]	@ (8002278 <detectPulse+0x1f0>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
    lastBeatThreshold = 0;
 80020c4:	4b6d      	ldr	r3, [pc, #436]	@ (800227c <detectPulse+0x1f4>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
    return false;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e0c5      	b.n	800225a <detectPulse+0x1d2>
  }

  switch(currentPulseDetectorState)
 80020ce:	4b66      	ldr	r3, [pc, #408]	@ (8002268 <detectPulse+0x1e0>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	f000 809f 	beq.w	8002216 <detectPulse+0x18e>
 80020d8:	2b02      	cmp	r3, #2
 80020da:	f300 80ba 	bgt.w	8002252 <detectPulse+0x1ca>
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <detectPulse+0x60>
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d011      	beq.n	800210a <detectPulse+0x82>
 80020e6:	e0b4      	b.n	8002252 <detectPulse+0x1ca>
  {
    case PULSE_IDLE:
      if(sensor_value >= PULSE_MIN_THRESHOLD) {
 80020e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80020ec:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8002280 <detectPulse+0x1f8>
 80020f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f8:	da00      	bge.n	80020fc <detectPulse+0x74>
        currentPulseDetectorState = PULSE_TRACE_UP;
        values_went_down = 0;
      }
      break;
 80020fa:	e0aa      	b.n	8002252 <detectPulse+0x1ca>
        currentPulseDetectorState = PULSE_TRACE_UP;
 80020fc:	4b5a      	ldr	r3, [pc, #360]	@ (8002268 <detectPulse+0x1e0>)
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
        values_went_down = 0;
 8002102:	4b5d      	ldr	r3, [pc, #372]	@ (8002278 <detectPulse+0x1f0>)
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
      break;
 8002108:	e0a3      	b.n	8002252 <detectPulse+0x1ca>

    case PULSE_TRACE_UP:
      if(sensor_value > prev_sensor_value)
 800210a:	4b58      	ldr	r3, [pc, #352]	@ (800226c <detectPulse+0x1e4>)
 800210c:	edd3 7a00 	vldr	s15, [r3]
 8002110:	ed97 7a01 	vldr	s14, [r7, #4]
 8002114:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211c:	dd0d      	ble.n	800213a <detectPulse+0xb2>
      {
        currentBeat = millis();
 800211e:	f000 fbef 	bl	8002900 <millis>
 8002122:	4603      	mov	r3, r0
 8002124:	4a53      	ldr	r2, [pc, #332]	@ (8002274 <detectPulse+0x1ec>)
 8002126:	6013      	str	r3, [r2, #0]
        lastBeatThreshold = sensor_value;
 8002128:	edd7 7a01 	vldr	s15, [r7, #4]
 800212c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002130:	ee17 2a90 	vmov	r2, s15
 8002134:	4b51      	ldr	r3, [pc, #324]	@ (800227c <detectPulse+0x1f4>)
 8002136:	601a      	str	r2, [r3, #0]

        currentPulseDetectorState = PULSE_TRACE_DOWN;

        return true;
      }
      break;
 8002138:	e08b      	b.n	8002252 <detectPulse+0x1ca>
    	uint32_t beatDuration = currentBeat - lastBeat;
 800213a:	4b4e      	ldr	r3, [pc, #312]	@ (8002274 <detectPulse+0x1ec>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4b4c      	ldr	r3, [pc, #304]	@ (8002270 <detectPulse+0x1e8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	60fb      	str	r3, [r7, #12]
        lastBeat = currentBeat;
 8002146:	4b4b      	ldr	r3, [pc, #300]	@ (8002274 <detectPulse+0x1ec>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a49      	ldr	r2, [pc, #292]	@ (8002270 <detectPulse+0x1e8>)
 800214c:	6013      	str	r3, [r2, #0]
        float rawBPM = 0;
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
        if(beatDuration > 0)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <detectPulse+0xe8>
          rawBPM = 60000.0 / (float)beatDuration;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	ee07 3a90 	vmov	s15, r3
 8002160:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002164:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8002284 <detectPulse+0x1fc>
 8002168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800216c:	edc7 7a05 	vstr	s15, [r7, #20]
        valuesBPM[bpmIndex] = rawBPM;
 8002170:	4b45      	ldr	r3, [pc, #276]	@ (8002288 <detectPulse+0x200>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	4a45      	ldr	r2, [pc, #276]	@ (800228c <detectPulse+0x204>)
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	601a      	str	r2, [r3, #0]
        valuesBPMSum = 0;
 800217e:	4b44      	ldr	r3, [pc, #272]	@ (8002290 <detectPulse+0x208>)
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
        for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	e010      	b.n	80021ae <detectPulse+0x126>
          valuesBPMSum += valuesBPM[i];
 800218c:	4a3f      	ldr	r2, [pc, #252]	@ (800228c <detectPulse+0x204>)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	ed93 7a00 	vldr	s14, [r3]
 8002198:	4b3d      	ldr	r3, [pc, #244]	@ (8002290 <detectPulse+0x208>)
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002290 <detectPulse+0x208>)
 80021a4:	edc3 7a00 	vstr	s15, [r3]
        for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	3301      	adds	r3, #1
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2b09      	cmp	r3, #9
 80021b2:	ddeb      	ble.n	800218c <detectPulse+0x104>
        bpmIndex++;
 80021b4:	4b34      	ldr	r3, [pc, #208]	@ (8002288 <detectPulse+0x200>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	3301      	adds	r3, #1
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	4b32      	ldr	r3, [pc, #200]	@ (8002288 <detectPulse+0x200>)
 80021be:	701a      	strb	r2, [r3, #0]
        bpmIndex = bpmIndex % PULSE_BPM_SAMPLE_SIZE;
 80021c0:	4b31      	ldr	r3, [pc, #196]	@ (8002288 <detectPulse+0x200>)
 80021c2:	781a      	ldrb	r2, [r3, #0]
 80021c4:	4b33      	ldr	r3, [pc, #204]	@ (8002294 <detectPulse+0x20c>)
 80021c6:	fba3 1302 	umull	r1, r3, r3, r2
 80021ca:	08d9      	lsrs	r1, r3, #3
 80021cc:	460b      	mov	r3, r1
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002288 <detectPulse+0x200>)
 80021da:	701a      	strb	r2, [r3, #0]
        if(valuesBPMCount < PULSE_BPM_SAMPLE_SIZE)
 80021dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002298 <detectPulse+0x210>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b09      	cmp	r3, #9
 80021e2:	d805      	bhi.n	80021f0 <detectPulse+0x168>
          valuesBPMCount++;
 80021e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002298 <detectPulse+0x210>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	3301      	adds	r3, #1
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002298 <detectPulse+0x210>)
 80021ee:	701a      	strb	r2, [r3, #0]
        currentBPM = valuesBPMSum / valuesBPMCount;
 80021f0:	4b27      	ldr	r3, [pc, #156]	@ (8002290 <detectPulse+0x208>)
 80021f2:	edd3 6a00 	vldr	s13, [r3]
 80021f6:	4b28      	ldr	r3, [pc, #160]	@ (8002298 <detectPulse+0x210>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	ee07 3a90 	vmov	s15, r3
 80021fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002206:	4b25      	ldr	r3, [pc, #148]	@ (800229c <detectPulse+0x214>)
 8002208:	edc3 7a00 	vstr	s15, [r3]
        currentPulseDetectorState = PULSE_TRACE_DOWN;
 800220c:	4b16      	ldr	r3, [pc, #88]	@ (8002268 <detectPulse+0x1e0>)
 800220e:	2202      	movs	r2, #2
 8002210:	701a      	strb	r2, [r3, #0]
        return true;
 8002212:	2301      	movs	r3, #1
 8002214:	e021      	b.n	800225a <detectPulse+0x1d2>

    case PULSE_TRACE_DOWN:
      if(sensor_value < prev_sensor_value)
 8002216:	4b15      	ldr	r3, [pc, #84]	@ (800226c <detectPulse+0x1e4>)
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002228:	d505      	bpl.n	8002236 <detectPulse+0x1ae>
      {
        values_went_down++;
 800222a:	4b13      	ldr	r3, [pc, #76]	@ (8002278 <detectPulse+0x1f0>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	3301      	adds	r3, #1
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <detectPulse+0x1f0>)
 8002234:	701a      	strb	r2, [r3, #0]
      }


      if(sensor_value < PULSE_MIN_THRESHOLD)
 8002236:	edd7 7a01 	vldr	s15, [r7, #4]
 800223a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002280 <detectPulse+0x1f8>
 800223e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002246:	d400      	bmi.n	800224a <detectPulse+0x1c2>
      {
        currentPulseDetectorState = PULSE_IDLE;
      }
      break;
 8002248:	e002      	b.n	8002250 <detectPulse+0x1c8>
        currentPulseDetectorState = PULSE_IDLE;
 800224a:	4b07      	ldr	r3, [pc, #28]	@ (8002268 <detectPulse+0x1e0>)
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
      break;
 8002250:	bf00      	nop
  }

  prev_sensor_value = sensor_value;
 8002252:	4a06      	ldr	r2, [pc, #24]	@ (800226c <detectPulse+0x1e4>)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6013      	str	r3, [r2, #0]
  return false;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	44fa0000 	.word	0x44fa0000
 8002268:	20000444 	.word	0x20000444
 800226c:	20000448 	.word	0x20000448
 8002270:	2000044c 	.word	0x2000044c
 8002274:	20000450 	.word	0x20000450
 8002278:	20000454 	.word	0x20000454
 800227c:	20000428 	.word	0x20000428
 8002280:	42c80000 	.word	0x42c80000
 8002284:	476a6000 	.word	0x476a6000
 8002288:	20000425 	.word	0x20000425
 800228c:	200003f8 	.word	0x200003f8
 8002290:	20000420 	.word	0x20000420
 8002294:	cccccccd 	.word	0xcccccccd
 8002298:	20000424 	.word	0x20000424
 800229c:	200003f4 	.word	0x200003f4

080022a0 <balanceIntesities>:

void balanceIntesities( float redLedDC, float IRLedDC )
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80022aa:	edc7 0a00 	vstr	s1, [r7]
	uint32_t currentTime = millis();
 80022ae:	f000 fb27 	bl	8002900 <millis>
 80022b2:	60f8      	str	r0, [r7, #12]
  if( currentTime - lastREDLedCurrentCheck >= RED_LED_CURRENT_ADJUSTMENT_MS)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	ee07 3a90 	vmov	s15, r3
 80022ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022be:	4b3a      	ldr	r3, [pc, #232]	@ (80023a8 <balanceIntesities+0x108>)
 80022c0:	edd3 7a00 	vldr	s15, [r3]
 80022c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80023ac <balanceIntesities+0x10c>
 80022cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d4:	da00      	bge.n	80022d8 <balanceIntesities+0x38>
      pulseOximeter_setLedCurrent(IR_LED, IrLedCurrent);
    }

    lastREDLedCurrentCheck = millis();
  }
}
 80022d6:	e063      	b.n	80023a0 <balanceIntesities+0x100>
	  if( IRLedDC - redLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent < MAX30100_LED_CURRENT_50MA)
 80022d8:	ed97 7a00 	vldr	s14, [r7]
 80022dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80022e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80023b0 <balanceIntesities+0x110>
 80022e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f0:	dd20      	ble.n	8002334 <balanceIntesities+0x94>
 80022f2:	4b30      	ldr	r3, [pc, #192]	@ (80023b4 <balanceIntesities+0x114>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b0e      	cmp	r3, #14
 80022f8:	d81c      	bhi.n	8002334 <balanceIntesities+0x94>
      redLEDCurrent++;
 80022fa:	4b2e      	ldr	r3, [pc, #184]	@ (80023b4 <balanceIntesities+0x114>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	3301      	adds	r3, #1
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4b2c      	ldr	r3, [pc, #176]	@ (80023b4 <balanceIntesities+0x114>)
 8002304:	701a      	strb	r2, [r3, #0]
      pulseOximeter_setLedCurrent(RED_LED, redLEDCurrent);
 8002306:	4b2b      	ldr	r3, [pc, #172]	@ (80023b4 <balanceIntesities+0x114>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002312:	eeb0 0a67 	vmov.f32	s0, s15
 8002316:	2001      	movs	r0, #1
 8002318:	f7ff fbfc 	bl	8001b14 <pulseOximeter_setLedCurrent>
	  pulseOximeter_setLedCurrent(IR_LED, IrLedCurrent);
 800231c:	4b26      	ldr	r3, [pc, #152]	@ (80023b8 <balanceIntesities+0x118>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	ee07 3a90 	vmov	s15, r3
 8002324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002328:	eeb0 0a67 	vmov.f32	s0, s15
 800232c:	2002      	movs	r0, #2
 800232e:	f7ff fbf1 	bl	8001b14 <pulseOximeter_setLedCurrent>
 8002332:	e02c      	b.n	800238e <balanceIntesities+0xee>
    else if(redLedDC - IRLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent > 0)
 8002334:	ed97 7a01 	vldr	s14, [r7, #4]
 8002338:	edd7 7a00 	vldr	s15, [r7]
 800233c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002340:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80023b0 <balanceIntesities+0x110>
 8002344:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234c:	dd1f      	ble.n	800238e <balanceIntesities+0xee>
 800234e:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <balanceIntesities+0x114>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01b      	beq.n	800238e <balanceIntesities+0xee>
      redLEDCurrent--;pulseOximeter_setLedCurrent(RED_LED, redLEDCurrent);
 8002356:	4b17      	ldr	r3, [pc, #92]	@ (80023b4 <balanceIntesities+0x114>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	3b01      	subs	r3, #1
 800235c:	b2da      	uxtb	r2, r3
 800235e:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <balanceIntesities+0x114>)
 8002360:	701a      	strb	r2, [r3, #0]
 8002362:	4b14      	ldr	r3, [pc, #80]	@ (80023b4 <balanceIntesities+0x114>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	ee07 3a90 	vmov	s15, r3
 800236a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800236e:	eeb0 0a67 	vmov.f32	s0, s15
 8002372:	2001      	movs	r0, #1
 8002374:	f7ff fbce 	bl	8001b14 <pulseOximeter_setLedCurrent>
      pulseOximeter_setLedCurrent(IR_LED, IrLedCurrent);
 8002378:	4b0f      	ldr	r3, [pc, #60]	@ (80023b8 <balanceIntesities+0x118>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	ee07 3a90 	vmov	s15, r3
 8002380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002384:	eeb0 0a67 	vmov.f32	s0, s15
 8002388:	2002      	movs	r0, #2
 800238a:	f7ff fbc3 	bl	8001b14 <pulseOximeter_setLedCurrent>
    lastREDLedCurrentCheck = millis();
 800238e:	f000 fab7 	bl	8002900 <millis>
 8002392:	ee07 0a90 	vmov	s15, r0
 8002396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800239a:	4b03      	ldr	r3, [pc, #12]	@ (80023a8 <balanceIntesities+0x108>)
 800239c:	edc3 7a00 	vstr	s15, [r3]
}
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000440 	.word	0x20000440
 80023ac:	43fa0000 	.word	0x43fa0000
 80023b0:	477de800 	.word	0x477de800
 80023b4:	2000043c 	.word	0x2000043c
 80023b8:	20000445 	.word	0x20000445

080023bc <pulseOximeter_getBPM>:

float pulseOximeter_getBPM(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
	return pulseOximeter.heartBPM;
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <pulseOximeter_getBPM+0x18>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	ee07 3a90 	vmov	s15, r3
}
 80023c8:	eeb0 0a67 	vmov.f32	s0, s15
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	20000364 	.word	0x20000364

080023d8 <pulseOximeter_getSPO2>:

float pulseOximeter_getSPO2(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
	return pulseOximeter.SpO2;
 80023dc:	4b04      	ldr	r3, [pc, #16]	@ (80023f0 <pulseOximeter_getSPO2+0x18>)
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	ee07 3a90 	vmov	s15, r3
}
 80023e4:	eeb0 0a67 	vmov.f32	s0, s15
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	20000364 	.word	0x20000364

080023f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
 80023fe:	4b10      	ldr	r3, [pc, #64]	@ (8002440 <HAL_MspInit+0x4c>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	4a0f      	ldr	r2, [pc, #60]	@ (8002440 <HAL_MspInit+0x4c>)
 8002404:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002408:	6453      	str	r3, [r2, #68]	@ 0x44
 800240a:	4b0d      	ldr	r3, [pc, #52]	@ (8002440 <HAL_MspInit+0x4c>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	4b09      	ldr	r3, [pc, #36]	@ (8002440 <HAL_MspInit+0x4c>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	4a08      	ldr	r2, [pc, #32]	@ (8002440 <HAL_MspInit+0x4c>)
 8002420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002424:	6413      	str	r3, [r2, #64]	@ 0x40
 8002426:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <HAL_MspInit+0x4c>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002432:	2007      	movs	r0, #7
 8002434:	f000 fc0e 	bl	8002c54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40023800 	.word	0x40023800

08002444 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	@ 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a19      	ldr	r2, [pc, #100]	@ (80024c8 <HAL_I2C_MspInit+0x84>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d12c      	bne.n	80024c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	4b18      	ldr	r3, [pc, #96]	@ (80024cc <HAL_I2C_MspInit+0x88>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	4a17      	ldr	r2, [pc, #92]	@ (80024cc <HAL_I2C_MspInit+0x88>)
 8002470:	f043 0302 	orr.w	r3, r3, #2
 8002474:	6313      	str	r3, [r2, #48]	@ 0x30
 8002476:	4b15      	ldr	r3, [pc, #84]	@ (80024cc <HAL_I2C_MspInit+0x88>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002482:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002488:	2312      	movs	r3, #18
 800248a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800248c:	2301      	movs	r3, #1
 800248e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002494:	2304      	movs	r3, #4
 8002496:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	4619      	mov	r1, r3
 800249e:	480c      	ldr	r0, [pc, #48]	@ (80024d0 <HAL_I2C_MspInit+0x8c>)
 80024a0:	f000 fc1a 	bl	8002cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	4b08      	ldr	r3, [pc, #32]	@ (80024cc <HAL_I2C_MspInit+0x88>)
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	4a07      	ldr	r2, [pc, #28]	@ (80024cc <HAL_I2C_MspInit+0x88>)
 80024ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80024b4:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <HAL_I2C_MspInit+0x88>)
 80024b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80024c0:	bf00      	nop
 80024c2:	3728      	adds	r7, #40	@ 0x28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40005400 	.word	0x40005400
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40020400 	.word	0x40020400

080024d4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08e      	sub	sp, #56	@ 0x38
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a31      	ldr	r2, [pc, #196]	@ (80025c4 <HAL_I2S_MspInit+0xf0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d15a      	bne.n	80025ba <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002504:	2301      	movs	r3, #1
 8002506:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002508:	23c0      	movs	r3, #192	@ 0xc0
 800250a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800250c:	2302      	movs	r3, #2
 800250e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	4618      	mov	r0, r3
 8002516:	f005 f813 	bl	8007540 <HAL_RCCEx_PeriphCLKConfig>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002520:	f7ff f8f4 	bl	800170c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	4b27      	ldr	r3, [pc, #156]	@ (80025c8 <HAL_I2S_MspInit+0xf4>)
 800252a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252c:	4a26      	ldr	r2, [pc, #152]	@ (80025c8 <HAL_I2S_MspInit+0xf4>)
 800252e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002532:	6413      	str	r3, [r2, #64]	@ 0x40
 8002534:	4b24      	ldr	r3, [pc, #144]	@ (80025c8 <HAL_I2S_MspInit+0xf4>)
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	4b20      	ldr	r3, [pc, #128]	@ (80025c8 <HAL_I2S_MspInit+0xf4>)
 8002546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002548:	4a1f      	ldr	r2, [pc, #124]	@ (80025c8 <HAL_I2S_MspInit+0xf4>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002550:	4b1d      	ldr	r3, [pc, #116]	@ (80025c8 <HAL_I2S_MspInit+0xf4>)
 8002552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800255c:	2300      	movs	r3, #0
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	4b19      	ldr	r3, [pc, #100]	@ (80025c8 <HAL_I2S_MspInit+0xf4>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002564:	4a18      	ldr	r2, [pc, #96]	@ (80025c8 <HAL_I2S_MspInit+0xf4>)
 8002566:	f043 0304 	orr.w	r3, r3, #4
 800256a:	6313      	str	r3, [r2, #48]	@ 0x30
 800256c:	4b16      	ldr	r3, [pc, #88]	@ (80025c8 <HAL_I2S_MspInit+0xf4>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002578:	2310      	movs	r3, #16
 800257a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257c:	2302      	movs	r3, #2
 800257e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002584:	2300      	movs	r3, #0
 8002586:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002588:	2306      	movs	r3, #6
 800258a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800258c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002590:	4619      	mov	r1, r3
 8002592:	480e      	ldr	r0, [pc, #56]	@ (80025cc <HAL_I2S_MspInit+0xf8>)
 8002594:	f000 fba0 	bl	8002cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002598:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800259c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	2300      	movs	r3, #0
 80025a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80025aa:	2306      	movs	r3, #6
 80025ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025b2:	4619      	mov	r1, r3
 80025b4:	4806      	ldr	r0, [pc, #24]	@ (80025d0 <HAL_I2S_MspInit+0xfc>)
 80025b6:	f000 fb8f 	bl	8002cd8 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80025ba:	bf00      	nop
 80025bc:	3738      	adds	r7, #56	@ 0x38
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40003c00 	.word	0x40003c00
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40020000 	.word	0x40020000
 80025d0:	40020800 	.word	0x40020800

080025d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	@ 0x28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 0314 	add.w	r3, r7, #20
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a19      	ldr	r2, [pc, #100]	@ (8002658 <HAL_SPI_MspInit+0x84>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d12b      	bne.n	800264e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	4b18      	ldr	r3, [pc, #96]	@ (800265c <HAL_SPI_MspInit+0x88>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	4a17      	ldr	r2, [pc, #92]	@ (800265c <HAL_SPI_MspInit+0x88>)
 8002600:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002604:	6453      	str	r3, [r2, #68]	@ 0x44
 8002606:	4b15      	ldr	r3, [pc, #84]	@ (800265c <HAL_SPI_MspInit+0x88>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	4b11      	ldr	r3, [pc, #68]	@ (800265c <HAL_SPI_MspInit+0x88>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261a:	4a10      	ldr	r2, [pc, #64]	@ (800265c <HAL_SPI_MspInit+0x88>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6313      	str	r3, [r2, #48]	@ 0x30
 8002622:	4b0e      	ldr	r3, [pc, #56]	@ (800265c <HAL_SPI_MspInit+0x88>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800262e:	23e0      	movs	r3, #224	@ 0xe0
 8002630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263a:	2300      	movs	r3, #0
 800263c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800263e:	2305      	movs	r3, #5
 8002640:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	f107 0314 	add.w	r3, r7, #20
 8002646:	4619      	mov	r1, r3
 8002648:	4805      	ldr	r0, [pc, #20]	@ (8002660 <HAL_SPI_MspInit+0x8c>)
 800264a:	f000 fb45 	bl	8002cd8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800264e:	bf00      	nop
 8002650:	3728      	adds	r7, #40	@ 0x28
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40013000 	.word	0x40013000
 800265c:	40023800 	.word	0x40023800
 8002660:	40020000 	.word	0x40020000

08002664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08a      	sub	sp, #40	@ 0x28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a19      	ldr	r2, [pc, #100]	@ (80026e8 <HAL_UART_MspInit+0x84>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d12b      	bne.n	80026de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	4b18      	ldr	r3, [pc, #96]	@ (80026ec <HAL_UART_MspInit+0x88>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	4a17      	ldr	r2, [pc, #92]	@ (80026ec <HAL_UART_MspInit+0x88>)
 8002690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002694:	6413      	str	r3, [r2, #64]	@ 0x40
 8002696:	4b15      	ldr	r3, [pc, #84]	@ (80026ec <HAL_UART_MspInit+0x88>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <HAL_UART_MspInit+0x88>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	4a10      	ldr	r2, [pc, #64]	@ (80026ec <HAL_UART_MspInit+0x88>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b2:	4b0e      	ldr	r3, [pc, #56]	@ (80026ec <HAL_UART_MspInit+0x88>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026be:	230c      	movs	r3, #12
 80026c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	2302      	movs	r3, #2
 80026c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ca:	2303      	movs	r3, #3
 80026cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026ce:	2307      	movs	r3, #7
 80026d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d2:	f107 0314 	add.w	r3, r7, #20
 80026d6:	4619      	mov	r1, r3
 80026d8:	4805      	ldr	r0, [pc, #20]	@ (80026f0 <HAL_UART_MspInit+0x8c>)
 80026da:	f000 fafd 	bl	8002cd8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80026de:	bf00      	nop
 80026e0:	3728      	adds	r7, #40	@ 0x28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40004400 	.word	0x40004400
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40020000 	.word	0x40020000

080026f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026f8:	bf00      	nop
 80026fa:	e7fd      	b.n	80026f8 <NMI_Handler+0x4>

080026fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002700:	bf00      	nop
 8002702:	e7fd      	b.n	8002700 <HardFault_Handler+0x4>

08002704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <MemManage_Handler+0x4>

0800270c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <BusFault_Handler+0x4>

08002714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <UsageFault_Handler+0x4>

0800271c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800274a:	f000 f96f 	bl	8002a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}

08002752 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pulse_Oximeter_Int_Pin);
 8002756:	2001      	movs	r0, #1
 8002758:	f000 fc74 	bl	8003044 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	bd80      	pop	{r7, pc}

08002760 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002764:	4802      	ldr	r0, [pc, #8]	@ (8002770 <OTG_FS_IRQHandler+0x10>)
 8002766:	f000 ff65 	bl	8003634 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	2000083c 	.word	0x2000083c

08002774 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return 1;
 8002778:	2301      	movs	r3, #1
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <_kill>:

int _kill(int pid, int sig)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800278e:	f009 feef 	bl	800c570 <__errno>
 8002792:	4603      	mov	r3, r0
 8002794:	2216      	movs	r2, #22
 8002796:	601a      	str	r2, [r3, #0]
  return -1;
 8002798:	f04f 33ff 	mov.w	r3, #4294967295
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <_exit>:

void _exit (int status)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027ac:	f04f 31ff 	mov.w	r1, #4294967295
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ffe7 	bl	8002784 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027b6:	bf00      	nop
 80027b8:	e7fd      	b.n	80027b6 <_exit+0x12>

080027ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	e00a      	b.n	80027e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027cc:	f3af 8000 	nop.w
 80027d0:	4601      	mov	r1, r0
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	60ba      	str	r2, [r7, #8]
 80027d8:	b2ca      	uxtb	r2, r1
 80027da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	3301      	adds	r3, #1
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	dbf0      	blt.n	80027cc <_read+0x12>
  }

  return len;
 80027ea:	687b      	ldr	r3, [r7, #4]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	e009      	b.n	800281a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	60ba      	str	r2, [r7, #8]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3301      	adds	r3, #1
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	429a      	cmp	r2, r3
 8002820:	dbf1      	blt.n	8002806 <_write+0x12>
  }
  return len;
 8002822:	687b      	ldr	r3, [r7, #4]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <_close>:

int _close(int file)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002834:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002854:	605a      	str	r2, [r3, #4]
  return 0;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <_isatty>:

int _isatty(int file)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800286c:	2301      	movs	r3, #1
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800287a:	b480      	push	{r7}
 800287c:	b085      	sub	sp, #20
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800289c:	4a14      	ldr	r2, [pc, #80]	@ (80028f0 <_sbrk+0x5c>)
 800289e:	4b15      	ldr	r3, [pc, #84]	@ (80028f4 <_sbrk+0x60>)
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028a8:	4b13      	ldr	r3, [pc, #76]	@ (80028f8 <_sbrk+0x64>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b0:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <_sbrk+0x64>)
 80028b2:	4a12      	ldr	r2, [pc, #72]	@ (80028fc <_sbrk+0x68>)
 80028b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028b6:	4b10      	ldr	r3, [pc, #64]	@ (80028f8 <_sbrk+0x64>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d207      	bcs.n	80028d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028c4:	f009 fe54 	bl	800c570 <__errno>
 80028c8:	4603      	mov	r3, r0
 80028ca:	220c      	movs	r2, #12
 80028cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ce:	f04f 33ff 	mov.w	r3, #4294967295
 80028d2:	e009      	b.n	80028e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028d4:	4b08      	ldr	r3, [pc, #32]	@ (80028f8 <_sbrk+0x64>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028da:	4b07      	ldr	r3, [pc, #28]	@ (80028f8 <_sbrk+0x64>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	4a05      	ldr	r2, [pc, #20]	@ (80028f8 <_sbrk+0x64>)
 80028e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028e6:	68fb      	ldr	r3, [r7, #12]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20020000 	.word	0x20020000
 80028f4:	00000400 	.word	0x00000400
 80028f8:	20000458 	.word	0x20000458
 80028fc:	20000d68 	.word	0x20000d68

08002900 <millis>:
  }
}

// Get number of elapsed milliseconds
uint32_t millis(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002904:	f000 f8a6 	bl	8002a54 <HAL_GetTick>
 8002908:	4603      	mov	r3, r0
}
 800290a:	4618      	mov	r0, r3
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002914:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <SystemInit+0x20>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291a:	4a05      	ldr	r2, [pc, #20]	@ (8002930 <SystemInit+0x20>)
 800291c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002920:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002934:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800296c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002938:	f7ff ffea 	bl	8002910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800293c:	480c      	ldr	r0, [pc, #48]	@ (8002970 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800293e:	490d      	ldr	r1, [pc, #52]	@ (8002974 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002940:	4a0d      	ldr	r2, [pc, #52]	@ (8002978 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002944:	e002      	b.n	800294c <LoopCopyDataInit>

08002946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800294a:	3304      	adds	r3, #4

0800294c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800294c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800294e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002950:	d3f9      	bcc.n	8002946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002952:	4a0a      	ldr	r2, [pc, #40]	@ (800297c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002954:	4c0a      	ldr	r4, [pc, #40]	@ (8002980 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002958:	e001      	b.n	800295e <LoopFillZerobss>

0800295a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800295a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800295c:	3204      	adds	r2, #4

0800295e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800295e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002960:	d3fb      	bcc.n	800295a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002962:	f009 fe0b 	bl	800c57c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002966:	f7fe fbf5 	bl	8001154 <main>
  bx  lr    
 800296a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800296c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002974:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8002978:	0800eec0 	.word	0x0800eec0
  ldr r2, =_sbss
 800297c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002980:	20000d68 	.word	0x20000d68

08002984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002984:	e7fe      	b.n	8002984 <ADC_IRQHandler>
	...

08002988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800298c:	4b0e      	ldr	r3, [pc, #56]	@ (80029c8 <HAL_Init+0x40>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a0d      	ldr	r2, [pc, #52]	@ (80029c8 <HAL_Init+0x40>)
 8002992:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002996:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002998:	4b0b      	ldr	r3, [pc, #44]	@ (80029c8 <HAL_Init+0x40>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a0a      	ldr	r2, [pc, #40]	@ (80029c8 <HAL_Init+0x40>)
 800299e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029a4:	4b08      	ldr	r3, [pc, #32]	@ (80029c8 <HAL_Init+0x40>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a07      	ldr	r2, [pc, #28]	@ (80029c8 <HAL_Init+0x40>)
 80029aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029b0:	2003      	movs	r0, #3
 80029b2:	f000 f94f 	bl	8002c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029b6:	2000      	movs	r0, #0
 80029b8:	f000 f808 	bl	80029cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029bc:	f7ff fd1a 	bl	80023f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40023c00 	.word	0x40023c00

080029cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029d4:	4b12      	ldr	r3, [pc, #72]	@ (8002a20 <HAL_InitTick+0x54>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b12      	ldr	r3, [pc, #72]	@ (8002a24 <HAL_InitTick+0x58>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	4619      	mov	r1, r3
 80029de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 f967 	bl	8002cbe <HAL_SYSTICK_Config>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e00e      	b.n	8002a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b0f      	cmp	r3, #15
 80029fe:	d80a      	bhi.n	8002a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a00:	2200      	movs	r2, #0
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	f04f 30ff 	mov.w	r0, #4294967295
 8002a08:	f000 f92f 	bl	8002c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a0c:	4a06      	ldr	r2, [pc, #24]	@ (8002a28 <HAL_InitTick+0x5c>)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e000      	b.n	8002a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20000004 	.word	0x20000004
 8002a24:	2000000c 	.word	0x2000000c
 8002a28:	20000008 	.word	0x20000008

08002a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a30:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_IncTick+0x20>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <HAL_IncTick+0x24>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a04      	ldr	r2, [pc, #16]	@ (8002a50 <HAL_IncTick+0x24>)
 8002a3e:	6013      	str	r3, [r2, #0]
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	2000000c 	.word	0x2000000c
 8002a50:	2000045c 	.word	0x2000045c

08002a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return uwTick;
 8002a58:	4b03      	ldr	r3, [pc, #12]	@ (8002a68 <HAL_GetTick+0x14>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	2000045c 	.word	0x2000045c

08002a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a74:	f7ff ffee 	bl	8002a54 <HAL_GetTick>
 8002a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a84:	d005      	beq.n	8002a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a86:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab0 <HAL_Delay+0x44>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4413      	add	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a92:	bf00      	nop
 8002a94:	f7ff ffde 	bl	8002a54 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d8f7      	bhi.n	8002a94 <HAL_Delay+0x28>
  {
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	2000000c 	.word	0x2000000c

08002ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8002af8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002adc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ae6:	4a04      	ldr	r2, [pc, #16]	@ (8002af8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	60d3      	str	r3, [r2, #12]
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b00:	4b04      	ldr	r3, [pc, #16]	@ (8002b14 <__NVIC_GetPriorityGrouping+0x18>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	0a1b      	lsrs	r3, r3, #8
 8002b06:	f003 0307 	and.w	r3, r3, #7
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	db0b      	blt.n	8002b42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	f003 021f 	and.w	r2, r3, #31
 8002b30:	4907      	ldr	r1, [pc, #28]	@ (8002b50 <__NVIC_EnableIRQ+0x38>)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	2001      	movs	r0, #1
 8002b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000e100 	.word	0xe000e100

08002b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	6039      	str	r1, [r7, #0]
 8002b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	db0a      	blt.n	8002b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	490c      	ldr	r1, [pc, #48]	@ (8002ba0 <__NVIC_SetPriority+0x4c>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	0112      	lsls	r2, r2, #4
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	440b      	add	r3, r1
 8002b78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b7c:	e00a      	b.n	8002b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4908      	ldr	r1, [pc, #32]	@ (8002ba4 <__NVIC_SetPriority+0x50>)
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	3b04      	subs	r3, #4
 8002b8c:	0112      	lsls	r2, r2, #4
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	440b      	add	r3, r1
 8002b92:	761a      	strb	r2, [r3, #24]
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000e100 	.word	0xe000e100
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	@ 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f1c3 0307 	rsb	r3, r3, #7
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	bf28      	it	cs
 8002bc6:	2304      	movcs	r3, #4
 8002bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	2b06      	cmp	r3, #6
 8002bd0:	d902      	bls.n	8002bd8 <NVIC_EncodePriority+0x30>
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3b03      	subs	r3, #3
 8002bd6:	e000      	b.n	8002bda <NVIC_EncodePriority+0x32>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43da      	mvns	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	401a      	ands	r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfa:	43d9      	mvns	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	4313      	orrs	r3, r2
         );
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3724      	adds	r7, #36	@ 0x24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c20:	d301      	bcc.n	8002c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c22:	2301      	movs	r3, #1
 8002c24:	e00f      	b.n	8002c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c26:	4a0a      	ldr	r2, [pc, #40]	@ (8002c50 <SysTick_Config+0x40>)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c2e:	210f      	movs	r1, #15
 8002c30:	f04f 30ff 	mov.w	r0, #4294967295
 8002c34:	f7ff ff8e 	bl	8002b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c38:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <SysTick_Config+0x40>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c3e:	4b04      	ldr	r3, [pc, #16]	@ (8002c50 <SysTick_Config+0x40>)
 8002c40:	2207      	movs	r2, #7
 8002c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	e000e010 	.word	0xe000e010

08002c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff ff29 	bl	8002ab4 <__NVIC_SetPriorityGrouping>
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b086      	sub	sp, #24
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	4603      	mov	r3, r0
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
 8002c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c7c:	f7ff ff3e 	bl	8002afc <__NVIC_GetPriorityGrouping>
 8002c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	6978      	ldr	r0, [r7, #20]
 8002c88:	f7ff ff8e 	bl	8002ba8 <NVIC_EncodePriority>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff5d 	bl	8002b54 <__NVIC_SetPriority>
}
 8002c9a:	bf00      	nop
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	4603      	mov	r3, r0
 8002caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff ff31 	bl	8002b18 <__NVIC_EnableIRQ>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff ffa2 	bl	8002c10 <SysTick_Config>
 8002ccc:	4603      	mov	r3, r0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b089      	sub	sp, #36	@ 0x24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	e16b      	b.n	8002fcc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4013      	ands	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	f040 815a 	bne.w	8002fc6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d005      	beq.n	8002d2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d130      	bne.n	8002d8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	2203      	movs	r2, #3
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d60:	2201      	movs	r2, #1
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f003 0201 	and.w	r2, r3, #1
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d017      	beq.n	8002dc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	2203      	movs	r2, #3
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d123      	bne.n	8002e1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	08da      	lsrs	r2, r3, #3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3208      	adds	r2, #8
 8002ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	220f      	movs	r2, #15
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	08da      	lsrs	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3208      	adds	r2, #8
 8002e16:	69b9      	ldr	r1, [r7, #24]
 8002e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	2203      	movs	r2, #3
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 0203 	and.w	r2, r3, #3
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80b4 	beq.w	8002fc6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	4b60      	ldr	r3, [pc, #384]	@ (8002fe4 <HAL_GPIO_Init+0x30c>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e66:	4a5f      	ldr	r2, [pc, #380]	@ (8002fe4 <HAL_GPIO_Init+0x30c>)
 8002e68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e6e:	4b5d      	ldr	r3, [pc, #372]	@ (8002fe4 <HAL_GPIO_Init+0x30c>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e7a:	4a5b      	ldr	r2, [pc, #364]	@ (8002fe8 <HAL_GPIO_Init+0x310>)
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	089b      	lsrs	r3, r3, #2
 8002e80:	3302      	adds	r3, #2
 8002e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	220f      	movs	r2, #15
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43db      	mvns	r3, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a52      	ldr	r2, [pc, #328]	@ (8002fec <HAL_GPIO_Init+0x314>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d02b      	beq.n	8002efe <HAL_GPIO_Init+0x226>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a51      	ldr	r2, [pc, #324]	@ (8002ff0 <HAL_GPIO_Init+0x318>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d025      	beq.n	8002efa <HAL_GPIO_Init+0x222>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a50      	ldr	r2, [pc, #320]	@ (8002ff4 <HAL_GPIO_Init+0x31c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d01f      	beq.n	8002ef6 <HAL_GPIO_Init+0x21e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a4f      	ldr	r2, [pc, #316]	@ (8002ff8 <HAL_GPIO_Init+0x320>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d019      	beq.n	8002ef2 <HAL_GPIO_Init+0x21a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a4e      	ldr	r2, [pc, #312]	@ (8002ffc <HAL_GPIO_Init+0x324>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d013      	beq.n	8002eee <HAL_GPIO_Init+0x216>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a4d      	ldr	r2, [pc, #308]	@ (8003000 <HAL_GPIO_Init+0x328>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00d      	beq.n	8002eea <HAL_GPIO_Init+0x212>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a4c      	ldr	r2, [pc, #304]	@ (8003004 <HAL_GPIO_Init+0x32c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d007      	beq.n	8002ee6 <HAL_GPIO_Init+0x20e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a4b      	ldr	r2, [pc, #300]	@ (8003008 <HAL_GPIO_Init+0x330>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d101      	bne.n	8002ee2 <HAL_GPIO_Init+0x20a>
 8002ede:	2307      	movs	r3, #7
 8002ee0:	e00e      	b.n	8002f00 <HAL_GPIO_Init+0x228>
 8002ee2:	2308      	movs	r3, #8
 8002ee4:	e00c      	b.n	8002f00 <HAL_GPIO_Init+0x228>
 8002ee6:	2306      	movs	r3, #6
 8002ee8:	e00a      	b.n	8002f00 <HAL_GPIO_Init+0x228>
 8002eea:	2305      	movs	r3, #5
 8002eec:	e008      	b.n	8002f00 <HAL_GPIO_Init+0x228>
 8002eee:	2304      	movs	r3, #4
 8002ef0:	e006      	b.n	8002f00 <HAL_GPIO_Init+0x228>
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e004      	b.n	8002f00 <HAL_GPIO_Init+0x228>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e002      	b.n	8002f00 <HAL_GPIO_Init+0x228>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <HAL_GPIO_Init+0x228>
 8002efe:	2300      	movs	r3, #0
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	f002 0203 	and.w	r2, r2, #3
 8002f06:	0092      	lsls	r2, r2, #2
 8002f08:	4093      	lsls	r3, r2
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f10:	4935      	ldr	r1, [pc, #212]	@ (8002fe8 <HAL_GPIO_Init+0x310>)
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	089b      	lsrs	r3, r3, #2
 8002f16:	3302      	adds	r3, #2
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800300c <HAL_GPIO_Init+0x334>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f42:	4a32      	ldr	r2, [pc, #200]	@ (800300c <HAL_GPIO_Init+0x334>)
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f48:	4b30      	ldr	r3, [pc, #192]	@ (800300c <HAL_GPIO_Init+0x334>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f6c:	4a27      	ldr	r2, [pc, #156]	@ (800300c <HAL_GPIO_Init+0x334>)
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f72:	4b26      	ldr	r3, [pc, #152]	@ (800300c <HAL_GPIO_Init+0x334>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f96:	4a1d      	ldr	r2, [pc, #116]	@ (800300c <HAL_GPIO_Init+0x334>)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800300c <HAL_GPIO_Init+0x334>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fc0:	4a12      	ldr	r2, [pc, #72]	@ (800300c <HAL_GPIO_Init+0x334>)
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	61fb      	str	r3, [r7, #28]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	2b0f      	cmp	r3, #15
 8002fd0:	f67f ae90 	bls.w	8002cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop
 8002fd8:	3724      	adds	r7, #36	@ 0x24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40013800 	.word	0x40013800
 8002fec:	40020000 	.word	0x40020000
 8002ff0:	40020400 	.word	0x40020400
 8002ff4:	40020800 	.word	0x40020800
 8002ff8:	40020c00 	.word	0x40020c00
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40021400 	.word	0x40021400
 8003004:	40021800 	.word	0x40021800
 8003008:	40021c00 	.word	0x40021c00
 800300c:	40013c00 	.word	0x40013c00

08003010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	807b      	strh	r3, [r7, #2]
 800301c:	4613      	mov	r3, r2
 800301e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003020:	787b      	ldrb	r3, [r7, #1]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003026:	887a      	ldrh	r2, [r7, #2]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800302c:	e003      	b.n	8003036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800302e:	887b      	ldrh	r3, [r7, #2]
 8003030:	041a      	lsls	r2, r3, #16
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	619a      	str	r2, [r3, #24]
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
	...

08003044 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800304e:	4b08      	ldr	r3, [pc, #32]	@ (8003070 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d006      	beq.n	8003068 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800305a:	4a05      	ldr	r2, [pc, #20]	@ (8003070 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800305c:	88fb      	ldrh	r3, [r7, #6]
 800305e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003060:	88fb      	ldrh	r3, [r7, #6]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe fb3e 	bl	80016e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40013c00 	.word	0x40013c00

08003074 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af02      	add	r7, sp, #8
 800307a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e059      	b.n	800313a <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d106      	bne.n	80030a6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f008 f929 	bl	800b2f8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2203      	movs	r2, #3
 80030aa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030b4:	d102      	bne.n	80030bc <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f004 ff42 	bl	8007f4a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	7c1a      	ldrb	r2, [r3, #16]
 80030ce:	f88d 2000 	strb.w	r2, [sp]
 80030d2:	3304      	adds	r3, #4
 80030d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030d6:	f004 fec3 	bl	8007e60 <USB_CoreInit>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e026      	b.n	800313a <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2101      	movs	r1, #1
 80030f2:	4618      	mov	r0, r3
 80030f4:	f004 ff3a 	bl	8007f6c <USB_SetCurrentMode>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2202      	movs	r2, #2
 8003102:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e017      	b.n	800313a <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	7c1a      	ldrb	r2, [r3, #16]
 8003112:	f88d 2000 	strb.w	r2, [sp]
 8003116:	3304      	adds	r3, #4
 8003118:	cb0e      	ldmia	r3, {r1, r2, r3}
 800311a:	f005 f8dd 	bl	80082d8 <USB_HostInit>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e004      	b.n	800313a <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003142:	b590      	push	{r4, r7, lr}
 8003144:	b08b      	sub	sp, #44	@ 0x2c
 8003146:	af04      	add	r7, sp, #16
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	4608      	mov	r0, r1
 800314c:	4611      	mov	r1, r2
 800314e:	461a      	mov	r2, r3
 8003150:	4603      	mov	r3, r0
 8003152:	70fb      	strb	r3, [r7, #3]
 8003154:	460b      	mov	r3, r1
 8003156:	70bb      	strb	r3, [r7, #2]
 8003158:	4613      	mov	r3, r2
 800315a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800315c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800315e:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_HCD_HC_Init+0x2c>
 800316a:	2302      	movs	r3, #2
 800316c:	e09d      	b.n	80032aa <HAL_HCD_HC_Init+0x168>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	3319      	adds	r3, #25
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	3314      	adds	r3, #20
 800319a:	787a      	ldrb	r2, [r7, #1]
 800319c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	3315      	adds	r3, #21
 80031ae:	78fa      	ldrb	r2, [r7, #3]
 80031b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	3326      	adds	r3, #38	@ 0x26
 80031c2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80031c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	78bb      	ldrb	r3, [r7, #2]
 80031cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031d0:	b2d8      	uxtb	r0, r3
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	3316      	adds	r3, #22
 80031e0:	4602      	mov	r2, r0
 80031e2:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	4619      	mov	r1, r3
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fbc7 	bl	800397c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80031ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	da0a      	bge.n	800320c <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	3317      	adds	r3, #23
 8003206:	2201      	movs	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	e009      	b.n	8003220 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	3317      	adds	r3, #23
 800321c:	2200      	movs	r2, #0
 800321e:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f005 f9bb 	bl	80085a0 <USB_GetHostSpeed>
 800322a:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800322c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003230:	2b01      	cmp	r3, #1
 8003232:	d10b      	bne.n	800324c <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003234:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003238:	2b01      	cmp	r3, #1
 800323a:	d107      	bne.n	800324c <HAL_HCD_HC_Init+0x10a>
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d104      	bne.n	800324c <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2bbc      	cmp	r3, #188	@ 0xbc
 8003246:	d901      	bls.n	800324c <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003248:	23bc      	movs	r3, #188	@ 0xbc
 800324a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	3318      	adds	r3, #24
 800325c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003260:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	b298      	uxth	r0, r3
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	3328      	adds	r3, #40	@ 0x28
 8003276:	4602      	mov	r2, r0
 8003278:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	b29b      	uxth	r3, r3
 8003282:	787c      	ldrb	r4, [r7, #1]
 8003284:	78ba      	ldrb	r2, [r7, #2]
 8003286:	78f9      	ldrb	r1, [r7, #3]
 8003288:	9302      	str	r3, [sp, #8]
 800328a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800328e:	9301      	str	r3, [sp, #4]
 8003290:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	4623      	mov	r3, r4
 8003298:	f005 f9aa 	bl	80085f0 <USB_HC_Init>
 800329c:	4603      	mov	r3, r0
 800329e:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	371c      	adds	r7, #28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd90      	pop	{r4, r7, pc}

080032b2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	460b      	mov	r3, r1
 80032bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_HCD_HC_Halt+0x1e>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e00f      	b.n	80032f0 <HAL_HCD_HC_Halt+0x3e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	78fa      	ldrb	r2, [r7, #3]
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f005 fd3c 	bl	8008d5e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	4608      	mov	r0, r1
 8003302:	4611      	mov	r1, r2
 8003304:	461a      	mov	r2, r3
 8003306:	4603      	mov	r3, r0
 8003308:	70fb      	strb	r3, [r7, #3]
 800330a:	460b      	mov	r3, r1
 800330c:	70bb      	strb	r3, [r7, #2]
 800330e:	4613      	mov	r3, r2
 8003310:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	3317      	adds	r3, #23
 8003322:	78ba      	ldrb	r2, [r7, #2]
 8003324:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	3326      	adds	r3, #38	@ 0x26
 8003336:	787a      	ldrb	r2, [r7, #1]
 8003338:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800333a:	7c3b      	ldrb	r3, [r7, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d114      	bne.n	800336a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	332a      	adds	r3, #42	@ 0x2a
 8003350:	2203      	movs	r2, #3
 8003352:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003354:	78fa      	ldrb	r2, [r7, #3]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	3319      	adds	r3, #25
 8003364:	7f3a      	ldrb	r2, [r7, #28]
 8003366:	701a      	strb	r2, [r3, #0]
 8003368:	e009      	b.n	800337e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	332a      	adds	r3, #42	@ 0x2a
 800337a:	2202      	movs	r2, #2
 800337c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800337e:	787b      	ldrb	r3, [r7, #1]
 8003380:	2b03      	cmp	r3, #3
 8003382:	f200 8102 	bhi.w	800358a <HAL_HCD_HC_SubmitRequest+0x292>
 8003386:	a201      	add	r2, pc, #4	@ (adr r2, 800338c <HAL_HCD_HC_SubmitRequest+0x94>)
 8003388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338c:	0800339d 	.word	0x0800339d
 8003390:	08003575 	.word	0x08003575
 8003394:	08003461 	.word	0x08003461
 8003398:	080034eb 	.word	0x080034eb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800339c:	7c3b      	ldrb	r3, [r7, #16]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	f040 80f5 	bne.w	800358e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80033a4:	78bb      	ldrb	r3, [r7, #2]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d12d      	bne.n	8003406 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80033aa:	8b3b      	ldrh	r3, [r7, #24]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d109      	bne.n	80033c4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	333d      	adds	r3, #61	@ 0x3d
 80033c0:	2201      	movs	r2, #1
 80033c2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	333d      	adds	r3, #61	@ 0x3d
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10a      	bne.n	80033f0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	332a      	adds	r3, #42	@ 0x2a
 80033ea:	2200      	movs	r2, #0
 80033ec:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80033ee:	e0ce      	b.n	800358e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033f0:	78fa      	ldrb	r2, [r7, #3]
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	1a9b      	subs	r3, r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	332a      	adds	r3, #42	@ 0x2a
 8003400:	2202      	movs	r2, #2
 8003402:	701a      	strb	r2, [r3, #0]
      break;
 8003404:	e0c3      	b.n	800358e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003406:	78fa      	ldrb	r2, [r7, #3]
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	331a      	adds	r3, #26
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b01      	cmp	r3, #1
 800341a:	f040 80b8 	bne.w	800358e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	333c      	adds	r3, #60	@ 0x3c
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10a      	bne.n	800344a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003434:	78fa      	ldrb	r2, [r7, #3]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	332a      	adds	r3, #42	@ 0x2a
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
      break;
 8003448:	e0a1      	b.n	800358e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	332a      	adds	r3, #42	@ 0x2a
 800345a:	2202      	movs	r2, #2
 800345c:	701a      	strb	r2, [r3, #0]
      break;
 800345e:	e096      	b.n	800358e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003460:	78bb      	ldrb	r3, [r7, #2]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d120      	bne.n	80034a8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	333d      	adds	r3, #61	@ 0x3d
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10a      	bne.n	8003492 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800347c:	78fa      	ldrb	r2, [r7, #3]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	332a      	adds	r3, #42	@ 0x2a
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003490:	e07e      	b.n	8003590 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	332a      	adds	r3, #42	@ 0x2a
 80034a2:	2202      	movs	r2, #2
 80034a4:	701a      	strb	r2, [r3, #0]
      break;
 80034a6:	e073      	b.n	8003590 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80034a8:	78fa      	ldrb	r2, [r7, #3]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	333c      	adds	r3, #60	@ 0x3c
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10a      	bne.n	80034d4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	332a      	adds	r3, #42	@ 0x2a
 80034ce:	2200      	movs	r2, #0
 80034d0:	701a      	strb	r2, [r3, #0]
      break;
 80034d2:	e05d      	b.n	8003590 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	332a      	adds	r3, #42	@ 0x2a
 80034e4:	2202      	movs	r2, #2
 80034e6:	701a      	strb	r2, [r3, #0]
      break;
 80034e8:	e052      	b.n	8003590 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80034ea:	78bb      	ldrb	r3, [r7, #2]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d120      	bne.n	8003532 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	333d      	adds	r3, #61	@ 0x3d
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10a      	bne.n	800351c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	332a      	adds	r3, #42	@ 0x2a
 8003516:	2200      	movs	r2, #0
 8003518:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800351a:	e039      	b.n	8003590 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800351c:	78fa      	ldrb	r2, [r7, #3]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	332a      	adds	r3, #42	@ 0x2a
 800352c:	2202      	movs	r2, #2
 800352e:	701a      	strb	r2, [r3, #0]
      break;
 8003530:	e02e      	b.n	8003590 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	333c      	adds	r3, #60	@ 0x3c
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10a      	bne.n	800355e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	332a      	adds	r3, #42	@ 0x2a
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
      break;
 800355c:	e018      	b.n	8003590 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	332a      	adds	r3, #42	@ 0x2a
 800356e:	2202      	movs	r2, #2
 8003570:	701a      	strb	r2, [r3, #0]
      break;
 8003572:	e00d      	b.n	8003590 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	332a      	adds	r3, #42	@ 0x2a
 8003584:	2200      	movs	r2, #0
 8003586:	701a      	strb	r2, [r3, #0]
      break;
 8003588:	e002      	b.n	8003590 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800358a:	bf00      	nop
 800358c:	e000      	b.n	8003590 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800358e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	332c      	adds	r3, #44	@ 0x2c
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	8b39      	ldrh	r1, [r7, #24]
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4403      	add	r3, r0
 80035b4:	3334      	adds	r3, #52	@ 0x34
 80035b6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	334c      	adds	r3, #76	@ 0x4c
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	3338      	adds	r3, #56	@ 0x38
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	3315      	adds	r3, #21
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	334d      	adds	r3, #77	@ 0x4d
 8003604:	2200      	movs	r2, #0
 8003606:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	78fa      	ldrb	r2, [r7, #3]
 800360e:	4613      	mov	r3, r2
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	3310      	adds	r3, #16
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	4413      	add	r3, r2
 800361c:	1d19      	adds	r1, r3, #4
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	799b      	ldrb	r3, [r3, #6]
 8003622:	461a      	mov	r2, r3
 8003624:	f005 f910 	bl	8008848 <USB_HC_StartXfer>
 8003628:	4603      	mov	r3, r0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop

08003634 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f004 fe04 	bl	8008258 <USB_GetMode>
 8003650:	4603      	mov	r3, r0
 8003652:	2b01      	cmp	r3, #1
 8003654:	f040 80fb 	bne.w	800384e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f004 fdc7 	bl	80081f0 <USB_ReadInterrupts>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80f1 	beq.w	800384c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f004 fdbe 	bl	80081f0 <USB_ReadInterrupts>
 8003674:	4603      	mov	r3, r0
 8003676:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800367a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800367e:	d104      	bne.n	800368a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003688:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f004 fdae 	bl	80081f0 <USB_ReadInterrupts>
 8003694:	4603      	mov	r3, r0
 8003696:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800369a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800369e:	d104      	bne.n	80036aa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80036a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f004 fd9e 	bl	80081f0 <USB_ReadInterrupts>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036be:	d104      	bne.n	80036ca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80036c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f004 fd8e 	bl	80081f0 <USB_ReadInterrupts>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d103      	bne.n	80036e6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2202      	movs	r2, #2
 80036e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f004 fd80 	bl	80081f0 <USB_ReadInterrupts>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036fa:	d120      	bne.n	800373e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003704:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d113      	bne.n	800373e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003716:	2110      	movs	r1, #16
 8003718:	6938      	ldr	r0, [r7, #16]
 800371a:	f004 fc73 	bl	8008004 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800371e:	6938      	ldr	r0, [r7, #16]
 8003720:	f004 fca2 	bl	8008068 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	7a5b      	ldrb	r3, [r3, #9]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d105      	bne.n	8003738 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2101      	movs	r1, #1
 8003732:	4618      	mov	r0, r3
 8003734:	f004 fe94 	bl	8008460 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f007 fe5b 	bl	800b3f4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f004 fd54 	bl	80081f0 <USB_ReadInterrupts>
 8003748:	4603      	mov	r3, r0
 800374a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800374e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003752:	d102      	bne.n	800375a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f001 fd4d 	bl	80051f4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f004 fd46 	bl	80081f0 <USB_ReadInterrupts>
 8003764:	4603      	mov	r3, r0
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b08      	cmp	r3, #8
 800376c:	d106      	bne.n	800377c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f007 fe24 	bl	800b3bc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2208      	movs	r2, #8
 800377a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f004 fd35 	bl	80081f0 <USB_ReadInterrupts>
 8003786:	4603      	mov	r3, r0
 8003788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800378c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003790:	d139      	bne.n	8003806 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f005 fad0 	bl	8008d3c <USB_HC_ReadInterrupt>
 800379c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	e025      	b.n	80037f0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d018      	beq.n	80037ea <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037ce:	d106      	bne.n	80037de <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	4619      	mov	r1, r3
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f905 	bl	80039e6 <HCD_HC_IN_IRQHandler>
 80037dc:	e005      	b.n	80037ea <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	4619      	mov	r1, r3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 ff67 	bl	80046b8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	3301      	adds	r3, #1
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	795b      	ldrb	r3, [r3, #5]
 80037f4:	461a      	mov	r2, r3
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d3d3      	bcc.n	80037a4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003804:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f004 fcf0 	bl	80081f0 <USB_ReadInterrupts>
 8003810:	4603      	mov	r3, r0
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	2b10      	cmp	r3, #16
 8003818:	d101      	bne.n	800381e <HAL_HCD_IRQHandler+0x1ea>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <HAL_HCD_IRQHandler+0x1ec>
 800381e:	2300      	movs	r3, #0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d014      	beq.n	800384e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699a      	ldr	r2, [r3, #24]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0210 	bic.w	r2, r2, #16
 8003832:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f001 fbfe 	bl	8005036 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699a      	ldr	r2, [r3, #24]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0210 	orr.w	r2, r2, #16
 8003848:	619a      	str	r2, [r3, #24]
 800384a:	e000      	b.n	800384e <HAL_HCD_IRQHandler+0x21a>
      return;
 800384c:	bf00      	nop
    }
  }
}
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_HCD_Start+0x16>
 8003866:	2302      	movs	r3, #2
 8003868:	e013      	b.n	8003892 <HAL_HCD_Start+0x3e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2101      	movs	r1, #1
 8003878:	4618      	mov	r0, r3
 800387a:	f004 fe58 	bl	800852e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f004 fb50 	bl	8007f28 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_HCD_Stop+0x16>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e00d      	b.n	80038cc <HAL_HCD_Stop+0x32>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f005 fbab 	bl	8009018 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f004 fdfa 	bl	80084da <USB_ResetPort>
 80038e6:	4603      	mov	r3, r0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80038fc:	78fa      	ldrb	r2, [r7, #3]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	334c      	adds	r3, #76	@ 0x4c
 800390c:	781b      	ldrb	r3, [r3, #0]
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	460b      	mov	r3, r1
 8003924:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	3338      	adds	r3, #56	@ 0x38
 8003936:	681b      	ldr	r3, [r3, #0]
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f004 fe3c 	bl	80085ce <USB_GetCurrentFrame>
 8003956:	4603      	mov	r3, r0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f004 fe17 	bl	80085a0 <USB_GetHostSpeed>
 8003972:	4603      	mov	r3, r0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003988:	78fa      	ldrb	r2, [r7, #3]
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	1a9b      	subs	r3, r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	331a      	adds	r3, #26
 8003998:	2200      	movs	r2, #0
 800399a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800399c:	78fa      	ldrb	r2, [r7, #3]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	331b      	adds	r3, #27
 80039ac:	2200      	movs	r2, #0
 80039ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	3325      	adds	r3, #37	@ 0x25
 80039c0:	2200      	movs	r2, #0
 80039c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	3324      	adds	r3, #36	@ 0x24
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b086      	sub	sp, #24
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
 80039ee:	460b      	mov	r3, r1
 80039f0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	4611      	mov	r1, r2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f004 fc06 	bl	8008216 <USB_ReadChInterrupts>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d11a      	bne.n	8003a4a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a20:	461a      	mov	r2, r3
 8003a22:	2304      	movs	r3, #4
 8003a24:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	334d      	adds	r3, #77	@ 0x4d
 8003a36:	2207      	movs	r2, #7
 8003a38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f005 f98b 	bl	8008d5e <USB_HC_Halt>
 8003a48:	e09e      	b.n	8003b88 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f004 fbdf 	bl	8008216 <USB_ReadChInterrupts>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a62:	d11b      	bne.n	8003a9c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a70:	461a      	mov	r2, r3
 8003a72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a76:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003a78:	78fa      	ldrb	r2, [r7, #3]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	334d      	adds	r3, #77	@ 0x4d
 8003a88:	2208      	movs	r2, #8
 8003a8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	78fa      	ldrb	r2, [r7, #3]
 8003a92:	4611      	mov	r1, r2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f005 f962 	bl	8008d5e <USB_HC_Halt>
 8003a9a:	e075      	b.n	8003b88 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	78fa      	ldrb	r2, [r7, #3]
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f004 fbb6 	bl	8008216 <USB_ReadChInterrupts>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d11a      	bne.n	8003aea <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003ac6:	78fa      	ldrb	r2, [r7, #3]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	1a9b      	subs	r3, r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	334d      	adds	r3, #77	@ 0x4d
 8003ad6:	2206      	movs	r2, #6
 8003ad8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f005 f93b 	bl	8008d5e <USB_HC_Halt>
 8003ae8:	e04e      	b.n	8003b88 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	4611      	mov	r1, r2
 8003af2:	4618      	mov	r0, r3
 8003af4:	f004 fb8f 	bl	8008216 <USB_ReadChInterrupts>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b02:	d11b      	bne.n	8003b3c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b10:	461a      	mov	r2, r3
 8003b12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003b18:	78fa      	ldrb	r2, [r7, #3]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	334d      	adds	r3, #77	@ 0x4d
 8003b28:	2209      	movs	r2, #9
 8003b2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	78fa      	ldrb	r2, [r7, #3]
 8003b32:	4611      	mov	r1, r2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f005 f912 	bl	8008d5e <USB_HC_Halt>
 8003b3a:	e025      	b.n	8003b88 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	78fa      	ldrb	r2, [r7, #3]
 8003b42:	4611      	mov	r1, r2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f004 fb66 	bl	8008216 <USB_ReadChInterrupts>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b50:	2b80      	cmp	r3, #128	@ 0x80
 8003b52:	d119      	bne.n	8003b88 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b60:	461a      	mov	r2, r3
 8003b62:	2380      	movs	r3, #128	@ 0x80
 8003b64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	334d      	adds	r3, #77	@ 0x4d
 8003b76:	2207      	movs	r2, #7
 8003b78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	4611      	mov	r1, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f005 f8eb 	bl	8008d5e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	78fa      	ldrb	r2, [r7, #3]
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4618      	mov	r0, r3
 8003b92:	f004 fb40 	bl	8008216 <USB_ReadChInterrupts>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ba0:	d112      	bne.n	8003bc8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	78fa      	ldrb	r2, [r7, #3]
 8003ba8:	4611      	mov	r1, r2
 8003baa:	4618      	mov	r0, r3
 8003bac:	f005 f8d7 	bl	8008d5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bc2:	6093      	str	r3, [r2, #8]
 8003bc4:	f000 bd75 	b.w	80046b2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	78fa      	ldrb	r2, [r7, #3]
 8003bce:	4611      	mov	r1, r2
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f004 fb20 	bl	8008216 <USB_ReadChInterrupts>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	f040 8128 	bne.w	8003e32 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bee:	461a      	mov	r2, r3
 8003bf0:	2320      	movs	r3, #32
 8003bf2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003bf4:	78fa      	ldrb	r2, [r7, #3]
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	1a9b      	subs	r3, r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	331b      	adds	r3, #27
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d119      	bne.n	8003c3e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003c0a:	78fa      	ldrb	r2, [r7, #3]
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	331b      	adds	r3, #27
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c1e:	78fb      	ldrb	r3, [r7, #3]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	0151      	lsls	r1, r2, #5
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	440a      	add	r2, r1
 8003c34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c3c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	799b      	ldrb	r3, [r3, #6]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d01b      	beq.n	8003c7e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003c46:	78fa      	ldrb	r2, [r7, #3]
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	440b      	add	r3, r1
 8003c54:	3330      	adds	r3, #48	@ 0x30
 8003c56:	6819      	ldr	r1, [r3, #0]
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c6a:	78fa      	ldrb	r2, [r7, #3]
 8003c6c:	1ac9      	subs	r1, r1, r3
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4403      	add	r3, r0
 8003c7a:	3338      	adds	r3, #56	@ 0x38
 8003c7c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	334d      	adds	r3, #77	@ 0x4d
 8003c8e:	2201      	movs	r2, #1
 8003c90:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	3344      	adds	r3, #68	@ 0x44
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003ca6:	78fb      	ldrb	r3, [r7, #3]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cb8:	78fa      	ldrb	r2, [r7, #3]
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	1a9b      	subs	r3, r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	3326      	adds	r3, #38	@ 0x26
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003cce:	78fa      	ldrb	r2, [r7, #3]
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	3326      	adds	r3, #38	@ 0x26
 8003cde:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d110      	bne.n	8003d06 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	78fa      	ldrb	r2, [r7, #3]
 8003cea:	4611      	mov	r1, r2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f005 f836 	bl	8008d5e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003cf2:	78fb      	ldrb	r3, [r7, #3]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2310      	movs	r3, #16
 8003d02:	6093      	str	r3, [r2, #8]
 8003d04:	e03d      	b.n	8003d82 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003d06:	78fa      	ldrb	r2, [r7, #3]
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	3326      	adds	r3, #38	@ 0x26
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d00a      	beq.n	8003d32 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	3326      	adds	r3, #38	@ 0x26
 8003d2c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d127      	bne.n	8003d82 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003d32:	78fb      	ldrb	r3, [r7, #3]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	78fa      	ldrb	r2, [r7, #3]
 8003d42:	0151      	lsls	r1, r2, #5
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	440a      	add	r2, r1
 8003d48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003d50:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	334c      	adds	r3, #76	@ 0x4c
 8003d62:	2201      	movs	r2, #1
 8003d64:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	334c      	adds	r3, #76	@ 0x4c
 8003d76:	781a      	ldrb	r2, [r3, #0]
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f007 fb47 	bl	800b410 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	799b      	ldrb	r3, [r3, #6]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d13b      	bne.n	8003e02 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003d8a:	78fa      	ldrb	r2, [r7, #3]
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	3338      	adds	r3, #56	@ 0x38
 8003d9a:	6819      	ldr	r1, [r3, #0]
 8003d9c:	78fa      	ldrb	r2, [r7, #3]
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4403      	add	r3, r0
 8003daa:	3328      	adds	r3, #40	@ 0x28
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	440b      	add	r3, r1
 8003db0:	1e59      	subs	r1, r3, #1
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4403      	add	r3, r0
 8003dc0:	3328      	adds	r3, #40	@ 0x28
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8470 	beq.w	80046b2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003dd2:	78fa      	ldrb	r2, [r7, #3]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	1a9b      	subs	r3, r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	333c      	adds	r3, #60	@ 0x3c
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	78fa      	ldrb	r2, [r7, #3]
 8003de6:	f083 0301 	eor.w	r3, r3, #1
 8003dea:	b2d8      	uxtb	r0, r3
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	1a9b      	subs	r3, r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	333c      	adds	r3, #60	@ 0x3c
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	701a      	strb	r2, [r3, #0]
 8003dfe:	f000 bc58 	b.w	80046b2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	333c      	adds	r3, #60	@ 0x3c
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	78fa      	ldrb	r2, [r7, #3]
 8003e16:	f083 0301 	eor.w	r3, r3, #1
 8003e1a:	b2d8      	uxtb	r0, r3
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	333c      	adds	r3, #60	@ 0x3c
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	701a      	strb	r2, [r3, #0]
 8003e2e:	f000 bc40 	b.w	80046b2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	4611      	mov	r1, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f004 f9eb 	bl	8008216 <USB_ReadChInterrupts>
 8003e40:	4603      	mov	r3, r0
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b20      	cmp	r3, #32
 8003e48:	d131      	bne.n	8003eae <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e56:	461a      	mov	r2, r3
 8003e58:	2320      	movs	r3, #32
 8003e5a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003e5c:	78fa      	ldrb	r2, [r7, #3]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	331a      	adds	r3, #26
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	f040 841f 	bne.w	80046b2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003e74:	78fa      	ldrb	r2, [r7, #3]
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	331b      	adds	r3, #27
 8003e84:	2201      	movs	r2, #1
 8003e86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003e88:	78fa      	ldrb	r2, [r7, #3]
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	1a9b      	subs	r3, r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	334d      	adds	r3, #77	@ 0x4d
 8003e98:	2203      	movs	r2, #3
 8003e9a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	78fa      	ldrb	r2, [r7, #3]
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f004 ff5a 	bl	8008d5e <USB_HC_Halt>
 8003eaa:	f000 bc02 	b.w	80046b2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	78fa      	ldrb	r2, [r7, #3]
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f004 f9ad 	bl	8008216 <USB_ReadChInterrupts>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	f040 8305 	bne.w	80044d2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003eda:	78fa      	ldrb	r2, [r7, #3]
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	334d      	adds	r3, #77	@ 0x4d
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d114      	bne.n	8003f1a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ef0:	78fa      	ldrb	r2, [r7, #3]
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	1a9b      	subs	r3, r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	334d      	adds	r3, #77	@ 0x4d
 8003f00:	2202      	movs	r2, #2
 8003f02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	334c      	adds	r3, #76	@ 0x4c
 8003f14:	2201      	movs	r2, #1
 8003f16:	701a      	strb	r2, [r3, #0]
 8003f18:	e2cc      	b.n	80044b4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	334d      	adds	r3, #77	@ 0x4d
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b06      	cmp	r3, #6
 8003f2e:	d114      	bne.n	8003f5a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f30:	78fa      	ldrb	r2, [r7, #3]
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	1a9b      	subs	r3, r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	334d      	adds	r3, #77	@ 0x4d
 8003f40:	2202      	movs	r2, #2
 8003f42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003f44:	78fa      	ldrb	r2, [r7, #3]
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	1a9b      	subs	r3, r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	334c      	adds	r3, #76	@ 0x4c
 8003f54:	2205      	movs	r2, #5
 8003f56:	701a      	strb	r2, [r3, #0]
 8003f58:	e2ac      	b.n	80044b4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f5a:	78fa      	ldrb	r2, [r7, #3]
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	1a9b      	subs	r3, r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	440b      	add	r3, r1
 8003f68:	334d      	adds	r3, #77	@ 0x4d
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b07      	cmp	r3, #7
 8003f6e:	d00b      	beq.n	8003f88 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003f70:	78fa      	ldrb	r2, [r7, #3]
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	4613      	mov	r3, r2
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	334d      	adds	r3, #77	@ 0x4d
 8003f80:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f82:	2b09      	cmp	r3, #9
 8003f84:	f040 80a6 	bne.w	80040d4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	334d      	adds	r3, #77	@ 0x4d
 8003f98:	2202      	movs	r2, #2
 8003f9a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f9c:	78fa      	ldrb	r2, [r7, #3]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	3344      	adds	r3, #68	@ 0x44
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	1c59      	adds	r1, r3, #1
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	1a9b      	subs	r3, r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4403      	add	r3, r0
 8003fbc:	3344      	adds	r3, #68	@ 0x44
 8003fbe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fc0:	78fa      	ldrb	r2, [r7, #3]
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	1a9b      	subs	r3, r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	3344      	adds	r3, #68	@ 0x44
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d943      	bls.n	800405e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003fd6:	78fa      	ldrb	r2, [r7, #3]
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	1a9b      	subs	r3, r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	3344      	adds	r3, #68	@ 0x44
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003fea:	78fa      	ldrb	r2, [r7, #3]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	1a9b      	subs	r3, r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	331a      	adds	r3, #26
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d123      	bne.n	8004048 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004000:	78fa      	ldrb	r2, [r7, #3]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	331b      	adds	r3, #27
 8004010:	2200      	movs	r2, #0
 8004012:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004014:	78fa      	ldrb	r2, [r7, #3]
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	331c      	adds	r3, #28
 8004024:	2200      	movs	r2, #0
 8004026:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4413      	add	r3, r2
 8004030:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	78fa      	ldrb	r2, [r7, #3]
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	440a      	add	r2, r1
 800403e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004046:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004048:	78fa      	ldrb	r2, [r7, #3]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	334c      	adds	r3, #76	@ 0x4c
 8004058:	2204      	movs	r2, #4
 800405a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800405c:	e229      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800405e:	78fa      	ldrb	r2, [r7, #3]
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	334c      	adds	r3, #76	@ 0x4c
 800406e:	2202      	movs	r2, #2
 8004070:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004072:	78fa      	ldrb	r2, [r7, #3]
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	4613      	mov	r3, r2
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	3326      	adds	r3, #38	@ 0x26
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00b      	beq.n	80040a0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	4613      	mov	r3, r2
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	1a9b      	subs	r3, r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	3326      	adds	r3, #38	@ 0x26
 8004098:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800409a:	2b02      	cmp	r3, #2
 800409c:	f040 8209 	bne.w	80044b2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040b6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040be:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040cc:	461a      	mov	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80040d2:	e1ee      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80040d4:	78fa      	ldrb	r2, [r7, #3]
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	334d      	adds	r3, #77	@ 0x4d
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b05      	cmp	r3, #5
 80040e8:	f040 80c8 	bne.w	800427c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040ec:	78fa      	ldrb	r2, [r7, #3]
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	4613      	mov	r3, r2
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	334d      	adds	r3, #77	@ 0x4d
 80040fc:	2202      	movs	r2, #2
 80040fe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004100:	78fa      	ldrb	r2, [r7, #3]
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	331b      	adds	r3, #27
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	f040 81ce 	bne.w	80044b4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004118:	78fa      	ldrb	r2, [r7, #3]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	3326      	adds	r3, #38	@ 0x26
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b03      	cmp	r3, #3
 800412c:	d16b      	bne.n	8004206 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	1a9b      	subs	r3, r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	3348      	adds	r3, #72	@ 0x48
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	1c59      	adds	r1, r3, #1
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4403      	add	r3, r0
 800414e:	3348      	adds	r3, #72	@ 0x48
 8004150:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004152:	78fa      	ldrb	r2, [r7, #3]
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	1a9b      	subs	r3, r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	440b      	add	r3, r1
 8004160:	3348      	adds	r3, #72	@ 0x48
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d943      	bls.n	80041f0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004168:	78fa      	ldrb	r2, [r7, #3]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	3348      	adds	r3, #72	@ 0x48
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	331b      	adds	r3, #27
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004190:	78fa      	ldrb	r2, [r7, #3]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	3344      	adds	r3, #68	@ 0x44
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d809      	bhi.n	80041ba <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80041a6:	78fa      	ldrb	r2, [r7, #3]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	1a9b      	subs	r3, r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	331c      	adds	r3, #28
 80041b6:	2201      	movs	r2, #1
 80041b8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	78fa      	ldrb	r2, [r7, #3]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041d8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80041da:	78fa      	ldrb	r2, [r7, #3]
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	4613      	mov	r3, r2
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	1a9b      	subs	r3, r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	440b      	add	r3, r1
 80041e8:	334c      	adds	r3, #76	@ 0x4c
 80041ea:	2204      	movs	r2, #4
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	e014      	b.n	800421a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041f0:	78fa      	ldrb	r2, [r7, #3]
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	4613      	mov	r3, r2
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	334c      	adds	r3, #76	@ 0x4c
 8004200:	2202      	movs	r2, #2
 8004202:	701a      	strb	r2, [r3, #0]
 8004204:	e009      	b.n	800421a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004206:	78fa      	ldrb	r2, [r7, #3]
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	4613      	mov	r3, r2
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	440b      	add	r3, r1
 8004214:	334c      	adds	r3, #76	@ 0x4c
 8004216:	2202      	movs	r2, #2
 8004218:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800421a:	78fa      	ldrb	r2, [r7, #3]
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	440b      	add	r3, r1
 8004228:	3326      	adds	r3, #38	@ 0x26
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00b      	beq.n	8004248 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004230:	78fa      	ldrb	r2, [r7, #3]
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	3326      	adds	r3, #38	@ 0x26
 8004240:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004242:	2b02      	cmp	r3, #2
 8004244:	f040 8136 	bne.w	80044b4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	4413      	add	r3, r2
 8004250:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800425e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004266:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	4413      	add	r3, r2
 8004270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004274:	461a      	mov	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e11b      	b.n	80044b4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800427c:	78fa      	ldrb	r2, [r7, #3]
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	4613      	mov	r3, r2
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	334d      	adds	r3, #77	@ 0x4d
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b03      	cmp	r3, #3
 8004290:	f040 8081 	bne.w	8004396 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004294:	78fa      	ldrb	r2, [r7, #3]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	1a9b      	subs	r3, r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	334d      	adds	r3, #77	@ 0x4d
 80042a4:	2202      	movs	r2, #2
 80042a6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80042a8:	78fa      	ldrb	r2, [r7, #3]
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	331b      	adds	r3, #27
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	f040 80fa 	bne.w	80044b4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042c0:	78fa      	ldrb	r2, [r7, #3]
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	4613      	mov	r3, r2
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	1a9b      	subs	r3, r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	334c      	adds	r3, #76	@ 0x4c
 80042d0:	2202      	movs	r2, #2
 80042d2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	78fa      	ldrb	r2, [r7, #3]
 80042e4:	0151      	lsls	r1, r2, #5
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	440a      	add	r2, r1
 80042ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	78fa      	ldrb	r2, [r7, #3]
 8004304:	0151      	lsls	r1, r2, #5
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	440a      	add	r2, r1
 800430a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800430e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004312:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4413      	add	r3, r2
 800431c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	78fa      	ldrb	r2, [r7, #3]
 8004324:	0151      	lsls	r1, r2, #5
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	440a      	add	r2, r1
 800432a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800432e:	f023 0320 	bic.w	r3, r3, #32
 8004332:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004334:	78fa      	ldrb	r2, [r7, #3]
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	4613      	mov	r3, r2
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	3326      	adds	r3, #38	@ 0x26
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00b      	beq.n	8004362 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	1a9b      	subs	r3, r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	3326      	adds	r3, #38	@ 0x26
 800435a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800435c:	2b02      	cmp	r3, #2
 800435e:	f040 80a9 	bne.w	80044b4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	4413      	add	r3, r2
 800436a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004378:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004380:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004382:	78fb      	ldrb	r3, [r7, #3]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	4413      	add	r3, r2
 800438a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800438e:	461a      	mov	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	e08e      	b.n	80044b4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004396:	78fa      	ldrb	r2, [r7, #3]
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	4613      	mov	r3, r2
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	440b      	add	r3, r1
 80043a4:	334d      	adds	r3, #77	@ 0x4d
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d143      	bne.n	8004434 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	334d      	adds	r3, #77	@ 0x4d
 80043bc:	2202      	movs	r2, #2
 80043be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043c0:	78fa      	ldrb	r2, [r7, #3]
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	4613      	mov	r3, r2
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	1a9b      	subs	r3, r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	334c      	adds	r3, #76	@ 0x4c
 80043d0:	2202      	movs	r2, #2
 80043d2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043d4:	78fa      	ldrb	r2, [r7, #3]
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	3326      	adds	r3, #38	@ 0x26
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80043ea:	78fa      	ldrb	r2, [r7, #3]
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	1a9b      	subs	r3, r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	3326      	adds	r3, #38	@ 0x26
 80043fa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d159      	bne.n	80044b4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4413      	add	r3, r2
 8004408:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004416:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800441e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4413      	add	r3, r2
 8004428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800442c:	461a      	mov	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	e03f      	b.n	80044b4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004434:	78fa      	ldrb	r2, [r7, #3]
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	4613      	mov	r3, r2
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	334d      	adds	r3, #77	@ 0x4d
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b08      	cmp	r3, #8
 8004448:	d126      	bne.n	8004498 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800444a:	78fa      	ldrb	r2, [r7, #3]
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	4613      	mov	r3, r2
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	334d      	adds	r3, #77	@ 0x4d
 800445a:	2202      	movs	r2, #2
 800445c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800445e:	78fa      	ldrb	r2, [r7, #3]
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	4613      	mov	r3, r2
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	1a9b      	subs	r3, r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	3344      	adds	r3, #68	@ 0x44
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	1c59      	adds	r1, r3, #1
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	4613      	mov	r3, r2
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	1a9b      	subs	r3, r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4403      	add	r3, r0
 800447e:	3344      	adds	r3, #68	@ 0x44
 8004480:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004482:	78fa      	ldrb	r2, [r7, #3]
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	1a9b      	subs	r3, r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	334c      	adds	r3, #76	@ 0x4c
 8004492:	2204      	movs	r2, #4
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	e00d      	b.n	80044b4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004498:	78fa      	ldrb	r2, [r7, #3]
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	4613      	mov	r3, r2
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	334d      	adds	r3, #77	@ 0x4d
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	f000 8100 	beq.w	80046b0 <HCD_HC_IN_IRQHandler+0xcca>
 80044b0:	e000      	b.n	80044b4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044b2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80044b4:	78fa      	ldrb	r2, [r7, #3]
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	334c      	adds	r3, #76	@ 0x4c
 80044c4:	781a      	ldrb	r2, [r3, #0]
 80044c6:	78fb      	ldrb	r3, [r7, #3]
 80044c8:	4619      	mov	r1, r3
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f006 ffa0 	bl	800b410 <HAL_HCD_HC_NotifyURBChange_Callback>
 80044d0:	e0ef      	b.n	80046b2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	78fa      	ldrb	r2, [r7, #3]
 80044d8:	4611      	mov	r1, r2
 80044da:	4618      	mov	r0, r3
 80044dc:	f003 fe9b 	bl	8008216 <USB_ReadChInterrupts>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e6:	2b40      	cmp	r3, #64	@ 0x40
 80044e8:	d12f      	bne.n	800454a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80044ea:	78fb      	ldrb	r3, [r7, #3]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044f6:	461a      	mov	r2, r3
 80044f8:	2340      	movs	r3, #64	@ 0x40
 80044fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80044fc:	78fa      	ldrb	r2, [r7, #3]
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	1a9b      	subs	r3, r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	440b      	add	r3, r1
 800450a:	334d      	adds	r3, #77	@ 0x4d
 800450c:	2205      	movs	r2, #5
 800450e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004510:	78fa      	ldrb	r2, [r7, #3]
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	4613      	mov	r3, r2
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	1a9b      	subs	r3, r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	440b      	add	r3, r1
 800451e:	331a      	adds	r3, #26
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d109      	bne.n	800453a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004526:	78fa      	ldrb	r2, [r7, #3]
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	4613      	mov	r3, r2
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	1a9b      	subs	r3, r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	440b      	add	r3, r1
 8004534:	3344      	adds	r3, #68	@ 0x44
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	78fa      	ldrb	r2, [r7, #3]
 8004540:	4611      	mov	r1, r2
 8004542:	4618      	mov	r0, r3
 8004544:	f004 fc0b 	bl	8008d5e <USB_HC_Halt>
 8004548:	e0b3      	b.n	80046b2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	78fa      	ldrb	r2, [r7, #3]
 8004550:	4611      	mov	r1, r2
 8004552:	4618      	mov	r0, r3
 8004554:	f003 fe5f 	bl	8008216 <USB_ReadChInterrupts>
 8004558:	4603      	mov	r3, r0
 800455a:	f003 0310 	and.w	r3, r3, #16
 800455e:	2b10      	cmp	r3, #16
 8004560:	f040 80a7 	bne.w	80046b2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004564:	78fa      	ldrb	r2, [r7, #3]
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	4613      	mov	r3, r2
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	3326      	adds	r3, #38	@ 0x26
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2b03      	cmp	r3, #3
 8004578:	d11b      	bne.n	80045b2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800457a:	78fa      	ldrb	r2, [r7, #3]
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	4613      	mov	r3, r2
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	1a9b      	subs	r3, r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	440b      	add	r3, r1
 8004588:	3344      	adds	r3, #68	@ 0x44
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	334d      	adds	r3, #77	@ 0x4d
 800459e:	2204      	movs	r2, #4
 80045a0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	78fa      	ldrb	r2, [r7, #3]
 80045a8:	4611      	mov	r1, r2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f004 fbd7 	bl	8008d5e <USB_HC_Halt>
 80045b0:	e03f      	b.n	8004632 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	3326      	adds	r3, #38	@ 0x26
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80045c8:	78fa      	ldrb	r2, [r7, #3]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	3326      	adds	r3, #38	@ 0x26
 80045d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d129      	bne.n	8004632 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	3344      	adds	r3, #68	@ 0x44
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	799b      	ldrb	r3, [r3, #6]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HCD_HC_IN_IRQHandler+0xc2a>
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	331b      	adds	r3, #27
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d110      	bne.n	8004632 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004610:	78fa      	ldrb	r2, [r7, #3]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	334d      	adds	r3, #77	@ 0x4d
 8004620:	2204      	movs	r2, #4
 8004622:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	78fa      	ldrb	r2, [r7, #3]
 800462a:	4611      	mov	r1, r2
 800462c:	4618      	mov	r0, r3
 800462e:	f004 fb96 	bl	8008d5e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004632:	78fa      	ldrb	r2, [r7, #3]
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	1a9b      	subs	r3, r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	440b      	add	r3, r1
 8004640:	331b      	adds	r3, #27
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d129      	bne.n	800469c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004648:	78fa      	ldrb	r2, [r7, #3]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	331b      	adds	r3, #27
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4413      	add	r3, r2
 8004664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	78fa      	ldrb	r2, [r7, #3]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	440a      	add	r2, r1
 8004672:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800467a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	4413      	add	r3, r2
 8004684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	78fa      	ldrb	r2, [r7, #3]
 800468c:	0151      	lsls	r1, r2, #5
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	440a      	add	r2, r1
 8004692:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004696:	f043 0320 	orr.w	r3, r3, #32
 800469a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046a8:	461a      	mov	r2, r3
 80046aa:	2310      	movs	r3, #16
 80046ac:	6093      	str	r3, [r2, #8]
 80046ae:	e000      	b.n	80046b2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80046b0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	78fa      	ldrb	r2, [r7, #3]
 80046d4:	4611      	mov	r1, r2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f003 fd9d 	bl	8008216 <USB_ReadChInterrupts>
 80046dc:	4603      	mov	r3, r0
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d11b      	bne.n	800471e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80046e6:	78fb      	ldrb	r3, [r7, #3]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046f2:	461a      	mov	r2, r3
 80046f4:	2304      	movs	r3, #4
 80046f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80046f8:	78fa      	ldrb	r2, [r7, #3]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	1a9b      	subs	r3, r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	334d      	adds	r3, #77	@ 0x4d
 8004708:	2207      	movs	r2, #7
 800470a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	78fa      	ldrb	r2, [r7, #3]
 8004712:	4611      	mov	r1, r2
 8004714:	4618      	mov	r0, r3
 8004716:	f004 fb22 	bl	8008d5e <USB_HC_Halt>
 800471a:	f000 bc89 	b.w	8005030 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	78fa      	ldrb	r2, [r7, #3]
 8004724:	4611      	mov	r1, r2
 8004726:	4618      	mov	r0, r3
 8004728:	f003 fd75 	bl	8008216 <USB_ReadChInterrupts>
 800472c:	4603      	mov	r3, r0
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b20      	cmp	r3, #32
 8004734:	f040 8082 	bne.w	800483c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	4413      	add	r3, r2
 8004740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004744:	461a      	mov	r2, r3
 8004746:	2320      	movs	r3, #32
 8004748:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800474a:	78fa      	ldrb	r2, [r7, #3]
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	1a9b      	subs	r3, r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	440b      	add	r3, r1
 8004758:	3319      	adds	r3, #25
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d124      	bne.n	80047aa <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004760:	78fa      	ldrb	r2, [r7, #3]
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	4613      	mov	r3, r2
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	1a9b      	subs	r3, r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	3319      	adds	r3, #25
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004774:	78fa      	ldrb	r2, [r7, #3]
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	4613      	mov	r3, r2
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	1a9b      	subs	r3, r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	334c      	adds	r3, #76	@ 0x4c
 8004784:	2202      	movs	r2, #2
 8004786:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004788:	78fa      	ldrb	r2, [r7, #3]
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	4613      	mov	r3, r2
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	334d      	adds	r3, #77	@ 0x4d
 8004798:	2203      	movs	r2, #3
 800479a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	78fa      	ldrb	r2, [r7, #3]
 80047a2:	4611      	mov	r1, r2
 80047a4:	4618      	mov	r0, r3
 80047a6:	f004 fada 	bl	8008d5e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80047aa:	78fa      	ldrb	r2, [r7, #3]
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	4613      	mov	r3, r2
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	1a9b      	subs	r3, r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	331a      	adds	r3, #26
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	f040 8437 	bne.w	8005030 <HCD_HC_OUT_IRQHandler+0x978>
 80047c2:	78fa      	ldrb	r2, [r7, #3]
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	4613      	mov	r3, r2
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	440b      	add	r3, r1
 80047d0:	331b      	adds	r3, #27
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f040 842b 	bne.w	8005030 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80047da:	78fa      	ldrb	r2, [r7, #3]
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	4613      	mov	r3, r2
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	3326      	adds	r3, #38	@ 0x26
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d009      	beq.n	8004804 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80047f0:	78fa      	ldrb	r2, [r7, #3]
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	4613      	mov	r3, r2
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	1a9b      	subs	r3, r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	331b      	adds	r3, #27
 8004800:	2201      	movs	r2, #1
 8004802:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004804:	78fa      	ldrb	r2, [r7, #3]
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	4613      	mov	r3, r2
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	334d      	adds	r3, #77	@ 0x4d
 8004814:	2203      	movs	r2, #3
 8004816:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	78fa      	ldrb	r2, [r7, #3]
 800481e:	4611      	mov	r1, r2
 8004820:	4618      	mov	r0, r3
 8004822:	f004 fa9c 	bl	8008d5e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004826:	78fa      	ldrb	r2, [r7, #3]
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	4613      	mov	r3, r2
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	1a9b      	subs	r3, r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	3344      	adds	r3, #68	@ 0x44
 8004836:	2200      	movs	r2, #0
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	e3f9      	b.n	8005030 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	78fa      	ldrb	r2, [r7, #3]
 8004842:	4611      	mov	r1, r2
 8004844:	4618      	mov	r0, r3
 8004846:	f003 fce6 	bl	8008216 <USB_ReadChInterrupts>
 800484a:	4603      	mov	r3, r0
 800484c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004854:	d111      	bne.n	800487a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004856:	78fb      	ldrb	r3, [r7, #3]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	4413      	add	r3, r2
 800485e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004862:	461a      	mov	r2, r3
 8004864:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004868:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	78fa      	ldrb	r2, [r7, #3]
 8004870:	4611      	mov	r1, r2
 8004872:	4618      	mov	r0, r3
 8004874:	f004 fa73 	bl	8008d5e <USB_HC_Halt>
 8004878:	e3da      	b.n	8005030 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	78fa      	ldrb	r2, [r7, #3]
 8004880:	4611      	mov	r1, r2
 8004882:	4618      	mov	r0, r3
 8004884:	f003 fcc7 	bl	8008216 <USB_ReadChInterrupts>
 8004888:	4603      	mov	r3, r0
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b01      	cmp	r3, #1
 8004890:	d168      	bne.n	8004964 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004892:	78fa      	ldrb	r2, [r7, #3]
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	4613      	mov	r3, r2
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	1a9b      	subs	r3, r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	3344      	adds	r3, #68	@ 0x44
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	78fa      	ldrb	r2, [r7, #3]
 80048ac:	4611      	mov	r1, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f003 fcb1 	bl	8008216 <USB_ReadChInterrupts>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ba:	2b40      	cmp	r3, #64	@ 0x40
 80048bc:	d112      	bne.n	80048e4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80048be:	78fa      	ldrb	r2, [r7, #3]
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	1a9b      	subs	r3, r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	3319      	adds	r3, #25
 80048ce:	2201      	movs	r2, #1
 80048d0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80048d2:	78fb      	ldrb	r3, [r7, #3]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048de:	461a      	mov	r2, r3
 80048e0:	2340      	movs	r3, #64	@ 0x40
 80048e2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80048e4:	78fa      	ldrb	r2, [r7, #3]
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	4613      	mov	r3, r2
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	331b      	adds	r3, #27
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d019      	beq.n	800492e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80048fa:	78fa      	ldrb	r2, [r7, #3]
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	4613      	mov	r3, r2
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	1a9b      	subs	r3, r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	331b      	adds	r3, #27
 800490a:	2200      	movs	r2, #0
 800490c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800490e:	78fb      	ldrb	r3, [r7, #3]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4413      	add	r3, r2
 8004916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	78fa      	ldrb	r2, [r7, #3]
 800491e:	0151      	lsls	r1, r2, #5
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	440a      	add	r2, r1
 8004924:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004928:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800492c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4413      	add	r3, r2
 8004936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800493a:	461a      	mov	r2, r3
 800493c:	2301      	movs	r3, #1
 800493e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004940:	78fa      	ldrb	r2, [r7, #3]
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	4613      	mov	r3, r2
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	1a9b      	subs	r3, r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	334d      	adds	r3, #77	@ 0x4d
 8004950:	2201      	movs	r2, #1
 8004952:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	78fa      	ldrb	r2, [r7, #3]
 800495a:	4611      	mov	r1, r2
 800495c:	4618      	mov	r0, r3
 800495e:	f004 f9fe 	bl	8008d5e <USB_HC_Halt>
 8004962:	e365      	b.n	8005030 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	78fa      	ldrb	r2, [r7, #3]
 800496a:	4611      	mov	r1, r2
 800496c:	4618      	mov	r0, r3
 800496e:	f003 fc52 	bl	8008216 <USB_ReadChInterrupts>
 8004972:	4603      	mov	r3, r0
 8004974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004978:	2b40      	cmp	r3, #64	@ 0x40
 800497a:	d139      	bne.n	80049f0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800497c:	78fa      	ldrb	r2, [r7, #3]
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	4613      	mov	r3, r2
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	1a9b      	subs	r3, r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	334d      	adds	r3, #77	@ 0x4d
 800498c:	2205      	movs	r2, #5
 800498e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004990:	78fa      	ldrb	r2, [r7, #3]
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	4613      	mov	r3, r2
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	331a      	adds	r3, #26
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80049a6:	78fa      	ldrb	r2, [r7, #3]
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	1a9b      	subs	r3, r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	440b      	add	r3, r1
 80049b4:	3319      	adds	r3, #25
 80049b6:	2201      	movs	r2, #1
 80049b8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80049ba:	78fa      	ldrb	r2, [r7, #3]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	3344      	adds	r3, #68	@ 0x44
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	78fa      	ldrb	r2, [r7, #3]
 80049d4:	4611      	mov	r1, r2
 80049d6:	4618      	mov	r0, r3
 80049d8:	f004 f9c1 	bl	8008d5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049e8:	461a      	mov	r2, r3
 80049ea:	2340      	movs	r3, #64	@ 0x40
 80049ec:	6093      	str	r3, [r2, #8]
 80049ee:	e31f      	b.n	8005030 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	78fa      	ldrb	r2, [r7, #3]
 80049f6:	4611      	mov	r1, r2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f003 fc0c 	bl	8008216 <USB_ReadChInterrupts>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f003 0308 	and.w	r3, r3, #8
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d11a      	bne.n	8004a3e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a14:	461a      	mov	r2, r3
 8004a16:	2308      	movs	r3, #8
 8004a18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004a1a:	78fa      	ldrb	r2, [r7, #3]
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	1a9b      	subs	r3, r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	440b      	add	r3, r1
 8004a28:	334d      	adds	r3, #77	@ 0x4d
 8004a2a:	2206      	movs	r2, #6
 8004a2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	78fa      	ldrb	r2, [r7, #3]
 8004a34:	4611      	mov	r1, r2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f004 f991 	bl	8008d5e <USB_HC_Halt>
 8004a3c:	e2f8      	b.n	8005030 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	78fa      	ldrb	r2, [r7, #3]
 8004a44:	4611      	mov	r1, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f003 fbe5 	bl	8008216 <USB_ReadChInterrupts>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b10      	cmp	r3, #16
 8004a54:	d144      	bne.n	8004ae0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004a56:	78fa      	ldrb	r2, [r7, #3]
 8004a58:	6879      	ldr	r1, [r7, #4]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	1a9b      	subs	r3, r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	440b      	add	r3, r1
 8004a64:	3344      	adds	r3, #68	@ 0x44
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004a6a:	78fa      	ldrb	r2, [r7, #3]
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	440b      	add	r3, r1
 8004a78:	334d      	adds	r3, #77	@ 0x4d
 8004a7a:	2204      	movs	r2, #4
 8004a7c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004a7e:	78fa      	ldrb	r2, [r7, #3]
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	1a9b      	subs	r3, r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	3319      	adds	r3, #25
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d114      	bne.n	8004abe <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004a94:	78fa      	ldrb	r2, [r7, #3]
 8004a96:	6879      	ldr	r1, [r7, #4]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	1a9b      	subs	r3, r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	440b      	add	r3, r1
 8004aa2:	3318      	adds	r3, #24
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004aaa:	78fa      	ldrb	r2, [r7, #3]
 8004aac:	6879      	ldr	r1, [r7, #4]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	1a9b      	subs	r3, r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	440b      	add	r3, r1
 8004ab8:	3319      	adds	r3, #25
 8004aba:	2201      	movs	r2, #1
 8004abc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	78fa      	ldrb	r2, [r7, #3]
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f004 f949 	bl	8008d5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004acc:	78fb      	ldrb	r3, [r7, #3]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ad8:	461a      	mov	r2, r3
 8004ada:	2310      	movs	r3, #16
 8004adc:	6093      	str	r3, [r2, #8]
 8004ade:	e2a7      	b.n	8005030 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	78fa      	ldrb	r2, [r7, #3]
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f003 fb94 	bl	8008216 <USB_ReadChInterrupts>
 8004aee:	4603      	mov	r3, r0
 8004af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af4:	2b80      	cmp	r3, #128	@ 0x80
 8004af6:	f040 8083 	bne.w	8004c00 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	799b      	ldrb	r3, [r3, #6]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d111      	bne.n	8004b26 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004b02:	78fa      	ldrb	r2, [r7, #3]
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	1a9b      	subs	r3, r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	440b      	add	r3, r1
 8004b10:	334d      	adds	r3, #77	@ 0x4d
 8004b12:	2207      	movs	r2, #7
 8004b14:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	78fa      	ldrb	r2, [r7, #3]
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f004 f91d 	bl	8008d5e <USB_HC_Halt>
 8004b24:	e062      	b.n	8004bec <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004b26:	78fa      	ldrb	r2, [r7, #3]
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	440b      	add	r3, r1
 8004b34:	3344      	adds	r3, #68	@ 0x44
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	1c59      	adds	r1, r3, #1
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	1a9b      	subs	r3, r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4403      	add	r3, r0
 8004b46:	3344      	adds	r3, #68	@ 0x44
 8004b48:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b4a:	78fa      	ldrb	r2, [r7, #3]
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	1a9b      	subs	r3, r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	3344      	adds	r3, #68	@ 0x44
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d922      	bls.n	8004ba6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004b60:	78fa      	ldrb	r2, [r7, #3]
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	4613      	mov	r3, r2
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	1a9b      	subs	r3, r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	3344      	adds	r3, #68	@ 0x44
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b74:	78fa      	ldrb	r2, [r7, #3]
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	1a9b      	subs	r3, r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	334c      	adds	r3, #76	@ 0x4c
 8004b84:	2204      	movs	r2, #4
 8004b86:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b88:	78fa      	ldrb	r2, [r7, #3]
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	1a9b      	subs	r3, r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	334c      	adds	r3, #76	@ 0x4c
 8004b98:	781a      	ldrb	r2, [r3, #0]
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f006 fc36 	bl	800b410 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004ba4:	e022      	b.n	8004bec <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ba6:	78fa      	ldrb	r2, [r7, #3]
 8004ba8:	6879      	ldr	r1, [r7, #4]
 8004baa:	4613      	mov	r3, r2
 8004bac:	011b      	lsls	r3, r3, #4
 8004bae:	1a9b      	subs	r3, r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	440b      	add	r3, r1
 8004bb4:	334c      	adds	r3, #76	@ 0x4c
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004bba:	78fb      	ldrb	r3, [r7, #3]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004bd0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004bd8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004bda:	78fb      	ldrb	r3, [r7, #3]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004be6:	461a      	mov	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004bec:	78fb      	ldrb	r3, [r7, #3]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	2380      	movs	r3, #128	@ 0x80
 8004bfc:	6093      	str	r3, [r2, #8]
 8004bfe:	e217      	b.n	8005030 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	78fa      	ldrb	r2, [r7, #3]
 8004c06:	4611      	mov	r1, r2
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f003 fb04 	bl	8008216 <USB_ReadChInterrupts>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c18:	d11b      	bne.n	8004c52 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004c1a:	78fa      	ldrb	r2, [r7, #3]
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	1a9b      	subs	r3, r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	440b      	add	r3, r1
 8004c28:	334d      	adds	r3, #77	@ 0x4d
 8004c2a:	2209      	movs	r2, #9
 8004c2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	78fa      	ldrb	r2, [r7, #3]
 8004c34:	4611      	mov	r1, r2
 8004c36:	4618      	mov	r0, r3
 8004c38:	f004 f891 	bl	8008d5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004c3c:	78fb      	ldrb	r3, [r7, #3]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c4e:	6093      	str	r3, [r2, #8]
 8004c50:	e1ee      	b.n	8005030 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	78fa      	ldrb	r2, [r7, #3]
 8004c58:	4611      	mov	r1, r2
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f003 fadb 	bl	8008216 <USB_ReadChInterrupts>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	f040 81df 	bne.w	800502a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004c6c:	78fb      	ldrb	r3, [r7, #3]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c78:	461a      	mov	r2, r3
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	1a9b      	subs	r3, r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	334d      	adds	r3, #77	@ 0x4d
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	f040 8093 	bne.w	8004dbc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c96:	78fa      	ldrb	r2, [r7, #3]
 8004c98:	6879      	ldr	r1, [r7, #4]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	1a9b      	subs	r3, r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	440b      	add	r3, r1
 8004ca4:	334d      	adds	r3, #77	@ 0x4d
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004caa:	78fa      	ldrb	r2, [r7, #3]
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	1a9b      	subs	r3, r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	334c      	adds	r3, #76	@ 0x4c
 8004cba:	2201      	movs	r2, #1
 8004cbc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004cbe:	78fa      	ldrb	r2, [r7, #3]
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	1a9b      	subs	r3, r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	3326      	adds	r3, #38	@ 0x26
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d00b      	beq.n	8004cec <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004cd4:	78fa      	ldrb	r2, [r7, #3]
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	440b      	add	r3, r1
 8004ce2:	3326      	adds	r3, #38	@ 0x26
 8004ce4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	f040 8190 	bne.w	800500c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	799b      	ldrb	r3, [r3, #6]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d115      	bne.n	8004d20 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004cf4:	78fa      	ldrb	r2, [r7, #3]
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	1a9b      	subs	r3, r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	333d      	adds	r3, #61	@ 0x3d
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	78fa      	ldrb	r2, [r7, #3]
 8004d08:	f083 0301 	eor.w	r3, r3, #1
 8004d0c:	b2d8      	uxtb	r0, r3
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	1a9b      	subs	r3, r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	333d      	adds	r3, #61	@ 0x3d
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	799b      	ldrb	r3, [r3, #6]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	f040 8171 	bne.w	800500c <HCD_HC_OUT_IRQHandler+0x954>
 8004d2a:	78fa      	ldrb	r2, [r7, #3]
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	1a9b      	subs	r3, r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	3334      	adds	r3, #52	@ 0x34
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 8165 	beq.w	800500c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	1a9b      	subs	r3, r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	3334      	adds	r3, #52	@ 0x34
 8004d52:	6819      	ldr	r1, [r3, #0]
 8004d54:	78fa      	ldrb	r2, [r7, #3]
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	1a9b      	subs	r3, r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4403      	add	r3, r0
 8004d62:	3328      	adds	r3, #40	@ 0x28
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	440b      	add	r3, r1
 8004d68:	1e59      	subs	r1, r3, #1
 8004d6a:	78fa      	ldrb	r2, [r7, #3]
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	1a9b      	subs	r3, r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4403      	add	r3, r0
 8004d78:	3328      	adds	r3, #40	@ 0x28
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d80:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 813f 	beq.w	800500c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004d8e:	78fa      	ldrb	r2, [r7, #3]
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	333d      	adds	r3, #61	@ 0x3d
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	78fa      	ldrb	r2, [r7, #3]
 8004da2:	f083 0301 	eor.w	r3, r3, #1
 8004da6:	b2d8      	uxtb	r0, r3
 8004da8:	6879      	ldr	r1, [r7, #4]
 8004daa:	4613      	mov	r3, r2
 8004dac:	011b      	lsls	r3, r3, #4
 8004dae:	1a9b      	subs	r3, r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	440b      	add	r3, r1
 8004db4:	333d      	adds	r3, #61	@ 0x3d
 8004db6:	4602      	mov	r2, r0
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	e127      	b.n	800500c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004dbc:	78fa      	ldrb	r2, [r7, #3]
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	1a9b      	subs	r3, r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	440b      	add	r3, r1
 8004dca:	334d      	adds	r3, #77	@ 0x4d
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d120      	bne.n	8004e14 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004dd2:	78fa      	ldrb	r2, [r7, #3]
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	1a9b      	subs	r3, r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	440b      	add	r3, r1
 8004de0:	334d      	adds	r3, #77	@ 0x4d
 8004de2:	2202      	movs	r2, #2
 8004de4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004de6:	78fa      	ldrb	r2, [r7, #3]
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	1a9b      	subs	r3, r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	331b      	adds	r3, #27
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	f040 8107 	bne.w	800500c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004dfe:	78fa      	ldrb	r2, [r7, #3]
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	1a9b      	subs	r3, r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	334c      	adds	r3, #76	@ 0x4c
 8004e0e:	2202      	movs	r2, #2
 8004e10:	701a      	strb	r2, [r3, #0]
 8004e12:	e0fb      	b.n	800500c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004e14:	78fa      	ldrb	r2, [r7, #3]
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	1a9b      	subs	r3, r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	334d      	adds	r3, #77	@ 0x4d
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d13a      	bne.n	8004ea0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e2a:	78fa      	ldrb	r2, [r7, #3]
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	1a9b      	subs	r3, r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	334d      	adds	r3, #77	@ 0x4d
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e3e:	78fa      	ldrb	r2, [r7, #3]
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	4613      	mov	r3, r2
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	1a9b      	subs	r3, r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	334c      	adds	r3, #76	@ 0x4c
 8004e4e:	2202      	movs	r2, #2
 8004e50:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004e52:	78fa      	ldrb	r2, [r7, #3]
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	4613      	mov	r3, r2
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	1a9b      	subs	r3, r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	440b      	add	r3, r1
 8004e60:	331b      	adds	r3, #27
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	f040 80d1 	bne.w	800500c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004e6a:	78fa      	ldrb	r2, [r7, #3]
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	1a9b      	subs	r3, r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	331b      	adds	r3, #27
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e7e:	78fb      	ldrb	r3, [r7, #3]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	78fa      	ldrb	r2, [r7, #3]
 8004e8e:	0151      	lsls	r1, r2, #5
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	440a      	add	r2, r1
 8004e94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e9c:	6053      	str	r3, [r2, #4]
 8004e9e:	e0b5      	b.n	800500c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004ea0:	78fa      	ldrb	r2, [r7, #3]
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	1a9b      	subs	r3, r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	334d      	adds	r3, #77	@ 0x4d
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	2b05      	cmp	r3, #5
 8004eb4:	d114      	bne.n	8004ee0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004eb6:	78fa      	ldrb	r2, [r7, #3]
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	1a9b      	subs	r3, r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	440b      	add	r3, r1
 8004ec4:	334d      	adds	r3, #77	@ 0x4d
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004eca:	78fa      	ldrb	r2, [r7, #3]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	334c      	adds	r3, #76	@ 0x4c
 8004eda:	2202      	movs	r2, #2
 8004edc:	701a      	strb	r2, [r3, #0]
 8004ede:	e095      	b.n	800500c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004ee0:	78fa      	ldrb	r2, [r7, #3]
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	1a9b      	subs	r3, r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	334d      	adds	r3, #77	@ 0x4d
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b06      	cmp	r3, #6
 8004ef4:	d114      	bne.n	8004f20 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ef6:	78fa      	ldrb	r2, [r7, #3]
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	4613      	mov	r3, r2
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	1a9b      	subs	r3, r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	440b      	add	r3, r1
 8004f04:	334d      	adds	r3, #77	@ 0x4d
 8004f06:	2202      	movs	r2, #2
 8004f08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004f0a:	78fa      	ldrb	r2, [r7, #3]
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	1a9b      	subs	r3, r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	334c      	adds	r3, #76	@ 0x4c
 8004f1a:	2205      	movs	r2, #5
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	e075      	b.n	800500c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004f20:	78fa      	ldrb	r2, [r7, #3]
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	4613      	mov	r3, r2
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	1a9b      	subs	r3, r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	440b      	add	r3, r1
 8004f2e:	334d      	adds	r3, #77	@ 0x4d
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2b07      	cmp	r3, #7
 8004f34:	d00a      	beq.n	8004f4c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004f36:	78fa      	ldrb	r2, [r7, #3]
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	1a9b      	subs	r3, r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	440b      	add	r3, r1
 8004f44:	334d      	adds	r3, #77	@ 0x4d
 8004f46:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004f48:	2b09      	cmp	r3, #9
 8004f4a:	d170      	bne.n	800502e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f4c:	78fa      	ldrb	r2, [r7, #3]
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	4613      	mov	r3, r2
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	1a9b      	subs	r3, r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	440b      	add	r3, r1
 8004f5a:	334d      	adds	r3, #77	@ 0x4d
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004f60:	78fa      	ldrb	r2, [r7, #3]
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	4613      	mov	r3, r2
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	1a9b      	subs	r3, r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	440b      	add	r3, r1
 8004f6e:	3344      	adds	r3, #68	@ 0x44
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	1c59      	adds	r1, r3, #1
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	1a9b      	subs	r3, r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4403      	add	r3, r0
 8004f80:	3344      	adds	r3, #68	@ 0x44
 8004f82:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f84:	78fa      	ldrb	r2, [r7, #3]
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	1a9b      	subs	r3, r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	3344      	adds	r3, #68	@ 0x44
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d914      	bls.n	8004fc4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004f9a:	78fa      	ldrb	r2, [r7, #3]
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	3344      	adds	r3, #68	@ 0x44
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004fae:	78fa      	ldrb	r2, [r7, #3]
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	1a9b      	subs	r3, r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	334c      	adds	r3, #76	@ 0x4c
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004fc2:	e022      	b.n	800500a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004fc4:	78fa      	ldrb	r2, [r7, #3]
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	1a9b      	subs	r3, r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	334c      	adds	r3, #76	@ 0x4c
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004fd8:	78fb      	ldrb	r3, [r7, #3]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004fee:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ff6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005004:	461a      	mov	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800500a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800500c:	78fa      	ldrb	r2, [r7, #3]
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	4613      	mov	r3, r2
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	334c      	adds	r3, #76	@ 0x4c
 800501c:	781a      	ldrb	r2, [r3, #0]
 800501e:	78fb      	ldrb	r3, [r7, #3]
 8005020:	4619      	mov	r1, r3
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f006 f9f4 	bl	800b410 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005028:	e002      	b.n	8005030 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800502a:	bf00      	nop
 800502c:	e000      	b.n	8005030 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800502e:	bf00      	nop
  }
}
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b08a      	sub	sp, #40	@ 0x28
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005046:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	0c5b      	lsrs	r3, r3, #17
 800505c:	f003 030f 	and.w	r3, r3, #15
 8005060:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	091b      	lsrs	r3, r3, #4
 8005066:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800506a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d004      	beq.n	800507c <HCD_RXQLVL_IRQHandler+0x46>
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b05      	cmp	r3, #5
 8005076:	f000 80b6 	beq.w	80051e6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800507a:	e0b7      	b.n	80051ec <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 80b3 	beq.w	80051ea <HCD_RXQLVL_IRQHandler+0x1b4>
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	4613      	mov	r3, r2
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	1a9b      	subs	r3, r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	332c      	adds	r3, #44	@ 0x2c
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 80a7 	beq.w	80051ea <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	4613      	mov	r3, r2
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	1a9b      	subs	r3, r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	3338      	adds	r3, #56	@ 0x38
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	18d1      	adds	r1, r2, r3
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	4613      	mov	r3, r2
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	1a9b      	subs	r3, r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4403      	add	r3, r0
 80050c0:	3334      	adds	r3, #52	@ 0x34
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4299      	cmp	r1, r3
 80050c6:	f200 8083 	bhi.w	80051d0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	4613      	mov	r3, r2
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	440b      	add	r3, r1
 80050dc:	332c      	adds	r3, #44	@ 0x2c
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	b292      	uxth	r2, r2
 80050e4:	4619      	mov	r1, r3
 80050e6:	f003 f82b 	bl	8008140 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	4613      	mov	r3, r2
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	1a9b      	subs	r3, r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	332c      	adds	r3, #44	@ 0x2c
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	18d1      	adds	r1, r2, r3
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	4613      	mov	r3, r2
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	1a9b      	subs	r3, r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4403      	add	r3, r0
 800510e:	332c      	adds	r3, #44	@ 0x2c
 8005110:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4613      	mov	r3, r2
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	1a9b      	subs	r3, r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
 8005120:	3338      	adds	r3, #56	@ 0x38
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	18d1      	adds	r1, r2, r3
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	4613      	mov	r3, r2
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	1a9b      	subs	r3, r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4403      	add	r3, r0
 8005136:	3338      	adds	r3, #56	@ 0x38
 8005138:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	4413      	add	r3, r2
 8005142:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	0cdb      	lsrs	r3, r3, #19
 800514a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800514e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	4613      	mov	r3, r2
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	1a9b      	subs	r3, r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	440b      	add	r3, r1
 800515e:	3328      	adds	r3, #40	@ 0x28
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	4293      	cmp	r3, r2
 8005168:	d13f      	bne.n	80051ea <HCD_RXQLVL_IRQHandler+0x1b4>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d03c      	beq.n	80051ea <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	4413      	add	r3, r2
 8005178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005186:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800518e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	4413      	add	r3, r2
 8005198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800519c:	461a      	mov	r2, r3
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	4613      	mov	r3, r2
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	1a9b      	subs	r3, r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	440b      	add	r3, r1
 80051b0:	333c      	adds	r3, #60	@ 0x3c
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	f083 0301 	eor.w	r3, r3, #1
 80051b8:	b2d8      	uxtb	r0, r3
 80051ba:	6879      	ldr	r1, [r7, #4]
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	4613      	mov	r3, r2
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	1a9b      	subs	r3, r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	333c      	adds	r3, #60	@ 0x3c
 80051ca:	4602      	mov	r2, r0
 80051cc:	701a      	strb	r2, [r3, #0]
      break;
 80051ce:	e00c      	b.n	80051ea <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4613      	mov	r3, r2
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	1a9b      	subs	r3, r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	334c      	adds	r3, #76	@ 0x4c
 80051e0:	2204      	movs	r2, #4
 80051e2:	701a      	strb	r2, [r3, #0]
      break;
 80051e4:	e001      	b.n	80051ea <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80051e6:	bf00      	nop
 80051e8:	e000      	b.n	80051ec <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80051ea:	bf00      	nop
  }
}
 80051ec:	bf00      	nop
 80051ee:	3728      	adds	r7, #40	@ 0x28
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005220:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b02      	cmp	r3, #2
 800522a:	d10b      	bne.n	8005244 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b01      	cmp	r3, #1
 8005234:	d102      	bne.n	800523c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f006 f8ce 	bl	800b3d8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f043 0302 	orr.w	r3, r3, #2
 8005242:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b08      	cmp	r3, #8
 800524c:	d132      	bne.n	80052b4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	f043 0308 	orr.w	r3, r3, #8
 8005254:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b04      	cmp	r3, #4
 800525e:	d126      	bne.n	80052ae <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	7a5b      	ldrb	r3, [r3, #9]
 8005264:	2b02      	cmp	r3, #2
 8005266:	d113      	bne.n	8005290 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800526e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005272:	d106      	bne.n	8005282 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2102      	movs	r1, #2
 800527a:	4618      	mov	r0, r3
 800527c:	f003 f8f0 	bl	8008460 <USB_InitFSLSPClkSel>
 8005280:	e011      	b.n	80052a6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2101      	movs	r1, #1
 8005288:	4618      	mov	r0, r3
 800528a:	f003 f8e9 	bl	8008460 <USB_InitFSLSPClkSel>
 800528e:	e00a      	b.n	80052a6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	79db      	ldrb	r3, [r3, #7]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d106      	bne.n	80052a6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800529e:	461a      	mov	r2, r3
 80052a0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80052a4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f006 f8c0 	bl	800b42c <HAL_HCD_PortEnabled_Callback>
 80052ac:	e002      	b.n	80052b4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f006 f8ca 	bl	800b448 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b20      	cmp	r3, #32
 80052bc:	d103      	bne.n	80052c6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f043 0320 	orr.w	r3, r3, #32
 80052c4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80052cc:	461a      	mov	r2, r3
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	6013      	str	r3, [r2, #0]
}
 80052d2:	bf00      	nop
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e12b      	b.n	8005546 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fd f89e 	bl	8002444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2224      	movs	r2, #36	@ 0x24
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0201 	bic.w	r2, r2, #1
 800531e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800532e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800533e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005340:	f002 f8d6 	bl	80074f0 <HAL_RCC_GetPCLK1Freq>
 8005344:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	4a81      	ldr	r2, [pc, #516]	@ (8005550 <HAL_I2C_Init+0x274>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d807      	bhi.n	8005360 <HAL_I2C_Init+0x84>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4a80      	ldr	r2, [pc, #512]	@ (8005554 <HAL_I2C_Init+0x278>)
 8005354:	4293      	cmp	r3, r2
 8005356:	bf94      	ite	ls
 8005358:	2301      	movls	r3, #1
 800535a:	2300      	movhi	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	e006      	b.n	800536e <HAL_I2C_Init+0x92>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4a7d      	ldr	r2, [pc, #500]	@ (8005558 <HAL_I2C_Init+0x27c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	bf94      	ite	ls
 8005368:	2301      	movls	r3, #1
 800536a:	2300      	movhi	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e0e7      	b.n	8005546 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	4a78      	ldr	r2, [pc, #480]	@ (800555c <HAL_I2C_Init+0x280>)
 800537a:	fba2 2303 	umull	r2, r3, r2, r3
 800537e:	0c9b      	lsrs	r3, r3, #18
 8005380:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	430a      	orrs	r2, r1
 8005394:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	4a6a      	ldr	r2, [pc, #424]	@ (8005550 <HAL_I2C_Init+0x274>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d802      	bhi.n	80053b0 <HAL_I2C_Init+0xd4>
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	3301      	adds	r3, #1
 80053ae:	e009      	b.n	80053c4 <HAL_I2C_Init+0xe8>
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80053b6:	fb02 f303 	mul.w	r3, r2, r3
 80053ba:	4a69      	ldr	r2, [pc, #420]	@ (8005560 <HAL_I2C_Init+0x284>)
 80053bc:	fba2 2303 	umull	r2, r3, r2, r3
 80053c0:	099b      	lsrs	r3, r3, #6
 80053c2:	3301      	adds	r3, #1
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6812      	ldr	r2, [r2, #0]
 80053c8:	430b      	orrs	r3, r1
 80053ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80053d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	495c      	ldr	r1, [pc, #368]	@ (8005550 <HAL_I2C_Init+0x274>)
 80053e0:	428b      	cmp	r3, r1
 80053e2:	d819      	bhi.n	8005418 <HAL_I2C_Init+0x13c>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	1e59      	subs	r1, r3, #1
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80053f2:	1c59      	adds	r1, r3, #1
 80053f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80053f8:	400b      	ands	r3, r1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <HAL_I2C_Init+0x138>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	1e59      	subs	r1, r3, #1
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	fbb1 f3f3 	udiv	r3, r1, r3
 800540c:	3301      	adds	r3, #1
 800540e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005412:	e051      	b.n	80054b8 <HAL_I2C_Init+0x1dc>
 8005414:	2304      	movs	r3, #4
 8005416:	e04f      	b.n	80054b8 <HAL_I2C_Init+0x1dc>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d111      	bne.n	8005444 <HAL_I2C_Init+0x168>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	1e58      	subs	r0, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6859      	ldr	r1, [r3, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	440b      	add	r3, r1
 800542e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005432:	3301      	adds	r3, #1
 8005434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005438:	2b00      	cmp	r3, #0
 800543a:	bf0c      	ite	eq
 800543c:	2301      	moveq	r3, #1
 800543e:	2300      	movne	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	e012      	b.n	800546a <HAL_I2C_Init+0x18e>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	1e58      	subs	r0, r3, #1
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6859      	ldr	r1, [r3, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	0099      	lsls	r1, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	fbb0 f3f3 	udiv	r3, r0, r3
 800545a:	3301      	adds	r3, #1
 800545c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005460:	2b00      	cmp	r3, #0
 8005462:	bf0c      	ite	eq
 8005464:	2301      	moveq	r3, #1
 8005466:	2300      	movne	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <HAL_I2C_Init+0x196>
 800546e:	2301      	movs	r3, #1
 8005470:	e022      	b.n	80054b8 <HAL_I2C_Init+0x1dc>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10e      	bne.n	8005498 <HAL_I2C_Init+0x1bc>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1e58      	subs	r0, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6859      	ldr	r1, [r3, #4]
 8005482:	460b      	mov	r3, r1
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	440b      	add	r3, r1
 8005488:	fbb0 f3f3 	udiv	r3, r0, r3
 800548c:	3301      	adds	r3, #1
 800548e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005496:	e00f      	b.n	80054b8 <HAL_I2C_Init+0x1dc>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	1e58      	subs	r0, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6859      	ldr	r1, [r3, #4]
 80054a0:	460b      	mov	r3, r1
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	0099      	lsls	r1, r3, #2
 80054a8:	440b      	add	r3, r1
 80054aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80054ae:	3301      	adds	r3, #1
 80054b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	6809      	ldr	r1, [r1, #0]
 80054bc:	4313      	orrs	r3, r2
 80054be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	69da      	ldr	r2, [r3, #28]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80054e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6911      	ldr	r1, [r2, #16]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	68d2      	ldr	r2, [r2, #12]
 80054f2:	4311      	orrs	r1, r2
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6812      	ldr	r2, [r2, #0]
 80054f8:	430b      	orrs	r3, r1
 80054fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	695a      	ldr	r2, [r3, #20]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0201 	orr.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	000186a0 	.word	0x000186a0
 8005554:	001e847f 	.word	0x001e847f
 8005558:	003d08ff 	.word	0x003d08ff
 800555c:	431bde83 	.word	0x431bde83
 8005560:	10624dd3 	.word	0x10624dd3

08005564 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b088      	sub	sp, #32
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	607a      	str	r2, [r7, #4]
 800556e:	461a      	mov	r2, r3
 8005570:	460b      	mov	r3, r1
 8005572:	817b      	strh	r3, [r7, #10]
 8005574:	4613      	mov	r3, r2
 8005576:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005578:	f7fd fa6c 	bl	8002a54 <HAL_GetTick>
 800557c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b20      	cmp	r3, #32
 8005588:	f040 80e0 	bne.w	800574c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	2319      	movs	r3, #25
 8005592:	2201      	movs	r2, #1
 8005594:	4970      	ldr	r1, [pc, #448]	@ (8005758 <HAL_I2C_Master_Transmit+0x1f4>)
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 fc64 	bl	8005e64 <I2C_WaitOnFlagUntilTimeout>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80055a2:	2302      	movs	r3, #2
 80055a4:	e0d3      	b.n	800574e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_I2C_Master_Transmit+0x50>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e0cc      	b.n	800574e <HAL_I2C_Master_Transmit+0x1ea>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d007      	beq.n	80055da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0201 	orr.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2221      	movs	r2, #33	@ 0x21
 80055ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2210      	movs	r2, #16
 80055f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	893a      	ldrh	r2, [r7, #8]
 800560a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4a50      	ldr	r2, [pc, #320]	@ (800575c <HAL_I2C_Master_Transmit+0x1f8>)
 800561a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800561c:	8979      	ldrh	r1, [r7, #10]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	6a3a      	ldr	r2, [r7, #32]
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 face 	bl	8005bc4 <I2C_MasterRequestWrite>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e08d      	b.n	800574e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005632:	2300      	movs	r3, #0
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005648:	e066      	b.n	8005718 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	6a39      	ldr	r1, [r7, #32]
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 fd22 	bl	8006098 <I2C_WaitOnTXEFlagUntilTimeout>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00d      	beq.n	8005676 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565e:	2b04      	cmp	r3, #4
 8005660:	d107      	bne.n	8005672 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005670:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e06b      	b.n	800574e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567a:	781a      	ldrb	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005690:	b29b      	uxth	r3, r3
 8005692:	3b01      	subs	r3, #1
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d11b      	bne.n	80056ec <HAL_I2C_Master_Transmit+0x188>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d017      	beq.n	80056ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c0:	781a      	ldrb	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	6a39      	ldr	r1, [r7, #32]
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 fd19 	bl	8006128 <I2C_WaitOnBTFFlagUntilTimeout>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00d      	beq.n	8005718 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005700:	2b04      	cmp	r3, #4
 8005702:	d107      	bne.n	8005714 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005712:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e01a      	b.n	800574e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800571c:	2b00      	cmp	r3, #0
 800571e:	d194      	bne.n	800564a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800572e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	e000      	b.n	800574e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800574c:	2302      	movs	r3, #2
  }
}
 800574e:	4618      	mov	r0, r3
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	00100002 	.word	0x00100002
 800575c:	ffff0000 	.word	0xffff0000

08005760 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08c      	sub	sp, #48	@ 0x30
 8005764:	af02      	add	r7, sp, #8
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	607a      	str	r2, [r7, #4]
 800576a:	461a      	mov	r2, r3
 800576c:	460b      	mov	r3, r1
 800576e:	817b      	strh	r3, [r7, #10]
 8005770:	4613      	mov	r3, r2
 8005772:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005774:	f7fd f96e 	bl	8002a54 <HAL_GetTick>
 8005778:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b20      	cmp	r3, #32
 8005784:	f040 8217 	bne.w	8005bb6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	2319      	movs	r3, #25
 800578e:	2201      	movs	r2, #1
 8005790:	497c      	ldr	r1, [pc, #496]	@ (8005984 <HAL_I2C_Master_Receive+0x224>)
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 fb66 	bl	8005e64 <I2C_WaitOnFlagUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800579e:	2302      	movs	r3, #2
 80057a0:	e20a      	b.n	8005bb8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_I2C_Master_Receive+0x50>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e203      	b.n	8005bb8 <HAL_I2C_Master_Receive+0x458>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d007      	beq.n	80057d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f042 0201 	orr.w	r2, r2, #1
 80057d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2222      	movs	r2, #34	@ 0x22
 80057ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2210      	movs	r2, #16
 80057f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	893a      	ldrh	r2, [r7, #8]
 8005806:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4a5c      	ldr	r2, [pc, #368]	@ (8005988 <HAL_I2C_Master_Receive+0x228>)
 8005816:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005818:	8979      	ldrh	r1, [r7, #10]
 800581a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 fa52 	bl	8005cc8 <I2C_MasterRequestRead>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e1c4      	b.n	8005bb8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005832:	2b00      	cmp	r3, #0
 8005834:	d113      	bne.n	800585e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005836:	2300      	movs	r3, #0
 8005838:	623b      	str	r3, [r7, #32]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	623b      	str	r3, [r7, #32]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	623b      	str	r3, [r7, #32]
 800584a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	e198      	b.n	8005b90 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005862:	2b01      	cmp	r3, #1
 8005864:	d11b      	bne.n	800589e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005874:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005876:	2300      	movs	r3, #0
 8005878:	61fb      	str	r3, [r7, #28]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	61fb      	str	r3, [r7, #28]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	61fb      	str	r3, [r7, #28]
 800588a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	e178      	b.n	8005b90 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d11b      	bne.n	80058de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058c6:	2300      	movs	r3, #0
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	61bb      	str	r3, [r7, #24]
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	e158      	b.n	8005b90 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80058ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ee:	2300      	movs	r3, #0
 80058f0:	617b      	str	r3, [r7, #20]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	617b      	str	r3, [r7, #20]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	617b      	str	r3, [r7, #20]
 8005902:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005904:	e144      	b.n	8005b90 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800590a:	2b03      	cmp	r3, #3
 800590c:	f200 80f1 	bhi.w	8005af2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005914:	2b01      	cmp	r3, #1
 8005916:	d123      	bne.n	8005960 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800591a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 fc4b 	bl	80061b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e145      	b.n	8005bb8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691a      	ldr	r2, [r3, #16]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593e:	1c5a      	adds	r2, r3, #1
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005954:	b29b      	uxth	r3, r3
 8005956:	3b01      	subs	r3, #1
 8005958:	b29a      	uxth	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800595e:	e117      	b.n	8005b90 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005964:	2b02      	cmp	r3, #2
 8005966:	d14e      	bne.n	8005a06 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596e:	2200      	movs	r2, #0
 8005970:	4906      	ldr	r1, [pc, #24]	@ (800598c <HAL_I2C_Master_Receive+0x22c>)
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 fa76 	bl	8005e64 <I2C_WaitOnFlagUntilTimeout>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d008      	beq.n	8005990 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e11a      	b.n	8005bb8 <HAL_I2C_Master_Receive+0x458>
 8005982:	bf00      	nop
 8005984:	00100002 	.word	0x00100002
 8005988:	ffff0000 	.word	0xffff0000
 800598c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800599e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691a      	ldr	r2, [r3, #16]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059aa:	b2d2      	uxtb	r2, r2
 80059ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b2:	1c5a      	adds	r2, r3, #1
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	3b01      	subs	r3, #1
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ee:	3b01      	subs	r3, #1
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	3b01      	subs	r3, #1
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a04:	e0c4      	b.n	8005b90 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	496c      	ldr	r1, [pc, #432]	@ (8005bc0 <HAL_I2C_Master_Receive+0x460>)
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 fa27 	bl	8005e64 <I2C_WaitOnFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e0cb      	b.n	8005bb8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	691a      	ldr	r2, [r3, #16]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3a:	b2d2      	uxtb	r2, r2
 8005a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a42:	1c5a      	adds	r2, r3, #1
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a68:	2200      	movs	r2, #0
 8005a6a:	4955      	ldr	r1, [pc, #340]	@ (8005bc0 <HAL_I2C_Master_Receive+0x460>)
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 f9f9 	bl	8005e64 <I2C_WaitOnFlagUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e09d      	b.n	8005bb8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	691a      	ldr	r2, [r3, #16]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	691a      	ldr	r2, [r3, #16]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005af0:	e04e      	b.n	8005b90 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 fb5e 	bl	80061b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e058      	b.n	8005bb8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b10:	b2d2      	uxtb	r2, r2
 8005b12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b22:	3b01      	subs	r3, #1
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	3b01      	subs	r3, #1
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d124      	bne.n	8005b90 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b4a:	2b03      	cmp	r3, #3
 8005b4c:	d107      	bne.n	8005b5e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b5c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f47f aeb6 	bne.w	8005906 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	e000      	b.n	8005bb8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005bb6:	2302      	movs	r3, #2
  }
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3728      	adds	r7, #40	@ 0x28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	00010004 	.word	0x00010004

08005bc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b088      	sub	sp, #32
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	607a      	str	r2, [r7, #4]
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d006      	beq.n	8005bee <I2C_MasterRequestWrite+0x2a>
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d003      	beq.n	8005bee <I2C_MasterRequestWrite+0x2a>
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005bec:	d108      	bne.n	8005c00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	e00b      	b.n	8005c18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c04:	2b12      	cmp	r3, #18
 8005c06:	d107      	bne.n	8005c18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 f91d 	bl	8005e64 <I2C_WaitOnFlagUntilTimeout>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00d      	beq.n	8005c4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c3e:	d103      	bne.n	8005c48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e035      	b.n	8005cb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c54:	d108      	bne.n	8005c68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c56:	897b      	ldrh	r3, [r7, #10]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c64:	611a      	str	r2, [r3, #16]
 8005c66:	e01b      	b.n	8005ca0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c68:	897b      	ldrh	r3, [r7, #10]
 8005c6a:	11db      	asrs	r3, r3, #7
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	f003 0306 	and.w	r3, r3, #6
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	f063 030f 	orn	r3, r3, #15
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	490e      	ldr	r1, [pc, #56]	@ (8005cc0 <I2C_MasterRequestWrite+0xfc>)
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 f966 	bl	8005f58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e010      	b.n	8005cb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c96:	897b      	ldrh	r3, [r7, #10]
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	4907      	ldr	r1, [pc, #28]	@ (8005cc4 <I2C_MasterRequestWrite+0x100>)
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 f956 	bl	8005f58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e000      	b.n	8005cb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	00010008 	.word	0x00010008
 8005cc4:	00010002 	.word	0x00010002

08005cc8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b088      	sub	sp, #32
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	607a      	str	r2, [r7, #4]
 8005cd2:	603b      	str	r3, [r7, #0]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cdc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005cec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d006      	beq.n	8005d02 <I2C_MasterRequestRead+0x3a>
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d003      	beq.n	8005d02 <I2C_MasterRequestRead+0x3a>
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d00:	d108      	bne.n	8005d14 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	e00b      	b.n	8005d2c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d18:	2b11      	cmp	r3, #17
 8005d1a:	d107      	bne.n	8005d2c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f893 	bl	8005e64 <I2C_WaitOnFlagUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00d      	beq.n	8005d60 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d52:	d103      	bne.n	8005d5c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e079      	b.n	8005e54 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d68:	d108      	bne.n	8005d7c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d6a:	897b      	ldrh	r3, [r7, #10]
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	f043 0301 	orr.w	r3, r3, #1
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	611a      	str	r2, [r3, #16]
 8005d7a:	e05f      	b.n	8005e3c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d7c:	897b      	ldrh	r3, [r7, #10]
 8005d7e:	11db      	asrs	r3, r3, #7
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	f003 0306 	and.w	r3, r3, #6
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	f063 030f 	orn	r3, r3, #15
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	4930      	ldr	r1, [pc, #192]	@ (8005e5c <I2C_MasterRequestRead+0x194>)
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 f8dc 	bl	8005f58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e054      	b.n	8005e54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005daa:	897b      	ldrh	r3, [r7, #10]
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	4929      	ldr	r1, [pc, #164]	@ (8005e60 <I2C_MasterRequestRead+0x198>)
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 f8cc 	bl	8005f58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e044      	b.n	8005e54 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dca:	2300      	movs	r3, #0
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	613b      	str	r3, [r7, #16]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	613b      	str	r3, [r7, #16]
 8005dde:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 f831 	bl	8005e64 <I2C_WaitOnFlagUntilTimeout>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00d      	beq.n	8005e24 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e16:	d103      	bne.n	8005e20 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e1e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e017      	b.n	8005e54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005e24:	897b      	ldrh	r3, [r7, #10]
 8005e26:	11db      	asrs	r3, r3, #7
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	f003 0306 	and.w	r3, r3, #6
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	f063 030e 	orn	r3, r3, #14
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	4907      	ldr	r1, [pc, #28]	@ (8005e60 <I2C_MasterRequestRead+0x198>)
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 f888 	bl	8005f58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e000      	b.n	8005e54 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3718      	adds	r7, #24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	00010008 	.word	0x00010008
 8005e60:	00010002 	.word	0x00010002

08005e64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	603b      	str	r3, [r7, #0]
 8005e70:	4613      	mov	r3, r2
 8005e72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e74:	e048      	b.n	8005f08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7c:	d044      	beq.n	8005f08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e7e:	f7fc fde9 	bl	8002a54 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d302      	bcc.n	8005e94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d139      	bne.n	8005f08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	0c1b      	lsrs	r3, r3, #16
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d10d      	bne.n	8005eba <I2C_WaitOnFlagUntilTimeout+0x56>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	43da      	mvns	r2, r3
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	bf0c      	ite	eq
 8005eb0:	2301      	moveq	r3, #1
 8005eb2:	2300      	movne	r3, #0
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	e00c      	b.n	8005ed4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	43da      	mvns	r2, r3
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	bf0c      	ite	eq
 8005ecc:	2301      	moveq	r3, #1
 8005ece:	2300      	movne	r3, #0
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	79fb      	ldrb	r3, [r7, #7]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d116      	bne.n	8005f08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef4:	f043 0220 	orr.w	r2, r3, #32
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e023      	b.n	8005f50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	0c1b      	lsrs	r3, r3, #16
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d10d      	bne.n	8005f2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	43da      	mvns	r2, r3
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bf0c      	ite	eq
 8005f24:	2301      	moveq	r3, #1
 8005f26:	2300      	movne	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	e00c      	b.n	8005f48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	43da      	mvns	r2, r3
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bf0c      	ite	eq
 8005f40:	2301      	moveq	r3, #1
 8005f42:	2300      	movne	r3, #0
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	461a      	mov	r2, r3
 8005f48:	79fb      	ldrb	r3, [r7, #7]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d093      	beq.n	8005e76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f66:	e071      	b.n	800604c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f76:	d123      	bne.n	8005fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fac:	f043 0204 	orr.w	r2, r3, #4
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e067      	b.n	8006090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc6:	d041      	beq.n	800604c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fc8:	f7fc fd44 	bl	8002a54 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d302      	bcc.n	8005fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d136      	bne.n	800604c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	0c1b      	lsrs	r3, r3, #16
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d10c      	bne.n	8006002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	43da      	mvns	r2, r3
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	bf14      	ite	ne
 8005ffa:	2301      	movne	r3, #1
 8005ffc:	2300      	moveq	r3, #0
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	e00b      	b.n	800601a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	43da      	mvns	r2, r3
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	4013      	ands	r3, r2
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	bf14      	ite	ne
 8006014:	2301      	movne	r3, #1
 8006016:	2300      	moveq	r3, #0
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d016      	beq.n	800604c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006038:	f043 0220 	orr.w	r2, r3, #32
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e021      	b.n	8006090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	0c1b      	lsrs	r3, r3, #16
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b01      	cmp	r3, #1
 8006054:	d10c      	bne.n	8006070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	43da      	mvns	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4013      	ands	r3, r2
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	bf14      	ite	ne
 8006068:	2301      	movne	r3, #1
 800606a:	2300      	moveq	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	e00b      	b.n	8006088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	43da      	mvns	r2, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	4013      	ands	r3, r2
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	bf14      	ite	ne
 8006082:	2301      	movne	r3, #1
 8006084:	2300      	moveq	r3, #0
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	f47f af6d 	bne.w	8005f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060a4:	e034      	b.n	8006110 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 f8e3 	bl	8006272 <I2C_IsAcknowledgeFailed>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e034      	b.n	8006120 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060bc:	d028      	beq.n	8006110 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060be:	f7fc fcc9 	bl	8002a54 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d302      	bcc.n	80060d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d11d      	bne.n	8006110 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060de:	2b80      	cmp	r3, #128	@ 0x80
 80060e0:	d016      	beq.n	8006110 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2220      	movs	r2, #32
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fc:	f043 0220 	orr.w	r2, r3, #32
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e007      	b.n	8006120 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800611a:	2b80      	cmp	r3, #128	@ 0x80
 800611c:	d1c3      	bne.n	80060a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006134:	e034      	b.n	80061a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 f89b 	bl	8006272 <I2C_IsAcknowledgeFailed>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e034      	b.n	80061b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614c:	d028      	beq.n	80061a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800614e:	f7fc fc81 	bl	8002a54 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	429a      	cmp	r2, r3
 800615c:	d302      	bcc.n	8006164 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d11d      	bne.n	80061a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	f003 0304 	and.w	r3, r3, #4
 800616e:	2b04      	cmp	r3, #4
 8006170:	d016      	beq.n	80061a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2220      	movs	r2, #32
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618c:	f043 0220 	orr.w	r2, r3, #32
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e007      	b.n	80061b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	f003 0304 	and.w	r3, r3, #4
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	d1c3      	bne.n	8006136 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061c4:	e049      	b.n	800625a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b10      	cmp	r3, #16
 80061d2:	d119      	bne.n	8006208 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f06f 0210 	mvn.w	r2, #16
 80061dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e030      	b.n	800626a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006208:	f7fc fc24 	bl	8002a54 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	429a      	cmp	r2, r3
 8006216:	d302      	bcc.n	800621e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d11d      	bne.n	800625a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006228:	2b40      	cmp	r3, #64	@ 0x40
 800622a:	d016      	beq.n	800625a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2220      	movs	r2, #32
 8006236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006246:	f043 0220 	orr.w	r2, r3, #32
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e007      	b.n	800626a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006264:	2b40      	cmp	r3, #64	@ 0x40
 8006266:	d1ae      	bne.n	80061c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006288:	d11b      	bne.n	80062c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006292:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2220      	movs	r2, #32
 800629e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ae:	f043 0204 	orr.w	r2, r3, #4
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b088      	sub	sp, #32
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e128      	b.n	8006534 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d109      	bne.n	8006302 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a90      	ldr	r2, [pc, #576]	@ (800653c <HAL_I2S_Init+0x26c>)
 80062fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7fc f8e9 	bl	80024d4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2202      	movs	r2, #2
 8006306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6812      	ldr	r2, [r2, #0]
 8006314:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006318:	f023 030f 	bic.w	r3, r3, #15
 800631c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2202      	movs	r2, #2
 8006324:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	2b02      	cmp	r3, #2
 800632c:	d060      	beq.n	80063f0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d102      	bne.n	800633c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006336:	2310      	movs	r3, #16
 8006338:	617b      	str	r3, [r7, #20]
 800633a:	e001      	b.n	8006340 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800633c:	2320      	movs	r3, #32
 800633e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	2b20      	cmp	r3, #32
 8006346:	d802      	bhi.n	800634e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800634e:	2001      	movs	r0, #1
 8006350:	f001 f9d8 	bl	8007704 <HAL_RCCEx_GetPeriphCLKFreq>
 8006354:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800635e:	d125      	bne.n	80063ac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d010      	beq.n	800638a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006372:	4613      	mov	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	461a      	mov	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	fbb2 f3f3 	udiv	r3, r2, r3
 8006384:	3305      	adds	r3, #5
 8006386:	613b      	str	r3, [r7, #16]
 8006388:	e01f      	b.n	80063ca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	00db      	lsls	r3, r3, #3
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	fbb2 f2f3 	udiv	r2, r2, r3
 8006394:	4613      	mov	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	461a      	mov	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a6:	3305      	adds	r3, #5
 80063a8:	613b      	str	r3, [r7, #16]
 80063aa:	e00e      	b.n	80063ca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80063b4:	4613      	mov	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	461a      	mov	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c6:	3305      	adds	r3, #5
 80063c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	4a5c      	ldr	r2, [pc, #368]	@ (8006540 <HAL_I2S_Init+0x270>)
 80063ce:	fba2 2303 	umull	r2, r3, r2, r3
 80063d2:	08db      	lsrs	r3, r3, #3
 80063d4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	085b      	lsrs	r3, r3, #1
 80063e6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	021b      	lsls	r3, r3, #8
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	e003      	b.n	80063f8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80063f0:	2302      	movs	r3, #2
 80063f2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d902      	bls.n	8006404 <HAL_I2S_Init+0x134>
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	2bff      	cmp	r3, #255	@ 0xff
 8006402:	d907      	bls.n	8006414 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006408:	f043 0210 	orr.w	r2, r3, #16
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e08f      	b.n	8006534 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691a      	ldr	r2, [r3, #16]
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	ea42 0103 	orr.w	r1, r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69fa      	ldr	r2, [r7, #28]
 8006424:	430a      	orrs	r2, r1
 8006426:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006432:	f023 030f 	bic.w	r3, r3, #15
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6851      	ldr	r1, [r2, #4]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	6892      	ldr	r2, [r2, #8]
 800643e:	4311      	orrs	r1, r2
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	68d2      	ldr	r2, [r2, #12]
 8006444:	4311      	orrs	r1, r2
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6992      	ldr	r2, [r2, #24]
 800644a:	430a      	orrs	r2, r1
 800644c:	431a      	orrs	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006456:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d161      	bne.n	8006524 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a38      	ldr	r2, [pc, #224]	@ (8006544 <HAL_I2S_Init+0x274>)
 8006464:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a37      	ldr	r2, [pc, #220]	@ (8006548 <HAL_I2S_Init+0x278>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d101      	bne.n	8006474 <HAL_I2S_Init+0x1a4>
 8006470:	4b36      	ldr	r3, [pc, #216]	@ (800654c <HAL_I2S_Init+0x27c>)
 8006472:	e001      	b.n	8006478 <HAL_I2S_Init+0x1a8>
 8006474:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	6812      	ldr	r2, [r2, #0]
 800647e:	4932      	ldr	r1, [pc, #200]	@ (8006548 <HAL_I2S_Init+0x278>)
 8006480:	428a      	cmp	r2, r1
 8006482:	d101      	bne.n	8006488 <HAL_I2S_Init+0x1b8>
 8006484:	4a31      	ldr	r2, [pc, #196]	@ (800654c <HAL_I2S_Init+0x27c>)
 8006486:	e001      	b.n	800648c <HAL_I2S_Init+0x1bc>
 8006488:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800648c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006490:	f023 030f 	bic.w	r3, r3, #15
 8006494:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a2b      	ldr	r2, [pc, #172]	@ (8006548 <HAL_I2S_Init+0x278>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d101      	bne.n	80064a4 <HAL_I2S_Init+0x1d4>
 80064a0:	4b2a      	ldr	r3, [pc, #168]	@ (800654c <HAL_I2S_Init+0x27c>)
 80064a2:	e001      	b.n	80064a8 <HAL_I2S_Init+0x1d8>
 80064a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064a8:	2202      	movs	r2, #2
 80064aa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a25      	ldr	r2, [pc, #148]	@ (8006548 <HAL_I2S_Init+0x278>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d101      	bne.n	80064ba <HAL_I2S_Init+0x1ea>
 80064b6:	4b25      	ldr	r3, [pc, #148]	@ (800654c <HAL_I2S_Init+0x27c>)
 80064b8:	e001      	b.n	80064be <HAL_I2S_Init+0x1ee>
 80064ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064ca:	d003      	beq.n	80064d4 <HAL_I2S_Init+0x204>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d103      	bne.n	80064dc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80064d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80064d8:	613b      	str	r3, [r7, #16]
 80064da:	e001      	b.n	80064e0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80064dc:	2300      	movs	r3, #0
 80064de:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80064ea:	4313      	orrs	r3, r2
 80064ec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80064f4:	4313      	orrs	r3, r2
 80064f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80064fe:	4313      	orrs	r3, r2
 8006500:	b29a      	uxth	r2, r3
 8006502:	897b      	ldrh	r3, [r7, #10]
 8006504:	4313      	orrs	r3, r2
 8006506:	b29b      	uxth	r3, r3
 8006508:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800650c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a0d      	ldr	r2, [pc, #52]	@ (8006548 <HAL_I2S_Init+0x278>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d101      	bne.n	800651c <HAL_I2S_Init+0x24c>
 8006518:	4b0c      	ldr	r3, [pc, #48]	@ (800654c <HAL_I2S_Init+0x27c>)
 800651a:	e001      	b.n	8006520 <HAL_I2S_Init+0x250>
 800651c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006520:	897a      	ldrh	r2, [r7, #10]
 8006522:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3720      	adds	r7, #32
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	08006647 	.word	0x08006647
 8006540:	cccccccd 	.word	0xcccccccd
 8006544:	0800675d 	.word	0x0800675d
 8006548:	40003800 	.word	0x40003800
 800654c:	40003400 	.word	0x40003400

08006550 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006598:	881a      	ldrh	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a4:	1c9a      	adds	r2, r3, #2
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065bc:	b29b      	uxth	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10e      	bne.n	80065e0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80065d0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7ff ffb8 	bl	8006550 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80065e0:	bf00      	nop
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fa:	b292      	uxth	r2, r2
 80065fc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006602:	1c9a      	adds	r2, r3, #2
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800660c:	b29b      	uxth	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	b29a      	uxth	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800661a:	b29b      	uxth	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10e      	bne.n	800663e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800662e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff ff93 	bl	8006564 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800663e:	bf00      	nop
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b086      	sub	sp, #24
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b04      	cmp	r3, #4
 8006660:	d13a      	bne.n	80066d8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b01      	cmp	r3, #1
 800666a:	d109      	bne.n	8006680 <I2S_IRQHandler+0x3a>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006676:	2b40      	cmp	r3, #64	@ 0x40
 8006678:	d102      	bne.n	8006680 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7ff ffb4 	bl	80065e8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006686:	2b40      	cmp	r3, #64	@ 0x40
 8006688:	d126      	bne.n	80066d8 <I2S_IRQHandler+0x92>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f003 0320 	and.w	r3, r3, #32
 8006694:	2b20      	cmp	r3, #32
 8006696:	d11f      	bne.n	80066d8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80066a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80066a8:	2300      	movs	r3, #0
 80066aa:	613b      	str	r3, [r7, #16]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	613b      	str	r3, [r7, #16]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	613b      	str	r3, [r7, #16]
 80066bc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ca:	f043 0202 	orr.w	r2, r3, #2
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7ff ff50 	bl	8006578 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b03      	cmp	r3, #3
 80066e2:	d136      	bne.n	8006752 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d109      	bne.n	8006702 <I2S_IRQHandler+0xbc>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066f8:	2b80      	cmp	r3, #128	@ 0x80
 80066fa:	d102      	bne.n	8006702 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff ff45 	bl	800658c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f003 0308 	and.w	r3, r3, #8
 8006708:	2b08      	cmp	r3, #8
 800670a:	d122      	bne.n	8006752 <I2S_IRQHandler+0x10c>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f003 0320 	and.w	r3, r3, #32
 8006716:	2b20      	cmp	r3, #32
 8006718:	d11b      	bne.n	8006752 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006728:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800672a:	2300      	movs	r3, #0
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006744:	f043 0204 	orr.w	r2, r3, #4
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff ff13 	bl	8006578 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006752:	bf00      	nop
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
	...

0800675c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a92      	ldr	r2, [pc, #584]	@ (80069bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d101      	bne.n	800677a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006776:	4b92      	ldr	r3, [pc, #584]	@ (80069c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006778:	e001      	b.n	800677e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800677a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a8b      	ldr	r2, [pc, #556]	@ (80069bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d101      	bne.n	8006798 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006794:	4b8a      	ldr	r3, [pc, #552]	@ (80069c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006796:	e001      	b.n	800679c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006798:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067a8:	d004      	beq.n	80067b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f040 8099 	bne.w	80068e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d107      	bne.n	80067ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f925 	bl	8006a18 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d107      	bne.n	80067e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d002      	beq.n	80067e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f9c8 	bl	8006b78 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ee:	2b40      	cmp	r3, #64	@ 0x40
 80067f0:	d13a      	bne.n	8006868 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f003 0320 	and.w	r3, r3, #32
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d035      	beq.n	8006868 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a6e      	ldr	r2, [pc, #440]	@ (80069bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d101      	bne.n	800680a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006806:	4b6e      	ldr	r3, [pc, #440]	@ (80069c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006808:	e001      	b.n	800680e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800680a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4969      	ldr	r1, [pc, #420]	@ (80069bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006816:	428b      	cmp	r3, r1
 8006818:	d101      	bne.n	800681e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800681a:	4b69      	ldr	r3, [pc, #420]	@ (80069c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800681c:	e001      	b.n	8006822 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800681e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006822:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006826:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006836:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800685a:	f043 0202 	orr.w	r2, r3, #2
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff fe88 	bl	8006578 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	f003 0308 	and.w	r3, r3, #8
 800686e:	2b08      	cmp	r3, #8
 8006870:	f040 80c3 	bne.w	80069fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f003 0320 	and.w	r3, r3, #32
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 80bd 	beq.w	80069fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800688e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a49      	ldr	r2, [pc, #292]	@ (80069bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d101      	bne.n	800689e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800689a:	4b49      	ldr	r3, [pc, #292]	@ (80069c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800689c:	e001      	b.n	80068a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800689e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4944      	ldr	r1, [pc, #272]	@ (80069bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068aa:	428b      	cmp	r3, r1
 80068ac:	d101      	bne.n	80068b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80068ae:	4b44      	ldr	r3, [pc, #272]	@ (80069c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068b0:	e001      	b.n	80068b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80068b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068b6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80068ba:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80068bc:	2300      	movs	r3, #0
 80068be:	60bb      	str	r3, [r7, #8]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	60bb      	str	r3, [r7, #8]
 80068c8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068d6:	f043 0204 	orr.w	r2, r3, #4
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7ff fe4a 	bl	8006578 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80068e4:	e089      	b.n	80069fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d107      	bne.n	8006900 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f8be 	bl	8006a7c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b01      	cmp	r3, #1
 8006908:	d107      	bne.n	800691a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f8fd 	bl	8006b14 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006920:	2b40      	cmp	r3, #64	@ 0x40
 8006922:	d12f      	bne.n	8006984 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b00      	cmp	r3, #0
 800692c:	d02a      	beq.n	8006984 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800693c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1e      	ldr	r2, [pc, #120]	@ (80069bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d101      	bne.n	800694c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006948:	4b1d      	ldr	r3, [pc, #116]	@ (80069c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800694a:	e001      	b.n	8006950 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800694c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4919      	ldr	r1, [pc, #100]	@ (80069bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006958:	428b      	cmp	r3, r1
 800695a:	d101      	bne.n	8006960 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800695c:	4b18      	ldr	r3, [pc, #96]	@ (80069c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800695e:	e001      	b.n	8006964 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006960:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006964:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006968:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006976:	f043 0202 	orr.w	r2, r3, #2
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff fdfa 	bl	8006578 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	f003 0308 	and.w	r3, r3, #8
 800698a:	2b08      	cmp	r3, #8
 800698c:	d136      	bne.n	80069fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f003 0320 	and.w	r3, r3, #32
 8006994:	2b00      	cmp	r3, #0
 8006996:	d031      	beq.n	80069fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a07      	ldr	r2, [pc, #28]	@ (80069bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d101      	bne.n	80069a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80069a2:	4b07      	ldr	r3, [pc, #28]	@ (80069c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80069a4:	e001      	b.n	80069aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80069a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4902      	ldr	r1, [pc, #8]	@ (80069bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80069b2:	428b      	cmp	r3, r1
 80069b4:	d106      	bne.n	80069c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80069b6:	4b02      	ldr	r3, [pc, #8]	@ (80069c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80069b8:	e006      	b.n	80069c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80069ba:	bf00      	nop
 80069bc:	40003800 	.word	0x40003800
 80069c0:	40003400 	.word	0x40003400
 80069c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069c8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80069cc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80069dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ea:	f043 0204 	orr.w	r2, r3, #4
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7ff fdc0 	bl	8006578 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80069f8:	e000      	b.n	80069fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069fa:	bf00      	nop
}
 80069fc:	bf00      	nop
 80069fe:	3720      	adds	r7, #32
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a24:	1c99      	adds	r1, r3, #2
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6251      	str	r1, [r2, #36]	@ 0x24
 8006a2a:	881a      	ldrh	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d113      	bne.n	8006a72 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006a58:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d106      	bne.n	8006a72 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7ff ffc9 	bl	8006a04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a72:	bf00      	nop
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a88:	1c99      	adds	r1, r3, #2
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	6251      	str	r1, [r2, #36]	@ 0x24
 8006a8e:	8819      	ldrh	r1, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a1d      	ldr	r2, [pc, #116]	@ (8006b0c <I2SEx_TxISR_I2SExt+0x90>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d101      	bne.n	8006a9e <I2SEx_TxISR_I2SExt+0x22>
 8006a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8006b10 <I2SEx_TxISR_I2SExt+0x94>)
 8006a9c:	e001      	b.n	8006aa2 <I2SEx_TxISR_I2SExt+0x26>
 8006a9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006aa2:	460a      	mov	r2, r1
 8006aa4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	3b01      	subs	r3, #1
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d121      	bne.n	8006b02 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a12      	ldr	r2, [pc, #72]	@ (8006b0c <I2SEx_TxISR_I2SExt+0x90>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d101      	bne.n	8006acc <I2SEx_TxISR_I2SExt+0x50>
 8006ac8:	4b11      	ldr	r3, [pc, #68]	@ (8006b10 <I2SEx_TxISR_I2SExt+0x94>)
 8006aca:	e001      	b.n	8006ad0 <I2SEx_TxISR_I2SExt+0x54>
 8006acc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	490d      	ldr	r1, [pc, #52]	@ (8006b0c <I2SEx_TxISR_I2SExt+0x90>)
 8006ad8:	428b      	cmp	r3, r1
 8006ada:	d101      	bne.n	8006ae0 <I2SEx_TxISR_I2SExt+0x64>
 8006adc:	4b0c      	ldr	r3, [pc, #48]	@ (8006b10 <I2SEx_TxISR_I2SExt+0x94>)
 8006ade:	e001      	b.n	8006ae4 <I2SEx_TxISR_I2SExt+0x68>
 8006ae0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ae4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006ae8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d106      	bne.n	8006b02 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7ff ff81 	bl	8006a04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b02:	bf00      	nop
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	40003800 	.word	0x40003800
 8006b10:	40003400 	.word	0x40003400

08006b14 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68d8      	ldr	r0, [r3, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b26:	1c99      	adds	r1, r3, #2
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006b2c:	b282      	uxth	r2, r0
 8006b2e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	3b01      	subs	r3, #1
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d113      	bne.n	8006b70 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006b56:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7ff ff4a 	bl	8006a04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b70:	bf00      	nop
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a20      	ldr	r2, [pc, #128]	@ (8006c08 <I2SEx_RxISR_I2SExt+0x90>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d101      	bne.n	8006b8e <I2SEx_RxISR_I2SExt+0x16>
 8006b8a:	4b20      	ldr	r3, [pc, #128]	@ (8006c0c <I2SEx_RxISR_I2SExt+0x94>)
 8006b8c:	e001      	b.n	8006b92 <I2SEx_RxISR_I2SExt+0x1a>
 8006b8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b92:	68d8      	ldr	r0, [r3, #12]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b98:	1c99      	adds	r1, r3, #2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006b9e:	b282      	uxth	r2, r0
 8006ba0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d121      	bne.n	8006bfe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a12      	ldr	r2, [pc, #72]	@ (8006c08 <I2SEx_RxISR_I2SExt+0x90>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d101      	bne.n	8006bc8 <I2SEx_RxISR_I2SExt+0x50>
 8006bc4:	4b11      	ldr	r3, [pc, #68]	@ (8006c0c <I2SEx_RxISR_I2SExt+0x94>)
 8006bc6:	e001      	b.n	8006bcc <I2SEx_RxISR_I2SExt+0x54>
 8006bc8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	490d      	ldr	r1, [pc, #52]	@ (8006c08 <I2SEx_RxISR_I2SExt+0x90>)
 8006bd4:	428b      	cmp	r3, r1
 8006bd6:	d101      	bne.n	8006bdc <I2SEx_RxISR_I2SExt+0x64>
 8006bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8006c0c <I2SEx_RxISR_I2SExt+0x94>)
 8006bda:	e001      	b.n	8006be0 <I2SEx_RxISR_I2SExt+0x68>
 8006bdc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006be0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006be4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d106      	bne.n	8006bfe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff ff03 	bl	8006a04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006bfe:	bf00      	nop
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	40003800 	.word	0x40003800
 8006c0c:	40003400 	.word	0x40003400

08006c10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e267      	b.n	80070f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d075      	beq.n	8006d1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006c2e:	4b88      	ldr	r3, [pc, #544]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f003 030c 	and.w	r3, r3, #12
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d00c      	beq.n	8006c54 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c3a:	4b85      	ldr	r3, [pc, #532]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006c42:	2b08      	cmp	r3, #8
 8006c44:	d112      	bne.n	8006c6c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c46:	4b82      	ldr	r3, [pc, #520]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c52:	d10b      	bne.n	8006c6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c54:	4b7e      	ldr	r3, [pc, #504]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d05b      	beq.n	8006d18 <HAL_RCC_OscConfig+0x108>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d157      	bne.n	8006d18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e242      	b.n	80070f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c74:	d106      	bne.n	8006c84 <HAL_RCC_OscConfig+0x74>
 8006c76:	4b76      	ldr	r3, [pc, #472]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a75      	ldr	r2, [pc, #468]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c80:	6013      	str	r3, [r2, #0]
 8006c82:	e01d      	b.n	8006cc0 <HAL_RCC_OscConfig+0xb0>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c8c:	d10c      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x98>
 8006c8e:	4b70      	ldr	r3, [pc, #448]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a6f      	ldr	r2, [pc, #444]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006c94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c98:	6013      	str	r3, [r2, #0]
 8006c9a:	4b6d      	ldr	r3, [pc, #436]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a6c      	ldr	r2, [pc, #432]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ca4:	6013      	str	r3, [r2, #0]
 8006ca6:	e00b      	b.n	8006cc0 <HAL_RCC_OscConfig+0xb0>
 8006ca8:	4b69      	ldr	r3, [pc, #420]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a68      	ldr	r2, [pc, #416]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006cae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cb2:	6013      	str	r3, [r2, #0]
 8006cb4:	4b66      	ldr	r3, [pc, #408]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a65      	ldr	r2, [pc, #404]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006cba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d013      	beq.n	8006cf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cc8:	f7fb fec4 	bl	8002a54 <HAL_GetTick>
 8006ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cce:	e008      	b.n	8006ce2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cd0:	f7fb fec0 	bl	8002a54 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	2b64      	cmp	r3, #100	@ 0x64
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e207      	b.n	80070f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ce2:	4b5b      	ldr	r3, [pc, #364]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0f0      	beq.n	8006cd0 <HAL_RCC_OscConfig+0xc0>
 8006cee:	e014      	b.n	8006d1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf0:	f7fb feb0 	bl	8002a54 <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cf8:	f7fb feac 	bl	8002a54 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b64      	cmp	r3, #100	@ 0x64
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e1f3      	b.n	80070f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d0a:	4b51      	ldr	r3, [pc, #324]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1f0      	bne.n	8006cf8 <HAL_RCC_OscConfig+0xe8>
 8006d16:	e000      	b.n	8006d1a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d063      	beq.n	8006dee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006d26:	4b4a      	ldr	r3, [pc, #296]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f003 030c 	and.w	r3, r3, #12
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00b      	beq.n	8006d4a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d32:	4b47      	ldr	r3, [pc, #284]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006d3a:	2b08      	cmp	r3, #8
 8006d3c:	d11c      	bne.n	8006d78 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d3e:	4b44      	ldr	r3, [pc, #272]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d116      	bne.n	8006d78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d4a:	4b41      	ldr	r3, [pc, #260]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d005      	beq.n	8006d62 <HAL_RCC_OscConfig+0x152>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d001      	beq.n	8006d62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e1c7      	b.n	80070f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d62:	4b3b      	ldr	r3, [pc, #236]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	00db      	lsls	r3, r3, #3
 8006d70:	4937      	ldr	r1, [pc, #220]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d76:	e03a      	b.n	8006dee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d020      	beq.n	8006dc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d80:	4b34      	ldr	r3, [pc, #208]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006d82:	2201      	movs	r2, #1
 8006d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d86:	f7fb fe65 	bl	8002a54 <HAL_GetTick>
 8006d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d8c:	e008      	b.n	8006da0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d8e:	f7fb fe61 	bl	8002a54 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d901      	bls.n	8006da0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e1a8      	b.n	80070f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006da0:	4b2b      	ldr	r3, [pc, #172]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0302 	and.w	r3, r3, #2
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d0f0      	beq.n	8006d8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dac:	4b28      	ldr	r3, [pc, #160]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	00db      	lsls	r3, r3, #3
 8006dba:	4925      	ldr	r1, [pc, #148]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	600b      	str	r3, [r1, #0]
 8006dc0:	e015      	b.n	8006dee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dc2:	4b24      	ldr	r3, [pc, #144]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc8:	f7fb fe44 	bl	8002a54 <HAL_GetTick>
 8006dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dd0:	f7fb fe40 	bl	8002a54 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e187      	b.n	80070f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006de2:	4b1b      	ldr	r3, [pc, #108]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0302 	and.w	r3, r3, #2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1f0      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0308 	and.w	r3, r3, #8
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d036      	beq.n	8006e68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d016      	beq.n	8006e30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e02:	4b15      	ldr	r3, [pc, #84]	@ (8006e58 <HAL_RCC_OscConfig+0x248>)
 8006e04:	2201      	movs	r2, #1
 8006e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e08:	f7fb fe24 	bl	8002a54 <HAL_GetTick>
 8006e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e0e:	e008      	b.n	8006e22 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e10:	f7fb fe20 	bl	8002a54 <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d901      	bls.n	8006e22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e167      	b.n	80070f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e22:	4b0b      	ldr	r3, [pc, #44]	@ (8006e50 <HAL_RCC_OscConfig+0x240>)
 8006e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e26:	f003 0302 	and.w	r3, r3, #2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d0f0      	beq.n	8006e10 <HAL_RCC_OscConfig+0x200>
 8006e2e:	e01b      	b.n	8006e68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e30:	4b09      	ldr	r3, [pc, #36]	@ (8006e58 <HAL_RCC_OscConfig+0x248>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e36:	f7fb fe0d 	bl	8002a54 <HAL_GetTick>
 8006e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e3c:	e00e      	b.n	8006e5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e3e:	f7fb fe09 	bl	8002a54 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d907      	bls.n	8006e5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e150      	b.n	80070f2 <HAL_RCC_OscConfig+0x4e2>
 8006e50:	40023800 	.word	0x40023800
 8006e54:	42470000 	.word	0x42470000
 8006e58:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e5c:	4b88      	ldr	r3, [pc, #544]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8006e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e60:	f003 0302 	and.w	r3, r3, #2
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1ea      	bne.n	8006e3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 8097 	beq.w	8006fa4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e76:	2300      	movs	r3, #0
 8006e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e7a:	4b81      	ldr	r3, [pc, #516]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10f      	bne.n	8006ea6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e86:	2300      	movs	r3, #0
 8006e88:	60bb      	str	r3, [r7, #8]
 8006e8a:	4b7d      	ldr	r3, [pc, #500]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8e:	4a7c      	ldr	r2, [pc, #496]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8006e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e96:	4b7a      	ldr	r3, [pc, #488]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8006e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e9e:	60bb      	str	r3, [r7, #8]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ea6:	4b77      	ldr	r3, [pc, #476]	@ (8007084 <HAL_RCC_OscConfig+0x474>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d118      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006eb2:	4b74      	ldr	r3, [pc, #464]	@ (8007084 <HAL_RCC_OscConfig+0x474>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a73      	ldr	r2, [pc, #460]	@ (8007084 <HAL_RCC_OscConfig+0x474>)
 8006eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ebe:	f7fb fdc9 	bl	8002a54 <HAL_GetTick>
 8006ec2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ec4:	e008      	b.n	8006ed8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ec6:	f7fb fdc5 	bl	8002a54 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d901      	bls.n	8006ed8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e10c      	b.n	80070f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ed8:	4b6a      	ldr	r3, [pc, #424]	@ (8007084 <HAL_RCC_OscConfig+0x474>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d0f0      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d106      	bne.n	8006efa <HAL_RCC_OscConfig+0x2ea>
 8006eec:	4b64      	ldr	r3, [pc, #400]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8006eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ef0:	4a63      	ldr	r2, [pc, #396]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8006ef2:	f043 0301 	orr.w	r3, r3, #1
 8006ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ef8:	e01c      	b.n	8006f34 <HAL_RCC_OscConfig+0x324>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	2b05      	cmp	r3, #5
 8006f00:	d10c      	bne.n	8006f1c <HAL_RCC_OscConfig+0x30c>
 8006f02:	4b5f      	ldr	r3, [pc, #380]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8006f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f06:	4a5e      	ldr	r2, [pc, #376]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8006f08:	f043 0304 	orr.w	r3, r3, #4
 8006f0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f0e:	4b5c      	ldr	r3, [pc, #368]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8006f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f12:	4a5b      	ldr	r2, [pc, #364]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8006f14:	f043 0301 	orr.w	r3, r3, #1
 8006f18:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f1a:	e00b      	b.n	8006f34 <HAL_RCC_OscConfig+0x324>
 8006f1c:	4b58      	ldr	r3, [pc, #352]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8006f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f20:	4a57      	ldr	r2, [pc, #348]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8006f22:	f023 0301 	bic.w	r3, r3, #1
 8006f26:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f28:	4b55      	ldr	r3, [pc, #340]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8006f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f2c:	4a54      	ldr	r2, [pc, #336]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8006f2e:	f023 0304 	bic.w	r3, r3, #4
 8006f32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d015      	beq.n	8006f68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f3c:	f7fb fd8a 	bl	8002a54 <HAL_GetTick>
 8006f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f42:	e00a      	b.n	8006f5a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f44:	f7fb fd86 	bl	8002a54 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d901      	bls.n	8006f5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e0cb      	b.n	80070f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f5a:	4b49      	ldr	r3, [pc, #292]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8006f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d0ee      	beq.n	8006f44 <HAL_RCC_OscConfig+0x334>
 8006f66:	e014      	b.n	8006f92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f68:	f7fb fd74 	bl	8002a54 <HAL_GetTick>
 8006f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f6e:	e00a      	b.n	8006f86 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f70:	f7fb fd70 	bl	8002a54 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d901      	bls.n	8006f86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e0b5      	b.n	80070f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f86:	4b3e      	ldr	r3, [pc, #248]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8006f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1ee      	bne.n	8006f70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d105      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f98:	4b39      	ldr	r3, [pc, #228]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8006f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f9c:	4a38      	ldr	r2, [pc, #224]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8006f9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fa2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 80a1 	beq.w	80070f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006fae:	4b34      	ldr	r3, [pc, #208]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f003 030c 	and.w	r3, r3, #12
 8006fb6:	2b08      	cmp	r3, #8
 8006fb8:	d05c      	beq.n	8007074 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d141      	bne.n	8007046 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fc2:	4b31      	ldr	r3, [pc, #196]	@ (8007088 <HAL_RCC_OscConfig+0x478>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fc8:	f7fb fd44 	bl	8002a54 <HAL_GetTick>
 8006fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fce:	e008      	b.n	8006fe2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fd0:	f7fb fd40 	bl	8002a54 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d901      	bls.n	8006fe2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e087      	b.n	80070f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fe2:	4b27      	ldr	r3, [pc, #156]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1f0      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	69da      	ldr	r2, [r3, #28]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ffc:	019b      	lsls	r3, r3, #6
 8006ffe:	431a      	orrs	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007004:	085b      	lsrs	r3, r3, #1
 8007006:	3b01      	subs	r3, #1
 8007008:	041b      	lsls	r3, r3, #16
 800700a:	431a      	orrs	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007010:	061b      	lsls	r3, r3, #24
 8007012:	491b      	ldr	r1, [pc, #108]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8007014:	4313      	orrs	r3, r2
 8007016:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007018:	4b1b      	ldr	r3, [pc, #108]	@ (8007088 <HAL_RCC_OscConfig+0x478>)
 800701a:	2201      	movs	r2, #1
 800701c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800701e:	f7fb fd19 	bl	8002a54 <HAL_GetTick>
 8007022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007024:	e008      	b.n	8007038 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007026:	f7fb fd15 	bl	8002a54 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d901      	bls.n	8007038 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e05c      	b.n	80070f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007038:	4b11      	ldr	r3, [pc, #68]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d0f0      	beq.n	8007026 <HAL_RCC_OscConfig+0x416>
 8007044:	e054      	b.n	80070f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007046:	4b10      	ldr	r3, [pc, #64]	@ (8007088 <HAL_RCC_OscConfig+0x478>)
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800704c:	f7fb fd02 	bl	8002a54 <HAL_GetTick>
 8007050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007052:	e008      	b.n	8007066 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007054:	f7fb fcfe 	bl	8002a54 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	2b02      	cmp	r3, #2
 8007060:	d901      	bls.n	8007066 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e045      	b.n	80070f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007066:	4b06      	ldr	r3, [pc, #24]	@ (8007080 <HAL_RCC_OscConfig+0x470>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1f0      	bne.n	8007054 <HAL_RCC_OscConfig+0x444>
 8007072:	e03d      	b.n	80070f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d107      	bne.n	800708c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e038      	b.n	80070f2 <HAL_RCC_OscConfig+0x4e2>
 8007080:	40023800 	.word	0x40023800
 8007084:	40007000 	.word	0x40007000
 8007088:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800708c:	4b1b      	ldr	r3, [pc, #108]	@ (80070fc <HAL_RCC_OscConfig+0x4ec>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d028      	beq.n	80070ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d121      	bne.n	80070ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d11a      	bne.n	80070ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80070bc:	4013      	ands	r3, r2
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80070c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d111      	bne.n	80070ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d2:	085b      	lsrs	r3, r3, #1
 80070d4:	3b01      	subs	r3, #1
 80070d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070d8:	429a      	cmp	r2, r3
 80070da:	d107      	bne.n	80070ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d001      	beq.n	80070f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e000      	b.n	80070f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	40023800 	.word	0x40023800

08007100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e0cc      	b.n	80072ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007114:	4b68      	ldr	r3, [pc, #416]	@ (80072b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0307 	and.w	r3, r3, #7
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	429a      	cmp	r2, r3
 8007120:	d90c      	bls.n	800713c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007122:	4b65      	ldr	r3, [pc, #404]	@ (80072b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	b2d2      	uxtb	r2, r2
 8007128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800712a:	4b63      	ldr	r3, [pc, #396]	@ (80072b8 <HAL_RCC_ClockConfig+0x1b8>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0307 	and.w	r3, r3, #7
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	429a      	cmp	r2, r3
 8007136:	d001      	beq.n	800713c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e0b8      	b.n	80072ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	2b00      	cmp	r3, #0
 8007146:	d020      	beq.n	800718a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0304 	and.w	r3, r3, #4
 8007150:	2b00      	cmp	r3, #0
 8007152:	d005      	beq.n	8007160 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007154:	4b59      	ldr	r3, [pc, #356]	@ (80072bc <HAL_RCC_ClockConfig+0x1bc>)
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	4a58      	ldr	r2, [pc, #352]	@ (80072bc <HAL_RCC_ClockConfig+0x1bc>)
 800715a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800715e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0308 	and.w	r3, r3, #8
 8007168:	2b00      	cmp	r3, #0
 800716a:	d005      	beq.n	8007178 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800716c:	4b53      	ldr	r3, [pc, #332]	@ (80072bc <HAL_RCC_ClockConfig+0x1bc>)
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	4a52      	ldr	r2, [pc, #328]	@ (80072bc <HAL_RCC_ClockConfig+0x1bc>)
 8007172:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007176:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007178:	4b50      	ldr	r3, [pc, #320]	@ (80072bc <HAL_RCC_ClockConfig+0x1bc>)
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	494d      	ldr	r1, [pc, #308]	@ (80072bc <HAL_RCC_ClockConfig+0x1bc>)
 8007186:	4313      	orrs	r3, r2
 8007188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d044      	beq.n	8007220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d107      	bne.n	80071ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800719e:	4b47      	ldr	r3, [pc, #284]	@ (80072bc <HAL_RCC_ClockConfig+0x1bc>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d119      	bne.n	80071de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e07f      	b.n	80072ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d003      	beq.n	80071be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d107      	bne.n	80071ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071be:	4b3f      	ldr	r3, [pc, #252]	@ (80072bc <HAL_RCC_ClockConfig+0x1bc>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d109      	bne.n	80071de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e06f      	b.n	80072ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071ce:	4b3b      	ldr	r3, [pc, #236]	@ (80072bc <HAL_RCC_ClockConfig+0x1bc>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e067      	b.n	80072ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071de:	4b37      	ldr	r3, [pc, #220]	@ (80072bc <HAL_RCC_ClockConfig+0x1bc>)
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f023 0203 	bic.w	r2, r3, #3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	4934      	ldr	r1, [pc, #208]	@ (80072bc <HAL_RCC_ClockConfig+0x1bc>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071f0:	f7fb fc30 	bl	8002a54 <HAL_GetTick>
 80071f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071f6:	e00a      	b.n	800720e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071f8:	f7fb fc2c 	bl	8002a54 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007206:	4293      	cmp	r3, r2
 8007208:	d901      	bls.n	800720e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e04f      	b.n	80072ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800720e:	4b2b      	ldr	r3, [pc, #172]	@ (80072bc <HAL_RCC_ClockConfig+0x1bc>)
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f003 020c 	and.w	r2, r3, #12
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	429a      	cmp	r2, r3
 800721e:	d1eb      	bne.n	80071f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007220:	4b25      	ldr	r3, [pc, #148]	@ (80072b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0307 	and.w	r3, r3, #7
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	429a      	cmp	r2, r3
 800722c:	d20c      	bcs.n	8007248 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800722e:	4b22      	ldr	r3, [pc, #136]	@ (80072b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	b2d2      	uxtb	r2, r2
 8007234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007236:	4b20      	ldr	r3, [pc, #128]	@ (80072b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0307 	and.w	r3, r3, #7
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	429a      	cmp	r2, r3
 8007242:	d001      	beq.n	8007248 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e032      	b.n	80072ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0304 	and.w	r3, r3, #4
 8007250:	2b00      	cmp	r3, #0
 8007252:	d008      	beq.n	8007266 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007254:	4b19      	ldr	r3, [pc, #100]	@ (80072bc <HAL_RCC_ClockConfig+0x1bc>)
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	4916      	ldr	r1, [pc, #88]	@ (80072bc <HAL_RCC_ClockConfig+0x1bc>)
 8007262:	4313      	orrs	r3, r2
 8007264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0308 	and.w	r3, r3, #8
 800726e:	2b00      	cmp	r3, #0
 8007270:	d009      	beq.n	8007286 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007272:	4b12      	ldr	r3, [pc, #72]	@ (80072bc <HAL_RCC_ClockConfig+0x1bc>)
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	490e      	ldr	r1, [pc, #56]	@ (80072bc <HAL_RCC_ClockConfig+0x1bc>)
 8007282:	4313      	orrs	r3, r2
 8007284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007286:	f000 f821 	bl	80072cc <HAL_RCC_GetSysClockFreq>
 800728a:	4602      	mov	r2, r0
 800728c:	4b0b      	ldr	r3, [pc, #44]	@ (80072bc <HAL_RCC_ClockConfig+0x1bc>)
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	091b      	lsrs	r3, r3, #4
 8007292:	f003 030f 	and.w	r3, r3, #15
 8007296:	490a      	ldr	r1, [pc, #40]	@ (80072c0 <HAL_RCC_ClockConfig+0x1c0>)
 8007298:	5ccb      	ldrb	r3, [r1, r3]
 800729a:	fa22 f303 	lsr.w	r3, r2, r3
 800729e:	4a09      	ldr	r2, [pc, #36]	@ (80072c4 <HAL_RCC_ClockConfig+0x1c4>)
 80072a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80072a2:	4b09      	ldr	r3, [pc, #36]	@ (80072c8 <HAL_RCC_ClockConfig+0x1c8>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7fb fb90 	bl	80029cc <HAL_InitTick>

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	40023c00 	.word	0x40023c00
 80072bc:	40023800 	.word	0x40023800
 80072c0:	0800eb24 	.word	0x0800eb24
 80072c4:	20000004 	.word	0x20000004
 80072c8:	20000008 	.word	0x20000008

080072cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072d0:	b094      	sub	sp, #80	@ 0x50
 80072d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80072d4:	2300      	movs	r3, #0
 80072d6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072e4:	4b79      	ldr	r3, [pc, #484]	@ (80074cc <HAL_RCC_GetSysClockFreq+0x200>)
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f003 030c 	and.w	r3, r3, #12
 80072ec:	2b08      	cmp	r3, #8
 80072ee:	d00d      	beq.n	800730c <HAL_RCC_GetSysClockFreq+0x40>
 80072f0:	2b08      	cmp	r3, #8
 80072f2:	f200 80e1 	bhi.w	80074b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <HAL_RCC_GetSysClockFreq+0x34>
 80072fa:	2b04      	cmp	r3, #4
 80072fc:	d003      	beq.n	8007306 <HAL_RCC_GetSysClockFreq+0x3a>
 80072fe:	e0db      	b.n	80074b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007300:	4b73      	ldr	r3, [pc, #460]	@ (80074d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007302:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007304:	e0db      	b.n	80074be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007306:	4b73      	ldr	r3, [pc, #460]	@ (80074d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007308:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800730a:	e0d8      	b.n	80074be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800730c:	4b6f      	ldr	r3, [pc, #444]	@ (80074cc <HAL_RCC_GetSysClockFreq+0x200>)
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007314:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007316:	4b6d      	ldr	r3, [pc, #436]	@ (80074cc <HAL_RCC_GetSysClockFreq+0x200>)
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d063      	beq.n	80073ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007322:	4b6a      	ldr	r3, [pc, #424]	@ (80074cc <HAL_RCC_GetSysClockFreq+0x200>)
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	099b      	lsrs	r3, r3, #6
 8007328:	2200      	movs	r2, #0
 800732a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800732c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800732e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007334:	633b      	str	r3, [r7, #48]	@ 0x30
 8007336:	2300      	movs	r3, #0
 8007338:	637b      	str	r3, [r7, #52]	@ 0x34
 800733a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800733e:	4622      	mov	r2, r4
 8007340:	462b      	mov	r3, r5
 8007342:	f04f 0000 	mov.w	r0, #0
 8007346:	f04f 0100 	mov.w	r1, #0
 800734a:	0159      	lsls	r1, r3, #5
 800734c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007350:	0150      	lsls	r0, r2, #5
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	4621      	mov	r1, r4
 8007358:	1a51      	subs	r1, r2, r1
 800735a:	6139      	str	r1, [r7, #16]
 800735c:	4629      	mov	r1, r5
 800735e:	eb63 0301 	sbc.w	r3, r3, r1
 8007362:	617b      	str	r3, [r7, #20]
 8007364:	f04f 0200 	mov.w	r2, #0
 8007368:	f04f 0300 	mov.w	r3, #0
 800736c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007370:	4659      	mov	r1, fp
 8007372:	018b      	lsls	r3, r1, #6
 8007374:	4651      	mov	r1, sl
 8007376:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800737a:	4651      	mov	r1, sl
 800737c:	018a      	lsls	r2, r1, #6
 800737e:	4651      	mov	r1, sl
 8007380:	ebb2 0801 	subs.w	r8, r2, r1
 8007384:	4659      	mov	r1, fp
 8007386:	eb63 0901 	sbc.w	r9, r3, r1
 800738a:	f04f 0200 	mov.w	r2, #0
 800738e:	f04f 0300 	mov.w	r3, #0
 8007392:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007396:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800739a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800739e:	4690      	mov	r8, r2
 80073a0:	4699      	mov	r9, r3
 80073a2:	4623      	mov	r3, r4
 80073a4:	eb18 0303 	adds.w	r3, r8, r3
 80073a8:	60bb      	str	r3, [r7, #8]
 80073aa:	462b      	mov	r3, r5
 80073ac:	eb49 0303 	adc.w	r3, r9, r3
 80073b0:	60fb      	str	r3, [r7, #12]
 80073b2:	f04f 0200 	mov.w	r2, #0
 80073b6:	f04f 0300 	mov.w	r3, #0
 80073ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80073be:	4629      	mov	r1, r5
 80073c0:	024b      	lsls	r3, r1, #9
 80073c2:	4621      	mov	r1, r4
 80073c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80073c8:	4621      	mov	r1, r4
 80073ca:	024a      	lsls	r2, r1, #9
 80073cc:	4610      	mov	r0, r2
 80073ce:	4619      	mov	r1, r3
 80073d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073d2:	2200      	movs	r2, #0
 80073d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80073dc:	f7f9 fc54 	bl	8000c88 <__aeabi_uldivmod>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	4613      	mov	r3, r2
 80073e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073e8:	e058      	b.n	800749c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073ea:	4b38      	ldr	r3, [pc, #224]	@ (80074cc <HAL_RCC_GetSysClockFreq+0x200>)
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	099b      	lsrs	r3, r3, #6
 80073f0:	2200      	movs	r2, #0
 80073f2:	4618      	mov	r0, r3
 80073f4:	4611      	mov	r1, r2
 80073f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80073fa:	623b      	str	r3, [r7, #32]
 80073fc:	2300      	movs	r3, #0
 80073fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007400:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007404:	4642      	mov	r2, r8
 8007406:	464b      	mov	r3, r9
 8007408:	f04f 0000 	mov.w	r0, #0
 800740c:	f04f 0100 	mov.w	r1, #0
 8007410:	0159      	lsls	r1, r3, #5
 8007412:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007416:	0150      	lsls	r0, r2, #5
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	4641      	mov	r1, r8
 800741e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007422:	4649      	mov	r1, r9
 8007424:	eb63 0b01 	sbc.w	fp, r3, r1
 8007428:	f04f 0200 	mov.w	r2, #0
 800742c:	f04f 0300 	mov.w	r3, #0
 8007430:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007434:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007438:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800743c:	ebb2 040a 	subs.w	r4, r2, sl
 8007440:	eb63 050b 	sbc.w	r5, r3, fp
 8007444:	f04f 0200 	mov.w	r2, #0
 8007448:	f04f 0300 	mov.w	r3, #0
 800744c:	00eb      	lsls	r3, r5, #3
 800744e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007452:	00e2      	lsls	r2, r4, #3
 8007454:	4614      	mov	r4, r2
 8007456:	461d      	mov	r5, r3
 8007458:	4643      	mov	r3, r8
 800745a:	18e3      	adds	r3, r4, r3
 800745c:	603b      	str	r3, [r7, #0]
 800745e:	464b      	mov	r3, r9
 8007460:	eb45 0303 	adc.w	r3, r5, r3
 8007464:	607b      	str	r3, [r7, #4]
 8007466:	f04f 0200 	mov.w	r2, #0
 800746a:	f04f 0300 	mov.w	r3, #0
 800746e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007472:	4629      	mov	r1, r5
 8007474:	028b      	lsls	r3, r1, #10
 8007476:	4621      	mov	r1, r4
 8007478:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800747c:	4621      	mov	r1, r4
 800747e:	028a      	lsls	r2, r1, #10
 8007480:	4610      	mov	r0, r2
 8007482:	4619      	mov	r1, r3
 8007484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007486:	2200      	movs	r2, #0
 8007488:	61bb      	str	r3, [r7, #24]
 800748a:	61fa      	str	r2, [r7, #28]
 800748c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007490:	f7f9 fbfa 	bl	8000c88 <__aeabi_uldivmod>
 8007494:	4602      	mov	r2, r0
 8007496:	460b      	mov	r3, r1
 8007498:	4613      	mov	r3, r2
 800749a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800749c:	4b0b      	ldr	r3, [pc, #44]	@ (80074cc <HAL_RCC_GetSysClockFreq+0x200>)
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	0c1b      	lsrs	r3, r3, #16
 80074a2:	f003 0303 	and.w	r3, r3, #3
 80074a6:	3301      	adds	r3, #1
 80074a8:	005b      	lsls	r3, r3, #1
 80074aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80074ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80074ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80074b6:	e002      	b.n	80074be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074b8:	4b05      	ldr	r3, [pc, #20]	@ (80074d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80074ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80074bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3750      	adds	r7, #80	@ 0x50
 80074c4:	46bd      	mov	sp, r7
 80074c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074ca:	bf00      	nop
 80074cc:	40023800 	.word	0x40023800
 80074d0:	00f42400 	.word	0x00f42400
 80074d4:	007a1200 	.word	0x007a1200

080074d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074d8:	b480      	push	{r7}
 80074da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074dc:	4b03      	ldr	r3, [pc, #12]	@ (80074ec <HAL_RCC_GetHCLKFreq+0x14>)
 80074de:	681b      	ldr	r3, [r3, #0]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	20000004 	.word	0x20000004

080074f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80074f4:	f7ff fff0 	bl	80074d8 <HAL_RCC_GetHCLKFreq>
 80074f8:	4602      	mov	r2, r0
 80074fa:	4b05      	ldr	r3, [pc, #20]	@ (8007510 <HAL_RCC_GetPCLK1Freq+0x20>)
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	0a9b      	lsrs	r3, r3, #10
 8007500:	f003 0307 	and.w	r3, r3, #7
 8007504:	4903      	ldr	r1, [pc, #12]	@ (8007514 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007506:	5ccb      	ldrb	r3, [r1, r3]
 8007508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800750c:	4618      	mov	r0, r3
 800750e:	bd80      	pop	{r7, pc}
 8007510:	40023800 	.word	0x40023800
 8007514:	0800eb34 	.word	0x0800eb34

08007518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800751c:	f7ff ffdc 	bl	80074d8 <HAL_RCC_GetHCLKFreq>
 8007520:	4602      	mov	r2, r0
 8007522:	4b05      	ldr	r3, [pc, #20]	@ (8007538 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	0b5b      	lsrs	r3, r3, #13
 8007528:	f003 0307 	and.w	r3, r3, #7
 800752c:	4903      	ldr	r1, [pc, #12]	@ (800753c <HAL_RCC_GetPCLK2Freq+0x24>)
 800752e:	5ccb      	ldrb	r3, [r1, r3]
 8007530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007534:	4618      	mov	r0, r3
 8007536:	bd80      	pop	{r7, pc}
 8007538:	40023800 	.word	0x40023800
 800753c:	0800eb34 	.word	0x0800eb34

08007540 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007548:	2300      	movs	r3, #0
 800754a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	d105      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007564:	2b00      	cmp	r3, #0
 8007566:	d035      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007568:	4b62      	ldr	r3, [pc, #392]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800756a:	2200      	movs	r2, #0
 800756c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800756e:	f7fb fa71 	bl	8002a54 <HAL_GetTick>
 8007572:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007574:	e008      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007576:	f7fb fa6d 	bl	8002a54 <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	2b02      	cmp	r3, #2
 8007582:	d901      	bls.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e0b0      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007588:	4b5b      	ldr	r3, [pc, #364]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1f0      	bne.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	019a      	lsls	r2, r3, #6
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	071b      	lsls	r3, r3, #28
 80075a0:	4955      	ldr	r1, [pc, #340]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80075a8:	4b52      	ldr	r3, [pc, #328]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80075aa:	2201      	movs	r2, #1
 80075ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80075ae:	f7fb fa51 	bl	8002a54 <HAL_GetTick>
 80075b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075b4:	e008      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80075b6:	f7fb fa4d 	bl	8002a54 <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d901      	bls.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e090      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075c8:	4b4b      	ldr	r3, [pc, #300]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d0f0      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0302 	and.w	r3, r3, #2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 8083 	beq.w	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80075e2:	2300      	movs	r3, #0
 80075e4:	60fb      	str	r3, [r7, #12]
 80075e6:	4b44      	ldr	r3, [pc, #272]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ea:	4a43      	ldr	r2, [pc, #268]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80075f2:	4b41      	ldr	r3, [pc, #260]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80075fe:	4b3f      	ldr	r3, [pc, #252]	@ (80076fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a3e      	ldr	r2, [pc, #248]	@ (80076fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007608:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800760a:	f7fb fa23 	bl	8002a54 <HAL_GetTick>
 800760e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007610:	e008      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007612:	f7fb fa1f 	bl	8002a54 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	2b02      	cmp	r3, #2
 800761e:	d901      	bls.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e062      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007624:	4b35      	ldr	r3, [pc, #212]	@ (80076fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800762c:	2b00      	cmp	r3, #0
 800762e:	d0f0      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007630:	4b31      	ldr	r3, [pc, #196]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007634:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007638:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d02f      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	429a      	cmp	r2, r3
 800764c:	d028      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800764e:	4b2a      	ldr	r3, [pc, #168]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007656:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007658:	4b29      	ldr	r3, [pc, #164]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800765a:	2201      	movs	r2, #1
 800765c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800765e:	4b28      	ldr	r3, [pc, #160]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007660:	2200      	movs	r2, #0
 8007662:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007664:	4a24      	ldr	r2, [pc, #144]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800766a:	4b23      	ldr	r3, [pc, #140]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800766c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	2b01      	cmp	r3, #1
 8007674:	d114      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007676:	f7fb f9ed 	bl	8002a54 <HAL_GetTick>
 800767a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800767c:	e00a      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800767e:	f7fb f9e9 	bl	8002a54 <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	f241 3288 	movw	r2, #5000	@ 0x1388
 800768c:	4293      	cmp	r3, r2
 800768e:	d901      	bls.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e02a      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007694:	4b18      	ldr	r3, [pc, #96]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007698:	f003 0302 	and.w	r3, r3, #2
 800769c:	2b00      	cmp	r3, #0
 800769e:	d0ee      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076ac:	d10d      	bne.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80076ae:	4b12      	ldr	r3, [pc, #72]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80076be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076c2:	490d      	ldr	r1, [pc, #52]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	608b      	str	r3, [r1, #8]
 80076c8:	e005      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80076ca:	4b0b      	ldr	r3, [pc, #44]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	4a0a      	ldr	r2, [pc, #40]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076d0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80076d4:	6093      	str	r3, [r2, #8]
 80076d6:	4b08      	ldr	r3, [pc, #32]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076d8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076e2:	4905      	ldr	r1, [pc, #20]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	42470068 	.word	0x42470068
 80076f8:	40023800 	.word	0x40023800
 80076fc:	40007000 	.word	0x40007000
 8007700:	42470e40 	.word	0x42470e40

08007704 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007704:	b480      	push	{r7}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800770c:	2300      	movs	r3, #0
 800770e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d13f      	bne.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007722:	4b24      	ldr	r3, [pc, #144]	@ (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d006      	beq.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007738:	d12f      	bne.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800773a:	4b1f      	ldr	r3, [pc, #124]	@ (80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800773c:	617b      	str	r3, [r7, #20]
          break;
 800773e:	e02f      	b.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007740:	4b1c      	ldr	r3, [pc, #112]	@ (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007748:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800774c:	d108      	bne.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800774e:	4b19      	ldr	r3, [pc, #100]	@ (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007756:	4a19      	ldr	r2, [pc, #100]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007758:	fbb2 f3f3 	udiv	r3, r2, r3
 800775c:	613b      	str	r3, [r7, #16]
 800775e:	e007      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007760:	4b14      	ldr	r3, [pc, #80]	@ (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007768:	4a15      	ldr	r2, [pc, #84]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800776a:	fbb2 f3f3 	udiv	r3, r2, r3
 800776e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007770:	4b10      	ldr	r3, [pc, #64]	@ (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007772:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007776:	099b      	lsrs	r3, r3, #6
 8007778:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	fb02 f303 	mul.w	r3, r2, r3
 8007782:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007784:	4b0b      	ldr	r3, [pc, #44]	@ (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800778a:	0f1b      	lsrs	r3, r3, #28
 800778c:	f003 0307 	and.w	r3, r3, #7
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	fbb2 f3f3 	udiv	r3, r2, r3
 8007796:	617b      	str	r3, [r7, #20]
          break;
 8007798:	e002      	b.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800779a:	2300      	movs	r3, #0
 800779c:	617b      	str	r3, [r7, #20]
          break;
 800779e:	bf00      	nop
        }
      }
      break;
 80077a0:	e000      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80077a2:	bf00      	nop
    }
  }
  return frequency;
 80077a4:	697b      	ldr	r3, [r7, #20]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	371c      	adds	r7, #28
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	40023800 	.word	0x40023800
 80077b8:	00bb8000 	.word	0x00bb8000
 80077bc:	007a1200 	.word	0x007a1200
 80077c0:	00f42400 	.word	0x00f42400

080077c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d101      	bne.n	80077d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e07b      	b.n	80078ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d108      	bne.n	80077f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077e6:	d009      	beq.n	80077fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	61da      	str	r2, [r3, #28]
 80077ee:	e005      	b.n	80077fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d106      	bne.n	800781c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7fa fedc 	bl	80025d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007832:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007844:	431a      	orrs	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	f003 0302 	and.w	r3, r3, #2
 8007858:	431a      	orrs	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	431a      	orrs	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800786c:	431a      	orrs	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007876:	431a      	orrs	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a1b      	ldr	r3, [r3, #32]
 800787c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007880:	ea42 0103 	orr.w	r1, r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007888:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	430a      	orrs	r2, r1
 8007892:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	0c1b      	lsrs	r3, r3, #16
 800789a:	f003 0104 	and.w	r1, r3, #4
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078a2:	f003 0210 	and.w	r2, r3, #16
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	69da      	ldr	r2, [r3, #28]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b082      	sub	sp, #8
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e042      	b.n	800796e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d106      	bne.n	8007902 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7fa feb1 	bl	8002664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2224      	movs	r2, #36	@ 0x24
 8007906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68da      	ldr	r2, [r3, #12]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007918:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f82c 	bl	8007978 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691a      	ldr	r2, [r3, #16]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800792e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	695a      	ldr	r2, [r3, #20]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800793e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68da      	ldr	r2, [r3, #12]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800794e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2220      	movs	r2, #32
 800795a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2220      	movs	r2, #32
 8007962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
	...

08007978 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800797c:	b0c0      	sub	sp, #256	@ 0x100
 800797e:	af00      	add	r7, sp, #0
 8007980:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007994:	68d9      	ldr	r1, [r3, #12]
 8007996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	ea40 0301 	orr.w	r3, r0, r1
 80079a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a6:	689a      	ldr	r2, [r3, #8]
 80079a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	431a      	orrs	r2, r3
 80079b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	431a      	orrs	r2, r3
 80079b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	4313      	orrs	r3, r2
 80079c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80079c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80079d0:	f021 010c 	bic.w	r1, r1, #12
 80079d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80079de:	430b      	orrs	r3, r1
 80079e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80079ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079f2:	6999      	ldr	r1, [r3, #24]
 80079f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	ea40 0301 	orr.w	r3, r0, r1
 80079fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	4b8f      	ldr	r3, [pc, #572]	@ (8007c44 <UART_SetConfig+0x2cc>)
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d005      	beq.n	8007a18 <UART_SetConfig+0xa0>
 8007a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	4b8d      	ldr	r3, [pc, #564]	@ (8007c48 <UART_SetConfig+0x2d0>)
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d104      	bne.n	8007a22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a18:	f7ff fd7e 	bl	8007518 <HAL_RCC_GetPCLK2Freq>
 8007a1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007a20:	e003      	b.n	8007a2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a22:	f7ff fd65 	bl	80074f0 <HAL_RCC_GetPCLK1Freq>
 8007a26:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a2e:	69db      	ldr	r3, [r3, #28]
 8007a30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a34:	f040 810c 	bne.w	8007c50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a42:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007a46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007a4a:	4622      	mov	r2, r4
 8007a4c:	462b      	mov	r3, r5
 8007a4e:	1891      	adds	r1, r2, r2
 8007a50:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007a52:	415b      	adcs	r3, r3
 8007a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	eb12 0801 	adds.w	r8, r2, r1
 8007a60:	4629      	mov	r1, r5
 8007a62:	eb43 0901 	adc.w	r9, r3, r1
 8007a66:	f04f 0200 	mov.w	r2, #0
 8007a6a:	f04f 0300 	mov.w	r3, #0
 8007a6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a7a:	4690      	mov	r8, r2
 8007a7c:	4699      	mov	r9, r3
 8007a7e:	4623      	mov	r3, r4
 8007a80:	eb18 0303 	adds.w	r3, r8, r3
 8007a84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007a88:	462b      	mov	r3, r5
 8007a8a:	eb49 0303 	adc.w	r3, r9, r3
 8007a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a9e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007aa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	18db      	adds	r3, r3, r3
 8007aaa:	653b      	str	r3, [r7, #80]	@ 0x50
 8007aac:	4613      	mov	r3, r2
 8007aae:	eb42 0303 	adc.w	r3, r2, r3
 8007ab2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ab4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007ab8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007abc:	f7f9 f8e4 	bl	8000c88 <__aeabi_uldivmod>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4b61      	ldr	r3, [pc, #388]	@ (8007c4c <UART_SetConfig+0x2d4>)
 8007ac6:	fba3 2302 	umull	r2, r3, r3, r2
 8007aca:	095b      	lsrs	r3, r3, #5
 8007acc:	011c      	lsls	r4, r3, #4
 8007ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ad8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007adc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007ae0:	4642      	mov	r2, r8
 8007ae2:	464b      	mov	r3, r9
 8007ae4:	1891      	adds	r1, r2, r2
 8007ae6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007ae8:	415b      	adcs	r3, r3
 8007aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007aec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007af0:	4641      	mov	r1, r8
 8007af2:	eb12 0a01 	adds.w	sl, r2, r1
 8007af6:	4649      	mov	r1, r9
 8007af8:	eb43 0b01 	adc.w	fp, r3, r1
 8007afc:	f04f 0200 	mov.w	r2, #0
 8007b00:	f04f 0300 	mov.w	r3, #0
 8007b04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b10:	4692      	mov	sl, r2
 8007b12:	469b      	mov	fp, r3
 8007b14:	4643      	mov	r3, r8
 8007b16:	eb1a 0303 	adds.w	r3, sl, r3
 8007b1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b1e:	464b      	mov	r3, r9
 8007b20:	eb4b 0303 	adc.w	r3, fp, r3
 8007b24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b34:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007b38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	18db      	adds	r3, r3, r3
 8007b40:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b42:	4613      	mov	r3, r2
 8007b44:	eb42 0303 	adc.w	r3, r2, r3
 8007b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007b4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007b52:	f7f9 f899 	bl	8000c88 <__aeabi_uldivmod>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8007c4c <UART_SetConfig+0x2d4>)
 8007b5e:	fba3 2301 	umull	r2, r3, r3, r1
 8007b62:	095b      	lsrs	r3, r3, #5
 8007b64:	2264      	movs	r2, #100	@ 0x64
 8007b66:	fb02 f303 	mul.w	r3, r2, r3
 8007b6a:	1acb      	subs	r3, r1, r3
 8007b6c:	00db      	lsls	r3, r3, #3
 8007b6e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007b72:	4b36      	ldr	r3, [pc, #216]	@ (8007c4c <UART_SetConfig+0x2d4>)
 8007b74:	fba3 2302 	umull	r2, r3, r3, r2
 8007b78:	095b      	lsrs	r3, r3, #5
 8007b7a:	005b      	lsls	r3, r3, #1
 8007b7c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007b80:	441c      	add	r4, r3
 8007b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b86:	2200      	movs	r2, #0
 8007b88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b8c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007b90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007b94:	4642      	mov	r2, r8
 8007b96:	464b      	mov	r3, r9
 8007b98:	1891      	adds	r1, r2, r2
 8007b9a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007b9c:	415b      	adcs	r3, r3
 8007b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ba0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007ba4:	4641      	mov	r1, r8
 8007ba6:	1851      	adds	r1, r2, r1
 8007ba8:	6339      	str	r1, [r7, #48]	@ 0x30
 8007baa:	4649      	mov	r1, r9
 8007bac:	414b      	adcs	r3, r1
 8007bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bb0:	f04f 0200 	mov.w	r2, #0
 8007bb4:	f04f 0300 	mov.w	r3, #0
 8007bb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007bbc:	4659      	mov	r1, fp
 8007bbe:	00cb      	lsls	r3, r1, #3
 8007bc0:	4651      	mov	r1, sl
 8007bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bc6:	4651      	mov	r1, sl
 8007bc8:	00ca      	lsls	r2, r1, #3
 8007bca:	4610      	mov	r0, r2
 8007bcc:	4619      	mov	r1, r3
 8007bce:	4603      	mov	r3, r0
 8007bd0:	4642      	mov	r2, r8
 8007bd2:	189b      	adds	r3, r3, r2
 8007bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007bd8:	464b      	mov	r3, r9
 8007bda:	460a      	mov	r2, r1
 8007bdc:	eb42 0303 	adc.w	r3, r2, r3
 8007be0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007bf0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007bf4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	18db      	adds	r3, r3, r3
 8007bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007bfe:	4613      	mov	r3, r2
 8007c00:	eb42 0303 	adc.w	r3, r2, r3
 8007c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007c0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007c0e:	f7f9 f83b 	bl	8000c88 <__aeabi_uldivmod>
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	4b0d      	ldr	r3, [pc, #52]	@ (8007c4c <UART_SetConfig+0x2d4>)
 8007c18:	fba3 1302 	umull	r1, r3, r3, r2
 8007c1c:	095b      	lsrs	r3, r3, #5
 8007c1e:	2164      	movs	r1, #100	@ 0x64
 8007c20:	fb01 f303 	mul.w	r3, r1, r3
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	00db      	lsls	r3, r3, #3
 8007c28:	3332      	adds	r3, #50	@ 0x32
 8007c2a:	4a08      	ldr	r2, [pc, #32]	@ (8007c4c <UART_SetConfig+0x2d4>)
 8007c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c30:	095b      	lsrs	r3, r3, #5
 8007c32:	f003 0207 	and.w	r2, r3, #7
 8007c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4422      	add	r2, r4
 8007c3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c40:	e106      	b.n	8007e50 <UART_SetConfig+0x4d8>
 8007c42:	bf00      	nop
 8007c44:	40011000 	.word	0x40011000
 8007c48:	40011400 	.word	0x40011400
 8007c4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c54:	2200      	movs	r2, #0
 8007c56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c5a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007c5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007c62:	4642      	mov	r2, r8
 8007c64:	464b      	mov	r3, r9
 8007c66:	1891      	adds	r1, r2, r2
 8007c68:	6239      	str	r1, [r7, #32]
 8007c6a:	415b      	adcs	r3, r3
 8007c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c72:	4641      	mov	r1, r8
 8007c74:	1854      	adds	r4, r2, r1
 8007c76:	4649      	mov	r1, r9
 8007c78:	eb43 0501 	adc.w	r5, r3, r1
 8007c7c:	f04f 0200 	mov.w	r2, #0
 8007c80:	f04f 0300 	mov.w	r3, #0
 8007c84:	00eb      	lsls	r3, r5, #3
 8007c86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c8a:	00e2      	lsls	r2, r4, #3
 8007c8c:	4614      	mov	r4, r2
 8007c8e:	461d      	mov	r5, r3
 8007c90:	4643      	mov	r3, r8
 8007c92:	18e3      	adds	r3, r4, r3
 8007c94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c98:	464b      	mov	r3, r9
 8007c9a:	eb45 0303 	adc.w	r3, r5, r3
 8007c9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007cae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007cb2:	f04f 0200 	mov.w	r2, #0
 8007cb6:	f04f 0300 	mov.w	r3, #0
 8007cba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	008b      	lsls	r3, r1, #2
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cc8:	4621      	mov	r1, r4
 8007cca:	008a      	lsls	r2, r1, #2
 8007ccc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007cd0:	f7f8 ffda 	bl	8000c88 <__aeabi_uldivmod>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	4b60      	ldr	r3, [pc, #384]	@ (8007e5c <UART_SetConfig+0x4e4>)
 8007cda:	fba3 2302 	umull	r2, r3, r3, r2
 8007cde:	095b      	lsrs	r3, r3, #5
 8007ce0:	011c      	lsls	r4, r3, #4
 8007ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007cec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007cf0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007cf4:	4642      	mov	r2, r8
 8007cf6:	464b      	mov	r3, r9
 8007cf8:	1891      	adds	r1, r2, r2
 8007cfa:	61b9      	str	r1, [r7, #24]
 8007cfc:	415b      	adcs	r3, r3
 8007cfe:	61fb      	str	r3, [r7, #28]
 8007d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d04:	4641      	mov	r1, r8
 8007d06:	1851      	adds	r1, r2, r1
 8007d08:	6139      	str	r1, [r7, #16]
 8007d0a:	4649      	mov	r1, r9
 8007d0c:	414b      	adcs	r3, r1
 8007d0e:	617b      	str	r3, [r7, #20]
 8007d10:	f04f 0200 	mov.w	r2, #0
 8007d14:	f04f 0300 	mov.w	r3, #0
 8007d18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d1c:	4659      	mov	r1, fp
 8007d1e:	00cb      	lsls	r3, r1, #3
 8007d20:	4651      	mov	r1, sl
 8007d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d26:	4651      	mov	r1, sl
 8007d28:	00ca      	lsls	r2, r1, #3
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	4603      	mov	r3, r0
 8007d30:	4642      	mov	r2, r8
 8007d32:	189b      	adds	r3, r3, r2
 8007d34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d38:	464b      	mov	r3, r9
 8007d3a:	460a      	mov	r2, r1
 8007d3c:	eb42 0303 	adc.w	r3, r2, r3
 8007d40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d4e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007d50:	f04f 0200 	mov.w	r2, #0
 8007d54:	f04f 0300 	mov.w	r3, #0
 8007d58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007d5c:	4649      	mov	r1, r9
 8007d5e:	008b      	lsls	r3, r1, #2
 8007d60:	4641      	mov	r1, r8
 8007d62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d66:	4641      	mov	r1, r8
 8007d68:	008a      	lsls	r2, r1, #2
 8007d6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007d6e:	f7f8 ff8b 	bl	8000c88 <__aeabi_uldivmod>
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
 8007d76:	4611      	mov	r1, r2
 8007d78:	4b38      	ldr	r3, [pc, #224]	@ (8007e5c <UART_SetConfig+0x4e4>)
 8007d7a:	fba3 2301 	umull	r2, r3, r3, r1
 8007d7e:	095b      	lsrs	r3, r3, #5
 8007d80:	2264      	movs	r2, #100	@ 0x64
 8007d82:	fb02 f303 	mul.w	r3, r2, r3
 8007d86:	1acb      	subs	r3, r1, r3
 8007d88:	011b      	lsls	r3, r3, #4
 8007d8a:	3332      	adds	r3, #50	@ 0x32
 8007d8c:	4a33      	ldr	r2, [pc, #204]	@ (8007e5c <UART_SetConfig+0x4e4>)
 8007d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d92:	095b      	lsrs	r3, r3, #5
 8007d94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d98:	441c      	add	r4, r3
 8007d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d9e:	2200      	movs	r2, #0
 8007da0:	673b      	str	r3, [r7, #112]	@ 0x70
 8007da2:	677a      	str	r2, [r7, #116]	@ 0x74
 8007da4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007da8:	4642      	mov	r2, r8
 8007daa:	464b      	mov	r3, r9
 8007dac:	1891      	adds	r1, r2, r2
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	415b      	adcs	r3, r3
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007db8:	4641      	mov	r1, r8
 8007dba:	1851      	adds	r1, r2, r1
 8007dbc:	6039      	str	r1, [r7, #0]
 8007dbe:	4649      	mov	r1, r9
 8007dc0:	414b      	adcs	r3, r1
 8007dc2:	607b      	str	r3, [r7, #4]
 8007dc4:	f04f 0200 	mov.w	r2, #0
 8007dc8:	f04f 0300 	mov.w	r3, #0
 8007dcc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007dd0:	4659      	mov	r1, fp
 8007dd2:	00cb      	lsls	r3, r1, #3
 8007dd4:	4651      	mov	r1, sl
 8007dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dda:	4651      	mov	r1, sl
 8007ddc:	00ca      	lsls	r2, r1, #3
 8007dde:	4610      	mov	r0, r2
 8007de0:	4619      	mov	r1, r3
 8007de2:	4603      	mov	r3, r0
 8007de4:	4642      	mov	r2, r8
 8007de6:	189b      	adds	r3, r3, r2
 8007de8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007dea:	464b      	mov	r3, r9
 8007dec:	460a      	mov	r2, r1
 8007dee:	eb42 0303 	adc.w	r3, r2, r3
 8007df2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8007dfe:	667a      	str	r2, [r7, #100]	@ 0x64
 8007e00:	f04f 0200 	mov.w	r2, #0
 8007e04:	f04f 0300 	mov.w	r3, #0
 8007e08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007e0c:	4649      	mov	r1, r9
 8007e0e:	008b      	lsls	r3, r1, #2
 8007e10:	4641      	mov	r1, r8
 8007e12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e16:	4641      	mov	r1, r8
 8007e18:	008a      	lsls	r2, r1, #2
 8007e1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007e1e:	f7f8 ff33 	bl	8000c88 <__aeabi_uldivmod>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	4b0d      	ldr	r3, [pc, #52]	@ (8007e5c <UART_SetConfig+0x4e4>)
 8007e28:	fba3 1302 	umull	r1, r3, r3, r2
 8007e2c:	095b      	lsrs	r3, r3, #5
 8007e2e:	2164      	movs	r1, #100	@ 0x64
 8007e30:	fb01 f303 	mul.w	r3, r1, r3
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	011b      	lsls	r3, r3, #4
 8007e38:	3332      	adds	r3, #50	@ 0x32
 8007e3a:	4a08      	ldr	r2, [pc, #32]	@ (8007e5c <UART_SetConfig+0x4e4>)
 8007e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e40:	095b      	lsrs	r3, r3, #5
 8007e42:	f003 020f 	and.w	r2, r3, #15
 8007e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4422      	add	r2, r4
 8007e4e:	609a      	str	r2, [r3, #8]
}
 8007e50:	bf00      	nop
 8007e52:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007e56:	46bd      	mov	sp, r7
 8007e58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e5c:	51eb851f 	.word	0x51eb851f

08007e60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e60:	b084      	sub	sp, #16
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	f107 001c 	add.w	r0, r7, #28
 8007e6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e72:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d123      	bne.n	8007ec2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e7e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007e8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007ea2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d105      	bne.n	8007eb6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f9dc 	bl	8008274 <USB_CoreReset>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	73fb      	strb	r3, [r7, #15]
 8007ec0:	e01b      	b.n	8007efa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f9d0 	bl	8008274 <USB_CoreReset>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007ed8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d106      	bne.n	8007eee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ee4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	639a      	str	r2, [r3, #56]	@ 0x38
 8007eec:	e005      	b.n	8007efa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007efa:	7fbb      	ldrb	r3, [r7, #30]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d10b      	bne.n	8007f18 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f043 0206 	orr.w	r2, r3, #6
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f043 0220 	orr.w	r2, r3, #32
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f24:	b004      	add	sp, #16
 8007f26:	4770      	bx	lr

08007f28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f043 0201 	orr.w	r2, r3, #1
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b083      	sub	sp, #12
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f023 0201 	bic.w	r2, r3, #1
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f88:	78fb      	ldrb	r3, [r7, #3]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d115      	bne.n	8007fba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007f9a:	200a      	movs	r0, #10
 8007f9c:	f7fa fd66 	bl	8002a6c <HAL_Delay>
      ms += 10U;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	330a      	adds	r3, #10
 8007fa4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f956 	bl	8008258 <USB_GetMode>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d01e      	beq.n	8007ff0 <USB_SetCurrentMode+0x84>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2bc7      	cmp	r3, #199	@ 0xc7
 8007fb6:	d9f0      	bls.n	8007f9a <USB_SetCurrentMode+0x2e>
 8007fb8:	e01a      	b.n	8007ff0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007fba:	78fb      	ldrb	r3, [r7, #3]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d115      	bne.n	8007fec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007fcc:	200a      	movs	r0, #10
 8007fce:	f7fa fd4d 	bl	8002a6c <HAL_Delay>
      ms += 10U;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	330a      	adds	r3, #10
 8007fd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f93d 	bl	8008258 <USB_GetMode>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d005      	beq.n	8007ff0 <USB_SetCurrentMode+0x84>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2bc7      	cmp	r3, #199	@ 0xc7
 8007fe8:	d9f0      	bls.n	8007fcc <USB_SetCurrentMode+0x60>
 8007fea:	e001      	b.n	8007ff0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e005      	b.n	8007ffc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2bc8      	cmp	r3, #200	@ 0xc8
 8007ff4:	d101      	bne.n	8007ffa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e000      	b.n	8007ffc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800800e:	2300      	movs	r3, #0
 8008010:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3301      	adds	r3, #1
 8008016:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800801e:	d901      	bls.n	8008024 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e01b      	b.n	800805c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	2b00      	cmp	r3, #0
 800802a:	daf2      	bge.n	8008012 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800802c:	2300      	movs	r3, #0
 800802e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	019b      	lsls	r3, r3, #6
 8008034:	f043 0220 	orr.w	r2, r3, #32
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	3301      	adds	r3, #1
 8008040:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008048:	d901      	bls.n	800804e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e006      	b.n	800805c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	f003 0320 	and.w	r3, r3, #32
 8008056:	2b20      	cmp	r3, #32
 8008058:	d0f0      	beq.n	800803c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008070:	2300      	movs	r3, #0
 8008072:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	3301      	adds	r3, #1
 8008078:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008080:	d901      	bls.n	8008086 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e018      	b.n	80080b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	daf2      	bge.n	8008074 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800808e:	2300      	movs	r3, #0
 8008090:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2210      	movs	r2, #16
 8008096:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3301      	adds	r3, #1
 800809c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080a4:	d901      	bls.n	80080aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e006      	b.n	80080b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	f003 0310 	and.w	r3, r3, #16
 80080b2:	2b10      	cmp	r3, #16
 80080b4:	d0f0      	beq.n	8008098 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3714      	adds	r7, #20
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b089      	sub	sp, #36	@ 0x24
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	4611      	mov	r1, r2
 80080d0:	461a      	mov	r2, r3
 80080d2:	460b      	mov	r3, r1
 80080d4:	71fb      	strb	r3, [r7, #7]
 80080d6:	4613      	mov	r3, r2
 80080d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80080e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d123      	bne.n	8008132 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80080ea:	88bb      	ldrh	r3, [r7, #4]
 80080ec:	3303      	adds	r3, #3
 80080ee:	089b      	lsrs	r3, r3, #2
 80080f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80080f2:	2300      	movs	r3, #0
 80080f4:	61bb      	str	r3, [r7, #24]
 80080f6:	e018      	b.n	800812a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80080f8:	79fb      	ldrb	r3, [r7, #7]
 80080fa:	031a      	lsls	r2, r3, #12
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008104:	461a      	mov	r2, r3
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	3301      	adds	r3, #1
 8008110:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	3301      	adds	r3, #1
 8008116:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	3301      	adds	r3, #1
 800811c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	3301      	adds	r3, #1
 8008122:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	3301      	adds	r3, #1
 8008128:	61bb      	str	r3, [r7, #24]
 800812a:	69ba      	ldr	r2, [r7, #24]
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	429a      	cmp	r2, r3
 8008130:	d3e2      	bcc.n	80080f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3724      	adds	r7, #36	@ 0x24
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008140:	b480      	push	{r7}
 8008142:	b08b      	sub	sp, #44	@ 0x2c
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	4613      	mov	r3, r2
 800814c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008156:	88fb      	ldrh	r3, [r7, #6]
 8008158:	089b      	lsrs	r3, r3, #2
 800815a:	b29b      	uxth	r3, r3
 800815c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800815e:	88fb      	ldrh	r3, [r7, #6]
 8008160:	f003 0303 	and.w	r3, r3, #3
 8008164:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008166:	2300      	movs	r3, #0
 8008168:	623b      	str	r3, [r7, #32]
 800816a:	e014      	b.n	8008196 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008176:	601a      	str	r2, [r3, #0]
    pDest++;
 8008178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817a:	3301      	adds	r3, #1
 800817c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800817e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008180:	3301      	adds	r3, #1
 8008182:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008186:	3301      	adds	r3, #1
 8008188:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800818a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818c:	3301      	adds	r3, #1
 800818e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008190:	6a3b      	ldr	r3, [r7, #32]
 8008192:	3301      	adds	r3, #1
 8008194:	623b      	str	r3, [r7, #32]
 8008196:	6a3a      	ldr	r2, [r7, #32]
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	429a      	cmp	r2, r3
 800819c:	d3e6      	bcc.n	800816c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800819e:	8bfb      	ldrh	r3, [r7, #30]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d01e      	beq.n	80081e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80081a4:	2300      	movs	r3, #0
 80081a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081ae:	461a      	mov	r2, r3
 80081b0:	f107 0310 	add.w	r3, r7, #16
 80081b4:	6812      	ldr	r2, [r2, #0]
 80081b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	6a3b      	ldr	r3, [r7, #32]
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	00db      	lsls	r3, r3, #3
 80081c0:	fa22 f303 	lsr.w	r3, r2, r3
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c8:	701a      	strb	r2, [r3, #0]
      i++;
 80081ca:	6a3b      	ldr	r3, [r7, #32]
 80081cc:	3301      	adds	r3, #1
 80081ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80081d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d2:	3301      	adds	r3, #1
 80081d4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80081d6:	8bfb      	ldrh	r3, [r7, #30]
 80081d8:	3b01      	subs	r3, #1
 80081da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80081dc:	8bfb      	ldrh	r3, [r7, #30]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1ea      	bne.n	80081b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80081e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	372c      	adds	r7, #44	@ 0x2c
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	695b      	ldr	r3, [r3, #20]
 80081fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	4013      	ands	r3, r2
 8008206:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008208:	68fb      	ldr	r3, [r7, #12]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr

08008216 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008216:	b480      	push	{r7}
 8008218:	b085      	sub	sp, #20
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	460b      	mov	r3, r1
 8008220:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008226:	78fb      	ldrb	r3, [r7, #3]
 8008228:	015a      	lsls	r2, r3, #5
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	4413      	add	r3, r2
 800822e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008236:	78fb      	ldrb	r3, [r7, #3]
 8008238:	015a      	lsls	r2, r3, #5
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	4413      	add	r3, r2
 800823e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	4013      	ands	r3, r2
 8008248:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800824a:	68bb      	ldr	r3, [r7, #8]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	695b      	ldr	r3, [r3, #20]
 8008264:	f003 0301 	and.w	r3, r3, #1
}
 8008268:	4618      	mov	r0, r3
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800827c:	2300      	movs	r3, #0
 800827e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	3301      	adds	r3, #1
 8008284:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800828c:	d901      	bls.n	8008292 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e01b      	b.n	80082ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	daf2      	bge.n	8008280 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	f043 0201 	orr.w	r2, r3, #1
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	3301      	adds	r3, #1
 80082ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082b6:	d901      	bls.n	80082bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e006      	b.n	80082ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	f003 0301 	and.w	r3, r3, #1
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d0f0      	beq.n	80082aa <USB_CoreReset+0x36>

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
	...

080082d8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082d8:	b084      	sub	sp, #16
 80082da:	b580      	push	{r7, lr}
 80082dc:	b086      	sub	sp, #24
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80082e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80082ea:	2300      	movs	r3, #0
 80082ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80082f8:	461a      	mov	r2, r3
 80082fa:	2300      	movs	r3, #0
 80082fc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008302:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800830e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800831a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800832a:	2b00      	cmp	r3, #0
 800832c:	d119      	bne.n	8008362 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800832e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008332:	2b01      	cmp	r3, #1
 8008334:	d10a      	bne.n	800834c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008344:	f043 0304 	orr.w	r3, r3, #4
 8008348:	6013      	str	r3, [r2, #0]
 800834a:	e014      	b.n	8008376 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800835a:	f023 0304 	bic.w	r3, r3, #4
 800835e:	6013      	str	r3, [r2, #0]
 8008360:	e009      	b.n	8008376 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008370:	f023 0304 	bic.w	r3, r3, #4
 8008374:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008376:	2110      	movs	r1, #16
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7ff fe43 	bl	8008004 <USB_FlushTxFifo>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7ff fe6d 	bl	8008068 <USB_FlushRxFifo>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008398:	2300      	movs	r3, #0
 800839a:	613b      	str	r3, [r7, #16]
 800839c:	e015      	b.n	80083ca <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	015a      	lsls	r2, r3, #5
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	4413      	add	r3, r2
 80083a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083aa:	461a      	mov	r2, r3
 80083ac:	f04f 33ff 	mov.w	r3, #4294967295
 80083b0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083be:	461a      	mov	r2, r3
 80083c0:	2300      	movs	r3, #0
 80083c2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	3301      	adds	r3, #1
 80083c8:	613b      	str	r3, [r7, #16]
 80083ca:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80083ce:	461a      	mov	r2, r3
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d3e3      	bcc.n	800839e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f04f 32ff 	mov.w	r2, #4294967295
 80083e2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a18      	ldr	r2, [pc, #96]	@ (8008448 <USB_HostInit+0x170>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d10b      	bne.n	8008404 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083f2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a15      	ldr	r2, [pc, #84]	@ (800844c <USB_HostInit+0x174>)
 80083f8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a14      	ldr	r2, [pc, #80]	@ (8008450 <USB_HostInit+0x178>)
 80083fe:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008402:	e009      	b.n	8008418 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2280      	movs	r2, #128	@ 0x80
 8008408:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a11      	ldr	r2, [pc, #68]	@ (8008454 <USB_HostInit+0x17c>)
 800840e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a11      	ldr	r2, [pc, #68]	@ (8008458 <USB_HostInit+0x180>)
 8008414:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008418:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800841c:	2b00      	cmp	r3, #0
 800841e:	d105      	bne.n	800842c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	f043 0210 	orr.w	r2, r3, #16
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	699a      	ldr	r2, [r3, #24]
 8008430:	4b0a      	ldr	r3, [pc, #40]	@ (800845c <USB_HostInit+0x184>)
 8008432:	4313      	orrs	r3, r2
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008438:	7dfb      	ldrb	r3, [r7, #23]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3718      	adds	r7, #24
 800843e:	46bd      	mov	sp, r7
 8008440:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008444:	b004      	add	sp, #16
 8008446:	4770      	bx	lr
 8008448:	40040000 	.word	0x40040000
 800844c:	01000200 	.word	0x01000200
 8008450:	00e00300 	.word	0x00e00300
 8008454:	00600080 	.word	0x00600080
 8008458:	004000e0 	.word	0x004000e0
 800845c:	a3200008 	.word	0xa3200008

08008460 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800847e:	f023 0303 	bic.w	r3, r3, #3
 8008482:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	78fb      	ldrb	r3, [r7, #3]
 800848e:	f003 0303 	and.w	r3, r3, #3
 8008492:	68f9      	ldr	r1, [r7, #12]
 8008494:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008498:	4313      	orrs	r3, r2
 800849a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800849c:	78fb      	ldrb	r3, [r7, #3]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d107      	bne.n	80084b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084a8:	461a      	mov	r2, r3
 80084aa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80084ae:	6053      	str	r3, [r2, #4]
 80084b0:	e00c      	b.n	80084cc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80084b2:	78fb      	ldrb	r3, [r7, #3]
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	d107      	bne.n	80084c8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084be:	461a      	mov	r2, r3
 80084c0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80084c4:	6053      	str	r3, [r2, #4]
 80084c6:	e001      	b.n	80084cc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e000      	b.n	80084ce <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b084      	sub	sp, #16
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80084e6:	2300      	movs	r3, #0
 80084e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80084fa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008508:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800850a:	2064      	movs	r0, #100	@ 0x64
 800850c:	f7fa faae 	bl	8002a6c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800851c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800851e:	200a      	movs	r0, #10
 8008520:	f7fa faa4 	bl	8002a6c <HAL_Delay>

  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800852e:	b480      	push	{r7}
 8008530:	b085      	sub	sp, #20
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	460b      	mov	r3, r1
 8008538:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800853e:	2300      	movs	r3, #0
 8008540:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008552:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800855a:	2b00      	cmp	r3, #0
 800855c:	d109      	bne.n	8008572 <USB_DriveVbus+0x44>
 800855e:	78fb      	ldrb	r3, [r7, #3]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d106      	bne.n	8008572 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800856c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008570:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800857c:	d109      	bne.n	8008592 <USB_DriveVbus+0x64>
 800857e:	78fb      	ldrb	r3, [r7, #3]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d106      	bne.n	8008592 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800858c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008590:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80085ac:	2300      	movs	r3, #0
 80085ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	0c5b      	lsrs	r3, r3, #17
 80085be:	f003 0303 	and.w	r3, r3, #3
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3714      	adds	r7, #20
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b085      	sub	sp, #20
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	b29b      	uxth	r3, r3
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b088      	sub	sp, #32
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	4608      	mov	r0, r1
 80085fa:	4611      	mov	r1, r2
 80085fc:	461a      	mov	r2, r3
 80085fe:	4603      	mov	r3, r0
 8008600:	70fb      	strb	r3, [r7, #3]
 8008602:	460b      	mov	r3, r1
 8008604:	70bb      	strb	r3, [r7, #2]
 8008606:	4613      	mov	r3, r2
 8008608:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800860a:	2300      	movs	r3, #0
 800860c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008612:	78fb      	ldrb	r3, [r7, #3]
 8008614:	015a      	lsls	r2, r3, #5
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	4413      	add	r3, r2
 800861a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800861e:	461a      	mov	r2, r3
 8008620:	f04f 33ff 	mov.w	r3, #4294967295
 8008624:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008626:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800862a:	2b03      	cmp	r3, #3
 800862c:	d87c      	bhi.n	8008728 <USB_HC_Init+0x138>
 800862e:	a201      	add	r2, pc, #4	@ (adr r2, 8008634 <USB_HC_Init+0x44>)
 8008630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008634:	08008645 	.word	0x08008645
 8008638:	080086eb 	.word	0x080086eb
 800863c:	08008645 	.word	0x08008645
 8008640:	080086ad 	.word	0x080086ad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008644:	78fb      	ldrb	r3, [r7, #3]
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	4413      	add	r3, r2
 800864c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008650:	461a      	mov	r2, r3
 8008652:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008656:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008658:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800865c:	2b00      	cmp	r3, #0
 800865e:	da10      	bge.n	8008682 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008660:	78fb      	ldrb	r3, [r7, #3]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	4413      	add	r3, r2
 8008668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	78fa      	ldrb	r2, [r7, #3]
 8008670:	0151      	lsls	r1, r2, #5
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	440a      	add	r2, r1
 8008676:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800867a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800867e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008680:	e055      	b.n	800872e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a6f      	ldr	r2, [pc, #444]	@ (8008844 <USB_HC_Init+0x254>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d151      	bne.n	800872e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800868a:	78fb      	ldrb	r3, [r7, #3]
 800868c:	015a      	lsls	r2, r3, #5
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	4413      	add	r3, r2
 8008692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	78fa      	ldrb	r2, [r7, #3]
 800869a:	0151      	lsls	r1, r2, #5
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	440a      	add	r2, r1
 80086a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086a4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80086a8:	60d3      	str	r3, [r2, #12]
      break;
 80086aa:	e040      	b.n	800872e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80086ac:	78fb      	ldrb	r3, [r7, #3]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086b8:	461a      	mov	r2, r3
 80086ba:	f240 639d 	movw	r3, #1693	@ 0x69d
 80086be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80086c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	da34      	bge.n	8008732 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80086c8:	78fb      	ldrb	r3, [r7, #3]
 80086ca:	015a      	lsls	r2, r3, #5
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	4413      	add	r3, r2
 80086d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	78fa      	ldrb	r2, [r7, #3]
 80086d8:	0151      	lsls	r1, r2, #5
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	440a      	add	r2, r1
 80086de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086e6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80086e8:	e023      	b.n	8008732 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80086ea:	78fb      	ldrb	r3, [r7, #3]
 80086ec:	015a      	lsls	r2, r3, #5
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	4413      	add	r3, r2
 80086f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086f6:	461a      	mov	r2, r3
 80086f8:	f240 2325 	movw	r3, #549	@ 0x225
 80086fc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80086fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008702:	2b00      	cmp	r3, #0
 8008704:	da17      	bge.n	8008736 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008706:	78fb      	ldrb	r3, [r7, #3]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	4413      	add	r3, r2
 800870e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	78fa      	ldrb	r2, [r7, #3]
 8008716:	0151      	lsls	r1, r2, #5
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	440a      	add	r2, r1
 800871c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008720:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008724:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008726:	e006      	b.n	8008736 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	77fb      	strb	r3, [r7, #31]
      break;
 800872c:	e004      	b.n	8008738 <USB_HC_Init+0x148>
      break;
 800872e:	bf00      	nop
 8008730:	e002      	b.n	8008738 <USB_HC_Init+0x148>
      break;
 8008732:	bf00      	nop
 8008734:	e000      	b.n	8008738 <USB_HC_Init+0x148>
      break;
 8008736:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008738:	78fb      	ldrb	r3, [r7, #3]
 800873a:	015a      	lsls	r2, r3, #5
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	4413      	add	r3, r2
 8008740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008744:	461a      	mov	r2, r3
 8008746:	2300      	movs	r3, #0
 8008748:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800874a:	78fb      	ldrb	r3, [r7, #3]
 800874c:	015a      	lsls	r2, r3, #5
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	4413      	add	r3, r2
 8008752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	78fa      	ldrb	r2, [r7, #3]
 800875a:	0151      	lsls	r1, r2, #5
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	440a      	add	r2, r1
 8008760:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008764:	f043 0302 	orr.w	r3, r3, #2
 8008768:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008770:	699a      	ldr	r2, [r3, #24]
 8008772:	78fb      	ldrb	r3, [r7, #3]
 8008774:	f003 030f 	and.w	r3, r3, #15
 8008778:	2101      	movs	r1, #1
 800877a:	fa01 f303 	lsl.w	r3, r1, r3
 800877e:	6939      	ldr	r1, [r7, #16]
 8008780:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008784:	4313      	orrs	r3, r2
 8008786:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008794:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008798:	2b00      	cmp	r3, #0
 800879a:	da03      	bge.n	80087a4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800879c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087a0:	61bb      	str	r3, [r7, #24]
 80087a2:	e001      	b.n	80087a8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80087a4:	2300      	movs	r3, #0
 80087a6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7ff fef9 	bl	80085a0 <USB_GetHostSpeed>
 80087ae:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80087b0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d106      	bne.n	80087c6 <USB_HC_Init+0x1d6>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d003      	beq.n	80087c6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80087be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80087c2:	617b      	str	r3, [r7, #20]
 80087c4:	e001      	b.n	80087ca <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80087c6:	2300      	movs	r3, #0
 80087c8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80087ca:	787b      	ldrb	r3, [r7, #1]
 80087cc:	059b      	lsls	r3, r3, #22
 80087ce:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80087d2:	78bb      	ldrb	r3, [r7, #2]
 80087d4:	02db      	lsls	r3, r3, #11
 80087d6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80087da:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80087dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80087e0:	049b      	lsls	r3, r3, #18
 80087e2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80087e6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80087e8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80087ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80087ee:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	431a      	orrs	r2, r3
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80087f8:	78fa      	ldrb	r2, [r7, #3]
 80087fa:	0151      	lsls	r1, r2, #5
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	440a      	add	r2, r1
 8008800:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008804:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008808:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800880a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800880e:	2b03      	cmp	r3, #3
 8008810:	d003      	beq.n	800881a <USB_HC_Init+0x22a>
 8008812:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008816:	2b01      	cmp	r3, #1
 8008818:	d10f      	bne.n	800883a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800881a:	78fb      	ldrb	r3, [r7, #3]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	4413      	add	r3, r2
 8008822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	78fa      	ldrb	r2, [r7, #3]
 800882a:	0151      	lsls	r1, r2, #5
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	440a      	add	r2, r1
 8008830:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008834:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008838:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800883a:	7ffb      	ldrb	r3, [r7, #31]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3720      	adds	r7, #32
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	40040000 	.word	0x40040000

08008848 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b08c      	sub	sp, #48	@ 0x30
 800884c:	af02      	add	r7, sp, #8
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	4613      	mov	r3, r2
 8008854:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	785b      	ldrb	r3, [r3, #1]
 800885e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008860:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008864:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	4a5d      	ldr	r2, [pc, #372]	@ (80089e0 <USB_HC_StartXfer+0x198>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d12f      	bne.n	80088ce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800886e:	79fb      	ldrb	r3, [r7, #7]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d11c      	bne.n	80088ae <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	7c9b      	ldrb	r3, [r3, #18]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <USB_HC_StartXfer+0x3c>
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	7c9b      	ldrb	r3, [r3, #18]
 8008880:	2b02      	cmp	r3, #2
 8008882:	d124      	bne.n	80088ce <USB_HC_StartXfer+0x86>
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	799b      	ldrb	r3, [r3, #6]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d120      	bne.n	80088ce <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	6a3b      	ldr	r3, [r7, #32]
 8008892:	4413      	add	r3, r2
 8008894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	69fa      	ldr	r2, [r7, #28]
 800889c:	0151      	lsls	r1, r2, #5
 800889e:	6a3a      	ldr	r2, [r7, #32]
 80088a0:	440a      	add	r2, r1
 80088a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088aa:	60d3      	str	r3, [r2, #12]
 80088ac:	e00f      	b.n	80088ce <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	791b      	ldrb	r3, [r3, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d10b      	bne.n	80088ce <USB_HC_StartXfer+0x86>
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	795b      	ldrb	r3, [r3, #5]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d107      	bne.n	80088ce <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	785b      	ldrb	r3, [r3, #1]
 80088c2:	4619      	mov	r1, r3
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f000 fb6b 	bl	8008fa0 <USB_DoPing>
        return HAL_OK;
 80088ca:	2300      	movs	r3, #0
 80088cc:	e232      	b.n	8008d34 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	799b      	ldrb	r3, [r3, #6]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d158      	bne.n	8008988 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80088d6:	2301      	movs	r3, #1
 80088d8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	78db      	ldrb	r3, [r3, #3]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d007      	beq.n	80088f2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80088e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	8a92      	ldrh	r2, [r2, #20]
 80088e8:	fb03 f202 	mul.w	r2, r3, r2
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	61da      	str	r2, [r3, #28]
 80088f0:	e07c      	b.n	80089ec <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	7c9b      	ldrb	r3, [r3, #18]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d130      	bne.n	800895c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	2bbc      	cmp	r3, #188	@ 0xbc
 8008900:	d918      	bls.n	8008934 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	8a9b      	ldrh	r3, [r3, #20]
 8008906:	461a      	mov	r2, r3
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	69da      	ldr	r2, [r3, #28]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d003      	beq.n	8008924 <USB_HC_StartXfer+0xdc>
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	2b02      	cmp	r3, #2
 8008922:	d103      	bne.n	800892c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	2202      	movs	r2, #2
 8008928:	60da      	str	r2, [r3, #12]
 800892a:	e05f      	b.n	80089ec <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	2201      	movs	r2, #1
 8008930:	60da      	str	r2, [r3, #12]
 8008932:	e05b      	b.n	80089ec <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	6a1a      	ldr	r2, [r3, #32]
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d007      	beq.n	8008954 <USB_HC_StartXfer+0x10c>
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	2b02      	cmp	r3, #2
 800894a:	d003      	beq.n	8008954 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2204      	movs	r2, #4
 8008950:	60da      	str	r2, [r3, #12]
 8008952:	e04b      	b.n	80089ec <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2203      	movs	r2, #3
 8008958:	60da      	str	r2, [r3, #12]
 800895a:	e047      	b.n	80089ec <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800895c:	79fb      	ldrb	r3, [r7, #7]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d10d      	bne.n	800897e <USB_HC_StartXfer+0x136>
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	6a1b      	ldr	r3, [r3, #32]
 8008966:	68ba      	ldr	r2, [r7, #8]
 8008968:	8a92      	ldrh	r2, [r2, #20]
 800896a:	4293      	cmp	r3, r2
 800896c:	d907      	bls.n	800897e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800896e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	8a92      	ldrh	r2, [r2, #20]
 8008974:	fb03 f202 	mul.w	r2, r3, r2
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	61da      	str	r2, [r3, #28]
 800897c:	e036      	b.n	80089ec <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	6a1a      	ldr	r2, [r3, #32]
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	61da      	str	r2, [r3, #28]
 8008986:	e031      	b.n	80089ec <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	6a1b      	ldr	r3, [r3, #32]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d018      	beq.n	80089c2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	6a1b      	ldr	r3, [r3, #32]
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	8a92      	ldrh	r2, [r2, #20]
 8008998:	4413      	add	r3, r2
 800899a:	3b01      	subs	r3, #1
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	8a92      	ldrh	r2, [r2, #20]
 80089a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80089a4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80089a6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80089a8:	8b7b      	ldrh	r3, [r7, #26]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d90b      	bls.n	80089c6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80089ae:	8b7b      	ldrh	r3, [r7, #26]
 80089b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80089b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	8a92      	ldrh	r2, [r2, #20]
 80089b8:	fb03 f202 	mul.w	r2, r3, r2
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	61da      	str	r2, [r3, #28]
 80089c0:	e001      	b.n	80089c6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80089c2:	2301      	movs	r3, #1
 80089c4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	78db      	ldrb	r3, [r3, #3]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00a      	beq.n	80089e4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80089ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80089d0:	68ba      	ldr	r2, [r7, #8]
 80089d2:	8a92      	ldrh	r2, [r2, #20]
 80089d4:	fb03 f202 	mul.w	r2, r3, r2
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	61da      	str	r2, [r3, #28]
 80089dc:	e006      	b.n	80089ec <USB_HC_StartXfer+0x1a4>
 80089de:	bf00      	nop
 80089e0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	6a1a      	ldr	r2, [r3, #32]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	69db      	ldr	r3, [r3, #28]
 80089f0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80089f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80089f6:	04d9      	lsls	r1, r3, #19
 80089f8:	4ba3      	ldr	r3, [pc, #652]	@ (8008c88 <USB_HC_StartXfer+0x440>)
 80089fa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80089fc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	7d9b      	ldrb	r3, [r3, #22]
 8008a02:	075b      	lsls	r3, r3, #29
 8008a04:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a08:	69f9      	ldr	r1, [r7, #28]
 8008a0a:	0148      	lsls	r0, r1, #5
 8008a0c:	6a39      	ldr	r1, [r7, #32]
 8008a0e:	4401      	add	r1, r0
 8008a10:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008a14:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a16:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008a18:	79fb      	ldrb	r3, [r7, #7]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d009      	beq.n	8008a32 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	6999      	ldr	r1, [r3, #24]
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	015a      	lsls	r2, r3, #5
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	4413      	add	r3, r2
 8008a2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a2e:	460a      	mov	r2, r1
 8008a30:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008a32:	6a3b      	ldr	r3, [r7, #32]
 8008a34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	bf0c      	ite	eq
 8008a42:	2301      	moveq	r3, #1
 8008a44:	2300      	movne	r3, #0
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	015a      	lsls	r2, r3, #5
 8008a4e:	6a3b      	ldr	r3, [r7, #32]
 8008a50:	4413      	add	r3, r2
 8008a52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	69fa      	ldr	r2, [r7, #28]
 8008a5a:	0151      	lsls	r1, r2, #5
 8008a5c:	6a3a      	ldr	r2, [r7, #32]
 8008a5e:	440a      	add	r2, r1
 8008a60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a64:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008a68:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	7e7b      	ldrb	r3, [r7, #25]
 8008a7a:	075b      	lsls	r3, r3, #29
 8008a7c:	69f9      	ldr	r1, [r7, #28]
 8008a7e:	0148      	lsls	r0, r1, #5
 8008a80:	6a39      	ldr	r1, [r7, #32]
 8008a82:	4401      	add	r1, r0
 8008a84:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	799b      	ldrb	r3, [r3, #6]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	f040 80c3 	bne.w	8008c1c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	7c5b      	ldrb	r3, [r3, #17]
 8008a9a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	69fa      	ldr	r2, [r7, #28]
 8008aa4:	0151      	lsls	r1, r2, #5
 8008aa6:	6a3a      	ldr	r2, [r7, #32]
 8008aa8:	440a      	add	r2, r1
 8008aaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008aae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008ab2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	015a      	lsls	r2, r3, #5
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	4413      	add	r3, r2
 8008abc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	69fa      	ldr	r2, [r7, #28]
 8008ac4:	0151      	lsls	r1, r2, #5
 8008ac6:	6a3a      	ldr	r2, [r7, #32]
 8008ac8:	440a      	add	r2, r1
 8008aca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ace:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008ad2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	79db      	ldrb	r3, [r3, #7]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d123      	bne.n	8008b24 <USB_HC_StartXfer+0x2dc>
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	78db      	ldrb	r3, [r3, #3]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d11f      	bne.n	8008b24 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	015a      	lsls	r2, r3, #5
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	4413      	add	r3, r2
 8008aec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	69fa      	ldr	r2, [r7, #28]
 8008af4:	0151      	lsls	r1, r2, #5
 8008af6:	6a3a      	ldr	r2, [r7, #32]
 8008af8:	440a      	add	r2, r1
 8008afa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008afe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b02:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	69fa      	ldr	r2, [r7, #28]
 8008b14:	0151      	lsls	r1, r2, #5
 8008b16:	6a3a      	ldr	r2, [r7, #32]
 8008b18:	440a      	add	r2, r1
 8008b1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b22:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	7c9b      	ldrb	r3, [r3, #18]
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d003      	beq.n	8008b34 <USB_HC_StartXfer+0x2ec>
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	7c9b      	ldrb	r3, [r3, #18]
 8008b30:	2b03      	cmp	r3, #3
 8008b32:	d117      	bne.n	8008b64 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d113      	bne.n	8008b64 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	78db      	ldrb	r3, [r3, #3]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d10f      	bne.n	8008b64 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	015a      	lsls	r2, r3, #5
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	69fa      	ldr	r2, [r7, #28]
 8008b54:	0151      	lsls	r1, r2, #5
 8008b56:	6a3a      	ldr	r2, [r7, #32]
 8008b58:	440a      	add	r2, r1
 8008b5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b62:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	7c9b      	ldrb	r3, [r3, #18]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d162      	bne.n	8008c32 <USB_HC_StartXfer+0x3ea>
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	78db      	ldrb	r3, [r3, #3]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d15e      	bne.n	8008c32 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	2b03      	cmp	r3, #3
 8008b7c:	d858      	bhi.n	8008c30 <USB_HC_StartXfer+0x3e8>
 8008b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b84 <USB_HC_StartXfer+0x33c>)
 8008b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b84:	08008b95 	.word	0x08008b95
 8008b88:	08008bb7 	.word	0x08008bb7
 8008b8c:	08008bd9 	.word	0x08008bd9
 8008b90:	08008bfb 	.word	0x08008bfb
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	6a3b      	ldr	r3, [r7, #32]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	69fa      	ldr	r2, [r7, #28]
 8008ba4:	0151      	lsls	r1, r2, #5
 8008ba6:	6a3a      	ldr	r2, [r7, #32]
 8008ba8:	440a      	add	r2, r1
 8008baa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bb2:	6053      	str	r3, [r2, #4]
          break;
 8008bb4:	e03d      	b.n	8008c32 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	6a3b      	ldr	r3, [r7, #32]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	69fa      	ldr	r2, [r7, #28]
 8008bc6:	0151      	lsls	r1, r2, #5
 8008bc8:	6a3a      	ldr	r2, [r7, #32]
 8008bca:	440a      	add	r2, r1
 8008bcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bd0:	f043 030e 	orr.w	r3, r3, #14
 8008bd4:	6053      	str	r3, [r2, #4]
          break;
 8008bd6:	e02c      	b.n	8008c32 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	69fa      	ldr	r2, [r7, #28]
 8008be8:	0151      	lsls	r1, r2, #5
 8008bea:	6a3a      	ldr	r2, [r7, #32]
 8008bec:	440a      	add	r2, r1
 8008bee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008bf6:	6053      	str	r3, [r2, #4]
          break;
 8008bf8:	e01b      	b.n	8008c32 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	015a      	lsls	r2, r3, #5
 8008bfe:	6a3b      	ldr	r3, [r7, #32]
 8008c00:	4413      	add	r3, r2
 8008c02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	69fa      	ldr	r2, [r7, #28]
 8008c0a:	0151      	lsls	r1, r2, #5
 8008c0c:	6a3a      	ldr	r2, [r7, #32]
 8008c0e:	440a      	add	r2, r1
 8008c10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c18:	6053      	str	r3, [r2, #4]
          break;
 8008c1a:	e00a      	b.n	8008c32 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	6a3b      	ldr	r3, [r7, #32]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c28:	461a      	mov	r2, r3
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	6053      	str	r3, [r2, #4]
 8008c2e:	e000      	b.n	8008c32 <USB_HC_StartXfer+0x3ea>
          break;
 8008c30:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	015a      	lsls	r2, r3, #5
 8008c36:	6a3b      	ldr	r3, [r7, #32]
 8008c38:	4413      	add	r3, r2
 8008c3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008c48:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	78db      	ldrb	r3, [r3, #3]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d004      	beq.n	8008c5c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c58:	613b      	str	r3, [r7, #16]
 8008c5a:	e003      	b.n	8008c64 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008c62:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c6a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	6a3b      	ldr	r3, [r7, #32]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c78:	461a      	mov	r2, r3
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008c7e:	79fb      	ldrb	r3, [r7, #7]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d003      	beq.n	8008c8c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008c84:	2300      	movs	r3, #0
 8008c86:	e055      	b.n	8008d34 <USB_HC_StartXfer+0x4ec>
 8008c88:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	78db      	ldrb	r3, [r3, #3]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d14e      	bne.n	8008d32 <USB_HC_StartXfer+0x4ea>
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	6a1b      	ldr	r3, [r3, #32]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d04a      	beq.n	8008d32 <USB_HC_StartXfer+0x4ea>
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	79db      	ldrb	r3, [r3, #7]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d146      	bne.n	8008d32 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	7c9b      	ldrb	r3, [r3, #18]
 8008ca8:	2b03      	cmp	r3, #3
 8008caa:	d831      	bhi.n	8008d10 <USB_HC_StartXfer+0x4c8>
 8008cac:	a201      	add	r2, pc, #4	@ (adr r2, 8008cb4 <USB_HC_StartXfer+0x46c>)
 8008cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb2:	bf00      	nop
 8008cb4:	08008cc5 	.word	0x08008cc5
 8008cb8:	08008ce9 	.word	0x08008ce9
 8008cbc:	08008cc5 	.word	0x08008cc5
 8008cc0:	08008ce9 	.word	0x08008ce9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	6a1b      	ldr	r3, [r3, #32]
 8008cc8:	3303      	adds	r3, #3
 8008cca:	089b      	lsrs	r3, r3, #2
 8008ccc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008cce:	8afa      	ldrh	r2, [r7, #22]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d91c      	bls.n	8008d14 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	699b      	ldr	r3, [r3, #24]
 8008cde:	f043 0220 	orr.w	r2, r3, #32
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	619a      	str	r2, [r3, #24]
        }
        break;
 8008ce6:	e015      	b.n	8008d14 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	6a1b      	ldr	r3, [r3, #32]
 8008cec:	3303      	adds	r3, #3
 8008cee:	089b      	lsrs	r3, r3, #2
 8008cf0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008cf2:	8afa      	ldrh	r2, [r7, #22]
 8008cf4:	6a3b      	ldr	r3, [r7, #32]
 8008cf6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d90a      	bls.n	8008d18 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	699b      	ldr	r3, [r3, #24]
 8008d06:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	619a      	str	r2, [r3, #24]
        }
        break;
 8008d0e:	e003      	b.n	8008d18 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008d10:	bf00      	nop
 8008d12:	e002      	b.n	8008d1a <USB_HC_StartXfer+0x4d2>
        break;
 8008d14:	bf00      	nop
 8008d16:	e000      	b.n	8008d1a <USB_HC_StartXfer+0x4d2>
        break;
 8008d18:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	6999      	ldr	r1, [r3, #24]
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	785a      	ldrb	r2, [r3, #1]
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	6a1b      	ldr	r3, [r3, #32]
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	2000      	movs	r0, #0
 8008d2a:	9000      	str	r0, [sp, #0]
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f7ff f9c9 	bl	80080c4 <USB_WritePacket>
  }

  return HAL_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3728      	adds	r7, #40	@ 0x28
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d4e:	695b      	ldr	r3, [r3, #20]
 8008d50:	b29b      	uxth	r3, r3
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3714      	adds	r7, #20
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b089      	sub	sp, #36	@ 0x24
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	460b      	mov	r3, r1
 8008d68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008d6e:	78fb      	ldrb	r3, [r7, #3]
 8008d70:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	015a      	lsls	r2, r3, #5
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	0c9b      	lsrs	r3, r3, #18
 8008d86:	f003 0303 	and.w	r3, r3, #3
 8008d8a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	015a      	lsls	r2, r3, #5
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	0fdb      	lsrs	r3, r3, #31
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	015a      	lsls	r2, r3, #5
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	4413      	add	r3, r2
 8008daa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	0fdb      	lsrs	r3, r3, #31
 8008db2:	f003 0301 	and.w	r3, r3, #1
 8008db6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f003 0320 	and.w	r3, r3, #32
 8008dc0:	2b20      	cmp	r3, #32
 8008dc2:	d10d      	bne.n	8008de0 <USB_HC_Halt+0x82>
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d10a      	bne.n	8008de0 <USB_HC_Halt+0x82>
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d005      	beq.n	8008ddc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d002      	beq.n	8008ddc <USB_HC_Halt+0x7e>
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2b03      	cmp	r3, #3
 8008dda:	d101      	bne.n	8008de0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	e0d8      	b.n	8008f92 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <USB_HC_Halt+0x8e>
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d173      	bne.n	8008ed4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	015a      	lsls	r2, r3, #5
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	4413      	add	r3, r2
 8008df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	69ba      	ldr	r2, [r7, #24]
 8008dfc:	0151      	lsls	r1, r2, #5
 8008dfe:	69fa      	ldr	r2, [r7, #28]
 8008e00:	440a      	add	r2, r1
 8008e02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e0a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	f003 0320 	and.w	r3, r3, #32
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d14a      	bne.n	8008eae <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d133      	bne.n	8008e8c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	015a      	lsls	r2, r3, #5
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	69ba      	ldr	r2, [r7, #24]
 8008e34:	0151      	lsls	r1, r2, #5
 8008e36:	69fa      	ldr	r2, [r7, #28]
 8008e38:	440a      	add	r2, r1
 8008e3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e42:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69ba      	ldr	r2, [r7, #24]
 8008e54:	0151      	lsls	r1, r2, #5
 8008e56:	69fa      	ldr	r2, [r7, #28]
 8008e58:	440a      	add	r2, r1
 8008e5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e62:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	3301      	adds	r3, #1
 8008e68:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e70:	d82e      	bhi.n	8008ed0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e88:	d0ec      	beq.n	8008e64 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e8a:	e081      	b.n	8008f90 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	015a      	lsls	r2, r3, #5
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	4413      	add	r3, r2
 8008e94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	69ba      	ldr	r2, [r7, #24]
 8008e9c:	0151      	lsls	r1, r2, #5
 8008e9e:	69fa      	ldr	r2, [r7, #28]
 8008ea0:	440a      	add	r2, r1
 8008ea2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ea6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008eaa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008eac:	e070      	b.n	8008f90 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	015a      	lsls	r2, r3, #5
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	69ba      	ldr	r2, [r7, #24]
 8008ebe:	0151      	lsls	r1, r2, #5
 8008ec0:	69fa      	ldr	r2, [r7, #28]
 8008ec2:	440a      	add	r2, r1
 8008ec4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ec8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ecc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ece:	e05f      	b.n	8008f90 <USB_HC_Halt+0x232>
            break;
 8008ed0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ed2:	e05d      	b.n	8008f90 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	69ba      	ldr	r2, [r7, #24]
 8008ee4:	0151      	lsls	r1, r2, #5
 8008ee6:	69fa      	ldr	r2, [r7, #28]
 8008ee8:	440a      	add	r2, r1
 8008eea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008eee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ef2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d133      	bne.n	8008f6c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	015a      	lsls	r2, r3, #5
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	69ba      	ldr	r2, [r7, #24]
 8008f14:	0151      	lsls	r1, r2, #5
 8008f16:	69fa      	ldr	r2, [r7, #28]
 8008f18:	440a      	add	r2, r1
 8008f1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f22:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	015a      	lsls	r2, r3, #5
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	69ba      	ldr	r2, [r7, #24]
 8008f34:	0151      	lsls	r1, r2, #5
 8008f36:	69fa      	ldr	r2, [r7, #28]
 8008f38:	440a      	add	r2, r1
 8008f3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f42:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	3301      	adds	r3, #1
 8008f48:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f50:	d81d      	bhi.n	8008f8e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	015a      	lsls	r2, r3, #5
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	4413      	add	r3, r2
 8008f5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f68:	d0ec      	beq.n	8008f44 <USB_HC_Halt+0x1e6>
 8008f6a:	e011      	b.n	8008f90 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	015a      	lsls	r2, r3, #5
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	69ba      	ldr	r2, [r7, #24]
 8008f7c:	0151      	lsls	r1, r2, #5
 8008f7e:	69fa      	ldr	r2, [r7, #28]
 8008f80:	440a      	add	r2, r1
 8008f82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f8a:	6013      	str	r3, [r2, #0]
 8008f8c:	e000      	b.n	8008f90 <USB_HC_Halt+0x232>
          break;
 8008f8e:	bf00      	nop
    }
  }

  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3724      	adds	r7, #36	@ 0x24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
	...

08008fa0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b087      	sub	sp, #28
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008fb0:	78fb      	ldrb	r3, [r7, #3]
 8008fb2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	04da      	lsls	r2, r3, #19
 8008fbc:	4b15      	ldr	r3, [pc, #84]	@ (8009014 <USB_DoPing+0x74>)
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	0151      	lsls	r1, r2, #5
 8008fc4:	697a      	ldr	r2, [r7, #20]
 8008fc6:	440a      	add	r2, r1
 8008fc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008fcc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008fd0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	015a      	lsls	r2, r3, #5
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	4413      	add	r3, r2
 8008fda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008fe8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ff0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	015a      	lsls	r2, r3, #5
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ffe:	461a      	mov	r2, r3
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	371c      	adds	r7, #28
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	1ff80000 	.word	0x1ff80000

08009018 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b088      	sub	sp, #32
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009020:	2300      	movs	r3, #0
 8009022:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009028:	2300      	movs	r3, #0
 800902a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f7fe ff8c 	bl	8007f4a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009032:	2110      	movs	r1, #16
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7fe ffe5 	bl	8008004 <USB_FlushTxFifo>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d001      	beq.n	8009044 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7ff f80f 	bl	8008068 <USB_FlushRxFifo>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d001      	beq.n	8009054 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009054:	2300      	movs	r3, #0
 8009056:	61bb      	str	r3, [r7, #24]
 8009058:	e01f      	b.n	800909a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	015a      	lsls	r2, r3, #5
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	4413      	add	r3, r2
 8009062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009070:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009078:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009080:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	015a      	lsls	r2, r3, #5
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	4413      	add	r3, r2
 800908a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800908e:	461a      	mov	r2, r3
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	3301      	adds	r3, #1
 8009098:	61bb      	str	r3, [r7, #24]
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	2b0f      	cmp	r3, #15
 800909e:	d9dc      	bls.n	800905a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80090a0:	2300      	movs	r3, #0
 80090a2:	61bb      	str	r3, [r7, #24]
 80090a4:	e034      	b.n	8009110 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	015a      	lsls	r2, r3, #5
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	4413      	add	r3, r2
 80090ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80090bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80090c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80090cc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090da:	461a      	mov	r2, r3
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	3301      	adds	r3, #1
 80090e4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80090ec:	d80c      	bhi.n	8009108 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	015a      	lsls	r2, r3, #5
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	4413      	add	r3, r2
 80090f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009100:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009104:	d0ec      	beq.n	80090e0 <USB_StopHost+0xc8>
 8009106:	e000      	b.n	800910a <USB_StopHost+0xf2>
        break;
 8009108:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	3301      	adds	r3, #1
 800910e:	61bb      	str	r3, [r7, #24]
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	2b0f      	cmp	r3, #15
 8009114:	d9c7      	bls.n	80090a6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800911c:	461a      	mov	r2, r3
 800911e:	f04f 33ff 	mov.w	r3, #4294967295
 8009122:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f04f 32ff 	mov.w	r2, #4294967295
 800912a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f7fe fefb 	bl	8007f28 <USB_EnableGlobalInt>

  return ret;
 8009132:	7ffb      	ldrb	r3, [r7, #31]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3720      	adds	r7, #32
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800913c:	b590      	push	{r4, r7, lr}
 800913e:	b089      	sub	sp, #36	@ 0x24
 8009140:	af04      	add	r7, sp, #16
 8009142:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009144:	2301      	movs	r3, #1
 8009146:	2202      	movs	r2, #2
 8009148:	2102      	movs	r1, #2
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fc85 	bl	8009a5a <USBH_FindInterface>
 8009150:	4603      	mov	r3, r0
 8009152:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009154:	7bfb      	ldrb	r3, [r7, #15]
 8009156:	2bff      	cmp	r3, #255	@ 0xff
 8009158:	d002      	beq.n	8009160 <USBH_CDC_InterfaceInit+0x24>
 800915a:	7bfb      	ldrb	r3, [r7, #15]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d901      	bls.n	8009164 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009160:	2302      	movs	r3, #2
 8009162:	e13d      	b.n	80093e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009164:	7bfb      	ldrb	r3, [r7, #15]
 8009166:	4619      	mov	r1, r3
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 fc5a 	bl	8009a22 <USBH_SelectInterface>
 800916e:	4603      	mov	r3, r0
 8009170:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009172:	7bbb      	ldrb	r3, [r7, #14]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d001      	beq.n	800917c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009178:	2302      	movs	r3, #2
 800917a:	e131      	b.n	80093e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009182:	2050      	movs	r0, #80	@ 0x50
 8009184:	f002 fb64 	bl	800b850 <malloc>
 8009188:	4603      	mov	r3, r0
 800918a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009192:	69db      	ldr	r3, [r3, #28]
 8009194:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d101      	bne.n	80091a0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800919c:	2302      	movs	r3, #2
 800919e:	e11f      	b.n	80093e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80091a0:	2250      	movs	r2, #80	@ 0x50
 80091a2:	2100      	movs	r1, #0
 80091a4:	68b8      	ldr	r0, [r7, #8]
 80091a6:	f003 f980 	bl	800c4aa <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	211a      	movs	r1, #26
 80091b0:	fb01 f303 	mul.w	r3, r1, r3
 80091b4:	4413      	add	r3, r2
 80091b6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	b25b      	sxtb	r3, r3
 80091be:	2b00      	cmp	r3, #0
 80091c0:	da15      	bge.n	80091ee <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80091c2:	7bfb      	ldrb	r3, [r7, #15]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	211a      	movs	r1, #26
 80091c8:	fb01 f303 	mul.w	r3, r1, r3
 80091cc:	4413      	add	r3, r2
 80091ce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80091d2:	781a      	ldrb	r2, [r3, #0]
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	211a      	movs	r1, #26
 80091de:	fb01 f303 	mul.w	r3, r1, r3
 80091e2:	4413      	add	r3, r2
 80091e4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80091e8:	881a      	ldrh	r2, [r3, #0]
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	785b      	ldrb	r3, [r3, #1]
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f001 ffbe 	bl	800b176 <USBH_AllocPipe>
 80091fa:	4603      	mov	r3, r0
 80091fc:	461a      	mov	r2, r3
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	7819      	ldrb	r1, [r3, #0]
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	7858      	ldrb	r0, [r3, #1]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	8952      	ldrh	r2, [r2, #10]
 800921a:	9202      	str	r2, [sp, #8]
 800921c:	2203      	movs	r2, #3
 800921e:	9201      	str	r2, [sp, #4]
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	4623      	mov	r3, r4
 8009224:	4602      	mov	r2, r0
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f001 ff76 	bl	800b118 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	2200      	movs	r2, #0
 8009232:	4619      	mov	r1, r3
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f002 fa85 	bl	800b744 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800923a:	2300      	movs	r3, #0
 800923c:	2200      	movs	r2, #0
 800923e:	210a      	movs	r1, #10
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fc0a 	bl	8009a5a <USBH_FindInterface>
 8009246:	4603      	mov	r3, r0
 8009248:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800924a:	7bfb      	ldrb	r3, [r7, #15]
 800924c:	2bff      	cmp	r3, #255	@ 0xff
 800924e:	d002      	beq.n	8009256 <USBH_CDC_InterfaceInit+0x11a>
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d901      	bls.n	800925a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009256:	2302      	movs	r3, #2
 8009258:	e0c2      	b.n	80093e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800925a:	7bfb      	ldrb	r3, [r7, #15]
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	211a      	movs	r1, #26
 8009260:	fb01 f303 	mul.w	r3, r1, r3
 8009264:	4413      	add	r3, r2
 8009266:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	b25b      	sxtb	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	da16      	bge.n	80092a0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009272:	7bfb      	ldrb	r3, [r7, #15]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	211a      	movs	r1, #26
 8009278:	fb01 f303 	mul.w	r3, r1, r3
 800927c:	4413      	add	r3, r2
 800927e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009282:	781a      	ldrb	r2, [r3, #0]
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009288:	7bfb      	ldrb	r3, [r7, #15]
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	211a      	movs	r1, #26
 800928e:	fb01 f303 	mul.w	r3, r1, r3
 8009292:	4413      	add	r3, r2
 8009294:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009298:	881a      	ldrh	r2, [r3, #0]
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	835a      	strh	r2, [r3, #26]
 800929e:	e015      	b.n	80092cc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80092a0:	7bfb      	ldrb	r3, [r7, #15]
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	211a      	movs	r1, #26
 80092a6:	fb01 f303 	mul.w	r3, r1, r3
 80092aa:	4413      	add	r3, r2
 80092ac:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80092b0:	781a      	ldrb	r2, [r3, #0]
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	211a      	movs	r1, #26
 80092bc:	fb01 f303 	mul.w	r3, r1, r3
 80092c0:	4413      	add	r3, r2
 80092c2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80092c6:	881a      	ldrh	r2, [r3, #0]
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	211a      	movs	r1, #26
 80092d2:	fb01 f303 	mul.w	r3, r1, r3
 80092d6:	4413      	add	r3, r2
 80092d8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	b25b      	sxtb	r3, r3
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	da16      	bge.n	8009312 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	211a      	movs	r1, #26
 80092ea:	fb01 f303 	mul.w	r3, r1, r3
 80092ee:	4413      	add	r3, r2
 80092f0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80092f4:	781a      	ldrb	r2, [r3, #0]
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	211a      	movs	r1, #26
 8009300:	fb01 f303 	mul.w	r3, r1, r3
 8009304:	4413      	add	r3, r2
 8009306:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800930a:	881a      	ldrh	r2, [r3, #0]
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	835a      	strh	r2, [r3, #26]
 8009310:	e015      	b.n	800933e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009312:	7bfb      	ldrb	r3, [r7, #15]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	211a      	movs	r1, #26
 8009318:	fb01 f303 	mul.w	r3, r1, r3
 800931c:	4413      	add	r3, r2
 800931e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009322:	781a      	ldrb	r2, [r3, #0]
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009328:	7bfb      	ldrb	r3, [r7, #15]
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	211a      	movs	r1, #26
 800932e:	fb01 f303 	mul.w	r3, r1, r3
 8009332:	4413      	add	r3, r2
 8009334:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009338:	881a      	ldrh	r2, [r3, #0]
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	7b9b      	ldrb	r3, [r3, #14]
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f001 ff16 	bl	800b176 <USBH_AllocPipe>
 800934a:	4603      	mov	r3, r0
 800934c:	461a      	mov	r2, r3
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	7bdb      	ldrb	r3, [r3, #15]
 8009356:	4619      	mov	r1, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f001 ff0c 	bl	800b176 <USBH_AllocPipe>
 800935e:	4603      	mov	r3, r0
 8009360:	461a      	mov	r2, r3
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	7b59      	ldrb	r1, [r3, #13]
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	7b98      	ldrb	r0, [r3, #14]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	8b12      	ldrh	r2, [r2, #24]
 800937e:	9202      	str	r2, [sp, #8]
 8009380:	2202      	movs	r2, #2
 8009382:	9201      	str	r2, [sp, #4]
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	4623      	mov	r3, r4
 8009388:	4602      	mov	r2, r0
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f001 fec4 	bl	800b118 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	7b19      	ldrb	r1, [r3, #12]
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	7bd8      	ldrb	r0, [r3, #15]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	8b52      	ldrh	r2, [r2, #26]
 80093a8:	9202      	str	r2, [sp, #8]
 80093aa:	2202      	movs	r2, #2
 80093ac:	9201      	str	r2, [sp, #4]
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	4623      	mov	r3, r4
 80093b2:	4602      	mov	r2, r0
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f001 feaf 	bl	800b118 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	7b5b      	ldrb	r3, [r3, #13]
 80093c6:	2200      	movs	r2, #0
 80093c8:	4619      	mov	r1, r3
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f002 f9ba 	bl	800b744 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	7b1b      	ldrb	r3, [r3, #12]
 80093d4:	2200      	movs	r2, #0
 80093d6:	4619      	mov	r1, r3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f002 f9b3 	bl	800b744 <USBH_LL_SetToggle>

  return USBH_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd90      	pop	{r4, r7, pc}

080093e8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093f6:	69db      	ldr	r3, [r3, #28]
 80093f8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00e      	beq.n	8009420 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f001 fea4 	bl	800b156 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	4619      	mov	r1, r3
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f001 fecf 	bl	800b1b8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	7b1b      	ldrb	r3, [r3, #12]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00e      	beq.n	8009446 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	7b1b      	ldrb	r3, [r3, #12]
 800942c:	4619      	mov	r1, r3
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f001 fe91 	bl	800b156 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	7b1b      	ldrb	r3, [r3, #12]
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f001 febc 	bl	800b1b8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	7b5b      	ldrb	r3, [r3, #13]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00e      	beq.n	800946c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	7b5b      	ldrb	r3, [r3, #13]
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f001 fe7e 	bl	800b156 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	7b5b      	ldrb	r3, [r3, #13]
 800945e:	4619      	mov	r1, r3
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f001 fea9 	bl	800b1b8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009472:	69db      	ldr	r3, [r3, #28]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00b      	beq.n	8009490 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800947e:	69db      	ldr	r3, [r3, #28]
 8009480:	4618      	mov	r0, r3
 8009482:	f002 f9ed 	bl	800b860 <free>
    phost->pActiveClass->pData = 0U;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800948c:	2200      	movs	r2, #0
 800948e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b084      	sub	sp, #16
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80094a8:	69db      	ldr	r3, [r3, #28]
 80094aa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	3340      	adds	r3, #64	@ 0x40
 80094b0:	4619      	mov	r1, r3
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f8b1 	bl	800961a <GetLineCoding>
 80094b8:	4603      	mov	r3, r0
 80094ba:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80094bc:	7afb      	ldrb	r3, [r7, #11]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d105      	bne.n	80094ce <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80094c8:	2102      	movs	r1, #2
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80094ce:	7afb      	ldrb	r3, [r7, #11]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80094e0:	2301      	movs	r3, #1
 80094e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80094ee:	69db      	ldr	r3, [r3, #28]
 80094f0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80094f8:	2b04      	cmp	r3, #4
 80094fa:	d877      	bhi.n	80095ec <USBH_CDC_Process+0x114>
 80094fc:	a201      	add	r2, pc, #4	@ (adr r2, 8009504 <USBH_CDC_Process+0x2c>)
 80094fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009502:	bf00      	nop
 8009504:	08009519 	.word	0x08009519
 8009508:	0800951f 	.word	0x0800951f
 800950c:	0800954f 	.word	0x0800954f
 8009510:	080095c3 	.word	0x080095c3
 8009514:	080095d1 	.word	0x080095d1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	73fb      	strb	r3, [r7, #15]
      break;
 800951c:	e06d      	b.n	80095fa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009522:	4619      	mov	r1, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f897 	bl	8009658 <SetLineCoding>
 800952a:	4603      	mov	r3, r0
 800952c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800952e:	7bbb      	ldrb	r3, [r7, #14]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d104      	bne.n	800953e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	2202      	movs	r2, #2
 8009538:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800953c:	e058      	b.n	80095f0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800953e:	7bbb      	ldrb	r3, [r7, #14]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d055      	beq.n	80095f0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	2204      	movs	r2, #4
 8009548:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800954c:	e050      	b.n	80095f0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	3340      	adds	r3, #64	@ 0x40
 8009552:	4619      	mov	r1, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f860 	bl	800961a <GetLineCoding>
 800955a:	4603      	mov	r3, r0
 800955c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800955e:	7bbb      	ldrb	r3, [r7, #14]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d126      	bne.n	80095b2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009576:	791b      	ldrb	r3, [r3, #4]
 8009578:	429a      	cmp	r2, r3
 800957a:	d13b      	bne.n	80095f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009586:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009588:	429a      	cmp	r2, r3
 800958a:	d133      	bne.n	80095f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009596:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009598:	429a      	cmp	r2, r3
 800959a:	d12b      	bne.n	80095f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095a4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d124      	bne.n	80095f4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f958 	bl	8009860 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80095b0:	e020      	b.n	80095f4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80095b2:	7bbb      	ldrb	r3, [r7, #14]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d01d      	beq.n	80095f4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	2204      	movs	r2, #4
 80095bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80095c0:	e018      	b.n	80095f4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f867 	bl	8009696 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f8da 	bl	8009782 <CDC_ProcessReception>
      break;
 80095ce:	e014      	b.n	80095fa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80095d0:	2100      	movs	r1, #0
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f001 f81a 	bl	800a60c <USBH_ClrFeature>
 80095d8:	4603      	mov	r3, r0
 80095da:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80095dc:	7bbb      	ldrb	r3, [r7, #14]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d10a      	bne.n	80095f8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80095ea:	e005      	b.n	80095f8 <USBH_CDC_Process+0x120>

    default:
      break;
 80095ec:	bf00      	nop
 80095ee:	e004      	b.n	80095fa <USBH_CDC_Process+0x122>
      break;
 80095f0:	bf00      	nop
 80095f2:	e002      	b.n	80095fa <USBH_CDC_Process+0x122>
      break;
 80095f4:	bf00      	nop
 80095f6:	e000      	b.n	80095fa <USBH_CDC_Process+0x122>
      break;
 80095f8:	bf00      	nop

  }

  return status;
 80095fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	370c      	adds	r7, #12
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr

0800961a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b082      	sub	sp, #8
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	22a1      	movs	r2, #161	@ 0xa1
 8009628:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2221      	movs	r2, #33	@ 0x21
 800962e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2207      	movs	r2, #7
 8009640:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	2207      	movs	r2, #7
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f001 fb14 	bl	800ac76 <USBH_CtlReq>
 800964e:	4603      	mov	r3, r0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2221      	movs	r2, #33	@ 0x21
 8009666:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2220      	movs	r2, #32
 800966c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2207      	movs	r2, #7
 800967e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2207      	movs	r2, #7
 8009684:	4619      	mov	r1, r3
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f001 faf5 	bl	800ac76 <USBH_CtlReq>
 800968c:	4603      	mov	r3, r0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b086      	sub	sp, #24
 800969a:	af02      	add	r7, sp, #8
 800969c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80096a4:	69db      	ldr	r3, [r3, #28]
 80096a6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80096a8:	2300      	movs	r3, #0
 80096aa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d002      	beq.n	80096bc <CDC_ProcessTransmission+0x26>
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	d023      	beq.n	8009702 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80096ba:	e05e      	b.n	800977a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	8b12      	ldrh	r2, [r2, #24]
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d90b      	bls.n	80096e0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	69d9      	ldr	r1, [r3, #28]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	8b1a      	ldrh	r2, [r3, #24]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	7b5b      	ldrb	r3, [r3, #13]
 80096d4:	2001      	movs	r0, #1
 80096d6:	9000      	str	r0, [sp, #0]
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f001 fcda 	bl	800b092 <USBH_BulkSendData>
 80096de:	e00b      	b.n	80096f8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	7b5b      	ldrb	r3, [r3, #13]
 80096ee:	2001      	movs	r0, #1
 80096f0:	9000      	str	r0, [sp, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f001 fccd 	bl	800b092 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2202      	movs	r2, #2
 80096fc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009700:	e03b      	b.n	800977a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	7b5b      	ldrb	r3, [r3, #13]
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f001 fff1 	bl	800b6f0 <USBH_LL_GetURBState>
 800970e:	4603      	mov	r3, r0
 8009710:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009712:	7afb      	ldrb	r3, [r7, #11]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d128      	bne.n	800976a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	8b12      	ldrh	r2, [r2, #24]
 8009720:	4293      	cmp	r3, r2
 8009722:	d90e      	bls.n	8009742 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	8b12      	ldrh	r2, [r2, #24]
 800972c:	1a9a      	subs	r2, r3, r2
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	69db      	ldr	r3, [r3, #28]
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	8b12      	ldrh	r2, [r2, #24]
 800973a:	441a      	add	r2, r3
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	61da      	str	r2, [r3, #28]
 8009740:	e002      	b.n	8009748 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800974c:	2b00      	cmp	r3, #0
 800974e:	d004      	beq.n	800975a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009758:	e00e      	b.n	8009778 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 f868 	bl	8009838 <USBH_CDC_TransmitCallback>
      break;
 8009768:	e006      	b.n	8009778 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800976a:	7afb      	ldrb	r3, [r7, #11]
 800976c:	2b02      	cmp	r3, #2
 800976e:	d103      	bne.n	8009778 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009778:	bf00      	nop
  }
}
 800977a:	bf00      	nop
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b086      	sub	sp, #24
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009790:	69db      	ldr	r3, [r3, #28]
 8009792:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009794:	2300      	movs	r3, #0
 8009796:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800979e:	2b03      	cmp	r3, #3
 80097a0:	d002      	beq.n	80097a8 <CDC_ProcessReception+0x26>
 80097a2:	2b04      	cmp	r3, #4
 80097a4:	d00e      	beq.n	80097c4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80097a6:	e043      	b.n	8009830 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	6a19      	ldr	r1, [r3, #32]
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	8b5a      	ldrh	r2, [r3, #26]
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	7b1b      	ldrb	r3, [r3, #12]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f001 fc91 	bl	800b0dc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	2204      	movs	r2, #4
 80097be:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80097c2:	e035      	b.n	8009830 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	7b1b      	ldrb	r3, [r3, #12]
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f001 ff90 	bl	800b6f0 <USBH_LL_GetURBState>
 80097d0:	4603      	mov	r3, r0
 80097d2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80097d4:	7cfb      	ldrb	r3, [r7, #19]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d129      	bne.n	800982e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	7b1b      	ldrb	r3, [r3, #12]
 80097de:	4619      	mov	r1, r3
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f001 fef3 	bl	800b5cc <USBH_LL_GetLastXferSize>
 80097e6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d016      	beq.n	8009820 <CDC_ProcessReception+0x9e>
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	8b5b      	ldrh	r3, [r3, #26]
 80097f6:	461a      	mov	r2, r3
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d110      	bne.n	8009820 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	1ad2      	subs	r2, r2, r3
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	6a1a      	ldr	r2, [r3, #32]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	441a      	add	r2, r3
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	2203      	movs	r2, #3
 800981a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800981e:	e006      	b.n	800982e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 f80f 	bl	800984c <USBH_CDC_ReceiveCallback>
      break;
 800982e:	bf00      	nop
  }
}
 8009830:	bf00      	nop
 8009832:	3718      	adds	r7, #24
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009868:	bf00      	nop
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	4613      	mov	r3, r2
 8009880:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d101      	bne.n	800988c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009888:	2302      	movs	r3, #2
 800988a:	e029      	b.n	80098e0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	79fa      	ldrb	r2, [r7, #7]
 8009890:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2200      	movs	r2, #0
 8009898:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2200      	movs	r2, #0
 80098a0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f000 f81f 	bl	80098e8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d003      	beq.n	80098d8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f001 fdc3 	bl	800b464 <USBH_LL_Init>

  return USBH_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80098f0:	2300      	movs	r3, #0
 80098f2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80098f4:	2300      	movs	r3, #0
 80098f6:	60fb      	str	r3, [r7, #12]
 80098f8:	e009      	b.n	800990e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	33e0      	adds	r3, #224	@ 0xe0
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	2200      	movs	r2, #0
 8009906:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	3301      	adds	r3, #1
 800990c:	60fb      	str	r3, [r7, #12]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2b0f      	cmp	r3, #15
 8009912:	d9f2      	bls.n	80098fa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009914:	2300      	movs	r3, #0
 8009916:	60fb      	str	r3, [r7, #12]
 8009918:	e009      	b.n	800992e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	4413      	add	r3, r2
 8009920:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009924:	2200      	movs	r2, #0
 8009926:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	3301      	adds	r3, #1
 800992c:	60fb      	str	r3, [r7, #12]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009934:	d3f1      	bcc.n	800991a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2240      	movs	r2, #64	@ 0x40
 800995a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2201      	movs	r2, #1
 800996e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	331c      	adds	r3, #28
 8009986:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800998a:	2100      	movs	r1, #0
 800998c:	4618      	mov	r0, r3
 800998e:	f002 fd8c 	bl	800c4aa <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009998:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800999c:	2100      	movs	r1, #0
 800999e:	4618      	mov	r0, r3
 80099a0:	f002 fd83 	bl	800c4aa <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80099aa:	2212      	movs	r2, #18
 80099ac:	2100      	movs	r1, #0
 80099ae:	4618      	mov	r0, r3
 80099b0:	f002 fd7b 	bl	800c4aa <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80099ba:	223e      	movs	r2, #62	@ 0x3e
 80099bc:	2100      	movs	r1, #0
 80099be:	4618      	mov	r0, r3
 80099c0:	f002 fd73 	bl	800c4aa <memset>

  return USBH_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b085      	sub	sp, #20
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d016      	beq.n	8009a10 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10e      	bne.n	8009a0a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80099f2:	1c59      	adds	r1, r3, #1
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	33de      	adds	r3, #222	@ 0xde
 80099fe:	6839      	ldr	r1, [r7, #0]
 8009a00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009a04:	2300      	movs	r3, #0
 8009a06:	73fb      	strb	r3, [r7, #15]
 8009a08:	e004      	b.n	8009a14 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	73fb      	strb	r3, [r7, #15]
 8009a0e:	e001      	b.n	8009a14 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009a10:	2302      	movs	r3, #2
 8009a12:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009a22:	b480      	push	{r7}
 8009a24:	b085      	sub	sp, #20
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009a38:	78fa      	ldrb	r2, [r7, #3]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d204      	bcs.n	8009a48 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	78fa      	ldrb	r2, [r7, #3]
 8009a42:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009a46:	e001      	b.n	8009a4c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009a48:	2302      	movs	r3, #2
 8009a4a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr

08009a5a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b087      	sub	sp, #28
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
 8009a62:	4608      	mov	r0, r1
 8009a64:	4611      	mov	r1, r2
 8009a66:	461a      	mov	r2, r3
 8009a68:	4603      	mov	r3, r0
 8009a6a:	70fb      	strb	r3, [r7, #3]
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	70bb      	strb	r3, [r7, #2]
 8009a70:	4613      	mov	r3, r2
 8009a72:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009a74:	2300      	movs	r3, #0
 8009a76:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009a82:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009a84:	e025      	b.n	8009ad2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009a86:	7dfb      	ldrb	r3, [r7, #23]
 8009a88:	221a      	movs	r2, #26
 8009a8a:	fb02 f303 	mul.w	r3, r2, r3
 8009a8e:	3308      	adds	r3, #8
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	4413      	add	r3, r2
 8009a94:	3302      	adds	r3, #2
 8009a96:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	795b      	ldrb	r3, [r3, #5]
 8009a9c:	78fa      	ldrb	r2, [r7, #3]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d002      	beq.n	8009aa8 <USBH_FindInterface+0x4e>
 8009aa2:	78fb      	ldrb	r3, [r7, #3]
 8009aa4:	2bff      	cmp	r3, #255	@ 0xff
 8009aa6:	d111      	bne.n	8009acc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009aac:	78ba      	ldrb	r2, [r7, #2]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d002      	beq.n	8009ab8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009ab2:	78bb      	ldrb	r3, [r7, #2]
 8009ab4:	2bff      	cmp	r3, #255	@ 0xff
 8009ab6:	d109      	bne.n	8009acc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009abc:	787a      	ldrb	r2, [r7, #1]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d002      	beq.n	8009ac8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009ac2:	787b      	ldrb	r3, [r7, #1]
 8009ac4:	2bff      	cmp	r3, #255	@ 0xff
 8009ac6:	d101      	bne.n	8009acc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009ac8:	7dfb      	ldrb	r3, [r7, #23]
 8009aca:	e006      	b.n	8009ada <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009acc:	7dfb      	ldrb	r3, [r7, #23]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009ad2:	7dfb      	ldrb	r3, [r7, #23]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d9d6      	bls.n	8009a86 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009ad8:	23ff      	movs	r3, #255	@ 0xff
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	371c      	adds	r7, #28
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b082      	sub	sp, #8
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f001 fcf4 	bl	800b4dc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009af4:	2101      	movs	r1, #1
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f001 fe0d 	bl	800b716 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
	...

08009b08 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b088      	sub	sp, #32
 8009b0c:	af04      	add	r7, sp, #16
 8009b0e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009b10:	2302      	movs	r3, #2
 8009b12:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009b14:	2300      	movs	r3, #0
 8009b16:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d102      	bne.n	8009b2a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2203      	movs	r2, #3
 8009b28:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b0b      	cmp	r3, #11
 8009b32:	f200 81bb 	bhi.w	8009eac <USBH_Process+0x3a4>
 8009b36:	a201      	add	r2, pc, #4	@ (adr r2, 8009b3c <USBH_Process+0x34>)
 8009b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3c:	08009b6d 	.word	0x08009b6d
 8009b40:	08009b9f 	.word	0x08009b9f
 8009b44:	08009c07 	.word	0x08009c07
 8009b48:	08009e47 	.word	0x08009e47
 8009b4c:	08009ead 	.word	0x08009ead
 8009b50:	08009ca7 	.word	0x08009ca7
 8009b54:	08009ded 	.word	0x08009ded
 8009b58:	08009cdd 	.word	0x08009cdd
 8009b5c:	08009cfd 	.word	0x08009cfd
 8009b60:	08009d1b 	.word	0x08009d1b
 8009b64:	08009d5f 	.word	0x08009d5f
 8009b68:	08009e2f 	.word	0x08009e2f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f000 819b 	beq.w	8009eb0 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009b80:	20c8      	movs	r0, #200	@ 0xc8
 8009b82:	f001 fe12 	bl	800b7aa <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f001 fd05 	bl	800b596 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009b9c:	e188      	b.n	8009eb0 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d107      	bne.n	8009bb8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009bb6:	e18a      	b.n	8009ece <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009bbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009bc2:	d914      	bls.n	8009bee <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009bca:	3301      	adds	r3, #1
 8009bcc:	b2da      	uxtb	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009bda:	2b03      	cmp	r3, #3
 8009bdc:	d903      	bls.n	8009be6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	220d      	movs	r2, #13
 8009be2:	701a      	strb	r2, [r3, #0]
      break;
 8009be4:	e173      	b.n	8009ece <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	701a      	strb	r2, [r3, #0]
      break;
 8009bec:	e16f      	b.n	8009ece <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009bf4:	f103 020a 	add.w	r2, r3, #10
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009bfe:	200a      	movs	r0, #10
 8009c00:	f001 fdd3 	bl	800b7aa <USBH_Delay>
      break;
 8009c04:	e163      	b.n	8009ece <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d005      	beq.n	8009c1c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c16:	2104      	movs	r1, #4
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009c1c:	2064      	movs	r0, #100	@ 0x64
 8009c1e:	f001 fdc4 	bl	800b7aa <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f001 fc90 	bl	800b548 <USBH_LL_GetSpeed>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2205      	movs	r2, #5
 8009c36:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009c38:	2100      	movs	r1, #0
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f001 fa9b 	bl	800b176 <USBH_AllocPipe>
 8009c40:	4603      	mov	r3, r0
 8009c42:	461a      	mov	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009c48:	2180      	movs	r1, #128	@ 0x80
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f001 fa93 	bl	800b176 <USBH_AllocPipe>
 8009c50:	4603      	mov	r3, r0
 8009c52:	461a      	mov	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	7919      	ldrb	r1, [r3, #4]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009c6c:	9202      	str	r2, [sp, #8]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	9201      	str	r2, [sp, #4]
 8009c72:	9300      	str	r3, [sp, #0]
 8009c74:	4603      	mov	r3, r0
 8009c76:	2280      	movs	r2, #128	@ 0x80
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f001 fa4d 	bl	800b118 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	7959      	ldrb	r1, [r3, #5]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009c92:	9202      	str	r2, [sp, #8]
 8009c94:	2200      	movs	r2, #0
 8009c96:	9201      	str	r2, [sp, #4]
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f001 fa3a 	bl	800b118 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009ca4:	e113      	b.n	8009ece <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 f916 	bl	8009ed8 <USBH_HandleEnum>
 8009cac:	4603      	mov	r3, r0
 8009cae:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009cb0:	7bbb      	ldrb	r3, [r7, #14]
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f040 80fd 	bne.w	8009eb4 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d103      	bne.n	8009cd4 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2208      	movs	r2, #8
 8009cd0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009cd2:	e0ef      	b.n	8009eb4 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2207      	movs	r2, #7
 8009cd8:	701a      	strb	r2, [r3, #0]
      break;
 8009cda:	e0eb      	b.n	8009eb4 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f000 80e8 	beq.w	8009eb8 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009cee:	2101      	movs	r1, #1
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2208      	movs	r2, #8
 8009cf8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009cfa:	e0dd      	b.n	8009eb8 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fc3a 	bl	800a57e <USBH_SetCfg>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f040 80d5 	bne.w	8009ebc <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2209      	movs	r2, #9
 8009d16:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009d18:	e0d0      	b.n	8009ebc <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009d20:	f003 0320 	and.w	r3, r3, #32
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d016      	beq.n	8009d56 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009d28:	2101      	movs	r1, #1
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fc4a 	bl	800a5c4 <USBH_SetFeature>
 8009d30:	4603      	mov	r3, r0
 8009d32:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009d34:	7bbb      	ldrb	r3, [r7, #14]
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d103      	bne.n	8009d44 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	220a      	movs	r2, #10
 8009d40:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009d42:	e0bd      	b.n	8009ec0 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b03      	cmp	r3, #3
 8009d4a:	f040 80b9 	bne.w	8009ec0 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	220a      	movs	r2, #10
 8009d52:	701a      	strb	r2, [r3, #0]
      break;
 8009d54:	e0b4      	b.n	8009ec0 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	220a      	movs	r2, #10
 8009d5a:	701a      	strb	r2, [r3, #0]
      break;
 8009d5c:	e0b0      	b.n	8009ec0 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f000 80ad 	beq.w	8009ec4 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009d72:	2300      	movs	r3, #0
 8009d74:	73fb      	strb	r3, [r7, #15]
 8009d76:	e016      	b.n	8009da6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009d78:	7bfa      	ldrb	r2, [r7, #15]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	32de      	adds	r2, #222	@ 0xde
 8009d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d82:	791a      	ldrb	r2, [r3, #4]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d108      	bne.n	8009da0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009d8e:	7bfa      	ldrb	r2, [r7, #15]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	32de      	adds	r2, #222	@ 0xde
 8009d94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009d9e:	e005      	b.n	8009dac <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
 8009da2:	3301      	adds	r3, #1
 8009da4:	73fb      	strb	r3, [r7, #15]
 8009da6:	7bfb      	ldrb	r3, [r7, #15]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d0e5      	beq.n	8009d78 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d016      	beq.n	8009de4 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	4798      	blx	r3
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d109      	bne.n	8009ddc <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2206      	movs	r2, #6
 8009dcc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009dd4:	2103      	movs	r1, #3
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009dda:	e073      	b.n	8009ec4 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	220d      	movs	r2, #13
 8009de0:	701a      	strb	r2, [r3, #0]
      break;
 8009de2:	e06f      	b.n	8009ec4 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	220d      	movs	r2, #13
 8009de8:	701a      	strb	r2, [r3, #0]
      break;
 8009dea:	e06b      	b.n	8009ec4 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d017      	beq.n	8009e26 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	4798      	blx	r3
 8009e02:	4603      	mov	r3, r0
 8009e04:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009e06:	7bbb      	ldrb	r3, [r7, #14]
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d103      	bne.n	8009e16 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	220b      	movs	r2, #11
 8009e12:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009e14:	e058      	b.n	8009ec8 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009e16:	7bbb      	ldrb	r3, [r7, #14]
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d154      	bne.n	8009ec8 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	220d      	movs	r2, #13
 8009e22:	701a      	strb	r2, [r3, #0]
      break;
 8009e24:	e050      	b.n	8009ec8 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	220d      	movs	r2, #13
 8009e2a:	701a      	strb	r2, [r3, #0]
      break;
 8009e2c:	e04c      	b.n	8009ec8 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d049      	beq.n	8009ecc <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e3e:	695b      	ldr	r3, [r3, #20]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	4798      	blx	r3
      }
      break;
 8009e44:	e042      	b.n	8009ecc <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7ff fd4a 	bl	80098e8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d009      	beq.n	8009e72 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d005      	beq.n	8009e88 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009e82:	2105      	movs	r1, #5
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d107      	bne.n	8009ea4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7ff fe22 	bl	8009ae6 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009ea2:	e014      	b.n	8009ece <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f001 fb19 	bl	800b4dc <USBH_LL_Start>
      break;
 8009eaa:	e010      	b.n	8009ece <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009eac:	bf00      	nop
 8009eae:	e00e      	b.n	8009ece <USBH_Process+0x3c6>
      break;
 8009eb0:	bf00      	nop
 8009eb2:	e00c      	b.n	8009ece <USBH_Process+0x3c6>
      break;
 8009eb4:	bf00      	nop
 8009eb6:	e00a      	b.n	8009ece <USBH_Process+0x3c6>
    break;
 8009eb8:	bf00      	nop
 8009eba:	e008      	b.n	8009ece <USBH_Process+0x3c6>
      break;
 8009ebc:	bf00      	nop
 8009ebe:	e006      	b.n	8009ece <USBH_Process+0x3c6>
      break;
 8009ec0:	bf00      	nop
 8009ec2:	e004      	b.n	8009ece <USBH_Process+0x3c6>
      break;
 8009ec4:	bf00      	nop
 8009ec6:	e002      	b.n	8009ece <USBH_Process+0x3c6>
      break;
 8009ec8:	bf00      	nop
 8009eca:	e000      	b.n	8009ece <USBH_Process+0x3c6>
      break;
 8009ecc:	bf00      	nop
  }
  return USBH_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3710      	adds	r7, #16
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b088      	sub	sp, #32
 8009edc:	af04      	add	r7, sp, #16
 8009ede:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	785b      	ldrb	r3, [r3, #1]
 8009eec:	2b07      	cmp	r3, #7
 8009eee:	f200 81bd 	bhi.w	800a26c <USBH_HandleEnum+0x394>
 8009ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef8 <USBH_HandleEnum+0x20>)
 8009ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef8:	08009f19 	.word	0x08009f19
 8009efc:	08009fd3 	.word	0x08009fd3
 8009f00:	0800a03d 	.word	0x0800a03d
 8009f04:	0800a0c7 	.word	0x0800a0c7
 8009f08:	0800a131 	.word	0x0800a131
 8009f0c:	0800a1a1 	.word	0x0800a1a1
 8009f10:	0800a1e7 	.word	0x0800a1e7
 8009f14:	0800a22d 	.word	0x0800a22d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009f18:	2108      	movs	r1, #8
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fa4c 	bl	800a3b8 <USBH_Get_DevDesc>
 8009f20:	4603      	mov	r3, r0
 8009f22:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f24:	7bbb      	ldrb	r3, [r7, #14]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d12e      	bne.n	8009f88 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	7919      	ldrb	r1, [r3, #4]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009f4e:	9202      	str	r2, [sp, #8]
 8009f50:	2200      	movs	r2, #0
 8009f52:	9201      	str	r2, [sp, #4]
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	4603      	mov	r3, r0
 8009f58:	2280      	movs	r2, #128	@ 0x80
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f001 f8dc 	bl	800b118 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	7959      	ldrb	r1, [r3, #5]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f74:	9202      	str	r2, [sp, #8]
 8009f76:	2200      	movs	r2, #0
 8009f78:	9201      	str	r2, [sp, #4]
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2200      	movs	r2, #0
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f001 f8c9 	bl	800b118 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009f86:	e173      	b.n	800a270 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f88:	7bbb      	ldrb	r3, [r7, #14]
 8009f8a:	2b03      	cmp	r3, #3
 8009f8c:	f040 8170 	bne.w	800a270 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f96:	3301      	adds	r3, #1
 8009f98:	b2da      	uxtb	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009fa6:	2b03      	cmp	r3, #3
 8009fa8:	d903      	bls.n	8009fb2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	220d      	movs	r2, #13
 8009fae:	701a      	strb	r2, [r3, #0]
      break;
 8009fb0:	e15e      	b.n	800a270 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	795b      	ldrb	r3, [r3, #5]
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f001 f8fd 	bl	800b1b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	791b      	ldrb	r3, [r3, #4]
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f001 f8f7 	bl	800b1b8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	701a      	strb	r2, [r3, #0]
      break;
 8009fd0:	e14e      	b.n	800a270 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009fd2:	2112      	movs	r1, #18
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f9ef 	bl	800a3b8 <USBH_Get_DevDesc>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009fde:	7bbb      	ldrb	r3, [r7, #14]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d103      	bne.n	8009fec <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009fea:	e143      	b.n	800a274 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009fec:	7bbb      	ldrb	r3, [r7, #14]
 8009fee:	2b03      	cmp	r3, #3
 8009ff0:	f040 8140 	bne.w	800a274 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a00a:	2b03      	cmp	r3, #3
 800a00c:	d903      	bls.n	800a016 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	220d      	movs	r2, #13
 800a012:	701a      	strb	r2, [r3, #0]
      break;
 800a014:	e12e      	b.n	800a274 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	795b      	ldrb	r3, [r3, #5]
 800a01a:	4619      	mov	r1, r3
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f001 f8cb 	bl	800b1b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	791b      	ldrb	r3, [r3, #4]
 800a026:	4619      	mov	r1, r3
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f001 f8c5 	bl	800b1b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	701a      	strb	r2, [r3, #0]
      break;
 800a03a:	e11b      	b.n	800a274 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a03c:	2101      	movs	r1, #1
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 fa79 	bl	800a536 <USBH_SetAddress>
 800a044:	4603      	mov	r3, r0
 800a046:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a048:	7bbb      	ldrb	r3, [r7, #14]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d130      	bne.n	800a0b0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a04e:	2002      	movs	r0, #2
 800a050:	f001 fbab 	bl	800b7aa <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2203      	movs	r2, #3
 800a060:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	7919      	ldrb	r1, [r3, #4]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a076:	9202      	str	r2, [sp, #8]
 800a078:	2200      	movs	r2, #0
 800a07a:	9201      	str	r2, [sp, #4]
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	4603      	mov	r3, r0
 800a080:	2280      	movs	r2, #128	@ 0x80
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f001 f848 	bl	800b118 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	7959      	ldrb	r1, [r3, #5]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a09c:	9202      	str	r2, [sp, #8]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	9201      	str	r2, [sp, #4]
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f001 f835 	bl	800b118 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a0ae:	e0e3      	b.n	800a278 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0b0:	7bbb      	ldrb	r3, [r7, #14]
 800a0b2:	2b03      	cmp	r3, #3
 800a0b4:	f040 80e0 	bne.w	800a278 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	220d      	movs	r2, #13
 800a0bc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	705a      	strb	r2, [r3, #1]
      break;
 800a0c4:	e0d8      	b.n	800a278 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a0c6:	2109      	movs	r1, #9
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 f9a1 	bl	800a410 <USBH_Get_CfgDesc>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a0d2:	7bbb      	ldrb	r3, [r7, #14]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d103      	bne.n	800a0e0 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2204      	movs	r2, #4
 800a0dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a0de:	e0cd      	b.n	800a27c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0e0:	7bbb      	ldrb	r3, [r7, #14]
 800a0e2:	2b03      	cmp	r3, #3
 800a0e4:	f040 80ca 	bne.w	800a27c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a0fe:	2b03      	cmp	r3, #3
 800a100:	d903      	bls.n	800a10a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	220d      	movs	r2, #13
 800a106:	701a      	strb	r2, [r3, #0]
      break;
 800a108:	e0b8      	b.n	800a27c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	795b      	ldrb	r3, [r3, #5]
 800a10e:	4619      	mov	r1, r3
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f001 f851 	bl	800b1b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	791b      	ldrb	r3, [r3, #4]
 800a11a:	4619      	mov	r1, r3
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f001 f84b 	bl	800b1b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	701a      	strb	r2, [r3, #0]
      break;
 800a12e:	e0a5      	b.n	800a27c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a136:	4619      	mov	r1, r3
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 f969 	bl	800a410 <USBH_Get_CfgDesc>
 800a13e:	4603      	mov	r3, r0
 800a140:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a142:	7bbb      	ldrb	r3, [r7, #14]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d103      	bne.n	800a150 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2205      	movs	r2, #5
 800a14c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a14e:	e097      	b.n	800a280 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a150:	7bbb      	ldrb	r3, [r7, #14]
 800a152:	2b03      	cmp	r3, #3
 800a154:	f040 8094 	bne.w	800a280 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a15e:	3301      	adds	r3, #1
 800a160:	b2da      	uxtb	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a16e:	2b03      	cmp	r3, #3
 800a170:	d903      	bls.n	800a17a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	220d      	movs	r2, #13
 800a176:	701a      	strb	r2, [r3, #0]
      break;
 800a178:	e082      	b.n	800a280 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	795b      	ldrb	r3, [r3, #5]
 800a17e:	4619      	mov	r1, r3
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f001 f819 	bl	800b1b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	791b      	ldrb	r3, [r3, #4]
 800a18a:	4619      	mov	r1, r3
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f001 f813 	bl	800b1b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	701a      	strb	r2, [r3, #0]
      break;
 800a19e:	e06f      	b.n	800a280 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d019      	beq.n	800a1de <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a1b6:	23ff      	movs	r3, #255	@ 0xff
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f953 	bl	800a464 <USBH_Get_StringDesc>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a1c2:	7bbb      	ldrb	r3, [r7, #14]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d103      	bne.n	800a1d0 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2206      	movs	r2, #6
 800a1cc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a1ce:	e059      	b.n	800a284 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1d0:	7bbb      	ldrb	r3, [r7, #14]
 800a1d2:	2b03      	cmp	r3, #3
 800a1d4:	d156      	bne.n	800a284 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2206      	movs	r2, #6
 800a1da:	705a      	strb	r2, [r3, #1]
      break;
 800a1dc:	e052      	b.n	800a284 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2206      	movs	r2, #6
 800a1e2:	705a      	strb	r2, [r3, #1]
      break;
 800a1e4:	e04e      	b.n	800a284 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d019      	beq.n	800a224 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a1fc:	23ff      	movs	r3, #255	@ 0xff
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 f930 	bl	800a464 <USBH_Get_StringDesc>
 800a204:	4603      	mov	r3, r0
 800a206:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a208:	7bbb      	ldrb	r3, [r7, #14]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d103      	bne.n	800a216 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2207      	movs	r2, #7
 800a212:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a214:	e038      	b.n	800a288 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a216:	7bbb      	ldrb	r3, [r7, #14]
 800a218:	2b03      	cmp	r3, #3
 800a21a:	d135      	bne.n	800a288 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2207      	movs	r2, #7
 800a220:	705a      	strb	r2, [r3, #1]
      break;
 800a222:	e031      	b.n	800a288 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2207      	movs	r2, #7
 800a228:	705a      	strb	r2, [r3, #1]
      break;
 800a22a:	e02d      	b.n	800a288 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a232:	2b00      	cmp	r3, #0
 800a234:	d017      	beq.n	800a266 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a242:	23ff      	movs	r3, #255	@ 0xff
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 f90d 	bl	800a464 <USBH_Get_StringDesc>
 800a24a:	4603      	mov	r3, r0
 800a24c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a24e:	7bbb      	ldrb	r3, [r7, #14]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d102      	bne.n	800a25a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a254:	2300      	movs	r3, #0
 800a256:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a258:	e018      	b.n	800a28c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a25a:	7bbb      	ldrb	r3, [r7, #14]
 800a25c:	2b03      	cmp	r3, #3
 800a25e:	d115      	bne.n	800a28c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a260:	2300      	movs	r3, #0
 800a262:	73fb      	strb	r3, [r7, #15]
      break;
 800a264:	e012      	b.n	800a28c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a266:	2300      	movs	r3, #0
 800a268:	73fb      	strb	r3, [r7, #15]
      break;
 800a26a:	e00f      	b.n	800a28c <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a26c:	bf00      	nop
 800a26e:	e00e      	b.n	800a28e <USBH_HandleEnum+0x3b6>
      break;
 800a270:	bf00      	nop
 800a272:	e00c      	b.n	800a28e <USBH_HandleEnum+0x3b6>
      break;
 800a274:	bf00      	nop
 800a276:	e00a      	b.n	800a28e <USBH_HandleEnum+0x3b6>
      break;
 800a278:	bf00      	nop
 800a27a:	e008      	b.n	800a28e <USBH_HandleEnum+0x3b6>
      break;
 800a27c:	bf00      	nop
 800a27e:	e006      	b.n	800a28e <USBH_HandleEnum+0x3b6>
      break;
 800a280:	bf00      	nop
 800a282:	e004      	b.n	800a28e <USBH_HandleEnum+0x3b6>
      break;
 800a284:	bf00      	nop
 800a286:	e002      	b.n	800a28e <USBH_HandleEnum+0x3b6>
      break;
 800a288:	bf00      	nop
 800a28a:	e000      	b.n	800a28e <USBH_HandleEnum+0x3b6>
      break;
 800a28c:	bf00      	nop
  }
  return Status;
 800a28e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a290:	4618      	mov	r0, r3
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	683a      	ldr	r2, [r7, #0]
 800a2a6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a2aa:	bf00      	nop
 800a2ac:	370c      	adds	r7, #12
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b082      	sub	sp, #8
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a2c4:	1c5a      	adds	r2, r3, #1
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 f804 	bl	800a2da <USBH_HandleSof>
}
 800a2d2:	bf00      	nop
 800a2d4:	3708      	adds	r7, #8
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}

0800a2da <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b082      	sub	sp, #8
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	2b0b      	cmp	r3, #11
 800a2ea:	d10a      	bne.n	800a302 <USBH_HandleSof+0x28>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d005      	beq.n	800a302 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a2fc:	699b      	ldr	r3, [r3, #24]
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	4798      	blx	r3
  }
}
 800a302:	bf00      	nop
 800a304:	3708      	adds	r7, #8
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a30a:	b480      	push	{r7}
 800a30c:	b083      	sub	sp, #12
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2201      	movs	r2, #1
 800a316:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a31a:	bf00      	nop
}
 800a31c:	370c      	adds	r7, #12
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a326:	b480      	push	{r7}
 800a328:	b083      	sub	sp, #12
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800a336:	bf00      	nop
}
 800a338:	370c      	adds	r7, #12
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr

0800a342 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a342:	b480      	push	{r7}
 800a344:	b083      	sub	sp, #12
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2201      	movs	r2, #1
 800a37c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f001 f8be 	bl	800b512 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	791b      	ldrb	r3, [r3, #4]
 800a39a:	4619      	mov	r1, r3
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 ff0b 	bl	800b1b8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	795b      	ldrb	r3, [r3, #5]
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 ff05 	bl	800b1b8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b086      	sub	sp, #24
 800a3bc:	af02      	add	r7, sp, #8
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a3c4:	887b      	ldrh	r3, [r7, #2]
 800a3c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3ca:	d901      	bls.n	800a3d0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a3cc:	2303      	movs	r3, #3
 800a3ce:	e01b      	b.n	800a408 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a3d6:	887b      	ldrh	r3, [r7, #2]
 800a3d8:	9300      	str	r3, [sp, #0]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f872 	bl	800a4cc <USBH_GetDescriptor>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a3ec:	7bfb      	ldrb	r3, [r7, #15]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d109      	bne.n	800a406 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a3f8:	887a      	ldrh	r2, [r7, #2]
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 f929 	bl	800a654 <USBH_ParseDevDesc>
 800a402:	4603      	mov	r3, r0
 800a404:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a406:	7bfb      	ldrb	r3, [r7, #15]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3710      	adds	r7, #16
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af02      	add	r7, sp, #8
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	460b      	mov	r3, r1
 800a41a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	331c      	adds	r3, #28
 800a420:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a422:	887b      	ldrh	r3, [r7, #2]
 800a424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a428:	d901      	bls.n	800a42e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a42a:	2303      	movs	r3, #3
 800a42c:	e016      	b.n	800a45c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a42e:	887b      	ldrh	r3, [r7, #2]
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a438:	2100      	movs	r1, #0
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 f846 	bl	800a4cc <USBH_GetDescriptor>
 800a440:	4603      	mov	r3, r0
 800a442:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a444:	7bfb      	ldrb	r3, [r7, #15]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d107      	bne.n	800a45a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a44a:	887b      	ldrh	r3, [r7, #2]
 800a44c:	461a      	mov	r2, r3
 800a44e:	68b9      	ldr	r1, [r7, #8]
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 f9af 	bl	800a7b4 <USBH_ParseCfgDesc>
 800a456:	4603      	mov	r3, r0
 800a458:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b088      	sub	sp, #32
 800a468:	af02      	add	r7, sp, #8
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	607a      	str	r2, [r7, #4]
 800a46e:	461a      	mov	r2, r3
 800a470:	460b      	mov	r3, r1
 800a472:	72fb      	strb	r3, [r7, #11]
 800a474:	4613      	mov	r3, r2
 800a476:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a478:	893b      	ldrh	r3, [r7, #8]
 800a47a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a47e:	d802      	bhi.n	800a486 <USBH_Get_StringDesc+0x22>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d101      	bne.n	800a48a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a486:	2303      	movs	r3, #3
 800a488:	e01c      	b.n	800a4c4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a48a:	7afb      	ldrb	r3, [r7, #11]
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a492:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a49a:	893b      	ldrh	r3, [r7, #8]
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	460b      	mov	r3, r1
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f000 f812 	bl	800a4cc <USBH_GetDescriptor>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a4ac:	7dfb      	ldrb	r3, [r7, #23]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d107      	bne.n	800a4c2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a4b8:	893a      	ldrh	r2, [r7, #8]
 800a4ba:	6879      	ldr	r1, [r7, #4]
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f000 fb8d 	bl	800abdc <USBH_ParseStringDesc>
  }

  return status;
 800a4c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3718      	adds	r7, #24
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	607b      	str	r3, [r7, #4]
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	72fb      	strb	r3, [r7, #11]
 800a4da:	4613      	mov	r3, r2
 800a4dc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	789b      	ldrb	r3, [r3, #2]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d11c      	bne.n	800a520 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a4e6:	7afb      	ldrb	r3, [r7, #11]
 800a4e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a4ec:	b2da      	uxtb	r2, r3
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2206      	movs	r2, #6
 800a4f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	893a      	ldrh	r2, [r7, #8]
 800a4fc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a4fe:	893b      	ldrh	r3, [r7, #8]
 800a500:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a504:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a508:	d104      	bne.n	800a514 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f240 4209 	movw	r2, #1033	@ 0x409
 800a510:	829a      	strh	r2, [r3, #20]
 800a512:	e002      	b.n	800a51a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2200      	movs	r2, #0
 800a518:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	8b3a      	ldrh	r2, [r7, #24]
 800a51e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a520:	8b3b      	ldrh	r3, [r7, #24]
 800a522:	461a      	mov	r2, r3
 800a524:	6879      	ldr	r1, [r7, #4]
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 fba5 	bl	800ac76 <USBH_CtlReq>
 800a52c:	4603      	mov	r3, r0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b082      	sub	sp, #8
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	460b      	mov	r3, r1
 800a540:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	789b      	ldrb	r3, [r3, #2]
 800a546:	2b01      	cmp	r3, #1
 800a548:	d10f      	bne.n	800a56a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2205      	movs	r2, #5
 800a554:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a556:	78fb      	ldrb	r3, [r7, #3]
 800a558:	b29a      	uxth	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a56a:	2200      	movs	r2, #0
 800a56c:	2100      	movs	r1, #0
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 fb81 	bl	800ac76 <USBH_CtlReq>
 800a574:	4603      	mov	r3, r0
}
 800a576:	4618      	mov	r0, r3
 800a578:	3708      	adds	r7, #8
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b082      	sub	sp, #8
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
 800a586:	460b      	mov	r3, r1
 800a588:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	789b      	ldrb	r3, [r3, #2]
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d10e      	bne.n	800a5b0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2209      	movs	r2, #9
 800a59c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	887a      	ldrh	r2, [r7, #2]
 800a5a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 fb5e 	bl	800ac76 <USBH_CtlReq>
 800a5ba:	4603      	mov	r3, r0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3708      	adds	r7, #8
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	789b      	ldrb	r3, [r3, #2]
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d10f      	bne.n	800a5f8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2203      	movs	r2, #3
 800a5e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a5e4:	78fb      	ldrb	r3, [r7, #3]
 800a5e6:	b29a      	uxth	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 fb3a 	bl	800ac76 <USBH_CtlReq>
 800a602:	4603      	mov	r3, r0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3708      	adds	r7, #8
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	460b      	mov	r3, r1
 800a616:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	789b      	ldrb	r3, [r3, #2]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d10f      	bne.n	800a640 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2202      	movs	r2, #2
 800a624:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2201      	movs	r2, #1
 800a62a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a632:	78fb      	ldrb	r3, [r7, #3]
 800a634:	b29a      	uxth	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a640:	2200      	movs	r2, #0
 800a642:	2100      	movs	r1, #0
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 fb16 	bl	800ac76 <USBH_CtlReq>
 800a64a:	4603      	mov	r3, r0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a654:	b480      	push	{r7}
 800a656:	b087      	sub	sp, #28
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	4613      	mov	r3, r2
 800a660:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a668:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a66a:	2300      	movs	r3, #0
 800a66c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d101      	bne.n	800a678 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a674:	2302      	movs	r3, #2
 800a676:	e094      	b.n	800a7a2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	781a      	ldrb	r2, [r3, #0]
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	785a      	ldrb	r2, [r3, #1]
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	3302      	adds	r3, #2
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	461a      	mov	r2, r3
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	3303      	adds	r3, #3
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	021b      	lsls	r3, r3, #8
 800a698:	b29b      	uxth	r3, r3
 800a69a:	4313      	orrs	r3, r2
 800a69c:	b29a      	uxth	r2, r3
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	791a      	ldrb	r2, [r3, #4]
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	795a      	ldrb	r2, [r3, #5]
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	799a      	ldrb	r2, [r3, #6]
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	79da      	ldrb	r2, [r3, #7]
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d004      	beq.n	800a6d6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d11b      	bne.n	800a70e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	79db      	ldrb	r3, [r3, #7]
 800a6da:	2b20      	cmp	r3, #32
 800a6dc:	dc0f      	bgt.n	800a6fe <USBH_ParseDevDesc+0xaa>
 800a6de:	2b08      	cmp	r3, #8
 800a6e0:	db0f      	blt.n	800a702 <USBH_ParseDevDesc+0xae>
 800a6e2:	3b08      	subs	r3, #8
 800a6e4:	4a32      	ldr	r2, [pc, #200]	@ (800a7b0 <USBH_ParseDevDesc+0x15c>)
 800a6e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ea:	f003 0301 	and.w	r3, r3, #1
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	bf14      	ite	ne
 800a6f2:	2301      	movne	r3, #1
 800a6f4:	2300      	moveq	r3, #0
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d106      	bne.n	800a70a <USBH_ParseDevDesc+0xb6>
 800a6fc:	e001      	b.n	800a702 <USBH_ParseDevDesc+0xae>
 800a6fe:	2b40      	cmp	r3, #64	@ 0x40
 800a700:	d003      	beq.n	800a70a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	2208      	movs	r2, #8
 800a706:	71da      	strb	r2, [r3, #7]
        break;
 800a708:	e000      	b.n	800a70c <USBH_ParseDevDesc+0xb8>
        break;
 800a70a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a70c:	e00e      	b.n	800a72c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a714:	2b02      	cmp	r3, #2
 800a716:	d107      	bne.n	800a728 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	79db      	ldrb	r3, [r3, #7]
 800a71c:	2b08      	cmp	r3, #8
 800a71e:	d005      	beq.n	800a72c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	2208      	movs	r2, #8
 800a724:	71da      	strb	r2, [r3, #7]
 800a726:	e001      	b.n	800a72c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a728:	2303      	movs	r3, #3
 800a72a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a72c:	88fb      	ldrh	r3, [r7, #6]
 800a72e:	2b08      	cmp	r3, #8
 800a730:	d936      	bls.n	800a7a0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	3308      	adds	r3, #8
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	461a      	mov	r2, r3
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	3309      	adds	r3, #9
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	021b      	lsls	r3, r3, #8
 800a742:	b29b      	uxth	r3, r3
 800a744:	4313      	orrs	r3, r2
 800a746:	b29a      	uxth	r2, r3
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	330a      	adds	r3, #10
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	461a      	mov	r2, r3
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	330b      	adds	r3, #11
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	021b      	lsls	r3, r3, #8
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	4313      	orrs	r3, r2
 800a760:	b29a      	uxth	r2, r3
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	330c      	adds	r3, #12
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	461a      	mov	r2, r3
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	330d      	adds	r3, #13
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	021b      	lsls	r3, r3, #8
 800a776:	b29b      	uxth	r3, r3
 800a778:	4313      	orrs	r3, r2
 800a77a:	b29a      	uxth	r2, r3
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	7b9a      	ldrb	r2, [r3, #14]
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	7bda      	ldrb	r2, [r3, #15]
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	7c1a      	ldrb	r2, [r3, #16]
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	7c5a      	ldrb	r2, [r3, #17]
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a7a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	371c      	adds	r7, #28
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	01000101 	.word	0x01000101

0800a7b4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b08c      	sub	sp, #48	@ 0x30
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	4613      	mov	r3, r2
 800a7c0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a7c8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d101      	bne.n	800a7e6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a7e2:	2302      	movs	r3, #2
 800a7e4:	e0da      	b.n	800a99c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	2b09      	cmp	r3, #9
 800a7f0:	d002      	beq.n	800a7f8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f4:	2209      	movs	r2, #9
 800a7f6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	781a      	ldrb	r2, [r3, #0]
 800a7fc:	6a3b      	ldr	r3, [r7, #32]
 800a7fe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	785a      	ldrb	r2, [r3, #1]
 800a804:	6a3b      	ldr	r3, [r7, #32]
 800a806:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	3302      	adds	r3, #2
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	461a      	mov	r2, r3
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	3303      	adds	r3, #3
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	021b      	lsls	r3, r3, #8
 800a818:	b29b      	uxth	r3, r3
 800a81a:	4313      	orrs	r3, r2
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a822:	bf28      	it	cs
 800a824:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a828:	b29a      	uxth	r2, r3
 800a82a:	6a3b      	ldr	r3, [r7, #32]
 800a82c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	791a      	ldrb	r2, [r3, #4]
 800a832:	6a3b      	ldr	r3, [r7, #32]
 800a834:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	795a      	ldrb	r2, [r3, #5]
 800a83a:	6a3b      	ldr	r3, [r7, #32]
 800a83c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	799a      	ldrb	r2, [r3, #6]
 800a842:	6a3b      	ldr	r3, [r7, #32]
 800a844:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	79da      	ldrb	r2, [r3, #7]
 800a84a:	6a3b      	ldr	r3, [r7, #32]
 800a84c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	7a1a      	ldrb	r2, [r3, #8]
 800a852:	6a3b      	ldr	r3, [r7, #32]
 800a854:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a856:	88fb      	ldrh	r3, [r7, #6]
 800a858:	2b09      	cmp	r3, #9
 800a85a:	f240 809d 	bls.w	800a998 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a85e:	2309      	movs	r3, #9
 800a860:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a862:	2300      	movs	r3, #0
 800a864:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a866:	e081      	b.n	800a96c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a868:	f107 0316 	add.w	r3, r7, #22
 800a86c:	4619      	mov	r1, r3
 800a86e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a870:	f000 f9e7 	bl	800ac42 <USBH_GetNextDesc>
 800a874:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a878:	785b      	ldrb	r3, [r3, #1]
 800a87a:	2b04      	cmp	r3, #4
 800a87c:	d176      	bne.n	800a96c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	2b09      	cmp	r3, #9
 800a884:	d002      	beq.n	800a88c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a888:	2209      	movs	r2, #9
 800a88a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a88c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a890:	221a      	movs	r2, #26
 800a892:	fb02 f303 	mul.w	r3, r2, r3
 800a896:	3308      	adds	r3, #8
 800a898:	6a3a      	ldr	r2, [r7, #32]
 800a89a:	4413      	add	r3, r2
 800a89c:	3302      	adds	r3, #2
 800a89e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a8a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8a2:	69f8      	ldr	r0, [r7, #28]
 800a8a4:	f000 f87e 	bl	800a9a4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a8b2:	e043      	b.n	800a93c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a8b4:	f107 0316 	add.w	r3, r7, #22
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8bc:	f000 f9c1 	bl	800ac42 <USBH_GetNextDesc>
 800a8c0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c4:	785b      	ldrb	r3, [r3, #1]
 800a8c6:	2b05      	cmp	r3, #5
 800a8c8:	d138      	bne.n	800a93c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	795b      	ldrb	r3, [r3, #5]
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d113      	bne.n	800a8fa <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	d003      	beq.n	800a8e2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a8da:	69fb      	ldr	r3, [r7, #28]
 800a8dc:	799b      	ldrb	r3, [r3, #6]
 800a8de:	2b03      	cmp	r3, #3
 800a8e0:	d10b      	bne.n	800a8fa <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a8e2:	69fb      	ldr	r3, [r7, #28]
 800a8e4:	79db      	ldrb	r3, [r3, #7]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d10b      	bne.n	800a902 <USBH_ParseCfgDesc+0x14e>
 800a8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	2b09      	cmp	r3, #9
 800a8f0:	d007      	beq.n	800a902 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a8f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f4:	2209      	movs	r2, #9
 800a8f6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a8f8:	e003      	b.n	800a902 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a8fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8fc:	2207      	movs	r2, #7
 800a8fe:	701a      	strb	r2, [r3, #0]
 800a900:	e000      	b.n	800a904 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a902:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a904:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a908:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a90c:	3201      	adds	r2, #1
 800a90e:	00d2      	lsls	r2, r2, #3
 800a910:	211a      	movs	r1, #26
 800a912:	fb01 f303 	mul.w	r3, r1, r3
 800a916:	4413      	add	r3, r2
 800a918:	3308      	adds	r3, #8
 800a91a:	6a3a      	ldr	r2, [r7, #32]
 800a91c:	4413      	add	r3, r2
 800a91e:	3304      	adds	r3, #4
 800a920:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a922:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a924:	69b9      	ldr	r1, [r7, #24]
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	f000 f870 	bl	800aa0c <USBH_ParseEPDesc>
 800a92c:	4603      	mov	r3, r0
 800a92e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a932:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a936:	3301      	adds	r3, #1
 800a938:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	791b      	ldrb	r3, [r3, #4]
 800a940:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a944:	429a      	cmp	r2, r3
 800a946:	d204      	bcs.n	800a952 <USBH_ParseCfgDesc+0x19e>
 800a948:	6a3b      	ldr	r3, [r7, #32]
 800a94a:	885a      	ldrh	r2, [r3, #2]
 800a94c:	8afb      	ldrh	r3, [r7, #22]
 800a94e:	429a      	cmp	r2, r3
 800a950:	d8b0      	bhi.n	800a8b4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	791b      	ldrb	r3, [r3, #4]
 800a956:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d201      	bcs.n	800a962 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a95e:	2303      	movs	r3, #3
 800a960:	e01c      	b.n	800a99c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a962:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a966:	3301      	adds	r3, #1
 800a968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a96c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a970:	2b01      	cmp	r3, #1
 800a972:	d805      	bhi.n	800a980 <USBH_ParseCfgDesc+0x1cc>
 800a974:	6a3b      	ldr	r3, [r7, #32]
 800a976:	885a      	ldrh	r2, [r3, #2]
 800a978:	8afb      	ldrh	r3, [r7, #22]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	f63f af74 	bhi.w	800a868 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a980:	6a3b      	ldr	r3, [r7, #32]
 800a982:	791b      	ldrb	r3, [r3, #4]
 800a984:	2b02      	cmp	r3, #2
 800a986:	bf28      	it	cs
 800a988:	2302      	movcs	r3, #2
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a990:	429a      	cmp	r2, r3
 800a992:	d201      	bcs.n	800a998 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a994:	2303      	movs	r3, #3
 800a996:	e001      	b.n	800a99c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a998:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3730      	adds	r7, #48	@ 0x30
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	781a      	ldrb	r2, [r3, #0]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	785a      	ldrb	r2, [r3, #1]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	789a      	ldrb	r2, [r3, #2]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	78da      	ldrb	r2, [r3, #3]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	3304      	adds	r3, #4
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	2b02      	cmp	r3, #2
 800a9d6:	bf28      	it	cs
 800a9d8:	2302      	movcs	r3, #2
 800a9da:	b2da      	uxtb	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	795a      	ldrb	r2, [r3, #5]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	799a      	ldrb	r2, [r3, #6]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	79da      	ldrb	r2, [r3, #7]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	7a1a      	ldrb	r2, [r3, #8]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	721a      	strb	r2, [r3, #8]
}
 800aa00:	bf00      	nop
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b087      	sub	sp, #28
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	781a      	ldrb	r2, [r3, #0]
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	785a      	ldrb	r2, [r3, #1]
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	789a      	ldrb	r2, [r3, #2]
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	78da      	ldrb	r2, [r3, #3]
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	3304      	adds	r3, #4
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	461a      	mov	r2, r3
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	3305      	adds	r3, #5
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	021b      	lsls	r3, r3, #8
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	b29a      	uxth	r2, r3
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	799a      	ldrb	r2, [r3, #6]
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	889b      	ldrh	r3, [r3, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d009      	beq.n	800aa7a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800aa6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa6e:	d804      	bhi.n	800aa7a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800aa74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa78:	d901      	bls.n	800aa7e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800aa7a:	2303      	movs	r3, #3
 800aa7c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d136      	bne.n	800aaf6 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	78db      	ldrb	r3, [r3, #3]
 800aa8c:	f003 0303 	and.w	r3, r3, #3
 800aa90:	2b02      	cmp	r3, #2
 800aa92:	d108      	bne.n	800aaa6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	889b      	ldrh	r3, [r3, #4]
 800aa98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa9c:	f240 8097 	bls.w	800abce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	75fb      	strb	r3, [r7, #23]
 800aaa4:	e093      	b.n	800abce <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	78db      	ldrb	r3, [r3, #3]
 800aaaa:	f003 0303 	and.w	r3, r3, #3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d107      	bne.n	800aac2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	889b      	ldrh	r3, [r3, #4]
 800aab6:	2b40      	cmp	r3, #64	@ 0x40
 800aab8:	f240 8089 	bls.w	800abce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aabc:	2303      	movs	r3, #3
 800aabe:	75fb      	strb	r3, [r7, #23]
 800aac0:	e085      	b.n	800abce <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	78db      	ldrb	r3, [r3, #3]
 800aac6:	f003 0303 	and.w	r3, r3, #3
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d005      	beq.n	800aada <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	78db      	ldrb	r3, [r3, #3]
 800aad2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800aad6:	2b03      	cmp	r3, #3
 800aad8:	d10a      	bne.n	800aaf0 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	799b      	ldrb	r3, [r3, #6]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d003      	beq.n	800aaea <USBH_ParseEPDesc+0xde>
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	799b      	ldrb	r3, [r3, #6]
 800aae6:	2b10      	cmp	r3, #16
 800aae8:	d970      	bls.n	800abcc <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800aaea:	2303      	movs	r3, #3
 800aaec:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aaee:	e06d      	b.n	800abcc <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	75fb      	strb	r3, [r7, #23]
 800aaf4:	e06b      	b.n	800abce <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d13c      	bne.n	800ab7a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	78db      	ldrb	r3, [r3, #3]
 800ab04:	f003 0303 	and.w	r3, r3, #3
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d005      	beq.n	800ab18 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	78db      	ldrb	r3, [r3, #3]
 800ab10:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d106      	bne.n	800ab26 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	889b      	ldrh	r3, [r3, #4]
 800ab1c:	2b40      	cmp	r3, #64	@ 0x40
 800ab1e:	d956      	bls.n	800abce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ab20:	2303      	movs	r3, #3
 800ab22:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ab24:	e053      	b.n	800abce <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	78db      	ldrb	r3, [r3, #3]
 800ab2a:	f003 0303 	and.w	r3, r3, #3
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d10e      	bne.n	800ab50 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	799b      	ldrb	r3, [r3, #6]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d007      	beq.n	800ab4a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800ab3e:	2b10      	cmp	r3, #16
 800ab40:	d803      	bhi.n	800ab4a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800ab46:	2b40      	cmp	r3, #64	@ 0x40
 800ab48:	d941      	bls.n	800abce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ab4a:	2303      	movs	r3, #3
 800ab4c:	75fb      	strb	r3, [r7, #23]
 800ab4e:	e03e      	b.n	800abce <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	78db      	ldrb	r3, [r3, #3]
 800ab54:	f003 0303 	and.w	r3, r3, #3
 800ab58:	2b03      	cmp	r3, #3
 800ab5a:	d10b      	bne.n	800ab74 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	799b      	ldrb	r3, [r3, #6]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d004      	beq.n	800ab6e <USBH_ParseEPDesc+0x162>
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	889b      	ldrh	r3, [r3, #4]
 800ab68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab6c:	d32f      	bcc.n	800abce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ab6e:	2303      	movs	r3, #3
 800ab70:	75fb      	strb	r3, [r7, #23]
 800ab72:	e02c      	b.n	800abce <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ab74:	2303      	movs	r3, #3
 800ab76:	75fb      	strb	r3, [r7, #23]
 800ab78:	e029      	b.n	800abce <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d120      	bne.n	800abc6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	78db      	ldrb	r3, [r3, #3]
 800ab88:	f003 0303 	and.w	r3, r3, #3
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d106      	bne.n	800ab9e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	889b      	ldrh	r3, [r3, #4]
 800ab94:	2b08      	cmp	r3, #8
 800ab96:	d01a      	beq.n	800abce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ab98:	2303      	movs	r3, #3
 800ab9a:	75fb      	strb	r3, [r7, #23]
 800ab9c:	e017      	b.n	800abce <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	78db      	ldrb	r3, [r3, #3]
 800aba2:	f003 0303 	and.w	r3, r3, #3
 800aba6:	2b03      	cmp	r3, #3
 800aba8:	d10a      	bne.n	800abc0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	799b      	ldrb	r3, [r3, #6]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <USBH_ParseEPDesc+0x1ae>
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	889b      	ldrh	r3, [r3, #4]
 800abb6:	2b08      	cmp	r3, #8
 800abb8:	d909      	bls.n	800abce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800abba:	2303      	movs	r3, #3
 800abbc:	75fb      	strb	r3, [r7, #23]
 800abbe:	e006      	b.n	800abce <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800abc0:	2303      	movs	r3, #3
 800abc2:	75fb      	strb	r3, [r7, #23]
 800abc4:	e003      	b.n	800abce <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800abc6:	2303      	movs	r3, #3
 800abc8:	75fb      	strb	r3, [r7, #23]
 800abca:	e000      	b.n	800abce <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800abcc:	bf00      	nop
  }

  return status;
 800abce:	7dfb      	ldrb	r3, [r7, #23]
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	371c      	adds	r7, #28
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800abdc:	b480      	push	{r7}
 800abde:	b087      	sub	sp, #28
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	4613      	mov	r3, r2
 800abe8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	3301      	adds	r3, #1
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	2b03      	cmp	r3, #3
 800abf2:	d120      	bne.n	800ac36 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	1e9a      	subs	r2, r3, #2
 800abfa:	88fb      	ldrh	r3, [r7, #6]
 800abfc:	4293      	cmp	r3, r2
 800abfe:	bf28      	it	cs
 800ac00:	4613      	movcs	r3, r2
 800ac02:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	3302      	adds	r3, #2
 800ac08:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	82fb      	strh	r3, [r7, #22]
 800ac0e:	e00b      	b.n	800ac28 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ac10:	8afb      	ldrh	r3, [r7, #22]
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	4413      	add	r3, r2
 800ac16:	781a      	ldrb	r2, [r3, #0]
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ac22:	8afb      	ldrh	r3, [r7, #22]
 800ac24:	3302      	adds	r3, #2
 800ac26:	82fb      	strh	r3, [r7, #22]
 800ac28:	8afa      	ldrh	r2, [r7, #22]
 800ac2a:	8abb      	ldrh	r3, [r7, #20]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d3ef      	bcc.n	800ac10 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	2200      	movs	r2, #0
 800ac34:	701a      	strb	r2, [r3, #0]
  }
}
 800ac36:	bf00      	nop
 800ac38:	371c      	adds	r7, #28
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr

0800ac42 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ac42:	b480      	push	{r7}
 800ac44:	b085      	sub	sp, #20
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	881b      	ldrh	r3, [r3, #0]
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	7812      	ldrb	r2, [r2, #0]
 800ac54:	4413      	add	r3, r2
 800ac56:	b29a      	uxth	r2, r3
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	4413      	add	r3, r2
 800ac66:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ac68:	68fb      	ldr	r3, [r7, #12]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3714      	adds	r7, #20
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr

0800ac76 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b086      	sub	sp, #24
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	60f8      	str	r0, [r7, #12]
 800ac7e:	60b9      	str	r1, [r7, #8]
 800ac80:	4613      	mov	r3, r2
 800ac82:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ac84:	2301      	movs	r3, #1
 800ac86:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	789b      	ldrb	r3, [r3, #2]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d002      	beq.n	800ac96 <USBH_CtlReq+0x20>
 800ac90:	2b02      	cmp	r3, #2
 800ac92:	d00f      	beq.n	800acb4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ac94:	e027      	b.n	800ace6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	68ba      	ldr	r2, [r7, #8]
 800ac9a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	88fa      	ldrh	r2, [r7, #6]
 800aca0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2201      	movs	r2, #1
 800aca6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2202      	movs	r2, #2
 800acac:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800acae:	2301      	movs	r3, #1
 800acb0:	75fb      	strb	r3, [r7, #23]
      break;
 800acb2:	e018      	b.n	800ace6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800acb4:	68f8      	ldr	r0, [r7, #12]
 800acb6:	f000 f81b 	bl	800acf0 <USBH_HandleControl>
 800acba:	4603      	mov	r3, r0
 800acbc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800acbe:	7dfb      	ldrb	r3, [r7, #23]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d002      	beq.n	800acca <USBH_CtlReq+0x54>
 800acc4:	7dfb      	ldrb	r3, [r7, #23]
 800acc6:	2b03      	cmp	r3, #3
 800acc8:	d106      	bne.n	800acd8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2201      	movs	r2, #1
 800acce:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2200      	movs	r2, #0
 800acd4:	761a      	strb	r2, [r3, #24]
      break;
 800acd6:	e005      	b.n	800ace4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800acd8:	7dfb      	ldrb	r3, [r7, #23]
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d102      	bne.n	800ace4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2201      	movs	r2, #1
 800ace2:	709a      	strb	r2, [r3, #2]
      break;
 800ace4:	bf00      	nop
  }
  return status;
 800ace6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3718      	adds	r7, #24
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b086      	sub	sp, #24
 800acf4:	af02      	add	r7, sp, #8
 800acf6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800acf8:	2301      	movs	r3, #1
 800acfa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800acfc:	2300      	movs	r3, #0
 800acfe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	7e1b      	ldrb	r3, [r3, #24]
 800ad04:	3b01      	subs	r3, #1
 800ad06:	2b0a      	cmp	r3, #10
 800ad08:	f200 8156 	bhi.w	800afb8 <USBH_HandleControl+0x2c8>
 800ad0c:	a201      	add	r2, pc, #4	@ (adr r2, 800ad14 <USBH_HandleControl+0x24>)
 800ad0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad12:	bf00      	nop
 800ad14:	0800ad41 	.word	0x0800ad41
 800ad18:	0800ad5b 	.word	0x0800ad5b
 800ad1c:	0800adc5 	.word	0x0800adc5
 800ad20:	0800adeb 	.word	0x0800adeb
 800ad24:	0800ae23 	.word	0x0800ae23
 800ad28:	0800ae4d 	.word	0x0800ae4d
 800ad2c:	0800ae9f 	.word	0x0800ae9f
 800ad30:	0800aec1 	.word	0x0800aec1
 800ad34:	0800aefd 	.word	0x0800aefd
 800ad38:	0800af23 	.word	0x0800af23
 800ad3c:	0800af61 	.word	0x0800af61
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f103 0110 	add.w	r1, r3, #16
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	795b      	ldrb	r3, [r3, #5]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 f943 	bl	800afd8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2202      	movs	r2, #2
 800ad56:	761a      	strb	r2, [r3, #24]
      break;
 800ad58:	e139      	b.n	800afce <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	795b      	ldrb	r3, [r3, #5]
 800ad5e:	4619      	mov	r1, r3
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 fcc5 	bl	800b6f0 <USBH_LL_GetURBState>
 800ad66:	4603      	mov	r3, r0
 800ad68:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ad6a:	7bbb      	ldrb	r3, [r7, #14]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d11e      	bne.n	800adae <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	7c1b      	ldrb	r3, [r3, #16]
 800ad74:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ad78:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	8adb      	ldrh	r3, [r3, #22]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00a      	beq.n	800ad98 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ad82:	7b7b      	ldrb	r3, [r7, #13]
 800ad84:	2b80      	cmp	r3, #128	@ 0x80
 800ad86:	d103      	bne.n	800ad90 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2203      	movs	r2, #3
 800ad8c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ad8e:	e115      	b.n	800afbc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2205      	movs	r2, #5
 800ad94:	761a      	strb	r2, [r3, #24]
      break;
 800ad96:	e111      	b.n	800afbc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ad98:	7b7b      	ldrb	r3, [r7, #13]
 800ad9a:	2b80      	cmp	r3, #128	@ 0x80
 800ad9c:	d103      	bne.n	800ada6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2209      	movs	r2, #9
 800ada2:	761a      	strb	r2, [r3, #24]
      break;
 800ada4:	e10a      	b.n	800afbc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2207      	movs	r2, #7
 800adaa:	761a      	strb	r2, [r3, #24]
      break;
 800adac:	e106      	b.n	800afbc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800adae:	7bbb      	ldrb	r3, [r7, #14]
 800adb0:	2b04      	cmp	r3, #4
 800adb2:	d003      	beq.n	800adbc <USBH_HandleControl+0xcc>
 800adb4:	7bbb      	ldrb	r3, [r7, #14]
 800adb6:	2b02      	cmp	r3, #2
 800adb8:	f040 8100 	bne.w	800afbc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	220b      	movs	r2, #11
 800adc0:	761a      	strb	r2, [r3, #24]
      break;
 800adc2:	e0fb      	b.n	800afbc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800adca:	b29a      	uxth	r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6899      	ldr	r1, [r3, #8]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	899a      	ldrh	r2, [r3, #12]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	791b      	ldrb	r3, [r3, #4]
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 f93a 	bl	800b056 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2204      	movs	r2, #4
 800ade6:	761a      	strb	r2, [r3, #24]
      break;
 800ade8:	e0f1      	b.n	800afce <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	791b      	ldrb	r3, [r3, #4]
 800adee:	4619      	mov	r1, r3
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 fc7d 	bl	800b6f0 <USBH_LL_GetURBState>
 800adf6:	4603      	mov	r3, r0
 800adf8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800adfa:	7bbb      	ldrb	r3, [r7, #14]
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d102      	bne.n	800ae06 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2209      	movs	r2, #9
 800ae04:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ae06:	7bbb      	ldrb	r3, [r7, #14]
 800ae08:	2b05      	cmp	r3, #5
 800ae0a:	d102      	bne.n	800ae12 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ae0c:	2303      	movs	r3, #3
 800ae0e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ae10:	e0d6      	b.n	800afc0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ae12:	7bbb      	ldrb	r3, [r7, #14]
 800ae14:	2b04      	cmp	r3, #4
 800ae16:	f040 80d3 	bne.w	800afc0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	220b      	movs	r2, #11
 800ae1e:	761a      	strb	r2, [r3, #24]
      break;
 800ae20:	e0ce      	b.n	800afc0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6899      	ldr	r1, [r3, #8]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	899a      	ldrh	r2, [r3, #12]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	795b      	ldrb	r3, [r3, #5]
 800ae2e:	2001      	movs	r0, #1
 800ae30:	9000      	str	r0, [sp, #0]
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 f8ea 	bl	800b00c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ae3e:	b29a      	uxth	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2206      	movs	r2, #6
 800ae48:	761a      	strb	r2, [r3, #24]
      break;
 800ae4a:	e0c0      	b.n	800afce <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	795b      	ldrb	r3, [r3, #5]
 800ae50:	4619      	mov	r1, r3
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fc4c 	bl	800b6f0 <USBH_LL_GetURBState>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ae5c:	7bbb      	ldrb	r3, [r7, #14]
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d103      	bne.n	800ae6a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2207      	movs	r2, #7
 800ae66:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ae68:	e0ac      	b.n	800afc4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ae6a:	7bbb      	ldrb	r3, [r7, #14]
 800ae6c:	2b05      	cmp	r3, #5
 800ae6e:	d105      	bne.n	800ae7c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	220c      	movs	r2, #12
 800ae74:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ae76:	2303      	movs	r3, #3
 800ae78:	73fb      	strb	r3, [r7, #15]
      break;
 800ae7a:	e0a3      	b.n	800afc4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ae7c:	7bbb      	ldrb	r3, [r7, #14]
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d103      	bne.n	800ae8a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2205      	movs	r2, #5
 800ae86:	761a      	strb	r2, [r3, #24]
      break;
 800ae88:	e09c      	b.n	800afc4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ae8a:	7bbb      	ldrb	r3, [r7, #14]
 800ae8c:	2b04      	cmp	r3, #4
 800ae8e:	f040 8099 	bne.w	800afc4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	220b      	movs	r2, #11
 800ae96:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ae98:	2302      	movs	r3, #2
 800ae9a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae9c:	e092      	b.n	800afc4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	791b      	ldrb	r3, [r3, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	2100      	movs	r1, #0
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 f8d5 	bl	800b056 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800aeb2:	b29a      	uxth	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2208      	movs	r2, #8
 800aebc:	761a      	strb	r2, [r3, #24]

      break;
 800aebe:	e086      	b.n	800afce <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	791b      	ldrb	r3, [r3, #4]
 800aec4:	4619      	mov	r1, r3
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 fc12 	bl	800b6f0 <USBH_LL_GetURBState>
 800aecc:	4603      	mov	r3, r0
 800aece:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800aed0:	7bbb      	ldrb	r3, [r7, #14]
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d105      	bne.n	800aee2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	220d      	movs	r2, #13
 800aeda:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800aedc:	2300      	movs	r3, #0
 800aede:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aee0:	e072      	b.n	800afc8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800aee2:	7bbb      	ldrb	r3, [r7, #14]
 800aee4:	2b04      	cmp	r3, #4
 800aee6:	d103      	bne.n	800aef0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	220b      	movs	r2, #11
 800aeec:	761a      	strb	r2, [r3, #24]
      break;
 800aeee:	e06b      	b.n	800afc8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800aef0:	7bbb      	ldrb	r3, [r7, #14]
 800aef2:	2b05      	cmp	r3, #5
 800aef4:	d168      	bne.n	800afc8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800aef6:	2303      	movs	r3, #3
 800aef8:	73fb      	strb	r3, [r7, #15]
      break;
 800aefa:	e065      	b.n	800afc8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	795b      	ldrb	r3, [r3, #5]
 800af00:	2201      	movs	r2, #1
 800af02:	9200      	str	r2, [sp, #0]
 800af04:	2200      	movs	r2, #0
 800af06:	2100      	movs	r1, #0
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 f87f 	bl	800b00c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800af14:	b29a      	uxth	r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	220a      	movs	r2, #10
 800af1e:	761a      	strb	r2, [r3, #24]
      break;
 800af20:	e055      	b.n	800afce <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	795b      	ldrb	r3, [r3, #5]
 800af26:	4619      	mov	r1, r3
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 fbe1 	bl	800b6f0 <USBH_LL_GetURBState>
 800af2e:	4603      	mov	r3, r0
 800af30:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800af32:	7bbb      	ldrb	r3, [r7, #14]
 800af34:	2b01      	cmp	r3, #1
 800af36:	d105      	bne.n	800af44 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800af38:	2300      	movs	r3, #0
 800af3a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	220d      	movs	r2, #13
 800af40:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800af42:	e043      	b.n	800afcc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800af44:	7bbb      	ldrb	r3, [r7, #14]
 800af46:	2b02      	cmp	r3, #2
 800af48:	d103      	bne.n	800af52 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2209      	movs	r2, #9
 800af4e:	761a      	strb	r2, [r3, #24]
      break;
 800af50:	e03c      	b.n	800afcc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800af52:	7bbb      	ldrb	r3, [r7, #14]
 800af54:	2b04      	cmp	r3, #4
 800af56:	d139      	bne.n	800afcc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	220b      	movs	r2, #11
 800af5c:	761a      	strb	r2, [r3, #24]
      break;
 800af5e:	e035      	b.n	800afcc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	7e5b      	ldrb	r3, [r3, #25]
 800af64:	3301      	adds	r3, #1
 800af66:	b2da      	uxtb	r2, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	765a      	strb	r2, [r3, #25]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	7e5b      	ldrb	r3, [r3, #25]
 800af70:	2b02      	cmp	r3, #2
 800af72:	d806      	bhi.n	800af82 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2201      	movs	r2, #1
 800af78:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2201      	movs	r2, #1
 800af7e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800af80:	e025      	b.n	800afce <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800af88:	2106      	movs	r1, #6
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	795b      	ldrb	r3, [r3, #5]
 800af98:	4619      	mov	r1, r3
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f90c 	bl	800b1b8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	791b      	ldrb	r3, [r3, #4]
 800afa4:	4619      	mov	r1, r3
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f906 	bl	800b1b8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800afb2:	2302      	movs	r3, #2
 800afb4:	73fb      	strb	r3, [r7, #15]
      break;
 800afb6:	e00a      	b.n	800afce <USBH_HandleControl+0x2de>

    default:
      break;
 800afb8:	bf00      	nop
 800afba:	e008      	b.n	800afce <USBH_HandleControl+0x2de>
      break;
 800afbc:	bf00      	nop
 800afbe:	e006      	b.n	800afce <USBH_HandleControl+0x2de>
      break;
 800afc0:	bf00      	nop
 800afc2:	e004      	b.n	800afce <USBH_HandleControl+0x2de>
      break;
 800afc4:	bf00      	nop
 800afc6:	e002      	b.n	800afce <USBH_HandleControl+0x2de>
      break;
 800afc8:	bf00      	nop
 800afca:	e000      	b.n	800afce <USBH_HandleControl+0x2de>
      break;
 800afcc:	bf00      	nop
  }

  return status;
 800afce:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3710      	adds	r7, #16
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b088      	sub	sp, #32
 800afdc:	af04      	add	r7, sp, #16
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	4613      	mov	r3, r2
 800afe4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800afe6:	79f9      	ldrb	r1, [r7, #7]
 800afe8:	2300      	movs	r3, #0
 800afea:	9303      	str	r3, [sp, #12]
 800afec:	2308      	movs	r3, #8
 800afee:	9302      	str	r3, [sp, #8]
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	9301      	str	r3, [sp, #4]
 800aff4:	2300      	movs	r3, #0
 800aff6:	9300      	str	r3, [sp, #0]
 800aff8:	2300      	movs	r3, #0
 800affa:	2200      	movs	r2, #0
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f000 fb46 	bl	800b68e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b088      	sub	sp, #32
 800b010:	af04      	add	r7, sp, #16
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	4611      	mov	r1, r2
 800b018:	461a      	mov	r2, r3
 800b01a:	460b      	mov	r3, r1
 800b01c:	80fb      	strh	r3, [r7, #6]
 800b01e:	4613      	mov	r3, r2
 800b020:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d001      	beq.n	800b030 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b02c:	2300      	movs	r3, #0
 800b02e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b030:	7979      	ldrb	r1, [r7, #5]
 800b032:	7e3b      	ldrb	r3, [r7, #24]
 800b034:	9303      	str	r3, [sp, #12]
 800b036:	88fb      	ldrh	r3, [r7, #6]
 800b038:	9302      	str	r3, [sp, #8]
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	9301      	str	r3, [sp, #4]
 800b03e:	2301      	movs	r3, #1
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	2300      	movs	r3, #0
 800b044:	2200      	movs	r2, #0
 800b046:	68f8      	ldr	r0, [r7, #12]
 800b048:	f000 fb21 	bl	800b68e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b04c:	2300      	movs	r3, #0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b088      	sub	sp, #32
 800b05a:	af04      	add	r7, sp, #16
 800b05c:	60f8      	str	r0, [r7, #12]
 800b05e:	60b9      	str	r1, [r7, #8]
 800b060:	4611      	mov	r1, r2
 800b062:	461a      	mov	r2, r3
 800b064:	460b      	mov	r3, r1
 800b066:	80fb      	strh	r3, [r7, #6]
 800b068:	4613      	mov	r3, r2
 800b06a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b06c:	7979      	ldrb	r1, [r7, #5]
 800b06e:	2300      	movs	r3, #0
 800b070:	9303      	str	r3, [sp, #12]
 800b072:	88fb      	ldrh	r3, [r7, #6]
 800b074:	9302      	str	r3, [sp, #8]
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	9301      	str	r3, [sp, #4]
 800b07a:	2301      	movs	r3, #1
 800b07c:	9300      	str	r3, [sp, #0]
 800b07e:	2300      	movs	r3, #0
 800b080:	2201      	movs	r2, #1
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f000 fb03 	bl	800b68e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b088:	2300      	movs	r3, #0

}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b088      	sub	sp, #32
 800b096:	af04      	add	r7, sp, #16
 800b098:	60f8      	str	r0, [r7, #12]
 800b09a:	60b9      	str	r1, [r7, #8]
 800b09c:	4611      	mov	r1, r2
 800b09e:	461a      	mov	r2, r3
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	80fb      	strh	r3, [r7, #6]
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d001      	beq.n	800b0b6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b0b6:	7979      	ldrb	r1, [r7, #5]
 800b0b8:	7e3b      	ldrb	r3, [r7, #24]
 800b0ba:	9303      	str	r3, [sp, #12]
 800b0bc:	88fb      	ldrh	r3, [r7, #6]
 800b0be:	9302      	str	r3, [sp, #8]
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	9301      	str	r3, [sp, #4]
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	9300      	str	r3, [sp, #0]
 800b0c8:	2302      	movs	r3, #2
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	68f8      	ldr	r0, [r7, #12]
 800b0ce:	f000 fade 	bl	800b68e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b0d2:	2300      	movs	r3, #0
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3710      	adds	r7, #16
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b088      	sub	sp, #32
 800b0e0:	af04      	add	r7, sp, #16
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	4611      	mov	r1, r2
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	80fb      	strh	r3, [r7, #6]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b0f2:	7979      	ldrb	r1, [r7, #5]
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	9303      	str	r3, [sp, #12]
 800b0f8:	88fb      	ldrh	r3, [r7, #6]
 800b0fa:	9302      	str	r3, [sp, #8]
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	9301      	str	r3, [sp, #4]
 800b100:	2301      	movs	r3, #1
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	2302      	movs	r3, #2
 800b106:	2201      	movs	r2, #1
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f000 fac0 	bl	800b68e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b10e:	2300      	movs	r3, #0
}
 800b110:	4618      	mov	r0, r3
 800b112:	3710      	adds	r7, #16
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b086      	sub	sp, #24
 800b11c:	af04      	add	r7, sp, #16
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	4608      	mov	r0, r1
 800b122:	4611      	mov	r1, r2
 800b124:	461a      	mov	r2, r3
 800b126:	4603      	mov	r3, r0
 800b128:	70fb      	strb	r3, [r7, #3]
 800b12a:	460b      	mov	r3, r1
 800b12c:	70bb      	strb	r3, [r7, #2]
 800b12e:	4613      	mov	r3, r2
 800b130:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b132:	7878      	ldrb	r0, [r7, #1]
 800b134:	78ba      	ldrb	r2, [r7, #2]
 800b136:	78f9      	ldrb	r1, [r7, #3]
 800b138:	8b3b      	ldrh	r3, [r7, #24]
 800b13a:	9302      	str	r3, [sp, #8]
 800b13c:	7d3b      	ldrb	r3, [r7, #20]
 800b13e:	9301      	str	r3, [sp, #4]
 800b140:	7c3b      	ldrb	r3, [r7, #16]
 800b142:	9300      	str	r3, [sp, #0]
 800b144:	4603      	mov	r3, r0
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 fa53 	bl	800b5f2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b082      	sub	sp, #8
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	460b      	mov	r3, r1
 800b160:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b162:	78fb      	ldrb	r3, [r7, #3]
 800b164:	4619      	mov	r1, r3
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fa72 	bl	800b650 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b16c:	2300      	movs	r3, #0
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3708      	adds	r7, #8
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b084      	sub	sp, #16
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
 800b17e:	460b      	mov	r3, r1
 800b180:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 f836 	bl	800b1f4 <USBH_GetFreePipe>
 800b188:	4603      	mov	r3, r0
 800b18a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b18c:	89fb      	ldrh	r3, [r7, #14]
 800b18e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b192:	4293      	cmp	r3, r2
 800b194:	d00a      	beq.n	800b1ac <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b196:	78fa      	ldrb	r2, [r7, #3]
 800b198:	89fb      	ldrh	r3, [r7, #14]
 800b19a:	f003 030f 	and.w	r3, r3, #15
 800b19e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b1a2:	6879      	ldr	r1, [r7, #4]
 800b1a4:	33e0      	adds	r3, #224	@ 0xe0
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	440b      	add	r3, r1
 800b1aa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b1ac:	89fb      	ldrh	r3, [r7, #14]
 800b1ae:	b2db      	uxtb	r3, r3
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b1c4:	78fb      	ldrb	r3, [r7, #3]
 800b1c6:	2b0f      	cmp	r3, #15
 800b1c8:	d80d      	bhi.n	800b1e6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b1ca:	78fb      	ldrb	r3, [r7, #3]
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	33e0      	adds	r3, #224	@ 0xe0
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	4413      	add	r3, r2
 800b1d4:	685a      	ldr	r2, [r3, #4]
 800b1d6:	78fb      	ldrb	r3, [r7, #3]
 800b1d8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b1dc:	6879      	ldr	r1, [r7, #4]
 800b1de:	33e0      	adds	r3, #224	@ 0xe0
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	440b      	add	r3, r1
 800b1e4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b085      	sub	sp, #20
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b200:	2300      	movs	r3, #0
 800b202:	73fb      	strb	r3, [r7, #15]
 800b204:	e00f      	b.n	800b226 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b206:	7bfb      	ldrb	r3, [r7, #15]
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	33e0      	adds	r3, #224	@ 0xe0
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	4413      	add	r3, r2
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b216:	2b00      	cmp	r3, #0
 800b218:	d102      	bne.n	800b220 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	e007      	b.n	800b230 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b220:	7bfb      	ldrb	r3, [r7, #15]
 800b222:	3301      	adds	r3, #1
 800b224:	73fb      	strb	r3, [r7, #15]
 800b226:	7bfb      	ldrb	r3, [r7, #15]
 800b228:	2b0f      	cmp	r3, #15
 800b22a:	d9ec      	bls.n	800b206 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b22c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b230:	4618      	mov	r0, r3
 800b232:	3714      	adds	r7, #20
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b240:	2201      	movs	r2, #1
 800b242:	490e      	ldr	r1, [pc, #56]	@ (800b27c <MX_USB_HOST_Init+0x40>)
 800b244:	480e      	ldr	r0, [pc, #56]	@ (800b280 <MX_USB_HOST_Init+0x44>)
 800b246:	f7fe fb15 	bl	8009874 <USBH_Init>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d001      	beq.n	800b254 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b250:	f7f6 fa5c 	bl	800170c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b254:	490b      	ldr	r1, [pc, #44]	@ (800b284 <MX_USB_HOST_Init+0x48>)
 800b256:	480a      	ldr	r0, [pc, #40]	@ (800b280 <MX_USB_HOST_Init+0x44>)
 800b258:	f7fe fbb9 	bl	80099ce <USBH_RegisterClass>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d001      	beq.n	800b266 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b262:	f7f6 fa53 	bl	800170c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b266:	4806      	ldr	r0, [pc, #24]	@ (800b280 <MX_USB_HOST_Init+0x44>)
 800b268:	f7fe fc3d 	bl	8009ae6 <USBH_Start>
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d001      	beq.n	800b276 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b272:	f7f6 fa4b 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b276:	bf00      	nop
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	0800b29d 	.word	0x0800b29d
 800b280:	20000460 	.word	0x20000460
 800b284:	20000010 	.word	0x20000010

0800b288 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b28c:	4802      	ldr	r0, [pc, #8]	@ (800b298 <MX_USB_HOST_Process+0x10>)
 800b28e:	f7fe fc3b 	bl	8009b08 <USBH_Process>
}
 800b292:	bf00      	nop
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	20000460 	.word	0x20000460

0800b29c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b2a8:	78fb      	ldrb	r3, [r7, #3]
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	2b04      	cmp	r3, #4
 800b2ae:	d819      	bhi.n	800b2e4 <USBH_UserProcess+0x48>
 800b2b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b2b8 <USBH_UserProcess+0x1c>)
 800b2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b6:	bf00      	nop
 800b2b8:	0800b2e5 	.word	0x0800b2e5
 800b2bc:	0800b2d5 	.word	0x0800b2d5
 800b2c0:	0800b2e5 	.word	0x0800b2e5
 800b2c4:	0800b2dd 	.word	0x0800b2dd
 800b2c8:	0800b2cd 	.word	0x0800b2cd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b2cc:	4b09      	ldr	r3, [pc, #36]	@ (800b2f4 <USBH_UserProcess+0x58>)
 800b2ce:	2203      	movs	r2, #3
 800b2d0:	701a      	strb	r2, [r3, #0]
  break;
 800b2d2:	e008      	b.n	800b2e6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b2d4:	4b07      	ldr	r3, [pc, #28]	@ (800b2f4 <USBH_UserProcess+0x58>)
 800b2d6:	2202      	movs	r2, #2
 800b2d8:	701a      	strb	r2, [r3, #0]
  break;
 800b2da:	e004      	b.n	800b2e6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b2dc:	4b05      	ldr	r3, [pc, #20]	@ (800b2f4 <USBH_UserProcess+0x58>)
 800b2de:	2201      	movs	r2, #1
 800b2e0:	701a      	strb	r2, [r3, #0]
  break;
 800b2e2:	e000      	b.n	800b2e6 <USBH_UserProcess+0x4a>

  default:
  break;
 800b2e4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b2e6:	bf00      	nop
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	20000838 	.word	0x20000838

0800b2f8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b08a      	sub	sp, #40	@ 0x28
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b300:	f107 0314 	add.w	r3, r7, #20
 800b304:	2200      	movs	r2, #0
 800b306:	601a      	str	r2, [r3, #0]
 800b308:	605a      	str	r2, [r3, #4]
 800b30a:	609a      	str	r2, [r3, #8]
 800b30c:	60da      	str	r2, [r3, #12]
 800b30e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b318:	d147      	bne.n	800b3aa <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b31a:	2300      	movs	r3, #0
 800b31c:	613b      	str	r3, [r7, #16]
 800b31e:	4b25      	ldr	r3, [pc, #148]	@ (800b3b4 <HAL_HCD_MspInit+0xbc>)
 800b320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b322:	4a24      	ldr	r2, [pc, #144]	@ (800b3b4 <HAL_HCD_MspInit+0xbc>)
 800b324:	f043 0301 	orr.w	r3, r3, #1
 800b328:	6313      	str	r3, [r2, #48]	@ 0x30
 800b32a:	4b22      	ldr	r3, [pc, #136]	@ (800b3b4 <HAL_HCD_MspInit+0xbc>)
 800b32c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b32e:	f003 0301 	and.w	r3, r3, #1
 800b332:	613b      	str	r3, [r7, #16]
 800b334:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b336:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b33a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b33c:	2300      	movs	r3, #0
 800b33e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b340:	2300      	movs	r3, #0
 800b342:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b344:	f107 0314 	add.w	r3, r7, #20
 800b348:	4619      	mov	r1, r3
 800b34a:	481b      	ldr	r0, [pc, #108]	@ (800b3b8 <HAL_HCD_MspInit+0xc0>)
 800b34c:	f7f7 fcc4 	bl	8002cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b350:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b356:	2302      	movs	r3, #2
 800b358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b35a:	2300      	movs	r3, #0
 800b35c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b35e:	2300      	movs	r3, #0
 800b360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b362:	230a      	movs	r3, #10
 800b364:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b366:	f107 0314 	add.w	r3, r7, #20
 800b36a:	4619      	mov	r1, r3
 800b36c:	4812      	ldr	r0, [pc, #72]	@ (800b3b8 <HAL_HCD_MspInit+0xc0>)
 800b36e:	f7f7 fcb3 	bl	8002cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b372:	4b10      	ldr	r3, [pc, #64]	@ (800b3b4 <HAL_HCD_MspInit+0xbc>)
 800b374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b376:	4a0f      	ldr	r2, [pc, #60]	@ (800b3b4 <HAL_HCD_MspInit+0xbc>)
 800b378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b37c:	6353      	str	r3, [r2, #52]	@ 0x34
 800b37e:	2300      	movs	r3, #0
 800b380:	60fb      	str	r3, [r7, #12]
 800b382:	4b0c      	ldr	r3, [pc, #48]	@ (800b3b4 <HAL_HCD_MspInit+0xbc>)
 800b384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b386:	4a0b      	ldr	r2, [pc, #44]	@ (800b3b4 <HAL_HCD_MspInit+0xbc>)
 800b388:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b38c:	6453      	str	r3, [r2, #68]	@ 0x44
 800b38e:	4b09      	ldr	r3, [pc, #36]	@ (800b3b4 <HAL_HCD_MspInit+0xbc>)
 800b390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b396:	60fb      	str	r3, [r7, #12]
 800b398:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b39a:	2200      	movs	r2, #0
 800b39c:	2100      	movs	r1, #0
 800b39e:	2043      	movs	r0, #67	@ 0x43
 800b3a0:	f7f7 fc63 	bl	8002c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b3a4:	2043      	movs	r0, #67	@ 0x43
 800b3a6:	f7f7 fc7c 	bl	8002ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b3aa:	bf00      	nop
 800b3ac:	3728      	adds	r7, #40	@ 0x28
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	40023800 	.word	0x40023800
 800b3b8:	40020000 	.word	0x40020000

0800b3bc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7fe ff73 	bl	800a2b6 <USBH_LL_IncTimer>
}
 800b3d0:	bf00      	nop
 800b3d2:	3708      	adds	r7, #8
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fe ffab 	bl	800a342 <USBH_LL_Connect>
}
 800b3ec:	bf00      	nop
 800b3ee:	3708      	adds	r7, #8
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b402:	4618      	mov	r0, r3
 800b404:	f7fe ffb4 	bl	800a370 <USBH_LL_Disconnect>
}
 800b408:	bf00      	nop
 800b40a:	3708      	adds	r7, #8
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	460b      	mov	r3, r1
 800b41a:	70fb      	strb	r3, [r7, #3]
 800b41c:	4613      	mov	r3, r2
 800b41e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fe ff65 	bl	800a30a <USBH_LL_PortEnabled>
}
 800b440:	bf00      	nop
 800b442:	3708      	adds	r7, #8
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b456:	4618      	mov	r0, r3
 800b458:	f7fe ff65 	bl	800a326 <USBH_LL_PortDisabled>
}
 800b45c:	bf00      	nop
 800b45e:	3708      	adds	r7, #8
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b472:	2b01      	cmp	r3, #1
 800b474:	d12a      	bne.n	800b4cc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b476:	4a18      	ldr	r2, [pc, #96]	@ (800b4d8 <USBH_LL_Init+0x74>)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4a15      	ldr	r2, [pc, #84]	@ (800b4d8 <USBH_LL_Init+0x74>)
 800b482:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b486:	4b14      	ldr	r3, [pc, #80]	@ (800b4d8 <USBH_LL_Init+0x74>)
 800b488:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b48c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b48e:	4b12      	ldr	r3, [pc, #72]	@ (800b4d8 <USBH_LL_Init+0x74>)
 800b490:	2208      	movs	r2, #8
 800b492:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b494:	4b10      	ldr	r3, [pc, #64]	@ (800b4d8 <USBH_LL_Init+0x74>)
 800b496:	2201      	movs	r2, #1
 800b498:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b49a:	4b0f      	ldr	r3, [pc, #60]	@ (800b4d8 <USBH_LL_Init+0x74>)
 800b49c:	2200      	movs	r2, #0
 800b49e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b4a0:	4b0d      	ldr	r3, [pc, #52]	@ (800b4d8 <USBH_LL_Init+0x74>)
 800b4a2:	2202      	movs	r2, #2
 800b4a4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b4a6:	4b0c      	ldr	r3, [pc, #48]	@ (800b4d8 <USBH_LL_Init+0x74>)
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b4ac:	480a      	ldr	r0, [pc, #40]	@ (800b4d8 <USBH_LL_Init+0x74>)
 800b4ae:	f7f7 fde1 	bl	8003074 <HAL_HCD_Init>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d001      	beq.n	800b4bc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b4b8:	f7f6 f928 	bl	800170c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b4bc:	4806      	ldr	r0, [pc, #24]	@ (800b4d8 <USBH_LL_Init+0x74>)
 800b4be:	f7f8 fa41 	bl	8003944 <HAL_HCD_GetCurrentFrame>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f7fe fee6 	bl	800a298 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b4cc:	2300      	movs	r3, #0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3708      	adds	r7, #8
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	2000083c 	.word	0x2000083c

0800b4dc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7f8 f9ae 	bl	8003854 <HAL_HCD_Start>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b4fc:	7bfb      	ldrb	r3, [r7, #15]
 800b4fe:	4618      	mov	r0, r3
 800b500:	f000 f95e 	bl	800b7c0 <USBH_Get_USB_Status>
 800b504:	4603      	mov	r3, r0
 800b506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b508:	7bbb      	ldrb	r3, [r7, #14]
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b512:	b580      	push	{r7, lr}
 800b514:	b084      	sub	sp, #16
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b51a:	2300      	movs	r3, #0
 800b51c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b51e:	2300      	movs	r3, #0
 800b520:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b528:	4618      	mov	r0, r3
 800b52a:	f7f8 f9b6 	bl	800389a <HAL_HCD_Stop>
 800b52e:	4603      	mov	r3, r0
 800b530:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b532:	7bfb      	ldrb	r3, [r7, #15]
 800b534:	4618      	mov	r0, r3
 800b536:	f000 f943 	bl	800b7c0 <USBH_Get_USB_Status>
 800b53a:	4603      	mov	r3, r0
 800b53c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b53e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b540:	4618      	mov	r0, r3
 800b542:	3710      	adds	r7, #16
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b550:	2301      	movs	r3, #1
 800b552:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7f8 fa00 	bl	8003960 <HAL_HCD_GetCurrentSpeed>
 800b560:	4603      	mov	r3, r0
 800b562:	2b02      	cmp	r3, #2
 800b564:	d00c      	beq.n	800b580 <USBH_LL_GetSpeed+0x38>
 800b566:	2b02      	cmp	r3, #2
 800b568:	d80d      	bhi.n	800b586 <USBH_LL_GetSpeed+0x3e>
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d002      	beq.n	800b574 <USBH_LL_GetSpeed+0x2c>
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d003      	beq.n	800b57a <USBH_LL_GetSpeed+0x32>
 800b572:	e008      	b.n	800b586 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b574:	2300      	movs	r3, #0
 800b576:	73fb      	strb	r3, [r7, #15]
    break;
 800b578:	e008      	b.n	800b58c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b57a:	2301      	movs	r3, #1
 800b57c:	73fb      	strb	r3, [r7, #15]
    break;
 800b57e:	e005      	b.n	800b58c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b580:	2302      	movs	r3, #2
 800b582:	73fb      	strb	r3, [r7, #15]
    break;
 800b584:	e002      	b.n	800b58c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b586:	2301      	movs	r3, #1
 800b588:	73fb      	strb	r3, [r7, #15]
    break;
 800b58a:	bf00      	nop
  }
  return  speed;
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3710      	adds	r7, #16
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b596:	b580      	push	{r7, lr}
 800b598:	b084      	sub	sp, #16
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7f8 f991 	bl	80038d4 <HAL_HCD_ResetPort>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5b6:	7bfb      	ldrb	r3, [r7, #15]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f000 f901 	bl	800b7c0 <USBH_Get_USB_Status>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3710      	adds	r7, #16
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b5de:	78fa      	ldrb	r2, [r7, #3]
 800b5e0:	4611      	mov	r1, r2
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7f8 f999 	bl	800391a <HAL_HCD_HC_GetXferCount>
 800b5e8:	4603      	mov	r3, r0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3708      	adds	r7, #8
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}

0800b5f2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b5f2:	b590      	push	{r4, r7, lr}
 800b5f4:	b089      	sub	sp, #36	@ 0x24
 800b5f6:	af04      	add	r7, sp, #16
 800b5f8:	6078      	str	r0, [r7, #4]
 800b5fa:	4608      	mov	r0, r1
 800b5fc:	4611      	mov	r1, r2
 800b5fe:	461a      	mov	r2, r3
 800b600:	4603      	mov	r3, r0
 800b602:	70fb      	strb	r3, [r7, #3]
 800b604:	460b      	mov	r3, r1
 800b606:	70bb      	strb	r3, [r7, #2]
 800b608:	4613      	mov	r3, r2
 800b60a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b60c:	2300      	movs	r3, #0
 800b60e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b610:	2300      	movs	r3, #0
 800b612:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b61a:	787c      	ldrb	r4, [r7, #1]
 800b61c:	78ba      	ldrb	r2, [r7, #2]
 800b61e:	78f9      	ldrb	r1, [r7, #3]
 800b620:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b622:	9302      	str	r3, [sp, #8]
 800b624:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b628:	9301      	str	r3, [sp, #4]
 800b62a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b62e:	9300      	str	r3, [sp, #0]
 800b630:	4623      	mov	r3, r4
 800b632:	f7f7 fd86 	bl	8003142 <HAL_HCD_HC_Init>
 800b636:	4603      	mov	r3, r0
 800b638:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b63a:	7bfb      	ldrb	r3, [r7, #15]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f000 f8bf 	bl	800b7c0 <USBH_Get_USB_Status>
 800b642:	4603      	mov	r3, r0
 800b644:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b646:	7bbb      	ldrb	r3, [r7, #14]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3714      	adds	r7, #20
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd90      	pop	{r4, r7, pc}

0800b650 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	460b      	mov	r3, r1
 800b65a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b65c:	2300      	movs	r3, #0
 800b65e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b660:	2300      	movs	r3, #0
 800b662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b66a:	78fa      	ldrb	r2, [r7, #3]
 800b66c:	4611      	mov	r1, r2
 800b66e:	4618      	mov	r0, r3
 800b670:	f7f7 fe1f 	bl	80032b2 <HAL_HCD_HC_Halt>
 800b674:	4603      	mov	r3, r0
 800b676:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b678:	7bfb      	ldrb	r3, [r7, #15]
 800b67a:	4618      	mov	r0, r3
 800b67c:	f000 f8a0 	bl	800b7c0 <USBH_Get_USB_Status>
 800b680:	4603      	mov	r3, r0
 800b682:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b684:	7bbb      	ldrb	r3, [r7, #14]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3710      	adds	r7, #16
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b68e:	b590      	push	{r4, r7, lr}
 800b690:	b089      	sub	sp, #36	@ 0x24
 800b692:	af04      	add	r7, sp, #16
 800b694:	6078      	str	r0, [r7, #4]
 800b696:	4608      	mov	r0, r1
 800b698:	4611      	mov	r1, r2
 800b69a:	461a      	mov	r2, r3
 800b69c:	4603      	mov	r3, r0
 800b69e:	70fb      	strb	r3, [r7, #3]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	70bb      	strb	r3, [r7, #2]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b6b6:	787c      	ldrb	r4, [r7, #1]
 800b6b8:	78ba      	ldrb	r2, [r7, #2]
 800b6ba:	78f9      	ldrb	r1, [r7, #3]
 800b6bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b6c0:	9303      	str	r3, [sp, #12]
 800b6c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b6c4:	9302      	str	r3, [sp, #8]
 800b6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c8:	9301      	str	r3, [sp, #4]
 800b6ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	4623      	mov	r3, r4
 800b6d2:	f7f7 fe11 	bl	80032f8 <HAL_HCD_HC_SubmitRequest>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b6da:	7bfb      	ldrb	r3, [r7, #15]
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f000 f86f 	bl	800b7c0 <USBH_Get_USB_Status>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3714      	adds	r7, #20
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd90      	pop	{r4, r7, pc}

0800b6f0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b702:	78fa      	ldrb	r2, [r7, #3]
 800b704:	4611      	mov	r1, r2
 800b706:	4618      	mov	r0, r3
 800b708:	f7f8 f8f2 	bl	80038f0 <HAL_HCD_HC_GetURBState>
 800b70c:	4603      	mov	r3, r0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3708      	adds	r7, #8
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b082      	sub	sp, #8
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
 800b71e:	460b      	mov	r3, r1
 800b720:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d103      	bne.n	800b734 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b72c:	78fb      	ldrb	r3, [r7, #3]
 800b72e:	4618      	mov	r0, r3
 800b730:	f000 f872 	bl	800b818 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b734:	20c8      	movs	r0, #200	@ 0xc8
 800b736:	f7f7 f999 	bl	8002a6c <HAL_Delay>
  return USBH_OK;
 800b73a:	2300      	movs	r3, #0
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3708      	adds	r7, #8
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b744:	b480      	push	{r7}
 800b746:	b085      	sub	sp, #20
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	460b      	mov	r3, r1
 800b74e:	70fb      	strb	r3, [r7, #3]
 800b750:	4613      	mov	r3, r2
 800b752:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b75a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b75c:	78fa      	ldrb	r2, [r7, #3]
 800b75e:	68f9      	ldr	r1, [r7, #12]
 800b760:	4613      	mov	r3, r2
 800b762:	011b      	lsls	r3, r3, #4
 800b764:	1a9b      	subs	r3, r3, r2
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	440b      	add	r3, r1
 800b76a:	3317      	adds	r3, #23
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00a      	beq.n	800b788 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b772:	78fa      	ldrb	r2, [r7, #3]
 800b774:	68f9      	ldr	r1, [r7, #12]
 800b776:	4613      	mov	r3, r2
 800b778:	011b      	lsls	r3, r3, #4
 800b77a:	1a9b      	subs	r3, r3, r2
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	440b      	add	r3, r1
 800b780:	333c      	adds	r3, #60	@ 0x3c
 800b782:	78ba      	ldrb	r2, [r7, #2]
 800b784:	701a      	strb	r2, [r3, #0]
 800b786:	e009      	b.n	800b79c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b788:	78fa      	ldrb	r2, [r7, #3]
 800b78a:	68f9      	ldr	r1, [r7, #12]
 800b78c:	4613      	mov	r3, r2
 800b78e:	011b      	lsls	r3, r3, #4
 800b790:	1a9b      	subs	r3, r3, r2
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	440b      	add	r3, r1
 800b796:	333d      	adds	r3, #61	@ 0x3d
 800b798:	78ba      	ldrb	r2, [r7, #2]
 800b79a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3714      	adds	r7, #20
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr

0800b7aa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b082      	sub	sp, #8
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f7f7 f95a 	bl	8002a6c <HAL_Delay>
}
 800b7b8:	bf00      	nop
 800b7ba:	3708      	adds	r7, #8
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b7ce:	79fb      	ldrb	r3, [r7, #7]
 800b7d0:	2b03      	cmp	r3, #3
 800b7d2:	d817      	bhi.n	800b804 <USBH_Get_USB_Status+0x44>
 800b7d4:	a201      	add	r2, pc, #4	@ (adr r2, 800b7dc <USBH_Get_USB_Status+0x1c>)
 800b7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7da:	bf00      	nop
 800b7dc:	0800b7ed 	.word	0x0800b7ed
 800b7e0:	0800b7f3 	.word	0x0800b7f3
 800b7e4:	0800b7f9 	.word	0x0800b7f9
 800b7e8:	0800b7ff 	.word	0x0800b7ff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b7f0:	e00b      	b.n	800b80a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b7f2:	2302      	movs	r3, #2
 800b7f4:	73fb      	strb	r3, [r7, #15]
    break;
 800b7f6:	e008      	b.n	800b80a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b7fc:	e005      	b.n	800b80a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b7fe:	2302      	movs	r3, #2
 800b800:	73fb      	strb	r3, [r7, #15]
    break;
 800b802:	e002      	b.n	800b80a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b804:	2302      	movs	r3, #2
 800b806:	73fb      	strb	r3, [r7, #15]
    break;
 800b808:	bf00      	nop
  }
  return usb_status;
 800b80a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3714      	adds	r7, #20
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr

0800b818 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	4603      	mov	r3, r0
 800b820:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b822:	79fb      	ldrb	r3, [r7, #7]
 800b824:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b826:	79fb      	ldrb	r3, [r7, #7]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d102      	bne.n	800b832 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b82c:	2300      	movs	r3, #0
 800b82e:	73fb      	strb	r3, [r7, #15]
 800b830:	e001      	b.n	800b836 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b832:	2301      	movs	r3, #1
 800b834:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b836:	7bfb      	ldrb	r3, [r7, #15]
 800b838:	461a      	mov	r2, r3
 800b83a:	2101      	movs	r1, #1
 800b83c:	4803      	ldr	r0, [pc, #12]	@ (800b84c <MX_DriverVbusFS+0x34>)
 800b83e:	f7f7 fbe7 	bl	8003010 <HAL_GPIO_WritePin>
}
 800b842:	bf00      	nop
 800b844:	3710      	adds	r7, #16
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	40020800 	.word	0x40020800

0800b850 <malloc>:
 800b850:	4b02      	ldr	r3, [pc, #8]	@ (800b85c <malloc+0xc>)
 800b852:	4601      	mov	r1, r0
 800b854:	6818      	ldr	r0, [r3, #0]
 800b856:	f000 b82d 	b.w	800b8b4 <_malloc_r>
 800b85a:	bf00      	nop
 800b85c:	2000003c 	.word	0x2000003c

0800b860 <free>:
 800b860:	4b02      	ldr	r3, [pc, #8]	@ (800b86c <free+0xc>)
 800b862:	4601      	mov	r1, r0
 800b864:	6818      	ldr	r0, [r3, #0]
 800b866:	f001 bcff 	b.w	800d268 <_free_r>
 800b86a:	bf00      	nop
 800b86c:	2000003c 	.word	0x2000003c

0800b870 <sbrk_aligned>:
 800b870:	b570      	push	{r4, r5, r6, lr}
 800b872:	4e0f      	ldr	r6, [pc, #60]	@ (800b8b0 <sbrk_aligned+0x40>)
 800b874:	460c      	mov	r4, r1
 800b876:	6831      	ldr	r1, [r6, #0]
 800b878:	4605      	mov	r5, r0
 800b87a:	b911      	cbnz	r1, 800b882 <sbrk_aligned+0x12>
 800b87c:	f000 fe56 	bl	800c52c <_sbrk_r>
 800b880:	6030      	str	r0, [r6, #0]
 800b882:	4621      	mov	r1, r4
 800b884:	4628      	mov	r0, r5
 800b886:	f000 fe51 	bl	800c52c <_sbrk_r>
 800b88a:	1c43      	adds	r3, r0, #1
 800b88c:	d103      	bne.n	800b896 <sbrk_aligned+0x26>
 800b88e:	f04f 34ff 	mov.w	r4, #4294967295
 800b892:	4620      	mov	r0, r4
 800b894:	bd70      	pop	{r4, r5, r6, pc}
 800b896:	1cc4      	adds	r4, r0, #3
 800b898:	f024 0403 	bic.w	r4, r4, #3
 800b89c:	42a0      	cmp	r0, r4
 800b89e:	d0f8      	beq.n	800b892 <sbrk_aligned+0x22>
 800b8a0:	1a21      	subs	r1, r4, r0
 800b8a2:	4628      	mov	r0, r5
 800b8a4:	f000 fe42 	bl	800c52c <_sbrk_r>
 800b8a8:	3001      	adds	r0, #1
 800b8aa:	d1f2      	bne.n	800b892 <sbrk_aligned+0x22>
 800b8ac:	e7ef      	b.n	800b88e <sbrk_aligned+0x1e>
 800b8ae:	bf00      	nop
 800b8b0:	20000c1c 	.word	0x20000c1c

0800b8b4 <_malloc_r>:
 800b8b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8b8:	1ccd      	adds	r5, r1, #3
 800b8ba:	f025 0503 	bic.w	r5, r5, #3
 800b8be:	3508      	adds	r5, #8
 800b8c0:	2d0c      	cmp	r5, #12
 800b8c2:	bf38      	it	cc
 800b8c4:	250c      	movcc	r5, #12
 800b8c6:	2d00      	cmp	r5, #0
 800b8c8:	4606      	mov	r6, r0
 800b8ca:	db01      	blt.n	800b8d0 <_malloc_r+0x1c>
 800b8cc:	42a9      	cmp	r1, r5
 800b8ce:	d904      	bls.n	800b8da <_malloc_r+0x26>
 800b8d0:	230c      	movs	r3, #12
 800b8d2:	6033      	str	r3, [r6, #0]
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b9b0 <_malloc_r+0xfc>
 800b8de:	f000 f869 	bl	800b9b4 <__malloc_lock>
 800b8e2:	f8d8 3000 	ldr.w	r3, [r8]
 800b8e6:	461c      	mov	r4, r3
 800b8e8:	bb44      	cbnz	r4, 800b93c <_malloc_r+0x88>
 800b8ea:	4629      	mov	r1, r5
 800b8ec:	4630      	mov	r0, r6
 800b8ee:	f7ff ffbf 	bl	800b870 <sbrk_aligned>
 800b8f2:	1c43      	adds	r3, r0, #1
 800b8f4:	4604      	mov	r4, r0
 800b8f6:	d158      	bne.n	800b9aa <_malloc_r+0xf6>
 800b8f8:	f8d8 4000 	ldr.w	r4, [r8]
 800b8fc:	4627      	mov	r7, r4
 800b8fe:	2f00      	cmp	r7, #0
 800b900:	d143      	bne.n	800b98a <_malloc_r+0xd6>
 800b902:	2c00      	cmp	r4, #0
 800b904:	d04b      	beq.n	800b99e <_malloc_r+0xea>
 800b906:	6823      	ldr	r3, [r4, #0]
 800b908:	4639      	mov	r1, r7
 800b90a:	4630      	mov	r0, r6
 800b90c:	eb04 0903 	add.w	r9, r4, r3
 800b910:	f000 fe0c 	bl	800c52c <_sbrk_r>
 800b914:	4581      	cmp	r9, r0
 800b916:	d142      	bne.n	800b99e <_malloc_r+0xea>
 800b918:	6821      	ldr	r1, [r4, #0]
 800b91a:	1a6d      	subs	r5, r5, r1
 800b91c:	4629      	mov	r1, r5
 800b91e:	4630      	mov	r0, r6
 800b920:	f7ff ffa6 	bl	800b870 <sbrk_aligned>
 800b924:	3001      	adds	r0, #1
 800b926:	d03a      	beq.n	800b99e <_malloc_r+0xea>
 800b928:	6823      	ldr	r3, [r4, #0]
 800b92a:	442b      	add	r3, r5
 800b92c:	6023      	str	r3, [r4, #0]
 800b92e:	f8d8 3000 	ldr.w	r3, [r8]
 800b932:	685a      	ldr	r2, [r3, #4]
 800b934:	bb62      	cbnz	r2, 800b990 <_malloc_r+0xdc>
 800b936:	f8c8 7000 	str.w	r7, [r8]
 800b93a:	e00f      	b.n	800b95c <_malloc_r+0xa8>
 800b93c:	6822      	ldr	r2, [r4, #0]
 800b93e:	1b52      	subs	r2, r2, r5
 800b940:	d420      	bmi.n	800b984 <_malloc_r+0xd0>
 800b942:	2a0b      	cmp	r2, #11
 800b944:	d917      	bls.n	800b976 <_malloc_r+0xc2>
 800b946:	1961      	adds	r1, r4, r5
 800b948:	42a3      	cmp	r3, r4
 800b94a:	6025      	str	r5, [r4, #0]
 800b94c:	bf18      	it	ne
 800b94e:	6059      	strne	r1, [r3, #4]
 800b950:	6863      	ldr	r3, [r4, #4]
 800b952:	bf08      	it	eq
 800b954:	f8c8 1000 	streq.w	r1, [r8]
 800b958:	5162      	str	r2, [r4, r5]
 800b95a:	604b      	str	r3, [r1, #4]
 800b95c:	4630      	mov	r0, r6
 800b95e:	f000 f82f 	bl	800b9c0 <__malloc_unlock>
 800b962:	f104 000b 	add.w	r0, r4, #11
 800b966:	1d23      	adds	r3, r4, #4
 800b968:	f020 0007 	bic.w	r0, r0, #7
 800b96c:	1ac2      	subs	r2, r0, r3
 800b96e:	bf1c      	itt	ne
 800b970:	1a1b      	subne	r3, r3, r0
 800b972:	50a3      	strne	r3, [r4, r2]
 800b974:	e7af      	b.n	800b8d6 <_malloc_r+0x22>
 800b976:	6862      	ldr	r2, [r4, #4]
 800b978:	42a3      	cmp	r3, r4
 800b97a:	bf0c      	ite	eq
 800b97c:	f8c8 2000 	streq.w	r2, [r8]
 800b980:	605a      	strne	r2, [r3, #4]
 800b982:	e7eb      	b.n	800b95c <_malloc_r+0xa8>
 800b984:	4623      	mov	r3, r4
 800b986:	6864      	ldr	r4, [r4, #4]
 800b988:	e7ae      	b.n	800b8e8 <_malloc_r+0x34>
 800b98a:	463c      	mov	r4, r7
 800b98c:	687f      	ldr	r7, [r7, #4]
 800b98e:	e7b6      	b.n	800b8fe <_malloc_r+0x4a>
 800b990:	461a      	mov	r2, r3
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	42a3      	cmp	r3, r4
 800b996:	d1fb      	bne.n	800b990 <_malloc_r+0xdc>
 800b998:	2300      	movs	r3, #0
 800b99a:	6053      	str	r3, [r2, #4]
 800b99c:	e7de      	b.n	800b95c <_malloc_r+0xa8>
 800b99e:	230c      	movs	r3, #12
 800b9a0:	6033      	str	r3, [r6, #0]
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f000 f80c 	bl	800b9c0 <__malloc_unlock>
 800b9a8:	e794      	b.n	800b8d4 <_malloc_r+0x20>
 800b9aa:	6005      	str	r5, [r0, #0]
 800b9ac:	e7d6      	b.n	800b95c <_malloc_r+0xa8>
 800b9ae:	bf00      	nop
 800b9b0:	20000c20 	.word	0x20000c20

0800b9b4 <__malloc_lock>:
 800b9b4:	4801      	ldr	r0, [pc, #4]	@ (800b9bc <__malloc_lock+0x8>)
 800b9b6:	f000 be06 	b.w	800c5c6 <__retarget_lock_acquire_recursive>
 800b9ba:	bf00      	nop
 800b9bc:	20000d64 	.word	0x20000d64

0800b9c0 <__malloc_unlock>:
 800b9c0:	4801      	ldr	r0, [pc, #4]	@ (800b9c8 <__malloc_unlock+0x8>)
 800b9c2:	f000 be01 	b.w	800c5c8 <__retarget_lock_release_recursive>
 800b9c6:	bf00      	nop
 800b9c8:	20000d64 	.word	0x20000d64

0800b9cc <__cvt>:
 800b9cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d0:	ec57 6b10 	vmov	r6, r7, d0
 800b9d4:	2f00      	cmp	r7, #0
 800b9d6:	460c      	mov	r4, r1
 800b9d8:	4619      	mov	r1, r3
 800b9da:	463b      	mov	r3, r7
 800b9dc:	bfbb      	ittet	lt
 800b9de:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b9e2:	461f      	movlt	r7, r3
 800b9e4:	2300      	movge	r3, #0
 800b9e6:	232d      	movlt	r3, #45	@ 0x2d
 800b9e8:	700b      	strb	r3, [r1, #0]
 800b9ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9ec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b9f0:	4691      	mov	r9, r2
 800b9f2:	f023 0820 	bic.w	r8, r3, #32
 800b9f6:	bfbc      	itt	lt
 800b9f8:	4632      	movlt	r2, r6
 800b9fa:	4616      	movlt	r6, r2
 800b9fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ba00:	d005      	beq.n	800ba0e <__cvt+0x42>
 800ba02:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ba06:	d100      	bne.n	800ba0a <__cvt+0x3e>
 800ba08:	3401      	adds	r4, #1
 800ba0a:	2102      	movs	r1, #2
 800ba0c:	e000      	b.n	800ba10 <__cvt+0x44>
 800ba0e:	2103      	movs	r1, #3
 800ba10:	ab03      	add	r3, sp, #12
 800ba12:	9301      	str	r3, [sp, #4]
 800ba14:	ab02      	add	r3, sp, #8
 800ba16:	9300      	str	r3, [sp, #0]
 800ba18:	ec47 6b10 	vmov	d0, r6, r7
 800ba1c:	4653      	mov	r3, sl
 800ba1e:	4622      	mov	r2, r4
 800ba20:	f000 fe5e 	bl	800c6e0 <_dtoa_r>
 800ba24:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ba28:	4605      	mov	r5, r0
 800ba2a:	d119      	bne.n	800ba60 <__cvt+0x94>
 800ba2c:	f019 0f01 	tst.w	r9, #1
 800ba30:	d00e      	beq.n	800ba50 <__cvt+0x84>
 800ba32:	eb00 0904 	add.w	r9, r0, r4
 800ba36:	2200      	movs	r2, #0
 800ba38:	2300      	movs	r3, #0
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	4639      	mov	r1, r7
 800ba3e:	f7f5 f843 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba42:	b108      	cbz	r0, 800ba48 <__cvt+0x7c>
 800ba44:	f8cd 900c 	str.w	r9, [sp, #12]
 800ba48:	2230      	movs	r2, #48	@ 0x30
 800ba4a:	9b03      	ldr	r3, [sp, #12]
 800ba4c:	454b      	cmp	r3, r9
 800ba4e:	d31e      	bcc.n	800ba8e <__cvt+0xc2>
 800ba50:	9b03      	ldr	r3, [sp, #12]
 800ba52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba54:	1b5b      	subs	r3, r3, r5
 800ba56:	4628      	mov	r0, r5
 800ba58:	6013      	str	r3, [r2, #0]
 800ba5a:	b004      	add	sp, #16
 800ba5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ba64:	eb00 0904 	add.w	r9, r0, r4
 800ba68:	d1e5      	bne.n	800ba36 <__cvt+0x6a>
 800ba6a:	7803      	ldrb	r3, [r0, #0]
 800ba6c:	2b30      	cmp	r3, #48	@ 0x30
 800ba6e:	d10a      	bne.n	800ba86 <__cvt+0xba>
 800ba70:	2200      	movs	r2, #0
 800ba72:	2300      	movs	r3, #0
 800ba74:	4630      	mov	r0, r6
 800ba76:	4639      	mov	r1, r7
 800ba78:	f7f5 f826 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba7c:	b918      	cbnz	r0, 800ba86 <__cvt+0xba>
 800ba7e:	f1c4 0401 	rsb	r4, r4, #1
 800ba82:	f8ca 4000 	str.w	r4, [sl]
 800ba86:	f8da 3000 	ldr.w	r3, [sl]
 800ba8a:	4499      	add	r9, r3
 800ba8c:	e7d3      	b.n	800ba36 <__cvt+0x6a>
 800ba8e:	1c59      	adds	r1, r3, #1
 800ba90:	9103      	str	r1, [sp, #12]
 800ba92:	701a      	strb	r2, [r3, #0]
 800ba94:	e7d9      	b.n	800ba4a <__cvt+0x7e>

0800ba96 <__exponent>:
 800ba96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba98:	2900      	cmp	r1, #0
 800ba9a:	bfba      	itte	lt
 800ba9c:	4249      	neglt	r1, r1
 800ba9e:	232d      	movlt	r3, #45	@ 0x2d
 800baa0:	232b      	movge	r3, #43	@ 0x2b
 800baa2:	2909      	cmp	r1, #9
 800baa4:	7002      	strb	r2, [r0, #0]
 800baa6:	7043      	strb	r3, [r0, #1]
 800baa8:	dd29      	ble.n	800bafe <__exponent+0x68>
 800baaa:	f10d 0307 	add.w	r3, sp, #7
 800baae:	461d      	mov	r5, r3
 800bab0:	270a      	movs	r7, #10
 800bab2:	461a      	mov	r2, r3
 800bab4:	fbb1 f6f7 	udiv	r6, r1, r7
 800bab8:	fb07 1416 	mls	r4, r7, r6, r1
 800babc:	3430      	adds	r4, #48	@ 0x30
 800babe:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bac2:	460c      	mov	r4, r1
 800bac4:	2c63      	cmp	r4, #99	@ 0x63
 800bac6:	f103 33ff 	add.w	r3, r3, #4294967295
 800baca:	4631      	mov	r1, r6
 800bacc:	dcf1      	bgt.n	800bab2 <__exponent+0x1c>
 800bace:	3130      	adds	r1, #48	@ 0x30
 800bad0:	1e94      	subs	r4, r2, #2
 800bad2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bad6:	1c41      	adds	r1, r0, #1
 800bad8:	4623      	mov	r3, r4
 800bada:	42ab      	cmp	r3, r5
 800badc:	d30a      	bcc.n	800baf4 <__exponent+0x5e>
 800bade:	f10d 0309 	add.w	r3, sp, #9
 800bae2:	1a9b      	subs	r3, r3, r2
 800bae4:	42ac      	cmp	r4, r5
 800bae6:	bf88      	it	hi
 800bae8:	2300      	movhi	r3, #0
 800baea:	3302      	adds	r3, #2
 800baec:	4403      	add	r3, r0
 800baee:	1a18      	subs	r0, r3, r0
 800baf0:	b003      	add	sp, #12
 800baf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baf4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800baf8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bafc:	e7ed      	b.n	800bada <__exponent+0x44>
 800bafe:	2330      	movs	r3, #48	@ 0x30
 800bb00:	3130      	adds	r1, #48	@ 0x30
 800bb02:	7083      	strb	r3, [r0, #2]
 800bb04:	70c1      	strb	r1, [r0, #3]
 800bb06:	1d03      	adds	r3, r0, #4
 800bb08:	e7f1      	b.n	800baee <__exponent+0x58>
	...

0800bb0c <_printf_float>:
 800bb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb10:	b08d      	sub	sp, #52	@ 0x34
 800bb12:	460c      	mov	r4, r1
 800bb14:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bb18:	4616      	mov	r6, r2
 800bb1a:	461f      	mov	r7, r3
 800bb1c:	4605      	mov	r5, r0
 800bb1e:	f000 fccd 	bl	800c4bc <_localeconv_r>
 800bb22:	6803      	ldr	r3, [r0, #0]
 800bb24:	9304      	str	r3, [sp, #16]
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7f4 fba2 	bl	8000270 <strlen>
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb30:	f8d8 3000 	ldr.w	r3, [r8]
 800bb34:	9005      	str	r0, [sp, #20]
 800bb36:	3307      	adds	r3, #7
 800bb38:	f023 0307 	bic.w	r3, r3, #7
 800bb3c:	f103 0208 	add.w	r2, r3, #8
 800bb40:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bb44:	f8d4 b000 	ldr.w	fp, [r4]
 800bb48:	f8c8 2000 	str.w	r2, [r8]
 800bb4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb50:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bb54:	9307      	str	r3, [sp, #28]
 800bb56:	f8cd 8018 	str.w	r8, [sp, #24]
 800bb5a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bb5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb62:	4b9c      	ldr	r3, [pc, #624]	@ (800bdd4 <_printf_float+0x2c8>)
 800bb64:	f04f 32ff 	mov.w	r2, #4294967295
 800bb68:	f7f4 ffe0 	bl	8000b2c <__aeabi_dcmpun>
 800bb6c:	bb70      	cbnz	r0, 800bbcc <_printf_float+0xc0>
 800bb6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb72:	4b98      	ldr	r3, [pc, #608]	@ (800bdd4 <_printf_float+0x2c8>)
 800bb74:	f04f 32ff 	mov.w	r2, #4294967295
 800bb78:	f7f4 ffba 	bl	8000af0 <__aeabi_dcmple>
 800bb7c:	bb30      	cbnz	r0, 800bbcc <_printf_float+0xc0>
 800bb7e:	2200      	movs	r2, #0
 800bb80:	2300      	movs	r3, #0
 800bb82:	4640      	mov	r0, r8
 800bb84:	4649      	mov	r1, r9
 800bb86:	f7f4 ffa9 	bl	8000adc <__aeabi_dcmplt>
 800bb8a:	b110      	cbz	r0, 800bb92 <_printf_float+0x86>
 800bb8c:	232d      	movs	r3, #45	@ 0x2d
 800bb8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb92:	4a91      	ldr	r2, [pc, #580]	@ (800bdd8 <_printf_float+0x2cc>)
 800bb94:	4b91      	ldr	r3, [pc, #580]	@ (800bddc <_printf_float+0x2d0>)
 800bb96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bb9a:	bf94      	ite	ls
 800bb9c:	4690      	movls	r8, r2
 800bb9e:	4698      	movhi	r8, r3
 800bba0:	2303      	movs	r3, #3
 800bba2:	6123      	str	r3, [r4, #16]
 800bba4:	f02b 0304 	bic.w	r3, fp, #4
 800bba8:	6023      	str	r3, [r4, #0]
 800bbaa:	f04f 0900 	mov.w	r9, #0
 800bbae:	9700      	str	r7, [sp, #0]
 800bbb0:	4633      	mov	r3, r6
 800bbb2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bbb4:	4621      	mov	r1, r4
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	f000 f9d2 	bl	800bf60 <_printf_common>
 800bbbc:	3001      	adds	r0, #1
 800bbbe:	f040 808d 	bne.w	800bcdc <_printf_float+0x1d0>
 800bbc2:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc6:	b00d      	add	sp, #52	@ 0x34
 800bbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbcc:	4642      	mov	r2, r8
 800bbce:	464b      	mov	r3, r9
 800bbd0:	4640      	mov	r0, r8
 800bbd2:	4649      	mov	r1, r9
 800bbd4:	f7f4 ffaa 	bl	8000b2c <__aeabi_dcmpun>
 800bbd8:	b140      	cbz	r0, 800bbec <_printf_float+0xe0>
 800bbda:	464b      	mov	r3, r9
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	bfbc      	itt	lt
 800bbe0:	232d      	movlt	r3, #45	@ 0x2d
 800bbe2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bbe6:	4a7e      	ldr	r2, [pc, #504]	@ (800bde0 <_printf_float+0x2d4>)
 800bbe8:	4b7e      	ldr	r3, [pc, #504]	@ (800bde4 <_printf_float+0x2d8>)
 800bbea:	e7d4      	b.n	800bb96 <_printf_float+0x8a>
 800bbec:	6863      	ldr	r3, [r4, #4]
 800bbee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bbf2:	9206      	str	r2, [sp, #24]
 800bbf4:	1c5a      	adds	r2, r3, #1
 800bbf6:	d13b      	bne.n	800bc70 <_printf_float+0x164>
 800bbf8:	2306      	movs	r3, #6
 800bbfa:	6063      	str	r3, [r4, #4]
 800bbfc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bc00:	2300      	movs	r3, #0
 800bc02:	6022      	str	r2, [r4, #0]
 800bc04:	9303      	str	r3, [sp, #12]
 800bc06:	ab0a      	add	r3, sp, #40	@ 0x28
 800bc08:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bc0c:	ab09      	add	r3, sp, #36	@ 0x24
 800bc0e:	9300      	str	r3, [sp, #0]
 800bc10:	6861      	ldr	r1, [r4, #4]
 800bc12:	ec49 8b10 	vmov	d0, r8, r9
 800bc16:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bc1a:	4628      	mov	r0, r5
 800bc1c:	f7ff fed6 	bl	800b9cc <__cvt>
 800bc20:	9b06      	ldr	r3, [sp, #24]
 800bc22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bc24:	2b47      	cmp	r3, #71	@ 0x47
 800bc26:	4680      	mov	r8, r0
 800bc28:	d129      	bne.n	800bc7e <_printf_float+0x172>
 800bc2a:	1cc8      	adds	r0, r1, #3
 800bc2c:	db02      	blt.n	800bc34 <_printf_float+0x128>
 800bc2e:	6863      	ldr	r3, [r4, #4]
 800bc30:	4299      	cmp	r1, r3
 800bc32:	dd41      	ble.n	800bcb8 <_printf_float+0x1ac>
 800bc34:	f1aa 0a02 	sub.w	sl, sl, #2
 800bc38:	fa5f fa8a 	uxtb.w	sl, sl
 800bc3c:	3901      	subs	r1, #1
 800bc3e:	4652      	mov	r2, sl
 800bc40:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bc44:	9109      	str	r1, [sp, #36]	@ 0x24
 800bc46:	f7ff ff26 	bl	800ba96 <__exponent>
 800bc4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc4c:	1813      	adds	r3, r2, r0
 800bc4e:	2a01      	cmp	r2, #1
 800bc50:	4681      	mov	r9, r0
 800bc52:	6123      	str	r3, [r4, #16]
 800bc54:	dc02      	bgt.n	800bc5c <_printf_float+0x150>
 800bc56:	6822      	ldr	r2, [r4, #0]
 800bc58:	07d2      	lsls	r2, r2, #31
 800bc5a:	d501      	bpl.n	800bc60 <_printf_float+0x154>
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	6123      	str	r3, [r4, #16]
 800bc60:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d0a2      	beq.n	800bbae <_printf_float+0xa2>
 800bc68:	232d      	movs	r3, #45	@ 0x2d
 800bc6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc6e:	e79e      	b.n	800bbae <_printf_float+0xa2>
 800bc70:	9a06      	ldr	r2, [sp, #24]
 800bc72:	2a47      	cmp	r2, #71	@ 0x47
 800bc74:	d1c2      	bne.n	800bbfc <_printf_float+0xf0>
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d1c0      	bne.n	800bbfc <_printf_float+0xf0>
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e7bd      	b.n	800bbfa <_printf_float+0xee>
 800bc7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bc82:	d9db      	bls.n	800bc3c <_printf_float+0x130>
 800bc84:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bc88:	d118      	bne.n	800bcbc <_printf_float+0x1b0>
 800bc8a:	2900      	cmp	r1, #0
 800bc8c:	6863      	ldr	r3, [r4, #4]
 800bc8e:	dd0b      	ble.n	800bca8 <_printf_float+0x19c>
 800bc90:	6121      	str	r1, [r4, #16]
 800bc92:	b913      	cbnz	r3, 800bc9a <_printf_float+0x18e>
 800bc94:	6822      	ldr	r2, [r4, #0]
 800bc96:	07d0      	lsls	r0, r2, #31
 800bc98:	d502      	bpl.n	800bca0 <_printf_float+0x194>
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	440b      	add	r3, r1
 800bc9e:	6123      	str	r3, [r4, #16]
 800bca0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bca2:	f04f 0900 	mov.w	r9, #0
 800bca6:	e7db      	b.n	800bc60 <_printf_float+0x154>
 800bca8:	b913      	cbnz	r3, 800bcb0 <_printf_float+0x1a4>
 800bcaa:	6822      	ldr	r2, [r4, #0]
 800bcac:	07d2      	lsls	r2, r2, #31
 800bcae:	d501      	bpl.n	800bcb4 <_printf_float+0x1a8>
 800bcb0:	3302      	adds	r3, #2
 800bcb2:	e7f4      	b.n	800bc9e <_printf_float+0x192>
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	e7f2      	b.n	800bc9e <_printf_float+0x192>
 800bcb8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bcbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcbe:	4299      	cmp	r1, r3
 800bcc0:	db05      	blt.n	800bcce <_printf_float+0x1c2>
 800bcc2:	6823      	ldr	r3, [r4, #0]
 800bcc4:	6121      	str	r1, [r4, #16]
 800bcc6:	07d8      	lsls	r0, r3, #31
 800bcc8:	d5ea      	bpl.n	800bca0 <_printf_float+0x194>
 800bcca:	1c4b      	adds	r3, r1, #1
 800bccc:	e7e7      	b.n	800bc9e <_printf_float+0x192>
 800bcce:	2900      	cmp	r1, #0
 800bcd0:	bfd4      	ite	le
 800bcd2:	f1c1 0202 	rsble	r2, r1, #2
 800bcd6:	2201      	movgt	r2, #1
 800bcd8:	4413      	add	r3, r2
 800bcda:	e7e0      	b.n	800bc9e <_printf_float+0x192>
 800bcdc:	6823      	ldr	r3, [r4, #0]
 800bcde:	055a      	lsls	r2, r3, #21
 800bce0:	d407      	bmi.n	800bcf2 <_printf_float+0x1e6>
 800bce2:	6923      	ldr	r3, [r4, #16]
 800bce4:	4642      	mov	r2, r8
 800bce6:	4631      	mov	r1, r6
 800bce8:	4628      	mov	r0, r5
 800bcea:	47b8      	blx	r7
 800bcec:	3001      	adds	r0, #1
 800bcee:	d12b      	bne.n	800bd48 <_printf_float+0x23c>
 800bcf0:	e767      	b.n	800bbc2 <_printf_float+0xb6>
 800bcf2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bcf6:	f240 80dd 	bls.w	800beb4 <_printf_float+0x3a8>
 800bcfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bcfe:	2200      	movs	r2, #0
 800bd00:	2300      	movs	r3, #0
 800bd02:	f7f4 fee1 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd06:	2800      	cmp	r0, #0
 800bd08:	d033      	beq.n	800bd72 <_printf_float+0x266>
 800bd0a:	4a37      	ldr	r2, [pc, #220]	@ (800bde8 <_printf_float+0x2dc>)
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	4631      	mov	r1, r6
 800bd10:	4628      	mov	r0, r5
 800bd12:	47b8      	blx	r7
 800bd14:	3001      	adds	r0, #1
 800bd16:	f43f af54 	beq.w	800bbc2 <_printf_float+0xb6>
 800bd1a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bd1e:	4543      	cmp	r3, r8
 800bd20:	db02      	blt.n	800bd28 <_printf_float+0x21c>
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	07d8      	lsls	r0, r3, #31
 800bd26:	d50f      	bpl.n	800bd48 <_printf_float+0x23c>
 800bd28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd2c:	4631      	mov	r1, r6
 800bd2e:	4628      	mov	r0, r5
 800bd30:	47b8      	blx	r7
 800bd32:	3001      	adds	r0, #1
 800bd34:	f43f af45 	beq.w	800bbc2 <_printf_float+0xb6>
 800bd38:	f04f 0900 	mov.w	r9, #0
 800bd3c:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd40:	f104 0a1a 	add.w	sl, r4, #26
 800bd44:	45c8      	cmp	r8, r9
 800bd46:	dc09      	bgt.n	800bd5c <_printf_float+0x250>
 800bd48:	6823      	ldr	r3, [r4, #0]
 800bd4a:	079b      	lsls	r3, r3, #30
 800bd4c:	f100 8103 	bmi.w	800bf56 <_printf_float+0x44a>
 800bd50:	68e0      	ldr	r0, [r4, #12]
 800bd52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd54:	4298      	cmp	r0, r3
 800bd56:	bfb8      	it	lt
 800bd58:	4618      	movlt	r0, r3
 800bd5a:	e734      	b.n	800bbc6 <_printf_float+0xba>
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	4652      	mov	r2, sl
 800bd60:	4631      	mov	r1, r6
 800bd62:	4628      	mov	r0, r5
 800bd64:	47b8      	blx	r7
 800bd66:	3001      	adds	r0, #1
 800bd68:	f43f af2b 	beq.w	800bbc2 <_printf_float+0xb6>
 800bd6c:	f109 0901 	add.w	r9, r9, #1
 800bd70:	e7e8      	b.n	800bd44 <_printf_float+0x238>
 800bd72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	dc39      	bgt.n	800bdec <_printf_float+0x2e0>
 800bd78:	4a1b      	ldr	r2, [pc, #108]	@ (800bde8 <_printf_float+0x2dc>)
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	4631      	mov	r1, r6
 800bd7e:	4628      	mov	r0, r5
 800bd80:	47b8      	blx	r7
 800bd82:	3001      	adds	r0, #1
 800bd84:	f43f af1d 	beq.w	800bbc2 <_printf_float+0xb6>
 800bd88:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bd8c:	ea59 0303 	orrs.w	r3, r9, r3
 800bd90:	d102      	bne.n	800bd98 <_printf_float+0x28c>
 800bd92:	6823      	ldr	r3, [r4, #0]
 800bd94:	07d9      	lsls	r1, r3, #31
 800bd96:	d5d7      	bpl.n	800bd48 <_printf_float+0x23c>
 800bd98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd9c:	4631      	mov	r1, r6
 800bd9e:	4628      	mov	r0, r5
 800bda0:	47b8      	blx	r7
 800bda2:	3001      	adds	r0, #1
 800bda4:	f43f af0d 	beq.w	800bbc2 <_printf_float+0xb6>
 800bda8:	f04f 0a00 	mov.w	sl, #0
 800bdac:	f104 0b1a 	add.w	fp, r4, #26
 800bdb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdb2:	425b      	negs	r3, r3
 800bdb4:	4553      	cmp	r3, sl
 800bdb6:	dc01      	bgt.n	800bdbc <_printf_float+0x2b0>
 800bdb8:	464b      	mov	r3, r9
 800bdba:	e793      	b.n	800bce4 <_printf_float+0x1d8>
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	465a      	mov	r2, fp
 800bdc0:	4631      	mov	r1, r6
 800bdc2:	4628      	mov	r0, r5
 800bdc4:	47b8      	blx	r7
 800bdc6:	3001      	adds	r0, #1
 800bdc8:	f43f aefb 	beq.w	800bbc2 <_printf_float+0xb6>
 800bdcc:	f10a 0a01 	add.w	sl, sl, #1
 800bdd0:	e7ee      	b.n	800bdb0 <_printf_float+0x2a4>
 800bdd2:	bf00      	nop
 800bdd4:	7fefffff 	.word	0x7fefffff
 800bdd8:	0800eb3c 	.word	0x0800eb3c
 800bddc:	0800eb40 	.word	0x0800eb40
 800bde0:	0800eb44 	.word	0x0800eb44
 800bde4:	0800eb48 	.word	0x0800eb48
 800bde8:	0800eb4c 	.word	0x0800eb4c
 800bdec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bdee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bdf2:	4553      	cmp	r3, sl
 800bdf4:	bfa8      	it	ge
 800bdf6:	4653      	movge	r3, sl
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	4699      	mov	r9, r3
 800bdfc:	dc36      	bgt.n	800be6c <_printf_float+0x360>
 800bdfe:	f04f 0b00 	mov.w	fp, #0
 800be02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be06:	f104 021a 	add.w	r2, r4, #26
 800be0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800be0c:	9306      	str	r3, [sp, #24]
 800be0e:	eba3 0309 	sub.w	r3, r3, r9
 800be12:	455b      	cmp	r3, fp
 800be14:	dc31      	bgt.n	800be7a <_printf_float+0x36e>
 800be16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be18:	459a      	cmp	sl, r3
 800be1a:	dc3a      	bgt.n	800be92 <_printf_float+0x386>
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	07da      	lsls	r2, r3, #31
 800be20:	d437      	bmi.n	800be92 <_printf_float+0x386>
 800be22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be24:	ebaa 0903 	sub.w	r9, sl, r3
 800be28:	9b06      	ldr	r3, [sp, #24]
 800be2a:	ebaa 0303 	sub.w	r3, sl, r3
 800be2e:	4599      	cmp	r9, r3
 800be30:	bfa8      	it	ge
 800be32:	4699      	movge	r9, r3
 800be34:	f1b9 0f00 	cmp.w	r9, #0
 800be38:	dc33      	bgt.n	800bea2 <_printf_float+0x396>
 800be3a:	f04f 0800 	mov.w	r8, #0
 800be3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be42:	f104 0b1a 	add.w	fp, r4, #26
 800be46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be48:	ebaa 0303 	sub.w	r3, sl, r3
 800be4c:	eba3 0309 	sub.w	r3, r3, r9
 800be50:	4543      	cmp	r3, r8
 800be52:	f77f af79 	ble.w	800bd48 <_printf_float+0x23c>
 800be56:	2301      	movs	r3, #1
 800be58:	465a      	mov	r2, fp
 800be5a:	4631      	mov	r1, r6
 800be5c:	4628      	mov	r0, r5
 800be5e:	47b8      	blx	r7
 800be60:	3001      	adds	r0, #1
 800be62:	f43f aeae 	beq.w	800bbc2 <_printf_float+0xb6>
 800be66:	f108 0801 	add.w	r8, r8, #1
 800be6a:	e7ec      	b.n	800be46 <_printf_float+0x33a>
 800be6c:	4642      	mov	r2, r8
 800be6e:	4631      	mov	r1, r6
 800be70:	4628      	mov	r0, r5
 800be72:	47b8      	blx	r7
 800be74:	3001      	adds	r0, #1
 800be76:	d1c2      	bne.n	800bdfe <_printf_float+0x2f2>
 800be78:	e6a3      	b.n	800bbc2 <_printf_float+0xb6>
 800be7a:	2301      	movs	r3, #1
 800be7c:	4631      	mov	r1, r6
 800be7e:	4628      	mov	r0, r5
 800be80:	9206      	str	r2, [sp, #24]
 800be82:	47b8      	blx	r7
 800be84:	3001      	adds	r0, #1
 800be86:	f43f ae9c 	beq.w	800bbc2 <_printf_float+0xb6>
 800be8a:	9a06      	ldr	r2, [sp, #24]
 800be8c:	f10b 0b01 	add.w	fp, fp, #1
 800be90:	e7bb      	b.n	800be0a <_printf_float+0x2fe>
 800be92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be96:	4631      	mov	r1, r6
 800be98:	4628      	mov	r0, r5
 800be9a:	47b8      	blx	r7
 800be9c:	3001      	adds	r0, #1
 800be9e:	d1c0      	bne.n	800be22 <_printf_float+0x316>
 800bea0:	e68f      	b.n	800bbc2 <_printf_float+0xb6>
 800bea2:	9a06      	ldr	r2, [sp, #24]
 800bea4:	464b      	mov	r3, r9
 800bea6:	4442      	add	r2, r8
 800bea8:	4631      	mov	r1, r6
 800beaa:	4628      	mov	r0, r5
 800beac:	47b8      	blx	r7
 800beae:	3001      	adds	r0, #1
 800beb0:	d1c3      	bne.n	800be3a <_printf_float+0x32e>
 800beb2:	e686      	b.n	800bbc2 <_printf_float+0xb6>
 800beb4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800beb8:	f1ba 0f01 	cmp.w	sl, #1
 800bebc:	dc01      	bgt.n	800bec2 <_printf_float+0x3b6>
 800bebe:	07db      	lsls	r3, r3, #31
 800bec0:	d536      	bpl.n	800bf30 <_printf_float+0x424>
 800bec2:	2301      	movs	r3, #1
 800bec4:	4642      	mov	r2, r8
 800bec6:	4631      	mov	r1, r6
 800bec8:	4628      	mov	r0, r5
 800beca:	47b8      	blx	r7
 800becc:	3001      	adds	r0, #1
 800bece:	f43f ae78 	beq.w	800bbc2 <_printf_float+0xb6>
 800bed2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bed6:	4631      	mov	r1, r6
 800bed8:	4628      	mov	r0, r5
 800beda:	47b8      	blx	r7
 800bedc:	3001      	adds	r0, #1
 800bede:	f43f ae70 	beq.w	800bbc2 <_printf_float+0xb6>
 800bee2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bee6:	2200      	movs	r2, #0
 800bee8:	2300      	movs	r3, #0
 800beea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800beee:	f7f4 fdeb 	bl	8000ac8 <__aeabi_dcmpeq>
 800bef2:	b9c0      	cbnz	r0, 800bf26 <_printf_float+0x41a>
 800bef4:	4653      	mov	r3, sl
 800bef6:	f108 0201 	add.w	r2, r8, #1
 800befa:	4631      	mov	r1, r6
 800befc:	4628      	mov	r0, r5
 800befe:	47b8      	blx	r7
 800bf00:	3001      	adds	r0, #1
 800bf02:	d10c      	bne.n	800bf1e <_printf_float+0x412>
 800bf04:	e65d      	b.n	800bbc2 <_printf_float+0xb6>
 800bf06:	2301      	movs	r3, #1
 800bf08:	465a      	mov	r2, fp
 800bf0a:	4631      	mov	r1, r6
 800bf0c:	4628      	mov	r0, r5
 800bf0e:	47b8      	blx	r7
 800bf10:	3001      	adds	r0, #1
 800bf12:	f43f ae56 	beq.w	800bbc2 <_printf_float+0xb6>
 800bf16:	f108 0801 	add.w	r8, r8, #1
 800bf1a:	45d0      	cmp	r8, sl
 800bf1c:	dbf3      	blt.n	800bf06 <_printf_float+0x3fa>
 800bf1e:	464b      	mov	r3, r9
 800bf20:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bf24:	e6df      	b.n	800bce6 <_printf_float+0x1da>
 800bf26:	f04f 0800 	mov.w	r8, #0
 800bf2a:	f104 0b1a 	add.w	fp, r4, #26
 800bf2e:	e7f4      	b.n	800bf1a <_printf_float+0x40e>
 800bf30:	2301      	movs	r3, #1
 800bf32:	4642      	mov	r2, r8
 800bf34:	e7e1      	b.n	800befa <_printf_float+0x3ee>
 800bf36:	2301      	movs	r3, #1
 800bf38:	464a      	mov	r2, r9
 800bf3a:	4631      	mov	r1, r6
 800bf3c:	4628      	mov	r0, r5
 800bf3e:	47b8      	blx	r7
 800bf40:	3001      	adds	r0, #1
 800bf42:	f43f ae3e 	beq.w	800bbc2 <_printf_float+0xb6>
 800bf46:	f108 0801 	add.w	r8, r8, #1
 800bf4a:	68e3      	ldr	r3, [r4, #12]
 800bf4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf4e:	1a5b      	subs	r3, r3, r1
 800bf50:	4543      	cmp	r3, r8
 800bf52:	dcf0      	bgt.n	800bf36 <_printf_float+0x42a>
 800bf54:	e6fc      	b.n	800bd50 <_printf_float+0x244>
 800bf56:	f04f 0800 	mov.w	r8, #0
 800bf5a:	f104 0919 	add.w	r9, r4, #25
 800bf5e:	e7f4      	b.n	800bf4a <_printf_float+0x43e>

0800bf60 <_printf_common>:
 800bf60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf64:	4616      	mov	r6, r2
 800bf66:	4698      	mov	r8, r3
 800bf68:	688a      	ldr	r2, [r1, #8]
 800bf6a:	690b      	ldr	r3, [r1, #16]
 800bf6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf70:	4293      	cmp	r3, r2
 800bf72:	bfb8      	it	lt
 800bf74:	4613      	movlt	r3, r2
 800bf76:	6033      	str	r3, [r6, #0]
 800bf78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bf7c:	4607      	mov	r7, r0
 800bf7e:	460c      	mov	r4, r1
 800bf80:	b10a      	cbz	r2, 800bf86 <_printf_common+0x26>
 800bf82:	3301      	adds	r3, #1
 800bf84:	6033      	str	r3, [r6, #0]
 800bf86:	6823      	ldr	r3, [r4, #0]
 800bf88:	0699      	lsls	r1, r3, #26
 800bf8a:	bf42      	ittt	mi
 800bf8c:	6833      	ldrmi	r3, [r6, #0]
 800bf8e:	3302      	addmi	r3, #2
 800bf90:	6033      	strmi	r3, [r6, #0]
 800bf92:	6825      	ldr	r5, [r4, #0]
 800bf94:	f015 0506 	ands.w	r5, r5, #6
 800bf98:	d106      	bne.n	800bfa8 <_printf_common+0x48>
 800bf9a:	f104 0a19 	add.w	sl, r4, #25
 800bf9e:	68e3      	ldr	r3, [r4, #12]
 800bfa0:	6832      	ldr	r2, [r6, #0]
 800bfa2:	1a9b      	subs	r3, r3, r2
 800bfa4:	42ab      	cmp	r3, r5
 800bfa6:	dc26      	bgt.n	800bff6 <_printf_common+0x96>
 800bfa8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bfac:	6822      	ldr	r2, [r4, #0]
 800bfae:	3b00      	subs	r3, #0
 800bfb0:	bf18      	it	ne
 800bfb2:	2301      	movne	r3, #1
 800bfb4:	0692      	lsls	r2, r2, #26
 800bfb6:	d42b      	bmi.n	800c010 <_printf_common+0xb0>
 800bfb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bfbc:	4641      	mov	r1, r8
 800bfbe:	4638      	mov	r0, r7
 800bfc0:	47c8      	blx	r9
 800bfc2:	3001      	adds	r0, #1
 800bfc4:	d01e      	beq.n	800c004 <_printf_common+0xa4>
 800bfc6:	6823      	ldr	r3, [r4, #0]
 800bfc8:	6922      	ldr	r2, [r4, #16]
 800bfca:	f003 0306 	and.w	r3, r3, #6
 800bfce:	2b04      	cmp	r3, #4
 800bfd0:	bf02      	ittt	eq
 800bfd2:	68e5      	ldreq	r5, [r4, #12]
 800bfd4:	6833      	ldreq	r3, [r6, #0]
 800bfd6:	1aed      	subeq	r5, r5, r3
 800bfd8:	68a3      	ldr	r3, [r4, #8]
 800bfda:	bf0c      	ite	eq
 800bfdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bfe0:	2500      	movne	r5, #0
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	bfc4      	itt	gt
 800bfe6:	1a9b      	subgt	r3, r3, r2
 800bfe8:	18ed      	addgt	r5, r5, r3
 800bfea:	2600      	movs	r6, #0
 800bfec:	341a      	adds	r4, #26
 800bfee:	42b5      	cmp	r5, r6
 800bff0:	d11a      	bne.n	800c028 <_printf_common+0xc8>
 800bff2:	2000      	movs	r0, #0
 800bff4:	e008      	b.n	800c008 <_printf_common+0xa8>
 800bff6:	2301      	movs	r3, #1
 800bff8:	4652      	mov	r2, sl
 800bffa:	4641      	mov	r1, r8
 800bffc:	4638      	mov	r0, r7
 800bffe:	47c8      	blx	r9
 800c000:	3001      	adds	r0, #1
 800c002:	d103      	bne.n	800c00c <_printf_common+0xac>
 800c004:	f04f 30ff 	mov.w	r0, #4294967295
 800c008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c00c:	3501      	adds	r5, #1
 800c00e:	e7c6      	b.n	800bf9e <_printf_common+0x3e>
 800c010:	18e1      	adds	r1, r4, r3
 800c012:	1c5a      	adds	r2, r3, #1
 800c014:	2030      	movs	r0, #48	@ 0x30
 800c016:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c01a:	4422      	add	r2, r4
 800c01c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c020:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c024:	3302      	adds	r3, #2
 800c026:	e7c7      	b.n	800bfb8 <_printf_common+0x58>
 800c028:	2301      	movs	r3, #1
 800c02a:	4622      	mov	r2, r4
 800c02c:	4641      	mov	r1, r8
 800c02e:	4638      	mov	r0, r7
 800c030:	47c8      	blx	r9
 800c032:	3001      	adds	r0, #1
 800c034:	d0e6      	beq.n	800c004 <_printf_common+0xa4>
 800c036:	3601      	adds	r6, #1
 800c038:	e7d9      	b.n	800bfee <_printf_common+0x8e>
	...

0800c03c <_printf_i>:
 800c03c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c040:	7e0f      	ldrb	r7, [r1, #24]
 800c042:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c044:	2f78      	cmp	r7, #120	@ 0x78
 800c046:	4691      	mov	r9, r2
 800c048:	4680      	mov	r8, r0
 800c04a:	460c      	mov	r4, r1
 800c04c:	469a      	mov	sl, r3
 800c04e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c052:	d807      	bhi.n	800c064 <_printf_i+0x28>
 800c054:	2f62      	cmp	r7, #98	@ 0x62
 800c056:	d80a      	bhi.n	800c06e <_printf_i+0x32>
 800c058:	2f00      	cmp	r7, #0
 800c05a:	f000 80d2 	beq.w	800c202 <_printf_i+0x1c6>
 800c05e:	2f58      	cmp	r7, #88	@ 0x58
 800c060:	f000 80b9 	beq.w	800c1d6 <_printf_i+0x19a>
 800c064:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c068:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c06c:	e03a      	b.n	800c0e4 <_printf_i+0xa8>
 800c06e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c072:	2b15      	cmp	r3, #21
 800c074:	d8f6      	bhi.n	800c064 <_printf_i+0x28>
 800c076:	a101      	add	r1, pc, #4	@ (adr r1, 800c07c <_printf_i+0x40>)
 800c078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c07c:	0800c0d5 	.word	0x0800c0d5
 800c080:	0800c0e9 	.word	0x0800c0e9
 800c084:	0800c065 	.word	0x0800c065
 800c088:	0800c065 	.word	0x0800c065
 800c08c:	0800c065 	.word	0x0800c065
 800c090:	0800c065 	.word	0x0800c065
 800c094:	0800c0e9 	.word	0x0800c0e9
 800c098:	0800c065 	.word	0x0800c065
 800c09c:	0800c065 	.word	0x0800c065
 800c0a0:	0800c065 	.word	0x0800c065
 800c0a4:	0800c065 	.word	0x0800c065
 800c0a8:	0800c1e9 	.word	0x0800c1e9
 800c0ac:	0800c113 	.word	0x0800c113
 800c0b0:	0800c1a3 	.word	0x0800c1a3
 800c0b4:	0800c065 	.word	0x0800c065
 800c0b8:	0800c065 	.word	0x0800c065
 800c0bc:	0800c20b 	.word	0x0800c20b
 800c0c0:	0800c065 	.word	0x0800c065
 800c0c4:	0800c113 	.word	0x0800c113
 800c0c8:	0800c065 	.word	0x0800c065
 800c0cc:	0800c065 	.word	0x0800c065
 800c0d0:	0800c1ab 	.word	0x0800c1ab
 800c0d4:	6833      	ldr	r3, [r6, #0]
 800c0d6:	1d1a      	adds	r2, r3, #4
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	6032      	str	r2, [r6, #0]
 800c0dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c0e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	e09d      	b.n	800c224 <_printf_i+0x1e8>
 800c0e8:	6833      	ldr	r3, [r6, #0]
 800c0ea:	6820      	ldr	r0, [r4, #0]
 800c0ec:	1d19      	adds	r1, r3, #4
 800c0ee:	6031      	str	r1, [r6, #0]
 800c0f0:	0606      	lsls	r6, r0, #24
 800c0f2:	d501      	bpl.n	800c0f8 <_printf_i+0xbc>
 800c0f4:	681d      	ldr	r5, [r3, #0]
 800c0f6:	e003      	b.n	800c100 <_printf_i+0xc4>
 800c0f8:	0645      	lsls	r5, r0, #25
 800c0fa:	d5fb      	bpl.n	800c0f4 <_printf_i+0xb8>
 800c0fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c100:	2d00      	cmp	r5, #0
 800c102:	da03      	bge.n	800c10c <_printf_i+0xd0>
 800c104:	232d      	movs	r3, #45	@ 0x2d
 800c106:	426d      	negs	r5, r5
 800c108:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c10c:	4859      	ldr	r0, [pc, #356]	@ (800c274 <_printf_i+0x238>)
 800c10e:	230a      	movs	r3, #10
 800c110:	e011      	b.n	800c136 <_printf_i+0xfa>
 800c112:	6821      	ldr	r1, [r4, #0]
 800c114:	6833      	ldr	r3, [r6, #0]
 800c116:	0608      	lsls	r0, r1, #24
 800c118:	f853 5b04 	ldr.w	r5, [r3], #4
 800c11c:	d402      	bmi.n	800c124 <_printf_i+0xe8>
 800c11e:	0649      	lsls	r1, r1, #25
 800c120:	bf48      	it	mi
 800c122:	b2ad      	uxthmi	r5, r5
 800c124:	2f6f      	cmp	r7, #111	@ 0x6f
 800c126:	4853      	ldr	r0, [pc, #332]	@ (800c274 <_printf_i+0x238>)
 800c128:	6033      	str	r3, [r6, #0]
 800c12a:	bf14      	ite	ne
 800c12c:	230a      	movne	r3, #10
 800c12e:	2308      	moveq	r3, #8
 800c130:	2100      	movs	r1, #0
 800c132:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c136:	6866      	ldr	r6, [r4, #4]
 800c138:	60a6      	str	r6, [r4, #8]
 800c13a:	2e00      	cmp	r6, #0
 800c13c:	bfa2      	ittt	ge
 800c13e:	6821      	ldrge	r1, [r4, #0]
 800c140:	f021 0104 	bicge.w	r1, r1, #4
 800c144:	6021      	strge	r1, [r4, #0]
 800c146:	b90d      	cbnz	r5, 800c14c <_printf_i+0x110>
 800c148:	2e00      	cmp	r6, #0
 800c14a:	d04b      	beq.n	800c1e4 <_printf_i+0x1a8>
 800c14c:	4616      	mov	r6, r2
 800c14e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c152:	fb03 5711 	mls	r7, r3, r1, r5
 800c156:	5dc7      	ldrb	r7, [r0, r7]
 800c158:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c15c:	462f      	mov	r7, r5
 800c15e:	42bb      	cmp	r3, r7
 800c160:	460d      	mov	r5, r1
 800c162:	d9f4      	bls.n	800c14e <_printf_i+0x112>
 800c164:	2b08      	cmp	r3, #8
 800c166:	d10b      	bne.n	800c180 <_printf_i+0x144>
 800c168:	6823      	ldr	r3, [r4, #0]
 800c16a:	07df      	lsls	r7, r3, #31
 800c16c:	d508      	bpl.n	800c180 <_printf_i+0x144>
 800c16e:	6923      	ldr	r3, [r4, #16]
 800c170:	6861      	ldr	r1, [r4, #4]
 800c172:	4299      	cmp	r1, r3
 800c174:	bfde      	ittt	le
 800c176:	2330      	movle	r3, #48	@ 0x30
 800c178:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c17c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c180:	1b92      	subs	r2, r2, r6
 800c182:	6122      	str	r2, [r4, #16]
 800c184:	f8cd a000 	str.w	sl, [sp]
 800c188:	464b      	mov	r3, r9
 800c18a:	aa03      	add	r2, sp, #12
 800c18c:	4621      	mov	r1, r4
 800c18e:	4640      	mov	r0, r8
 800c190:	f7ff fee6 	bl	800bf60 <_printf_common>
 800c194:	3001      	adds	r0, #1
 800c196:	d14a      	bne.n	800c22e <_printf_i+0x1f2>
 800c198:	f04f 30ff 	mov.w	r0, #4294967295
 800c19c:	b004      	add	sp, #16
 800c19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1a2:	6823      	ldr	r3, [r4, #0]
 800c1a4:	f043 0320 	orr.w	r3, r3, #32
 800c1a8:	6023      	str	r3, [r4, #0]
 800c1aa:	4833      	ldr	r0, [pc, #204]	@ (800c278 <_printf_i+0x23c>)
 800c1ac:	2778      	movs	r7, #120	@ 0x78
 800c1ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c1b2:	6823      	ldr	r3, [r4, #0]
 800c1b4:	6831      	ldr	r1, [r6, #0]
 800c1b6:	061f      	lsls	r7, r3, #24
 800c1b8:	f851 5b04 	ldr.w	r5, [r1], #4
 800c1bc:	d402      	bmi.n	800c1c4 <_printf_i+0x188>
 800c1be:	065f      	lsls	r7, r3, #25
 800c1c0:	bf48      	it	mi
 800c1c2:	b2ad      	uxthmi	r5, r5
 800c1c4:	6031      	str	r1, [r6, #0]
 800c1c6:	07d9      	lsls	r1, r3, #31
 800c1c8:	bf44      	itt	mi
 800c1ca:	f043 0320 	orrmi.w	r3, r3, #32
 800c1ce:	6023      	strmi	r3, [r4, #0]
 800c1d0:	b11d      	cbz	r5, 800c1da <_printf_i+0x19e>
 800c1d2:	2310      	movs	r3, #16
 800c1d4:	e7ac      	b.n	800c130 <_printf_i+0xf4>
 800c1d6:	4827      	ldr	r0, [pc, #156]	@ (800c274 <_printf_i+0x238>)
 800c1d8:	e7e9      	b.n	800c1ae <_printf_i+0x172>
 800c1da:	6823      	ldr	r3, [r4, #0]
 800c1dc:	f023 0320 	bic.w	r3, r3, #32
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	e7f6      	b.n	800c1d2 <_printf_i+0x196>
 800c1e4:	4616      	mov	r6, r2
 800c1e6:	e7bd      	b.n	800c164 <_printf_i+0x128>
 800c1e8:	6833      	ldr	r3, [r6, #0]
 800c1ea:	6825      	ldr	r5, [r4, #0]
 800c1ec:	6961      	ldr	r1, [r4, #20]
 800c1ee:	1d18      	adds	r0, r3, #4
 800c1f0:	6030      	str	r0, [r6, #0]
 800c1f2:	062e      	lsls	r6, r5, #24
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	d501      	bpl.n	800c1fc <_printf_i+0x1c0>
 800c1f8:	6019      	str	r1, [r3, #0]
 800c1fa:	e002      	b.n	800c202 <_printf_i+0x1c6>
 800c1fc:	0668      	lsls	r0, r5, #25
 800c1fe:	d5fb      	bpl.n	800c1f8 <_printf_i+0x1bc>
 800c200:	8019      	strh	r1, [r3, #0]
 800c202:	2300      	movs	r3, #0
 800c204:	6123      	str	r3, [r4, #16]
 800c206:	4616      	mov	r6, r2
 800c208:	e7bc      	b.n	800c184 <_printf_i+0x148>
 800c20a:	6833      	ldr	r3, [r6, #0]
 800c20c:	1d1a      	adds	r2, r3, #4
 800c20e:	6032      	str	r2, [r6, #0]
 800c210:	681e      	ldr	r6, [r3, #0]
 800c212:	6862      	ldr	r2, [r4, #4]
 800c214:	2100      	movs	r1, #0
 800c216:	4630      	mov	r0, r6
 800c218:	f7f3 ffda 	bl	80001d0 <memchr>
 800c21c:	b108      	cbz	r0, 800c222 <_printf_i+0x1e6>
 800c21e:	1b80      	subs	r0, r0, r6
 800c220:	6060      	str	r0, [r4, #4]
 800c222:	6863      	ldr	r3, [r4, #4]
 800c224:	6123      	str	r3, [r4, #16]
 800c226:	2300      	movs	r3, #0
 800c228:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c22c:	e7aa      	b.n	800c184 <_printf_i+0x148>
 800c22e:	6923      	ldr	r3, [r4, #16]
 800c230:	4632      	mov	r2, r6
 800c232:	4649      	mov	r1, r9
 800c234:	4640      	mov	r0, r8
 800c236:	47d0      	blx	sl
 800c238:	3001      	adds	r0, #1
 800c23a:	d0ad      	beq.n	800c198 <_printf_i+0x15c>
 800c23c:	6823      	ldr	r3, [r4, #0]
 800c23e:	079b      	lsls	r3, r3, #30
 800c240:	d413      	bmi.n	800c26a <_printf_i+0x22e>
 800c242:	68e0      	ldr	r0, [r4, #12]
 800c244:	9b03      	ldr	r3, [sp, #12]
 800c246:	4298      	cmp	r0, r3
 800c248:	bfb8      	it	lt
 800c24a:	4618      	movlt	r0, r3
 800c24c:	e7a6      	b.n	800c19c <_printf_i+0x160>
 800c24e:	2301      	movs	r3, #1
 800c250:	4632      	mov	r2, r6
 800c252:	4649      	mov	r1, r9
 800c254:	4640      	mov	r0, r8
 800c256:	47d0      	blx	sl
 800c258:	3001      	adds	r0, #1
 800c25a:	d09d      	beq.n	800c198 <_printf_i+0x15c>
 800c25c:	3501      	adds	r5, #1
 800c25e:	68e3      	ldr	r3, [r4, #12]
 800c260:	9903      	ldr	r1, [sp, #12]
 800c262:	1a5b      	subs	r3, r3, r1
 800c264:	42ab      	cmp	r3, r5
 800c266:	dcf2      	bgt.n	800c24e <_printf_i+0x212>
 800c268:	e7eb      	b.n	800c242 <_printf_i+0x206>
 800c26a:	2500      	movs	r5, #0
 800c26c:	f104 0619 	add.w	r6, r4, #25
 800c270:	e7f5      	b.n	800c25e <_printf_i+0x222>
 800c272:	bf00      	nop
 800c274:	0800eb4e 	.word	0x0800eb4e
 800c278:	0800eb5f 	.word	0x0800eb5f

0800c27c <std>:
 800c27c:	2300      	movs	r3, #0
 800c27e:	b510      	push	{r4, lr}
 800c280:	4604      	mov	r4, r0
 800c282:	e9c0 3300 	strd	r3, r3, [r0]
 800c286:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c28a:	6083      	str	r3, [r0, #8]
 800c28c:	8181      	strh	r1, [r0, #12]
 800c28e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c290:	81c2      	strh	r2, [r0, #14]
 800c292:	6183      	str	r3, [r0, #24]
 800c294:	4619      	mov	r1, r3
 800c296:	2208      	movs	r2, #8
 800c298:	305c      	adds	r0, #92	@ 0x5c
 800c29a:	f000 f906 	bl	800c4aa <memset>
 800c29e:	4b0d      	ldr	r3, [pc, #52]	@ (800c2d4 <std+0x58>)
 800c2a0:	6263      	str	r3, [r4, #36]	@ 0x24
 800c2a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c2d8 <std+0x5c>)
 800c2a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c2a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c2dc <std+0x60>)
 800c2a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c2aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c2e0 <std+0x64>)
 800c2ac:	6323      	str	r3, [r4, #48]	@ 0x30
 800c2ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c2e4 <std+0x68>)
 800c2b0:	6224      	str	r4, [r4, #32]
 800c2b2:	429c      	cmp	r4, r3
 800c2b4:	d006      	beq.n	800c2c4 <std+0x48>
 800c2b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c2ba:	4294      	cmp	r4, r2
 800c2bc:	d002      	beq.n	800c2c4 <std+0x48>
 800c2be:	33d0      	adds	r3, #208	@ 0xd0
 800c2c0:	429c      	cmp	r4, r3
 800c2c2:	d105      	bne.n	800c2d0 <std+0x54>
 800c2c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c2c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2cc:	f000 b97a 	b.w	800c5c4 <__retarget_lock_init_recursive>
 800c2d0:	bd10      	pop	{r4, pc}
 800c2d2:	bf00      	nop
 800c2d4:	0800c425 	.word	0x0800c425
 800c2d8:	0800c447 	.word	0x0800c447
 800c2dc:	0800c47f 	.word	0x0800c47f
 800c2e0:	0800c4a3 	.word	0x0800c4a3
 800c2e4:	20000c24 	.word	0x20000c24

0800c2e8 <stdio_exit_handler>:
 800c2e8:	4a02      	ldr	r2, [pc, #8]	@ (800c2f4 <stdio_exit_handler+0xc>)
 800c2ea:	4903      	ldr	r1, [pc, #12]	@ (800c2f8 <stdio_exit_handler+0x10>)
 800c2ec:	4803      	ldr	r0, [pc, #12]	@ (800c2fc <stdio_exit_handler+0x14>)
 800c2ee:	f000 b869 	b.w	800c3c4 <_fwalk_sglue>
 800c2f2:	bf00      	nop
 800c2f4:	20000030 	.word	0x20000030
 800c2f8:	0800dd8d 	.word	0x0800dd8d
 800c2fc:	20000040 	.word	0x20000040

0800c300 <cleanup_stdio>:
 800c300:	6841      	ldr	r1, [r0, #4]
 800c302:	4b0c      	ldr	r3, [pc, #48]	@ (800c334 <cleanup_stdio+0x34>)
 800c304:	4299      	cmp	r1, r3
 800c306:	b510      	push	{r4, lr}
 800c308:	4604      	mov	r4, r0
 800c30a:	d001      	beq.n	800c310 <cleanup_stdio+0x10>
 800c30c:	f001 fd3e 	bl	800dd8c <_fflush_r>
 800c310:	68a1      	ldr	r1, [r4, #8]
 800c312:	4b09      	ldr	r3, [pc, #36]	@ (800c338 <cleanup_stdio+0x38>)
 800c314:	4299      	cmp	r1, r3
 800c316:	d002      	beq.n	800c31e <cleanup_stdio+0x1e>
 800c318:	4620      	mov	r0, r4
 800c31a:	f001 fd37 	bl	800dd8c <_fflush_r>
 800c31e:	68e1      	ldr	r1, [r4, #12]
 800c320:	4b06      	ldr	r3, [pc, #24]	@ (800c33c <cleanup_stdio+0x3c>)
 800c322:	4299      	cmp	r1, r3
 800c324:	d004      	beq.n	800c330 <cleanup_stdio+0x30>
 800c326:	4620      	mov	r0, r4
 800c328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c32c:	f001 bd2e 	b.w	800dd8c <_fflush_r>
 800c330:	bd10      	pop	{r4, pc}
 800c332:	bf00      	nop
 800c334:	20000c24 	.word	0x20000c24
 800c338:	20000c8c 	.word	0x20000c8c
 800c33c:	20000cf4 	.word	0x20000cf4

0800c340 <global_stdio_init.part.0>:
 800c340:	b510      	push	{r4, lr}
 800c342:	4b0b      	ldr	r3, [pc, #44]	@ (800c370 <global_stdio_init.part.0+0x30>)
 800c344:	4c0b      	ldr	r4, [pc, #44]	@ (800c374 <global_stdio_init.part.0+0x34>)
 800c346:	4a0c      	ldr	r2, [pc, #48]	@ (800c378 <global_stdio_init.part.0+0x38>)
 800c348:	601a      	str	r2, [r3, #0]
 800c34a:	4620      	mov	r0, r4
 800c34c:	2200      	movs	r2, #0
 800c34e:	2104      	movs	r1, #4
 800c350:	f7ff ff94 	bl	800c27c <std>
 800c354:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c358:	2201      	movs	r2, #1
 800c35a:	2109      	movs	r1, #9
 800c35c:	f7ff ff8e 	bl	800c27c <std>
 800c360:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c364:	2202      	movs	r2, #2
 800c366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c36a:	2112      	movs	r1, #18
 800c36c:	f7ff bf86 	b.w	800c27c <std>
 800c370:	20000d5c 	.word	0x20000d5c
 800c374:	20000c24 	.word	0x20000c24
 800c378:	0800c2e9 	.word	0x0800c2e9

0800c37c <__sfp_lock_acquire>:
 800c37c:	4801      	ldr	r0, [pc, #4]	@ (800c384 <__sfp_lock_acquire+0x8>)
 800c37e:	f000 b922 	b.w	800c5c6 <__retarget_lock_acquire_recursive>
 800c382:	bf00      	nop
 800c384:	20000d65 	.word	0x20000d65

0800c388 <__sfp_lock_release>:
 800c388:	4801      	ldr	r0, [pc, #4]	@ (800c390 <__sfp_lock_release+0x8>)
 800c38a:	f000 b91d 	b.w	800c5c8 <__retarget_lock_release_recursive>
 800c38e:	bf00      	nop
 800c390:	20000d65 	.word	0x20000d65

0800c394 <__sinit>:
 800c394:	b510      	push	{r4, lr}
 800c396:	4604      	mov	r4, r0
 800c398:	f7ff fff0 	bl	800c37c <__sfp_lock_acquire>
 800c39c:	6a23      	ldr	r3, [r4, #32]
 800c39e:	b11b      	cbz	r3, 800c3a8 <__sinit+0x14>
 800c3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3a4:	f7ff bff0 	b.w	800c388 <__sfp_lock_release>
 800c3a8:	4b04      	ldr	r3, [pc, #16]	@ (800c3bc <__sinit+0x28>)
 800c3aa:	6223      	str	r3, [r4, #32]
 800c3ac:	4b04      	ldr	r3, [pc, #16]	@ (800c3c0 <__sinit+0x2c>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d1f5      	bne.n	800c3a0 <__sinit+0xc>
 800c3b4:	f7ff ffc4 	bl	800c340 <global_stdio_init.part.0>
 800c3b8:	e7f2      	b.n	800c3a0 <__sinit+0xc>
 800c3ba:	bf00      	nop
 800c3bc:	0800c301 	.word	0x0800c301
 800c3c0:	20000d5c 	.word	0x20000d5c

0800c3c4 <_fwalk_sglue>:
 800c3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3c8:	4607      	mov	r7, r0
 800c3ca:	4688      	mov	r8, r1
 800c3cc:	4614      	mov	r4, r2
 800c3ce:	2600      	movs	r6, #0
 800c3d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c3d4:	f1b9 0901 	subs.w	r9, r9, #1
 800c3d8:	d505      	bpl.n	800c3e6 <_fwalk_sglue+0x22>
 800c3da:	6824      	ldr	r4, [r4, #0]
 800c3dc:	2c00      	cmp	r4, #0
 800c3de:	d1f7      	bne.n	800c3d0 <_fwalk_sglue+0xc>
 800c3e0:	4630      	mov	r0, r6
 800c3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3e6:	89ab      	ldrh	r3, [r5, #12]
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	d907      	bls.n	800c3fc <_fwalk_sglue+0x38>
 800c3ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	d003      	beq.n	800c3fc <_fwalk_sglue+0x38>
 800c3f4:	4629      	mov	r1, r5
 800c3f6:	4638      	mov	r0, r7
 800c3f8:	47c0      	blx	r8
 800c3fa:	4306      	orrs	r6, r0
 800c3fc:	3568      	adds	r5, #104	@ 0x68
 800c3fe:	e7e9      	b.n	800c3d4 <_fwalk_sglue+0x10>

0800c400 <iprintf>:
 800c400:	b40f      	push	{r0, r1, r2, r3}
 800c402:	b507      	push	{r0, r1, r2, lr}
 800c404:	4906      	ldr	r1, [pc, #24]	@ (800c420 <iprintf+0x20>)
 800c406:	ab04      	add	r3, sp, #16
 800c408:	6808      	ldr	r0, [r1, #0]
 800c40a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c40e:	6881      	ldr	r1, [r0, #8]
 800c410:	9301      	str	r3, [sp, #4]
 800c412:	f001 fb1f 	bl	800da54 <_vfiprintf_r>
 800c416:	b003      	add	sp, #12
 800c418:	f85d eb04 	ldr.w	lr, [sp], #4
 800c41c:	b004      	add	sp, #16
 800c41e:	4770      	bx	lr
 800c420:	2000003c 	.word	0x2000003c

0800c424 <__sread>:
 800c424:	b510      	push	{r4, lr}
 800c426:	460c      	mov	r4, r1
 800c428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c42c:	f000 f86c 	bl	800c508 <_read_r>
 800c430:	2800      	cmp	r0, #0
 800c432:	bfab      	itete	ge
 800c434:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c436:	89a3      	ldrhlt	r3, [r4, #12]
 800c438:	181b      	addge	r3, r3, r0
 800c43a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c43e:	bfac      	ite	ge
 800c440:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c442:	81a3      	strhlt	r3, [r4, #12]
 800c444:	bd10      	pop	{r4, pc}

0800c446 <__swrite>:
 800c446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c44a:	461f      	mov	r7, r3
 800c44c:	898b      	ldrh	r3, [r1, #12]
 800c44e:	05db      	lsls	r3, r3, #23
 800c450:	4605      	mov	r5, r0
 800c452:	460c      	mov	r4, r1
 800c454:	4616      	mov	r6, r2
 800c456:	d505      	bpl.n	800c464 <__swrite+0x1e>
 800c458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c45c:	2302      	movs	r3, #2
 800c45e:	2200      	movs	r2, #0
 800c460:	f000 f840 	bl	800c4e4 <_lseek_r>
 800c464:	89a3      	ldrh	r3, [r4, #12]
 800c466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c46a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c46e:	81a3      	strh	r3, [r4, #12]
 800c470:	4632      	mov	r2, r6
 800c472:	463b      	mov	r3, r7
 800c474:	4628      	mov	r0, r5
 800c476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c47a:	f000 b867 	b.w	800c54c <_write_r>

0800c47e <__sseek>:
 800c47e:	b510      	push	{r4, lr}
 800c480:	460c      	mov	r4, r1
 800c482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c486:	f000 f82d 	bl	800c4e4 <_lseek_r>
 800c48a:	1c43      	adds	r3, r0, #1
 800c48c:	89a3      	ldrh	r3, [r4, #12]
 800c48e:	bf15      	itete	ne
 800c490:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c492:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c496:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c49a:	81a3      	strheq	r3, [r4, #12]
 800c49c:	bf18      	it	ne
 800c49e:	81a3      	strhne	r3, [r4, #12]
 800c4a0:	bd10      	pop	{r4, pc}

0800c4a2 <__sclose>:
 800c4a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4a6:	f000 b80d 	b.w	800c4c4 <_close_r>

0800c4aa <memset>:
 800c4aa:	4402      	add	r2, r0
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d100      	bne.n	800c4b4 <memset+0xa>
 800c4b2:	4770      	bx	lr
 800c4b4:	f803 1b01 	strb.w	r1, [r3], #1
 800c4b8:	e7f9      	b.n	800c4ae <memset+0x4>
	...

0800c4bc <_localeconv_r>:
 800c4bc:	4800      	ldr	r0, [pc, #0]	@ (800c4c0 <_localeconv_r+0x4>)
 800c4be:	4770      	bx	lr
 800c4c0:	2000017c 	.word	0x2000017c

0800c4c4 <_close_r>:
 800c4c4:	b538      	push	{r3, r4, r5, lr}
 800c4c6:	4d06      	ldr	r5, [pc, #24]	@ (800c4e0 <_close_r+0x1c>)
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	4608      	mov	r0, r1
 800c4ce:	602b      	str	r3, [r5, #0]
 800c4d0:	f7f6 f9ac 	bl	800282c <_close>
 800c4d4:	1c43      	adds	r3, r0, #1
 800c4d6:	d102      	bne.n	800c4de <_close_r+0x1a>
 800c4d8:	682b      	ldr	r3, [r5, #0]
 800c4da:	b103      	cbz	r3, 800c4de <_close_r+0x1a>
 800c4dc:	6023      	str	r3, [r4, #0]
 800c4de:	bd38      	pop	{r3, r4, r5, pc}
 800c4e0:	20000d60 	.word	0x20000d60

0800c4e4 <_lseek_r>:
 800c4e4:	b538      	push	{r3, r4, r5, lr}
 800c4e6:	4d07      	ldr	r5, [pc, #28]	@ (800c504 <_lseek_r+0x20>)
 800c4e8:	4604      	mov	r4, r0
 800c4ea:	4608      	mov	r0, r1
 800c4ec:	4611      	mov	r1, r2
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	602a      	str	r2, [r5, #0]
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	f7f6 f9c1 	bl	800287a <_lseek>
 800c4f8:	1c43      	adds	r3, r0, #1
 800c4fa:	d102      	bne.n	800c502 <_lseek_r+0x1e>
 800c4fc:	682b      	ldr	r3, [r5, #0]
 800c4fe:	b103      	cbz	r3, 800c502 <_lseek_r+0x1e>
 800c500:	6023      	str	r3, [r4, #0]
 800c502:	bd38      	pop	{r3, r4, r5, pc}
 800c504:	20000d60 	.word	0x20000d60

0800c508 <_read_r>:
 800c508:	b538      	push	{r3, r4, r5, lr}
 800c50a:	4d07      	ldr	r5, [pc, #28]	@ (800c528 <_read_r+0x20>)
 800c50c:	4604      	mov	r4, r0
 800c50e:	4608      	mov	r0, r1
 800c510:	4611      	mov	r1, r2
 800c512:	2200      	movs	r2, #0
 800c514:	602a      	str	r2, [r5, #0]
 800c516:	461a      	mov	r2, r3
 800c518:	f7f6 f94f 	bl	80027ba <_read>
 800c51c:	1c43      	adds	r3, r0, #1
 800c51e:	d102      	bne.n	800c526 <_read_r+0x1e>
 800c520:	682b      	ldr	r3, [r5, #0]
 800c522:	b103      	cbz	r3, 800c526 <_read_r+0x1e>
 800c524:	6023      	str	r3, [r4, #0]
 800c526:	bd38      	pop	{r3, r4, r5, pc}
 800c528:	20000d60 	.word	0x20000d60

0800c52c <_sbrk_r>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4d06      	ldr	r5, [pc, #24]	@ (800c548 <_sbrk_r+0x1c>)
 800c530:	2300      	movs	r3, #0
 800c532:	4604      	mov	r4, r0
 800c534:	4608      	mov	r0, r1
 800c536:	602b      	str	r3, [r5, #0]
 800c538:	f7f6 f9ac 	bl	8002894 <_sbrk>
 800c53c:	1c43      	adds	r3, r0, #1
 800c53e:	d102      	bne.n	800c546 <_sbrk_r+0x1a>
 800c540:	682b      	ldr	r3, [r5, #0]
 800c542:	b103      	cbz	r3, 800c546 <_sbrk_r+0x1a>
 800c544:	6023      	str	r3, [r4, #0]
 800c546:	bd38      	pop	{r3, r4, r5, pc}
 800c548:	20000d60 	.word	0x20000d60

0800c54c <_write_r>:
 800c54c:	b538      	push	{r3, r4, r5, lr}
 800c54e:	4d07      	ldr	r5, [pc, #28]	@ (800c56c <_write_r+0x20>)
 800c550:	4604      	mov	r4, r0
 800c552:	4608      	mov	r0, r1
 800c554:	4611      	mov	r1, r2
 800c556:	2200      	movs	r2, #0
 800c558:	602a      	str	r2, [r5, #0]
 800c55a:	461a      	mov	r2, r3
 800c55c:	f7f6 f94a 	bl	80027f4 <_write>
 800c560:	1c43      	adds	r3, r0, #1
 800c562:	d102      	bne.n	800c56a <_write_r+0x1e>
 800c564:	682b      	ldr	r3, [r5, #0]
 800c566:	b103      	cbz	r3, 800c56a <_write_r+0x1e>
 800c568:	6023      	str	r3, [r4, #0]
 800c56a:	bd38      	pop	{r3, r4, r5, pc}
 800c56c:	20000d60 	.word	0x20000d60

0800c570 <__errno>:
 800c570:	4b01      	ldr	r3, [pc, #4]	@ (800c578 <__errno+0x8>)
 800c572:	6818      	ldr	r0, [r3, #0]
 800c574:	4770      	bx	lr
 800c576:	bf00      	nop
 800c578:	2000003c 	.word	0x2000003c

0800c57c <__libc_init_array>:
 800c57c:	b570      	push	{r4, r5, r6, lr}
 800c57e:	4d0d      	ldr	r5, [pc, #52]	@ (800c5b4 <__libc_init_array+0x38>)
 800c580:	4c0d      	ldr	r4, [pc, #52]	@ (800c5b8 <__libc_init_array+0x3c>)
 800c582:	1b64      	subs	r4, r4, r5
 800c584:	10a4      	asrs	r4, r4, #2
 800c586:	2600      	movs	r6, #0
 800c588:	42a6      	cmp	r6, r4
 800c58a:	d109      	bne.n	800c5a0 <__libc_init_array+0x24>
 800c58c:	4d0b      	ldr	r5, [pc, #44]	@ (800c5bc <__libc_init_array+0x40>)
 800c58e:	4c0c      	ldr	r4, [pc, #48]	@ (800c5c0 <__libc_init_array+0x44>)
 800c590:	f002 f900 	bl	800e794 <_init>
 800c594:	1b64      	subs	r4, r4, r5
 800c596:	10a4      	asrs	r4, r4, #2
 800c598:	2600      	movs	r6, #0
 800c59a:	42a6      	cmp	r6, r4
 800c59c:	d105      	bne.n	800c5aa <__libc_init_array+0x2e>
 800c59e:	bd70      	pop	{r4, r5, r6, pc}
 800c5a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5a4:	4798      	blx	r3
 800c5a6:	3601      	adds	r6, #1
 800c5a8:	e7ee      	b.n	800c588 <__libc_init_array+0xc>
 800c5aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5ae:	4798      	blx	r3
 800c5b0:	3601      	adds	r6, #1
 800c5b2:	e7f2      	b.n	800c59a <__libc_init_array+0x1e>
 800c5b4:	0800eeb8 	.word	0x0800eeb8
 800c5b8:	0800eeb8 	.word	0x0800eeb8
 800c5bc:	0800eeb8 	.word	0x0800eeb8
 800c5c0:	0800eebc 	.word	0x0800eebc

0800c5c4 <__retarget_lock_init_recursive>:
 800c5c4:	4770      	bx	lr

0800c5c6 <__retarget_lock_acquire_recursive>:
 800c5c6:	4770      	bx	lr

0800c5c8 <__retarget_lock_release_recursive>:
 800c5c8:	4770      	bx	lr

0800c5ca <quorem>:
 800c5ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ce:	6903      	ldr	r3, [r0, #16]
 800c5d0:	690c      	ldr	r4, [r1, #16]
 800c5d2:	42a3      	cmp	r3, r4
 800c5d4:	4607      	mov	r7, r0
 800c5d6:	db7e      	blt.n	800c6d6 <quorem+0x10c>
 800c5d8:	3c01      	subs	r4, #1
 800c5da:	f101 0814 	add.w	r8, r1, #20
 800c5de:	00a3      	lsls	r3, r4, #2
 800c5e0:	f100 0514 	add.w	r5, r0, #20
 800c5e4:	9300      	str	r3, [sp, #0]
 800c5e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5ea:	9301      	str	r3, [sp, #4]
 800c5ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c5fc:	fbb2 f6f3 	udiv	r6, r2, r3
 800c600:	d32e      	bcc.n	800c660 <quorem+0x96>
 800c602:	f04f 0a00 	mov.w	sl, #0
 800c606:	46c4      	mov	ip, r8
 800c608:	46ae      	mov	lr, r5
 800c60a:	46d3      	mov	fp, sl
 800c60c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c610:	b298      	uxth	r0, r3
 800c612:	fb06 a000 	mla	r0, r6, r0, sl
 800c616:	0c02      	lsrs	r2, r0, #16
 800c618:	0c1b      	lsrs	r3, r3, #16
 800c61a:	fb06 2303 	mla	r3, r6, r3, r2
 800c61e:	f8de 2000 	ldr.w	r2, [lr]
 800c622:	b280      	uxth	r0, r0
 800c624:	b292      	uxth	r2, r2
 800c626:	1a12      	subs	r2, r2, r0
 800c628:	445a      	add	r2, fp
 800c62a:	f8de 0000 	ldr.w	r0, [lr]
 800c62e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c632:	b29b      	uxth	r3, r3
 800c634:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c638:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c63c:	b292      	uxth	r2, r2
 800c63e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c642:	45e1      	cmp	r9, ip
 800c644:	f84e 2b04 	str.w	r2, [lr], #4
 800c648:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c64c:	d2de      	bcs.n	800c60c <quorem+0x42>
 800c64e:	9b00      	ldr	r3, [sp, #0]
 800c650:	58eb      	ldr	r3, [r5, r3]
 800c652:	b92b      	cbnz	r3, 800c660 <quorem+0x96>
 800c654:	9b01      	ldr	r3, [sp, #4]
 800c656:	3b04      	subs	r3, #4
 800c658:	429d      	cmp	r5, r3
 800c65a:	461a      	mov	r2, r3
 800c65c:	d32f      	bcc.n	800c6be <quorem+0xf4>
 800c65e:	613c      	str	r4, [r7, #16]
 800c660:	4638      	mov	r0, r7
 800c662:	f001 f8c5 	bl	800d7f0 <__mcmp>
 800c666:	2800      	cmp	r0, #0
 800c668:	db25      	blt.n	800c6b6 <quorem+0xec>
 800c66a:	4629      	mov	r1, r5
 800c66c:	2000      	movs	r0, #0
 800c66e:	f858 2b04 	ldr.w	r2, [r8], #4
 800c672:	f8d1 c000 	ldr.w	ip, [r1]
 800c676:	fa1f fe82 	uxth.w	lr, r2
 800c67a:	fa1f f38c 	uxth.w	r3, ip
 800c67e:	eba3 030e 	sub.w	r3, r3, lr
 800c682:	4403      	add	r3, r0
 800c684:	0c12      	lsrs	r2, r2, #16
 800c686:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c68a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c68e:	b29b      	uxth	r3, r3
 800c690:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c694:	45c1      	cmp	r9, r8
 800c696:	f841 3b04 	str.w	r3, [r1], #4
 800c69a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c69e:	d2e6      	bcs.n	800c66e <quorem+0xa4>
 800c6a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c6a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c6a8:	b922      	cbnz	r2, 800c6b4 <quorem+0xea>
 800c6aa:	3b04      	subs	r3, #4
 800c6ac:	429d      	cmp	r5, r3
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	d30b      	bcc.n	800c6ca <quorem+0x100>
 800c6b2:	613c      	str	r4, [r7, #16]
 800c6b4:	3601      	adds	r6, #1
 800c6b6:	4630      	mov	r0, r6
 800c6b8:	b003      	add	sp, #12
 800c6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6be:	6812      	ldr	r2, [r2, #0]
 800c6c0:	3b04      	subs	r3, #4
 800c6c2:	2a00      	cmp	r2, #0
 800c6c4:	d1cb      	bne.n	800c65e <quorem+0x94>
 800c6c6:	3c01      	subs	r4, #1
 800c6c8:	e7c6      	b.n	800c658 <quorem+0x8e>
 800c6ca:	6812      	ldr	r2, [r2, #0]
 800c6cc:	3b04      	subs	r3, #4
 800c6ce:	2a00      	cmp	r2, #0
 800c6d0:	d1ef      	bne.n	800c6b2 <quorem+0xe8>
 800c6d2:	3c01      	subs	r4, #1
 800c6d4:	e7ea      	b.n	800c6ac <quorem+0xe2>
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	e7ee      	b.n	800c6b8 <quorem+0xee>
 800c6da:	0000      	movs	r0, r0
 800c6dc:	0000      	movs	r0, r0
	...

0800c6e0 <_dtoa_r>:
 800c6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e4:	69c7      	ldr	r7, [r0, #28]
 800c6e6:	b099      	sub	sp, #100	@ 0x64
 800c6e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c6ec:	ec55 4b10 	vmov	r4, r5, d0
 800c6f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c6f2:	9109      	str	r1, [sp, #36]	@ 0x24
 800c6f4:	4683      	mov	fp, r0
 800c6f6:	920e      	str	r2, [sp, #56]	@ 0x38
 800c6f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c6fa:	b97f      	cbnz	r7, 800c71c <_dtoa_r+0x3c>
 800c6fc:	2010      	movs	r0, #16
 800c6fe:	f7ff f8a7 	bl	800b850 <malloc>
 800c702:	4602      	mov	r2, r0
 800c704:	f8cb 001c 	str.w	r0, [fp, #28]
 800c708:	b920      	cbnz	r0, 800c714 <_dtoa_r+0x34>
 800c70a:	4ba7      	ldr	r3, [pc, #668]	@ (800c9a8 <_dtoa_r+0x2c8>)
 800c70c:	21ef      	movs	r1, #239	@ 0xef
 800c70e:	48a7      	ldr	r0, [pc, #668]	@ (800c9ac <_dtoa_r+0x2cc>)
 800c710:	f001 fc06 	bl	800df20 <__assert_func>
 800c714:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c718:	6007      	str	r7, [r0, #0]
 800c71a:	60c7      	str	r7, [r0, #12]
 800c71c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c720:	6819      	ldr	r1, [r3, #0]
 800c722:	b159      	cbz	r1, 800c73c <_dtoa_r+0x5c>
 800c724:	685a      	ldr	r2, [r3, #4]
 800c726:	604a      	str	r2, [r1, #4]
 800c728:	2301      	movs	r3, #1
 800c72a:	4093      	lsls	r3, r2
 800c72c:	608b      	str	r3, [r1, #8]
 800c72e:	4658      	mov	r0, fp
 800c730:	f000 fe24 	bl	800d37c <_Bfree>
 800c734:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c738:	2200      	movs	r2, #0
 800c73a:	601a      	str	r2, [r3, #0]
 800c73c:	1e2b      	subs	r3, r5, #0
 800c73e:	bfb9      	ittee	lt
 800c740:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c744:	9303      	strlt	r3, [sp, #12]
 800c746:	2300      	movge	r3, #0
 800c748:	6033      	strge	r3, [r6, #0]
 800c74a:	9f03      	ldr	r7, [sp, #12]
 800c74c:	4b98      	ldr	r3, [pc, #608]	@ (800c9b0 <_dtoa_r+0x2d0>)
 800c74e:	bfbc      	itt	lt
 800c750:	2201      	movlt	r2, #1
 800c752:	6032      	strlt	r2, [r6, #0]
 800c754:	43bb      	bics	r3, r7
 800c756:	d112      	bne.n	800c77e <_dtoa_r+0x9e>
 800c758:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c75a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c75e:	6013      	str	r3, [r2, #0]
 800c760:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c764:	4323      	orrs	r3, r4
 800c766:	f000 854d 	beq.w	800d204 <_dtoa_r+0xb24>
 800c76a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c76c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c9c4 <_dtoa_r+0x2e4>
 800c770:	2b00      	cmp	r3, #0
 800c772:	f000 854f 	beq.w	800d214 <_dtoa_r+0xb34>
 800c776:	f10a 0303 	add.w	r3, sl, #3
 800c77a:	f000 bd49 	b.w	800d210 <_dtoa_r+0xb30>
 800c77e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c782:	2200      	movs	r2, #0
 800c784:	ec51 0b17 	vmov	r0, r1, d7
 800c788:	2300      	movs	r3, #0
 800c78a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c78e:	f7f4 f99b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c792:	4680      	mov	r8, r0
 800c794:	b158      	cbz	r0, 800c7ae <_dtoa_r+0xce>
 800c796:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c798:	2301      	movs	r3, #1
 800c79a:	6013      	str	r3, [r2, #0]
 800c79c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c79e:	b113      	cbz	r3, 800c7a6 <_dtoa_r+0xc6>
 800c7a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c7a2:	4b84      	ldr	r3, [pc, #528]	@ (800c9b4 <_dtoa_r+0x2d4>)
 800c7a4:	6013      	str	r3, [r2, #0]
 800c7a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c9c8 <_dtoa_r+0x2e8>
 800c7aa:	f000 bd33 	b.w	800d214 <_dtoa_r+0xb34>
 800c7ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c7b2:	aa16      	add	r2, sp, #88	@ 0x58
 800c7b4:	a917      	add	r1, sp, #92	@ 0x5c
 800c7b6:	4658      	mov	r0, fp
 800c7b8:	f001 f8ca 	bl	800d950 <__d2b>
 800c7bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c7c0:	4681      	mov	r9, r0
 800c7c2:	2e00      	cmp	r6, #0
 800c7c4:	d077      	beq.n	800c8b6 <_dtoa_r+0x1d6>
 800c7c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c7c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c7cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c7d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c7d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c7dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	4b74      	ldr	r3, [pc, #464]	@ (800c9b8 <_dtoa_r+0x2d8>)
 800c7e6:	f7f3 fd4f 	bl	8000288 <__aeabi_dsub>
 800c7ea:	a369      	add	r3, pc, #420	@ (adr r3, 800c990 <_dtoa_r+0x2b0>)
 800c7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f0:	f7f3 ff02 	bl	80005f8 <__aeabi_dmul>
 800c7f4:	a368      	add	r3, pc, #416	@ (adr r3, 800c998 <_dtoa_r+0x2b8>)
 800c7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fa:	f7f3 fd47 	bl	800028c <__adddf3>
 800c7fe:	4604      	mov	r4, r0
 800c800:	4630      	mov	r0, r6
 800c802:	460d      	mov	r5, r1
 800c804:	f7f3 fe8e 	bl	8000524 <__aeabi_i2d>
 800c808:	a365      	add	r3, pc, #404	@ (adr r3, 800c9a0 <_dtoa_r+0x2c0>)
 800c80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80e:	f7f3 fef3 	bl	80005f8 <__aeabi_dmul>
 800c812:	4602      	mov	r2, r0
 800c814:	460b      	mov	r3, r1
 800c816:	4620      	mov	r0, r4
 800c818:	4629      	mov	r1, r5
 800c81a:	f7f3 fd37 	bl	800028c <__adddf3>
 800c81e:	4604      	mov	r4, r0
 800c820:	460d      	mov	r5, r1
 800c822:	f7f4 f999 	bl	8000b58 <__aeabi_d2iz>
 800c826:	2200      	movs	r2, #0
 800c828:	4607      	mov	r7, r0
 800c82a:	2300      	movs	r3, #0
 800c82c:	4620      	mov	r0, r4
 800c82e:	4629      	mov	r1, r5
 800c830:	f7f4 f954 	bl	8000adc <__aeabi_dcmplt>
 800c834:	b140      	cbz	r0, 800c848 <_dtoa_r+0x168>
 800c836:	4638      	mov	r0, r7
 800c838:	f7f3 fe74 	bl	8000524 <__aeabi_i2d>
 800c83c:	4622      	mov	r2, r4
 800c83e:	462b      	mov	r3, r5
 800c840:	f7f4 f942 	bl	8000ac8 <__aeabi_dcmpeq>
 800c844:	b900      	cbnz	r0, 800c848 <_dtoa_r+0x168>
 800c846:	3f01      	subs	r7, #1
 800c848:	2f16      	cmp	r7, #22
 800c84a:	d851      	bhi.n	800c8f0 <_dtoa_r+0x210>
 800c84c:	4b5b      	ldr	r3, [pc, #364]	@ (800c9bc <_dtoa_r+0x2dc>)
 800c84e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c856:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c85a:	f7f4 f93f 	bl	8000adc <__aeabi_dcmplt>
 800c85e:	2800      	cmp	r0, #0
 800c860:	d048      	beq.n	800c8f4 <_dtoa_r+0x214>
 800c862:	3f01      	subs	r7, #1
 800c864:	2300      	movs	r3, #0
 800c866:	9312      	str	r3, [sp, #72]	@ 0x48
 800c868:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c86a:	1b9b      	subs	r3, r3, r6
 800c86c:	1e5a      	subs	r2, r3, #1
 800c86e:	bf44      	itt	mi
 800c870:	f1c3 0801 	rsbmi	r8, r3, #1
 800c874:	2300      	movmi	r3, #0
 800c876:	9208      	str	r2, [sp, #32]
 800c878:	bf54      	ite	pl
 800c87a:	f04f 0800 	movpl.w	r8, #0
 800c87e:	9308      	strmi	r3, [sp, #32]
 800c880:	2f00      	cmp	r7, #0
 800c882:	db39      	blt.n	800c8f8 <_dtoa_r+0x218>
 800c884:	9b08      	ldr	r3, [sp, #32]
 800c886:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c888:	443b      	add	r3, r7
 800c88a:	9308      	str	r3, [sp, #32]
 800c88c:	2300      	movs	r3, #0
 800c88e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c892:	2b09      	cmp	r3, #9
 800c894:	d864      	bhi.n	800c960 <_dtoa_r+0x280>
 800c896:	2b05      	cmp	r3, #5
 800c898:	bfc4      	itt	gt
 800c89a:	3b04      	subgt	r3, #4
 800c89c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c89e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8a0:	f1a3 0302 	sub.w	r3, r3, #2
 800c8a4:	bfcc      	ite	gt
 800c8a6:	2400      	movgt	r4, #0
 800c8a8:	2401      	movle	r4, #1
 800c8aa:	2b03      	cmp	r3, #3
 800c8ac:	d863      	bhi.n	800c976 <_dtoa_r+0x296>
 800c8ae:	e8df f003 	tbb	[pc, r3]
 800c8b2:	372a      	.short	0x372a
 800c8b4:	5535      	.short	0x5535
 800c8b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c8ba:	441e      	add	r6, r3
 800c8bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c8c0:	2b20      	cmp	r3, #32
 800c8c2:	bfc1      	itttt	gt
 800c8c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c8c8:	409f      	lslgt	r7, r3
 800c8ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c8ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c8d2:	bfd6      	itet	le
 800c8d4:	f1c3 0320 	rsble	r3, r3, #32
 800c8d8:	ea47 0003 	orrgt.w	r0, r7, r3
 800c8dc:	fa04 f003 	lslle.w	r0, r4, r3
 800c8e0:	f7f3 fe10 	bl	8000504 <__aeabi_ui2d>
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c8ea:	3e01      	subs	r6, #1
 800c8ec:	9214      	str	r2, [sp, #80]	@ 0x50
 800c8ee:	e777      	b.n	800c7e0 <_dtoa_r+0x100>
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	e7b8      	b.n	800c866 <_dtoa_r+0x186>
 800c8f4:	9012      	str	r0, [sp, #72]	@ 0x48
 800c8f6:	e7b7      	b.n	800c868 <_dtoa_r+0x188>
 800c8f8:	427b      	negs	r3, r7
 800c8fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	eba8 0807 	sub.w	r8, r8, r7
 800c902:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c904:	e7c4      	b.n	800c890 <_dtoa_r+0x1b0>
 800c906:	2300      	movs	r3, #0
 800c908:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c90a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	dc35      	bgt.n	800c97c <_dtoa_r+0x29c>
 800c910:	2301      	movs	r3, #1
 800c912:	9300      	str	r3, [sp, #0]
 800c914:	9307      	str	r3, [sp, #28]
 800c916:	461a      	mov	r2, r3
 800c918:	920e      	str	r2, [sp, #56]	@ 0x38
 800c91a:	e00b      	b.n	800c934 <_dtoa_r+0x254>
 800c91c:	2301      	movs	r3, #1
 800c91e:	e7f3      	b.n	800c908 <_dtoa_r+0x228>
 800c920:	2300      	movs	r3, #0
 800c922:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c924:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c926:	18fb      	adds	r3, r7, r3
 800c928:	9300      	str	r3, [sp, #0]
 800c92a:	3301      	adds	r3, #1
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	9307      	str	r3, [sp, #28]
 800c930:	bfb8      	it	lt
 800c932:	2301      	movlt	r3, #1
 800c934:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c938:	2100      	movs	r1, #0
 800c93a:	2204      	movs	r2, #4
 800c93c:	f102 0514 	add.w	r5, r2, #20
 800c940:	429d      	cmp	r5, r3
 800c942:	d91f      	bls.n	800c984 <_dtoa_r+0x2a4>
 800c944:	6041      	str	r1, [r0, #4]
 800c946:	4658      	mov	r0, fp
 800c948:	f000 fcd8 	bl	800d2fc <_Balloc>
 800c94c:	4682      	mov	sl, r0
 800c94e:	2800      	cmp	r0, #0
 800c950:	d13c      	bne.n	800c9cc <_dtoa_r+0x2ec>
 800c952:	4b1b      	ldr	r3, [pc, #108]	@ (800c9c0 <_dtoa_r+0x2e0>)
 800c954:	4602      	mov	r2, r0
 800c956:	f240 11af 	movw	r1, #431	@ 0x1af
 800c95a:	e6d8      	b.n	800c70e <_dtoa_r+0x2e>
 800c95c:	2301      	movs	r3, #1
 800c95e:	e7e0      	b.n	800c922 <_dtoa_r+0x242>
 800c960:	2401      	movs	r4, #1
 800c962:	2300      	movs	r3, #0
 800c964:	9309      	str	r3, [sp, #36]	@ 0x24
 800c966:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c968:	f04f 33ff 	mov.w	r3, #4294967295
 800c96c:	9300      	str	r3, [sp, #0]
 800c96e:	9307      	str	r3, [sp, #28]
 800c970:	2200      	movs	r2, #0
 800c972:	2312      	movs	r3, #18
 800c974:	e7d0      	b.n	800c918 <_dtoa_r+0x238>
 800c976:	2301      	movs	r3, #1
 800c978:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c97a:	e7f5      	b.n	800c968 <_dtoa_r+0x288>
 800c97c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c97e:	9300      	str	r3, [sp, #0]
 800c980:	9307      	str	r3, [sp, #28]
 800c982:	e7d7      	b.n	800c934 <_dtoa_r+0x254>
 800c984:	3101      	adds	r1, #1
 800c986:	0052      	lsls	r2, r2, #1
 800c988:	e7d8      	b.n	800c93c <_dtoa_r+0x25c>
 800c98a:	bf00      	nop
 800c98c:	f3af 8000 	nop.w
 800c990:	636f4361 	.word	0x636f4361
 800c994:	3fd287a7 	.word	0x3fd287a7
 800c998:	8b60c8b3 	.word	0x8b60c8b3
 800c99c:	3fc68a28 	.word	0x3fc68a28
 800c9a0:	509f79fb 	.word	0x509f79fb
 800c9a4:	3fd34413 	.word	0x3fd34413
 800c9a8:	0800eb7d 	.word	0x0800eb7d
 800c9ac:	0800eb94 	.word	0x0800eb94
 800c9b0:	7ff00000 	.word	0x7ff00000
 800c9b4:	0800eb4d 	.word	0x0800eb4d
 800c9b8:	3ff80000 	.word	0x3ff80000
 800c9bc:	0800ec90 	.word	0x0800ec90
 800c9c0:	0800ebec 	.word	0x0800ebec
 800c9c4:	0800eb79 	.word	0x0800eb79
 800c9c8:	0800eb4c 	.word	0x0800eb4c
 800c9cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c9d0:	6018      	str	r0, [r3, #0]
 800c9d2:	9b07      	ldr	r3, [sp, #28]
 800c9d4:	2b0e      	cmp	r3, #14
 800c9d6:	f200 80a4 	bhi.w	800cb22 <_dtoa_r+0x442>
 800c9da:	2c00      	cmp	r4, #0
 800c9dc:	f000 80a1 	beq.w	800cb22 <_dtoa_r+0x442>
 800c9e0:	2f00      	cmp	r7, #0
 800c9e2:	dd33      	ble.n	800ca4c <_dtoa_r+0x36c>
 800c9e4:	4bad      	ldr	r3, [pc, #692]	@ (800cc9c <_dtoa_r+0x5bc>)
 800c9e6:	f007 020f 	and.w	r2, r7, #15
 800c9ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9ee:	ed93 7b00 	vldr	d7, [r3]
 800c9f2:	05f8      	lsls	r0, r7, #23
 800c9f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c9f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c9fc:	d516      	bpl.n	800ca2c <_dtoa_r+0x34c>
 800c9fe:	4ba8      	ldr	r3, [pc, #672]	@ (800cca0 <_dtoa_r+0x5c0>)
 800ca00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ca08:	f7f3 ff20 	bl	800084c <__aeabi_ddiv>
 800ca0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca10:	f004 040f 	and.w	r4, r4, #15
 800ca14:	2603      	movs	r6, #3
 800ca16:	4da2      	ldr	r5, [pc, #648]	@ (800cca0 <_dtoa_r+0x5c0>)
 800ca18:	b954      	cbnz	r4, 800ca30 <_dtoa_r+0x350>
 800ca1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca22:	f7f3 ff13 	bl	800084c <__aeabi_ddiv>
 800ca26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca2a:	e028      	b.n	800ca7e <_dtoa_r+0x39e>
 800ca2c:	2602      	movs	r6, #2
 800ca2e:	e7f2      	b.n	800ca16 <_dtoa_r+0x336>
 800ca30:	07e1      	lsls	r1, r4, #31
 800ca32:	d508      	bpl.n	800ca46 <_dtoa_r+0x366>
 800ca34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca38:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ca3c:	f7f3 fddc 	bl	80005f8 <__aeabi_dmul>
 800ca40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca44:	3601      	adds	r6, #1
 800ca46:	1064      	asrs	r4, r4, #1
 800ca48:	3508      	adds	r5, #8
 800ca4a:	e7e5      	b.n	800ca18 <_dtoa_r+0x338>
 800ca4c:	f000 80d2 	beq.w	800cbf4 <_dtoa_r+0x514>
 800ca50:	427c      	negs	r4, r7
 800ca52:	4b92      	ldr	r3, [pc, #584]	@ (800cc9c <_dtoa_r+0x5bc>)
 800ca54:	4d92      	ldr	r5, [pc, #584]	@ (800cca0 <_dtoa_r+0x5c0>)
 800ca56:	f004 020f 	and.w	r2, r4, #15
 800ca5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca66:	f7f3 fdc7 	bl	80005f8 <__aeabi_dmul>
 800ca6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca6e:	1124      	asrs	r4, r4, #4
 800ca70:	2300      	movs	r3, #0
 800ca72:	2602      	movs	r6, #2
 800ca74:	2c00      	cmp	r4, #0
 800ca76:	f040 80b2 	bne.w	800cbde <_dtoa_r+0x4fe>
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d1d3      	bne.n	800ca26 <_dtoa_r+0x346>
 800ca7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ca80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	f000 80b7 	beq.w	800cbf8 <_dtoa_r+0x518>
 800ca8a:	4b86      	ldr	r3, [pc, #536]	@ (800cca4 <_dtoa_r+0x5c4>)
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	4620      	mov	r0, r4
 800ca90:	4629      	mov	r1, r5
 800ca92:	f7f4 f823 	bl	8000adc <__aeabi_dcmplt>
 800ca96:	2800      	cmp	r0, #0
 800ca98:	f000 80ae 	beq.w	800cbf8 <_dtoa_r+0x518>
 800ca9c:	9b07      	ldr	r3, [sp, #28]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	f000 80aa 	beq.w	800cbf8 <_dtoa_r+0x518>
 800caa4:	9b00      	ldr	r3, [sp, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	dd37      	ble.n	800cb1a <_dtoa_r+0x43a>
 800caaa:	1e7b      	subs	r3, r7, #1
 800caac:	9304      	str	r3, [sp, #16]
 800caae:	4620      	mov	r0, r4
 800cab0:	4b7d      	ldr	r3, [pc, #500]	@ (800cca8 <_dtoa_r+0x5c8>)
 800cab2:	2200      	movs	r2, #0
 800cab4:	4629      	mov	r1, r5
 800cab6:	f7f3 fd9f 	bl	80005f8 <__aeabi_dmul>
 800caba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cabe:	9c00      	ldr	r4, [sp, #0]
 800cac0:	3601      	adds	r6, #1
 800cac2:	4630      	mov	r0, r6
 800cac4:	f7f3 fd2e 	bl	8000524 <__aeabi_i2d>
 800cac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cacc:	f7f3 fd94 	bl	80005f8 <__aeabi_dmul>
 800cad0:	4b76      	ldr	r3, [pc, #472]	@ (800ccac <_dtoa_r+0x5cc>)
 800cad2:	2200      	movs	r2, #0
 800cad4:	f7f3 fbda 	bl	800028c <__adddf3>
 800cad8:	4605      	mov	r5, r0
 800cada:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cade:	2c00      	cmp	r4, #0
 800cae0:	f040 808d 	bne.w	800cbfe <_dtoa_r+0x51e>
 800cae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cae8:	4b71      	ldr	r3, [pc, #452]	@ (800ccb0 <_dtoa_r+0x5d0>)
 800caea:	2200      	movs	r2, #0
 800caec:	f7f3 fbcc 	bl	8000288 <__aeabi_dsub>
 800caf0:	4602      	mov	r2, r0
 800caf2:	460b      	mov	r3, r1
 800caf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800caf8:	462a      	mov	r2, r5
 800cafa:	4633      	mov	r3, r6
 800cafc:	f7f4 f80c 	bl	8000b18 <__aeabi_dcmpgt>
 800cb00:	2800      	cmp	r0, #0
 800cb02:	f040 828b 	bne.w	800d01c <_dtoa_r+0x93c>
 800cb06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb0a:	462a      	mov	r2, r5
 800cb0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cb10:	f7f3 ffe4 	bl	8000adc <__aeabi_dcmplt>
 800cb14:	2800      	cmp	r0, #0
 800cb16:	f040 8128 	bne.w	800cd6a <_dtoa_r+0x68a>
 800cb1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cb1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cb22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	f2c0 815a 	blt.w	800cdde <_dtoa_r+0x6fe>
 800cb2a:	2f0e      	cmp	r7, #14
 800cb2c:	f300 8157 	bgt.w	800cdde <_dtoa_r+0x6fe>
 800cb30:	4b5a      	ldr	r3, [pc, #360]	@ (800cc9c <_dtoa_r+0x5bc>)
 800cb32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cb36:	ed93 7b00 	vldr	d7, [r3]
 800cb3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	ed8d 7b00 	vstr	d7, [sp]
 800cb42:	da03      	bge.n	800cb4c <_dtoa_r+0x46c>
 800cb44:	9b07      	ldr	r3, [sp, #28]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	f340 8101 	ble.w	800cd4e <_dtoa_r+0x66e>
 800cb4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cb50:	4656      	mov	r6, sl
 800cb52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb56:	4620      	mov	r0, r4
 800cb58:	4629      	mov	r1, r5
 800cb5a:	f7f3 fe77 	bl	800084c <__aeabi_ddiv>
 800cb5e:	f7f3 fffb 	bl	8000b58 <__aeabi_d2iz>
 800cb62:	4680      	mov	r8, r0
 800cb64:	f7f3 fcde 	bl	8000524 <__aeabi_i2d>
 800cb68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb6c:	f7f3 fd44 	bl	80005f8 <__aeabi_dmul>
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	4620      	mov	r0, r4
 800cb76:	4629      	mov	r1, r5
 800cb78:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cb7c:	f7f3 fb84 	bl	8000288 <__aeabi_dsub>
 800cb80:	f806 4b01 	strb.w	r4, [r6], #1
 800cb84:	9d07      	ldr	r5, [sp, #28]
 800cb86:	eba6 040a 	sub.w	r4, r6, sl
 800cb8a:	42a5      	cmp	r5, r4
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	460b      	mov	r3, r1
 800cb90:	f040 8117 	bne.w	800cdc2 <_dtoa_r+0x6e2>
 800cb94:	f7f3 fb7a 	bl	800028c <__adddf3>
 800cb98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb9c:	4604      	mov	r4, r0
 800cb9e:	460d      	mov	r5, r1
 800cba0:	f7f3 ffba 	bl	8000b18 <__aeabi_dcmpgt>
 800cba4:	2800      	cmp	r0, #0
 800cba6:	f040 80f9 	bne.w	800cd9c <_dtoa_r+0x6bc>
 800cbaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbae:	4620      	mov	r0, r4
 800cbb0:	4629      	mov	r1, r5
 800cbb2:	f7f3 ff89 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbb6:	b118      	cbz	r0, 800cbc0 <_dtoa_r+0x4e0>
 800cbb8:	f018 0f01 	tst.w	r8, #1
 800cbbc:	f040 80ee 	bne.w	800cd9c <_dtoa_r+0x6bc>
 800cbc0:	4649      	mov	r1, r9
 800cbc2:	4658      	mov	r0, fp
 800cbc4:	f000 fbda 	bl	800d37c <_Bfree>
 800cbc8:	2300      	movs	r3, #0
 800cbca:	7033      	strb	r3, [r6, #0]
 800cbcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cbce:	3701      	adds	r7, #1
 800cbd0:	601f      	str	r7, [r3, #0]
 800cbd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	f000 831d 	beq.w	800d214 <_dtoa_r+0xb34>
 800cbda:	601e      	str	r6, [r3, #0]
 800cbdc:	e31a      	b.n	800d214 <_dtoa_r+0xb34>
 800cbde:	07e2      	lsls	r2, r4, #31
 800cbe0:	d505      	bpl.n	800cbee <_dtoa_r+0x50e>
 800cbe2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cbe6:	f7f3 fd07 	bl	80005f8 <__aeabi_dmul>
 800cbea:	3601      	adds	r6, #1
 800cbec:	2301      	movs	r3, #1
 800cbee:	1064      	asrs	r4, r4, #1
 800cbf0:	3508      	adds	r5, #8
 800cbf2:	e73f      	b.n	800ca74 <_dtoa_r+0x394>
 800cbf4:	2602      	movs	r6, #2
 800cbf6:	e742      	b.n	800ca7e <_dtoa_r+0x39e>
 800cbf8:	9c07      	ldr	r4, [sp, #28]
 800cbfa:	9704      	str	r7, [sp, #16]
 800cbfc:	e761      	b.n	800cac2 <_dtoa_r+0x3e2>
 800cbfe:	4b27      	ldr	r3, [pc, #156]	@ (800cc9c <_dtoa_r+0x5bc>)
 800cc00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cc02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cc06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cc0a:	4454      	add	r4, sl
 800cc0c:	2900      	cmp	r1, #0
 800cc0e:	d053      	beq.n	800ccb8 <_dtoa_r+0x5d8>
 800cc10:	4928      	ldr	r1, [pc, #160]	@ (800ccb4 <_dtoa_r+0x5d4>)
 800cc12:	2000      	movs	r0, #0
 800cc14:	f7f3 fe1a 	bl	800084c <__aeabi_ddiv>
 800cc18:	4633      	mov	r3, r6
 800cc1a:	462a      	mov	r2, r5
 800cc1c:	f7f3 fb34 	bl	8000288 <__aeabi_dsub>
 800cc20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cc24:	4656      	mov	r6, sl
 800cc26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc2a:	f7f3 ff95 	bl	8000b58 <__aeabi_d2iz>
 800cc2e:	4605      	mov	r5, r0
 800cc30:	f7f3 fc78 	bl	8000524 <__aeabi_i2d>
 800cc34:	4602      	mov	r2, r0
 800cc36:	460b      	mov	r3, r1
 800cc38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc3c:	f7f3 fb24 	bl	8000288 <__aeabi_dsub>
 800cc40:	3530      	adds	r5, #48	@ 0x30
 800cc42:	4602      	mov	r2, r0
 800cc44:	460b      	mov	r3, r1
 800cc46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc4a:	f806 5b01 	strb.w	r5, [r6], #1
 800cc4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cc52:	f7f3 ff43 	bl	8000adc <__aeabi_dcmplt>
 800cc56:	2800      	cmp	r0, #0
 800cc58:	d171      	bne.n	800cd3e <_dtoa_r+0x65e>
 800cc5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc5e:	4911      	ldr	r1, [pc, #68]	@ (800cca4 <_dtoa_r+0x5c4>)
 800cc60:	2000      	movs	r0, #0
 800cc62:	f7f3 fb11 	bl	8000288 <__aeabi_dsub>
 800cc66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cc6a:	f7f3 ff37 	bl	8000adc <__aeabi_dcmplt>
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	f040 8095 	bne.w	800cd9e <_dtoa_r+0x6be>
 800cc74:	42a6      	cmp	r6, r4
 800cc76:	f43f af50 	beq.w	800cb1a <_dtoa_r+0x43a>
 800cc7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cc7e:	4b0a      	ldr	r3, [pc, #40]	@ (800cca8 <_dtoa_r+0x5c8>)
 800cc80:	2200      	movs	r2, #0
 800cc82:	f7f3 fcb9 	bl	80005f8 <__aeabi_dmul>
 800cc86:	4b08      	ldr	r3, [pc, #32]	@ (800cca8 <_dtoa_r+0x5c8>)
 800cc88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc92:	f7f3 fcb1 	bl	80005f8 <__aeabi_dmul>
 800cc96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc9a:	e7c4      	b.n	800cc26 <_dtoa_r+0x546>
 800cc9c:	0800ec90 	.word	0x0800ec90
 800cca0:	0800ec68 	.word	0x0800ec68
 800cca4:	3ff00000 	.word	0x3ff00000
 800cca8:	40240000 	.word	0x40240000
 800ccac:	401c0000 	.word	0x401c0000
 800ccb0:	40140000 	.word	0x40140000
 800ccb4:	3fe00000 	.word	0x3fe00000
 800ccb8:	4631      	mov	r1, r6
 800ccba:	4628      	mov	r0, r5
 800ccbc:	f7f3 fc9c 	bl	80005f8 <__aeabi_dmul>
 800ccc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ccc4:	9415      	str	r4, [sp, #84]	@ 0x54
 800ccc6:	4656      	mov	r6, sl
 800ccc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cccc:	f7f3 ff44 	bl	8000b58 <__aeabi_d2iz>
 800ccd0:	4605      	mov	r5, r0
 800ccd2:	f7f3 fc27 	bl	8000524 <__aeabi_i2d>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	460b      	mov	r3, r1
 800ccda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccde:	f7f3 fad3 	bl	8000288 <__aeabi_dsub>
 800cce2:	3530      	adds	r5, #48	@ 0x30
 800cce4:	f806 5b01 	strb.w	r5, [r6], #1
 800cce8:	4602      	mov	r2, r0
 800ccea:	460b      	mov	r3, r1
 800ccec:	42a6      	cmp	r6, r4
 800ccee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ccf2:	f04f 0200 	mov.w	r2, #0
 800ccf6:	d124      	bne.n	800cd42 <_dtoa_r+0x662>
 800ccf8:	4bac      	ldr	r3, [pc, #688]	@ (800cfac <_dtoa_r+0x8cc>)
 800ccfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ccfe:	f7f3 fac5 	bl	800028c <__adddf3>
 800cd02:	4602      	mov	r2, r0
 800cd04:	460b      	mov	r3, r1
 800cd06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd0a:	f7f3 ff05 	bl	8000b18 <__aeabi_dcmpgt>
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	d145      	bne.n	800cd9e <_dtoa_r+0x6be>
 800cd12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cd16:	49a5      	ldr	r1, [pc, #660]	@ (800cfac <_dtoa_r+0x8cc>)
 800cd18:	2000      	movs	r0, #0
 800cd1a:	f7f3 fab5 	bl	8000288 <__aeabi_dsub>
 800cd1e:	4602      	mov	r2, r0
 800cd20:	460b      	mov	r3, r1
 800cd22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd26:	f7f3 fed9 	bl	8000adc <__aeabi_dcmplt>
 800cd2a:	2800      	cmp	r0, #0
 800cd2c:	f43f aef5 	beq.w	800cb1a <_dtoa_r+0x43a>
 800cd30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cd32:	1e73      	subs	r3, r6, #1
 800cd34:	9315      	str	r3, [sp, #84]	@ 0x54
 800cd36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cd3a:	2b30      	cmp	r3, #48	@ 0x30
 800cd3c:	d0f8      	beq.n	800cd30 <_dtoa_r+0x650>
 800cd3e:	9f04      	ldr	r7, [sp, #16]
 800cd40:	e73e      	b.n	800cbc0 <_dtoa_r+0x4e0>
 800cd42:	4b9b      	ldr	r3, [pc, #620]	@ (800cfb0 <_dtoa_r+0x8d0>)
 800cd44:	f7f3 fc58 	bl	80005f8 <__aeabi_dmul>
 800cd48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd4c:	e7bc      	b.n	800ccc8 <_dtoa_r+0x5e8>
 800cd4e:	d10c      	bne.n	800cd6a <_dtoa_r+0x68a>
 800cd50:	4b98      	ldr	r3, [pc, #608]	@ (800cfb4 <_dtoa_r+0x8d4>)
 800cd52:	2200      	movs	r2, #0
 800cd54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd58:	f7f3 fc4e 	bl	80005f8 <__aeabi_dmul>
 800cd5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd60:	f7f3 fed0 	bl	8000b04 <__aeabi_dcmpge>
 800cd64:	2800      	cmp	r0, #0
 800cd66:	f000 8157 	beq.w	800d018 <_dtoa_r+0x938>
 800cd6a:	2400      	movs	r4, #0
 800cd6c:	4625      	mov	r5, r4
 800cd6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd70:	43db      	mvns	r3, r3
 800cd72:	9304      	str	r3, [sp, #16]
 800cd74:	4656      	mov	r6, sl
 800cd76:	2700      	movs	r7, #0
 800cd78:	4621      	mov	r1, r4
 800cd7a:	4658      	mov	r0, fp
 800cd7c:	f000 fafe 	bl	800d37c <_Bfree>
 800cd80:	2d00      	cmp	r5, #0
 800cd82:	d0dc      	beq.n	800cd3e <_dtoa_r+0x65e>
 800cd84:	b12f      	cbz	r7, 800cd92 <_dtoa_r+0x6b2>
 800cd86:	42af      	cmp	r7, r5
 800cd88:	d003      	beq.n	800cd92 <_dtoa_r+0x6b2>
 800cd8a:	4639      	mov	r1, r7
 800cd8c:	4658      	mov	r0, fp
 800cd8e:	f000 faf5 	bl	800d37c <_Bfree>
 800cd92:	4629      	mov	r1, r5
 800cd94:	4658      	mov	r0, fp
 800cd96:	f000 faf1 	bl	800d37c <_Bfree>
 800cd9a:	e7d0      	b.n	800cd3e <_dtoa_r+0x65e>
 800cd9c:	9704      	str	r7, [sp, #16]
 800cd9e:	4633      	mov	r3, r6
 800cda0:	461e      	mov	r6, r3
 800cda2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cda6:	2a39      	cmp	r2, #57	@ 0x39
 800cda8:	d107      	bne.n	800cdba <_dtoa_r+0x6da>
 800cdaa:	459a      	cmp	sl, r3
 800cdac:	d1f8      	bne.n	800cda0 <_dtoa_r+0x6c0>
 800cdae:	9a04      	ldr	r2, [sp, #16]
 800cdb0:	3201      	adds	r2, #1
 800cdb2:	9204      	str	r2, [sp, #16]
 800cdb4:	2230      	movs	r2, #48	@ 0x30
 800cdb6:	f88a 2000 	strb.w	r2, [sl]
 800cdba:	781a      	ldrb	r2, [r3, #0]
 800cdbc:	3201      	adds	r2, #1
 800cdbe:	701a      	strb	r2, [r3, #0]
 800cdc0:	e7bd      	b.n	800cd3e <_dtoa_r+0x65e>
 800cdc2:	4b7b      	ldr	r3, [pc, #492]	@ (800cfb0 <_dtoa_r+0x8d0>)
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	f7f3 fc17 	bl	80005f8 <__aeabi_dmul>
 800cdca:	2200      	movs	r2, #0
 800cdcc:	2300      	movs	r3, #0
 800cdce:	4604      	mov	r4, r0
 800cdd0:	460d      	mov	r5, r1
 800cdd2:	f7f3 fe79 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	f43f aebb 	beq.w	800cb52 <_dtoa_r+0x472>
 800cddc:	e6f0      	b.n	800cbc0 <_dtoa_r+0x4e0>
 800cdde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cde0:	2a00      	cmp	r2, #0
 800cde2:	f000 80db 	beq.w	800cf9c <_dtoa_r+0x8bc>
 800cde6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cde8:	2a01      	cmp	r2, #1
 800cdea:	f300 80bf 	bgt.w	800cf6c <_dtoa_r+0x88c>
 800cdee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cdf0:	2a00      	cmp	r2, #0
 800cdf2:	f000 80b7 	beq.w	800cf64 <_dtoa_r+0x884>
 800cdf6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cdfa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cdfc:	4646      	mov	r6, r8
 800cdfe:	9a08      	ldr	r2, [sp, #32]
 800ce00:	2101      	movs	r1, #1
 800ce02:	441a      	add	r2, r3
 800ce04:	4658      	mov	r0, fp
 800ce06:	4498      	add	r8, r3
 800ce08:	9208      	str	r2, [sp, #32]
 800ce0a:	f000 fb6b 	bl	800d4e4 <__i2b>
 800ce0e:	4605      	mov	r5, r0
 800ce10:	b15e      	cbz	r6, 800ce2a <_dtoa_r+0x74a>
 800ce12:	9b08      	ldr	r3, [sp, #32]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	dd08      	ble.n	800ce2a <_dtoa_r+0x74a>
 800ce18:	42b3      	cmp	r3, r6
 800ce1a:	9a08      	ldr	r2, [sp, #32]
 800ce1c:	bfa8      	it	ge
 800ce1e:	4633      	movge	r3, r6
 800ce20:	eba8 0803 	sub.w	r8, r8, r3
 800ce24:	1af6      	subs	r6, r6, r3
 800ce26:	1ad3      	subs	r3, r2, r3
 800ce28:	9308      	str	r3, [sp, #32]
 800ce2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce2c:	b1f3      	cbz	r3, 800ce6c <_dtoa_r+0x78c>
 800ce2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	f000 80b7 	beq.w	800cfa4 <_dtoa_r+0x8c4>
 800ce36:	b18c      	cbz	r4, 800ce5c <_dtoa_r+0x77c>
 800ce38:	4629      	mov	r1, r5
 800ce3a:	4622      	mov	r2, r4
 800ce3c:	4658      	mov	r0, fp
 800ce3e:	f000 fc11 	bl	800d664 <__pow5mult>
 800ce42:	464a      	mov	r2, r9
 800ce44:	4601      	mov	r1, r0
 800ce46:	4605      	mov	r5, r0
 800ce48:	4658      	mov	r0, fp
 800ce4a:	f000 fb61 	bl	800d510 <__multiply>
 800ce4e:	4649      	mov	r1, r9
 800ce50:	9004      	str	r0, [sp, #16]
 800ce52:	4658      	mov	r0, fp
 800ce54:	f000 fa92 	bl	800d37c <_Bfree>
 800ce58:	9b04      	ldr	r3, [sp, #16]
 800ce5a:	4699      	mov	r9, r3
 800ce5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce5e:	1b1a      	subs	r2, r3, r4
 800ce60:	d004      	beq.n	800ce6c <_dtoa_r+0x78c>
 800ce62:	4649      	mov	r1, r9
 800ce64:	4658      	mov	r0, fp
 800ce66:	f000 fbfd 	bl	800d664 <__pow5mult>
 800ce6a:	4681      	mov	r9, r0
 800ce6c:	2101      	movs	r1, #1
 800ce6e:	4658      	mov	r0, fp
 800ce70:	f000 fb38 	bl	800d4e4 <__i2b>
 800ce74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce76:	4604      	mov	r4, r0
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	f000 81cf 	beq.w	800d21c <_dtoa_r+0xb3c>
 800ce7e:	461a      	mov	r2, r3
 800ce80:	4601      	mov	r1, r0
 800ce82:	4658      	mov	r0, fp
 800ce84:	f000 fbee 	bl	800d664 <__pow5mult>
 800ce88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	4604      	mov	r4, r0
 800ce8e:	f300 8095 	bgt.w	800cfbc <_dtoa_r+0x8dc>
 800ce92:	9b02      	ldr	r3, [sp, #8]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	f040 8087 	bne.w	800cfa8 <_dtoa_r+0x8c8>
 800ce9a:	9b03      	ldr	r3, [sp, #12]
 800ce9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f040 8089 	bne.w	800cfb8 <_dtoa_r+0x8d8>
 800cea6:	9b03      	ldr	r3, [sp, #12]
 800cea8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ceac:	0d1b      	lsrs	r3, r3, #20
 800ceae:	051b      	lsls	r3, r3, #20
 800ceb0:	b12b      	cbz	r3, 800cebe <_dtoa_r+0x7de>
 800ceb2:	9b08      	ldr	r3, [sp, #32]
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	9308      	str	r3, [sp, #32]
 800ceb8:	f108 0801 	add.w	r8, r8, #1
 800cebc:	2301      	movs	r3, #1
 800cebe:	930a      	str	r3, [sp, #40]	@ 0x28
 800cec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	f000 81b0 	beq.w	800d228 <_dtoa_r+0xb48>
 800cec8:	6923      	ldr	r3, [r4, #16]
 800ceca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cece:	6918      	ldr	r0, [r3, #16]
 800ced0:	f000 fabc 	bl	800d44c <__hi0bits>
 800ced4:	f1c0 0020 	rsb	r0, r0, #32
 800ced8:	9b08      	ldr	r3, [sp, #32]
 800ceda:	4418      	add	r0, r3
 800cedc:	f010 001f 	ands.w	r0, r0, #31
 800cee0:	d077      	beq.n	800cfd2 <_dtoa_r+0x8f2>
 800cee2:	f1c0 0320 	rsb	r3, r0, #32
 800cee6:	2b04      	cmp	r3, #4
 800cee8:	dd6b      	ble.n	800cfc2 <_dtoa_r+0x8e2>
 800ceea:	9b08      	ldr	r3, [sp, #32]
 800ceec:	f1c0 001c 	rsb	r0, r0, #28
 800cef0:	4403      	add	r3, r0
 800cef2:	4480      	add	r8, r0
 800cef4:	4406      	add	r6, r0
 800cef6:	9308      	str	r3, [sp, #32]
 800cef8:	f1b8 0f00 	cmp.w	r8, #0
 800cefc:	dd05      	ble.n	800cf0a <_dtoa_r+0x82a>
 800cefe:	4649      	mov	r1, r9
 800cf00:	4642      	mov	r2, r8
 800cf02:	4658      	mov	r0, fp
 800cf04:	f000 fc08 	bl	800d718 <__lshift>
 800cf08:	4681      	mov	r9, r0
 800cf0a:	9b08      	ldr	r3, [sp, #32]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	dd05      	ble.n	800cf1c <_dtoa_r+0x83c>
 800cf10:	4621      	mov	r1, r4
 800cf12:	461a      	mov	r2, r3
 800cf14:	4658      	mov	r0, fp
 800cf16:	f000 fbff 	bl	800d718 <__lshift>
 800cf1a:	4604      	mov	r4, r0
 800cf1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d059      	beq.n	800cfd6 <_dtoa_r+0x8f6>
 800cf22:	4621      	mov	r1, r4
 800cf24:	4648      	mov	r0, r9
 800cf26:	f000 fc63 	bl	800d7f0 <__mcmp>
 800cf2a:	2800      	cmp	r0, #0
 800cf2c:	da53      	bge.n	800cfd6 <_dtoa_r+0x8f6>
 800cf2e:	1e7b      	subs	r3, r7, #1
 800cf30:	9304      	str	r3, [sp, #16]
 800cf32:	4649      	mov	r1, r9
 800cf34:	2300      	movs	r3, #0
 800cf36:	220a      	movs	r2, #10
 800cf38:	4658      	mov	r0, fp
 800cf3a:	f000 fa41 	bl	800d3c0 <__multadd>
 800cf3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf40:	4681      	mov	r9, r0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f000 8172 	beq.w	800d22c <_dtoa_r+0xb4c>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	4629      	mov	r1, r5
 800cf4c:	220a      	movs	r2, #10
 800cf4e:	4658      	mov	r0, fp
 800cf50:	f000 fa36 	bl	800d3c0 <__multadd>
 800cf54:	9b00      	ldr	r3, [sp, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	4605      	mov	r5, r0
 800cf5a:	dc67      	bgt.n	800d02c <_dtoa_r+0x94c>
 800cf5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf5e:	2b02      	cmp	r3, #2
 800cf60:	dc41      	bgt.n	800cfe6 <_dtoa_r+0x906>
 800cf62:	e063      	b.n	800d02c <_dtoa_r+0x94c>
 800cf64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cf66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cf6a:	e746      	b.n	800cdfa <_dtoa_r+0x71a>
 800cf6c:	9b07      	ldr	r3, [sp, #28]
 800cf6e:	1e5c      	subs	r4, r3, #1
 800cf70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf72:	42a3      	cmp	r3, r4
 800cf74:	bfbf      	itttt	lt
 800cf76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cf78:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800cf7a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cf7c:	1ae3      	sublt	r3, r4, r3
 800cf7e:	bfb4      	ite	lt
 800cf80:	18d2      	addlt	r2, r2, r3
 800cf82:	1b1c      	subge	r4, r3, r4
 800cf84:	9b07      	ldr	r3, [sp, #28]
 800cf86:	bfbc      	itt	lt
 800cf88:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800cf8a:	2400      	movlt	r4, #0
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	bfb5      	itete	lt
 800cf90:	eba8 0603 	sublt.w	r6, r8, r3
 800cf94:	9b07      	ldrge	r3, [sp, #28]
 800cf96:	2300      	movlt	r3, #0
 800cf98:	4646      	movge	r6, r8
 800cf9a:	e730      	b.n	800cdfe <_dtoa_r+0x71e>
 800cf9c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cf9e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cfa0:	4646      	mov	r6, r8
 800cfa2:	e735      	b.n	800ce10 <_dtoa_r+0x730>
 800cfa4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cfa6:	e75c      	b.n	800ce62 <_dtoa_r+0x782>
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	e788      	b.n	800cebe <_dtoa_r+0x7de>
 800cfac:	3fe00000 	.word	0x3fe00000
 800cfb0:	40240000 	.word	0x40240000
 800cfb4:	40140000 	.word	0x40140000
 800cfb8:	9b02      	ldr	r3, [sp, #8]
 800cfba:	e780      	b.n	800cebe <_dtoa_r+0x7de>
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfc0:	e782      	b.n	800cec8 <_dtoa_r+0x7e8>
 800cfc2:	d099      	beq.n	800cef8 <_dtoa_r+0x818>
 800cfc4:	9a08      	ldr	r2, [sp, #32]
 800cfc6:	331c      	adds	r3, #28
 800cfc8:	441a      	add	r2, r3
 800cfca:	4498      	add	r8, r3
 800cfcc:	441e      	add	r6, r3
 800cfce:	9208      	str	r2, [sp, #32]
 800cfd0:	e792      	b.n	800cef8 <_dtoa_r+0x818>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	e7f6      	b.n	800cfc4 <_dtoa_r+0x8e4>
 800cfd6:	9b07      	ldr	r3, [sp, #28]
 800cfd8:	9704      	str	r7, [sp, #16]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	dc20      	bgt.n	800d020 <_dtoa_r+0x940>
 800cfde:	9300      	str	r3, [sp, #0]
 800cfe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfe2:	2b02      	cmp	r3, #2
 800cfe4:	dd1e      	ble.n	800d024 <_dtoa_r+0x944>
 800cfe6:	9b00      	ldr	r3, [sp, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	f47f aec0 	bne.w	800cd6e <_dtoa_r+0x68e>
 800cfee:	4621      	mov	r1, r4
 800cff0:	2205      	movs	r2, #5
 800cff2:	4658      	mov	r0, fp
 800cff4:	f000 f9e4 	bl	800d3c0 <__multadd>
 800cff8:	4601      	mov	r1, r0
 800cffa:	4604      	mov	r4, r0
 800cffc:	4648      	mov	r0, r9
 800cffe:	f000 fbf7 	bl	800d7f0 <__mcmp>
 800d002:	2800      	cmp	r0, #0
 800d004:	f77f aeb3 	ble.w	800cd6e <_dtoa_r+0x68e>
 800d008:	4656      	mov	r6, sl
 800d00a:	2331      	movs	r3, #49	@ 0x31
 800d00c:	f806 3b01 	strb.w	r3, [r6], #1
 800d010:	9b04      	ldr	r3, [sp, #16]
 800d012:	3301      	adds	r3, #1
 800d014:	9304      	str	r3, [sp, #16]
 800d016:	e6ae      	b.n	800cd76 <_dtoa_r+0x696>
 800d018:	9c07      	ldr	r4, [sp, #28]
 800d01a:	9704      	str	r7, [sp, #16]
 800d01c:	4625      	mov	r5, r4
 800d01e:	e7f3      	b.n	800d008 <_dtoa_r+0x928>
 800d020:	9b07      	ldr	r3, [sp, #28]
 800d022:	9300      	str	r3, [sp, #0]
 800d024:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d026:	2b00      	cmp	r3, #0
 800d028:	f000 8104 	beq.w	800d234 <_dtoa_r+0xb54>
 800d02c:	2e00      	cmp	r6, #0
 800d02e:	dd05      	ble.n	800d03c <_dtoa_r+0x95c>
 800d030:	4629      	mov	r1, r5
 800d032:	4632      	mov	r2, r6
 800d034:	4658      	mov	r0, fp
 800d036:	f000 fb6f 	bl	800d718 <__lshift>
 800d03a:	4605      	mov	r5, r0
 800d03c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d05a      	beq.n	800d0f8 <_dtoa_r+0xa18>
 800d042:	6869      	ldr	r1, [r5, #4]
 800d044:	4658      	mov	r0, fp
 800d046:	f000 f959 	bl	800d2fc <_Balloc>
 800d04a:	4606      	mov	r6, r0
 800d04c:	b928      	cbnz	r0, 800d05a <_dtoa_r+0x97a>
 800d04e:	4b84      	ldr	r3, [pc, #528]	@ (800d260 <_dtoa_r+0xb80>)
 800d050:	4602      	mov	r2, r0
 800d052:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d056:	f7ff bb5a 	b.w	800c70e <_dtoa_r+0x2e>
 800d05a:	692a      	ldr	r2, [r5, #16]
 800d05c:	3202      	adds	r2, #2
 800d05e:	0092      	lsls	r2, r2, #2
 800d060:	f105 010c 	add.w	r1, r5, #12
 800d064:	300c      	adds	r0, #12
 800d066:	f000 ff4d 	bl	800df04 <memcpy>
 800d06a:	2201      	movs	r2, #1
 800d06c:	4631      	mov	r1, r6
 800d06e:	4658      	mov	r0, fp
 800d070:	f000 fb52 	bl	800d718 <__lshift>
 800d074:	f10a 0301 	add.w	r3, sl, #1
 800d078:	9307      	str	r3, [sp, #28]
 800d07a:	9b00      	ldr	r3, [sp, #0]
 800d07c:	4453      	add	r3, sl
 800d07e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d080:	9b02      	ldr	r3, [sp, #8]
 800d082:	f003 0301 	and.w	r3, r3, #1
 800d086:	462f      	mov	r7, r5
 800d088:	930a      	str	r3, [sp, #40]	@ 0x28
 800d08a:	4605      	mov	r5, r0
 800d08c:	9b07      	ldr	r3, [sp, #28]
 800d08e:	4621      	mov	r1, r4
 800d090:	3b01      	subs	r3, #1
 800d092:	4648      	mov	r0, r9
 800d094:	9300      	str	r3, [sp, #0]
 800d096:	f7ff fa98 	bl	800c5ca <quorem>
 800d09a:	4639      	mov	r1, r7
 800d09c:	9002      	str	r0, [sp, #8]
 800d09e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d0a2:	4648      	mov	r0, r9
 800d0a4:	f000 fba4 	bl	800d7f0 <__mcmp>
 800d0a8:	462a      	mov	r2, r5
 800d0aa:	9008      	str	r0, [sp, #32]
 800d0ac:	4621      	mov	r1, r4
 800d0ae:	4658      	mov	r0, fp
 800d0b0:	f000 fbba 	bl	800d828 <__mdiff>
 800d0b4:	68c2      	ldr	r2, [r0, #12]
 800d0b6:	4606      	mov	r6, r0
 800d0b8:	bb02      	cbnz	r2, 800d0fc <_dtoa_r+0xa1c>
 800d0ba:	4601      	mov	r1, r0
 800d0bc:	4648      	mov	r0, r9
 800d0be:	f000 fb97 	bl	800d7f0 <__mcmp>
 800d0c2:	4602      	mov	r2, r0
 800d0c4:	4631      	mov	r1, r6
 800d0c6:	4658      	mov	r0, fp
 800d0c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d0ca:	f000 f957 	bl	800d37c <_Bfree>
 800d0ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0d2:	9e07      	ldr	r6, [sp, #28]
 800d0d4:	ea43 0102 	orr.w	r1, r3, r2
 800d0d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0da:	4319      	orrs	r1, r3
 800d0dc:	d110      	bne.n	800d100 <_dtoa_r+0xa20>
 800d0de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d0e2:	d029      	beq.n	800d138 <_dtoa_r+0xa58>
 800d0e4:	9b08      	ldr	r3, [sp, #32]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	dd02      	ble.n	800d0f0 <_dtoa_r+0xa10>
 800d0ea:	9b02      	ldr	r3, [sp, #8]
 800d0ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d0f0:	9b00      	ldr	r3, [sp, #0]
 800d0f2:	f883 8000 	strb.w	r8, [r3]
 800d0f6:	e63f      	b.n	800cd78 <_dtoa_r+0x698>
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	e7bb      	b.n	800d074 <_dtoa_r+0x994>
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	e7e1      	b.n	800d0c4 <_dtoa_r+0x9e4>
 800d100:	9b08      	ldr	r3, [sp, #32]
 800d102:	2b00      	cmp	r3, #0
 800d104:	db04      	blt.n	800d110 <_dtoa_r+0xa30>
 800d106:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d108:	430b      	orrs	r3, r1
 800d10a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d10c:	430b      	orrs	r3, r1
 800d10e:	d120      	bne.n	800d152 <_dtoa_r+0xa72>
 800d110:	2a00      	cmp	r2, #0
 800d112:	dded      	ble.n	800d0f0 <_dtoa_r+0xa10>
 800d114:	4649      	mov	r1, r9
 800d116:	2201      	movs	r2, #1
 800d118:	4658      	mov	r0, fp
 800d11a:	f000 fafd 	bl	800d718 <__lshift>
 800d11e:	4621      	mov	r1, r4
 800d120:	4681      	mov	r9, r0
 800d122:	f000 fb65 	bl	800d7f0 <__mcmp>
 800d126:	2800      	cmp	r0, #0
 800d128:	dc03      	bgt.n	800d132 <_dtoa_r+0xa52>
 800d12a:	d1e1      	bne.n	800d0f0 <_dtoa_r+0xa10>
 800d12c:	f018 0f01 	tst.w	r8, #1
 800d130:	d0de      	beq.n	800d0f0 <_dtoa_r+0xa10>
 800d132:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d136:	d1d8      	bne.n	800d0ea <_dtoa_r+0xa0a>
 800d138:	9a00      	ldr	r2, [sp, #0]
 800d13a:	2339      	movs	r3, #57	@ 0x39
 800d13c:	7013      	strb	r3, [r2, #0]
 800d13e:	4633      	mov	r3, r6
 800d140:	461e      	mov	r6, r3
 800d142:	3b01      	subs	r3, #1
 800d144:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d148:	2a39      	cmp	r2, #57	@ 0x39
 800d14a:	d052      	beq.n	800d1f2 <_dtoa_r+0xb12>
 800d14c:	3201      	adds	r2, #1
 800d14e:	701a      	strb	r2, [r3, #0]
 800d150:	e612      	b.n	800cd78 <_dtoa_r+0x698>
 800d152:	2a00      	cmp	r2, #0
 800d154:	dd07      	ble.n	800d166 <_dtoa_r+0xa86>
 800d156:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d15a:	d0ed      	beq.n	800d138 <_dtoa_r+0xa58>
 800d15c:	9a00      	ldr	r2, [sp, #0]
 800d15e:	f108 0301 	add.w	r3, r8, #1
 800d162:	7013      	strb	r3, [r2, #0]
 800d164:	e608      	b.n	800cd78 <_dtoa_r+0x698>
 800d166:	9b07      	ldr	r3, [sp, #28]
 800d168:	9a07      	ldr	r2, [sp, #28]
 800d16a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d16e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d170:	4293      	cmp	r3, r2
 800d172:	d028      	beq.n	800d1c6 <_dtoa_r+0xae6>
 800d174:	4649      	mov	r1, r9
 800d176:	2300      	movs	r3, #0
 800d178:	220a      	movs	r2, #10
 800d17a:	4658      	mov	r0, fp
 800d17c:	f000 f920 	bl	800d3c0 <__multadd>
 800d180:	42af      	cmp	r7, r5
 800d182:	4681      	mov	r9, r0
 800d184:	f04f 0300 	mov.w	r3, #0
 800d188:	f04f 020a 	mov.w	r2, #10
 800d18c:	4639      	mov	r1, r7
 800d18e:	4658      	mov	r0, fp
 800d190:	d107      	bne.n	800d1a2 <_dtoa_r+0xac2>
 800d192:	f000 f915 	bl	800d3c0 <__multadd>
 800d196:	4607      	mov	r7, r0
 800d198:	4605      	mov	r5, r0
 800d19a:	9b07      	ldr	r3, [sp, #28]
 800d19c:	3301      	adds	r3, #1
 800d19e:	9307      	str	r3, [sp, #28]
 800d1a0:	e774      	b.n	800d08c <_dtoa_r+0x9ac>
 800d1a2:	f000 f90d 	bl	800d3c0 <__multadd>
 800d1a6:	4629      	mov	r1, r5
 800d1a8:	4607      	mov	r7, r0
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	220a      	movs	r2, #10
 800d1ae:	4658      	mov	r0, fp
 800d1b0:	f000 f906 	bl	800d3c0 <__multadd>
 800d1b4:	4605      	mov	r5, r0
 800d1b6:	e7f0      	b.n	800d19a <_dtoa_r+0xaba>
 800d1b8:	9b00      	ldr	r3, [sp, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	bfcc      	ite	gt
 800d1be:	461e      	movgt	r6, r3
 800d1c0:	2601      	movle	r6, #1
 800d1c2:	4456      	add	r6, sl
 800d1c4:	2700      	movs	r7, #0
 800d1c6:	4649      	mov	r1, r9
 800d1c8:	2201      	movs	r2, #1
 800d1ca:	4658      	mov	r0, fp
 800d1cc:	f000 faa4 	bl	800d718 <__lshift>
 800d1d0:	4621      	mov	r1, r4
 800d1d2:	4681      	mov	r9, r0
 800d1d4:	f000 fb0c 	bl	800d7f0 <__mcmp>
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	dcb0      	bgt.n	800d13e <_dtoa_r+0xa5e>
 800d1dc:	d102      	bne.n	800d1e4 <_dtoa_r+0xb04>
 800d1de:	f018 0f01 	tst.w	r8, #1
 800d1e2:	d1ac      	bne.n	800d13e <_dtoa_r+0xa5e>
 800d1e4:	4633      	mov	r3, r6
 800d1e6:	461e      	mov	r6, r3
 800d1e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1ec:	2a30      	cmp	r2, #48	@ 0x30
 800d1ee:	d0fa      	beq.n	800d1e6 <_dtoa_r+0xb06>
 800d1f0:	e5c2      	b.n	800cd78 <_dtoa_r+0x698>
 800d1f2:	459a      	cmp	sl, r3
 800d1f4:	d1a4      	bne.n	800d140 <_dtoa_r+0xa60>
 800d1f6:	9b04      	ldr	r3, [sp, #16]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	9304      	str	r3, [sp, #16]
 800d1fc:	2331      	movs	r3, #49	@ 0x31
 800d1fe:	f88a 3000 	strb.w	r3, [sl]
 800d202:	e5b9      	b.n	800cd78 <_dtoa_r+0x698>
 800d204:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d206:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d264 <_dtoa_r+0xb84>
 800d20a:	b11b      	cbz	r3, 800d214 <_dtoa_r+0xb34>
 800d20c:	f10a 0308 	add.w	r3, sl, #8
 800d210:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d212:	6013      	str	r3, [r2, #0]
 800d214:	4650      	mov	r0, sl
 800d216:	b019      	add	sp, #100	@ 0x64
 800d218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d21c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d21e:	2b01      	cmp	r3, #1
 800d220:	f77f ae37 	ble.w	800ce92 <_dtoa_r+0x7b2>
 800d224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d226:	930a      	str	r3, [sp, #40]	@ 0x28
 800d228:	2001      	movs	r0, #1
 800d22a:	e655      	b.n	800ced8 <_dtoa_r+0x7f8>
 800d22c:	9b00      	ldr	r3, [sp, #0]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	f77f aed6 	ble.w	800cfe0 <_dtoa_r+0x900>
 800d234:	4656      	mov	r6, sl
 800d236:	4621      	mov	r1, r4
 800d238:	4648      	mov	r0, r9
 800d23a:	f7ff f9c6 	bl	800c5ca <quorem>
 800d23e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d242:	f806 8b01 	strb.w	r8, [r6], #1
 800d246:	9b00      	ldr	r3, [sp, #0]
 800d248:	eba6 020a 	sub.w	r2, r6, sl
 800d24c:	4293      	cmp	r3, r2
 800d24e:	ddb3      	ble.n	800d1b8 <_dtoa_r+0xad8>
 800d250:	4649      	mov	r1, r9
 800d252:	2300      	movs	r3, #0
 800d254:	220a      	movs	r2, #10
 800d256:	4658      	mov	r0, fp
 800d258:	f000 f8b2 	bl	800d3c0 <__multadd>
 800d25c:	4681      	mov	r9, r0
 800d25e:	e7ea      	b.n	800d236 <_dtoa_r+0xb56>
 800d260:	0800ebec 	.word	0x0800ebec
 800d264:	0800eb70 	.word	0x0800eb70

0800d268 <_free_r>:
 800d268:	b538      	push	{r3, r4, r5, lr}
 800d26a:	4605      	mov	r5, r0
 800d26c:	2900      	cmp	r1, #0
 800d26e:	d041      	beq.n	800d2f4 <_free_r+0x8c>
 800d270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d274:	1f0c      	subs	r4, r1, #4
 800d276:	2b00      	cmp	r3, #0
 800d278:	bfb8      	it	lt
 800d27a:	18e4      	addlt	r4, r4, r3
 800d27c:	f7fe fb9a 	bl	800b9b4 <__malloc_lock>
 800d280:	4a1d      	ldr	r2, [pc, #116]	@ (800d2f8 <_free_r+0x90>)
 800d282:	6813      	ldr	r3, [r2, #0]
 800d284:	b933      	cbnz	r3, 800d294 <_free_r+0x2c>
 800d286:	6063      	str	r3, [r4, #4]
 800d288:	6014      	str	r4, [r2, #0]
 800d28a:	4628      	mov	r0, r5
 800d28c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d290:	f7fe bb96 	b.w	800b9c0 <__malloc_unlock>
 800d294:	42a3      	cmp	r3, r4
 800d296:	d908      	bls.n	800d2aa <_free_r+0x42>
 800d298:	6820      	ldr	r0, [r4, #0]
 800d29a:	1821      	adds	r1, r4, r0
 800d29c:	428b      	cmp	r3, r1
 800d29e:	bf01      	itttt	eq
 800d2a0:	6819      	ldreq	r1, [r3, #0]
 800d2a2:	685b      	ldreq	r3, [r3, #4]
 800d2a4:	1809      	addeq	r1, r1, r0
 800d2a6:	6021      	streq	r1, [r4, #0]
 800d2a8:	e7ed      	b.n	800d286 <_free_r+0x1e>
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	b10b      	cbz	r3, 800d2b4 <_free_r+0x4c>
 800d2b0:	42a3      	cmp	r3, r4
 800d2b2:	d9fa      	bls.n	800d2aa <_free_r+0x42>
 800d2b4:	6811      	ldr	r1, [r2, #0]
 800d2b6:	1850      	adds	r0, r2, r1
 800d2b8:	42a0      	cmp	r0, r4
 800d2ba:	d10b      	bne.n	800d2d4 <_free_r+0x6c>
 800d2bc:	6820      	ldr	r0, [r4, #0]
 800d2be:	4401      	add	r1, r0
 800d2c0:	1850      	adds	r0, r2, r1
 800d2c2:	4283      	cmp	r3, r0
 800d2c4:	6011      	str	r1, [r2, #0]
 800d2c6:	d1e0      	bne.n	800d28a <_free_r+0x22>
 800d2c8:	6818      	ldr	r0, [r3, #0]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	6053      	str	r3, [r2, #4]
 800d2ce:	4408      	add	r0, r1
 800d2d0:	6010      	str	r0, [r2, #0]
 800d2d2:	e7da      	b.n	800d28a <_free_r+0x22>
 800d2d4:	d902      	bls.n	800d2dc <_free_r+0x74>
 800d2d6:	230c      	movs	r3, #12
 800d2d8:	602b      	str	r3, [r5, #0]
 800d2da:	e7d6      	b.n	800d28a <_free_r+0x22>
 800d2dc:	6820      	ldr	r0, [r4, #0]
 800d2de:	1821      	adds	r1, r4, r0
 800d2e0:	428b      	cmp	r3, r1
 800d2e2:	bf04      	itt	eq
 800d2e4:	6819      	ldreq	r1, [r3, #0]
 800d2e6:	685b      	ldreq	r3, [r3, #4]
 800d2e8:	6063      	str	r3, [r4, #4]
 800d2ea:	bf04      	itt	eq
 800d2ec:	1809      	addeq	r1, r1, r0
 800d2ee:	6021      	streq	r1, [r4, #0]
 800d2f0:	6054      	str	r4, [r2, #4]
 800d2f2:	e7ca      	b.n	800d28a <_free_r+0x22>
 800d2f4:	bd38      	pop	{r3, r4, r5, pc}
 800d2f6:	bf00      	nop
 800d2f8:	20000c20 	.word	0x20000c20

0800d2fc <_Balloc>:
 800d2fc:	b570      	push	{r4, r5, r6, lr}
 800d2fe:	69c6      	ldr	r6, [r0, #28]
 800d300:	4604      	mov	r4, r0
 800d302:	460d      	mov	r5, r1
 800d304:	b976      	cbnz	r6, 800d324 <_Balloc+0x28>
 800d306:	2010      	movs	r0, #16
 800d308:	f7fe faa2 	bl	800b850 <malloc>
 800d30c:	4602      	mov	r2, r0
 800d30e:	61e0      	str	r0, [r4, #28]
 800d310:	b920      	cbnz	r0, 800d31c <_Balloc+0x20>
 800d312:	4b18      	ldr	r3, [pc, #96]	@ (800d374 <_Balloc+0x78>)
 800d314:	4818      	ldr	r0, [pc, #96]	@ (800d378 <_Balloc+0x7c>)
 800d316:	216b      	movs	r1, #107	@ 0x6b
 800d318:	f000 fe02 	bl	800df20 <__assert_func>
 800d31c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d320:	6006      	str	r6, [r0, #0]
 800d322:	60c6      	str	r6, [r0, #12]
 800d324:	69e6      	ldr	r6, [r4, #28]
 800d326:	68f3      	ldr	r3, [r6, #12]
 800d328:	b183      	cbz	r3, 800d34c <_Balloc+0x50>
 800d32a:	69e3      	ldr	r3, [r4, #28]
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d332:	b9b8      	cbnz	r0, 800d364 <_Balloc+0x68>
 800d334:	2101      	movs	r1, #1
 800d336:	fa01 f605 	lsl.w	r6, r1, r5
 800d33a:	1d72      	adds	r2, r6, #5
 800d33c:	0092      	lsls	r2, r2, #2
 800d33e:	4620      	mov	r0, r4
 800d340:	f000 fe0c 	bl	800df5c <_calloc_r>
 800d344:	b160      	cbz	r0, 800d360 <_Balloc+0x64>
 800d346:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d34a:	e00e      	b.n	800d36a <_Balloc+0x6e>
 800d34c:	2221      	movs	r2, #33	@ 0x21
 800d34e:	2104      	movs	r1, #4
 800d350:	4620      	mov	r0, r4
 800d352:	f000 fe03 	bl	800df5c <_calloc_r>
 800d356:	69e3      	ldr	r3, [r4, #28]
 800d358:	60f0      	str	r0, [r6, #12]
 800d35a:	68db      	ldr	r3, [r3, #12]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d1e4      	bne.n	800d32a <_Balloc+0x2e>
 800d360:	2000      	movs	r0, #0
 800d362:	bd70      	pop	{r4, r5, r6, pc}
 800d364:	6802      	ldr	r2, [r0, #0]
 800d366:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d36a:	2300      	movs	r3, #0
 800d36c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d370:	e7f7      	b.n	800d362 <_Balloc+0x66>
 800d372:	bf00      	nop
 800d374:	0800eb7d 	.word	0x0800eb7d
 800d378:	0800ebfd 	.word	0x0800ebfd

0800d37c <_Bfree>:
 800d37c:	b570      	push	{r4, r5, r6, lr}
 800d37e:	69c6      	ldr	r6, [r0, #28]
 800d380:	4605      	mov	r5, r0
 800d382:	460c      	mov	r4, r1
 800d384:	b976      	cbnz	r6, 800d3a4 <_Bfree+0x28>
 800d386:	2010      	movs	r0, #16
 800d388:	f7fe fa62 	bl	800b850 <malloc>
 800d38c:	4602      	mov	r2, r0
 800d38e:	61e8      	str	r0, [r5, #28]
 800d390:	b920      	cbnz	r0, 800d39c <_Bfree+0x20>
 800d392:	4b09      	ldr	r3, [pc, #36]	@ (800d3b8 <_Bfree+0x3c>)
 800d394:	4809      	ldr	r0, [pc, #36]	@ (800d3bc <_Bfree+0x40>)
 800d396:	218f      	movs	r1, #143	@ 0x8f
 800d398:	f000 fdc2 	bl	800df20 <__assert_func>
 800d39c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3a0:	6006      	str	r6, [r0, #0]
 800d3a2:	60c6      	str	r6, [r0, #12]
 800d3a4:	b13c      	cbz	r4, 800d3b6 <_Bfree+0x3a>
 800d3a6:	69eb      	ldr	r3, [r5, #28]
 800d3a8:	6862      	ldr	r2, [r4, #4]
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d3b0:	6021      	str	r1, [r4, #0]
 800d3b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d3b6:	bd70      	pop	{r4, r5, r6, pc}
 800d3b8:	0800eb7d 	.word	0x0800eb7d
 800d3bc:	0800ebfd 	.word	0x0800ebfd

0800d3c0 <__multadd>:
 800d3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3c4:	690d      	ldr	r5, [r1, #16]
 800d3c6:	4607      	mov	r7, r0
 800d3c8:	460c      	mov	r4, r1
 800d3ca:	461e      	mov	r6, r3
 800d3cc:	f101 0c14 	add.w	ip, r1, #20
 800d3d0:	2000      	movs	r0, #0
 800d3d2:	f8dc 3000 	ldr.w	r3, [ip]
 800d3d6:	b299      	uxth	r1, r3
 800d3d8:	fb02 6101 	mla	r1, r2, r1, r6
 800d3dc:	0c1e      	lsrs	r6, r3, #16
 800d3de:	0c0b      	lsrs	r3, r1, #16
 800d3e0:	fb02 3306 	mla	r3, r2, r6, r3
 800d3e4:	b289      	uxth	r1, r1
 800d3e6:	3001      	adds	r0, #1
 800d3e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d3ec:	4285      	cmp	r5, r0
 800d3ee:	f84c 1b04 	str.w	r1, [ip], #4
 800d3f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d3f6:	dcec      	bgt.n	800d3d2 <__multadd+0x12>
 800d3f8:	b30e      	cbz	r6, 800d43e <__multadd+0x7e>
 800d3fa:	68a3      	ldr	r3, [r4, #8]
 800d3fc:	42ab      	cmp	r3, r5
 800d3fe:	dc19      	bgt.n	800d434 <__multadd+0x74>
 800d400:	6861      	ldr	r1, [r4, #4]
 800d402:	4638      	mov	r0, r7
 800d404:	3101      	adds	r1, #1
 800d406:	f7ff ff79 	bl	800d2fc <_Balloc>
 800d40a:	4680      	mov	r8, r0
 800d40c:	b928      	cbnz	r0, 800d41a <__multadd+0x5a>
 800d40e:	4602      	mov	r2, r0
 800d410:	4b0c      	ldr	r3, [pc, #48]	@ (800d444 <__multadd+0x84>)
 800d412:	480d      	ldr	r0, [pc, #52]	@ (800d448 <__multadd+0x88>)
 800d414:	21ba      	movs	r1, #186	@ 0xba
 800d416:	f000 fd83 	bl	800df20 <__assert_func>
 800d41a:	6922      	ldr	r2, [r4, #16]
 800d41c:	3202      	adds	r2, #2
 800d41e:	f104 010c 	add.w	r1, r4, #12
 800d422:	0092      	lsls	r2, r2, #2
 800d424:	300c      	adds	r0, #12
 800d426:	f000 fd6d 	bl	800df04 <memcpy>
 800d42a:	4621      	mov	r1, r4
 800d42c:	4638      	mov	r0, r7
 800d42e:	f7ff ffa5 	bl	800d37c <_Bfree>
 800d432:	4644      	mov	r4, r8
 800d434:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d438:	3501      	adds	r5, #1
 800d43a:	615e      	str	r6, [r3, #20]
 800d43c:	6125      	str	r5, [r4, #16]
 800d43e:	4620      	mov	r0, r4
 800d440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d444:	0800ebec 	.word	0x0800ebec
 800d448:	0800ebfd 	.word	0x0800ebfd

0800d44c <__hi0bits>:
 800d44c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d450:	4603      	mov	r3, r0
 800d452:	bf36      	itet	cc
 800d454:	0403      	lslcc	r3, r0, #16
 800d456:	2000      	movcs	r0, #0
 800d458:	2010      	movcc	r0, #16
 800d45a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d45e:	bf3c      	itt	cc
 800d460:	021b      	lslcc	r3, r3, #8
 800d462:	3008      	addcc	r0, #8
 800d464:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d468:	bf3c      	itt	cc
 800d46a:	011b      	lslcc	r3, r3, #4
 800d46c:	3004      	addcc	r0, #4
 800d46e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d472:	bf3c      	itt	cc
 800d474:	009b      	lslcc	r3, r3, #2
 800d476:	3002      	addcc	r0, #2
 800d478:	2b00      	cmp	r3, #0
 800d47a:	db05      	blt.n	800d488 <__hi0bits+0x3c>
 800d47c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d480:	f100 0001 	add.w	r0, r0, #1
 800d484:	bf08      	it	eq
 800d486:	2020      	moveq	r0, #32
 800d488:	4770      	bx	lr

0800d48a <__lo0bits>:
 800d48a:	6803      	ldr	r3, [r0, #0]
 800d48c:	4602      	mov	r2, r0
 800d48e:	f013 0007 	ands.w	r0, r3, #7
 800d492:	d00b      	beq.n	800d4ac <__lo0bits+0x22>
 800d494:	07d9      	lsls	r1, r3, #31
 800d496:	d421      	bmi.n	800d4dc <__lo0bits+0x52>
 800d498:	0798      	lsls	r0, r3, #30
 800d49a:	bf49      	itett	mi
 800d49c:	085b      	lsrmi	r3, r3, #1
 800d49e:	089b      	lsrpl	r3, r3, #2
 800d4a0:	2001      	movmi	r0, #1
 800d4a2:	6013      	strmi	r3, [r2, #0]
 800d4a4:	bf5c      	itt	pl
 800d4a6:	6013      	strpl	r3, [r2, #0]
 800d4a8:	2002      	movpl	r0, #2
 800d4aa:	4770      	bx	lr
 800d4ac:	b299      	uxth	r1, r3
 800d4ae:	b909      	cbnz	r1, 800d4b4 <__lo0bits+0x2a>
 800d4b0:	0c1b      	lsrs	r3, r3, #16
 800d4b2:	2010      	movs	r0, #16
 800d4b4:	b2d9      	uxtb	r1, r3
 800d4b6:	b909      	cbnz	r1, 800d4bc <__lo0bits+0x32>
 800d4b8:	3008      	adds	r0, #8
 800d4ba:	0a1b      	lsrs	r3, r3, #8
 800d4bc:	0719      	lsls	r1, r3, #28
 800d4be:	bf04      	itt	eq
 800d4c0:	091b      	lsreq	r3, r3, #4
 800d4c2:	3004      	addeq	r0, #4
 800d4c4:	0799      	lsls	r1, r3, #30
 800d4c6:	bf04      	itt	eq
 800d4c8:	089b      	lsreq	r3, r3, #2
 800d4ca:	3002      	addeq	r0, #2
 800d4cc:	07d9      	lsls	r1, r3, #31
 800d4ce:	d403      	bmi.n	800d4d8 <__lo0bits+0x4e>
 800d4d0:	085b      	lsrs	r3, r3, #1
 800d4d2:	f100 0001 	add.w	r0, r0, #1
 800d4d6:	d003      	beq.n	800d4e0 <__lo0bits+0x56>
 800d4d8:	6013      	str	r3, [r2, #0]
 800d4da:	4770      	bx	lr
 800d4dc:	2000      	movs	r0, #0
 800d4de:	4770      	bx	lr
 800d4e0:	2020      	movs	r0, #32
 800d4e2:	4770      	bx	lr

0800d4e4 <__i2b>:
 800d4e4:	b510      	push	{r4, lr}
 800d4e6:	460c      	mov	r4, r1
 800d4e8:	2101      	movs	r1, #1
 800d4ea:	f7ff ff07 	bl	800d2fc <_Balloc>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	b928      	cbnz	r0, 800d4fe <__i2b+0x1a>
 800d4f2:	4b05      	ldr	r3, [pc, #20]	@ (800d508 <__i2b+0x24>)
 800d4f4:	4805      	ldr	r0, [pc, #20]	@ (800d50c <__i2b+0x28>)
 800d4f6:	f240 1145 	movw	r1, #325	@ 0x145
 800d4fa:	f000 fd11 	bl	800df20 <__assert_func>
 800d4fe:	2301      	movs	r3, #1
 800d500:	6144      	str	r4, [r0, #20]
 800d502:	6103      	str	r3, [r0, #16]
 800d504:	bd10      	pop	{r4, pc}
 800d506:	bf00      	nop
 800d508:	0800ebec 	.word	0x0800ebec
 800d50c:	0800ebfd 	.word	0x0800ebfd

0800d510 <__multiply>:
 800d510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d514:	4614      	mov	r4, r2
 800d516:	690a      	ldr	r2, [r1, #16]
 800d518:	6923      	ldr	r3, [r4, #16]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	bfa8      	it	ge
 800d51e:	4623      	movge	r3, r4
 800d520:	460f      	mov	r7, r1
 800d522:	bfa4      	itt	ge
 800d524:	460c      	movge	r4, r1
 800d526:	461f      	movge	r7, r3
 800d528:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d52c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d530:	68a3      	ldr	r3, [r4, #8]
 800d532:	6861      	ldr	r1, [r4, #4]
 800d534:	eb0a 0609 	add.w	r6, sl, r9
 800d538:	42b3      	cmp	r3, r6
 800d53a:	b085      	sub	sp, #20
 800d53c:	bfb8      	it	lt
 800d53e:	3101      	addlt	r1, #1
 800d540:	f7ff fedc 	bl	800d2fc <_Balloc>
 800d544:	b930      	cbnz	r0, 800d554 <__multiply+0x44>
 800d546:	4602      	mov	r2, r0
 800d548:	4b44      	ldr	r3, [pc, #272]	@ (800d65c <__multiply+0x14c>)
 800d54a:	4845      	ldr	r0, [pc, #276]	@ (800d660 <__multiply+0x150>)
 800d54c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d550:	f000 fce6 	bl	800df20 <__assert_func>
 800d554:	f100 0514 	add.w	r5, r0, #20
 800d558:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d55c:	462b      	mov	r3, r5
 800d55e:	2200      	movs	r2, #0
 800d560:	4543      	cmp	r3, r8
 800d562:	d321      	bcc.n	800d5a8 <__multiply+0x98>
 800d564:	f107 0114 	add.w	r1, r7, #20
 800d568:	f104 0214 	add.w	r2, r4, #20
 800d56c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d570:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d574:	9302      	str	r3, [sp, #8]
 800d576:	1b13      	subs	r3, r2, r4
 800d578:	3b15      	subs	r3, #21
 800d57a:	f023 0303 	bic.w	r3, r3, #3
 800d57e:	3304      	adds	r3, #4
 800d580:	f104 0715 	add.w	r7, r4, #21
 800d584:	42ba      	cmp	r2, r7
 800d586:	bf38      	it	cc
 800d588:	2304      	movcc	r3, #4
 800d58a:	9301      	str	r3, [sp, #4]
 800d58c:	9b02      	ldr	r3, [sp, #8]
 800d58e:	9103      	str	r1, [sp, #12]
 800d590:	428b      	cmp	r3, r1
 800d592:	d80c      	bhi.n	800d5ae <__multiply+0x9e>
 800d594:	2e00      	cmp	r6, #0
 800d596:	dd03      	ble.n	800d5a0 <__multiply+0x90>
 800d598:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d05b      	beq.n	800d658 <__multiply+0x148>
 800d5a0:	6106      	str	r6, [r0, #16]
 800d5a2:	b005      	add	sp, #20
 800d5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5a8:	f843 2b04 	str.w	r2, [r3], #4
 800d5ac:	e7d8      	b.n	800d560 <__multiply+0x50>
 800d5ae:	f8b1 a000 	ldrh.w	sl, [r1]
 800d5b2:	f1ba 0f00 	cmp.w	sl, #0
 800d5b6:	d024      	beq.n	800d602 <__multiply+0xf2>
 800d5b8:	f104 0e14 	add.w	lr, r4, #20
 800d5bc:	46a9      	mov	r9, r5
 800d5be:	f04f 0c00 	mov.w	ip, #0
 800d5c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d5c6:	f8d9 3000 	ldr.w	r3, [r9]
 800d5ca:	fa1f fb87 	uxth.w	fp, r7
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	fb0a 330b 	mla	r3, sl, fp, r3
 800d5d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d5d8:	f8d9 7000 	ldr.w	r7, [r9]
 800d5dc:	4463      	add	r3, ip
 800d5de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d5e2:	fb0a c70b 	mla	r7, sl, fp, ip
 800d5e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d5f0:	4572      	cmp	r2, lr
 800d5f2:	f849 3b04 	str.w	r3, [r9], #4
 800d5f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d5fa:	d8e2      	bhi.n	800d5c2 <__multiply+0xb2>
 800d5fc:	9b01      	ldr	r3, [sp, #4]
 800d5fe:	f845 c003 	str.w	ip, [r5, r3]
 800d602:	9b03      	ldr	r3, [sp, #12]
 800d604:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d608:	3104      	adds	r1, #4
 800d60a:	f1b9 0f00 	cmp.w	r9, #0
 800d60e:	d021      	beq.n	800d654 <__multiply+0x144>
 800d610:	682b      	ldr	r3, [r5, #0]
 800d612:	f104 0c14 	add.w	ip, r4, #20
 800d616:	46ae      	mov	lr, r5
 800d618:	f04f 0a00 	mov.w	sl, #0
 800d61c:	f8bc b000 	ldrh.w	fp, [ip]
 800d620:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d624:	fb09 770b 	mla	r7, r9, fp, r7
 800d628:	4457      	add	r7, sl
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d630:	f84e 3b04 	str.w	r3, [lr], #4
 800d634:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d638:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d63c:	f8be 3000 	ldrh.w	r3, [lr]
 800d640:	fb09 330a 	mla	r3, r9, sl, r3
 800d644:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d648:	4562      	cmp	r2, ip
 800d64a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d64e:	d8e5      	bhi.n	800d61c <__multiply+0x10c>
 800d650:	9f01      	ldr	r7, [sp, #4]
 800d652:	51eb      	str	r3, [r5, r7]
 800d654:	3504      	adds	r5, #4
 800d656:	e799      	b.n	800d58c <__multiply+0x7c>
 800d658:	3e01      	subs	r6, #1
 800d65a:	e79b      	b.n	800d594 <__multiply+0x84>
 800d65c:	0800ebec 	.word	0x0800ebec
 800d660:	0800ebfd 	.word	0x0800ebfd

0800d664 <__pow5mult>:
 800d664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d668:	4615      	mov	r5, r2
 800d66a:	f012 0203 	ands.w	r2, r2, #3
 800d66e:	4607      	mov	r7, r0
 800d670:	460e      	mov	r6, r1
 800d672:	d007      	beq.n	800d684 <__pow5mult+0x20>
 800d674:	4c25      	ldr	r4, [pc, #148]	@ (800d70c <__pow5mult+0xa8>)
 800d676:	3a01      	subs	r2, #1
 800d678:	2300      	movs	r3, #0
 800d67a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d67e:	f7ff fe9f 	bl	800d3c0 <__multadd>
 800d682:	4606      	mov	r6, r0
 800d684:	10ad      	asrs	r5, r5, #2
 800d686:	d03d      	beq.n	800d704 <__pow5mult+0xa0>
 800d688:	69fc      	ldr	r4, [r7, #28]
 800d68a:	b97c      	cbnz	r4, 800d6ac <__pow5mult+0x48>
 800d68c:	2010      	movs	r0, #16
 800d68e:	f7fe f8df 	bl	800b850 <malloc>
 800d692:	4602      	mov	r2, r0
 800d694:	61f8      	str	r0, [r7, #28]
 800d696:	b928      	cbnz	r0, 800d6a4 <__pow5mult+0x40>
 800d698:	4b1d      	ldr	r3, [pc, #116]	@ (800d710 <__pow5mult+0xac>)
 800d69a:	481e      	ldr	r0, [pc, #120]	@ (800d714 <__pow5mult+0xb0>)
 800d69c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d6a0:	f000 fc3e 	bl	800df20 <__assert_func>
 800d6a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d6a8:	6004      	str	r4, [r0, #0]
 800d6aa:	60c4      	str	r4, [r0, #12]
 800d6ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d6b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d6b4:	b94c      	cbnz	r4, 800d6ca <__pow5mult+0x66>
 800d6b6:	f240 2171 	movw	r1, #625	@ 0x271
 800d6ba:	4638      	mov	r0, r7
 800d6bc:	f7ff ff12 	bl	800d4e4 <__i2b>
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d6c6:	4604      	mov	r4, r0
 800d6c8:	6003      	str	r3, [r0, #0]
 800d6ca:	f04f 0900 	mov.w	r9, #0
 800d6ce:	07eb      	lsls	r3, r5, #31
 800d6d0:	d50a      	bpl.n	800d6e8 <__pow5mult+0x84>
 800d6d2:	4631      	mov	r1, r6
 800d6d4:	4622      	mov	r2, r4
 800d6d6:	4638      	mov	r0, r7
 800d6d8:	f7ff ff1a 	bl	800d510 <__multiply>
 800d6dc:	4631      	mov	r1, r6
 800d6de:	4680      	mov	r8, r0
 800d6e0:	4638      	mov	r0, r7
 800d6e2:	f7ff fe4b 	bl	800d37c <_Bfree>
 800d6e6:	4646      	mov	r6, r8
 800d6e8:	106d      	asrs	r5, r5, #1
 800d6ea:	d00b      	beq.n	800d704 <__pow5mult+0xa0>
 800d6ec:	6820      	ldr	r0, [r4, #0]
 800d6ee:	b938      	cbnz	r0, 800d700 <__pow5mult+0x9c>
 800d6f0:	4622      	mov	r2, r4
 800d6f2:	4621      	mov	r1, r4
 800d6f4:	4638      	mov	r0, r7
 800d6f6:	f7ff ff0b 	bl	800d510 <__multiply>
 800d6fa:	6020      	str	r0, [r4, #0]
 800d6fc:	f8c0 9000 	str.w	r9, [r0]
 800d700:	4604      	mov	r4, r0
 800d702:	e7e4      	b.n	800d6ce <__pow5mult+0x6a>
 800d704:	4630      	mov	r0, r6
 800d706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d70a:	bf00      	nop
 800d70c:	0800ec58 	.word	0x0800ec58
 800d710:	0800eb7d 	.word	0x0800eb7d
 800d714:	0800ebfd 	.word	0x0800ebfd

0800d718 <__lshift>:
 800d718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d71c:	460c      	mov	r4, r1
 800d71e:	6849      	ldr	r1, [r1, #4]
 800d720:	6923      	ldr	r3, [r4, #16]
 800d722:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d726:	68a3      	ldr	r3, [r4, #8]
 800d728:	4607      	mov	r7, r0
 800d72a:	4691      	mov	r9, r2
 800d72c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d730:	f108 0601 	add.w	r6, r8, #1
 800d734:	42b3      	cmp	r3, r6
 800d736:	db0b      	blt.n	800d750 <__lshift+0x38>
 800d738:	4638      	mov	r0, r7
 800d73a:	f7ff fddf 	bl	800d2fc <_Balloc>
 800d73e:	4605      	mov	r5, r0
 800d740:	b948      	cbnz	r0, 800d756 <__lshift+0x3e>
 800d742:	4602      	mov	r2, r0
 800d744:	4b28      	ldr	r3, [pc, #160]	@ (800d7e8 <__lshift+0xd0>)
 800d746:	4829      	ldr	r0, [pc, #164]	@ (800d7ec <__lshift+0xd4>)
 800d748:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d74c:	f000 fbe8 	bl	800df20 <__assert_func>
 800d750:	3101      	adds	r1, #1
 800d752:	005b      	lsls	r3, r3, #1
 800d754:	e7ee      	b.n	800d734 <__lshift+0x1c>
 800d756:	2300      	movs	r3, #0
 800d758:	f100 0114 	add.w	r1, r0, #20
 800d75c:	f100 0210 	add.w	r2, r0, #16
 800d760:	4618      	mov	r0, r3
 800d762:	4553      	cmp	r3, sl
 800d764:	db33      	blt.n	800d7ce <__lshift+0xb6>
 800d766:	6920      	ldr	r0, [r4, #16]
 800d768:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d76c:	f104 0314 	add.w	r3, r4, #20
 800d770:	f019 091f 	ands.w	r9, r9, #31
 800d774:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d778:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d77c:	d02b      	beq.n	800d7d6 <__lshift+0xbe>
 800d77e:	f1c9 0e20 	rsb	lr, r9, #32
 800d782:	468a      	mov	sl, r1
 800d784:	2200      	movs	r2, #0
 800d786:	6818      	ldr	r0, [r3, #0]
 800d788:	fa00 f009 	lsl.w	r0, r0, r9
 800d78c:	4310      	orrs	r0, r2
 800d78e:	f84a 0b04 	str.w	r0, [sl], #4
 800d792:	f853 2b04 	ldr.w	r2, [r3], #4
 800d796:	459c      	cmp	ip, r3
 800d798:	fa22 f20e 	lsr.w	r2, r2, lr
 800d79c:	d8f3      	bhi.n	800d786 <__lshift+0x6e>
 800d79e:	ebac 0304 	sub.w	r3, ip, r4
 800d7a2:	3b15      	subs	r3, #21
 800d7a4:	f023 0303 	bic.w	r3, r3, #3
 800d7a8:	3304      	adds	r3, #4
 800d7aa:	f104 0015 	add.w	r0, r4, #21
 800d7ae:	4584      	cmp	ip, r0
 800d7b0:	bf38      	it	cc
 800d7b2:	2304      	movcc	r3, #4
 800d7b4:	50ca      	str	r2, [r1, r3]
 800d7b6:	b10a      	cbz	r2, 800d7bc <__lshift+0xa4>
 800d7b8:	f108 0602 	add.w	r6, r8, #2
 800d7bc:	3e01      	subs	r6, #1
 800d7be:	4638      	mov	r0, r7
 800d7c0:	612e      	str	r6, [r5, #16]
 800d7c2:	4621      	mov	r1, r4
 800d7c4:	f7ff fdda 	bl	800d37c <_Bfree>
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	e7c5      	b.n	800d762 <__lshift+0x4a>
 800d7d6:	3904      	subs	r1, #4
 800d7d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800d7e0:	459c      	cmp	ip, r3
 800d7e2:	d8f9      	bhi.n	800d7d8 <__lshift+0xc0>
 800d7e4:	e7ea      	b.n	800d7bc <__lshift+0xa4>
 800d7e6:	bf00      	nop
 800d7e8:	0800ebec 	.word	0x0800ebec
 800d7ec:	0800ebfd 	.word	0x0800ebfd

0800d7f0 <__mcmp>:
 800d7f0:	690a      	ldr	r2, [r1, #16]
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	6900      	ldr	r0, [r0, #16]
 800d7f6:	1a80      	subs	r0, r0, r2
 800d7f8:	b530      	push	{r4, r5, lr}
 800d7fa:	d10e      	bne.n	800d81a <__mcmp+0x2a>
 800d7fc:	3314      	adds	r3, #20
 800d7fe:	3114      	adds	r1, #20
 800d800:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d804:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d808:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d80c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d810:	4295      	cmp	r5, r2
 800d812:	d003      	beq.n	800d81c <__mcmp+0x2c>
 800d814:	d205      	bcs.n	800d822 <__mcmp+0x32>
 800d816:	f04f 30ff 	mov.w	r0, #4294967295
 800d81a:	bd30      	pop	{r4, r5, pc}
 800d81c:	42a3      	cmp	r3, r4
 800d81e:	d3f3      	bcc.n	800d808 <__mcmp+0x18>
 800d820:	e7fb      	b.n	800d81a <__mcmp+0x2a>
 800d822:	2001      	movs	r0, #1
 800d824:	e7f9      	b.n	800d81a <__mcmp+0x2a>
	...

0800d828 <__mdiff>:
 800d828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d82c:	4689      	mov	r9, r1
 800d82e:	4606      	mov	r6, r0
 800d830:	4611      	mov	r1, r2
 800d832:	4648      	mov	r0, r9
 800d834:	4614      	mov	r4, r2
 800d836:	f7ff ffdb 	bl	800d7f0 <__mcmp>
 800d83a:	1e05      	subs	r5, r0, #0
 800d83c:	d112      	bne.n	800d864 <__mdiff+0x3c>
 800d83e:	4629      	mov	r1, r5
 800d840:	4630      	mov	r0, r6
 800d842:	f7ff fd5b 	bl	800d2fc <_Balloc>
 800d846:	4602      	mov	r2, r0
 800d848:	b928      	cbnz	r0, 800d856 <__mdiff+0x2e>
 800d84a:	4b3f      	ldr	r3, [pc, #252]	@ (800d948 <__mdiff+0x120>)
 800d84c:	f240 2137 	movw	r1, #567	@ 0x237
 800d850:	483e      	ldr	r0, [pc, #248]	@ (800d94c <__mdiff+0x124>)
 800d852:	f000 fb65 	bl	800df20 <__assert_func>
 800d856:	2301      	movs	r3, #1
 800d858:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d85c:	4610      	mov	r0, r2
 800d85e:	b003      	add	sp, #12
 800d860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d864:	bfbc      	itt	lt
 800d866:	464b      	movlt	r3, r9
 800d868:	46a1      	movlt	r9, r4
 800d86a:	4630      	mov	r0, r6
 800d86c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d870:	bfba      	itte	lt
 800d872:	461c      	movlt	r4, r3
 800d874:	2501      	movlt	r5, #1
 800d876:	2500      	movge	r5, #0
 800d878:	f7ff fd40 	bl	800d2fc <_Balloc>
 800d87c:	4602      	mov	r2, r0
 800d87e:	b918      	cbnz	r0, 800d888 <__mdiff+0x60>
 800d880:	4b31      	ldr	r3, [pc, #196]	@ (800d948 <__mdiff+0x120>)
 800d882:	f240 2145 	movw	r1, #581	@ 0x245
 800d886:	e7e3      	b.n	800d850 <__mdiff+0x28>
 800d888:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d88c:	6926      	ldr	r6, [r4, #16]
 800d88e:	60c5      	str	r5, [r0, #12]
 800d890:	f109 0310 	add.w	r3, r9, #16
 800d894:	f109 0514 	add.w	r5, r9, #20
 800d898:	f104 0e14 	add.w	lr, r4, #20
 800d89c:	f100 0b14 	add.w	fp, r0, #20
 800d8a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d8a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d8a8:	9301      	str	r3, [sp, #4]
 800d8aa:	46d9      	mov	r9, fp
 800d8ac:	f04f 0c00 	mov.w	ip, #0
 800d8b0:	9b01      	ldr	r3, [sp, #4]
 800d8b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d8b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d8ba:	9301      	str	r3, [sp, #4]
 800d8bc:	fa1f f38a 	uxth.w	r3, sl
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	b283      	uxth	r3, r0
 800d8c4:	1acb      	subs	r3, r1, r3
 800d8c6:	0c00      	lsrs	r0, r0, #16
 800d8c8:	4463      	add	r3, ip
 800d8ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d8ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d8d8:	4576      	cmp	r6, lr
 800d8da:	f849 3b04 	str.w	r3, [r9], #4
 800d8de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d8e2:	d8e5      	bhi.n	800d8b0 <__mdiff+0x88>
 800d8e4:	1b33      	subs	r3, r6, r4
 800d8e6:	3b15      	subs	r3, #21
 800d8e8:	f023 0303 	bic.w	r3, r3, #3
 800d8ec:	3415      	adds	r4, #21
 800d8ee:	3304      	adds	r3, #4
 800d8f0:	42a6      	cmp	r6, r4
 800d8f2:	bf38      	it	cc
 800d8f4:	2304      	movcc	r3, #4
 800d8f6:	441d      	add	r5, r3
 800d8f8:	445b      	add	r3, fp
 800d8fa:	461e      	mov	r6, r3
 800d8fc:	462c      	mov	r4, r5
 800d8fe:	4544      	cmp	r4, r8
 800d900:	d30e      	bcc.n	800d920 <__mdiff+0xf8>
 800d902:	f108 0103 	add.w	r1, r8, #3
 800d906:	1b49      	subs	r1, r1, r5
 800d908:	f021 0103 	bic.w	r1, r1, #3
 800d90c:	3d03      	subs	r5, #3
 800d90e:	45a8      	cmp	r8, r5
 800d910:	bf38      	it	cc
 800d912:	2100      	movcc	r1, #0
 800d914:	440b      	add	r3, r1
 800d916:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d91a:	b191      	cbz	r1, 800d942 <__mdiff+0x11a>
 800d91c:	6117      	str	r7, [r2, #16]
 800d91e:	e79d      	b.n	800d85c <__mdiff+0x34>
 800d920:	f854 1b04 	ldr.w	r1, [r4], #4
 800d924:	46e6      	mov	lr, ip
 800d926:	0c08      	lsrs	r0, r1, #16
 800d928:	fa1c fc81 	uxtah	ip, ip, r1
 800d92c:	4471      	add	r1, lr
 800d92e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d932:	b289      	uxth	r1, r1
 800d934:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d938:	f846 1b04 	str.w	r1, [r6], #4
 800d93c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d940:	e7dd      	b.n	800d8fe <__mdiff+0xd6>
 800d942:	3f01      	subs	r7, #1
 800d944:	e7e7      	b.n	800d916 <__mdiff+0xee>
 800d946:	bf00      	nop
 800d948:	0800ebec 	.word	0x0800ebec
 800d94c:	0800ebfd 	.word	0x0800ebfd

0800d950 <__d2b>:
 800d950:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d954:	460f      	mov	r7, r1
 800d956:	2101      	movs	r1, #1
 800d958:	ec59 8b10 	vmov	r8, r9, d0
 800d95c:	4616      	mov	r6, r2
 800d95e:	f7ff fccd 	bl	800d2fc <_Balloc>
 800d962:	4604      	mov	r4, r0
 800d964:	b930      	cbnz	r0, 800d974 <__d2b+0x24>
 800d966:	4602      	mov	r2, r0
 800d968:	4b23      	ldr	r3, [pc, #140]	@ (800d9f8 <__d2b+0xa8>)
 800d96a:	4824      	ldr	r0, [pc, #144]	@ (800d9fc <__d2b+0xac>)
 800d96c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d970:	f000 fad6 	bl	800df20 <__assert_func>
 800d974:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d978:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d97c:	b10d      	cbz	r5, 800d982 <__d2b+0x32>
 800d97e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d982:	9301      	str	r3, [sp, #4]
 800d984:	f1b8 0300 	subs.w	r3, r8, #0
 800d988:	d023      	beq.n	800d9d2 <__d2b+0x82>
 800d98a:	4668      	mov	r0, sp
 800d98c:	9300      	str	r3, [sp, #0]
 800d98e:	f7ff fd7c 	bl	800d48a <__lo0bits>
 800d992:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d996:	b1d0      	cbz	r0, 800d9ce <__d2b+0x7e>
 800d998:	f1c0 0320 	rsb	r3, r0, #32
 800d99c:	fa02 f303 	lsl.w	r3, r2, r3
 800d9a0:	430b      	orrs	r3, r1
 800d9a2:	40c2      	lsrs	r2, r0
 800d9a4:	6163      	str	r3, [r4, #20]
 800d9a6:	9201      	str	r2, [sp, #4]
 800d9a8:	9b01      	ldr	r3, [sp, #4]
 800d9aa:	61a3      	str	r3, [r4, #24]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	bf0c      	ite	eq
 800d9b0:	2201      	moveq	r2, #1
 800d9b2:	2202      	movne	r2, #2
 800d9b4:	6122      	str	r2, [r4, #16]
 800d9b6:	b1a5      	cbz	r5, 800d9e2 <__d2b+0x92>
 800d9b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d9bc:	4405      	add	r5, r0
 800d9be:	603d      	str	r5, [r7, #0]
 800d9c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d9c4:	6030      	str	r0, [r6, #0]
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	b003      	add	sp, #12
 800d9ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9ce:	6161      	str	r1, [r4, #20]
 800d9d0:	e7ea      	b.n	800d9a8 <__d2b+0x58>
 800d9d2:	a801      	add	r0, sp, #4
 800d9d4:	f7ff fd59 	bl	800d48a <__lo0bits>
 800d9d8:	9b01      	ldr	r3, [sp, #4]
 800d9da:	6163      	str	r3, [r4, #20]
 800d9dc:	3020      	adds	r0, #32
 800d9de:	2201      	movs	r2, #1
 800d9e0:	e7e8      	b.n	800d9b4 <__d2b+0x64>
 800d9e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d9e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d9ea:	6038      	str	r0, [r7, #0]
 800d9ec:	6918      	ldr	r0, [r3, #16]
 800d9ee:	f7ff fd2d 	bl	800d44c <__hi0bits>
 800d9f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d9f6:	e7e5      	b.n	800d9c4 <__d2b+0x74>
 800d9f8:	0800ebec 	.word	0x0800ebec
 800d9fc:	0800ebfd 	.word	0x0800ebfd

0800da00 <__sfputc_r>:
 800da00:	6893      	ldr	r3, [r2, #8]
 800da02:	3b01      	subs	r3, #1
 800da04:	2b00      	cmp	r3, #0
 800da06:	b410      	push	{r4}
 800da08:	6093      	str	r3, [r2, #8]
 800da0a:	da08      	bge.n	800da1e <__sfputc_r+0x1e>
 800da0c:	6994      	ldr	r4, [r2, #24]
 800da0e:	42a3      	cmp	r3, r4
 800da10:	db01      	blt.n	800da16 <__sfputc_r+0x16>
 800da12:	290a      	cmp	r1, #10
 800da14:	d103      	bne.n	800da1e <__sfputc_r+0x1e>
 800da16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da1a:	f000 b9df 	b.w	800dddc <__swbuf_r>
 800da1e:	6813      	ldr	r3, [r2, #0]
 800da20:	1c58      	adds	r0, r3, #1
 800da22:	6010      	str	r0, [r2, #0]
 800da24:	7019      	strb	r1, [r3, #0]
 800da26:	4608      	mov	r0, r1
 800da28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da2c:	4770      	bx	lr

0800da2e <__sfputs_r>:
 800da2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da30:	4606      	mov	r6, r0
 800da32:	460f      	mov	r7, r1
 800da34:	4614      	mov	r4, r2
 800da36:	18d5      	adds	r5, r2, r3
 800da38:	42ac      	cmp	r4, r5
 800da3a:	d101      	bne.n	800da40 <__sfputs_r+0x12>
 800da3c:	2000      	movs	r0, #0
 800da3e:	e007      	b.n	800da50 <__sfputs_r+0x22>
 800da40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da44:	463a      	mov	r2, r7
 800da46:	4630      	mov	r0, r6
 800da48:	f7ff ffda 	bl	800da00 <__sfputc_r>
 800da4c:	1c43      	adds	r3, r0, #1
 800da4e:	d1f3      	bne.n	800da38 <__sfputs_r+0xa>
 800da50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da54 <_vfiprintf_r>:
 800da54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da58:	460d      	mov	r5, r1
 800da5a:	b09d      	sub	sp, #116	@ 0x74
 800da5c:	4614      	mov	r4, r2
 800da5e:	4698      	mov	r8, r3
 800da60:	4606      	mov	r6, r0
 800da62:	b118      	cbz	r0, 800da6c <_vfiprintf_r+0x18>
 800da64:	6a03      	ldr	r3, [r0, #32]
 800da66:	b90b      	cbnz	r3, 800da6c <_vfiprintf_r+0x18>
 800da68:	f7fe fc94 	bl	800c394 <__sinit>
 800da6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da6e:	07d9      	lsls	r1, r3, #31
 800da70:	d405      	bmi.n	800da7e <_vfiprintf_r+0x2a>
 800da72:	89ab      	ldrh	r3, [r5, #12]
 800da74:	059a      	lsls	r2, r3, #22
 800da76:	d402      	bmi.n	800da7e <_vfiprintf_r+0x2a>
 800da78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da7a:	f7fe fda4 	bl	800c5c6 <__retarget_lock_acquire_recursive>
 800da7e:	89ab      	ldrh	r3, [r5, #12]
 800da80:	071b      	lsls	r3, r3, #28
 800da82:	d501      	bpl.n	800da88 <_vfiprintf_r+0x34>
 800da84:	692b      	ldr	r3, [r5, #16]
 800da86:	b99b      	cbnz	r3, 800dab0 <_vfiprintf_r+0x5c>
 800da88:	4629      	mov	r1, r5
 800da8a:	4630      	mov	r0, r6
 800da8c:	f000 f9e4 	bl	800de58 <__swsetup_r>
 800da90:	b170      	cbz	r0, 800dab0 <_vfiprintf_r+0x5c>
 800da92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da94:	07dc      	lsls	r4, r3, #31
 800da96:	d504      	bpl.n	800daa2 <_vfiprintf_r+0x4e>
 800da98:	f04f 30ff 	mov.w	r0, #4294967295
 800da9c:	b01d      	add	sp, #116	@ 0x74
 800da9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daa2:	89ab      	ldrh	r3, [r5, #12]
 800daa4:	0598      	lsls	r0, r3, #22
 800daa6:	d4f7      	bmi.n	800da98 <_vfiprintf_r+0x44>
 800daa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800daaa:	f7fe fd8d 	bl	800c5c8 <__retarget_lock_release_recursive>
 800daae:	e7f3      	b.n	800da98 <_vfiprintf_r+0x44>
 800dab0:	2300      	movs	r3, #0
 800dab2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dab4:	2320      	movs	r3, #32
 800dab6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800daba:	f8cd 800c 	str.w	r8, [sp, #12]
 800dabe:	2330      	movs	r3, #48	@ 0x30
 800dac0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dc70 <_vfiprintf_r+0x21c>
 800dac4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dac8:	f04f 0901 	mov.w	r9, #1
 800dacc:	4623      	mov	r3, r4
 800dace:	469a      	mov	sl, r3
 800dad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dad4:	b10a      	cbz	r2, 800dada <_vfiprintf_r+0x86>
 800dad6:	2a25      	cmp	r2, #37	@ 0x25
 800dad8:	d1f9      	bne.n	800dace <_vfiprintf_r+0x7a>
 800dada:	ebba 0b04 	subs.w	fp, sl, r4
 800dade:	d00b      	beq.n	800daf8 <_vfiprintf_r+0xa4>
 800dae0:	465b      	mov	r3, fp
 800dae2:	4622      	mov	r2, r4
 800dae4:	4629      	mov	r1, r5
 800dae6:	4630      	mov	r0, r6
 800dae8:	f7ff ffa1 	bl	800da2e <__sfputs_r>
 800daec:	3001      	adds	r0, #1
 800daee:	f000 80a7 	beq.w	800dc40 <_vfiprintf_r+0x1ec>
 800daf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800daf4:	445a      	add	r2, fp
 800daf6:	9209      	str	r2, [sp, #36]	@ 0x24
 800daf8:	f89a 3000 	ldrb.w	r3, [sl]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	f000 809f 	beq.w	800dc40 <_vfiprintf_r+0x1ec>
 800db02:	2300      	movs	r3, #0
 800db04:	f04f 32ff 	mov.w	r2, #4294967295
 800db08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db0c:	f10a 0a01 	add.w	sl, sl, #1
 800db10:	9304      	str	r3, [sp, #16]
 800db12:	9307      	str	r3, [sp, #28]
 800db14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db18:	931a      	str	r3, [sp, #104]	@ 0x68
 800db1a:	4654      	mov	r4, sl
 800db1c:	2205      	movs	r2, #5
 800db1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db22:	4853      	ldr	r0, [pc, #332]	@ (800dc70 <_vfiprintf_r+0x21c>)
 800db24:	f7f2 fb54 	bl	80001d0 <memchr>
 800db28:	9a04      	ldr	r2, [sp, #16]
 800db2a:	b9d8      	cbnz	r0, 800db64 <_vfiprintf_r+0x110>
 800db2c:	06d1      	lsls	r1, r2, #27
 800db2e:	bf44      	itt	mi
 800db30:	2320      	movmi	r3, #32
 800db32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db36:	0713      	lsls	r3, r2, #28
 800db38:	bf44      	itt	mi
 800db3a:	232b      	movmi	r3, #43	@ 0x2b
 800db3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db40:	f89a 3000 	ldrb.w	r3, [sl]
 800db44:	2b2a      	cmp	r3, #42	@ 0x2a
 800db46:	d015      	beq.n	800db74 <_vfiprintf_r+0x120>
 800db48:	9a07      	ldr	r2, [sp, #28]
 800db4a:	4654      	mov	r4, sl
 800db4c:	2000      	movs	r0, #0
 800db4e:	f04f 0c0a 	mov.w	ip, #10
 800db52:	4621      	mov	r1, r4
 800db54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db58:	3b30      	subs	r3, #48	@ 0x30
 800db5a:	2b09      	cmp	r3, #9
 800db5c:	d94b      	bls.n	800dbf6 <_vfiprintf_r+0x1a2>
 800db5e:	b1b0      	cbz	r0, 800db8e <_vfiprintf_r+0x13a>
 800db60:	9207      	str	r2, [sp, #28]
 800db62:	e014      	b.n	800db8e <_vfiprintf_r+0x13a>
 800db64:	eba0 0308 	sub.w	r3, r0, r8
 800db68:	fa09 f303 	lsl.w	r3, r9, r3
 800db6c:	4313      	orrs	r3, r2
 800db6e:	9304      	str	r3, [sp, #16]
 800db70:	46a2      	mov	sl, r4
 800db72:	e7d2      	b.n	800db1a <_vfiprintf_r+0xc6>
 800db74:	9b03      	ldr	r3, [sp, #12]
 800db76:	1d19      	adds	r1, r3, #4
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	9103      	str	r1, [sp, #12]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	bfbb      	ittet	lt
 800db80:	425b      	neglt	r3, r3
 800db82:	f042 0202 	orrlt.w	r2, r2, #2
 800db86:	9307      	strge	r3, [sp, #28]
 800db88:	9307      	strlt	r3, [sp, #28]
 800db8a:	bfb8      	it	lt
 800db8c:	9204      	strlt	r2, [sp, #16]
 800db8e:	7823      	ldrb	r3, [r4, #0]
 800db90:	2b2e      	cmp	r3, #46	@ 0x2e
 800db92:	d10a      	bne.n	800dbaa <_vfiprintf_r+0x156>
 800db94:	7863      	ldrb	r3, [r4, #1]
 800db96:	2b2a      	cmp	r3, #42	@ 0x2a
 800db98:	d132      	bne.n	800dc00 <_vfiprintf_r+0x1ac>
 800db9a:	9b03      	ldr	r3, [sp, #12]
 800db9c:	1d1a      	adds	r2, r3, #4
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	9203      	str	r2, [sp, #12]
 800dba2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dba6:	3402      	adds	r4, #2
 800dba8:	9305      	str	r3, [sp, #20]
 800dbaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dc80 <_vfiprintf_r+0x22c>
 800dbae:	7821      	ldrb	r1, [r4, #0]
 800dbb0:	2203      	movs	r2, #3
 800dbb2:	4650      	mov	r0, sl
 800dbb4:	f7f2 fb0c 	bl	80001d0 <memchr>
 800dbb8:	b138      	cbz	r0, 800dbca <_vfiprintf_r+0x176>
 800dbba:	9b04      	ldr	r3, [sp, #16]
 800dbbc:	eba0 000a 	sub.w	r0, r0, sl
 800dbc0:	2240      	movs	r2, #64	@ 0x40
 800dbc2:	4082      	lsls	r2, r0
 800dbc4:	4313      	orrs	r3, r2
 800dbc6:	3401      	adds	r4, #1
 800dbc8:	9304      	str	r3, [sp, #16]
 800dbca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbce:	4829      	ldr	r0, [pc, #164]	@ (800dc74 <_vfiprintf_r+0x220>)
 800dbd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dbd4:	2206      	movs	r2, #6
 800dbd6:	f7f2 fafb 	bl	80001d0 <memchr>
 800dbda:	2800      	cmp	r0, #0
 800dbdc:	d03f      	beq.n	800dc5e <_vfiprintf_r+0x20a>
 800dbde:	4b26      	ldr	r3, [pc, #152]	@ (800dc78 <_vfiprintf_r+0x224>)
 800dbe0:	bb1b      	cbnz	r3, 800dc2a <_vfiprintf_r+0x1d6>
 800dbe2:	9b03      	ldr	r3, [sp, #12]
 800dbe4:	3307      	adds	r3, #7
 800dbe6:	f023 0307 	bic.w	r3, r3, #7
 800dbea:	3308      	adds	r3, #8
 800dbec:	9303      	str	r3, [sp, #12]
 800dbee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbf0:	443b      	add	r3, r7
 800dbf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbf4:	e76a      	b.n	800dacc <_vfiprintf_r+0x78>
 800dbf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbfa:	460c      	mov	r4, r1
 800dbfc:	2001      	movs	r0, #1
 800dbfe:	e7a8      	b.n	800db52 <_vfiprintf_r+0xfe>
 800dc00:	2300      	movs	r3, #0
 800dc02:	3401      	adds	r4, #1
 800dc04:	9305      	str	r3, [sp, #20]
 800dc06:	4619      	mov	r1, r3
 800dc08:	f04f 0c0a 	mov.w	ip, #10
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc12:	3a30      	subs	r2, #48	@ 0x30
 800dc14:	2a09      	cmp	r2, #9
 800dc16:	d903      	bls.n	800dc20 <_vfiprintf_r+0x1cc>
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d0c6      	beq.n	800dbaa <_vfiprintf_r+0x156>
 800dc1c:	9105      	str	r1, [sp, #20]
 800dc1e:	e7c4      	b.n	800dbaa <_vfiprintf_r+0x156>
 800dc20:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc24:	4604      	mov	r4, r0
 800dc26:	2301      	movs	r3, #1
 800dc28:	e7f0      	b.n	800dc0c <_vfiprintf_r+0x1b8>
 800dc2a:	ab03      	add	r3, sp, #12
 800dc2c:	9300      	str	r3, [sp, #0]
 800dc2e:	462a      	mov	r2, r5
 800dc30:	4b12      	ldr	r3, [pc, #72]	@ (800dc7c <_vfiprintf_r+0x228>)
 800dc32:	a904      	add	r1, sp, #16
 800dc34:	4630      	mov	r0, r6
 800dc36:	f7fd ff69 	bl	800bb0c <_printf_float>
 800dc3a:	4607      	mov	r7, r0
 800dc3c:	1c78      	adds	r0, r7, #1
 800dc3e:	d1d6      	bne.n	800dbee <_vfiprintf_r+0x19a>
 800dc40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc42:	07d9      	lsls	r1, r3, #31
 800dc44:	d405      	bmi.n	800dc52 <_vfiprintf_r+0x1fe>
 800dc46:	89ab      	ldrh	r3, [r5, #12]
 800dc48:	059a      	lsls	r2, r3, #22
 800dc4a:	d402      	bmi.n	800dc52 <_vfiprintf_r+0x1fe>
 800dc4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc4e:	f7fe fcbb 	bl	800c5c8 <__retarget_lock_release_recursive>
 800dc52:	89ab      	ldrh	r3, [r5, #12]
 800dc54:	065b      	lsls	r3, r3, #25
 800dc56:	f53f af1f 	bmi.w	800da98 <_vfiprintf_r+0x44>
 800dc5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc5c:	e71e      	b.n	800da9c <_vfiprintf_r+0x48>
 800dc5e:	ab03      	add	r3, sp, #12
 800dc60:	9300      	str	r3, [sp, #0]
 800dc62:	462a      	mov	r2, r5
 800dc64:	4b05      	ldr	r3, [pc, #20]	@ (800dc7c <_vfiprintf_r+0x228>)
 800dc66:	a904      	add	r1, sp, #16
 800dc68:	4630      	mov	r0, r6
 800dc6a:	f7fe f9e7 	bl	800c03c <_printf_i>
 800dc6e:	e7e4      	b.n	800dc3a <_vfiprintf_r+0x1e6>
 800dc70:	0800ed58 	.word	0x0800ed58
 800dc74:	0800ed62 	.word	0x0800ed62
 800dc78:	0800bb0d 	.word	0x0800bb0d
 800dc7c:	0800da2f 	.word	0x0800da2f
 800dc80:	0800ed5e 	.word	0x0800ed5e

0800dc84 <__sflush_r>:
 800dc84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc8c:	0716      	lsls	r6, r2, #28
 800dc8e:	4605      	mov	r5, r0
 800dc90:	460c      	mov	r4, r1
 800dc92:	d454      	bmi.n	800dd3e <__sflush_r+0xba>
 800dc94:	684b      	ldr	r3, [r1, #4]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	dc02      	bgt.n	800dca0 <__sflush_r+0x1c>
 800dc9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	dd48      	ble.n	800dd32 <__sflush_r+0xae>
 800dca0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dca2:	2e00      	cmp	r6, #0
 800dca4:	d045      	beq.n	800dd32 <__sflush_r+0xae>
 800dca6:	2300      	movs	r3, #0
 800dca8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dcac:	682f      	ldr	r7, [r5, #0]
 800dcae:	6a21      	ldr	r1, [r4, #32]
 800dcb0:	602b      	str	r3, [r5, #0]
 800dcb2:	d030      	beq.n	800dd16 <__sflush_r+0x92>
 800dcb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dcb6:	89a3      	ldrh	r3, [r4, #12]
 800dcb8:	0759      	lsls	r1, r3, #29
 800dcba:	d505      	bpl.n	800dcc8 <__sflush_r+0x44>
 800dcbc:	6863      	ldr	r3, [r4, #4]
 800dcbe:	1ad2      	subs	r2, r2, r3
 800dcc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dcc2:	b10b      	cbz	r3, 800dcc8 <__sflush_r+0x44>
 800dcc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dcc6:	1ad2      	subs	r2, r2, r3
 800dcc8:	2300      	movs	r3, #0
 800dcca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dccc:	6a21      	ldr	r1, [r4, #32]
 800dcce:	4628      	mov	r0, r5
 800dcd0:	47b0      	blx	r6
 800dcd2:	1c43      	adds	r3, r0, #1
 800dcd4:	89a3      	ldrh	r3, [r4, #12]
 800dcd6:	d106      	bne.n	800dce6 <__sflush_r+0x62>
 800dcd8:	6829      	ldr	r1, [r5, #0]
 800dcda:	291d      	cmp	r1, #29
 800dcdc:	d82b      	bhi.n	800dd36 <__sflush_r+0xb2>
 800dcde:	4a2a      	ldr	r2, [pc, #168]	@ (800dd88 <__sflush_r+0x104>)
 800dce0:	410a      	asrs	r2, r1
 800dce2:	07d6      	lsls	r6, r2, #31
 800dce4:	d427      	bmi.n	800dd36 <__sflush_r+0xb2>
 800dce6:	2200      	movs	r2, #0
 800dce8:	6062      	str	r2, [r4, #4]
 800dcea:	04d9      	lsls	r1, r3, #19
 800dcec:	6922      	ldr	r2, [r4, #16]
 800dcee:	6022      	str	r2, [r4, #0]
 800dcf0:	d504      	bpl.n	800dcfc <__sflush_r+0x78>
 800dcf2:	1c42      	adds	r2, r0, #1
 800dcf4:	d101      	bne.n	800dcfa <__sflush_r+0x76>
 800dcf6:	682b      	ldr	r3, [r5, #0]
 800dcf8:	b903      	cbnz	r3, 800dcfc <__sflush_r+0x78>
 800dcfa:	6560      	str	r0, [r4, #84]	@ 0x54
 800dcfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dcfe:	602f      	str	r7, [r5, #0]
 800dd00:	b1b9      	cbz	r1, 800dd32 <__sflush_r+0xae>
 800dd02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd06:	4299      	cmp	r1, r3
 800dd08:	d002      	beq.n	800dd10 <__sflush_r+0x8c>
 800dd0a:	4628      	mov	r0, r5
 800dd0c:	f7ff faac 	bl	800d268 <_free_r>
 800dd10:	2300      	movs	r3, #0
 800dd12:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd14:	e00d      	b.n	800dd32 <__sflush_r+0xae>
 800dd16:	2301      	movs	r3, #1
 800dd18:	4628      	mov	r0, r5
 800dd1a:	47b0      	blx	r6
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	1c50      	adds	r0, r2, #1
 800dd20:	d1c9      	bne.n	800dcb6 <__sflush_r+0x32>
 800dd22:	682b      	ldr	r3, [r5, #0]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d0c6      	beq.n	800dcb6 <__sflush_r+0x32>
 800dd28:	2b1d      	cmp	r3, #29
 800dd2a:	d001      	beq.n	800dd30 <__sflush_r+0xac>
 800dd2c:	2b16      	cmp	r3, #22
 800dd2e:	d11e      	bne.n	800dd6e <__sflush_r+0xea>
 800dd30:	602f      	str	r7, [r5, #0]
 800dd32:	2000      	movs	r0, #0
 800dd34:	e022      	b.n	800dd7c <__sflush_r+0xf8>
 800dd36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd3a:	b21b      	sxth	r3, r3
 800dd3c:	e01b      	b.n	800dd76 <__sflush_r+0xf2>
 800dd3e:	690f      	ldr	r7, [r1, #16]
 800dd40:	2f00      	cmp	r7, #0
 800dd42:	d0f6      	beq.n	800dd32 <__sflush_r+0xae>
 800dd44:	0793      	lsls	r3, r2, #30
 800dd46:	680e      	ldr	r6, [r1, #0]
 800dd48:	bf08      	it	eq
 800dd4a:	694b      	ldreq	r3, [r1, #20]
 800dd4c:	600f      	str	r7, [r1, #0]
 800dd4e:	bf18      	it	ne
 800dd50:	2300      	movne	r3, #0
 800dd52:	eba6 0807 	sub.w	r8, r6, r7
 800dd56:	608b      	str	r3, [r1, #8]
 800dd58:	f1b8 0f00 	cmp.w	r8, #0
 800dd5c:	dde9      	ble.n	800dd32 <__sflush_r+0xae>
 800dd5e:	6a21      	ldr	r1, [r4, #32]
 800dd60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dd62:	4643      	mov	r3, r8
 800dd64:	463a      	mov	r2, r7
 800dd66:	4628      	mov	r0, r5
 800dd68:	47b0      	blx	r6
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	dc08      	bgt.n	800dd80 <__sflush_r+0xfc>
 800dd6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd76:	81a3      	strh	r3, [r4, #12]
 800dd78:	f04f 30ff 	mov.w	r0, #4294967295
 800dd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd80:	4407      	add	r7, r0
 800dd82:	eba8 0800 	sub.w	r8, r8, r0
 800dd86:	e7e7      	b.n	800dd58 <__sflush_r+0xd4>
 800dd88:	dfbffffe 	.word	0xdfbffffe

0800dd8c <_fflush_r>:
 800dd8c:	b538      	push	{r3, r4, r5, lr}
 800dd8e:	690b      	ldr	r3, [r1, #16]
 800dd90:	4605      	mov	r5, r0
 800dd92:	460c      	mov	r4, r1
 800dd94:	b913      	cbnz	r3, 800dd9c <_fflush_r+0x10>
 800dd96:	2500      	movs	r5, #0
 800dd98:	4628      	mov	r0, r5
 800dd9a:	bd38      	pop	{r3, r4, r5, pc}
 800dd9c:	b118      	cbz	r0, 800dda6 <_fflush_r+0x1a>
 800dd9e:	6a03      	ldr	r3, [r0, #32]
 800dda0:	b90b      	cbnz	r3, 800dda6 <_fflush_r+0x1a>
 800dda2:	f7fe faf7 	bl	800c394 <__sinit>
 800dda6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d0f3      	beq.n	800dd96 <_fflush_r+0xa>
 800ddae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ddb0:	07d0      	lsls	r0, r2, #31
 800ddb2:	d404      	bmi.n	800ddbe <_fflush_r+0x32>
 800ddb4:	0599      	lsls	r1, r3, #22
 800ddb6:	d402      	bmi.n	800ddbe <_fflush_r+0x32>
 800ddb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ddba:	f7fe fc04 	bl	800c5c6 <__retarget_lock_acquire_recursive>
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	4621      	mov	r1, r4
 800ddc2:	f7ff ff5f 	bl	800dc84 <__sflush_r>
 800ddc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ddc8:	07da      	lsls	r2, r3, #31
 800ddca:	4605      	mov	r5, r0
 800ddcc:	d4e4      	bmi.n	800dd98 <_fflush_r+0xc>
 800ddce:	89a3      	ldrh	r3, [r4, #12]
 800ddd0:	059b      	lsls	r3, r3, #22
 800ddd2:	d4e1      	bmi.n	800dd98 <_fflush_r+0xc>
 800ddd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ddd6:	f7fe fbf7 	bl	800c5c8 <__retarget_lock_release_recursive>
 800ddda:	e7dd      	b.n	800dd98 <_fflush_r+0xc>

0800dddc <__swbuf_r>:
 800dddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddde:	460e      	mov	r6, r1
 800dde0:	4614      	mov	r4, r2
 800dde2:	4605      	mov	r5, r0
 800dde4:	b118      	cbz	r0, 800ddee <__swbuf_r+0x12>
 800dde6:	6a03      	ldr	r3, [r0, #32]
 800dde8:	b90b      	cbnz	r3, 800ddee <__swbuf_r+0x12>
 800ddea:	f7fe fad3 	bl	800c394 <__sinit>
 800ddee:	69a3      	ldr	r3, [r4, #24]
 800ddf0:	60a3      	str	r3, [r4, #8]
 800ddf2:	89a3      	ldrh	r3, [r4, #12]
 800ddf4:	071a      	lsls	r2, r3, #28
 800ddf6:	d501      	bpl.n	800ddfc <__swbuf_r+0x20>
 800ddf8:	6923      	ldr	r3, [r4, #16]
 800ddfa:	b943      	cbnz	r3, 800de0e <__swbuf_r+0x32>
 800ddfc:	4621      	mov	r1, r4
 800ddfe:	4628      	mov	r0, r5
 800de00:	f000 f82a 	bl	800de58 <__swsetup_r>
 800de04:	b118      	cbz	r0, 800de0e <__swbuf_r+0x32>
 800de06:	f04f 37ff 	mov.w	r7, #4294967295
 800de0a:	4638      	mov	r0, r7
 800de0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de0e:	6823      	ldr	r3, [r4, #0]
 800de10:	6922      	ldr	r2, [r4, #16]
 800de12:	1a98      	subs	r0, r3, r2
 800de14:	6963      	ldr	r3, [r4, #20]
 800de16:	b2f6      	uxtb	r6, r6
 800de18:	4283      	cmp	r3, r0
 800de1a:	4637      	mov	r7, r6
 800de1c:	dc05      	bgt.n	800de2a <__swbuf_r+0x4e>
 800de1e:	4621      	mov	r1, r4
 800de20:	4628      	mov	r0, r5
 800de22:	f7ff ffb3 	bl	800dd8c <_fflush_r>
 800de26:	2800      	cmp	r0, #0
 800de28:	d1ed      	bne.n	800de06 <__swbuf_r+0x2a>
 800de2a:	68a3      	ldr	r3, [r4, #8]
 800de2c:	3b01      	subs	r3, #1
 800de2e:	60a3      	str	r3, [r4, #8]
 800de30:	6823      	ldr	r3, [r4, #0]
 800de32:	1c5a      	adds	r2, r3, #1
 800de34:	6022      	str	r2, [r4, #0]
 800de36:	701e      	strb	r6, [r3, #0]
 800de38:	6962      	ldr	r2, [r4, #20]
 800de3a:	1c43      	adds	r3, r0, #1
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d004      	beq.n	800de4a <__swbuf_r+0x6e>
 800de40:	89a3      	ldrh	r3, [r4, #12]
 800de42:	07db      	lsls	r3, r3, #31
 800de44:	d5e1      	bpl.n	800de0a <__swbuf_r+0x2e>
 800de46:	2e0a      	cmp	r6, #10
 800de48:	d1df      	bne.n	800de0a <__swbuf_r+0x2e>
 800de4a:	4621      	mov	r1, r4
 800de4c:	4628      	mov	r0, r5
 800de4e:	f7ff ff9d 	bl	800dd8c <_fflush_r>
 800de52:	2800      	cmp	r0, #0
 800de54:	d0d9      	beq.n	800de0a <__swbuf_r+0x2e>
 800de56:	e7d6      	b.n	800de06 <__swbuf_r+0x2a>

0800de58 <__swsetup_r>:
 800de58:	b538      	push	{r3, r4, r5, lr}
 800de5a:	4b29      	ldr	r3, [pc, #164]	@ (800df00 <__swsetup_r+0xa8>)
 800de5c:	4605      	mov	r5, r0
 800de5e:	6818      	ldr	r0, [r3, #0]
 800de60:	460c      	mov	r4, r1
 800de62:	b118      	cbz	r0, 800de6c <__swsetup_r+0x14>
 800de64:	6a03      	ldr	r3, [r0, #32]
 800de66:	b90b      	cbnz	r3, 800de6c <__swsetup_r+0x14>
 800de68:	f7fe fa94 	bl	800c394 <__sinit>
 800de6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de70:	0719      	lsls	r1, r3, #28
 800de72:	d422      	bmi.n	800deba <__swsetup_r+0x62>
 800de74:	06da      	lsls	r2, r3, #27
 800de76:	d407      	bmi.n	800de88 <__swsetup_r+0x30>
 800de78:	2209      	movs	r2, #9
 800de7a:	602a      	str	r2, [r5, #0]
 800de7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de80:	81a3      	strh	r3, [r4, #12]
 800de82:	f04f 30ff 	mov.w	r0, #4294967295
 800de86:	e033      	b.n	800def0 <__swsetup_r+0x98>
 800de88:	0758      	lsls	r0, r3, #29
 800de8a:	d512      	bpl.n	800deb2 <__swsetup_r+0x5a>
 800de8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de8e:	b141      	cbz	r1, 800dea2 <__swsetup_r+0x4a>
 800de90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de94:	4299      	cmp	r1, r3
 800de96:	d002      	beq.n	800de9e <__swsetup_r+0x46>
 800de98:	4628      	mov	r0, r5
 800de9a:	f7ff f9e5 	bl	800d268 <_free_r>
 800de9e:	2300      	movs	r3, #0
 800dea0:	6363      	str	r3, [r4, #52]	@ 0x34
 800dea2:	89a3      	ldrh	r3, [r4, #12]
 800dea4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dea8:	81a3      	strh	r3, [r4, #12]
 800deaa:	2300      	movs	r3, #0
 800deac:	6063      	str	r3, [r4, #4]
 800deae:	6923      	ldr	r3, [r4, #16]
 800deb0:	6023      	str	r3, [r4, #0]
 800deb2:	89a3      	ldrh	r3, [r4, #12]
 800deb4:	f043 0308 	orr.w	r3, r3, #8
 800deb8:	81a3      	strh	r3, [r4, #12]
 800deba:	6923      	ldr	r3, [r4, #16]
 800debc:	b94b      	cbnz	r3, 800ded2 <__swsetup_r+0x7a>
 800debe:	89a3      	ldrh	r3, [r4, #12]
 800dec0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dec8:	d003      	beq.n	800ded2 <__swsetup_r+0x7a>
 800deca:	4621      	mov	r1, r4
 800decc:	4628      	mov	r0, r5
 800dece:	f000 f8b1 	bl	800e034 <__smakebuf_r>
 800ded2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ded6:	f013 0201 	ands.w	r2, r3, #1
 800deda:	d00a      	beq.n	800def2 <__swsetup_r+0x9a>
 800dedc:	2200      	movs	r2, #0
 800dede:	60a2      	str	r2, [r4, #8]
 800dee0:	6962      	ldr	r2, [r4, #20]
 800dee2:	4252      	negs	r2, r2
 800dee4:	61a2      	str	r2, [r4, #24]
 800dee6:	6922      	ldr	r2, [r4, #16]
 800dee8:	b942      	cbnz	r2, 800defc <__swsetup_r+0xa4>
 800deea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800deee:	d1c5      	bne.n	800de7c <__swsetup_r+0x24>
 800def0:	bd38      	pop	{r3, r4, r5, pc}
 800def2:	0799      	lsls	r1, r3, #30
 800def4:	bf58      	it	pl
 800def6:	6962      	ldrpl	r2, [r4, #20]
 800def8:	60a2      	str	r2, [r4, #8]
 800defa:	e7f4      	b.n	800dee6 <__swsetup_r+0x8e>
 800defc:	2000      	movs	r0, #0
 800defe:	e7f7      	b.n	800def0 <__swsetup_r+0x98>
 800df00:	2000003c 	.word	0x2000003c

0800df04 <memcpy>:
 800df04:	440a      	add	r2, r1
 800df06:	4291      	cmp	r1, r2
 800df08:	f100 33ff 	add.w	r3, r0, #4294967295
 800df0c:	d100      	bne.n	800df10 <memcpy+0xc>
 800df0e:	4770      	bx	lr
 800df10:	b510      	push	{r4, lr}
 800df12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df1a:	4291      	cmp	r1, r2
 800df1c:	d1f9      	bne.n	800df12 <memcpy+0xe>
 800df1e:	bd10      	pop	{r4, pc}

0800df20 <__assert_func>:
 800df20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df22:	4614      	mov	r4, r2
 800df24:	461a      	mov	r2, r3
 800df26:	4b09      	ldr	r3, [pc, #36]	@ (800df4c <__assert_func+0x2c>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	4605      	mov	r5, r0
 800df2c:	68d8      	ldr	r0, [r3, #12]
 800df2e:	b954      	cbnz	r4, 800df46 <__assert_func+0x26>
 800df30:	4b07      	ldr	r3, [pc, #28]	@ (800df50 <__assert_func+0x30>)
 800df32:	461c      	mov	r4, r3
 800df34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df38:	9100      	str	r1, [sp, #0]
 800df3a:	462b      	mov	r3, r5
 800df3c:	4905      	ldr	r1, [pc, #20]	@ (800df54 <__assert_func+0x34>)
 800df3e:	f000 f841 	bl	800dfc4 <fiprintf>
 800df42:	f000 f8d5 	bl	800e0f0 <abort>
 800df46:	4b04      	ldr	r3, [pc, #16]	@ (800df58 <__assert_func+0x38>)
 800df48:	e7f4      	b.n	800df34 <__assert_func+0x14>
 800df4a:	bf00      	nop
 800df4c:	2000003c 	.word	0x2000003c
 800df50:	0800edae 	.word	0x0800edae
 800df54:	0800ed80 	.word	0x0800ed80
 800df58:	0800ed73 	.word	0x0800ed73

0800df5c <_calloc_r>:
 800df5c:	b570      	push	{r4, r5, r6, lr}
 800df5e:	fba1 5402 	umull	r5, r4, r1, r2
 800df62:	b93c      	cbnz	r4, 800df74 <_calloc_r+0x18>
 800df64:	4629      	mov	r1, r5
 800df66:	f7fd fca5 	bl	800b8b4 <_malloc_r>
 800df6a:	4606      	mov	r6, r0
 800df6c:	b928      	cbnz	r0, 800df7a <_calloc_r+0x1e>
 800df6e:	2600      	movs	r6, #0
 800df70:	4630      	mov	r0, r6
 800df72:	bd70      	pop	{r4, r5, r6, pc}
 800df74:	220c      	movs	r2, #12
 800df76:	6002      	str	r2, [r0, #0]
 800df78:	e7f9      	b.n	800df6e <_calloc_r+0x12>
 800df7a:	462a      	mov	r2, r5
 800df7c:	4621      	mov	r1, r4
 800df7e:	f7fe fa94 	bl	800c4aa <memset>
 800df82:	e7f5      	b.n	800df70 <_calloc_r+0x14>

0800df84 <__ascii_mbtowc>:
 800df84:	b082      	sub	sp, #8
 800df86:	b901      	cbnz	r1, 800df8a <__ascii_mbtowc+0x6>
 800df88:	a901      	add	r1, sp, #4
 800df8a:	b142      	cbz	r2, 800df9e <__ascii_mbtowc+0x1a>
 800df8c:	b14b      	cbz	r3, 800dfa2 <__ascii_mbtowc+0x1e>
 800df8e:	7813      	ldrb	r3, [r2, #0]
 800df90:	600b      	str	r3, [r1, #0]
 800df92:	7812      	ldrb	r2, [r2, #0]
 800df94:	1e10      	subs	r0, r2, #0
 800df96:	bf18      	it	ne
 800df98:	2001      	movne	r0, #1
 800df9a:	b002      	add	sp, #8
 800df9c:	4770      	bx	lr
 800df9e:	4610      	mov	r0, r2
 800dfa0:	e7fb      	b.n	800df9a <__ascii_mbtowc+0x16>
 800dfa2:	f06f 0001 	mvn.w	r0, #1
 800dfa6:	e7f8      	b.n	800df9a <__ascii_mbtowc+0x16>

0800dfa8 <__ascii_wctomb>:
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	4608      	mov	r0, r1
 800dfac:	b141      	cbz	r1, 800dfc0 <__ascii_wctomb+0x18>
 800dfae:	2aff      	cmp	r2, #255	@ 0xff
 800dfb0:	d904      	bls.n	800dfbc <__ascii_wctomb+0x14>
 800dfb2:	228a      	movs	r2, #138	@ 0x8a
 800dfb4:	601a      	str	r2, [r3, #0]
 800dfb6:	f04f 30ff 	mov.w	r0, #4294967295
 800dfba:	4770      	bx	lr
 800dfbc:	700a      	strb	r2, [r1, #0]
 800dfbe:	2001      	movs	r0, #1
 800dfc0:	4770      	bx	lr
	...

0800dfc4 <fiprintf>:
 800dfc4:	b40e      	push	{r1, r2, r3}
 800dfc6:	b503      	push	{r0, r1, lr}
 800dfc8:	4601      	mov	r1, r0
 800dfca:	ab03      	add	r3, sp, #12
 800dfcc:	4805      	ldr	r0, [pc, #20]	@ (800dfe4 <fiprintf+0x20>)
 800dfce:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfd2:	6800      	ldr	r0, [r0, #0]
 800dfd4:	9301      	str	r3, [sp, #4]
 800dfd6:	f7ff fd3d 	bl	800da54 <_vfiprintf_r>
 800dfda:	b002      	add	sp, #8
 800dfdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfe0:	b003      	add	sp, #12
 800dfe2:	4770      	bx	lr
 800dfe4:	2000003c 	.word	0x2000003c

0800dfe8 <__swhatbuf_r>:
 800dfe8:	b570      	push	{r4, r5, r6, lr}
 800dfea:	460c      	mov	r4, r1
 800dfec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dff0:	2900      	cmp	r1, #0
 800dff2:	b096      	sub	sp, #88	@ 0x58
 800dff4:	4615      	mov	r5, r2
 800dff6:	461e      	mov	r6, r3
 800dff8:	da0d      	bge.n	800e016 <__swhatbuf_r+0x2e>
 800dffa:	89a3      	ldrh	r3, [r4, #12]
 800dffc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e000:	f04f 0100 	mov.w	r1, #0
 800e004:	bf14      	ite	ne
 800e006:	2340      	movne	r3, #64	@ 0x40
 800e008:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e00c:	2000      	movs	r0, #0
 800e00e:	6031      	str	r1, [r6, #0]
 800e010:	602b      	str	r3, [r5, #0]
 800e012:	b016      	add	sp, #88	@ 0x58
 800e014:	bd70      	pop	{r4, r5, r6, pc}
 800e016:	466a      	mov	r2, sp
 800e018:	f000 f848 	bl	800e0ac <_fstat_r>
 800e01c:	2800      	cmp	r0, #0
 800e01e:	dbec      	blt.n	800dffa <__swhatbuf_r+0x12>
 800e020:	9901      	ldr	r1, [sp, #4]
 800e022:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e026:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e02a:	4259      	negs	r1, r3
 800e02c:	4159      	adcs	r1, r3
 800e02e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e032:	e7eb      	b.n	800e00c <__swhatbuf_r+0x24>

0800e034 <__smakebuf_r>:
 800e034:	898b      	ldrh	r3, [r1, #12]
 800e036:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e038:	079d      	lsls	r5, r3, #30
 800e03a:	4606      	mov	r6, r0
 800e03c:	460c      	mov	r4, r1
 800e03e:	d507      	bpl.n	800e050 <__smakebuf_r+0x1c>
 800e040:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e044:	6023      	str	r3, [r4, #0]
 800e046:	6123      	str	r3, [r4, #16]
 800e048:	2301      	movs	r3, #1
 800e04a:	6163      	str	r3, [r4, #20]
 800e04c:	b003      	add	sp, #12
 800e04e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e050:	ab01      	add	r3, sp, #4
 800e052:	466a      	mov	r2, sp
 800e054:	f7ff ffc8 	bl	800dfe8 <__swhatbuf_r>
 800e058:	9f00      	ldr	r7, [sp, #0]
 800e05a:	4605      	mov	r5, r0
 800e05c:	4639      	mov	r1, r7
 800e05e:	4630      	mov	r0, r6
 800e060:	f7fd fc28 	bl	800b8b4 <_malloc_r>
 800e064:	b948      	cbnz	r0, 800e07a <__smakebuf_r+0x46>
 800e066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e06a:	059a      	lsls	r2, r3, #22
 800e06c:	d4ee      	bmi.n	800e04c <__smakebuf_r+0x18>
 800e06e:	f023 0303 	bic.w	r3, r3, #3
 800e072:	f043 0302 	orr.w	r3, r3, #2
 800e076:	81a3      	strh	r3, [r4, #12]
 800e078:	e7e2      	b.n	800e040 <__smakebuf_r+0xc>
 800e07a:	89a3      	ldrh	r3, [r4, #12]
 800e07c:	6020      	str	r0, [r4, #0]
 800e07e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e082:	81a3      	strh	r3, [r4, #12]
 800e084:	9b01      	ldr	r3, [sp, #4]
 800e086:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e08a:	b15b      	cbz	r3, 800e0a4 <__smakebuf_r+0x70>
 800e08c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e090:	4630      	mov	r0, r6
 800e092:	f000 f81d 	bl	800e0d0 <_isatty_r>
 800e096:	b128      	cbz	r0, 800e0a4 <__smakebuf_r+0x70>
 800e098:	89a3      	ldrh	r3, [r4, #12]
 800e09a:	f023 0303 	bic.w	r3, r3, #3
 800e09e:	f043 0301 	orr.w	r3, r3, #1
 800e0a2:	81a3      	strh	r3, [r4, #12]
 800e0a4:	89a3      	ldrh	r3, [r4, #12]
 800e0a6:	431d      	orrs	r5, r3
 800e0a8:	81a5      	strh	r5, [r4, #12]
 800e0aa:	e7cf      	b.n	800e04c <__smakebuf_r+0x18>

0800e0ac <_fstat_r>:
 800e0ac:	b538      	push	{r3, r4, r5, lr}
 800e0ae:	4d07      	ldr	r5, [pc, #28]	@ (800e0cc <_fstat_r+0x20>)
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	4604      	mov	r4, r0
 800e0b4:	4608      	mov	r0, r1
 800e0b6:	4611      	mov	r1, r2
 800e0b8:	602b      	str	r3, [r5, #0]
 800e0ba:	f7f4 fbc3 	bl	8002844 <_fstat>
 800e0be:	1c43      	adds	r3, r0, #1
 800e0c0:	d102      	bne.n	800e0c8 <_fstat_r+0x1c>
 800e0c2:	682b      	ldr	r3, [r5, #0]
 800e0c4:	b103      	cbz	r3, 800e0c8 <_fstat_r+0x1c>
 800e0c6:	6023      	str	r3, [r4, #0]
 800e0c8:	bd38      	pop	{r3, r4, r5, pc}
 800e0ca:	bf00      	nop
 800e0cc:	20000d60 	.word	0x20000d60

0800e0d0 <_isatty_r>:
 800e0d0:	b538      	push	{r3, r4, r5, lr}
 800e0d2:	4d06      	ldr	r5, [pc, #24]	@ (800e0ec <_isatty_r+0x1c>)
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	4604      	mov	r4, r0
 800e0d8:	4608      	mov	r0, r1
 800e0da:	602b      	str	r3, [r5, #0]
 800e0dc:	f7f4 fbc2 	bl	8002864 <_isatty>
 800e0e0:	1c43      	adds	r3, r0, #1
 800e0e2:	d102      	bne.n	800e0ea <_isatty_r+0x1a>
 800e0e4:	682b      	ldr	r3, [r5, #0]
 800e0e6:	b103      	cbz	r3, 800e0ea <_isatty_r+0x1a>
 800e0e8:	6023      	str	r3, [r4, #0]
 800e0ea:	bd38      	pop	{r3, r4, r5, pc}
 800e0ec:	20000d60 	.word	0x20000d60

0800e0f0 <abort>:
 800e0f0:	b508      	push	{r3, lr}
 800e0f2:	2006      	movs	r0, #6
 800e0f4:	f000 f82c 	bl	800e150 <raise>
 800e0f8:	2001      	movs	r0, #1
 800e0fa:	f7f4 fb53 	bl	80027a4 <_exit>

0800e0fe <_raise_r>:
 800e0fe:	291f      	cmp	r1, #31
 800e100:	b538      	push	{r3, r4, r5, lr}
 800e102:	4605      	mov	r5, r0
 800e104:	460c      	mov	r4, r1
 800e106:	d904      	bls.n	800e112 <_raise_r+0x14>
 800e108:	2316      	movs	r3, #22
 800e10a:	6003      	str	r3, [r0, #0]
 800e10c:	f04f 30ff 	mov.w	r0, #4294967295
 800e110:	bd38      	pop	{r3, r4, r5, pc}
 800e112:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e114:	b112      	cbz	r2, 800e11c <_raise_r+0x1e>
 800e116:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e11a:	b94b      	cbnz	r3, 800e130 <_raise_r+0x32>
 800e11c:	4628      	mov	r0, r5
 800e11e:	f000 f831 	bl	800e184 <_getpid_r>
 800e122:	4622      	mov	r2, r4
 800e124:	4601      	mov	r1, r0
 800e126:	4628      	mov	r0, r5
 800e128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e12c:	f000 b818 	b.w	800e160 <_kill_r>
 800e130:	2b01      	cmp	r3, #1
 800e132:	d00a      	beq.n	800e14a <_raise_r+0x4c>
 800e134:	1c59      	adds	r1, r3, #1
 800e136:	d103      	bne.n	800e140 <_raise_r+0x42>
 800e138:	2316      	movs	r3, #22
 800e13a:	6003      	str	r3, [r0, #0]
 800e13c:	2001      	movs	r0, #1
 800e13e:	e7e7      	b.n	800e110 <_raise_r+0x12>
 800e140:	2100      	movs	r1, #0
 800e142:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e146:	4620      	mov	r0, r4
 800e148:	4798      	blx	r3
 800e14a:	2000      	movs	r0, #0
 800e14c:	e7e0      	b.n	800e110 <_raise_r+0x12>
	...

0800e150 <raise>:
 800e150:	4b02      	ldr	r3, [pc, #8]	@ (800e15c <raise+0xc>)
 800e152:	4601      	mov	r1, r0
 800e154:	6818      	ldr	r0, [r3, #0]
 800e156:	f7ff bfd2 	b.w	800e0fe <_raise_r>
 800e15a:	bf00      	nop
 800e15c:	2000003c 	.word	0x2000003c

0800e160 <_kill_r>:
 800e160:	b538      	push	{r3, r4, r5, lr}
 800e162:	4d07      	ldr	r5, [pc, #28]	@ (800e180 <_kill_r+0x20>)
 800e164:	2300      	movs	r3, #0
 800e166:	4604      	mov	r4, r0
 800e168:	4608      	mov	r0, r1
 800e16a:	4611      	mov	r1, r2
 800e16c:	602b      	str	r3, [r5, #0]
 800e16e:	f7f4 fb09 	bl	8002784 <_kill>
 800e172:	1c43      	adds	r3, r0, #1
 800e174:	d102      	bne.n	800e17c <_kill_r+0x1c>
 800e176:	682b      	ldr	r3, [r5, #0]
 800e178:	b103      	cbz	r3, 800e17c <_kill_r+0x1c>
 800e17a:	6023      	str	r3, [r4, #0]
 800e17c:	bd38      	pop	{r3, r4, r5, pc}
 800e17e:	bf00      	nop
 800e180:	20000d60 	.word	0x20000d60

0800e184 <_getpid_r>:
 800e184:	f7f4 baf6 	b.w	8002774 <_getpid>

0800e188 <log>:
 800e188:	b538      	push	{r3, r4, r5, lr}
 800e18a:	ed2d 8b02 	vpush	{d8}
 800e18e:	ec55 4b10 	vmov	r4, r5, d0
 800e192:	f000 f949 	bl	800e428 <__ieee754_log>
 800e196:	4622      	mov	r2, r4
 800e198:	462b      	mov	r3, r5
 800e19a:	4620      	mov	r0, r4
 800e19c:	4629      	mov	r1, r5
 800e19e:	eeb0 8a40 	vmov.f32	s16, s0
 800e1a2:	eef0 8a60 	vmov.f32	s17, s1
 800e1a6:	f7f2 fcc1 	bl	8000b2c <__aeabi_dcmpun>
 800e1aa:	b998      	cbnz	r0, 800e1d4 <log+0x4c>
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	4620      	mov	r0, r4
 800e1b2:	4629      	mov	r1, r5
 800e1b4:	f7f2 fcb0 	bl	8000b18 <__aeabi_dcmpgt>
 800e1b8:	b960      	cbnz	r0, 800e1d4 <log+0x4c>
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	2300      	movs	r3, #0
 800e1be:	4620      	mov	r0, r4
 800e1c0:	4629      	mov	r1, r5
 800e1c2:	f7f2 fc81 	bl	8000ac8 <__aeabi_dcmpeq>
 800e1c6:	b160      	cbz	r0, 800e1e2 <log+0x5a>
 800e1c8:	f7fe f9d2 	bl	800c570 <__errno>
 800e1cc:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800e1f8 <log+0x70>
 800e1d0:	2322      	movs	r3, #34	@ 0x22
 800e1d2:	6003      	str	r3, [r0, #0]
 800e1d4:	eeb0 0a48 	vmov.f32	s0, s16
 800e1d8:	eef0 0a68 	vmov.f32	s1, s17
 800e1dc:	ecbd 8b02 	vpop	{d8}
 800e1e0:	bd38      	pop	{r3, r4, r5, pc}
 800e1e2:	f7fe f9c5 	bl	800c570 <__errno>
 800e1e6:	ecbd 8b02 	vpop	{d8}
 800e1ea:	2321      	movs	r3, #33	@ 0x21
 800e1ec:	6003      	str	r3, [r0, #0]
 800e1ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1f2:	4803      	ldr	r0, [pc, #12]	@ (800e200 <log+0x78>)
 800e1f4:	f000 b834 	b.w	800e260 <nan>
 800e1f8:	00000000 	.word	0x00000000
 800e1fc:	fff00000 	.word	0xfff00000
 800e200:	0800edae 	.word	0x0800edae

0800e204 <sqrt>:
 800e204:	b538      	push	{r3, r4, r5, lr}
 800e206:	ed2d 8b02 	vpush	{d8}
 800e20a:	ec55 4b10 	vmov	r4, r5, d0
 800e20e:	f000 f82f 	bl	800e270 <__ieee754_sqrt>
 800e212:	4622      	mov	r2, r4
 800e214:	462b      	mov	r3, r5
 800e216:	4620      	mov	r0, r4
 800e218:	4629      	mov	r1, r5
 800e21a:	eeb0 8a40 	vmov.f32	s16, s0
 800e21e:	eef0 8a60 	vmov.f32	s17, s1
 800e222:	f7f2 fc83 	bl	8000b2c <__aeabi_dcmpun>
 800e226:	b990      	cbnz	r0, 800e24e <sqrt+0x4a>
 800e228:	2200      	movs	r2, #0
 800e22a:	2300      	movs	r3, #0
 800e22c:	4620      	mov	r0, r4
 800e22e:	4629      	mov	r1, r5
 800e230:	f7f2 fc54 	bl	8000adc <__aeabi_dcmplt>
 800e234:	b158      	cbz	r0, 800e24e <sqrt+0x4a>
 800e236:	f7fe f99b 	bl	800c570 <__errno>
 800e23a:	2321      	movs	r3, #33	@ 0x21
 800e23c:	6003      	str	r3, [r0, #0]
 800e23e:	2200      	movs	r2, #0
 800e240:	2300      	movs	r3, #0
 800e242:	4610      	mov	r0, r2
 800e244:	4619      	mov	r1, r3
 800e246:	f7f2 fb01 	bl	800084c <__aeabi_ddiv>
 800e24a:	ec41 0b18 	vmov	d8, r0, r1
 800e24e:	eeb0 0a48 	vmov.f32	s0, s16
 800e252:	eef0 0a68 	vmov.f32	s1, s17
 800e256:	ecbd 8b02 	vpop	{d8}
 800e25a:	bd38      	pop	{r3, r4, r5, pc}
 800e25c:	0000      	movs	r0, r0
	...

0800e260 <nan>:
 800e260:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e268 <nan+0x8>
 800e264:	4770      	bx	lr
 800e266:	bf00      	nop
 800e268:	00000000 	.word	0x00000000
 800e26c:	7ff80000 	.word	0x7ff80000

0800e270 <__ieee754_sqrt>:
 800e270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e274:	4a68      	ldr	r2, [pc, #416]	@ (800e418 <__ieee754_sqrt+0x1a8>)
 800e276:	ec55 4b10 	vmov	r4, r5, d0
 800e27a:	43aa      	bics	r2, r5
 800e27c:	462b      	mov	r3, r5
 800e27e:	4621      	mov	r1, r4
 800e280:	d110      	bne.n	800e2a4 <__ieee754_sqrt+0x34>
 800e282:	4622      	mov	r2, r4
 800e284:	4620      	mov	r0, r4
 800e286:	4629      	mov	r1, r5
 800e288:	f7f2 f9b6 	bl	80005f8 <__aeabi_dmul>
 800e28c:	4602      	mov	r2, r0
 800e28e:	460b      	mov	r3, r1
 800e290:	4620      	mov	r0, r4
 800e292:	4629      	mov	r1, r5
 800e294:	f7f1 fffa 	bl	800028c <__adddf3>
 800e298:	4604      	mov	r4, r0
 800e29a:	460d      	mov	r5, r1
 800e29c:	ec45 4b10 	vmov	d0, r4, r5
 800e2a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2a4:	2d00      	cmp	r5, #0
 800e2a6:	dc0e      	bgt.n	800e2c6 <__ieee754_sqrt+0x56>
 800e2a8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e2ac:	4322      	orrs	r2, r4
 800e2ae:	d0f5      	beq.n	800e29c <__ieee754_sqrt+0x2c>
 800e2b0:	b19d      	cbz	r5, 800e2da <__ieee754_sqrt+0x6a>
 800e2b2:	4622      	mov	r2, r4
 800e2b4:	4620      	mov	r0, r4
 800e2b6:	4629      	mov	r1, r5
 800e2b8:	f7f1 ffe6 	bl	8000288 <__aeabi_dsub>
 800e2bc:	4602      	mov	r2, r0
 800e2be:	460b      	mov	r3, r1
 800e2c0:	f7f2 fac4 	bl	800084c <__aeabi_ddiv>
 800e2c4:	e7e8      	b.n	800e298 <__ieee754_sqrt+0x28>
 800e2c6:	152a      	asrs	r2, r5, #20
 800e2c8:	d115      	bne.n	800e2f6 <__ieee754_sqrt+0x86>
 800e2ca:	2000      	movs	r0, #0
 800e2cc:	e009      	b.n	800e2e2 <__ieee754_sqrt+0x72>
 800e2ce:	0acb      	lsrs	r3, r1, #11
 800e2d0:	3a15      	subs	r2, #21
 800e2d2:	0549      	lsls	r1, r1, #21
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d0fa      	beq.n	800e2ce <__ieee754_sqrt+0x5e>
 800e2d8:	e7f7      	b.n	800e2ca <__ieee754_sqrt+0x5a>
 800e2da:	462a      	mov	r2, r5
 800e2dc:	e7fa      	b.n	800e2d4 <__ieee754_sqrt+0x64>
 800e2de:	005b      	lsls	r3, r3, #1
 800e2e0:	3001      	adds	r0, #1
 800e2e2:	02dc      	lsls	r4, r3, #11
 800e2e4:	d5fb      	bpl.n	800e2de <__ieee754_sqrt+0x6e>
 800e2e6:	1e44      	subs	r4, r0, #1
 800e2e8:	1b12      	subs	r2, r2, r4
 800e2ea:	f1c0 0420 	rsb	r4, r0, #32
 800e2ee:	fa21 f404 	lsr.w	r4, r1, r4
 800e2f2:	4323      	orrs	r3, r4
 800e2f4:	4081      	lsls	r1, r0
 800e2f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2fa:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800e2fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e302:	07d2      	lsls	r2, r2, #31
 800e304:	bf5c      	itt	pl
 800e306:	005b      	lslpl	r3, r3, #1
 800e308:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e30c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e310:	bf58      	it	pl
 800e312:	0049      	lslpl	r1, r1, #1
 800e314:	2600      	movs	r6, #0
 800e316:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e31a:	106d      	asrs	r5, r5, #1
 800e31c:	0049      	lsls	r1, r1, #1
 800e31e:	2016      	movs	r0, #22
 800e320:	4632      	mov	r2, r6
 800e322:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e326:	1917      	adds	r7, r2, r4
 800e328:	429f      	cmp	r7, r3
 800e32a:	bfde      	ittt	le
 800e32c:	193a      	addle	r2, r7, r4
 800e32e:	1bdb      	suble	r3, r3, r7
 800e330:	1936      	addle	r6, r6, r4
 800e332:	0fcf      	lsrs	r7, r1, #31
 800e334:	3801      	subs	r0, #1
 800e336:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e33a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e33e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e342:	d1f0      	bne.n	800e326 <__ieee754_sqrt+0xb6>
 800e344:	4604      	mov	r4, r0
 800e346:	2720      	movs	r7, #32
 800e348:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e34c:	429a      	cmp	r2, r3
 800e34e:	eb00 0e0c 	add.w	lr, r0, ip
 800e352:	db02      	blt.n	800e35a <__ieee754_sqrt+0xea>
 800e354:	d113      	bne.n	800e37e <__ieee754_sqrt+0x10e>
 800e356:	458e      	cmp	lr, r1
 800e358:	d811      	bhi.n	800e37e <__ieee754_sqrt+0x10e>
 800e35a:	f1be 0f00 	cmp.w	lr, #0
 800e35e:	eb0e 000c 	add.w	r0, lr, ip
 800e362:	da42      	bge.n	800e3ea <__ieee754_sqrt+0x17a>
 800e364:	2800      	cmp	r0, #0
 800e366:	db40      	blt.n	800e3ea <__ieee754_sqrt+0x17a>
 800e368:	f102 0801 	add.w	r8, r2, #1
 800e36c:	1a9b      	subs	r3, r3, r2
 800e36e:	458e      	cmp	lr, r1
 800e370:	bf88      	it	hi
 800e372:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e376:	eba1 010e 	sub.w	r1, r1, lr
 800e37a:	4464      	add	r4, ip
 800e37c:	4642      	mov	r2, r8
 800e37e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e382:	3f01      	subs	r7, #1
 800e384:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e388:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e38c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e390:	d1dc      	bne.n	800e34c <__ieee754_sqrt+0xdc>
 800e392:	4319      	orrs	r1, r3
 800e394:	d01b      	beq.n	800e3ce <__ieee754_sqrt+0x15e>
 800e396:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e41c <__ieee754_sqrt+0x1ac>
 800e39a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e420 <__ieee754_sqrt+0x1b0>
 800e39e:	e9da 0100 	ldrd	r0, r1, [sl]
 800e3a2:	e9db 2300 	ldrd	r2, r3, [fp]
 800e3a6:	f7f1 ff6f 	bl	8000288 <__aeabi_dsub>
 800e3aa:	e9da 8900 	ldrd	r8, r9, [sl]
 800e3ae:	4602      	mov	r2, r0
 800e3b0:	460b      	mov	r3, r1
 800e3b2:	4640      	mov	r0, r8
 800e3b4:	4649      	mov	r1, r9
 800e3b6:	f7f2 fb9b 	bl	8000af0 <__aeabi_dcmple>
 800e3ba:	b140      	cbz	r0, 800e3ce <__ieee754_sqrt+0x15e>
 800e3bc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e3c0:	e9da 0100 	ldrd	r0, r1, [sl]
 800e3c4:	e9db 2300 	ldrd	r2, r3, [fp]
 800e3c8:	d111      	bne.n	800e3ee <__ieee754_sqrt+0x17e>
 800e3ca:	3601      	adds	r6, #1
 800e3cc:	463c      	mov	r4, r7
 800e3ce:	1072      	asrs	r2, r6, #1
 800e3d0:	0863      	lsrs	r3, r4, #1
 800e3d2:	07f1      	lsls	r1, r6, #31
 800e3d4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e3d8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e3dc:	bf48      	it	mi
 800e3de:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e3e2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	e756      	b.n	800e298 <__ieee754_sqrt+0x28>
 800e3ea:	4690      	mov	r8, r2
 800e3ec:	e7be      	b.n	800e36c <__ieee754_sqrt+0xfc>
 800e3ee:	f7f1 ff4d 	bl	800028c <__adddf3>
 800e3f2:	e9da 8900 	ldrd	r8, r9, [sl]
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	460b      	mov	r3, r1
 800e3fa:	4640      	mov	r0, r8
 800e3fc:	4649      	mov	r1, r9
 800e3fe:	f7f2 fb6d 	bl	8000adc <__aeabi_dcmplt>
 800e402:	b120      	cbz	r0, 800e40e <__ieee754_sqrt+0x19e>
 800e404:	1ca0      	adds	r0, r4, #2
 800e406:	bf08      	it	eq
 800e408:	3601      	addeq	r6, #1
 800e40a:	3402      	adds	r4, #2
 800e40c:	e7df      	b.n	800e3ce <__ieee754_sqrt+0x15e>
 800e40e:	1c63      	adds	r3, r4, #1
 800e410:	f023 0401 	bic.w	r4, r3, #1
 800e414:	e7db      	b.n	800e3ce <__ieee754_sqrt+0x15e>
 800e416:	bf00      	nop
 800e418:	7ff00000 	.word	0x7ff00000
 800e41c:	20000200 	.word	0x20000200
 800e420:	200001f8 	.word	0x200001f8
 800e424:	00000000 	.word	0x00000000

0800e428 <__ieee754_log>:
 800e428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e42c:	ec51 0b10 	vmov	r0, r1, d0
 800e430:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800e434:	b087      	sub	sp, #28
 800e436:	460d      	mov	r5, r1
 800e438:	da26      	bge.n	800e488 <__ieee754_log+0x60>
 800e43a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e43e:	4303      	orrs	r3, r0
 800e440:	4602      	mov	r2, r0
 800e442:	d10a      	bne.n	800e45a <__ieee754_log+0x32>
 800e444:	49ce      	ldr	r1, [pc, #824]	@ (800e780 <__ieee754_log+0x358>)
 800e446:	2200      	movs	r2, #0
 800e448:	2300      	movs	r3, #0
 800e44a:	2000      	movs	r0, #0
 800e44c:	f7f2 f9fe 	bl	800084c <__aeabi_ddiv>
 800e450:	ec41 0b10 	vmov	d0, r0, r1
 800e454:	b007      	add	sp, #28
 800e456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e45a:	2900      	cmp	r1, #0
 800e45c:	da05      	bge.n	800e46a <__ieee754_log+0x42>
 800e45e:	460b      	mov	r3, r1
 800e460:	f7f1 ff12 	bl	8000288 <__aeabi_dsub>
 800e464:	2200      	movs	r2, #0
 800e466:	2300      	movs	r3, #0
 800e468:	e7f0      	b.n	800e44c <__ieee754_log+0x24>
 800e46a:	4bc6      	ldr	r3, [pc, #792]	@ (800e784 <__ieee754_log+0x35c>)
 800e46c:	2200      	movs	r2, #0
 800e46e:	f7f2 f8c3 	bl	80005f8 <__aeabi_dmul>
 800e472:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800e476:	460d      	mov	r5, r1
 800e478:	4ac3      	ldr	r2, [pc, #780]	@ (800e788 <__ieee754_log+0x360>)
 800e47a:	4295      	cmp	r5, r2
 800e47c:	dd06      	ble.n	800e48c <__ieee754_log+0x64>
 800e47e:	4602      	mov	r2, r0
 800e480:	460b      	mov	r3, r1
 800e482:	f7f1 ff03 	bl	800028c <__adddf3>
 800e486:	e7e3      	b.n	800e450 <__ieee754_log+0x28>
 800e488:	2300      	movs	r3, #0
 800e48a:	e7f5      	b.n	800e478 <__ieee754_log+0x50>
 800e48c:	152c      	asrs	r4, r5, #20
 800e48e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800e492:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e496:	441c      	add	r4, r3
 800e498:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800e49c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800e4a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e4a4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800e4a8:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800e4ac:	ea42 0105 	orr.w	r1, r2, r5
 800e4b0:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	4bb5      	ldr	r3, [pc, #724]	@ (800e78c <__ieee754_log+0x364>)
 800e4b8:	f7f1 fee6 	bl	8000288 <__aeabi_dsub>
 800e4bc:	1cab      	adds	r3, r5, #2
 800e4be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4c2:	2b02      	cmp	r3, #2
 800e4c4:	4682      	mov	sl, r0
 800e4c6:	468b      	mov	fp, r1
 800e4c8:	f04f 0200 	mov.w	r2, #0
 800e4cc:	dc53      	bgt.n	800e576 <__ieee754_log+0x14e>
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	f7f2 fafa 	bl	8000ac8 <__aeabi_dcmpeq>
 800e4d4:	b1d0      	cbz	r0, 800e50c <__ieee754_log+0xe4>
 800e4d6:	2c00      	cmp	r4, #0
 800e4d8:	f000 8120 	beq.w	800e71c <__ieee754_log+0x2f4>
 800e4dc:	4620      	mov	r0, r4
 800e4de:	f7f2 f821 	bl	8000524 <__aeabi_i2d>
 800e4e2:	a391      	add	r3, pc, #580	@ (adr r3, 800e728 <__ieee754_log+0x300>)
 800e4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e8:	4606      	mov	r6, r0
 800e4ea:	460f      	mov	r7, r1
 800e4ec:	f7f2 f884 	bl	80005f8 <__aeabi_dmul>
 800e4f0:	a38f      	add	r3, pc, #572	@ (adr r3, 800e730 <__ieee754_log+0x308>)
 800e4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f6:	4604      	mov	r4, r0
 800e4f8:	460d      	mov	r5, r1
 800e4fa:	4630      	mov	r0, r6
 800e4fc:	4639      	mov	r1, r7
 800e4fe:	f7f2 f87b 	bl	80005f8 <__aeabi_dmul>
 800e502:	4602      	mov	r2, r0
 800e504:	460b      	mov	r3, r1
 800e506:	4620      	mov	r0, r4
 800e508:	4629      	mov	r1, r5
 800e50a:	e7ba      	b.n	800e482 <__ieee754_log+0x5a>
 800e50c:	a38a      	add	r3, pc, #552	@ (adr r3, 800e738 <__ieee754_log+0x310>)
 800e50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e512:	4650      	mov	r0, sl
 800e514:	4659      	mov	r1, fp
 800e516:	f7f2 f86f 	bl	80005f8 <__aeabi_dmul>
 800e51a:	4602      	mov	r2, r0
 800e51c:	460b      	mov	r3, r1
 800e51e:	2000      	movs	r0, #0
 800e520:	499b      	ldr	r1, [pc, #620]	@ (800e790 <__ieee754_log+0x368>)
 800e522:	f7f1 feb1 	bl	8000288 <__aeabi_dsub>
 800e526:	4652      	mov	r2, sl
 800e528:	4606      	mov	r6, r0
 800e52a:	460f      	mov	r7, r1
 800e52c:	465b      	mov	r3, fp
 800e52e:	4650      	mov	r0, sl
 800e530:	4659      	mov	r1, fp
 800e532:	f7f2 f861 	bl	80005f8 <__aeabi_dmul>
 800e536:	4602      	mov	r2, r0
 800e538:	460b      	mov	r3, r1
 800e53a:	4630      	mov	r0, r6
 800e53c:	4639      	mov	r1, r7
 800e53e:	f7f2 f85b 	bl	80005f8 <__aeabi_dmul>
 800e542:	4606      	mov	r6, r0
 800e544:	460f      	mov	r7, r1
 800e546:	b914      	cbnz	r4, 800e54e <__ieee754_log+0x126>
 800e548:	4632      	mov	r2, r6
 800e54a:	463b      	mov	r3, r7
 800e54c:	e0a0      	b.n	800e690 <__ieee754_log+0x268>
 800e54e:	4620      	mov	r0, r4
 800e550:	f7f1 ffe8 	bl	8000524 <__aeabi_i2d>
 800e554:	a374      	add	r3, pc, #464	@ (adr r3, 800e728 <__ieee754_log+0x300>)
 800e556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55a:	4680      	mov	r8, r0
 800e55c:	4689      	mov	r9, r1
 800e55e:	f7f2 f84b 	bl	80005f8 <__aeabi_dmul>
 800e562:	a373      	add	r3, pc, #460	@ (adr r3, 800e730 <__ieee754_log+0x308>)
 800e564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e568:	4604      	mov	r4, r0
 800e56a:	460d      	mov	r5, r1
 800e56c:	4640      	mov	r0, r8
 800e56e:	4649      	mov	r1, r9
 800e570:	f7f2 f842 	bl	80005f8 <__aeabi_dmul>
 800e574:	e0a5      	b.n	800e6c2 <__ieee754_log+0x29a>
 800e576:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e57a:	f7f1 fe87 	bl	800028c <__adddf3>
 800e57e:	4602      	mov	r2, r0
 800e580:	460b      	mov	r3, r1
 800e582:	4650      	mov	r0, sl
 800e584:	4659      	mov	r1, fp
 800e586:	f7f2 f961 	bl	800084c <__aeabi_ddiv>
 800e58a:	e9cd 0100 	strd	r0, r1, [sp]
 800e58e:	4620      	mov	r0, r4
 800e590:	f7f1 ffc8 	bl	8000524 <__aeabi_i2d>
 800e594:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e59c:	4610      	mov	r0, r2
 800e59e:	4619      	mov	r1, r3
 800e5a0:	f7f2 f82a 	bl	80005f8 <__aeabi_dmul>
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	460b      	mov	r3, r1
 800e5a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e5ac:	f7f2 f824 	bl	80005f8 <__aeabi_dmul>
 800e5b0:	a363      	add	r3, pc, #396	@ (adr r3, 800e740 <__ieee754_log+0x318>)
 800e5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b6:	4680      	mov	r8, r0
 800e5b8:	4689      	mov	r9, r1
 800e5ba:	f7f2 f81d 	bl	80005f8 <__aeabi_dmul>
 800e5be:	a362      	add	r3, pc, #392	@ (adr r3, 800e748 <__ieee754_log+0x320>)
 800e5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c4:	f7f1 fe62 	bl	800028c <__adddf3>
 800e5c8:	4642      	mov	r2, r8
 800e5ca:	464b      	mov	r3, r9
 800e5cc:	f7f2 f814 	bl	80005f8 <__aeabi_dmul>
 800e5d0:	a35f      	add	r3, pc, #380	@ (adr r3, 800e750 <__ieee754_log+0x328>)
 800e5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d6:	f7f1 fe59 	bl	800028c <__adddf3>
 800e5da:	4642      	mov	r2, r8
 800e5dc:	464b      	mov	r3, r9
 800e5de:	f7f2 f80b 	bl	80005f8 <__aeabi_dmul>
 800e5e2:	a35d      	add	r3, pc, #372	@ (adr r3, 800e758 <__ieee754_log+0x330>)
 800e5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e8:	f7f1 fe50 	bl	800028c <__adddf3>
 800e5ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5f0:	f7f2 f802 	bl	80005f8 <__aeabi_dmul>
 800e5f4:	a35a      	add	r3, pc, #360	@ (adr r3, 800e760 <__ieee754_log+0x338>)
 800e5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e5fe:	4640      	mov	r0, r8
 800e600:	4649      	mov	r1, r9
 800e602:	f7f1 fff9 	bl	80005f8 <__aeabi_dmul>
 800e606:	a358      	add	r3, pc, #352	@ (adr r3, 800e768 <__ieee754_log+0x340>)
 800e608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e60c:	f7f1 fe3e 	bl	800028c <__adddf3>
 800e610:	4642      	mov	r2, r8
 800e612:	464b      	mov	r3, r9
 800e614:	f7f1 fff0 	bl	80005f8 <__aeabi_dmul>
 800e618:	a355      	add	r3, pc, #340	@ (adr r3, 800e770 <__ieee754_log+0x348>)
 800e61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61e:	f7f1 fe35 	bl	800028c <__adddf3>
 800e622:	4642      	mov	r2, r8
 800e624:	464b      	mov	r3, r9
 800e626:	f7f1 ffe7 	bl	80005f8 <__aeabi_dmul>
 800e62a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800e62e:	4602      	mov	r2, r0
 800e630:	460b      	mov	r3, r1
 800e632:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800e636:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e63a:	f7f1 fe27 	bl	800028c <__adddf3>
 800e63e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800e642:	3551      	adds	r5, #81	@ 0x51
 800e644:	4335      	orrs	r5, r6
 800e646:	2d00      	cmp	r5, #0
 800e648:	4680      	mov	r8, r0
 800e64a:	4689      	mov	r9, r1
 800e64c:	dd48      	ble.n	800e6e0 <__ieee754_log+0x2b8>
 800e64e:	4b50      	ldr	r3, [pc, #320]	@ (800e790 <__ieee754_log+0x368>)
 800e650:	2200      	movs	r2, #0
 800e652:	4650      	mov	r0, sl
 800e654:	4659      	mov	r1, fp
 800e656:	f7f1 ffcf 	bl	80005f8 <__aeabi_dmul>
 800e65a:	4652      	mov	r2, sl
 800e65c:	465b      	mov	r3, fp
 800e65e:	f7f1 ffcb 	bl	80005f8 <__aeabi_dmul>
 800e662:	4602      	mov	r2, r0
 800e664:	460b      	mov	r3, r1
 800e666:	4606      	mov	r6, r0
 800e668:	460f      	mov	r7, r1
 800e66a:	4640      	mov	r0, r8
 800e66c:	4649      	mov	r1, r9
 800e66e:	f7f1 fe0d 	bl	800028c <__adddf3>
 800e672:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e676:	f7f1 ffbf 	bl	80005f8 <__aeabi_dmul>
 800e67a:	4680      	mov	r8, r0
 800e67c:	4689      	mov	r9, r1
 800e67e:	b964      	cbnz	r4, 800e69a <__ieee754_log+0x272>
 800e680:	4602      	mov	r2, r0
 800e682:	460b      	mov	r3, r1
 800e684:	4630      	mov	r0, r6
 800e686:	4639      	mov	r1, r7
 800e688:	f7f1 fdfe 	bl	8000288 <__aeabi_dsub>
 800e68c:	4602      	mov	r2, r0
 800e68e:	460b      	mov	r3, r1
 800e690:	4650      	mov	r0, sl
 800e692:	4659      	mov	r1, fp
 800e694:	f7f1 fdf8 	bl	8000288 <__aeabi_dsub>
 800e698:	e6da      	b.n	800e450 <__ieee754_log+0x28>
 800e69a:	a323      	add	r3, pc, #140	@ (adr r3, 800e728 <__ieee754_log+0x300>)
 800e69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6a4:	f7f1 ffa8 	bl	80005f8 <__aeabi_dmul>
 800e6a8:	a321      	add	r3, pc, #132	@ (adr r3, 800e730 <__ieee754_log+0x308>)
 800e6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ae:	4604      	mov	r4, r0
 800e6b0:	460d      	mov	r5, r1
 800e6b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6b6:	f7f1 ff9f 	bl	80005f8 <__aeabi_dmul>
 800e6ba:	4642      	mov	r2, r8
 800e6bc:	464b      	mov	r3, r9
 800e6be:	f7f1 fde5 	bl	800028c <__adddf3>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	460b      	mov	r3, r1
 800e6c6:	4630      	mov	r0, r6
 800e6c8:	4639      	mov	r1, r7
 800e6ca:	f7f1 fddd 	bl	8000288 <__aeabi_dsub>
 800e6ce:	4652      	mov	r2, sl
 800e6d0:	465b      	mov	r3, fp
 800e6d2:	f7f1 fdd9 	bl	8000288 <__aeabi_dsub>
 800e6d6:	4602      	mov	r2, r0
 800e6d8:	460b      	mov	r3, r1
 800e6da:	4620      	mov	r0, r4
 800e6dc:	4629      	mov	r1, r5
 800e6de:	e7d9      	b.n	800e694 <__ieee754_log+0x26c>
 800e6e0:	4602      	mov	r2, r0
 800e6e2:	460b      	mov	r3, r1
 800e6e4:	4650      	mov	r0, sl
 800e6e6:	4659      	mov	r1, fp
 800e6e8:	f7f1 fdce 	bl	8000288 <__aeabi_dsub>
 800e6ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6f0:	f7f1 ff82 	bl	80005f8 <__aeabi_dmul>
 800e6f4:	4606      	mov	r6, r0
 800e6f6:	460f      	mov	r7, r1
 800e6f8:	2c00      	cmp	r4, #0
 800e6fa:	f43f af25 	beq.w	800e548 <__ieee754_log+0x120>
 800e6fe:	a30a      	add	r3, pc, #40	@ (adr r3, 800e728 <__ieee754_log+0x300>)
 800e700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e704:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e708:	f7f1 ff76 	bl	80005f8 <__aeabi_dmul>
 800e70c:	a308      	add	r3, pc, #32	@ (adr r3, 800e730 <__ieee754_log+0x308>)
 800e70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e712:	4604      	mov	r4, r0
 800e714:	460d      	mov	r5, r1
 800e716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e71a:	e729      	b.n	800e570 <__ieee754_log+0x148>
 800e71c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800e778 <__ieee754_log+0x350>
 800e720:	e698      	b.n	800e454 <__ieee754_log+0x2c>
 800e722:	bf00      	nop
 800e724:	f3af 8000 	nop.w
 800e728:	fee00000 	.word	0xfee00000
 800e72c:	3fe62e42 	.word	0x3fe62e42
 800e730:	35793c76 	.word	0x35793c76
 800e734:	3dea39ef 	.word	0x3dea39ef
 800e738:	55555555 	.word	0x55555555
 800e73c:	3fd55555 	.word	0x3fd55555
 800e740:	df3e5244 	.word	0xdf3e5244
 800e744:	3fc2f112 	.word	0x3fc2f112
 800e748:	96cb03de 	.word	0x96cb03de
 800e74c:	3fc74664 	.word	0x3fc74664
 800e750:	94229359 	.word	0x94229359
 800e754:	3fd24924 	.word	0x3fd24924
 800e758:	55555593 	.word	0x55555593
 800e75c:	3fe55555 	.word	0x3fe55555
 800e760:	d078c69f 	.word	0xd078c69f
 800e764:	3fc39a09 	.word	0x3fc39a09
 800e768:	1d8e78af 	.word	0x1d8e78af
 800e76c:	3fcc71c5 	.word	0x3fcc71c5
 800e770:	9997fa04 	.word	0x9997fa04
 800e774:	3fd99999 	.word	0x3fd99999
	...
 800e780:	c3500000 	.word	0xc3500000
 800e784:	43500000 	.word	0x43500000
 800e788:	7fefffff 	.word	0x7fefffff
 800e78c:	3ff00000 	.word	0x3ff00000
 800e790:	3fe00000 	.word	0x3fe00000

0800e794 <_init>:
 800e794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e796:	bf00      	nop
 800e798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e79a:	bc08      	pop	{r3}
 800e79c:	469e      	mov	lr, r3
 800e79e:	4770      	bx	lr

0800e7a0 <_fini>:
 800e7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7a2:	bf00      	nop
 800e7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7a6:	bc08      	pop	{r3}
 800e7a8:	469e      	mov	lr, r3
 800e7aa:	4770      	bx	lr
