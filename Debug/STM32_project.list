
STM32_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  0800eee8  0800eee8  0000fee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5f8  0800f5f8  000112d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f5f8  0800f5f8  000105f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f600  0800f600  000112d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f600  0800f600  00010600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f604  0800f604  00010604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  0800f608  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000112d8  2**0
                  CONTENTS
 10 .bss          000020cc  200002d8  200002d8  000112d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200023a4  200023a4  000112d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000112d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b0e8  00000000  00000000  00011308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045d1  00000000  00000000  0002c3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001710  00000000  00000000  000309c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011ae  00000000  00000000  000320d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a0d  00000000  00000000  00033286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020d47  00000000  00000000  0005ac93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc9b6  00000000  00000000  0007b9da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00158390  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007234  00000000  00000000  001583d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008f  00000000  00000000  0015f608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eecc 	.word	0x0800eecc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	0800eecc 	.word	0x0800eecc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <dcRemoval>:

#include "filter.h"


DC_FILTER_T dcRemoval(float x, float prev_w, float alpha)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b08b      	sub	sp, #44	@ 0x2c
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000f82:	edc7 0a04 	vstr	s1, [r7, #16]
 8000f86:	ed87 1a03 	vstr	s2, [r7, #12]
  DC_FILTER_T filtered;
  filtered.w = x + alpha * prev_w;
 8000f8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f96:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9e:	edc7 7a06 	vstr	s15, [r7, #24]
  filtered.result = filtered.w - prev_w;
 8000fa2:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fae:	edc7 7a07 	vstr	s15, [r7, #28]

  return filtered;
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	f107 0218 	add.w	r2, r7, #24
 8000fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fbe:	e883 0003 	stmia.w	r3, {r0, r1}
 8000fc2:	6a3a      	ldr	r2, [r7, #32]
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc6:	ee07 2a10 	vmov	s14, r2
 8000fca:	ee07 3a90 	vmov	s15, r3
}
 8000fce:	eeb0 0a47 	vmov.f32	s0, s14
 8000fd2:	eef0 0a67 	vmov.f32	s1, s15
 8000fd6:	372c      	adds	r7, #44	@ 0x2c
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <lowPassButterworthFilter>:

//Low pass butterworth filter order=1 alpha1=0.1
void lowPassButterworthFilter(float x, BUTTERWORTH_FILTER_T * filterResult)
{
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fea:	6038      	str	r0, [r7, #0]
	filterResult->v[0] = filterResult->v[1];
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	601a      	str	r2, [r3, #0]

    //Fs = 100Hz and Fc = 10Hz
    filterResult->v[1] = (2.452372752527856026e-1 * x) + (0.50952544949442879485 * filterResult->v[0]);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff faa7 	bl	8000548 <__aeabi_f2d>
 8000ffa:	a319      	add	r3, pc, #100	@ (adr r3, 8001060 <lowPassButterworthFilter+0x80>)
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	f7ff fafa 	bl	80005f8 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4614      	mov	r4, r2
 800100a:	461d      	mov	r5, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa99 	bl	8000548 <__aeabi_f2d>
 8001016:	a314      	add	r3, pc, #80	@ (adr r3, 8001068 <lowPassButterworthFilter+0x88>)
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	f7ff faec 	bl	80005f8 <__aeabi_dmul>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4620      	mov	r0, r4
 8001026:	4629      	mov	r1, r5
 8001028:	f7ff f930 	bl	800028c <__adddf3>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fdd8 	bl	8000be8 <__aeabi_d2f>
 8001038:	4602      	mov	r2, r0
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	605a      	str	r2, [r3, #4]

    //Fs = 100Hz and Fc = 4Hz
    //filterResult->v[1] = (1.367287359973195227e-1 * x) + (0.72654252800536101020 * filterResult->v[0]); //Very precise butterworth filter

    filterResult->result = filterResult->v[0] + filterResult->v[1];
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	ed93 7a00 	vldr	s14, [r3]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	edd3 7a01 	vldr	s15, [r3, #4]
 800104a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bdb0      	pop	{r4, r5, r7, pc}
 800105c:	f3af 8000 	nop.w
 8001060:	5e7c4548 	.word	0x5e7c4548
 8001064:	3fcf63ef 	.word	0x3fcf63ef
 8001068:	50c1dd5c 	.word	0x50c1dd5c
 800106c:	3fe04e08 	.word	0x3fe04e08

08001070 <meanDiff>:

float meanDiff(float M, MEAN_DIFF_FILTER_T* filterValues)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	ed87 0a01 	vstr	s0, [r7, #4]
 800107a:	6038      	str	r0, [r7, #0]
  float avg = 0;
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]

  filterValues->sum -= filterValues->values[filterValues->index];
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
  filterValues->values[filterValues->index] = M;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	601a      	str	r2, [r3, #0]
  filterValues->sum += filterValues->values[filterValues->index];
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	edd3 7a00 	vldr	s15, [r3]
 80010c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

  filterValues->index++;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010d8:	3301      	adds	r3, #1
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  filterValues->index = filterValues->index % MEAN_FILTER_SIZE;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 80010e8:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <meanDiff+0xe0>)
 80010ea:	fba3 1302 	umull	r1, r3, r3, r2
 80010ee:	08d9      	lsrs	r1, r3, #3
 80010f0:	460b      	mov	r3, r1
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	1a5b      	subs	r3, r3, r1
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(filterValues->count < MEAN_FILTER_SIZE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001106:	2b0e      	cmp	r3, #14
 8001108:	d807      	bhi.n	800111a <meanDiff+0xaa>
    filterValues->count++;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001110:	3301      	adds	r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  avg = filterValues->sum / filterValues->count;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800112e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001132:	edc7 7a03 	vstr	s15, [r7, #12]
  return avg - M;
 8001136:	ed97 7a03 	vldr	s14, [r7, #12]
 800113a:	edd7 7a01 	vldr	s15, [r7, #4]
 800113e:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001142:	eeb0 0a67 	vmov.f32	s0, s15
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	88888889 	.word	0x88888889

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001158:	b0a2      	sub	sp, #136	@ 0x88
 800115a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115c:	f001 fc3e 	bl	80029dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001160:	f000 f944 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001164:	f000 fabc 	bl	80016e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001168:	f000 f9fc 	bl	8001564 <MX_I2C1_Init>
  MX_I2S3_Init();
 800116c:	f000 fa28 	bl	80015c0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001170:	f000 fa56 	bl	8001620 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001174:	f000 fa8a 	bl	800168c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001178:	f00a f858 	bl	800b22c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800117c:	f000 f9a0 	bl	80014c0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	//uint8_t message[] = "Hello PC! STM32 is sending data...\r\n";

	OLED_Init();                // Initialize the OLED display
 8001180:	f001 f80e 	bl	80021a0 <OLED_Init>
	OLED_Clear();               // Clear the OLED screen
 8001184:	f001 f87f 	bl	8002286 <OLED_Clear>
	HAL_Delay(100);
 8001188:	2064      	movs	r0, #100	@ 0x64
 800118a:	f001 fc99 	bl	8002ac0 <HAL_Delay>

    if (MAX30102_Init() != HAL_OK) {
 800118e:	f000 fc15 	bl	80019bc <MAX30102_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d005      	beq.n	80011a4 <main+0x50>
        OLED_ShowString(0, 0, "MAX30102 OK");
 8001198:	4a8a      	ldr	r2, [pc, #552]	@ (80013c4 <main+0x270>)
 800119a:	2100      	movs	r1, #0
 800119c:	2000      	movs	r0, #0
 800119e:	f001 f8e7 	bl	8002370 <OLED_ShowString>
 80011a2:	e004      	b.n	80011ae <main+0x5a>
    } else {
        OLED_ShowString(0, 0, "MAX30102 ERROR");
 80011a4:	4a88      	ldr	r2, [pc, #544]	@ (80013c8 <main+0x274>)
 80011a6:	2100      	movs	r1, #0
 80011a8:	2000      	movs	r0, #0
 80011aa:	f001 f8e1 	bl	8002370 <OLED_ShowString>
    }

	long currentMillis = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	663b      	str	r3, [r7, #96]	@ 0x60
	long lastMillis = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	67fb      	str	r3, [r7, #124]	@ 0x7c

	currentMillis = millis();
 80011b6:	f001 fbcd 	bl	8002954 <millis>
 80011ba:	4603      	mov	r3, r0
 80011bc:	663b      	str	r3, [r7, #96]	@ 0x60

	uint32_t adcBuffer[WINDOW_SIZE] = {0};
 80011be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011c2:	2228      	movs	r2, #40	@ 0x28
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00b faaf 	bl	800c72a <memset>
	uint32_t index = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	67bb      	str	r3, [r7, #120]	@ 0x78
	uint32_t sum = 0; // For rolling window
 80011d0:	2300      	movs	r3, #0
 80011d2:	677b      	str	r3, [r7, #116]	@ 0x74
	uint64_t sumOfSquares = 0;  // Stores sum of squares
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

		while(!pulseOximiterIntFlag) {}
			*/


		if( pulseOximiterIntFlag )
 80011e0:	4b7a      	ldr	r3, [pc, #488]	@ (80013cc <main+0x278>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d009      	beq.n	80011fe <main+0xaa>
		{
			if (MAX30102_DumpFifo() == HAL_OK) {
 80011ea:	f000 fc5f 	bl	8001aac <MAX30102_DumpFifo>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d104      	bne.n	80011fe <main+0xaa>

				pulseOximiterIntFlag = 0;
 80011f4:	4b75      	ldr	r3, [pc, #468]	@ (80013cc <main+0x278>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]

				MAX30102_ProcessData();
 80011fa:	f000 fc69 	bl	8001ad0 <MAX30102_ProcessData>
		}



		// Display the data over the built in USB every second
		currentMillis = millis();
 80011fe:	f001 fba9 	bl	8002954 <millis>
 8001202:	4603      	mov	r3, r0
 8001204:	663b      	str	r3, [r7, #96]	@ 0x60
		if( currentMillis - lastMillis > 5000 )
 8001206:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001208:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001210:	4293      	cmp	r3, r2
 8001212:	dde5      	ble.n	80011e0 <main+0x8c>
		{
			//MAX30102_DumpFifo();
			//MAX30102_ProcessData();


			float bpm = MAX30102_getBPM();
 8001214:	f000 ff8c 	bl	8002130 <MAX30102_getBPM>
 8001218:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
			float spo2 = MAX30102_getSPO2();
 800121c:	f000 ff96 	bl	800214c <MAX30102_getSPO2>
 8001220:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
			//sprintf(message, "HR: %.2f   SPO2: %.2f \n", bpm, spo2);
			//CDC_Transmit_FS((uint8_t *)message, strlen(message));

			HAL_GPIO_TogglePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin);		//LED blinking
 8001224:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001228:	4869      	ldr	r0, [pc, #420]	@ (80013d0 <main+0x27c>)
 800122a:	f002 fb34 	bl	8003896 <HAL_GPIO_TogglePin>

			OLED_Clear();
 800122e:	f001 f82a 	bl	8002286 <OLED_Clear>
			sprintf(message, "%.2f   %.2f", bpm, spo2);
 8001232:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001234:	f7ff f988 	bl	8000548 <__aeabi_f2d>
 8001238:	4604      	mov	r4, r0
 800123a:	460d      	mov	r5, r1
 800123c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800123e:	f7ff f983 	bl	8000548 <__aeabi_f2d>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	e9cd 2300 	strd	r2, r3, [sp]
 800124a:	4622      	mov	r2, r4
 800124c:	462b      	mov	r3, r5
 800124e:	4961      	ldr	r1, [pc, #388]	@ (80013d4 <main+0x280>)
 8001250:	4861      	ldr	r0, [pc, #388]	@ (80013d8 <main+0x284>)
 8001252:	f00b fa07 	bl	800c664 <siprintf>
			//sprintf(message, "%.2f", );
			OLED_ShowString(0, 0, message);
 8001256:	4a60      	ldr	r2, [pc, #384]	@ (80013d8 <main+0x284>)
 8001258:	2100      	movs	r1, #0
 800125a:	2000      	movs	r0, #0
 800125c:	f001 f888 	bl	8002370 <OLED_ShowString>
			//MAX30102_readTemperature();

			// Microphone Stuff
			// Read new ADC value
			HAL_ADC_Start(&hadc1);  // Start ADC conversion
 8001260:	485e      	ldr	r0, [pc, #376]	@ (80013dc <main+0x288>)
 8001262:	f001 fc95 	bl	8002b90 <HAL_ADC_Start>
			uint32_t newValue = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	667b      	str	r3, [r7, #100]	@ 0x64

			if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800126a:	f04f 31ff 	mov.w	r1, #4294967295
 800126e:	485b      	ldr	r0, [pc, #364]	@ (80013dc <main+0x288>)
 8001270:	f001 fd93 	bl	8002d9a <HAL_ADC_PollForConversion>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d103      	bne.n	8001282 <main+0x12e>
			    newValue = HAL_ADC_GetValue(&hadc1);  // Read ADC value
 800127a:	4858      	ldr	r0, [pc, #352]	@ (80013dc <main+0x288>)
 800127c:	f001 fe18 	bl	8002eb0 <HAL_ADC_GetValue>
 8001280:	6678      	str	r0, [r7, #100]	@ 0x64
			}

			HAL_ADC_Stop(&hadc1);  // Stop ADC to avoid unnecessary power usage
 8001282:	4856      	ldr	r0, [pc, #344]	@ (80013dc <main+0x288>)
 8001284:	f001 fd56 	bl	8002d34 <HAL_ADC_Stop>

			   // Update rolling sum
			   sum -= adcBuffer[index];  // Remove oldest value
 8001288:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	3370      	adds	r3, #112	@ 0x70
 800128e:	f107 0210 	add.w	r2, r7, #16
 8001292:	4413      	add	r3, r2
 8001294:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8001298:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	677b      	str	r3, [r7, #116]	@ 0x74
			   sumOfSquares -= adcBuffer[index] * adcBuffer[index];
 800129e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	3370      	adds	r3, #112	@ 0x70
 80012a4:	f107 0210 	add.w	r2, r7, #16
 80012a8:	4413      	add	r3, r2
 80012aa:	f853 2c58 	ldr.w	r2, [r3, #-88]
 80012ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	3370      	adds	r3, #112	@ 0x70
 80012b4:	f107 0110 	add.w	r1, r7, #16
 80012b8:	440b      	add	r3, r1
 80012ba:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80012be:	fb02 f303 	mul.w	r3, r2, r3
 80012c2:	2200      	movs	r2, #0
 80012c4:	4698      	mov	r8, r3
 80012c6:	4691      	mov	r9, r2
 80012c8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80012cc:	ebb2 0108 	subs.w	r1, r2, r8
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	eb63 0309 	sbc.w	r3, r3, r9
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80012dc:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68

			   adcBuffer[index] = newValue;  // Store new value
 80012e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	3370      	adds	r3, #112	@ 0x70
 80012e6:	f107 0210 	add.w	r2, r7, #16
 80012ea:	4413      	add	r3, r2
 80012ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80012ee:	f843 2c58 	str.w	r2, [r3, #-88]
			   sum += newValue;  // Add new value to sum
 80012f2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80012f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012f6:	4413      	add	r3, r2
 80012f8:	677b      	str	r3, [r7, #116]	@ 0x74

			   // RMS
			   sumOfSquares += newValue * newValue;  // Square the new value and add
 80012fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012fc:	fb03 f303 	mul.w	r3, r3, r3
 8001300:	2200      	movs	r2, #0
 8001302:	469a      	mov	sl, r3
 8001304:	4693      	mov	fp, r2
 8001306:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800130a:	eb12 010a 	adds.w	r1, r2, sl
 800130e:	6039      	str	r1, [r7, #0]
 8001310:	eb43 030b 	adc.w	r3, r3, fp
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	e9d7 3400 	ldrd	r3, r4, [r7]
 800131a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68


			   // Compute moving average
			   uint32_t movingAvg = sum / WINDOW_SIZE;
 800131e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001320:	4a2f      	ldr	r2, [pc, #188]	@ (80013e0 <main+0x28c>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	08db      	lsrs	r3, r3, #3
 8001328:	657b      	str	r3, [r7, #84]	@ 0x54

		       // Compute RMS
		       uint32_t rmsValue = sqrt(sumOfSquares / WINDOW_SIZE);
 800132a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800132e:	f04f 020a 	mov.w	r2, #10
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	f7ff fca7 	bl	8000c88 <__aeabi_uldivmod>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff f923 	bl	800058c <__aeabi_ul2d>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	ec43 2b10 	vmov	d0, r2, r3
 800134e:	f00d faf5 	bl	800e93c <sqrt>
 8001352:	ec53 2b10 	vmov	r2, r3, d0
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	f7ff fc25 	bl	8000ba8 <__aeabi_d2uiz>
 800135e:	4603      	mov	r3, r0
 8001360:	653b      	str	r3, [r7, #80]	@ 0x50

			   // Display on OLED
			   sprintf(adc_msg, "Noise: %lu", movingAvg /*newValue*/ );
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001368:	491e      	ldr	r1, [pc, #120]	@ (80013e4 <main+0x290>)
 800136a:	4618      	mov	r0, r3
 800136c:	f00b f97a 	bl	800c664 <siprintf>
			   OLED_ShowString(0, 2, adc_msg);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	461a      	mov	r2, r3
 8001376:	2102      	movs	r1, #2
 8001378:	2000      	movs	r0, #0
 800137a:	f000 fff9 	bl	8002370 <OLED_ShowString>

		       sprintf(adc_msg, "RMS: %lu", rmsValue);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001384:	4918      	ldr	r1, [pc, #96]	@ (80013e8 <main+0x294>)
 8001386:	4618      	mov	r0, r3
 8001388:	f00b f96c 	bl	800c664 <siprintf>
		       OLED_ShowString(0, 4, adc_msg);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	461a      	mov	r2, r3
 8001392:	2104      	movs	r1, #4
 8001394:	2000      	movs	r0, #0
 8001396:	f000 ffeb 	bl	8002370 <OLED_ShowString>

			   // Update buffer index
			   index = (index + 1) % WINDOW_SIZE;
 800139a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <main+0x28c>)
 80013a0:	fba3 1302 	umull	r1, r3, r3, r2
 80013a4:	08d9      	lsrs	r1, r3, #3
 80013a6:	460b      	mov	r3, r1
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	440b      	add	r3, r1
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	67bb      	str	r3, [r7, #120]	@ 0x78

			HAL_GPIO_TogglePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin);
 80013b2:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80013b6:	4806      	ldr	r0, [pc, #24]	@ (80013d0 <main+0x27c>)
 80013b8:	f002 fa6d 	bl	8003896 <HAL_GPIO_TogglePin>
			lastMillis = currentMillis;
 80013bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80013be:	67fb      	str	r3, [r7, #124]	@ 0x7c
		if( pulseOximiterIntFlag )
 80013c0:	e70e      	b.n	80011e0 <main+0x8c>
 80013c2:	bf00      	nop
 80013c4:	0800eee8 	.word	0x0800eee8
 80013c8:	0800eef4 	.word	0x0800eef4
 80013cc:	200004b8 	.word	0x200004b8
 80013d0:	40020c00 	.word	0x40020c00
 80013d4:	0800ef04 	.word	0x0800ef04
 80013d8:	20000478 	.word	0x20000478
 80013dc:	200002f4 	.word	0x200002f4
 80013e0:	cccccccd 	.word	0xcccccccd
 80013e4:	0800ef10 	.word	0x0800ef10
 80013e8:	0800ef1c 	.word	0x0800ef1c

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b094      	sub	sp, #80	@ 0x50
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0320 	add.w	r3, r7, #32
 80013f6:	2230      	movs	r2, #48	@ 0x30
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f00b f995 	bl	800c72a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	4b28      	ldr	r3, [pc, #160]	@ (80014b8 <SystemClock_Config+0xcc>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	4a27      	ldr	r2, [pc, #156]	@ (80014b8 <SystemClock_Config+0xcc>)
 800141a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800141e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001420:	4b25      	ldr	r3, [pc, #148]	@ (80014b8 <SystemClock_Config+0xcc>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	4b22      	ldr	r3, [pc, #136]	@ (80014bc <SystemClock_Config+0xd0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a21      	ldr	r2, [pc, #132]	@ (80014bc <SystemClock_Config+0xd0>)
 8001436:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b1f      	ldr	r3, [pc, #124]	@ (80014bc <SystemClock_Config+0xd0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001448:	2301      	movs	r3, #1
 800144a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800144c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001456:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800145a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800145c:	2308      	movs	r3, #8
 800145e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001460:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001464:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001466:	2302      	movs	r3, #2
 8001468:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800146a:	2307      	movs	r3, #7
 800146c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146e:	f107 0320 	add.w	r3, r7, #32
 8001472:	4618      	mov	r0, r3
 8001474:	f005 fad8 	bl	8006a28 <HAL_RCC_OscConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800147e:	f000 fa47 	bl	8001910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001482:	230f      	movs	r3, #15
 8001484:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001486:	2302      	movs	r3, #2
 8001488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800148e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001492:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001494:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001498:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	2105      	movs	r1, #5
 80014a0:	4618      	mov	r0, r3
 80014a2:	f005 fd39 	bl	8006f18 <HAL_RCC_ClockConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80014ac:	f000 fa30 	bl	8001910 <Error_Handler>
  }
}
 80014b0:	bf00      	nop
 80014b2:	3750      	adds	r7, #80	@ 0x50
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40007000 	.word	0x40007000

080014c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014c6:	463b      	mov	r3, r7
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014d2:	4b21      	ldr	r3, [pc, #132]	@ (8001558 <MX_ADC1_Init+0x98>)
 80014d4:	4a21      	ldr	r2, [pc, #132]	@ (800155c <MX_ADC1_Init+0x9c>)
 80014d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <MX_ADC1_Init+0x98>)
 80014da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <MX_ADC1_Init+0x98>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001558 <MX_ADC1_Init+0x98>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <MX_ADC1_Init+0x98>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014f2:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <MX_ADC1_Init+0x98>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014fa:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <MX_ADC1_Init+0x98>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001500:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <MX_ADC1_Init+0x98>)
 8001502:	4a17      	ldr	r2, [pc, #92]	@ (8001560 <MX_ADC1_Init+0xa0>)
 8001504:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001506:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <MX_ADC1_Init+0x98>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800150c:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <MX_ADC1_Init+0x98>)
 800150e:	2201      	movs	r2, #1
 8001510:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001512:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <MX_ADC1_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800151a:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <MX_ADC1_Init+0x98>)
 800151c:	2201      	movs	r2, #1
 800151e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001520:	480d      	ldr	r0, [pc, #52]	@ (8001558 <MX_ADC1_Init+0x98>)
 8001522:	f001 faf1 	bl	8002b08 <HAL_ADC_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800152c:	f000 f9f0 	bl	8001910 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001530:	2301      	movs	r3, #1
 8001532:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001534:	2301      	movs	r3, #1
 8001536:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800153c:	463b      	mov	r3, r7
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	@ (8001558 <MX_ADC1_Init+0x98>)
 8001542:	f001 fcc3 	bl	8002ecc <HAL_ADC_ConfigChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800154c:	f000 f9e0 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200002f4 	.word	0x200002f4
 800155c:	40012000 	.word	0x40012000
 8001560:	0f000001 	.word	0x0f000001

08001564 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001568:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <MX_I2C1_Init+0x50>)
 800156a:	4a13      	ldr	r2, [pc, #76]	@ (80015b8 <MX_I2C1_Init+0x54>)
 800156c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800156e:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <MX_I2C1_Init+0x50>)
 8001570:	4a12      	ldr	r2, [pc, #72]	@ (80015bc <MX_I2C1_Init+0x58>)
 8001572:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001574:	4b0f      	ldr	r3, [pc, #60]	@ (80015b4 <MX_I2C1_Init+0x50>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800157a:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <MX_I2C1_Init+0x50>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <MX_I2C1_Init+0x50>)
 8001582:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001586:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001588:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <MX_I2C1_Init+0x50>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800158e:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <MX_I2C1_Init+0x50>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001594:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <MX_I2C1_Init+0x50>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159a:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <MX_I2C1_Init+0x50>)
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a0:	4804      	ldr	r0, [pc, #16]	@ (80015b4 <MX_I2C1_Init+0x50>)
 80015a2:	f002 f9ab 	bl	80038fc <HAL_I2C_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015ac:	f000 f9b0 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000033c 	.word	0x2000033c
 80015b8:	40005400 	.word	0x40005400
 80015bc:	000186a0 	.word	0x000186a0

080015c0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015c6:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <MX_I2S3_Init+0x58>)
 80015c8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80015ca:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015d0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80015de:	4b0d      	ldr	r3, [pc, #52]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015e4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015e8:	4a0c      	ldr	r2, [pc, #48]	@ (800161c <MX_I2S3_Init+0x5c>)
 80015ea:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80015ec:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80015f2:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80015fe:	4805      	ldr	r0, [pc, #20]	@ (8001614 <MX_I2S3_Init+0x54>)
 8001600:	f003 fb20 	bl	8004c44 <HAL_I2S_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800160a:	f000 f981 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000390 	.word	0x20000390
 8001618:	40003c00 	.word	0x40003c00
 800161c:	00017700 	.word	0x00017700

08001620 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001624:	4b17      	ldr	r3, [pc, #92]	@ (8001684 <MX_SPI1_Init+0x64>)
 8001626:	4a18      	ldr	r2, [pc, #96]	@ (8001688 <MX_SPI1_Init+0x68>)
 8001628:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800162a:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <MX_SPI1_Init+0x64>)
 800162c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001630:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001632:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <MX_SPI1_Init+0x64>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001638:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <MX_SPI1_Init+0x64>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800163e:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <MX_SPI1_Init+0x64>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001644:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <MX_SPI1_Init+0x64>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <MX_SPI1_Init+0x64>)
 800164c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001650:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001652:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <MX_SPI1_Init+0x64>)
 8001654:	2200      	movs	r2, #0
 8001656:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001658:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <MX_SPI1_Init+0x64>)
 800165a:	2200      	movs	r2, #0
 800165c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800165e:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <MX_SPI1_Init+0x64>)
 8001660:	2200      	movs	r2, #0
 8001662:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001664:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <MX_SPI1_Init+0x64>)
 8001666:	2200      	movs	r2, #0
 8001668:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <MX_SPI1_Init+0x64>)
 800166c:	220a      	movs	r2, #10
 800166e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001670:	4804      	ldr	r0, [pc, #16]	@ (8001684 <MX_SPI1_Init+0x64>)
 8001672:	f005 ffb3 	bl	80075dc <HAL_SPI_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800167c:	f000 f948 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200003d8 	.word	0x200003d8
 8001688:	40013000 	.word	0x40013000

0800168c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001690:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 8001692:	4a12      	ldr	r2, [pc, #72]	@ (80016dc <MX_USART2_UART_Init+0x50>)
 8001694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001696:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 8001698:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800169c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 80016c4:	f006 f813 	bl	80076ee <HAL_UART_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016ce:	f000 f91f 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000430 	.word	0x20000430
 80016dc:	40004400 	.word	0x40004400

080016e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08c      	sub	sp, #48	@ 0x30
 80016e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e6:	f107 031c 	add.w	r3, r7, #28
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
 80016fa:	4b76      	ldr	r3, [pc, #472]	@ (80018d4 <MX_GPIO_Init+0x1f4>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a75      	ldr	r2, [pc, #468]	@ (80018d4 <MX_GPIO_Init+0x1f4>)
 8001700:	f043 0310 	orr.w	r3, r3, #16
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b73      	ldr	r3, [pc, #460]	@ (80018d4 <MX_GPIO_Init+0x1f4>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0310 	and.w	r3, r3, #16
 800170e:	61bb      	str	r3, [r7, #24]
 8001710:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	4b6f      	ldr	r3, [pc, #444]	@ (80018d4 <MX_GPIO_Init+0x1f4>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	4a6e      	ldr	r2, [pc, #440]	@ (80018d4 <MX_GPIO_Init+0x1f4>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	6313      	str	r3, [r2, #48]	@ 0x30
 8001722:	4b6c      	ldr	r3, [pc, #432]	@ (80018d4 <MX_GPIO_Init+0x1f4>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b68      	ldr	r3, [pc, #416]	@ (80018d4 <MX_GPIO_Init+0x1f4>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a67      	ldr	r2, [pc, #412]	@ (80018d4 <MX_GPIO_Init+0x1f4>)
 8001738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b65      	ldr	r3, [pc, #404]	@ (80018d4 <MX_GPIO_Init+0x1f4>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b61      	ldr	r3, [pc, #388]	@ (80018d4 <MX_GPIO_Init+0x1f4>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a60      	ldr	r2, [pc, #384]	@ (80018d4 <MX_GPIO_Init+0x1f4>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b5e      	ldr	r3, [pc, #376]	@ (80018d4 <MX_GPIO_Init+0x1f4>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	4b5a      	ldr	r3, [pc, #360]	@ (80018d4 <MX_GPIO_Init+0x1f4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a59      	ldr	r2, [pc, #356]	@ (80018d4 <MX_GPIO_Init+0x1f4>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b57      	ldr	r3, [pc, #348]	@ (80018d4 <MX_GPIO_Init+0x1f4>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	4b53      	ldr	r3, [pc, #332]	@ (80018d4 <MX_GPIO_Init+0x1f4>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a52      	ldr	r2, [pc, #328]	@ (80018d4 <MX_GPIO_Init+0x1f4>)
 800178c:	f043 0308 	orr.w	r3, r3, #8
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b50      	ldr	r3, [pc, #320]	@ (80018d4 <MX_GPIO_Init+0x1f4>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	2108      	movs	r1, #8
 80017a2:	484d      	ldr	r0, [pc, #308]	@ (80018d8 <MX_GPIO_Init+0x1f8>)
 80017a4:	f002 f85e 	bl	8003864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80017a8:	2201      	movs	r2, #1
 80017aa:	2101      	movs	r1, #1
 80017ac:	484b      	ldr	r0, [pc, #300]	@ (80018dc <MX_GPIO_Init+0x1fc>)
 80017ae:	f002 f859 	bl	8003864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80017b2:	2200      	movs	r2, #0
 80017b4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80017b8:	4849      	ldr	r0, [pc, #292]	@ (80018e0 <MX_GPIO_Init+0x200>)
 80017ba:	f002 f853 	bl	8003864 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80017be:	2308      	movs	r3, #8
 80017c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	4619      	mov	r1, r3
 80017d4:	4840      	ldr	r0, [pc, #256]	@ (80018d8 <MX_GPIO_Init+0x1f8>)
 80017d6:	f001 fea9 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80017da:	2301      	movs	r3, #1
 80017dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017de:	2301      	movs	r3, #1
 80017e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	4619      	mov	r1, r3
 80017f0:	483a      	ldr	r0, [pc, #232]	@ (80018dc <MX_GPIO_Init+0x1fc>)
 80017f2:	f001 fe9b 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80017f6:	2308      	movs	r3, #8
 80017f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001806:	2305      	movs	r3, #5
 8001808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800180a:	f107 031c 	add.w	r3, r7, #28
 800180e:	4619      	mov	r1, r3
 8001810:	4832      	ldr	r0, [pc, #200]	@ (80018dc <MX_GPIO_Init+0x1fc>)
 8001812:	f001 fe8b 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : Pulse_Oximeter_Int_Pin */
  GPIO_InitStruct.Pin = Pulse_Oximeter_Int_Pin;
 8001816:	2301      	movs	r3, #1
 8001818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800181a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800181e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001820:	2301      	movs	r3, #1
 8001822:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Pulse_Oximeter_Int_GPIO_Port, &GPIO_InitStruct);
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	482e      	ldr	r0, [pc, #184]	@ (80018e4 <MX_GPIO_Init+0x204>)
 800182c:	f001 fe7e 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001830:	2304      	movs	r3, #4
 8001832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	4619      	mov	r1, r3
 8001842:	4828      	ldr	r0, [pc, #160]	@ (80018e4 <MX_GPIO_Init+0x204>)
 8001844:	f001 fe72 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001848:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800184c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800185a:	2305      	movs	r3, #5
 800185c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	4619      	mov	r1, r3
 8001864:	481f      	ldr	r0, [pc, #124]	@ (80018e4 <MX_GPIO_Init+0x204>)
 8001866:	f001 fe61 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800186a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800186e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001870:	2301      	movs	r3, #1
 8001872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800187c:	f107 031c 	add.w	r3, r7, #28
 8001880:	4619      	mov	r1, r3
 8001882:	4817      	ldr	r0, [pc, #92]	@ (80018e0 <MX_GPIO_Init+0x200>)
 8001884:	f001 fe52 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001888:	2320      	movs	r3, #32
 800188a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	4619      	mov	r1, r3
 800189a:	4811      	ldr	r0, [pc, #68]	@ (80018e0 <MX_GPIO_Init+0x200>)
 800189c:	f001 fe46 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80018a0:	2302      	movs	r3, #2
 80018a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018a4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80018a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	4808      	ldr	r0, [pc, #32]	@ (80018d8 <MX_GPIO_Init+0x1f8>)
 80018b6:	f001 fe39 	bl	800352c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	2006      	movs	r0, #6
 80018c0:	f001 fdfd 	bl	80034be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018c4:	2006      	movs	r0, #6
 80018c6:	f001 fe16 	bl	80034f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018ca:	bf00      	nop
 80018cc:	3730      	adds	r7, #48	@ 0x30
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40020800 	.word	0x40020800
 80018e0:	40020c00 	.word	0x40020c00
 80018e4:	40020400 	.word	0x40020400

080018e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Pulse_Oximeter_Int_Pin)
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d102      	bne.n	80018fe <HAL_GPIO_EXTI_Callback+0x16>
	{
		pulseOximiterIntFlag = 1;
 80018f8:	4b04      	ldr	r3, [pc, #16]	@ (800190c <HAL_GPIO_EXTI_Callback+0x24>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
	}
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	200004b8 	.word	0x200004b8

08001910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001914:	b672      	cpsid	i
}
 8001916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <Error_Handler+0x8>

0800191c <MAX30102_WriteRegister>:
uint8_t max30102_sensor_data[6 * MAX30102_SAMPLES_PER_BURST] = {0};


/* USER CODE BEGIN 0 */
// I2C write to register
HAL_StatusTypeDef MAX30102_WriteRegister(uint8_t reg, uint8_t value) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af04      	add	r7, sp, #16
 8001922:	4603      	mov	r3, r0
 8001924:	460a      	mov	r2, r1
 8001926:	71fb      	strb	r3, [r7, #7]
 8001928:	4613      	mov	r3, r2
 800192a:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(&hi2c1, (MAX30102_ADDRESS << 1), reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 100);
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	b29a      	uxth	r2, r3
 8001930:	2364      	movs	r3, #100	@ 0x64
 8001932:	9302      	str	r3, [sp, #8]
 8001934:	2301      	movs	r3, #1
 8001936:	9301      	str	r3, [sp, #4]
 8001938:	1dbb      	adds	r3, r7, #6
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	2301      	movs	r3, #1
 800193e:	21ae      	movs	r1, #174	@ 0xae
 8001940:	4803      	ldr	r0, [pc, #12]	@ (8001950 <MAX30102_WriteRegister+0x34>)
 8001942:	f002 fa1d 	bl	8003d80 <HAL_I2C_Mem_Write>
 8001946:	4603      	mov	r3, r0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	2000033c 	.word	0x2000033c

08001954 <MAX30102_ReadRegister>:

// I2C read from register
HAL_StatusTypeDef MAX30102_ReadRegister(uint8_t reg, uint8_t *value) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af04      	add	r7, sp, #16
 800195a:	4603      	mov	r3, r0
 800195c:	6039      	str	r1, [r7, #0]
 800195e:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Read(&hi2c1, (MAX30102_ADDRESS << 1), reg, I2C_MEMADD_SIZE_8BIT, value, 1, 100);
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	b29a      	uxth	r2, r3
 8001964:	2364      	movs	r3, #100	@ 0x64
 8001966:	9302      	str	r3, [sp, #8]
 8001968:	2301      	movs	r3, #1
 800196a:	9301      	str	r3, [sp, #4]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2301      	movs	r3, #1
 8001972:	21ae      	movs	r1, #174	@ 0xae
 8001974:	4803      	ldr	r0, [pc, #12]	@ (8001984 <MAX30102_ReadRegister+0x30>)
 8001976:	f002 fafd 	bl	8003f74 <HAL_I2C_Mem_Read>
 800197a:	4603      	mov	r3, r0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	2000033c 	.word	0x2000033c

08001988 <MAX30102_ReadFIFO>:

// Read FIFO data
uint8_t MAX30102_ReadFIFO(uint8_t *buffer, uint8_t length) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af04      	add	r7, sp, #16
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Read(&hi2c1, (MAX30102_ADDRESS << 1), REG_FIFO_DATA, I2C_MEMADD_SIZE_8BIT, buffer, length, 100);
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	b29b      	uxth	r3, r3
 8001998:	2264      	movs	r2, #100	@ 0x64
 800199a:	9202      	str	r2, [sp, #8]
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2301      	movs	r3, #1
 80019a4:	2207      	movs	r2, #7
 80019a6:	21ae      	movs	r1, #174	@ 0xae
 80019a8:	4803      	ldr	r0, [pc, #12]	@ (80019b8 <MAX30102_ReadFIFO+0x30>)
 80019aa:	f002 fae3 	bl	8003f74 <HAL_I2C_Mem_Read>
 80019ae:	4603      	mov	r3, r0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	2000033c 	.word	0x2000033c

080019bc <MAX30102_Init>:

// MAX30102 initialization
uint8_t MAX30102_Init(void) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
    uint8_t part_id = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	71bb      	strb	r3, [r7, #6]

    // Read MAX30102 ID to verify device presence
    if (MAX30102_ReadRegister(REG_PART_ID, &part_id) != HAL_OK || part_id != 0x15) {
 80019c6:	1dbb      	adds	r3, r7, #6
 80019c8:	4619      	mov	r1, r3
 80019ca:	20ff      	movs	r0, #255	@ 0xff
 80019cc:	f7ff ffc2 	bl	8001954 <MAX30102_ReadRegister>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d102      	bne.n	80019dc <MAX30102_Init+0x20>
 80019d6:	79bb      	ldrb	r3, [r7, #6]
 80019d8:	2b15      	cmp	r3, #21
 80019da:	d001      	beq.n	80019e0 <MAX30102_Init+0x24>
        return 0;  // Device not found
 80019dc:	2300      	movs	r3, #0
 80019de:	e02b      	b.n	8001a38 <MAX30102_Init+0x7c>
    }

    // Reset MAX30102
    MAX30102_WriteRegister(REG_MODE_CONFIG, (1 << 6));  // Reset MAX30102  (bit 6)
 80019e0:	2140      	movs	r1, #64	@ 0x40
 80019e2:	2009      	movs	r0, #9
 80019e4:	f7ff ff9a 	bl	800191c <MAX30102_WriteRegister>
    HAL_Delay(10);
 80019e8:	200a      	movs	r0, #10
 80019ea:	f001 f869 	bl	8002ac0 <HAL_Delay>

    // Configure SPO2 mode
    MAX30102_WriteRegister(REG_MODE_CONFIG, 0b011 << BIT_MODE);  // Use heart rate mode only (or 0x07 to enable SPO2)
 80019ee:	2103      	movs	r1, #3
 80019f0:	2009      	movs	r0, #9
 80019f2:	f7ff ff93 	bl	800191c <MAX30102_WriteRegister>
    uint8_t spo2_bits = (0b01 << BIT_SPO2_ADC_RGE) |  (0b000 << BIT_SPO2_SR) | (0b01 << BIT_LED_PW); //pw of 11 browns out supply
 80019f6:	2321      	movs	r3, #33	@ 0x21
 80019f8:	71fb      	strb	r3, [r7, #7]
    MAX30102_WriteRegister(REG_SPO2_CONFIG, spo2_bits);  // Set ADC range and sampling rate
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	4619      	mov	r1, r3
 80019fe:	200a      	movs	r0, #10
 8001a00:	f7ff ff8c 	bl	800191c <MAX30102_WriteRegister>

    // Set LED brightness (0x24 represents medium brightness, adjustable)
    redLEDCurrent = 50;
 8001a04:	4b0e      	ldr	r3, [pc, #56]	@ (8001a40 <MAX30102_Init+0x84>)
 8001a06:	2232      	movs	r2, #50	@ 0x32
 8001a08:	701a      	strb	r2, [r3, #0]
    MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <MAX30102_Init+0x84>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	2001      	movs	r0, #1
 8001a12:	f000 f825 	bl	8001a60 <MAX30102_setLedCurrent>
    MAX30102_setLedCurrent(IR_LED, redLEDCurrent);
 8001a16:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <MAX30102_Init+0x84>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	f000 f81f 	bl	8001a60 <MAX30102_setLedCurrent>
    //MAX30102_WriteRegister(REG_LED1_PA, 0x24);  // LED1 (Red)
    //MAX30102_WriteRegister(REG_LED2_PA, 0x24);  // LED2 (Infrared)

    // interrupts
    MAX30102_WriteRegister(REG_FIFO_CONFIG, ((32 - MAX30102_SAMPLES_PER_BURST) << BIT_FIFO_A_FULL_VAL)); // max value is 15 min is 0
 8001a22:	2100      	movs	r1, #0
 8001a24:	2008      	movs	r0, #8
 8001a26:	f7ff ff79 	bl	800191c <MAX30102_WriteRegister>
    MAX30102_WriteRegister(REG_INT1_EN, 1 << BIT_EN_A_FULL_INT);
 8001a2a:	2180      	movs	r1, #128	@ 0x80
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f7ff ff75 	bl	800191c <MAX30102_WriteRegister>

    MAX30102_ClearInterrupt();
 8001a32:	f000 f807 	bl	8001a44 <MAX30102_ClearInterrupt>

    return 1;  // Initialization successful
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000590 	.word	0x20000590

08001a44 <MAX30102_ClearInterrupt>:

void MAX30102_ClearInterrupt(void) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
	uint8_t reset = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	71fb      	strb	r3, [r7, #7]
	MAX30102_ReadRegister(REG_STATUS, &reset); // clears initial interrupt
 8001a4e:	1dfb      	adds	r3, r7, #7
 8001a50:	4619      	mov	r1, r3
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7ff ff7e 	bl	8001954 <MAX30102_ReadRegister>
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <MAX30102_setLedCurrent>:
	return 1;
}


uint8_t MAX30102_setLedCurrent(uint8_t led, uint8_t currentLevel)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	460a      	mov	r2, r1
 8001a6a:	71fb      	strb	r3, [r7, #7]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	71bb      	strb	r3, [r7, #6]
	uint8_t ledRegister = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]

	switch(led){
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d002      	beq.n	8001a80 <MAX30102_setLedCurrent+0x20>
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d003      	beq.n	8001a86 <MAX30102_setLedCurrent+0x26>
 8001a7e:	e005      	b.n	8001a8c <MAX30102_setLedCurrent+0x2c>
	case RED_LED: 	ledRegister = REG_LED1_PA; break;
 8001a80:	230c      	movs	r3, #12
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e002      	b.n	8001a8c <MAX30102_setLedCurrent+0x2c>
	case IR_LED:	ledRegister = REG_LED2_PA; break;
 8001a86:	230d      	movs	r3, #13
 8001a88:	73fb      	strb	r3, [r7, #15]
 8001a8a:	bf00      	nop
	}

	if( MAX30102_WriteRegister(ledRegister, currentLevel) != HAL_OK){
 8001a8c:	79ba      	ldrb	r2, [r7, #6]
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ff42 	bl	800191c <MAX30102_WriteRegister>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MAX30102_setLedCurrent+0x42>
		return 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e000      	b.n	8001aa4 <MAX30102_setLedCurrent+0x44>
	}
	return 1;
 8001aa2:	2301      	movs	r3, #1
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <MAX30102_DumpFifo>:

uint8_t MAX30102_DumpFifo() {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
	uint8_t retval = MAX30102_ReadFIFO(max30102_sensor_data, 6 * MAX30102_SAMPLES_PER_BURST);
 8001ab2:	21c0      	movs	r1, #192	@ 0xc0
 8001ab4:	4805      	ldr	r0, [pc, #20]	@ (8001acc <MAX30102_DumpFifo+0x20>)
 8001ab6:	f7ff ff67 	bl	8001988 <MAX30102_ReadFIFO>
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
	MAX30102_ClearInterrupt();
 8001abe:	f7ff ffc1 	bl	8001a44 <MAX30102_ClearInterrupt>
	return retval;
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	2000059c 	.word	0x2000059c

08001ad0 <MAX30102_ProcessData>:

void MAX30102_ProcessData() {
 8001ad0:	b5b0      	push	{r4, r5, r7, lr}
 8001ad2:	b08e      	sub	sp, #56	@ 0x38
 8001ad4:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < MAX30102_SAMPLES_PER_BURST; i++) {
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ada:	e048      	b.n	8001b6e <MAX30102_ProcessData+0x9e>
		// heart rate mode only needs red, so only save red data initially long term
		FIFO_LED_DATA rawData = {0};
 8001adc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
		uint8_t n = i*6;
 8001ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	0052      	lsls	r2, r2, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		rawData.redLedRaw = ((max30102_sensor_data[n+0] << 16)) | (max30102_sensor_data[n+1] << 8) | max30102_sensor_data[n+2];
 8001af6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001afa:	4a21      	ldr	r2, [pc, #132]	@ (8001b80 <MAX30102_ProcessData+0xb0>)
 8001afc:	5cd3      	ldrb	r3, [r2, r3]
 8001afe:	041a      	lsls	r2, r3, #16
 8001b00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b04:	3301      	adds	r3, #1
 8001b06:	491e      	ldr	r1, [pc, #120]	@ (8001b80 <MAX30102_ProcessData+0xb0>)
 8001b08:	5ccb      	ldrb	r3, [r1, r3]
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001b12:	3202      	adds	r2, #2
 8001b14:	491a      	ldr	r1, [pc, #104]	@ (8001b80 <MAX30102_ProcessData+0xb0>)
 8001b16:	5c8a      	ldrb	r2, [r1, r2]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
		rawData.irLedRaw = 	((max30102_sensor_data[n+3] << 16)) | (max30102_sensor_data[n+4] << 8) | max30102_sensor_data[n+5];
 8001b1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b20:	3303      	adds	r3, #3
 8001b22:	4a17      	ldr	r2, [pc, #92]	@ (8001b80 <MAX30102_ProcessData+0xb0>)
 8001b24:	5cd3      	ldrb	r3, [r2, r3]
 8001b26:	041a      	lsls	r2, r3, #16
 8001b28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	4914      	ldr	r1, [pc, #80]	@ (8001b80 <MAX30102_ProcessData+0xb0>)
 8001b30:	5ccb      	ldrb	r3, [r1, r3]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	4313      	orrs	r3, r2
 8001b36:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001b3a:	3205      	adds	r2, #5
 8001b3c:	4910      	ldr	r1, [pc, #64]	@ (8001b80 <MAX30102_ProcessData+0xb0>)
 8001b3e:	5c8a      	ldrb	r2, [r1, r2]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	62fb      	str	r3, [r7, #44]	@ 0x2c

		pulseOximeter = pulseOximeter_update(rawData);
 8001b44:	4c0f      	ldr	r4, [pc, #60]	@ (8001b84 <MAX30102_ProcessData+0xb4>)
 8001b46:	4638      	mov	r0, r7
 8001b48:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b4c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001b50:	f000 f982 	bl	8001e58 <pulseOximeter_update>
 8001b54:	4625      	mov	r5, r4
 8001b56:	463c      	mov	r4, r7
 8001b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b64:	e885 0003 	stmia.w	r5, {r0, r1}
	for (int i = 0 ; i < MAX30102_SAMPLES_PER_BURST; i++) {
 8001b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b70:	2b1f      	cmp	r3, #31
 8001b72:	ddb3      	ble.n	8001adc <MAX30102_ProcessData+0xc>

	}
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3738      	adds	r7, #56	@ 0x38
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	2000059c 	.word	0x2000059c
 8001b84:	200004bc 	.word	0x200004bc

08001b88 <detectPulse>:
	currentTemperature = temperature;
}


bool detectPulse(float sensor_value)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	ed87 0a01 	vstr	s0, [r7, #4]
  static float prev_sensor_value = 0;
  static uint8_t values_went_down = 0;
  static uint32_t currentBeat = 0;
  static uint32_t lastBeat = 0;

  if(sensor_value > PULSE_MAX_THRESHOLD)
 8001b92:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b96:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8001d64 <detectPulse+0x1dc>
 8001b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	dd14      	ble.n	8001bce <detectPulse+0x46>
  {
    currentPulseDetectorState = PULSE_IDLE;
 8001ba4:	4b70      	ldr	r3, [pc, #448]	@ (8001d68 <detectPulse+0x1e0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
    prev_sensor_value = 0;
 8001baa:	4b70      	ldr	r3, [pc, #448]	@ (8001d6c <detectPulse+0x1e4>)
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
    lastBeat = 0;
 8001bb2:	4b6f      	ldr	r3, [pc, #444]	@ (8001d70 <detectPulse+0x1e8>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
    currentBeat = 0;
 8001bb8:	4b6e      	ldr	r3, [pc, #440]	@ (8001d74 <detectPulse+0x1ec>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
    values_went_down = 0;
 8001bbe:	4b6e      	ldr	r3, [pc, #440]	@ (8001d78 <detectPulse+0x1f0>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
    lastBeatThreshold = 0;
 8001bc4:	4b6d      	ldr	r3, [pc, #436]	@ (8001d7c <detectPulse+0x1f4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
    return false;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e0c5      	b.n	8001d5a <detectPulse+0x1d2>
  }

  switch(currentPulseDetectorState)
 8001bce:	4b66      	ldr	r3, [pc, #408]	@ (8001d68 <detectPulse+0x1e0>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	f000 809f 	beq.w	8001d16 <detectPulse+0x18e>
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	f300 80ba 	bgt.w	8001d52 <detectPulse+0x1ca>
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <detectPulse+0x60>
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d011      	beq.n	8001c0a <detectPulse+0x82>
 8001be6:	e0b4      	b.n	8001d52 <detectPulse+0x1ca>
  {
    case PULSE_IDLE:
      if(sensor_value >= PULSE_MIN_THRESHOLD) {
 8001be8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bec:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8001d80 <detectPulse+0x1f8>
 8001bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf8:	da00      	bge.n	8001bfc <detectPulse+0x74>
        currentPulseDetectorState = PULSE_TRACE_UP;
        values_went_down = 0;
      }
      break;
 8001bfa:	e0aa      	b.n	8001d52 <detectPulse+0x1ca>
        currentPulseDetectorState = PULSE_TRACE_UP;
 8001bfc:	4b5a      	ldr	r3, [pc, #360]	@ (8001d68 <detectPulse+0x1e0>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
        values_went_down = 0;
 8001c02:	4b5d      	ldr	r3, [pc, #372]	@ (8001d78 <detectPulse+0x1f0>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
      break;
 8001c08:	e0a3      	b.n	8001d52 <detectPulse+0x1ca>

    case PULSE_TRACE_UP:
      if(sensor_value > prev_sensor_value)
 8001c0a:	4b58      	ldr	r3, [pc, #352]	@ (8001d6c <detectPulse+0x1e4>)
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1c:	dd0d      	ble.n	8001c3a <detectPulse+0xb2>
      {
        currentBeat = millis();
 8001c1e:	f000 fe99 	bl	8002954 <millis>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4a53      	ldr	r2, [pc, #332]	@ (8001d74 <detectPulse+0x1ec>)
 8001c26:	6013      	str	r3, [r2, #0]
        lastBeatThreshold = sensor_value;
 8001c28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c30:	ee17 2a90 	vmov	r2, s15
 8001c34:	4b51      	ldr	r3, [pc, #324]	@ (8001d7c <detectPulse+0x1f4>)
 8001c36:	601a      	str	r2, [r3, #0]

        currentPulseDetectorState = PULSE_TRACE_DOWN;

        return true;
      }
      break;
 8001c38:	e08b      	b.n	8001d52 <detectPulse+0x1ca>
    	uint32_t beatDuration = currentBeat - lastBeat;
 8001c3a:	4b4e      	ldr	r3, [pc, #312]	@ (8001d74 <detectPulse+0x1ec>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4b4c      	ldr	r3, [pc, #304]	@ (8001d70 <detectPulse+0x1e8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	60fb      	str	r3, [r7, #12]
        lastBeat = currentBeat;
 8001c46:	4b4b      	ldr	r3, [pc, #300]	@ (8001d74 <detectPulse+0x1ec>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a49      	ldr	r2, [pc, #292]	@ (8001d70 <detectPulse+0x1e8>)
 8001c4c:	6013      	str	r3, [r2, #0]
        float rawBPM = 0;
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
        if(beatDuration > 0)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00a      	beq.n	8001c70 <detectPulse+0xe8>
          rawBPM = 60000.0 / (float)beatDuration;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c64:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8001d84 <detectPulse+0x1fc>
 8001c68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c6c:	edc7 7a05 	vstr	s15, [r7, #20]
        valuesBPM[bpmIndex] = rawBPM;
 8001c70:	4b45      	ldr	r3, [pc, #276]	@ (8001d88 <detectPulse+0x200>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4a45      	ldr	r2, [pc, #276]	@ (8001d8c <detectPulse+0x204>)
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	601a      	str	r2, [r3, #0]
        valuesBPMSum = 0;
 8001c7e:	4b44      	ldr	r3, [pc, #272]	@ (8001d90 <detectPulse+0x208>)
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
        for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	e010      	b.n	8001cae <detectPulse+0x126>
          valuesBPMSum += valuesBPM[i];
 8001c8c:	4a3f      	ldr	r2, [pc, #252]	@ (8001d8c <detectPulse+0x204>)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	ed93 7a00 	vldr	s14, [r3]
 8001c98:	4b3d      	ldr	r3, [pc, #244]	@ (8001d90 <detectPulse+0x208>)
 8001c9a:	edd3 7a00 	vldr	s15, [r3]
 8001c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8001d90 <detectPulse+0x208>)
 8001ca4:	edc3 7a00 	vstr	s15, [r3]
        for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	3301      	adds	r3, #1
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	2b09      	cmp	r3, #9
 8001cb2:	ddeb      	ble.n	8001c8c <detectPulse+0x104>
        bpmIndex++;
 8001cb4:	4b34      	ldr	r3, [pc, #208]	@ (8001d88 <detectPulse+0x200>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	4b32      	ldr	r3, [pc, #200]	@ (8001d88 <detectPulse+0x200>)
 8001cbe:	701a      	strb	r2, [r3, #0]
        bpmIndex = bpmIndex % PULSE_BPM_SAMPLE_SIZE;
 8001cc0:	4b31      	ldr	r3, [pc, #196]	@ (8001d88 <detectPulse+0x200>)
 8001cc2:	781a      	ldrb	r2, [r3, #0]
 8001cc4:	4b33      	ldr	r3, [pc, #204]	@ (8001d94 <detectPulse+0x20c>)
 8001cc6:	fba3 1302 	umull	r1, r3, r3, r2
 8001cca:	08d9      	lsrs	r1, r3, #3
 8001ccc:	460b      	mov	r3, r1
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d88 <detectPulse+0x200>)
 8001cda:	701a      	strb	r2, [r3, #0]
        if(valuesBPMCount < PULSE_BPM_SAMPLE_SIZE)
 8001cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8001d98 <detectPulse+0x210>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b09      	cmp	r3, #9
 8001ce2:	d805      	bhi.n	8001cf0 <detectPulse+0x168>
          valuesBPMCount++;
 8001ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d98 <detectPulse+0x210>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	4b2a      	ldr	r3, [pc, #168]	@ (8001d98 <detectPulse+0x210>)
 8001cee:	701a      	strb	r2, [r3, #0]
        currentBPM = valuesBPMSum / valuesBPMCount;
 8001cf0:	4b27      	ldr	r3, [pc, #156]	@ (8001d90 <detectPulse+0x208>)
 8001cf2:	edd3 6a00 	vldr	s13, [r3]
 8001cf6:	4b28      	ldr	r3, [pc, #160]	@ (8001d98 <detectPulse+0x210>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	ee07 3a90 	vmov	s15, r3
 8001cfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d06:	4b25      	ldr	r3, [pc, #148]	@ (8001d9c <detectPulse+0x214>)
 8001d08:	edc3 7a00 	vstr	s15, [r3]
        currentPulseDetectorState = PULSE_TRACE_DOWN;
 8001d0c:	4b16      	ldr	r3, [pc, #88]	@ (8001d68 <detectPulse+0x1e0>)
 8001d0e:	2202      	movs	r2, #2
 8001d10:	701a      	strb	r2, [r3, #0]
        return true;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e021      	b.n	8001d5a <detectPulse+0x1d2>

    case PULSE_TRACE_DOWN:
      if(sensor_value < prev_sensor_value)
 8001d16:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <detectPulse+0x1e4>)
 8001d18:	edd3 7a00 	vldr	s15, [r3]
 8001d1c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d28:	d505      	bpl.n	8001d36 <detectPulse+0x1ae>
      {
        values_went_down++;
 8001d2a:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <detectPulse+0x1f0>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <detectPulse+0x1f0>)
 8001d34:	701a      	strb	r2, [r3, #0]
      }


      if(sensor_value < PULSE_MIN_THRESHOLD)
 8001d36:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d3a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001d80 <detectPulse+0x1f8>
 8001d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	d400      	bmi.n	8001d4a <detectPulse+0x1c2>
      {
        currentPulseDetectorState = PULSE_IDLE;
      }
      break;
 8001d48:	e002      	b.n	8001d50 <detectPulse+0x1c8>
        currentPulseDetectorState = PULSE_IDLE;
 8001d4a:	4b07      	ldr	r3, [pc, #28]	@ (8001d68 <detectPulse+0x1e0>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
      break;
 8001d50:	bf00      	nop
  }

  prev_sensor_value = sensor_value;
 8001d52:	4a06      	ldr	r2, [pc, #24]	@ (8001d6c <detectPulse+0x1e4>)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6013      	str	r3, [r2, #0]
  return false;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	44fa0000 	.word	0x44fa0000
 8001d68:	20000598 	.word	0x20000598
 8001d6c:	2000065c 	.word	0x2000065c
 8001d70:	20000660 	.word	0x20000660
 8001d74:	20000664 	.word	0x20000664
 8001d78:	20000668 	.word	0x20000668
 8001d7c:	2000057c 	.word	0x2000057c
 8001d80:	42c80000 	.word	0x42c80000
 8001d84:	476a6000 	.word	0x476a6000
 8001d88:	20000579 	.word	0x20000579
 8001d8c:	2000054c 	.word	0x2000054c
 8001d90:	20000574 	.word	0x20000574
 8001d94:	cccccccd 	.word	0xcccccccd
 8001d98:	20000578 	.word	0x20000578
 8001d9c:	20000548 	.word	0x20000548

08001da0 <balanceIntesities>:

void balanceIntesities( float redLedDC, float IRLedDC )
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001daa:	edc7 0a00 	vstr	s1, [r7]
	uint32_t currentTime = millis();
 8001dae:	f000 fdd1 	bl	8002954 <millis>
 8001db2:	60f8      	str	r0, [r7, #12]
  if( currentTime - lastREDLedCurrentCheck >= RED_LED_CURRENT_ADJUSTMENT_MS)
 8001db4:	4b25      	ldr	r3, [pc, #148]	@ (8001e4c <balanceIntesities+0xac>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1a9b      	subs	r3, r3, r2
 8001dbe:	2b63      	cmp	r3, #99	@ 0x63
 8001dc0:	d940      	bls.n	8001e44 <balanceIntesities+0xa4>
  {
	if( IRLedDC - redLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent < 51)
 8001dc2:	ed97 7a00 	vldr	s14, [r7]
 8001dc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dce:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001e50 <balanceIntesities+0xb0>
 8001dd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dda:	dd10      	ble.n	8001dfe <balanceIntesities+0x5e>
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e54 <balanceIntesities+0xb4>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b32      	cmp	r3, #50	@ 0x32
 8001de2:	d80c      	bhi.n	8001dfe <balanceIntesities+0x5e>
    {
		redLEDCurrent++;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e54 <balanceIntesities+0xb4>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b19      	ldr	r3, [pc, #100]	@ (8001e54 <balanceIntesities+0xb4>)
 8001dee:	701a      	strb	r2, [r3, #0]
		MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8001df0:	4b18      	ldr	r3, [pc, #96]	@ (8001e54 <balanceIntesities+0xb4>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	4619      	mov	r1, r3
 8001df6:	2001      	movs	r0, #1
 8001df8:	f7ff fe32 	bl	8001a60 <MAX30102_setLedCurrent>
 8001dfc:	e01c      	b.n	8001e38 <balanceIntesities+0x98>
    }
    else if(redLedDC - IRLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent > 0)
 8001dfe:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e02:	edd7 7a00 	vldr	s15, [r7]
 8001e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e0a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001e50 <balanceIntesities+0xb0>
 8001e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e16:	dd0f      	ble.n	8001e38 <balanceIntesities+0x98>
 8001e18:	4b0e      	ldr	r3, [pc, #56]	@ (8001e54 <balanceIntesities+0xb4>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00b      	beq.n	8001e38 <balanceIntesities+0x98>
    {
    	redLEDCurrent--;
 8001e20:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <balanceIntesities+0xb4>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	4b0a      	ldr	r3, [pc, #40]	@ (8001e54 <balanceIntesities+0xb4>)
 8001e2a:	701a      	strb	r2, [r3, #0]
    	MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8001e2c:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <balanceIntesities+0xb4>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	4619      	mov	r1, r3
 8001e32:	2001      	movs	r0, #1
 8001e34:	f7ff fe14 	bl	8001a60 <MAX30102_setLedCurrent>
    }

    lastREDLedCurrentCheck = millis();
 8001e38:	f000 fd8c 	bl	8002954 <millis>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4b02      	ldr	r3, [pc, #8]	@ (8001e4c <balanceIntesities+0xac>)
 8001e42:	601a      	str	r2, [r3, #0]
  }
}
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000594 	.word	0x20000594
 8001e50:	461c4000 	.word	0x461c4000
 8001e54:	20000590 	.word	0x20000590

08001e58 <pulseOximeter_update>:

MAX30102 pulseOximeter_update(FIFO_LED_DATA m_fifoData)
	{
 8001e58:	b5b0      	push	{r4, r5, r7, lr}
 8001e5a:	b090      	sub	sp, #64	@ 0x40
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	e883 0006 	stmia.w	r3, {r1, r2}
		MAX30102 result = {
 8001e66:	2300      	movs	r3, #0
 8001e68:	743b      	strb	r3, [r7, #16]
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
 8001e82:	4b9c      	ldr	r3, [pc, #624]	@ (80020f4 <pulseOximeter_update+0x29c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e98:	4b97      	ldr	r3, [pc, #604]	@ (80020f8 <pulseOximeter_update+0x2a0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	637b      	str	r3, [r7, #52]	@ 0x34
		/*float dcFilteredIR*/ 0.0,
		/*float dcFilteredRed*/ 0.0,
		/*float temperature;*/ currentTemperature
	};

	dcFilterIR = dcRemoval( (float)m_fifoData.irLedRaw, dcFilterIR.w, ALPHA );
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	ee07 3a90 	vmov	s15, r3
 8001ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ea8:	4b94      	ldr	r3, [pc, #592]	@ (80020fc <pulseOximeter_update+0x2a4>)
 8001eaa:	ed93 7a00 	vldr	s14, [r3]
 8001eae:	ed9f 1a94 	vldr	s2, [pc, #592]	@ 8002100 <pulseOximeter_update+0x2a8>
 8001eb2:	eef0 0a47 	vmov.f32	s1, s14
 8001eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eba:	f7ff f85d 	bl	8000f78 <dcRemoval>
 8001ebe:	eeb0 7a40 	vmov.f32	s14, s0
 8001ec2:	eef0 7a60 	vmov.f32	s15, s1
 8001ec6:	4b8d      	ldr	r3, [pc, #564]	@ (80020fc <pulseOximeter_update+0x2a4>)
 8001ec8:	ed83 7a00 	vstr	s14, [r3]
 8001ecc:	edc3 7a01 	vstr	s15, [r3, #4]
	dcFilterRed = dcRemoval( (float)m_fifoData.redLedRaw, dcFilterRed.w, ALPHA );
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eda:	4b8a      	ldr	r3, [pc, #552]	@ (8002104 <pulseOximeter_update+0x2ac>)
 8001edc:	ed93 7a00 	vldr	s14, [r3]
 8001ee0:	ed9f 1a87 	vldr	s2, [pc, #540]	@ 8002100 <pulseOximeter_update+0x2a8>
 8001ee4:	eef0 0a47 	vmov.f32	s1, s14
 8001ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8001eec:	f7ff f844 	bl	8000f78 <dcRemoval>
 8001ef0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ef4:	eef0 7a60 	vmov.f32	s15, s1
 8001ef8:	4b82      	ldr	r3, [pc, #520]	@ (8002104 <pulseOximeter_update+0x2ac>)
 8001efa:	ed83 7a00 	vstr	s14, [r3]
 8001efe:	edc3 7a01 	vstr	s15, [r3, #4]

	float meanDiffResIR = meanDiff( dcFilterIR.result, &meanDiffIR);
 8001f02:	4b7e      	ldr	r3, [pc, #504]	@ (80020fc <pulseOximeter_update+0x2a4>)
 8001f04:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f08:	487f      	ldr	r0, [pc, #508]	@ (8002108 <pulseOximeter_update+0x2b0>)
 8001f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f0e:	f7ff f8af 	bl	8001070 <meanDiff>
 8001f12:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
	lowPassButterworthFilter( meanDiffResIR/*-dcFilterIR.result*/, &lpbFilterIR );
 8001f16:	487d      	ldr	r0, [pc, #500]	@ (800210c <pulseOximeter_update+0x2b4>)
 8001f18:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8001f1c:	f7ff f860 	bl	8000fe0 <lowPassButterworthFilter>

	irACValueSqSum += dcFilterIR.result * dcFilterIR.result;
 8001f20:	4b76      	ldr	r3, [pc, #472]	@ (80020fc <pulseOximeter_update+0x2a4>)
 8001f22:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f26:	4b75      	ldr	r3, [pc, #468]	@ (80020fc <pulseOximeter_update+0x2a4>)
 8001f28:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f30:	4b77      	ldr	r3, [pc, #476]	@ (8002110 <pulseOximeter_update+0x2b8>)
 8001f32:	edd3 7a00 	vldr	s15, [r3]
 8001f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f3a:	4b75      	ldr	r3, [pc, #468]	@ (8002110 <pulseOximeter_update+0x2b8>)
 8001f3c:	edc3 7a00 	vstr	s15, [r3]
	redACValueSqSum += dcFilterRed.result * dcFilterRed.result;
 8001f40:	4b70      	ldr	r3, [pc, #448]	@ (8002104 <pulseOximeter_update+0x2ac>)
 8001f42:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f46:	4b6f      	ldr	r3, [pc, #444]	@ (8002104 <pulseOximeter_update+0x2ac>)
 8001f48:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f50:	4b70      	ldr	r3, [pc, #448]	@ (8002114 <pulseOximeter_update+0x2bc>)
 8001f52:	edd3 7a00 	vldr	s15, [r3]
 8001f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5a:	4b6e      	ldr	r3, [pc, #440]	@ (8002114 <pulseOximeter_update+0x2bc>)
 8001f5c:	edc3 7a00 	vstr	s15, [r3]
	samplesRecorded++;
 8001f60:	4b6d      	ldr	r3, [pc, #436]	@ (8002118 <pulseOximeter_update+0x2c0>)
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	3301      	adds	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	4b6b      	ldr	r3, [pc, #428]	@ (8002118 <pulseOximeter_update+0x2c0>)
 8001f6a:	801a      	strh	r2, [r3, #0]

	if( detectPulse( lpbFilterIR.result ) &&  samplesRecorded > 0 )
 8001f6c:	4b67      	ldr	r3, [pc, #412]	@ (800210c <pulseOximeter_update+0x2b4>)
 8001f6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f72:	eeb0 0a67 	vmov.f32	s0, s15
 8001f76:	f7ff fe07 	bl	8001b88 <detectPulse>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 8088 	beq.w	8002092 <pulseOximeter_update+0x23a>
 8001f82:	4b65      	ldr	r3, [pc, #404]	@ (8002118 <pulseOximeter_update+0x2c0>)
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8083 	beq.w	8002092 <pulseOximeter_update+0x23a>
	{
		result.pulseDetected=true;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	743b      	strb	r3, [r7, #16]
		pulsesDetected++;
 8001f90:	4b62      	ldr	r3, [pc, #392]	@ (800211c <pulseOximeter_update+0x2c4>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	4b60      	ldr	r3, [pc, #384]	@ (800211c <pulseOximeter_update+0x2c4>)
 8001f9a:	801a      	strh	r2, [r3, #0]

		if( (pulsesDetected % RESET_SPO2_EVERY_N_PULSES == 0) )
 8001f9c:	4b5f      	ldr	r3, [pc, #380]	@ (800211c <pulseOximeter_update+0x2c4>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d173      	bne.n	8002092 <pulseOximeter_update+0x23a>
		{
			float ratioRMS = log( sqrt(redACValueSqSum/samplesRecorded) ) / log( sqrt(irACValueSqSum/samplesRecorded) );
 8001faa:	4b5a      	ldr	r3, [pc, #360]	@ (8002114 <pulseOximeter_update+0x2bc>)
 8001fac:	ed93 7a00 	vldr	s14, [r3]
 8001fb0:	4b59      	ldr	r3, [pc, #356]	@ (8002118 <pulseOximeter_update+0x2c0>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	ee07 3a90 	vmov	s15, r3
 8001fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fbc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001fc0:	ee16 0a90 	vmov	r0, s13
 8001fc4:	f7fe fac0 	bl	8000548 <__aeabi_f2d>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	ec43 2b10 	vmov	d0, r2, r3
 8001fd0:	f00c fcb4 	bl	800e93c <sqrt>
 8001fd4:	eeb0 7a40 	vmov.f32	s14, s0
 8001fd8:	eef0 7a60 	vmov.f32	s15, s1
 8001fdc:	eeb0 0a47 	vmov.f32	s0, s14
 8001fe0:	eef0 0a67 	vmov.f32	s1, s15
 8001fe4:	f00c fc6c 	bl	800e8c0 <log>
 8001fe8:	ec55 4b10 	vmov	r4, r5, d0
 8001fec:	4b48      	ldr	r3, [pc, #288]	@ (8002110 <pulseOximeter_update+0x2b8>)
 8001fee:	ed93 7a00 	vldr	s14, [r3]
 8001ff2:	4b49      	ldr	r3, [pc, #292]	@ (8002118 <pulseOximeter_update+0x2c0>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	ee07 3a90 	vmov	s15, r3
 8001ffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ffe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002002:	ee16 0a90 	vmov	r0, s13
 8002006:	f7fe fa9f 	bl	8000548 <__aeabi_f2d>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	ec43 2b10 	vmov	d0, r2, r3
 8002012:	f00c fc93 	bl	800e93c <sqrt>
 8002016:	eeb0 7a40 	vmov.f32	s14, s0
 800201a:	eef0 7a60 	vmov.f32	s15, s1
 800201e:	eeb0 0a47 	vmov.f32	s0, s14
 8002022:	eef0 0a67 	vmov.f32	s1, s15
 8002026:	f00c fc4b 	bl	800e8c0 <log>
 800202a:	ec53 2b10 	vmov	r2, r3, d0
 800202e:	4620      	mov	r0, r4
 8002030:	4629      	mov	r1, r5
 8002032:	f7fe fc0b 	bl	800084c <__aeabi_ddiv>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	f7fe fdd3 	bl	8000be8 <__aeabi_d2f>
 8002042:	4603      	mov	r3, r0
 8002044:	63bb      	str	r3, [r7, #56]	@ 0x38
			currentSpO2Value = 114.0 - 18.0 * ratioRMS;
 8002046:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002048:	f7fe fa7e 	bl	8000548 <__aeabi_f2d>
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	4b33      	ldr	r3, [pc, #204]	@ (8002120 <pulseOximeter_update+0x2c8>)
 8002052:	f7fe fad1 	bl	80005f8 <__aeabi_dmul>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	f04f 0000 	mov.w	r0, #0
 800205e:	4931      	ldr	r1, [pc, #196]	@ (8002124 <pulseOximeter_update+0x2cc>)
 8002060:	f7fe f912 	bl	8000288 <__aeabi_dsub>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4610      	mov	r0, r2
 800206a:	4619      	mov	r1, r3
 800206c:	f7fe fdbc 	bl	8000be8 <__aeabi_d2f>
 8002070:	4603      	mov	r3, r0
 8002072:	4a20      	ldr	r2, [pc, #128]	@ (80020f4 <pulseOximeter_update+0x29c>)
 8002074:	6013      	str	r3, [r2, #0]

			//uint8_t ratio =  ((redACValueSqSum/samplesRecorded) * 100) / (irACValueSqSum/samplesRecorded);
			//if (ratio > 183) ratio = 183;
			//currentSpO2Value = uch_spo2_table[ratio];

			result.SpO2 = currentSpO2Value;
 8002076:	4b1f      	ldr	r3, [pc, #124]	@ (80020f4 <pulseOximeter_update+0x29c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	627b      	str	r3, [r7, #36]	@ 0x24

			irACValueSqSum = 0;
 800207c:	4b24      	ldr	r3, [pc, #144]	@ (8002110 <pulseOximeter_update+0x2b8>)
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
			redACValueSqSum = 0;
 8002084:	4b23      	ldr	r3, [pc, #140]	@ (8002114 <pulseOximeter_update+0x2bc>)
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
			samplesRecorded = 0;
 800208c:	4b22      	ldr	r3, [pc, #136]	@ (8002118 <pulseOximeter_update+0x2c0>)
 800208e:	2200      	movs	r2, #0
 8002090:	801a      	strh	r2, [r3, #0]
		}
	}

	balanceIntesities( dcFilterRed.w, dcFilterIR.w );
 8002092:	4b1c      	ldr	r3, [pc, #112]	@ (8002104 <pulseOximeter_update+0x2ac>)
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	4b18      	ldr	r3, [pc, #96]	@ (80020fc <pulseOximeter_update+0x2a4>)
 800209a:	ed93 7a00 	vldr	s14, [r3]
 800209e:	eef0 0a47 	vmov.f32	s1, s14
 80020a2:	eeb0 0a67 	vmov.f32	s0, s15
 80020a6:	f7ff fe7b 	bl	8001da0 <balanceIntesities>

	result.heartBPM = currentBPM;
 80020aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002128 <pulseOximeter_update+0x2d0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	617b      	str	r3, [r7, #20]
	result.irCardiogram = lpbFilterIR.result;
 80020b0:	4b16      	ldr	r3, [pc, #88]	@ (800210c <pulseOximeter_update+0x2b4>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	61bb      	str	r3, [r7, #24]
	result.irDcValue = dcFilterIR.w;
 80020b6:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <pulseOximeter_update+0x2a4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	61fb      	str	r3, [r7, #28]
	result.redDcValue = dcFilterRed.w;
 80020bc:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <pulseOximeter_update+0x2ac>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	623b      	str	r3, [r7, #32]
	result.lastBeatThreshold = lastBeatThreshold;
 80020c2:	4b1a      	ldr	r3, [pc, #104]	@ (800212c <pulseOximeter_update+0x2d4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	result.dcFilteredIR = dcFilterIR.result;
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <pulseOximeter_update+0x2a4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	result.dcFilteredRed = dcFilterRed.result;
 80020ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002104 <pulseOximeter_update+0x2ac>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	633b      	str	r3, [r7, #48]	@ 0x30

	return result;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	461d      	mov	r5, r3
 80020d8:	f107 0410 	add.w	r4, r7, #16
 80020dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020e8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	3740      	adds	r7, #64	@ 0x40
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bdb0      	pop	{r4, r5, r7, pc}
 80020f4:	2000058c 	.word	0x2000058c
 80020f8:	20000000 	.word	0x20000000
 80020fc:	200004e4 	.word	0x200004e4
 8002100:	3f733333 	.word	0x3f733333
 8002104:	200004ec 	.word	0x200004ec
 8002108:	200004f4 	.word	0x200004f4
 800210c:	2000053c 	.word	0x2000053c
 8002110:	20000580 	.word	0x20000580
 8002114:	20000584 	.word	0x20000584
 8002118:	20000588 	.word	0x20000588
 800211c:	2000058a 	.word	0x2000058a
 8002120:	40320000 	.word	0x40320000
 8002124:	405c8000 	.word	0x405c8000
 8002128:	20000548 	.word	0x20000548
 800212c:	2000057c 	.word	0x2000057c

08002130 <MAX30102_getBPM>:

float MAX30102_getBPM(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
	return pulseOximeter.heartBPM;
 8002134:	4b04      	ldr	r3, [pc, #16]	@ (8002148 <MAX30102_getBPM+0x18>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	ee07 3a90 	vmov	s15, r3
}
 800213c:	eeb0 0a67 	vmov.f32	s0, s15
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	200004bc 	.word	0x200004bc

0800214c <MAX30102_getSPO2>:
float MAX30102_getSPO2(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
	return pulseOximeter.SpO2;
 8002150:	4b04      	ldr	r3, [pc, #16]	@ (8002164 <MAX30102_getSPO2+0x18>)
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	ee07 3a90 	vmov	s15, r3
}
 8002158:	eeb0 0a67 	vmov.f32	s0, s15
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	200004bc 	.word	0x200004bc

08002168 <OLED_Write>:
/**
 * @brief Send a command or data to the OLED
 * @param mode OLED_CMD indicates command mode, OLED_DATA indicates data mode
 * @param data The byte to be sent
 */
void OLED_Write(uint8_t mode, uint8_t data) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af02      	add	r7, sp, #8
 800216e:	4603      	mov	r3, r0
 8002170:	460a      	mov	r2, r1
 8002172:	71fb      	strb	r3, [r7, #7]
 8002174:	4613      	mov	r3, r2
 8002176:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2];
    buffer[0] = mode;  // Control byte
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	733b      	strb	r3, [r7, #12]
    buffer[1] = data;  // Data
 800217c:	79bb      	ldrb	r3, [r7, #6]
 800217e:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8002180:	f107 020c 	add.w	r2, r7, #12
 8002184:	f04f 33ff 	mov.w	r3, #4294967295
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2302      	movs	r3, #2
 800218c:	2178      	movs	r1, #120	@ 0x78
 800218e:	4803      	ldr	r0, [pc, #12]	@ (800219c <OLED_Write+0x34>)
 8002190:	f001 fcf8 	bl	8003b84 <HAL_I2C_Master_Transmit>
}
 8002194:	bf00      	nop
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	2000033c 	.word	0x2000033c

080021a0 <OLED_Init>:

/**
 * @brief Initialize the OLED
 */
void OLED_Init(void) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
    HAL_Delay(100); // Wait for the screen to power up and stabilize
 80021a4:	2064      	movs	r0, #100	@ 0x64
 80021a6:	f000 fc8b 	bl	8002ac0 <HAL_Delay>

    // Initialization commands (based on the SSD1306 datasheet)
    OLED_Write(OLED_CMD, 0xAE); // Turn off display
 80021aa:	21ae      	movs	r1, #174	@ 0xae
 80021ac:	2000      	movs	r0, #0
 80021ae:	f7ff ffdb 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0x20); // Set memory addressing mode
 80021b2:	2120      	movs	r1, #32
 80021b4:	2000      	movs	r0, #0
 80021b6:	f7ff ffd7 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0x10); // Use horizontal addressing mode
 80021ba:	2110      	movs	r1, #16
 80021bc:	2000      	movs	r0, #0
 80021be:	f7ff ffd3 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0xB0); // Set page start address
 80021c2:	21b0      	movs	r1, #176	@ 0xb0
 80021c4:	2000      	movs	r0, #0
 80021c6:	f7ff ffcf 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0xC8); // Set COM output scan direction (from top to bottom)
 80021ca:	21c8      	movs	r1, #200	@ 0xc8
 80021cc:	2000      	movs	r0, #0
 80021ce:	f7ff ffcb 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0x00); // Set lower column address
 80021d2:	2100      	movs	r1, #0
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7ff ffc7 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0x10); // Set higher column address
 80021da:	2110      	movs	r1, #16
 80021dc:	2000      	movs	r0, #0
 80021de:	f7ff ffc3 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0x40); // Set display start line
 80021e2:	2140      	movs	r1, #64	@ 0x40
 80021e4:	2000      	movs	r0, #0
 80021e6:	f7ff ffbf 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0x81); // Set contrast control
 80021ea:	2181      	movs	r1, #129	@ 0x81
 80021ec:	2000      	movs	r0, #0
 80021ee:	f7ff ffbb 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0xFF); // Maximum contrast
 80021f2:	21ff      	movs	r1, #255	@ 0xff
 80021f4:	2000      	movs	r0, #0
 80021f6:	f7ff ffb7 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0xA1); // Set segment re-map (left to right)
 80021fa:	21a1      	movs	r1, #161	@ 0xa1
 80021fc:	2000      	movs	r0, #0
 80021fe:	f7ff ffb3 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0xA6); // Set normal display mode
 8002202:	21a6      	movs	r1, #166	@ 0xa6
 8002204:	2000      	movs	r0, #0
 8002206:	f7ff ffaf 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0xA8); // Set multiplex ratio
 800220a:	21a8      	movs	r1, #168	@ 0xa8
 800220c:	2000      	movs	r0, #0
 800220e:	f7ff ffab 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0x3F); // 1/64 duty cycle
 8002212:	213f      	movs	r1, #63	@ 0x3f
 8002214:	2000      	movs	r0, #0
 8002216:	f7ff ffa7 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0xD3); // Set display offset
 800221a:	21d3      	movs	r1, #211	@ 0xd3
 800221c:	2000      	movs	r0, #0
 800221e:	f7ff ffa3 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0x00); // No offset
 8002222:	2100      	movs	r1, #0
 8002224:	2000      	movs	r0, #0
 8002226:	f7ff ff9f 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0xD5); // Set display clock divide ratio
 800222a:	21d5      	movs	r1, #213	@ 0xd5
 800222c:	2000      	movs	r0, #0
 800222e:	f7ff ff9b 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0xF0); // Set to default value
 8002232:	21f0      	movs	r1, #240	@ 0xf0
 8002234:	2000      	movs	r0, #0
 8002236:	f7ff ff97 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0xD9); // Set pre-charge period
 800223a:	21d9      	movs	r1, #217	@ 0xd9
 800223c:	2000      	movs	r0, #0
 800223e:	f7ff ff93 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0x22); //
 8002242:	2122      	movs	r1, #34	@ 0x22
 8002244:	2000      	movs	r0, #0
 8002246:	f7ff ff8f 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0xDA); // Set COM hardware configuration
 800224a:	21da      	movs	r1, #218	@ 0xda
 800224c:	2000      	movs	r0, #0
 800224e:	f7ff ff8b 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0x12); //
 8002252:	2112      	movs	r1, #18
 8002254:	2000      	movs	r0, #0
 8002256:	f7ff ff87 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0xDB); // Set VCOMH deselect level
 800225a:	21db      	movs	r1, #219	@ 0xdb
 800225c:	2000      	movs	r0, #0
 800225e:	f7ff ff83 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0x20); // ~0.77×VCC
 8002262:	2120      	movs	r1, #32
 8002264:	2000      	movs	r0, #0
 8002266:	f7ff ff7f 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0x8D); // Set charge pump
 800226a:	218d      	movs	r1, #141	@ 0x8d
 800226c:	2000      	movs	r0, #0
 800226e:	f7ff ff7b 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0x14); // Enable charge pump
 8002272:	2114      	movs	r1, #20
 8002274:	2000      	movs	r0, #0
 8002276:	f7ff ff77 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0xAF); // Turn on display
 800227a:	21af      	movs	r1, #175	@ 0xaf
 800227c:	2000      	movs	r0, #0
 800227e:	f7ff ff73 	bl	8002168 <OLED_Write>
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}

08002286 <OLED_Clear>:

/**
 * @brief Clear the OLED display
 */
void OLED_Clear(void) {
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++) {
 800228c:	2300      	movs	r3, #0
 800228e:	71fb      	strb	r3, [r7, #7]
 8002290:	e01f      	b.n	80022d2 <OLED_Clear+0x4c>
        OLED_Write(OLED_CMD, 0xB0 + page); // Set page address
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	3b50      	subs	r3, #80	@ 0x50
 8002296:	b2db      	uxtb	r3, r3
 8002298:	4619      	mov	r1, r3
 800229a:	2000      	movs	r0, #0
 800229c:	f7ff ff64 	bl	8002168 <OLED_Write>
        OLED_Write(OLED_CMD, 0x00);        // Set lower column address
 80022a0:	2100      	movs	r1, #0
 80022a2:	2000      	movs	r0, #0
 80022a4:	f7ff ff60 	bl	8002168 <OLED_Write>
        OLED_Write(OLED_CMD, 0x10);        // Set higher column address
 80022a8:	2110      	movs	r1, #16
 80022aa:	2000      	movs	r0, #0
 80022ac:	f7ff ff5c 	bl	8002168 <OLED_Write>
        for (uint8_t col = 0; col < 128; col++) {
 80022b0:	2300      	movs	r3, #0
 80022b2:	71bb      	strb	r3, [r7, #6]
 80022b4:	e006      	b.n	80022c4 <OLED_Clear+0x3e>
            OLED_Write(OLED_DATA, 0x00); // Clear display
 80022b6:	2100      	movs	r1, #0
 80022b8:	2040      	movs	r0, #64	@ 0x40
 80022ba:	f7ff ff55 	bl	8002168 <OLED_Write>
        for (uint8_t col = 0; col < 128; col++) {
 80022be:	79bb      	ldrb	r3, [r7, #6]
 80022c0:	3301      	adds	r3, #1
 80022c2:	71bb      	strb	r3, [r7, #6]
 80022c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	daf4      	bge.n	80022b6 <OLED_Clear+0x30>
    for (uint8_t page = 0; page < 8; page++) {
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	3301      	adds	r3, #1
 80022d0:	71fb      	strb	r3, [r7, #7]
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	2b07      	cmp	r3, #7
 80022d6:	d9dc      	bls.n	8002292 <OLED_Clear+0xc>
        }
    }
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <OLED_ShowChar>:
 * @brief Display a character at a specified position
 * @param x X-coordinate (column address, 0~127)
 * @param y Page address (row number, 0~7)
 * @param ch Character to display
 */
void OLED_ShowChar(uint8_t x, uint8_t y, char ch) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
 80022ee:	460b      	mov	r3, r1
 80022f0:	71bb      	strb	r3, [r7, #6]
 80022f2:	4613      	mov	r3, r2
 80022f4:	717b      	strb	r3, [r7, #5]
    if (ch < 32 || ch > 127) return; // Character out of range
 80022f6:	797b      	ldrb	r3, [r7, #5]
 80022f8:	2b1f      	cmp	r3, #31
 80022fa:	d933      	bls.n	8002364 <OLED_ShowChar+0x80>
 80022fc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002300:	2b00      	cmp	r3, #0
 8002302:	db2f      	blt.n	8002364 <OLED_ShowChar+0x80>

    OLED_Write(OLED_CMD, 0xB0 + y);         // Set page address
 8002304:	79bb      	ldrb	r3, [r7, #6]
 8002306:	3b50      	subs	r3, #80	@ 0x50
 8002308:	b2db      	uxtb	r3, r3
 800230a:	4619      	mov	r1, r3
 800230c:	2000      	movs	r0, #0
 800230e:	f7ff ff2b 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0x00 + (x & 0x0F)); // Set lower column address
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	b2db      	uxtb	r3, r3
 800231a:	4619      	mov	r1, r3
 800231c:	2000      	movs	r0, #0
 800231e:	f7ff ff23 	bl	8002168 <OLED_Write>
    OLED_Write(OLED_CMD, 0x10 + ((x >> 4) & 0x0F)); // Set higher column address
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	b2db      	uxtb	r3, r3
 8002328:	3310      	adds	r3, #16
 800232a:	b2db      	uxtb	r3, r3
 800232c:	4619      	mov	r1, r3
 800232e:	2000      	movs	r0, #0
 8002330:	f7ff ff1a 	bl	8002168 <OLED_Write>

    const uint8_t *font_data = Font8x8[ch - 32]; // Get character dot matrix data
 8002334:	797b      	ldrb	r3, [r7, #5]
 8002336:	3b20      	subs	r3, #32
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4a0c      	ldr	r2, [pc, #48]	@ (800236c <OLED_ShowChar+0x88>)
 800233c:	4413      	add	r3, r2
 800233e:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < 8; i++) {
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	e00a      	b.n	800235c <OLED_ShowChar+0x78>
        OLED_Write(OLED_DATA, font_data[i]); // Write character dot matrix data
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	4413      	add	r3, r2
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	4619      	mov	r1, r3
 8002350:	2040      	movs	r0, #64	@ 0x40
 8002352:	f7ff ff09 	bl	8002168 <OLED_Write>
    for (int i = 0; i < 8; i++) {
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	3301      	adds	r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b07      	cmp	r3, #7
 8002360:	ddf1      	ble.n	8002346 <OLED_ShowChar+0x62>
 8002362:	e000      	b.n	8002366 <OLED_ShowChar+0x82>
    if (ch < 32 || ch > 127) return; // Character out of range
 8002364:	bf00      	nop
    }
}
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	0800ef70 	.word	0x0800ef70

08002370 <OLED_ShowString>:
 * @brief Display a string at a specified position
 * @param x Starting X-coordinate (column address)
 * @param y Starting page address (row number)
 * @param str String to display
 */
void OLED_ShowString(uint8_t x, uint8_t y, char* str) {
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	603a      	str	r2, [r7, #0]
 800237a:	71fb      	strb	r3, [r7, #7]
 800237c:	460b      	mov	r3, r1
 800237e:	71bb      	strb	r3, [r7, #6]
    while (*str) {
 8002380:	e014      	b.n	80023ac <OLED_ShowString+0x3c>
        OLED_ShowChar(x, y, *str); // Display individual character
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	781a      	ldrb	r2, [r3, #0]
 8002386:	79b9      	ldrb	r1, [r7, #6]
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff ffaa 	bl	80022e4 <OLED_ShowChar>
        x += 8;                    // Each character occupies 8 columns
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	3308      	adds	r3, #8
 8002394:	71fb      	strb	r3, [r7, #7]
        if (x > 120) {             // Wrap to the next line if exceeding screen width
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	2b78      	cmp	r3, #120	@ 0x78
 800239a:	d904      	bls.n	80023a6 <OLED_ShowString+0x36>
            x = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	71fb      	strb	r3, [r7, #7]
            y++;
 80023a0:	79bb      	ldrb	r3, [r7, #6]
 80023a2:	3301      	adds	r3, #1
 80023a4:	71bb      	strb	r3, [r7, #6]
        }
        str++;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	3301      	adds	r3, #1
 80023aa:	603b      	str	r3, [r7, #0]
    while (*str) {
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1e6      	bne.n	8002382 <OLED_ShowString+0x12>
    }
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	4b10      	ldr	r3, [pc, #64]	@ (800240c <HAL_MspInit+0x4c>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ce:	4a0f      	ldr	r2, [pc, #60]	@ (800240c <HAL_MspInit+0x4c>)
 80023d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023d6:	4b0d      	ldr	r3, [pc, #52]	@ (800240c <HAL_MspInit+0x4c>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	603b      	str	r3, [r7, #0]
 80023e6:	4b09      	ldr	r3, [pc, #36]	@ (800240c <HAL_MspInit+0x4c>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	4a08      	ldr	r2, [pc, #32]	@ (800240c <HAL_MspInit+0x4c>)
 80023ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023f2:	4b06      	ldr	r3, [pc, #24]	@ (800240c <HAL_MspInit+0x4c>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023fe:	2007      	movs	r0, #7
 8002400:	f001 f852 	bl	80034a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40023800 	.word	0x40023800

08002410 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	@ 0x28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a17      	ldr	r2, [pc, #92]	@ (800248c <HAL_ADC_MspInit+0x7c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d127      	bne.n	8002482 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	4b16      	ldr	r3, [pc, #88]	@ (8002490 <HAL_ADC_MspInit+0x80>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	4a15      	ldr	r2, [pc, #84]	@ (8002490 <HAL_ADC_MspInit+0x80>)
 800243c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002440:	6453      	str	r3, [r2, #68]	@ 0x44
 8002442:	4b13      	ldr	r3, [pc, #76]	@ (8002490 <HAL_ADC_MspInit+0x80>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	4b0f      	ldr	r3, [pc, #60]	@ (8002490 <HAL_ADC_MspInit+0x80>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	4a0e      	ldr	r2, [pc, #56]	@ (8002490 <HAL_ADC_MspInit+0x80>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6313      	str	r3, [r2, #48]	@ 0x30
 800245e:	4b0c      	ldr	r3, [pc, #48]	@ (8002490 <HAL_ADC_MspInit+0x80>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800246a:	2302      	movs	r3, #2
 800246c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800246e:	2303      	movs	r3, #3
 8002470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4619      	mov	r1, r3
 800247c:	4805      	ldr	r0, [pc, #20]	@ (8002494 <HAL_ADC_MspInit+0x84>)
 800247e:	f001 f855 	bl	800352c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002482:	bf00      	nop
 8002484:	3728      	adds	r7, #40	@ 0x28
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40012000 	.word	0x40012000
 8002490:	40023800 	.word	0x40023800
 8002494:	40020000 	.word	0x40020000

08002498 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08a      	sub	sp, #40	@ 0x28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a19      	ldr	r2, [pc, #100]	@ (800251c <HAL_I2C_MspInit+0x84>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d12c      	bne.n	8002514 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	4b18      	ldr	r3, [pc, #96]	@ (8002520 <HAL_I2C_MspInit+0x88>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	4a17      	ldr	r2, [pc, #92]	@ (8002520 <HAL_I2C_MspInit+0x88>)
 80024c4:	f043 0302 	orr.w	r3, r3, #2
 80024c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ca:	4b15      	ldr	r3, [pc, #84]	@ (8002520 <HAL_I2C_MspInit+0x88>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80024d6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80024da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024dc:	2312      	movs	r3, #18
 80024de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024e0:	2301      	movs	r3, #1
 80024e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024e8:	2304      	movs	r3, #4
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	4619      	mov	r1, r3
 80024f2:	480c      	ldr	r0, [pc, #48]	@ (8002524 <HAL_I2C_MspInit+0x8c>)
 80024f4:	f001 f81a 	bl	800352c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024f8:	2300      	movs	r3, #0
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <HAL_I2C_MspInit+0x88>)
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	4a07      	ldr	r2, [pc, #28]	@ (8002520 <HAL_I2C_MspInit+0x88>)
 8002502:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002506:	6413      	str	r3, [r2, #64]	@ 0x40
 8002508:	4b05      	ldr	r3, [pc, #20]	@ (8002520 <HAL_I2C_MspInit+0x88>)
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002514:	bf00      	nop
 8002516:	3728      	adds	r7, #40	@ 0x28
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40005400 	.word	0x40005400
 8002520:	40023800 	.word	0x40023800
 8002524:	40020400 	.word	0x40020400

08002528 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08e      	sub	sp, #56	@ 0x38
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002530:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a31      	ldr	r2, [pc, #196]	@ (8002618 <HAL_I2S_MspInit+0xf0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d15a      	bne.n	800260e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002558:	2301      	movs	r3, #1
 800255a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800255c:	23c0      	movs	r3, #192	@ 0xc0
 800255e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002560:	2302      	movs	r3, #2
 8002562:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	4618      	mov	r0, r3
 800256a:	f004 fef5 	bl	8007358 <HAL_RCCEx_PeriphCLKConfig>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002574:	f7ff f9cc 	bl	8001910 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	4b27      	ldr	r3, [pc, #156]	@ (800261c <HAL_I2S_MspInit+0xf4>)
 800257e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002580:	4a26      	ldr	r2, [pc, #152]	@ (800261c <HAL_I2S_MspInit+0xf4>)
 8002582:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002586:	6413      	str	r3, [r2, #64]	@ 0x40
 8002588:	4b24      	ldr	r3, [pc, #144]	@ (800261c <HAL_I2S_MspInit+0xf4>)
 800258a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	4b20      	ldr	r3, [pc, #128]	@ (800261c <HAL_I2S_MspInit+0xf4>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259c:	4a1f      	ldr	r2, [pc, #124]	@ (800261c <HAL_I2S_MspInit+0xf4>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a4:	4b1d      	ldr	r3, [pc, #116]	@ (800261c <HAL_I2S_MspInit+0xf4>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b0:	2300      	movs	r3, #0
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	4b19      	ldr	r3, [pc, #100]	@ (800261c <HAL_I2S_MspInit+0xf4>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b8:	4a18      	ldr	r2, [pc, #96]	@ (800261c <HAL_I2S_MspInit+0xf4>)
 80025ba:	f043 0304 	orr.w	r3, r3, #4
 80025be:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c0:	4b16      	ldr	r3, [pc, #88]	@ (800261c <HAL_I2S_MspInit+0xf4>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80025cc:	2310      	movs	r3, #16
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d0:	2302      	movs	r3, #2
 80025d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d8:	2300      	movs	r3, #0
 80025da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80025dc:	2306      	movs	r3, #6
 80025de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80025e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025e4:	4619      	mov	r1, r3
 80025e6:	480e      	ldr	r0, [pc, #56]	@ (8002620 <HAL_I2S_MspInit+0xf8>)
 80025e8:	f000 ffa0 	bl	800352c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80025ec:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80025f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	2300      	movs	r3, #0
 80025fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80025fe:	2306      	movs	r3, #6
 8002600:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002602:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002606:	4619      	mov	r1, r3
 8002608:	4806      	ldr	r0, [pc, #24]	@ (8002624 <HAL_I2S_MspInit+0xfc>)
 800260a:	f000 ff8f 	bl	800352c <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800260e:	bf00      	nop
 8002610:	3738      	adds	r7, #56	@ 0x38
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40003c00 	.word	0x40003c00
 800261c:	40023800 	.word	0x40023800
 8002620:	40020000 	.word	0x40020000
 8002624:	40020800 	.word	0x40020800

08002628 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08a      	sub	sp, #40	@ 0x28
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 0314 	add.w	r3, r7, #20
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a19      	ldr	r2, [pc, #100]	@ (80026ac <HAL_SPI_MspInit+0x84>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d12b      	bne.n	80026a2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	4b18      	ldr	r3, [pc, #96]	@ (80026b0 <HAL_SPI_MspInit+0x88>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002652:	4a17      	ldr	r2, [pc, #92]	@ (80026b0 <HAL_SPI_MspInit+0x88>)
 8002654:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002658:	6453      	str	r3, [r2, #68]	@ 0x44
 800265a:	4b15      	ldr	r3, [pc, #84]	@ (80026b0 <HAL_SPI_MspInit+0x88>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	4b11      	ldr	r3, [pc, #68]	@ (80026b0 <HAL_SPI_MspInit+0x88>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	4a10      	ldr	r2, [pc, #64]	@ (80026b0 <HAL_SPI_MspInit+0x88>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	6313      	str	r3, [r2, #48]	@ 0x30
 8002676:	4b0e      	ldr	r3, [pc, #56]	@ (80026b0 <HAL_SPI_MspInit+0x88>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002682:	23e0      	movs	r3, #224	@ 0xe0
 8002684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002686:	2302      	movs	r3, #2
 8002688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268e:	2300      	movs	r3, #0
 8002690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002692:	2305      	movs	r3, #5
 8002694:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002696:	f107 0314 	add.w	r3, r7, #20
 800269a:	4619      	mov	r1, r3
 800269c:	4805      	ldr	r0, [pc, #20]	@ (80026b4 <HAL_SPI_MspInit+0x8c>)
 800269e:	f000 ff45 	bl	800352c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80026a2:	bf00      	nop
 80026a4:	3728      	adds	r7, #40	@ 0x28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40013000 	.word	0x40013000
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40020000 	.word	0x40020000

080026b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	@ 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a19      	ldr	r2, [pc, #100]	@ (800273c <HAL_UART_MspInit+0x84>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d12b      	bne.n	8002732 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	4b18      	ldr	r3, [pc, #96]	@ (8002740 <HAL_UART_MspInit+0x88>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	4a17      	ldr	r2, [pc, #92]	@ (8002740 <HAL_UART_MspInit+0x88>)
 80026e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ea:	4b15      	ldr	r3, [pc, #84]	@ (8002740 <HAL_UART_MspInit+0x88>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4b11      	ldr	r3, [pc, #68]	@ (8002740 <HAL_UART_MspInit+0x88>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	4a10      	ldr	r2, [pc, #64]	@ (8002740 <HAL_UART_MspInit+0x88>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6313      	str	r3, [r2, #48]	@ 0x30
 8002706:	4b0e      	ldr	r3, [pc, #56]	@ (8002740 <HAL_UART_MspInit+0x88>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002712:	230c      	movs	r3, #12
 8002714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271e:	2303      	movs	r3, #3
 8002720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002722:	2307      	movs	r3, #7
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002726:	f107 0314 	add.w	r3, r7, #20
 800272a:	4619      	mov	r1, r3
 800272c:	4805      	ldr	r0, [pc, #20]	@ (8002744 <HAL_UART_MspInit+0x8c>)
 800272e:	f000 fefd 	bl	800352c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002732:	bf00      	nop
 8002734:	3728      	adds	r7, #40	@ 0x28
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40004400 	.word	0x40004400
 8002740:	40023800 	.word	0x40023800
 8002744:	40020000 	.word	0x40020000

08002748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800274c:	bf00      	nop
 800274e:	e7fd      	b.n	800274c <NMI_Handler+0x4>

08002750 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002754:	bf00      	nop
 8002756:	e7fd      	b.n	8002754 <HardFault_Handler+0x4>

08002758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800275c:	bf00      	nop
 800275e:	e7fd      	b.n	800275c <MemManage_Handler+0x4>

08002760 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002764:	bf00      	nop
 8002766:	e7fd      	b.n	8002764 <BusFault_Handler+0x4>

08002768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800276c:	bf00      	nop
 800276e:	e7fd      	b.n	800276c <UsageFault_Handler+0x4>

08002770 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800279e:	f000 f96f 	bl	8002a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pulse_Oximeter_Int_Pin);
 80027aa:	2001      	movs	r0, #1
 80027ac:	f001 f88e 	bl	80038cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80027b8:	4802      	ldr	r0, [pc, #8]	@ (80027c4 <OTG_FS_IRQHandler+0x10>)
 80027ba:	f003 f827 	bl	800580c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20001b54 	.word	0x20001b54

080027c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return 1;
 80027cc:	2301      	movs	r3, #1
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <_kill>:

int _kill(int pid, int sig)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027e2:	f009 fff5 	bl	800c7d0 <__errno>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2216      	movs	r2, #22
 80027ea:	601a      	str	r2, [r3, #0]
  return -1;
 80027ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <_exit>:

void _exit (int status)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002800:	f04f 31ff 	mov.w	r1, #4294967295
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ffe7 	bl	80027d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800280a:	bf00      	nop
 800280c:	e7fd      	b.n	800280a <_exit+0x12>

0800280e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b086      	sub	sp, #24
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	e00a      	b.n	8002836 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002820:	f3af 8000 	nop.w
 8002824:	4601      	mov	r1, r0
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	60ba      	str	r2, [r7, #8]
 800282c:	b2ca      	uxtb	r2, r1
 800282e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3301      	adds	r3, #1
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	429a      	cmp	r2, r3
 800283c:	dbf0      	blt.n	8002820 <_read+0x12>
  }

  return len;
 800283e:	687b      	ldr	r3, [r7, #4]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	e009      	b.n	800286e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	60ba      	str	r2, [r7, #8]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	3301      	adds	r3, #1
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	429a      	cmp	r2, r3
 8002874:	dbf1      	blt.n	800285a <_write+0x12>
  }
  return len;
 8002876:	687b      	ldr	r3, [r7, #4]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <_close>:

int _close(int file)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002888:	f04f 33ff 	mov.w	r3, #4294967295
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028a8:	605a      	str	r2, [r3, #4]
  return 0;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <_isatty>:

int _isatty(int file)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028c0:	2301      	movs	r3, #1
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b085      	sub	sp, #20
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028f0:	4a14      	ldr	r2, [pc, #80]	@ (8002944 <_sbrk+0x5c>)
 80028f2:	4b15      	ldr	r3, [pc, #84]	@ (8002948 <_sbrk+0x60>)
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028fc:	4b13      	ldr	r3, [pc, #76]	@ (800294c <_sbrk+0x64>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d102      	bne.n	800290a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002904:	4b11      	ldr	r3, [pc, #68]	@ (800294c <_sbrk+0x64>)
 8002906:	4a12      	ldr	r2, [pc, #72]	@ (8002950 <_sbrk+0x68>)
 8002908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800290a:	4b10      	ldr	r3, [pc, #64]	@ (800294c <_sbrk+0x64>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	429a      	cmp	r2, r3
 8002916:	d207      	bcs.n	8002928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002918:	f009 ff5a 	bl	800c7d0 <__errno>
 800291c:	4603      	mov	r3, r0
 800291e:	220c      	movs	r2, #12
 8002920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002922:	f04f 33ff 	mov.w	r3, #4294967295
 8002926:	e009      	b.n	800293c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002928:	4b08      	ldr	r3, [pc, #32]	@ (800294c <_sbrk+0x64>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800292e:	4b07      	ldr	r3, [pc, #28]	@ (800294c <_sbrk+0x64>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	4a05      	ldr	r2, [pc, #20]	@ (800294c <_sbrk+0x64>)
 8002938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800293a:	68fb      	ldr	r3, [r7, #12]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20020000 	.word	0x20020000
 8002948:	00000400 	.word	0x00000400
 800294c:	2000066c 	.word	0x2000066c
 8002950:	200023a8 	.word	0x200023a8

08002954 <millis>:
  }
}

// Get number of elapsed milliseconds
uint32_t millis(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002958:	f000 f8a6 	bl	8002aa8 <HAL_GetTick>
 800295c:	4603      	mov	r3, r0
}
 800295e:	4618      	mov	r0, r3
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002968:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <SystemInit+0x20>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296e:	4a05      	ldr	r2, [pc, #20]	@ (8002984 <SystemInit+0x20>)
 8002970:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002974:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002988:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800298c:	f7ff ffea 	bl	8002964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002990:	480c      	ldr	r0, [pc, #48]	@ (80029c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002992:	490d      	ldr	r1, [pc, #52]	@ (80029c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002994:	4a0d      	ldr	r2, [pc, #52]	@ (80029cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002998:	e002      	b.n	80029a0 <LoopCopyDataInit>

0800299a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800299a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800299c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800299e:	3304      	adds	r3, #4

080029a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029a4:	d3f9      	bcc.n	800299a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029a6:	4a0a      	ldr	r2, [pc, #40]	@ (80029d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029a8:	4c0a      	ldr	r4, [pc, #40]	@ (80029d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029ac:	e001      	b.n	80029b2 <LoopFillZerobss>

080029ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029b0:	3204      	adds	r2, #4

080029b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029b4:	d3fb      	bcc.n	80029ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029b6:	f009 ff11 	bl	800c7dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ba:	f7fe fbcb 	bl	8001154 <main>
  bx  lr    
 80029be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c8:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 80029cc:	0800f608 	.word	0x0800f608
  ldr r2, =_sbss
 80029d0:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 80029d4:	200023a4 	.word	0x200023a4

080029d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029d8:	e7fe      	b.n	80029d8 <ADC_IRQHandler>
	...

080029dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029e0:	4b0e      	ldr	r3, [pc, #56]	@ (8002a1c <HAL_Init+0x40>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0d      	ldr	r2, [pc, #52]	@ (8002a1c <HAL_Init+0x40>)
 80029e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029ec:	4b0b      	ldr	r3, [pc, #44]	@ (8002a1c <HAL_Init+0x40>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a0a      	ldr	r2, [pc, #40]	@ (8002a1c <HAL_Init+0x40>)
 80029f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029f8:	4b08      	ldr	r3, [pc, #32]	@ (8002a1c <HAL_Init+0x40>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a07      	ldr	r2, [pc, #28]	@ (8002a1c <HAL_Init+0x40>)
 80029fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a04:	2003      	movs	r0, #3
 8002a06:	f000 fd4f 	bl	80034a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f000 f808 	bl	8002a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a10:	f7ff fcd6 	bl	80023c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023c00 	.word	0x40023c00

08002a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a28:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <HAL_InitTick+0x54>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4b12      	ldr	r3, [pc, #72]	@ (8002a78 <HAL_InitTick+0x58>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	4619      	mov	r1, r3
 8002a32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fd67 	bl	8003512 <HAL_SYSTICK_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00e      	b.n	8002a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b0f      	cmp	r3, #15
 8002a52:	d80a      	bhi.n	8002a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a54:	2200      	movs	r2, #0
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	f04f 30ff 	mov.w	r0, #4294967295
 8002a5c:	f000 fd2f 	bl	80034be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a60:	4a06      	ldr	r2, [pc, #24]	@ (8002a7c <HAL_InitTick+0x5c>)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e000      	b.n	8002a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000004 	.word	0x20000004
 8002a78:	2000000c 	.word	0x2000000c
 8002a7c:	20000008 	.word	0x20000008

08002a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a84:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <HAL_IncTick+0x20>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <HAL_IncTick+0x24>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4413      	add	r3, r2
 8002a90:	4a04      	ldr	r2, [pc, #16]	@ (8002aa4 <HAL_IncTick+0x24>)
 8002a92:	6013      	str	r3, [r2, #0]
}
 8002a94:	bf00      	nop
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	2000000c 	.word	0x2000000c
 8002aa4:	20000670 	.word	0x20000670

08002aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8002aac:	4b03      	ldr	r3, [pc, #12]	@ (8002abc <HAL_GetTick+0x14>)
 8002aae:	681b      	ldr	r3, [r3, #0]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000670 	.word	0x20000670

08002ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ac8:	f7ff ffee 	bl	8002aa8 <HAL_GetTick>
 8002acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad8:	d005      	beq.n	8002ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ada:	4b0a      	ldr	r3, [pc, #40]	@ (8002b04 <HAL_Delay+0x44>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ae6:	bf00      	nop
 8002ae8:	f7ff ffde 	bl	8002aa8 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d8f7      	bhi.n	8002ae8 <HAL_Delay+0x28>
  {
  }
}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	2000000c 	.word	0x2000000c

08002b08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e033      	b.n	8002b86 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7ff fc72 	bl	8002410 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d118      	bne.n	8002b78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b4e:	f023 0302 	bic.w	r3, r3, #2
 8002b52:	f043 0202 	orr.w	r2, r3, #2
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fad8 	bl	8003110 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	f023 0303 	bic.w	r3, r3, #3
 8002b6e:	f043 0201 	orr.w	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b76:	e001      	b.n	8002b7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_Start+0x1a>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e0b2      	b.n	8002d10 <HAL_ADC_Start+0x180>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d018      	beq.n	8002bf2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bd0:	4b52      	ldr	r3, [pc, #328]	@ (8002d1c <HAL_ADC_Start+0x18c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a52      	ldr	r2, [pc, #328]	@ (8002d20 <HAL_ADC_Start+0x190>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	0c9a      	lsrs	r2, r3, #18
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002be4:	e002      	b.n	8002bec <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f9      	bne.n	8002be6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d17a      	bne.n	8002cf6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c04:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002c08:	f023 0301 	bic.w	r3, r3, #1
 8002c0c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d007      	beq.n	8002c32 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c2a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c3e:	d106      	bne.n	8002c4e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c44:	f023 0206 	bic.w	r2, r3, #6
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c4c:	e002      	b.n	8002c54 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c5c:	4b31      	ldr	r3, [pc, #196]	@ (8002d24 <HAL_ADC_Start+0x194>)
 8002c5e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002c68:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d12a      	bne.n	8002ccc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a2b      	ldr	r2, [pc, #172]	@ (8002d28 <HAL_ADC_Start+0x198>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d015      	beq.n	8002cac <HAL_ADC_Start+0x11c>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a29      	ldr	r2, [pc, #164]	@ (8002d2c <HAL_ADC_Start+0x19c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d105      	bne.n	8002c96 <HAL_ADC_Start+0x106>
 8002c8a:	4b26      	ldr	r3, [pc, #152]	@ (8002d24 <HAL_ADC_Start+0x194>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 031f 	and.w	r3, r3, #31
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a25      	ldr	r2, [pc, #148]	@ (8002d30 <HAL_ADC_Start+0x1a0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d136      	bne.n	8002d0e <HAL_ADC_Start+0x17e>
 8002ca0:	4b20      	ldr	r3, [pc, #128]	@ (8002d24 <HAL_ADC_Start+0x194>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d130      	bne.n	8002d0e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d129      	bne.n	8002d0e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002cc8:	609a      	str	r2, [r3, #8]
 8002cca:	e020      	b.n	8002d0e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a15      	ldr	r2, [pc, #84]	@ (8002d28 <HAL_ADC_Start+0x198>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d11b      	bne.n	8002d0e <HAL_ADC_Start+0x17e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d114      	bne.n	8002d0e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	e00b      	b.n	8002d0e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfa:	f043 0210 	orr.w	r2, r3, #16
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d06:	f043 0201 	orr.w	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	20000004 	.word	0x20000004
 8002d20:	431bde83 	.word	0x431bde83
 8002d24:	40012300 	.word	0x40012300
 8002d28:	40012000 	.word	0x40012000
 8002d2c:	40012100 	.word	0x40012100
 8002d30:	40012200 	.word	0x40012200

08002d34 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_Stop+0x16>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e021      	b.n	8002d8e <HAL_ADC_Stop+0x5a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0201 	bic.w	r2, r2, #1
 8002d60:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d109      	bne.n	8002d84 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d74:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	f043 0201 	orr.w	r2, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b084      	sub	sp, #16
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002db6:	d113      	bne.n	8002de0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dc6:	d10b      	bne.n	8002de0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dcc:	f043 0220 	orr.w	r2, r3, #32
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e063      	b.n	8002ea8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002de0:	f7ff fe62 	bl	8002aa8 <HAL_GetTick>
 8002de4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002de6:	e021      	b.n	8002e2c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dee:	d01d      	beq.n	8002e2c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d007      	beq.n	8002e06 <HAL_ADC_PollForConversion+0x6c>
 8002df6:	f7ff fe57 	bl	8002aa8 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d212      	bcs.n	8002e2c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d00b      	beq.n	8002e2c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	f043 0204 	orr.w	r2, r3, #4
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e03d      	b.n	8002ea8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d1d6      	bne.n	8002de8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f06f 0212 	mvn.w	r2, #18
 8002e42:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e48:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d123      	bne.n	8002ea6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d11f      	bne.n	8002ea6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d006      	beq.n	8002e82 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d111      	bne.n	8002ea6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d105      	bne.n	8002ea6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	f043 0201 	orr.w	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
	...

08002ecc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x1c>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e105      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x228>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b09      	cmp	r3, #9
 8002ef6:	d925      	bls.n	8002f44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68d9      	ldr	r1, [r3, #12]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3b1e      	subs	r3, #30
 8002f0e:	2207      	movs	r2, #7
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43da      	mvns	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	400a      	ands	r2, r1
 8002f1c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68d9      	ldr	r1, [r3, #12]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	4618      	mov	r0, r3
 8002f30:	4603      	mov	r3, r0
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4403      	add	r3, r0
 8002f36:	3b1e      	subs	r3, #30
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	e022      	b.n	8002f8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6919      	ldr	r1, [r3, #16]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	4613      	mov	r3, r2
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4413      	add	r3, r2
 8002f58:	2207      	movs	r2, #7
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	400a      	ands	r2, r1
 8002f66:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6919      	ldr	r1, [r3, #16]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	4618      	mov	r0, r3
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4403      	add	r3, r0
 8002f80:	409a      	lsls	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b06      	cmp	r3, #6
 8002f90:	d824      	bhi.n	8002fdc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3b05      	subs	r3, #5
 8002fa4:	221f      	movs	r2, #31
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43da      	mvns	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	400a      	ands	r2, r1
 8002fb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	3b05      	subs	r3, #5
 8002fce:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fda:	e04c      	b.n	8003076 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b0c      	cmp	r3, #12
 8002fe2:	d824      	bhi.n	800302e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3b23      	subs	r3, #35	@ 0x23
 8002ff6:	221f      	movs	r2, #31
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43da      	mvns	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	400a      	ands	r2, r1
 8003004:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	b29b      	uxth	r3, r3
 8003012:	4618      	mov	r0, r3
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	3b23      	subs	r3, #35	@ 0x23
 8003020:	fa00 f203 	lsl.w	r2, r0, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	631a      	str	r2, [r3, #48]	@ 0x30
 800302c:	e023      	b.n	8003076 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	3b41      	subs	r3, #65	@ 0x41
 8003040:	221f      	movs	r2, #31
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43da      	mvns	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	400a      	ands	r2, r1
 800304e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	b29b      	uxth	r3, r3
 800305c:	4618      	mov	r0, r3
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	3b41      	subs	r3, #65	@ 0x41
 800306a:	fa00 f203 	lsl.w	r2, r0, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003076:	4b22      	ldr	r3, [pc, #136]	@ (8003100 <HAL_ADC_ConfigChannel+0x234>)
 8003078:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a21      	ldr	r2, [pc, #132]	@ (8003104 <HAL_ADC_ConfigChannel+0x238>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d109      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x1cc>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b12      	cmp	r3, #18
 800308a:	d105      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a19      	ldr	r2, [pc, #100]	@ (8003104 <HAL_ADC_ConfigChannel+0x238>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d123      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x21e>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b10      	cmp	r3, #16
 80030a8:	d003      	beq.n	80030b2 <HAL_ADC_ConfigChannel+0x1e6>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b11      	cmp	r3, #17
 80030b0:	d11b      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b10      	cmp	r3, #16
 80030c4:	d111      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030c6:	4b10      	ldr	r3, [pc, #64]	@ (8003108 <HAL_ADC_ConfigChannel+0x23c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a10      	ldr	r2, [pc, #64]	@ (800310c <HAL_ADC_ConfigChannel+0x240>)
 80030cc:	fba2 2303 	umull	r2, r3, r2, r3
 80030d0:	0c9a      	lsrs	r2, r3, #18
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80030dc:	e002      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f9      	bne.n	80030de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	40012300 	.word	0x40012300
 8003104:	40012000 	.word	0x40012000
 8003108:	20000004 	.word	0x20000004
 800310c:	431bde83 	.word	0x431bde83

08003110 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003118:	4b79      	ldr	r3, [pc, #484]	@ (8003300 <ADC_Init+0x1f0>)
 800311a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	431a      	orrs	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003144:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	021a      	lsls	r2, r3, #8
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003168:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800318a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6899      	ldr	r1, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a2:	4a58      	ldr	r2, [pc, #352]	@ (8003304 <ADC_Init+0x1f4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d022      	beq.n	80031ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6899      	ldr	r1, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80031d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6899      	ldr	r1, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	e00f      	b.n	800320e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800320c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0202 	bic.w	r2, r2, #2
 800321c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6899      	ldr	r1, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	7e1b      	ldrb	r3, [r3, #24]
 8003228:	005a      	lsls	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01b      	beq.n	8003274 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800324a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800325a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6859      	ldr	r1, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	3b01      	subs	r3, #1
 8003268:	035a      	lsls	r2, r3, #13
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	e007      	b.n	8003284 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003282:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003292:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	3b01      	subs	r3, #1
 80032a0:	051a      	lsls	r2, r3, #20
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80032b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6899      	ldr	r1, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80032c6:	025a      	lsls	r2, r3, #9
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6899      	ldr	r1, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	029a      	lsls	r2, r3, #10
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	609a      	str	r2, [r3, #8]
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	40012300 	.word	0x40012300
 8003304:	0f000001 	.word	0x0f000001

08003308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003318:	4b0c      	ldr	r3, [pc, #48]	@ (800334c <__NVIC_SetPriorityGrouping+0x44>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003324:	4013      	ands	r3, r2
 8003326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003330:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800333a:	4a04      	ldr	r2, [pc, #16]	@ (800334c <__NVIC_SetPriorityGrouping+0x44>)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	60d3      	str	r3, [r2, #12]
}
 8003340:	bf00      	nop
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003354:	4b04      	ldr	r3, [pc, #16]	@ (8003368 <__NVIC_GetPriorityGrouping+0x18>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	0a1b      	lsrs	r3, r3, #8
 800335a:	f003 0307 	and.w	r3, r3, #7
}
 800335e:	4618      	mov	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337a:	2b00      	cmp	r3, #0
 800337c:	db0b      	blt.n	8003396 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	f003 021f 	and.w	r2, r3, #31
 8003384:	4907      	ldr	r1, [pc, #28]	@ (80033a4 <__NVIC_EnableIRQ+0x38>)
 8003386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	2001      	movs	r0, #1
 800338e:	fa00 f202 	lsl.w	r2, r0, r2
 8003392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	e000e100 	.word	0xe000e100

080033a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	6039      	str	r1, [r7, #0]
 80033b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	db0a      	blt.n	80033d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	490c      	ldr	r1, [pc, #48]	@ (80033f4 <__NVIC_SetPriority+0x4c>)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	0112      	lsls	r2, r2, #4
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	440b      	add	r3, r1
 80033cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033d0:	e00a      	b.n	80033e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4908      	ldr	r1, [pc, #32]	@ (80033f8 <__NVIC_SetPriority+0x50>)
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	3b04      	subs	r3, #4
 80033e0:	0112      	lsls	r2, r2, #4
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	440b      	add	r3, r1
 80033e6:	761a      	strb	r2, [r3, #24]
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000e100 	.word	0xe000e100
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b089      	sub	sp, #36	@ 0x24
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f1c3 0307 	rsb	r3, r3, #7
 8003416:	2b04      	cmp	r3, #4
 8003418:	bf28      	it	cs
 800341a:	2304      	movcs	r3, #4
 800341c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	3304      	adds	r3, #4
 8003422:	2b06      	cmp	r3, #6
 8003424:	d902      	bls.n	800342c <NVIC_EncodePriority+0x30>
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	3b03      	subs	r3, #3
 800342a:	e000      	b.n	800342e <NVIC_EncodePriority+0x32>
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003430:	f04f 32ff 	mov.w	r2, #4294967295
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43da      	mvns	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	401a      	ands	r2, r3
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003444:	f04f 31ff 	mov.w	r1, #4294967295
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	fa01 f303 	lsl.w	r3, r1, r3
 800344e:	43d9      	mvns	r1, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003454:	4313      	orrs	r3, r2
         );
}
 8003456:	4618      	mov	r0, r3
 8003458:	3724      	adds	r7, #36	@ 0x24
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3b01      	subs	r3, #1
 8003470:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003474:	d301      	bcc.n	800347a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003476:	2301      	movs	r3, #1
 8003478:	e00f      	b.n	800349a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800347a:	4a0a      	ldr	r2, [pc, #40]	@ (80034a4 <SysTick_Config+0x40>)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3b01      	subs	r3, #1
 8003480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003482:	210f      	movs	r1, #15
 8003484:	f04f 30ff 	mov.w	r0, #4294967295
 8003488:	f7ff ff8e 	bl	80033a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800348c:	4b05      	ldr	r3, [pc, #20]	@ (80034a4 <SysTick_Config+0x40>)
 800348e:	2200      	movs	r2, #0
 8003490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003492:	4b04      	ldr	r3, [pc, #16]	@ (80034a4 <SysTick_Config+0x40>)
 8003494:	2207      	movs	r2, #7
 8003496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	e000e010 	.word	0xe000e010

080034a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff ff29 	bl	8003308 <__NVIC_SetPriorityGrouping>
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034be:	b580      	push	{r7, lr}
 80034c0:	b086      	sub	sp, #24
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	4603      	mov	r3, r0
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
 80034ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034d0:	f7ff ff3e 	bl	8003350 <__NVIC_GetPriorityGrouping>
 80034d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	6978      	ldr	r0, [r7, #20]
 80034dc:	f7ff ff8e 	bl	80033fc <NVIC_EncodePriority>
 80034e0:	4602      	mov	r2, r0
 80034e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e6:	4611      	mov	r1, r2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff5d 	bl	80033a8 <__NVIC_SetPriority>
}
 80034ee:	bf00      	nop
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	4603      	mov	r3, r0
 80034fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff31 	bl	800336c <__NVIC_EnableIRQ>
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff ffa2 	bl	8003464 <SysTick_Config>
 8003520:	4603      	mov	r3, r0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800352c:	b480      	push	{r7}
 800352e:	b089      	sub	sp, #36	@ 0x24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800353a:	2300      	movs	r3, #0
 800353c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800353e:	2300      	movs	r3, #0
 8003540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	e16b      	b.n	8003820 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003548:	2201      	movs	r2, #1
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	429a      	cmp	r2, r3
 8003562:	f040 815a 	bne.w	800381a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d005      	beq.n	800357e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800357a:	2b02      	cmp	r3, #2
 800357c:	d130      	bne.n	80035e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	2203      	movs	r2, #3
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4013      	ands	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035b4:	2201      	movs	r2, #1
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	f003 0201 	and.w	r2, r3, #1
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d017      	beq.n	800361c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	2203      	movs	r2, #3
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4013      	ands	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d123      	bne.n	8003670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	08da      	lsrs	r2, r3, #3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3208      	adds	r2, #8
 8003630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	220f      	movs	r2, #15
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	08da      	lsrs	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3208      	adds	r2, #8
 800366a:	69b9      	ldr	r1, [r7, #24]
 800366c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	2203      	movs	r2, #3
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 0203 	and.w	r2, r3, #3
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4313      	orrs	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80b4 	beq.w	800381a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	4b60      	ldr	r3, [pc, #384]	@ (8003838 <HAL_GPIO_Init+0x30c>)
 80036b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ba:	4a5f      	ldr	r2, [pc, #380]	@ (8003838 <HAL_GPIO_Init+0x30c>)
 80036bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80036c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003838 <HAL_GPIO_Init+0x30c>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ce:	4a5b      	ldr	r2, [pc, #364]	@ (800383c <HAL_GPIO_Init+0x310>)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	089b      	lsrs	r3, r3, #2
 80036d4:	3302      	adds	r3, #2
 80036d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	220f      	movs	r2, #15
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	43db      	mvns	r3, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4013      	ands	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a52      	ldr	r2, [pc, #328]	@ (8003840 <HAL_GPIO_Init+0x314>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d02b      	beq.n	8003752 <HAL_GPIO_Init+0x226>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a51      	ldr	r2, [pc, #324]	@ (8003844 <HAL_GPIO_Init+0x318>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d025      	beq.n	800374e <HAL_GPIO_Init+0x222>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a50      	ldr	r2, [pc, #320]	@ (8003848 <HAL_GPIO_Init+0x31c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d01f      	beq.n	800374a <HAL_GPIO_Init+0x21e>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a4f      	ldr	r2, [pc, #316]	@ (800384c <HAL_GPIO_Init+0x320>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d019      	beq.n	8003746 <HAL_GPIO_Init+0x21a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a4e      	ldr	r2, [pc, #312]	@ (8003850 <HAL_GPIO_Init+0x324>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_GPIO_Init+0x216>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a4d      	ldr	r2, [pc, #308]	@ (8003854 <HAL_GPIO_Init+0x328>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00d      	beq.n	800373e <HAL_GPIO_Init+0x212>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a4c      	ldr	r2, [pc, #304]	@ (8003858 <HAL_GPIO_Init+0x32c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d007      	beq.n	800373a <HAL_GPIO_Init+0x20e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a4b      	ldr	r2, [pc, #300]	@ (800385c <HAL_GPIO_Init+0x330>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <HAL_GPIO_Init+0x20a>
 8003732:	2307      	movs	r3, #7
 8003734:	e00e      	b.n	8003754 <HAL_GPIO_Init+0x228>
 8003736:	2308      	movs	r3, #8
 8003738:	e00c      	b.n	8003754 <HAL_GPIO_Init+0x228>
 800373a:	2306      	movs	r3, #6
 800373c:	e00a      	b.n	8003754 <HAL_GPIO_Init+0x228>
 800373e:	2305      	movs	r3, #5
 8003740:	e008      	b.n	8003754 <HAL_GPIO_Init+0x228>
 8003742:	2304      	movs	r3, #4
 8003744:	e006      	b.n	8003754 <HAL_GPIO_Init+0x228>
 8003746:	2303      	movs	r3, #3
 8003748:	e004      	b.n	8003754 <HAL_GPIO_Init+0x228>
 800374a:	2302      	movs	r3, #2
 800374c:	e002      	b.n	8003754 <HAL_GPIO_Init+0x228>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <HAL_GPIO_Init+0x228>
 8003752:	2300      	movs	r3, #0
 8003754:	69fa      	ldr	r2, [r7, #28]
 8003756:	f002 0203 	and.w	r2, r2, #3
 800375a:	0092      	lsls	r2, r2, #2
 800375c:	4093      	lsls	r3, r2
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003764:	4935      	ldr	r1, [pc, #212]	@ (800383c <HAL_GPIO_Init+0x310>)
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	089b      	lsrs	r3, r3, #2
 800376a:	3302      	adds	r3, #2
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003772:	4b3b      	ldr	r3, [pc, #236]	@ (8003860 <HAL_GPIO_Init+0x334>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	43db      	mvns	r3, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4013      	ands	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003796:	4a32      	ldr	r2, [pc, #200]	@ (8003860 <HAL_GPIO_Init+0x334>)
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800379c:	4b30      	ldr	r3, [pc, #192]	@ (8003860 <HAL_GPIO_Init+0x334>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037c0:	4a27      	ldr	r2, [pc, #156]	@ (8003860 <HAL_GPIO_Init+0x334>)
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037c6:	4b26      	ldr	r3, [pc, #152]	@ (8003860 <HAL_GPIO_Init+0x334>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	43db      	mvns	r3, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4013      	ands	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003860 <HAL_GPIO_Init+0x334>)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003860 <HAL_GPIO_Init+0x334>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	43db      	mvns	r3, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4013      	ands	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003814:	4a12      	ldr	r2, [pc, #72]	@ (8003860 <HAL_GPIO_Init+0x334>)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	3301      	adds	r3, #1
 800381e:	61fb      	str	r3, [r7, #28]
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	2b0f      	cmp	r3, #15
 8003824:	f67f ae90 	bls.w	8003548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003828:	bf00      	nop
 800382a:	bf00      	nop
 800382c:	3724      	adds	r7, #36	@ 0x24
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40023800 	.word	0x40023800
 800383c:	40013800 	.word	0x40013800
 8003840:	40020000 	.word	0x40020000
 8003844:	40020400 	.word	0x40020400
 8003848:	40020800 	.word	0x40020800
 800384c:	40020c00 	.word	0x40020c00
 8003850:	40021000 	.word	0x40021000
 8003854:	40021400 	.word	0x40021400
 8003858:	40021800 	.word	0x40021800
 800385c:	40021c00 	.word	0x40021c00
 8003860:	40013c00 	.word	0x40013c00

08003864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	807b      	strh	r3, [r7, #2]
 8003870:	4613      	mov	r3, r2
 8003872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003874:	787b      	ldrb	r3, [r7, #1]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800387a:	887a      	ldrh	r2, [r7, #2]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003880:	e003      	b.n	800388a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003882:	887b      	ldrh	r3, [r7, #2]
 8003884:	041a      	lsls	r2, r3, #16
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	619a      	str	r2, [r3, #24]
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003896:	b480      	push	{r7}
 8003898:	b085      	sub	sp, #20
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	460b      	mov	r3, r1
 80038a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038a8:	887a      	ldrh	r2, [r7, #2]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4013      	ands	r3, r2
 80038ae:	041a      	lsls	r2, r3, #16
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	43d9      	mvns	r1, r3
 80038b4:	887b      	ldrh	r3, [r7, #2]
 80038b6:	400b      	ands	r3, r1
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	619a      	str	r2, [r3, #24]
}
 80038be:	bf00      	nop
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038d6:	4b08      	ldr	r3, [pc, #32]	@ (80038f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	88fb      	ldrh	r3, [r7, #6]
 80038dc:	4013      	ands	r3, r2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d006      	beq.n	80038f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038e2:	4a05      	ldr	r2, [pc, #20]	@ (80038f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fd fffc 	bl	80018e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80038f0:	bf00      	nop
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40013c00 	.word	0x40013c00

080038fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e12b      	b.n	8003b66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fe fdb8 	bl	8002498 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2224      	movs	r2, #36	@ 0x24
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0201 	bic.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800394e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800395e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003960:	f003 fcd2 	bl	8007308 <HAL_RCC_GetPCLK1Freq>
 8003964:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	4a81      	ldr	r2, [pc, #516]	@ (8003b70 <HAL_I2C_Init+0x274>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d807      	bhi.n	8003980 <HAL_I2C_Init+0x84>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4a80      	ldr	r2, [pc, #512]	@ (8003b74 <HAL_I2C_Init+0x278>)
 8003974:	4293      	cmp	r3, r2
 8003976:	bf94      	ite	ls
 8003978:	2301      	movls	r3, #1
 800397a:	2300      	movhi	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	e006      	b.n	800398e <HAL_I2C_Init+0x92>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4a7d      	ldr	r2, [pc, #500]	@ (8003b78 <HAL_I2C_Init+0x27c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	bf94      	ite	ls
 8003988:	2301      	movls	r3, #1
 800398a:	2300      	movhi	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e0e7      	b.n	8003b66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4a78      	ldr	r2, [pc, #480]	@ (8003b7c <HAL_I2C_Init+0x280>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	0c9b      	lsrs	r3, r3, #18
 80039a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4a6a      	ldr	r2, [pc, #424]	@ (8003b70 <HAL_I2C_Init+0x274>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d802      	bhi.n	80039d0 <HAL_I2C_Init+0xd4>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	3301      	adds	r3, #1
 80039ce:	e009      	b.n	80039e4 <HAL_I2C_Init+0xe8>
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039d6:	fb02 f303 	mul.w	r3, r2, r3
 80039da:	4a69      	ldr	r2, [pc, #420]	@ (8003b80 <HAL_I2C_Init+0x284>)
 80039dc:	fba2 2303 	umull	r2, r3, r2, r3
 80039e0:	099b      	lsrs	r3, r3, #6
 80039e2:	3301      	adds	r3, #1
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6812      	ldr	r2, [r2, #0]
 80039e8:	430b      	orrs	r3, r1
 80039ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	495c      	ldr	r1, [pc, #368]	@ (8003b70 <HAL_I2C_Init+0x274>)
 8003a00:	428b      	cmp	r3, r1
 8003a02:	d819      	bhi.n	8003a38 <HAL_I2C_Init+0x13c>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1e59      	subs	r1, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a12:	1c59      	adds	r1, r3, #1
 8003a14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a18:	400b      	ands	r3, r1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <HAL_I2C_Init+0x138>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1e59      	subs	r1, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a32:	e051      	b.n	8003ad8 <HAL_I2C_Init+0x1dc>
 8003a34:	2304      	movs	r3, #4
 8003a36:	e04f      	b.n	8003ad8 <HAL_I2C_Init+0x1dc>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d111      	bne.n	8003a64 <HAL_I2C_Init+0x168>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	1e58      	subs	r0, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	440b      	add	r3, r1
 8003a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a52:	3301      	adds	r3, #1
 8003a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2301      	moveq	r3, #1
 8003a5e:	2300      	movne	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	e012      	b.n	8003a8a <HAL_I2C_Init+0x18e>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1e58      	subs	r0, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	0099      	lsls	r1, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_I2C_Init+0x196>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e022      	b.n	8003ad8 <HAL_I2C_Init+0x1dc>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10e      	bne.n	8003ab8 <HAL_I2C_Init+0x1bc>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	1e58      	subs	r0, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6859      	ldr	r1, [r3, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	440b      	add	r3, r1
 8003aa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aac:	3301      	adds	r3, #1
 8003aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ab6:	e00f      	b.n	8003ad8 <HAL_I2C_Init+0x1dc>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1e58      	subs	r0, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6859      	ldr	r1, [r3, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	0099      	lsls	r1, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ace:	3301      	adds	r3, #1
 8003ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	6809      	ldr	r1, [r1, #0]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69da      	ldr	r2, [r3, #28]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6911      	ldr	r1, [r2, #16]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68d2      	ldr	r2, [r2, #12]
 8003b12:	4311      	orrs	r1, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	000186a0 	.word	0x000186a0
 8003b74:	001e847f 	.word	0x001e847f
 8003b78:	003d08ff 	.word	0x003d08ff
 8003b7c:	431bde83 	.word	0x431bde83
 8003b80:	10624dd3 	.word	0x10624dd3

08003b84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	460b      	mov	r3, r1
 8003b92:	817b      	strh	r3, [r7, #10]
 8003b94:	4613      	mov	r3, r2
 8003b96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b98:	f7fe ff86 	bl	8002aa8 <HAL_GetTick>
 8003b9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	f040 80e0 	bne.w	8003d6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	2319      	movs	r3, #25
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	4970      	ldr	r1, [pc, #448]	@ (8003d78 <HAL_I2C_Master_Transmit+0x1f4>)
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fe0e 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e0d3      	b.n	8003d6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_I2C_Master_Transmit+0x50>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e0cc      	b.n	8003d6e <HAL_I2C_Master_Transmit+0x1ea>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d007      	beq.n	8003bfa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0201 	orr.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2221      	movs	r2, #33	@ 0x21
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2210      	movs	r2, #16
 8003c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	893a      	ldrh	r2, [r7, #8]
 8003c2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4a50      	ldr	r2, [pc, #320]	@ (8003d7c <HAL_I2C_Master_Transmit+0x1f8>)
 8003c3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c3c:	8979      	ldrh	r1, [r7, #10]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	6a3a      	ldr	r2, [r7, #32]
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 fbc8 	bl	80043d8 <I2C_MasterRequestWrite>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e08d      	b.n	8003d6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c52:	2300      	movs	r3, #0
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c68:	e066      	b.n	8003d38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	6a39      	ldr	r1, [r7, #32]
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 fecc 	bl	8004a0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00d      	beq.n	8003c96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d107      	bne.n	8003c92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e06b      	b.n	8003d6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9a:	781a      	ldrb	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d11b      	bne.n	8003d0c <HAL_I2C_Master_Transmit+0x188>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d017      	beq.n	8003d0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce0:	781a      	ldrb	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	6a39      	ldr	r1, [r7, #32]
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 fec3 	bl	8004a9c <I2C_WaitOnBTFFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00d      	beq.n	8003d38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d107      	bne.n	8003d34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e01a      	b.n	8003d6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d194      	bne.n	8003c6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	e000      	b.n	8003d6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d6c:	2302      	movs	r3, #2
  }
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	00100002 	.word	0x00100002
 8003d7c:	ffff0000 	.word	0xffff0000

08003d80 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	4608      	mov	r0, r1
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4603      	mov	r3, r0
 8003d90:	817b      	strh	r3, [r7, #10]
 8003d92:	460b      	mov	r3, r1
 8003d94:	813b      	strh	r3, [r7, #8]
 8003d96:	4613      	mov	r3, r2
 8003d98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d9a:	f7fe fe85 	bl	8002aa8 <HAL_GetTick>
 8003d9e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	f040 80d9 	bne.w	8003f60 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	2319      	movs	r3, #25
 8003db4:	2201      	movs	r2, #1
 8003db6:	496d      	ldr	r1, [pc, #436]	@ (8003f6c <HAL_I2C_Mem_Write+0x1ec>)
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 fd0d 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e0cc      	b.n	8003f62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_I2C_Mem_Write+0x56>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e0c5      	b.n	8003f62 <HAL_I2C_Mem_Write+0x1e2>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d007      	beq.n	8003dfc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2221      	movs	r2, #33	@ 0x21
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2240      	movs	r2, #64	@ 0x40
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a3a      	ldr	r2, [r7, #32]
 8003e26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4a4d      	ldr	r2, [pc, #308]	@ (8003f70 <HAL_I2C_Mem_Write+0x1f0>)
 8003e3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e3e:	88f8      	ldrh	r0, [r7, #6]
 8003e40:	893a      	ldrh	r2, [r7, #8]
 8003e42:	8979      	ldrh	r1, [r7, #10]
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	9301      	str	r3, [sp, #4]
 8003e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 fb44 	bl	80044dc <I2C_RequestMemoryWrite>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d052      	beq.n	8003f00 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e081      	b.n	8003f62 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 fdd2 	bl	8004a0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00d      	beq.n	8003e8a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d107      	bne.n	8003e86 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e06b      	b.n	8003f62 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8e:	781a      	ldrb	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d11b      	bne.n	8003f00 <HAL_I2C_Mem_Write+0x180>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d017      	beq.n	8003f00 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	781a      	ldrb	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1aa      	bne.n	8003e5e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 fdc5 	bl	8004a9c <I2C_WaitOnBTFFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00d      	beq.n	8003f34 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d107      	bne.n	8003f30 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f2e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e016      	b.n	8003f62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	e000      	b.n	8003f62 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f60:	2302      	movs	r3, #2
  }
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	00100002 	.word	0x00100002
 8003f70:	ffff0000 	.word	0xffff0000

08003f74 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08c      	sub	sp, #48	@ 0x30
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	4608      	mov	r0, r1
 8003f7e:	4611      	mov	r1, r2
 8003f80:	461a      	mov	r2, r3
 8003f82:	4603      	mov	r3, r0
 8003f84:	817b      	strh	r3, [r7, #10]
 8003f86:	460b      	mov	r3, r1
 8003f88:	813b      	strh	r3, [r7, #8]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f8e:	f7fe fd8b 	bl	8002aa8 <HAL_GetTick>
 8003f92:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	f040 8214 	bne.w	80043ca <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	2319      	movs	r3, #25
 8003fa8:	2201      	movs	r2, #1
 8003faa:	497b      	ldr	r1, [pc, #492]	@ (8004198 <HAL_I2C_Mem_Read+0x224>)
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 fc13 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e207      	b.n	80043cc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <HAL_I2C_Mem_Read+0x56>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e200      	b.n	80043cc <HAL_I2C_Mem_Read+0x458>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d007      	beq.n	8003ff0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ffe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2222      	movs	r2, #34	@ 0x22
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2240      	movs	r2, #64	@ 0x40
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800401a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004020:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4a5b      	ldr	r2, [pc, #364]	@ (800419c <HAL_I2C_Mem_Read+0x228>)
 8004030:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004032:	88f8      	ldrh	r0, [r7, #6]
 8004034:	893a      	ldrh	r2, [r7, #8]
 8004036:	8979      	ldrh	r1, [r7, #10]
 8004038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403a:	9301      	str	r3, [sp, #4]
 800403c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	4603      	mov	r3, r0
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 fae0 	bl	8004608 <I2C_RequestMemoryRead>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e1bc      	b.n	80043cc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004056:	2b00      	cmp	r3, #0
 8004058:	d113      	bne.n	8004082 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405a:	2300      	movs	r3, #0
 800405c:	623b      	str	r3, [r7, #32]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	623b      	str	r3, [r7, #32]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	623b      	str	r3, [r7, #32]
 800406e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	e190      	b.n	80043a4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004086:	2b01      	cmp	r3, #1
 8004088:	d11b      	bne.n	80040c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004098:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	61fb      	str	r3, [r7, #28]
 80040ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	e170      	b.n	80043a4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d11b      	bne.n	8004102 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ea:	2300      	movs	r3, #0
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	61bb      	str	r3, [r7, #24]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	61bb      	str	r3, [r7, #24]
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	e150      	b.n	80043a4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004118:	e144      	b.n	80043a4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411e:	2b03      	cmp	r3, #3
 8004120:	f200 80f1 	bhi.w	8004306 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004128:	2b01      	cmp	r3, #1
 800412a:	d123      	bne.n	8004174 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800412c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800412e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 fcfb 	bl	8004b2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e145      	b.n	80043cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691a      	ldr	r2, [r3, #16]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004172:	e117      	b.n	80043a4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004178:	2b02      	cmp	r3, #2
 800417a:	d14e      	bne.n	800421a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800417c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004182:	2200      	movs	r2, #0
 8004184:	4906      	ldr	r1, [pc, #24]	@ (80041a0 <HAL_I2C_Mem_Read+0x22c>)
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 fb26 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d008      	beq.n	80041a4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e11a      	b.n	80043cc <HAL_I2C_Mem_Read+0x458>
 8004196:	bf00      	nop
 8004198:	00100002 	.word	0x00100002
 800419c:	ffff0000 	.word	0xffff0000
 80041a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691a      	ldr	r2, [r3, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004218:	e0c4      	b.n	80043a4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004220:	2200      	movs	r2, #0
 8004222:	496c      	ldr	r1, [pc, #432]	@ (80043d4 <HAL_I2C_Mem_Read+0x460>)
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 fad7 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0cb      	b.n	80043cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004242:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800427c:	2200      	movs	r2, #0
 800427e:	4955      	ldr	r1, [pc, #340]	@ (80043d4 <HAL_I2C_Mem_Read+0x460>)
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 faa9 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e09d      	b.n	80043cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800429e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004304:	e04e      	b.n	80043a4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004308:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 fc0e 	bl	8004b2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e058      	b.n	80043cc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b04      	cmp	r3, #4
 8004358:	d124      	bne.n	80043a4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800435e:	2b03      	cmp	r3, #3
 8004360:	d107      	bne.n	8004372 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004370:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f47f aeb6 	bne.w	800411a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	e000      	b.n	80043cc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80043ca:	2302      	movs	r3, #2
  }
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3728      	adds	r7, #40	@ 0x28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	00010004 	.word	0x00010004

080043d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	607a      	str	r2, [r7, #4]
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	460b      	mov	r3, r1
 80043e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d006      	beq.n	8004402 <I2C_MasterRequestWrite+0x2a>
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d003      	beq.n	8004402 <I2C_MasterRequestWrite+0x2a>
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004400:	d108      	bne.n	8004414 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	e00b      	b.n	800442c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004418:	2b12      	cmp	r3, #18
 800441a:	d107      	bne.n	800442c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800442a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 f9cd 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00d      	beq.n	8004460 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800444e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004452:	d103      	bne.n	800445c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800445a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e035      	b.n	80044cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004468:	d108      	bne.n	800447c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800446a:	897b      	ldrh	r3, [r7, #10]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	461a      	mov	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004478:	611a      	str	r2, [r3, #16]
 800447a:	e01b      	b.n	80044b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800447c:	897b      	ldrh	r3, [r7, #10]
 800447e:	11db      	asrs	r3, r3, #7
 8004480:	b2db      	uxtb	r3, r3
 8004482:	f003 0306 	and.w	r3, r3, #6
 8004486:	b2db      	uxtb	r3, r3
 8004488:	f063 030f 	orn	r3, r3, #15
 800448c:	b2da      	uxtb	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	490e      	ldr	r1, [pc, #56]	@ (80044d4 <I2C_MasterRequestWrite+0xfc>)
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 fa16 	bl	80048cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e010      	b.n	80044cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044aa:	897b      	ldrh	r3, [r7, #10]
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	4907      	ldr	r1, [pc, #28]	@ (80044d8 <I2C_MasterRequestWrite+0x100>)
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 fa06 	bl	80048cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	00010008 	.word	0x00010008
 80044d8:	00010002 	.word	0x00010002

080044dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	4608      	mov	r0, r1
 80044e6:	4611      	mov	r1, r2
 80044e8:	461a      	mov	r2, r3
 80044ea:	4603      	mov	r3, r0
 80044ec:	817b      	strh	r3, [r7, #10]
 80044ee:	460b      	mov	r3, r1
 80044f0:	813b      	strh	r3, [r7, #8]
 80044f2:	4613      	mov	r3, r2
 80044f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004504:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	2200      	movs	r2, #0
 800450e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f960 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00d      	beq.n	800453a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004528:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800452c:	d103      	bne.n	8004536 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004534:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e05f      	b.n	80045fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800453a:	897b      	ldrh	r3, [r7, #10]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004548:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800454a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454c:	6a3a      	ldr	r2, [r7, #32]
 800454e:	492d      	ldr	r1, [pc, #180]	@ (8004604 <I2C_RequestMemoryWrite+0x128>)
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 f9bb 	bl	80048cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e04c      	b.n	80045fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004578:	6a39      	ldr	r1, [r7, #32]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 fa46 	bl	8004a0c <I2C_WaitOnTXEFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00d      	beq.n	80045a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458a:	2b04      	cmp	r3, #4
 800458c:	d107      	bne.n	800459e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800459c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e02b      	b.n	80045fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d105      	bne.n	80045b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045a8:	893b      	ldrh	r3, [r7, #8]
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	611a      	str	r2, [r3, #16]
 80045b2:	e021      	b.n	80045f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045b4:	893b      	ldrh	r3, [r7, #8]
 80045b6:	0a1b      	lsrs	r3, r3, #8
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045c4:	6a39      	ldr	r1, [r7, #32]
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fa20 	bl	8004a0c <I2C_WaitOnTXEFlagUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00d      	beq.n	80045ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d107      	bne.n	80045ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e005      	b.n	80045fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045ee:	893b      	ldrh	r3, [r7, #8]
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	00010002 	.word	0x00010002

08004608 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	4608      	mov	r0, r1
 8004612:	4611      	mov	r1, r2
 8004614:	461a      	mov	r2, r3
 8004616:	4603      	mov	r3, r0
 8004618:	817b      	strh	r3, [r7, #10]
 800461a:	460b      	mov	r3, r1
 800461c:	813b      	strh	r3, [r7, #8]
 800461e:	4613      	mov	r3, r2
 8004620:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004630:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004640:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	2200      	movs	r2, #0
 800464a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 f8c2 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00d      	beq.n	8004676 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004664:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004668:	d103      	bne.n	8004672 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004670:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e0aa      	b.n	80047cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004676:	897b      	ldrh	r3, [r7, #10]
 8004678:	b2db      	uxtb	r3, r3
 800467a:	461a      	mov	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004684:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004688:	6a3a      	ldr	r2, [r7, #32]
 800468a:	4952      	ldr	r1, [pc, #328]	@ (80047d4 <I2C_RequestMemoryRead+0x1cc>)
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 f91d 	bl	80048cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e097      	b.n	80047cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b4:	6a39      	ldr	r1, [r7, #32]
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 f9a8 	bl	8004a0c <I2C_WaitOnTXEFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00d      	beq.n	80046de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d107      	bne.n	80046da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e076      	b.n	80047cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046de:	88fb      	ldrh	r3, [r7, #6]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d105      	bne.n	80046f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046e4:	893b      	ldrh	r3, [r7, #8]
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	611a      	str	r2, [r3, #16]
 80046ee:	e021      	b.n	8004734 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046f0:	893b      	ldrh	r3, [r7, #8]
 80046f2:	0a1b      	lsrs	r3, r3, #8
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004700:	6a39      	ldr	r1, [r7, #32]
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 f982 	bl	8004a0c <I2C_WaitOnTXEFlagUntilTimeout>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00d      	beq.n	800472a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004712:	2b04      	cmp	r3, #4
 8004714:	d107      	bne.n	8004726 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004724:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e050      	b.n	80047cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800472a:	893b      	ldrh	r3, [r7, #8]
 800472c:	b2da      	uxtb	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004736:	6a39      	ldr	r1, [r7, #32]
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 f967 	bl	8004a0c <I2C_WaitOnTXEFlagUntilTimeout>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00d      	beq.n	8004760 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004748:	2b04      	cmp	r3, #4
 800474a:	d107      	bne.n	800475c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800475a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e035      	b.n	80047cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800476e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	2200      	movs	r2, #0
 8004778:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f82b 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00d      	beq.n	80047a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004796:	d103      	bne.n	80047a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800479e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e013      	b.n	80047cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047a4:	897b      	ldrh	r3, [r7, #10]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b6:	6a3a      	ldr	r2, [r7, #32]
 80047b8:	4906      	ldr	r1, [pc, #24]	@ (80047d4 <I2C_RequestMemoryRead+0x1cc>)
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 f886 	bl	80048cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	00010002 	.word	0x00010002

080047d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047e8:	e048      	b.n	800487c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f0:	d044      	beq.n	800487c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f2:	f7fe f959 	bl	8002aa8 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d302      	bcc.n	8004808 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d139      	bne.n	800487c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	0c1b      	lsrs	r3, r3, #16
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b01      	cmp	r3, #1
 8004810:	d10d      	bne.n	800482e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	43da      	mvns	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	4013      	ands	r3, r2
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	461a      	mov	r2, r3
 800482c:	e00c      	b.n	8004848 <I2C_WaitOnFlagUntilTimeout+0x70>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	43da      	mvns	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4013      	ands	r3, r2
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	bf0c      	ite	eq
 8004840:	2301      	moveq	r3, #1
 8004842:	2300      	movne	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	429a      	cmp	r2, r3
 800484c:	d116      	bne.n	800487c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004868:	f043 0220 	orr.w	r2, r3, #32
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e023      	b.n	80048c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	0c1b      	lsrs	r3, r3, #16
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b01      	cmp	r3, #1
 8004884:	d10d      	bne.n	80048a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	43da      	mvns	r2, r3
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4013      	ands	r3, r2
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	bf0c      	ite	eq
 8004898:	2301      	moveq	r3, #1
 800489a:	2300      	movne	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	461a      	mov	r2, r3
 80048a0:	e00c      	b.n	80048bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	43da      	mvns	r2, r3
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	4013      	ands	r3, r2
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bf0c      	ite	eq
 80048b4:	2301      	moveq	r3, #1
 80048b6:	2300      	movne	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	461a      	mov	r2, r3
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d093      	beq.n	80047ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048da:	e071      	b.n	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ea:	d123      	bne.n	8004934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004904:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004920:	f043 0204 	orr.w	r2, r3, #4
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e067      	b.n	8004a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d041      	beq.n	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493c:	f7fe f8b4 	bl	8002aa8 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	429a      	cmp	r2, r3
 800494a:	d302      	bcc.n	8004952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d136      	bne.n	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	0c1b      	lsrs	r3, r3, #16
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b01      	cmp	r3, #1
 800495a:	d10c      	bne.n	8004976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	43da      	mvns	r2, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4013      	ands	r3, r2
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	bf14      	ite	ne
 800496e:	2301      	movne	r3, #1
 8004970:	2300      	moveq	r3, #0
 8004972:	b2db      	uxtb	r3, r3
 8004974:	e00b      	b.n	800498e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	43da      	mvns	r2, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	4013      	ands	r3, r2
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	bf14      	ite	ne
 8004988:	2301      	movne	r3, #1
 800498a:	2300      	moveq	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d016      	beq.n	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ac:	f043 0220 	orr.w	r2, r3, #32
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e021      	b.n	8004a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	0c1b      	lsrs	r3, r3, #16
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d10c      	bne.n	80049e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	43da      	mvns	r2, r3
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4013      	ands	r3, r2
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	e00b      	b.n	80049fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	43da      	mvns	r2, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4013      	ands	r3, r2
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	bf14      	ite	ne
 80049f6:	2301      	movne	r3, #1
 80049f8:	2300      	moveq	r3, #0
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f47f af6d 	bne.w	80048dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a18:	e034      	b.n	8004a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f8e3 	bl	8004be6 <I2C_IsAcknowledgeFailed>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e034      	b.n	8004a94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a30:	d028      	beq.n	8004a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a32:	f7fe f839 	bl	8002aa8 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d302      	bcc.n	8004a48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d11d      	bne.n	8004a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a52:	2b80      	cmp	r3, #128	@ 0x80
 8004a54:	d016      	beq.n	8004a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a70:	f043 0220 	orr.w	r2, r3, #32
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e007      	b.n	8004a94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a8e:	2b80      	cmp	r3, #128	@ 0x80
 8004a90:	d1c3      	bne.n	8004a1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004aa8:	e034      	b.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f89b 	bl	8004be6 <I2C_IsAcknowledgeFailed>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e034      	b.n	8004b24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac0:	d028      	beq.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac2:	f7fd fff1 	bl	8002aa8 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d302      	bcc.n	8004ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d11d      	bne.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d016      	beq.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b00:	f043 0220 	orr.w	r2, r3, #32
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e007      	b.n	8004b24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d1c3      	bne.n	8004aaa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b38:	e049      	b.n	8004bce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d119      	bne.n	8004b7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0210 	mvn.w	r2, #16
 8004b50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e030      	b.n	8004bde <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7c:	f7fd ff94 	bl	8002aa8 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d302      	bcc.n	8004b92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d11d      	bne.n	8004bce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b9c:	2b40      	cmp	r3, #64	@ 0x40
 8004b9e:	d016      	beq.n	8004bce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bba:	f043 0220 	orr.w	r2, r3, #32
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e007      	b.n	8004bde <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd8:	2b40      	cmp	r3, #64	@ 0x40
 8004bda:	d1ae      	bne.n	8004b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bfc:	d11b      	bne.n	8004c36 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c06:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c22:	f043 0204 	orr.w	r2, r3, #4
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e128      	b.n	8004ea8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d109      	bne.n	8004c76 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a90      	ldr	r2, [pc, #576]	@ (8004eb0 <HAL_I2S_Init+0x26c>)
 8004c6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7fd fc59 	bl	8002528 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2202      	movs	r2, #2
 8004c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004c8c:	f023 030f 	bic.w	r3, r3, #15
 8004c90:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2202      	movs	r2, #2
 8004c98:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d060      	beq.n	8004d64 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d102      	bne.n	8004cb0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004caa:	2310      	movs	r3, #16
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	e001      	b.n	8004cb4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004cb0:	2320      	movs	r3, #32
 8004cb2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d802      	bhi.n	8004cc2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	f002 fc2a 	bl	800751c <HAL_RCCEx_GetPeriphCLKFreq>
 8004cc8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cd2:	d125      	bne.n	8004d20 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d010      	beq.n	8004cfe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	461a      	mov	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf8:	3305      	adds	r3, #5
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	e01f      	b.n	8004d3e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d08:	4613      	mov	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	461a      	mov	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1a:	3305      	adds	r3, #5
 8004d1c:	613b      	str	r3, [r7, #16]
 8004d1e:	e00e      	b.n	8004d3e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d28:	4613      	mov	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	461a      	mov	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3a:	3305      	adds	r3, #5
 8004d3c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	4a5c      	ldr	r2, [pc, #368]	@ (8004eb4 <HAL_I2S_Init+0x270>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	08db      	lsrs	r3, r3, #3
 8004d48:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	085b      	lsrs	r3, r3, #1
 8004d5a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	021b      	lsls	r3, r3, #8
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	e003      	b.n	8004d6c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004d64:	2302      	movs	r3, #2
 8004d66:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d902      	bls.n	8004d78 <HAL_I2S_Init+0x134>
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	2bff      	cmp	r3, #255	@ 0xff
 8004d76:	d907      	bls.n	8004d88 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d7c:	f043 0210 	orr.w	r2, r3, #16
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e08f      	b.n	8004ea8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	ea42 0103 	orr.w	r1, r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69fa      	ldr	r2, [r7, #28]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004da6:	f023 030f 	bic.w	r3, r3, #15
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6851      	ldr	r1, [r2, #4]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6892      	ldr	r2, [r2, #8]
 8004db2:	4311      	orrs	r1, r2
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	68d2      	ldr	r2, [r2, #12]
 8004db8:	4311      	orrs	r1, r2
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6992      	ldr	r2, [r2, #24]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dca:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d161      	bne.n	8004e98 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a38      	ldr	r2, [pc, #224]	@ (8004eb8 <HAL_I2S_Init+0x274>)
 8004dd8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a37      	ldr	r2, [pc, #220]	@ (8004ebc <HAL_I2S_Init+0x278>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d101      	bne.n	8004de8 <HAL_I2S_Init+0x1a4>
 8004de4:	4b36      	ldr	r3, [pc, #216]	@ (8004ec0 <HAL_I2S_Init+0x27c>)
 8004de6:	e001      	b.n	8004dec <HAL_I2S_Init+0x1a8>
 8004de8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	4932      	ldr	r1, [pc, #200]	@ (8004ebc <HAL_I2S_Init+0x278>)
 8004df4:	428a      	cmp	r2, r1
 8004df6:	d101      	bne.n	8004dfc <HAL_I2S_Init+0x1b8>
 8004df8:	4a31      	ldr	r2, [pc, #196]	@ (8004ec0 <HAL_I2S_Init+0x27c>)
 8004dfa:	e001      	b.n	8004e00 <HAL_I2S_Init+0x1bc>
 8004dfc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004e00:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004e04:	f023 030f 	bic.w	r3, r3, #15
 8004e08:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a2b      	ldr	r2, [pc, #172]	@ (8004ebc <HAL_I2S_Init+0x278>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d101      	bne.n	8004e18 <HAL_I2S_Init+0x1d4>
 8004e14:	4b2a      	ldr	r3, [pc, #168]	@ (8004ec0 <HAL_I2S_Init+0x27c>)
 8004e16:	e001      	b.n	8004e1c <HAL_I2S_Init+0x1d8>
 8004e18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a25      	ldr	r2, [pc, #148]	@ (8004ebc <HAL_I2S_Init+0x278>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d101      	bne.n	8004e2e <HAL_I2S_Init+0x1ea>
 8004e2a:	4b25      	ldr	r3, [pc, #148]	@ (8004ec0 <HAL_I2S_Init+0x27c>)
 8004e2c:	e001      	b.n	8004e32 <HAL_I2S_Init+0x1ee>
 8004e2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e3e:	d003      	beq.n	8004e48 <HAL_I2S_Init+0x204>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d103      	bne.n	8004e50 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004e48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	e001      	b.n	8004e54 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004e50:	2300      	movs	r3, #0
 8004e52:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e72:	4313      	orrs	r3, r2
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	897b      	ldrh	r3, [r7, #10]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004e80:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a0d      	ldr	r2, [pc, #52]	@ (8004ebc <HAL_I2S_Init+0x278>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d101      	bne.n	8004e90 <HAL_I2S_Init+0x24c>
 8004e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec0 <HAL_I2S_Init+0x27c>)
 8004e8e:	e001      	b.n	8004e94 <HAL_I2S_Init+0x250>
 8004e90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e94:	897a      	ldrh	r2, [r7, #10]
 8004e96:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3720      	adds	r7, #32
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	08004fbb 	.word	0x08004fbb
 8004eb4:	cccccccd 	.word	0xcccccccd
 8004eb8:	080050d1 	.word	0x080050d1
 8004ebc:	40003800 	.word	0x40003800
 8004ec0:	40003400 	.word	0x40003400

08004ec4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0c:	881a      	ldrh	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f18:	1c9a      	adds	r2, r3, #2
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10e      	bne.n	8004f54 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004f44:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7ff ffb8 	bl	8004ec4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004f54:	bf00      	nop
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6e:	b292      	uxth	r2, r2
 8004f70:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f76:	1c9a      	adds	r2, r3, #2
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10e      	bne.n	8004fb2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004fa2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7ff ff93 	bl	8004ed8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004fb2:	bf00      	nop
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b086      	sub	sp, #24
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d13a      	bne.n	800504c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d109      	bne.n	8004ff4 <I2S_IRQHandler+0x3a>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fea:	2b40      	cmp	r3, #64	@ 0x40
 8004fec:	d102      	bne.n	8004ff4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7ff ffb4 	bl	8004f5c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ffa:	2b40      	cmp	r3, #64	@ 0x40
 8004ffc:	d126      	bne.n	800504c <I2S_IRQHandler+0x92>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b20      	cmp	r3, #32
 800500a:	d11f      	bne.n	800504c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800501a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800501c:	2300      	movs	r3, #0
 800501e:	613b      	str	r3, [r7, #16]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	613b      	str	r3, [r7, #16]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	613b      	str	r3, [r7, #16]
 8005030:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503e:	f043 0202 	orr.w	r2, r3, #2
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7ff ff50 	bl	8004eec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b03      	cmp	r3, #3
 8005056:	d136      	bne.n	80050c6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b02      	cmp	r3, #2
 8005060:	d109      	bne.n	8005076 <I2S_IRQHandler+0xbc>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800506c:	2b80      	cmp	r3, #128	@ 0x80
 800506e:	d102      	bne.n	8005076 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff ff45 	bl	8004f00 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f003 0308 	and.w	r3, r3, #8
 800507c:	2b08      	cmp	r3, #8
 800507e:	d122      	bne.n	80050c6 <I2S_IRQHandler+0x10c>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b20      	cmp	r3, #32
 800508c:	d11b      	bne.n	80050c6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800509c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b8:	f043 0204 	orr.w	r2, r3, #4
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff ff13 	bl	8004eec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050c6:	bf00      	nop
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a92      	ldr	r2, [pc, #584]	@ (8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d101      	bne.n	80050ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80050ea:	4b92      	ldr	r3, [pc, #584]	@ (8005334 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050ec:	e001      	b.n	80050f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80050ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a8b      	ldr	r2, [pc, #556]	@ (8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d101      	bne.n	800510c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005108:	4b8a      	ldr	r3, [pc, #552]	@ (8005334 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800510a:	e001      	b.n	8005110 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800510c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800511c:	d004      	beq.n	8005128 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	f040 8099 	bne.w	800525a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b02      	cmp	r3, #2
 8005130:	d107      	bne.n	8005142 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f925 	bl	800538c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b01      	cmp	r3, #1
 800514a:	d107      	bne.n	800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f9c8 	bl	80054ec <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005162:	2b40      	cmp	r3, #64	@ 0x40
 8005164:	d13a      	bne.n	80051dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b00      	cmp	r3, #0
 800516e:	d035      	beq.n	80051dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a6e      	ldr	r2, [pc, #440]	@ (8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d101      	bne.n	800517e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800517a:	4b6e      	ldr	r3, [pc, #440]	@ (8005334 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800517c:	e001      	b.n	8005182 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800517e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4969      	ldr	r1, [pc, #420]	@ (8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800518a:	428b      	cmp	r3, r1
 800518c:	d101      	bne.n	8005192 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800518e:	4b69      	ldr	r3, [pc, #420]	@ (8005334 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005190:	e001      	b.n	8005196 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005192:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005196:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800519a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80051aa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80051ac:	2300      	movs	r3, #0
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ce:	f043 0202 	orr.w	r2, r3, #2
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7ff fe88 	bl	8004eec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b08      	cmp	r3, #8
 80051e4:	f040 80c3 	bne.w	800536e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f003 0320 	and.w	r3, r3, #32
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 80bd 	beq.w	800536e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005202:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a49      	ldr	r2, [pc, #292]	@ (8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d101      	bne.n	8005212 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800520e:	4b49      	ldr	r3, [pc, #292]	@ (8005334 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005210:	e001      	b.n	8005216 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005212:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4944      	ldr	r1, [pc, #272]	@ (8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800521e:	428b      	cmp	r3, r1
 8005220:	d101      	bne.n	8005226 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005222:	4b44      	ldr	r3, [pc, #272]	@ (8005334 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005224:	e001      	b.n	800522a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005226:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800522a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800522e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005230:	2300      	movs	r3, #0
 8005232:	60bb      	str	r3, [r7, #8]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	60bb      	str	r3, [r7, #8]
 800523c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800524a:	f043 0204 	orr.w	r2, r3, #4
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7ff fe4a 	bl	8004eec <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005258:	e089      	b.n	800536e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b02      	cmp	r3, #2
 8005262:	d107      	bne.n	8005274 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f8be 	bl	80053f0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b01      	cmp	r3, #1
 800527c:	d107      	bne.n	800528e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f8fd 	bl	8005488 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005294:	2b40      	cmp	r3, #64	@ 0x40
 8005296:	d12f      	bne.n	80052f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f003 0320 	and.w	r3, r3, #32
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d02a      	beq.n	80052f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80052b0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d101      	bne.n	80052c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80052bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005334 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80052be:	e001      	b.n	80052c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80052c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4919      	ldr	r1, [pc, #100]	@ (8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80052cc:	428b      	cmp	r3, r1
 80052ce:	d101      	bne.n	80052d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80052d0:	4b18      	ldr	r3, [pc, #96]	@ (8005334 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80052d2:	e001      	b.n	80052d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80052d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80052dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ea:	f043 0202 	orr.w	r2, r3, #2
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7ff fdfa 	bl	8004eec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d136      	bne.n	8005370 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b00      	cmp	r3, #0
 800530a:	d031      	beq.n	8005370 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a07      	ldr	r2, [pc, #28]	@ (8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d101      	bne.n	800531a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005316:	4b07      	ldr	r3, [pc, #28]	@ (8005334 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005318:	e001      	b.n	800531e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800531a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4902      	ldr	r1, [pc, #8]	@ (8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005326:	428b      	cmp	r3, r1
 8005328:	d106      	bne.n	8005338 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800532a:	4b02      	ldr	r3, [pc, #8]	@ (8005334 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800532c:	e006      	b.n	800533c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800532e:	bf00      	nop
 8005330:	40003800 	.word	0x40003800
 8005334:	40003400 	.word	0x40003400
 8005338:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800533c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005340:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005350:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535e:	f043 0204 	orr.w	r2, r3, #4
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff fdc0 	bl	8004eec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800536c:	e000      	b.n	8005370 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800536e:	bf00      	nop
}
 8005370:	bf00      	nop
 8005372:	3720      	adds	r7, #32
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005398:	1c99      	adds	r1, r3, #2
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6251      	str	r1, [r2, #36]	@ 0x24
 800539e:	881a      	ldrh	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d113      	bne.n	80053e6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80053cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d106      	bne.n	80053e6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7ff ffc9 	bl	8005378 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053e6:	bf00      	nop
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
	...

080053f0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fc:	1c99      	adds	r1, r3, #2
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6251      	str	r1, [r2, #36]	@ 0x24
 8005402:	8819      	ldrh	r1, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a1d      	ldr	r2, [pc, #116]	@ (8005480 <I2SEx_TxISR_I2SExt+0x90>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d101      	bne.n	8005412 <I2SEx_TxISR_I2SExt+0x22>
 800540e:	4b1d      	ldr	r3, [pc, #116]	@ (8005484 <I2SEx_TxISR_I2SExt+0x94>)
 8005410:	e001      	b.n	8005416 <I2SEx_TxISR_I2SExt+0x26>
 8005412:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005416:	460a      	mov	r2, r1
 8005418:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800541e:	b29b      	uxth	r3, r3
 8005420:	3b01      	subs	r3, #1
 8005422:	b29a      	uxth	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d121      	bne.n	8005476 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a12      	ldr	r2, [pc, #72]	@ (8005480 <I2SEx_TxISR_I2SExt+0x90>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d101      	bne.n	8005440 <I2SEx_TxISR_I2SExt+0x50>
 800543c:	4b11      	ldr	r3, [pc, #68]	@ (8005484 <I2SEx_TxISR_I2SExt+0x94>)
 800543e:	e001      	b.n	8005444 <I2SEx_TxISR_I2SExt+0x54>
 8005440:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	490d      	ldr	r1, [pc, #52]	@ (8005480 <I2SEx_TxISR_I2SExt+0x90>)
 800544c:	428b      	cmp	r3, r1
 800544e:	d101      	bne.n	8005454 <I2SEx_TxISR_I2SExt+0x64>
 8005450:	4b0c      	ldr	r3, [pc, #48]	@ (8005484 <I2SEx_TxISR_I2SExt+0x94>)
 8005452:	e001      	b.n	8005458 <I2SEx_TxISR_I2SExt+0x68>
 8005454:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005458:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800545c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005462:	b29b      	uxth	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d106      	bne.n	8005476 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff ff81 	bl	8005378 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005476:	bf00      	nop
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40003800 	.word	0x40003800
 8005484:	40003400 	.word	0x40003400

08005488 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68d8      	ldr	r0, [r3, #12]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549a:	1c99      	adds	r1, r3, #2
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80054a0:	b282      	uxth	r2, r0
 80054a2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d113      	bne.n	80054e4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80054ca:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d106      	bne.n	80054e4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7ff ff4a 	bl	8005378 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80054e4:	bf00      	nop
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a20      	ldr	r2, [pc, #128]	@ (800557c <I2SEx_RxISR_I2SExt+0x90>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d101      	bne.n	8005502 <I2SEx_RxISR_I2SExt+0x16>
 80054fe:	4b20      	ldr	r3, [pc, #128]	@ (8005580 <I2SEx_RxISR_I2SExt+0x94>)
 8005500:	e001      	b.n	8005506 <I2SEx_RxISR_I2SExt+0x1a>
 8005502:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005506:	68d8      	ldr	r0, [r3, #12]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550c:	1c99      	adds	r1, r3, #2
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005512:	b282      	uxth	r2, r0
 8005514:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005528:	b29b      	uxth	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d121      	bne.n	8005572 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a12      	ldr	r2, [pc, #72]	@ (800557c <I2SEx_RxISR_I2SExt+0x90>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d101      	bne.n	800553c <I2SEx_RxISR_I2SExt+0x50>
 8005538:	4b11      	ldr	r3, [pc, #68]	@ (8005580 <I2SEx_RxISR_I2SExt+0x94>)
 800553a:	e001      	b.n	8005540 <I2SEx_RxISR_I2SExt+0x54>
 800553c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	490d      	ldr	r1, [pc, #52]	@ (800557c <I2SEx_RxISR_I2SExt+0x90>)
 8005548:	428b      	cmp	r3, r1
 800554a:	d101      	bne.n	8005550 <I2SEx_RxISR_I2SExt+0x64>
 800554c:	4b0c      	ldr	r3, [pc, #48]	@ (8005580 <I2SEx_RxISR_I2SExt+0x94>)
 800554e:	e001      	b.n	8005554 <I2SEx_RxISR_I2SExt+0x68>
 8005550:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005554:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005558:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800555e:	b29b      	uxth	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	d106      	bne.n	8005572 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff ff03 	bl	8005378 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005572:	bf00      	nop
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	40003800 	.word	0x40003800
 8005580:	40003400 	.word	0x40003400

08005584 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af02      	add	r7, sp, #8
 800558a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e101      	b.n	800579a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d106      	bne.n	80055b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f006 f81b 	bl	800b5ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2203      	movs	r2, #3
 80055ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055c4:	d102      	bne.n	80055cc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f002 fc68 	bl	8007ea6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	7c1a      	ldrb	r2, [r3, #16]
 80055de:	f88d 2000 	strb.w	r2, [sp]
 80055e2:	3304      	adds	r3, #4
 80055e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055e6:	f002 fb47 	bl	8007c78 <USB_CoreInit>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d005      	beq.n	80055fc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e0ce      	b.n	800579a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2100      	movs	r1, #0
 8005602:	4618      	mov	r0, r3
 8005604:	f002 fc60 	bl	8007ec8 <USB_SetCurrentMode>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d005      	beq.n	800561a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2202      	movs	r2, #2
 8005612:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e0bf      	b.n	800579a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800561a:	2300      	movs	r3, #0
 800561c:	73fb      	strb	r3, [r7, #15]
 800561e:	e04a      	b.n	80056b6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005620:	7bfa      	ldrb	r2, [r7, #15]
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	4613      	mov	r3, r2
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	3315      	adds	r3, #21
 8005630:	2201      	movs	r2, #1
 8005632:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005634:	7bfa      	ldrb	r2, [r7, #15]
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	4613      	mov	r3, r2
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	3314      	adds	r3, #20
 8005644:	7bfa      	ldrb	r2, [r7, #15]
 8005646:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005648:	7bfa      	ldrb	r2, [r7, #15]
 800564a:	7bfb      	ldrb	r3, [r7, #15]
 800564c:	b298      	uxth	r0, r3
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	4613      	mov	r3, r2
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	4413      	add	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	332e      	adds	r3, #46	@ 0x2e
 800565c:	4602      	mov	r2, r0
 800565e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005660:	7bfa      	ldrb	r2, [r7, #15]
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	4613      	mov	r3, r2
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	4413      	add	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	3318      	adds	r3, #24
 8005670:	2200      	movs	r2, #0
 8005672:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005674:	7bfa      	ldrb	r2, [r7, #15]
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	4613      	mov	r3, r2
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	4413      	add	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	440b      	add	r3, r1
 8005682:	331c      	adds	r3, #28
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005688:	7bfa      	ldrb	r2, [r7, #15]
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	4613      	mov	r3, r2
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	3320      	adds	r3, #32
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800569c:	7bfa      	ldrb	r2, [r7, #15]
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	4613      	mov	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	4413      	add	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	3324      	adds	r3, #36	@ 0x24
 80056ac:	2200      	movs	r2, #0
 80056ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	3301      	adds	r3, #1
 80056b4:	73fb      	strb	r3, [r7, #15]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	791b      	ldrb	r3, [r3, #4]
 80056ba:	7bfa      	ldrb	r2, [r7, #15]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d3af      	bcc.n	8005620 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056c0:	2300      	movs	r3, #0
 80056c2:	73fb      	strb	r3, [r7, #15]
 80056c4:	e044      	b.n	8005750 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056c6:	7bfa      	ldrb	r2, [r7, #15]
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	4613      	mov	r3, r2
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	4413      	add	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	440b      	add	r3, r1
 80056d4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80056d8:	2200      	movs	r2, #0
 80056da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80056dc:	7bfa      	ldrb	r2, [r7, #15]
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	4613      	mov	r3, r2
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	4413      	add	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	440b      	add	r3, r1
 80056ea:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80056ee:	7bfa      	ldrb	r2, [r7, #15]
 80056f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80056f2:	7bfa      	ldrb	r2, [r7, #15]
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	4613      	mov	r3, r2
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	4413      	add	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	440b      	add	r3, r1
 8005700:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005704:	2200      	movs	r2, #0
 8005706:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005708:	7bfa      	ldrb	r2, [r7, #15]
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	4613      	mov	r3, r2
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	440b      	add	r3, r1
 8005716:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800571e:	7bfa      	ldrb	r2, [r7, #15]
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	4413      	add	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	440b      	add	r3, r1
 800572c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005734:	7bfa      	ldrb	r2, [r7, #15]
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	4613      	mov	r3, r2
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	4413      	add	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005746:	2200      	movs	r2, #0
 8005748:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	3301      	adds	r3, #1
 800574e:	73fb      	strb	r3, [r7, #15]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	791b      	ldrb	r3, [r3, #4]
 8005754:	7bfa      	ldrb	r2, [r7, #15]
 8005756:	429a      	cmp	r2, r3
 8005758:	d3b5      	bcc.n	80056c6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	7c1a      	ldrb	r2, [r3, #16]
 8005762:	f88d 2000 	strb.w	r2, [sp]
 8005766:	3304      	adds	r3, #4
 8005768:	cb0e      	ldmia	r3, {r1, r2, r3}
 800576a:	f002 fbf9 	bl	8007f60 <USB_DevInit>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e00c      	b.n	800579a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4618      	mov	r0, r3
 8005794:	f003 fc43 	bl	800901e <USB_DevDisconnect>

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_PCD_Start+0x1c>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e022      	b.n	8005804 <HAL_PCD_Start+0x62>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d009      	beq.n	80057e6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d105      	bne.n	80057e6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057de:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f002 fb4a 	bl	8007e84 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f003 fbf1 	bl	8008fdc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800580c:	b590      	push	{r4, r7, lr}
 800580e:	b08d      	sub	sp, #52	@ 0x34
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4618      	mov	r0, r3
 8005824:	f003 fcaf 	bl	8009186 <USB_GetMode>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	f040 848c 	bne.w	8006148 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f003 fc13 	bl	8009060 <USB_ReadInterrupts>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 8482 	beq.w	8006146 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	0a1b      	lsrs	r3, r3, #8
 800584c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4618      	mov	r0, r3
 800585c:	f003 fc00 	bl	8009060 <USB_ReadInterrupts>
 8005860:	4603      	mov	r3, r0
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b02      	cmp	r3, #2
 8005868:	d107      	bne.n	800587a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695a      	ldr	r2, [r3, #20]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f002 0202 	and.w	r2, r2, #2
 8005878:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4618      	mov	r0, r3
 8005880:	f003 fbee 	bl	8009060 <USB_ReadInterrupts>
 8005884:	4603      	mov	r3, r0
 8005886:	f003 0310 	and.w	r3, r3, #16
 800588a:	2b10      	cmp	r3, #16
 800588c:	d161      	bne.n	8005952 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	699a      	ldr	r2, [r3, #24]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0210 	bic.w	r2, r2, #16
 800589c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	f003 020f 	and.w	r2, r3, #15
 80058aa:	4613      	mov	r3, r2
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	4413      	add	r3, r2
 80058ba:	3304      	adds	r3, #4
 80058bc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	0c5b      	lsrs	r3, r3, #17
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d124      	bne.n	8005914 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80058d0:	4013      	ands	r3, r2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d035      	beq.n	8005942 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80058e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	6a38      	ldr	r0, [r7, #32]
 80058ea:	f003 fa25 	bl	8008d38 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	091b      	lsrs	r3, r3, #4
 80058f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058fa:	441a      	add	r2, r3
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	695a      	ldr	r2, [r3, #20]
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	091b      	lsrs	r3, r3, #4
 8005908:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800590c:	441a      	add	r2, r3
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	615a      	str	r2, [r3, #20]
 8005912:	e016      	b.n	8005942 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	0c5b      	lsrs	r3, r3, #17
 8005918:	f003 030f 	and.w	r3, r3, #15
 800591c:	2b06      	cmp	r3, #6
 800591e:	d110      	bne.n	8005942 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005926:	2208      	movs	r2, #8
 8005928:	4619      	mov	r1, r3
 800592a:	6a38      	ldr	r0, [r7, #32]
 800592c:	f003 fa04 	bl	8008d38 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	695a      	ldr	r2, [r3, #20]
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	091b      	lsrs	r3, r3, #4
 8005938:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800593c:	441a      	add	r2, r3
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	699a      	ldr	r2, [r3, #24]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f042 0210 	orr.w	r2, r2, #16
 8005950:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4618      	mov	r0, r3
 8005958:	f003 fb82 	bl	8009060 <USB_ReadInterrupts>
 800595c:	4603      	mov	r3, r0
 800595e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005962:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005966:	f040 80a7 	bne.w	8005ab8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4618      	mov	r0, r3
 8005974:	f003 fb87 	bl	8009086 <USB_ReadDevAllOutEpInterrupt>
 8005978:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800597a:	e099      	b.n	8005ab0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800597c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 808e 	beq.w	8005aa4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	4611      	mov	r1, r2
 8005992:	4618      	mov	r0, r3
 8005994:	f003 fbab 	bl	80090ee <USB_ReadDevOutEPInterrupt>
 8005998:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00c      	beq.n	80059be <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80059a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059b0:	461a      	mov	r2, r3
 80059b2:	2301      	movs	r3, #1
 80059b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80059b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fea3 	bl	8006704 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00c      	beq.n	80059e2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80059c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d4:	461a      	mov	r2, r3
 80059d6:	2308      	movs	r3, #8
 80059d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80059da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 ff79 	bl	80068d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f003 0310 	and.w	r3, r3, #16
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d008      	beq.n	80059fe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80059ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059f8:	461a      	mov	r2, r3
 80059fa:	2310      	movs	r3, #16
 80059fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d030      	beq.n	8005a6a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a10:	2b80      	cmp	r3, #128	@ 0x80
 8005a12:	d109      	bne.n	8005a28 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a26:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	4413      	add	r3, r2
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	78db      	ldrb	r3, [r3, #3]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d108      	bne.n	8005a58 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f005 fede 	bl	800b814 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a64:	461a      	mov	r2, r3
 8005a66:	2302      	movs	r3, #2
 8005a68:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f003 0320 	and.w	r3, r3, #32
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d008      	beq.n	8005a86 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a80:	461a      	mov	r2, r3
 8005a82:	2320      	movs	r3, #32
 8005a84:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d009      	beq.n	8005aa4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005aa2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aac:	085b      	lsrs	r3, r3, #1
 8005aae:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f47f af62 	bne.w	800597c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f003 facf 	bl	8009060 <USB_ReadInterrupts>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ac8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005acc:	f040 80db 	bne.w	8005c86 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f003 faf0 	bl	80090ba <USB_ReadDevAllInEpInterrupt>
 8005ada:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005ae0:	e0cd      	b.n	8005c7e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 80c2 	beq.w	8005c72 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af4:	b2d2      	uxtb	r2, r2
 8005af6:	4611      	mov	r1, r2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f003 fb16 	bl	800912a <USB_ReadDevInEPInterrupt>
 8005afe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d057      	beq.n	8005bba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0c:	f003 030f 	and.w	r3, r3, #15
 8005b10:	2201      	movs	r2, #1
 8005b12:	fa02 f303 	lsl.w	r3, r2, r3
 8005b16:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	43db      	mvns	r3, r3
 8005b24:	69f9      	ldr	r1, [r7, #28]
 8005b26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	799b      	ldrb	r3, [r3, #6]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d132      	bne.n	8005bae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	4413      	add	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	440b      	add	r3, r1
 8005b56:	3320      	adds	r3, #32
 8005b58:	6819      	ldr	r1, [r3, #0]
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b5e:	4613      	mov	r3, r2
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	4413      	add	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4403      	add	r3, r0
 8005b68:	331c      	adds	r3, #28
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4419      	add	r1, r3
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b72:	4613      	mov	r3, r2
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	4413      	add	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4403      	add	r3, r0
 8005b7c:	3320      	adds	r3, #32
 8005b7e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d113      	bne.n	8005bae <HAL_PCD_IRQHandler+0x3a2>
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	4413      	add	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	440b      	add	r3, r1
 8005b94:	3324      	adds	r3, #36	@ 0x24
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d108      	bne.n	8005bae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6818      	ldr	r0, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	2101      	movs	r1, #1
 8005baa:	f003 fb1d 	bl	80091e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f005 fda8 	bl	800b70a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f003 0308 	and.w	r3, r3, #8
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d008      	beq.n	8005bd6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	2308      	movs	r3, #8
 8005bd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f003 0310 	and.w	r3, r3, #16
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d008      	beq.n	8005bf2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bec:	461a      	mov	r2, r3
 8005bee:	2310      	movs	r3, #16
 8005bf0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c08:	461a      	mov	r2, r3
 8005c0a:	2340      	movs	r3, #64	@ 0x40
 8005c0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d023      	beq.n	8005c60 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005c18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c1a:	6a38      	ldr	r0, [r7, #32]
 8005c1c:	f002 fb04 	bl	8008228 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c22:	4613      	mov	r3, r2
 8005c24:	00db      	lsls	r3, r3, #3
 8005c26:	4413      	add	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	3310      	adds	r3, #16
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	4413      	add	r3, r2
 8005c30:	3304      	adds	r3, #4
 8005c32:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	78db      	ldrb	r3, [r3, #3]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d108      	bne.n	8005c4e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	4619      	mov	r1, r3
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f005 fdf5 	bl	800b838 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005c6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fcbd 	bl	80065ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c74:	3301      	adds	r3, #1
 8005c76:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c7a:	085b      	lsrs	r3, r3, #1
 8005c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f47f af2e 	bne.w	8005ae2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f003 f9e8 	bl	8009060 <USB_ReadInterrupts>
 8005c90:	4603      	mov	r3, r0
 8005c92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c9a:	d122      	bne.n	8005ce2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005caa:	f023 0301 	bic.w	r3, r3, #1
 8005cae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d108      	bne.n	8005ccc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fea3 	bl	8006a10 <HAL_PCDEx_LPM_Callback>
 8005cca:	e002      	b.n	8005cd2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f005 fd93 	bl	800b7f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	695a      	ldr	r2, [r3, #20]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005ce0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f003 f9ba 	bl	8009060 <USB_ReadInterrupts>
 8005cec:	4603      	mov	r3, r0
 8005cee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cf6:	d112      	bne.n	8005d1e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d102      	bne.n	8005d0e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f005 fd4f 	bl	800b7ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	695a      	ldr	r2, [r3, #20]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005d1c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f003 f99c 	bl	8009060 <USB_ReadInterrupts>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d32:	f040 80b7 	bne.w	8005ea4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d44:	f023 0301 	bic.w	r3, r3, #1
 8005d48:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2110      	movs	r1, #16
 8005d50:	4618      	mov	r0, r3
 8005d52:	f002 fa69 	bl	8008228 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d56:	2300      	movs	r3, #0
 8005d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d5a:	e046      	b.n	8005dea <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d6e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d80:	0151      	lsls	r1, r2, #5
 8005d82:	69fa      	ldr	r2, [r7, #28]
 8005d84:	440a      	add	r2, r1
 8005d86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d8e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005da2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005db4:	0151      	lsls	r1, r2, #5
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	440a      	add	r2, r1
 8005dba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005dc2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dd4:	0151      	lsls	r1, r2, #5
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	440a      	add	r2, r1
 8005dda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dde:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005de2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de6:	3301      	adds	r3, #1
 8005de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	791b      	ldrb	r3, [r3, #4]
 8005dee:	461a      	mov	r2, r3
 8005df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d3b2      	bcc.n	8005d5c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e04:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005e08:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	7bdb      	ldrb	r3, [r3, #15]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d016      	beq.n	8005e40 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e22:	f043 030b 	orr.w	r3, r3, #11
 8005e26:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e32:	69fa      	ldr	r2, [r7, #28]
 8005e34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e38:	f043 030b 	orr.w	r3, r3, #11
 8005e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005e3e:	e015      	b.n	8005e6c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e4e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005e52:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005e56:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e66:	f043 030b 	orr.w	r3, r3, #11
 8005e6a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69fa      	ldr	r2, [r7, #28]
 8005e76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e7a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005e7e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6818      	ldr	r0, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f003 f9aa 	bl	80091e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695a      	ldr	r2, [r3, #20]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005ea2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f003 f8d9 	bl	8009060 <USB_ReadInterrupts>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005eb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eb8:	d123      	bne.n	8005f02 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f003 f96f 	bl	80091a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f002 fa26 	bl	800831a <USB_GetDevSpeed>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681c      	ldr	r4, [r3, #0]
 8005eda:	f001 fa09 	bl	80072f0 <HAL_RCC_GetHCLKFreq>
 8005ede:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	f001 ff2a 	bl	8007d40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f005 fc34 	bl	800b75a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695a      	ldr	r2, [r3, #20]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005f00:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f003 f8aa 	bl	8009060 <USB_ReadInterrupts>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f003 0308 	and.w	r3, r3, #8
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d10a      	bne.n	8005f2c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f005 fc11 	bl	800b73e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	695a      	ldr	r2, [r3, #20]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f002 0208 	and.w	r2, r2, #8
 8005f2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f003 f895 	bl	8009060 <USB_ReadInterrupts>
 8005f36:	4603      	mov	r3, r0
 8005f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f3c:	2b80      	cmp	r3, #128	@ 0x80
 8005f3e:	d123      	bne.n	8005f88 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f50:	e014      	b.n	8005f7c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f56:	4613      	mov	r3, r2
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	440b      	add	r3, r1
 8005f60:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d105      	bne.n	8005f76 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 fb0a 	bl	800658a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f78:	3301      	adds	r3, #1
 8005f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	791b      	ldrb	r3, [r3, #4]
 8005f80:	461a      	mov	r2, r3
 8005f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d3e4      	bcc.n	8005f52 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f003 f867 	bl	8009060 <USB_ReadInterrupts>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f9c:	d13c      	bne.n	8006018 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fa2:	e02b      	b.n	8005ffc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fb8:	4613      	mov	r3, r2
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	4413      	add	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	3318      	adds	r3, #24
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d115      	bne.n	8005ff6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005fca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	da12      	bge.n	8005ff6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005fd0:	6879      	ldr	r1, [r7, #4]
 8005fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	4413      	add	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	440b      	add	r3, r1
 8005fde:	3317      	adds	r3, #23
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 faca 	bl	800658a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	791b      	ldrb	r3, [r3, #4]
 8006000:	461a      	mov	r2, r3
 8006002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006004:	4293      	cmp	r3, r2
 8006006:	d3cd      	bcc.n	8005fa4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695a      	ldr	r2, [r3, #20]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006016:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4618      	mov	r0, r3
 800601e:	f003 f81f 	bl	8009060 <USB_ReadInterrupts>
 8006022:	4603      	mov	r3, r0
 8006024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006028:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800602c:	d156      	bne.n	80060dc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800602e:	2301      	movs	r3, #1
 8006030:	627b      	str	r3, [r7, #36]	@ 0x24
 8006032:	e045      	b.n	80060c0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006048:	4613      	mov	r3, r2
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	4413      	add	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	440b      	add	r3, r1
 8006052:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d12e      	bne.n	80060ba <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800605c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800605e:	2b00      	cmp	r3, #0
 8006060:	da2b      	bge.n	80060ba <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800606e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006072:	429a      	cmp	r2, r3
 8006074:	d121      	bne.n	80060ba <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800607a:	4613      	mov	r3, r2
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	4413      	add	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	440b      	add	r3, r1
 8006084:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006088:	2201      	movs	r2, #1
 800608a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10a      	bne.n	80060ba <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	69fa      	ldr	r2, [r7, #28]
 80060ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060b6:	6053      	str	r3, [r2, #4]
            break;
 80060b8:	e008      	b.n	80060cc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060bc:	3301      	adds	r3, #1
 80060be:	627b      	str	r3, [r7, #36]	@ 0x24
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	791b      	ldrb	r3, [r3, #4]
 80060c4:	461a      	mov	r2, r3
 80060c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d3b3      	bcc.n	8006034 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695a      	ldr	r2, [r3, #20]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80060da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f002 ffbd 	bl	8009060 <USB_ReadInterrupts>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80060ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060f0:	d10a      	bne.n	8006108 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f005 fbb2 	bl	800b85c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	695a      	ldr	r2, [r3, #20]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006106:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4618      	mov	r0, r3
 800610e:	f002 ffa7 	bl	8009060 <USB_ReadInterrupts>
 8006112:	4603      	mov	r3, r0
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b04      	cmp	r3, #4
 800611a:	d115      	bne.n	8006148 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f005 fba2 	bl	800b878 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6859      	ldr	r1, [r3, #4]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	430a      	orrs	r2, r1
 8006142:	605a      	str	r2, [r3, #4]
 8006144:	e000      	b.n	8006148 <HAL_PCD_IRQHandler+0x93c>
      return;
 8006146:	bf00      	nop
    }
  }
}
 8006148:	3734      	adds	r7, #52	@ 0x34
 800614a:	46bd      	mov	sp, r7
 800614c:	bd90      	pop	{r4, r7, pc}

0800614e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b082      	sub	sp, #8
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	460b      	mov	r3, r1
 8006158:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006160:	2b01      	cmp	r3, #1
 8006162:	d101      	bne.n	8006168 <HAL_PCD_SetAddress+0x1a>
 8006164:	2302      	movs	r3, #2
 8006166:	e012      	b.n	800618e <HAL_PCD_SetAddress+0x40>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	78fa      	ldrb	r2, [r7, #3]
 8006174:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	78fa      	ldrb	r2, [r7, #3]
 800617c:	4611      	mov	r1, r2
 800617e:	4618      	mov	r0, r3
 8006180:	f002 ff06 	bl	8008f90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b084      	sub	sp, #16
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	4608      	mov	r0, r1
 80061a0:	4611      	mov	r1, r2
 80061a2:	461a      	mov	r2, r3
 80061a4:	4603      	mov	r3, r0
 80061a6:	70fb      	strb	r3, [r7, #3]
 80061a8:	460b      	mov	r3, r1
 80061aa:	803b      	strh	r3, [r7, #0]
 80061ac:	4613      	mov	r3, r2
 80061ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80061b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	da0f      	bge.n	80061dc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061bc:	78fb      	ldrb	r3, [r7, #3]
 80061be:	f003 020f 	and.w	r2, r3, #15
 80061c2:	4613      	mov	r3, r2
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	4413      	add	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	3310      	adds	r3, #16
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	4413      	add	r3, r2
 80061d0:	3304      	adds	r3, #4
 80061d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2201      	movs	r2, #1
 80061d8:	705a      	strb	r2, [r3, #1]
 80061da:	e00f      	b.n	80061fc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061dc:	78fb      	ldrb	r3, [r7, #3]
 80061de:	f003 020f 	and.w	r2, r3, #15
 80061e2:	4613      	mov	r3, r2
 80061e4:	00db      	lsls	r3, r3, #3
 80061e6:	4413      	add	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	4413      	add	r3, r2
 80061f2:	3304      	adds	r3, #4
 80061f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80061fc:	78fb      	ldrb	r3, [r7, #3]
 80061fe:	f003 030f 	and.w	r3, r3, #15
 8006202:	b2da      	uxtb	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006208:	883b      	ldrh	r3, [r7, #0]
 800620a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	78ba      	ldrb	r2, [r7, #2]
 8006216:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	785b      	ldrb	r3, [r3, #1]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d004      	beq.n	800622a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	461a      	mov	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800622a:	78bb      	ldrb	r3, [r7, #2]
 800622c:	2b02      	cmp	r3, #2
 800622e:	d102      	bne.n	8006236 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800623c:	2b01      	cmp	r3, #1
 800623e:	d101      	bne.n	8006244 <HAL_PCD_EP_Open+0xae>
 8006240:	2302      	movs	r3, #2
 8006242:	e00e      	b.n	8006262 <HAL_PCD_EP_Open+0xcc>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68f9      	ldr	r1, [r7, #12]
 8006252:	4618      	mov	r0, r3
 8006254:	f002 f886 	bl	8008364 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006260:	7afb      	ldrb	r3, [r7, #11]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b084      	sub	sp, #16
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	460b      	mov	r3, r1
 8006274:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006276:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800627a:	2b00      	cmp	r3, #0
 800627c:	da0f      	bge.n	800629e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	f003 020f 	and.w	r2, r3, #15
 8006284:	4613      	mov	r3, r2
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	4413      	add	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	3310      	adds	r3, #16
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	4413      	add	r3, r2
 8006292:	3304      	adds	r3, #4
 8006294:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	705a      	strb	r2, [r3, #1]
 800629c:	e00f      	b.n	80062be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800629e:	78fb      	ldrb	r3, [r7, #3]
 80062a0:	f003 020f 	and.w	r2, r3, #15
 80062a4:	4613      	mov	r3, r2
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	4413      	add	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	4413      	add	r3, r2
 80062b4:	3304      	adds	r3, #4
 80062b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	f003 030f 	and.w	r3, r3, #15
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d101      	bne.n	80062d8 <HAL_PCD_EP_Close+0x6e>
 80062d4:	2302      	movs	r3, #2
 80062d6:	e00e      	b.n	80062f6 <HAL_PCD_EP_Close+0x8c>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68f9      	ldr	r1, [r7, #12]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f002 f8c4 	bl	8008474 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b086      	sub	sp, #24
 8006302:	af00      	add	r7, sp, #0
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
 800630a:	460b      	mov	r3, r1
 800630c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800630e:	7afb      	ldrb	r3, [r7, #11]
 8006310:	f003 020f 	and.w	r2, r3, #15
 8006314:	4613      	mov	r3, r2
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	4413      	add	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4413      	add	r3, r2
 8006324:	3304      	adds	r3, #4
 8006326:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2200      	movs	r2, #0
 8006338:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2200      	movs	r2, #0
 800633e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006340:	7afb      	ldrb	r3, [r7, #11]
 8006342:	f003 030f 	and.w	r3, r3, #15
 8006346:	b2da      	uxtb	r2, r3
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	799b      	ldrb	r3, [r3, #6]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d102      	bne.n	800635a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	799b      	ldrb	r3, [r3, #6]
 8006362:	461a      	mov	r2, r3
 8006364:	6979      	ldr	r1, [r7, #20]
 8006366:	f002 f961 	bl	800862c <USB_EPStartXfer>

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	f003 020f 	and.w	r2, r3, #15
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	4613      	mov	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	440b      	add	r3, r1
 8006392:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006396:	681b      	ldr	r3, [r3, #0]
}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	607a      	str	r2, [r7, #4]
 80063ae:	603b      	str	r3, [r7, #0]
 80063b0:	460b      	mov	r3, r1
 80063b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063b4:	7afb      	ldrb	r3, [r7, #11]
 80063b6:	f003 020f 	and.w	r2, r3, #15
 80063ba:	4613      	mov	r3, r2
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	4413      	add	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	3310      	adds	r3, #16
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4413      	add	r3, r2
 80063c8:	3304      	adds	r3, #4
 80063ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2200      	movs	r2, #0
 80063dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2201      	movs	r2, #1
 80063e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063e4:	7afb      	ldrb	r3, [r7, #11]
 80063e6:	f003 030f 	and.w	r3, r3, #15
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	799b      	ldrb	r3, [r3, #6]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d102      	bne.n	80063fe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	799b      	ldrb	r3, [r3, #6]
 8006406:	461a      	mov	r2, r3
 8006408:	6979      	ldr	r1, [r7, #20]
 800640a:	f002 f90f 	bl	800862c <USB_EPStartXfer>

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3718      	adds	r7, #24
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	460b      	mov	r3, r1
 8006422:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006424:	78fb      	ldrb	r3, [r7, #3]
 8006426:	f003 030f 	and.w	r3, r3, #15
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	7912      	ldrb	r2, [r2, #4]
 800642e:	4293      	cmp	r3, r2
 8006430:	d901      	bls.n	8006436 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e04f      	b.n	80064d6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006436:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800643a:	2b00      	cmp	r3, #0
 800643c:	da0f      	bge.n	800645e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800643e:	78fb      	ldrb	r3, [r7, #3]
 8006440:	f003 020f 	and.w	r2, r3, #15
 8006444:	4613      	mov	r3, r2
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	4413      	add	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	3310      	adds	r3, #16
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	4413      	add	r3, r2
 8006452:	3304      	adds	r3, #4
 8006454:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2201      	movs	r2, #1
 800645a:	705a      	strb	r2, [r3, #1]
 800645c:	e00d      	b.n	800647a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800645e:	78fa      	ldrb	r2, [r7, #3]
 8006460:	4613      	mov	r3, r2
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	4413      	add	r3, r2
 8006470:	3304      	adds	r3, #4
 8006472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2201      	movs	r2, #1
 800647e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	f003 030f 	and.w	r3, r3, #15
 8006486:	b2da      	uxtb	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006492:	2b01      	cmp	r3, #1
 8006494:	d101      	bne.n	800649a <HAL_PCD_EP_SetStall+0x82>
 8006496:	2302      	movs	r3, #2
 8006498:	e01d      	b.n	80064d6 <HAL_PCD_EP_SetStall+0xbe>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68f9      	ldr	r1, [r7, #12]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f002 fc9d 	bl	8008de8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80064ae:	78fb      	ldrb	r3, [r7, #3]
 80064b0:	f003 030f 	and.w	r3, r3, #15
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d109      	bne.n	80064cc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6818      	ldr	r0, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	7999      	ldrb	r1, [r3, #6]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80064c6:	461a      	mov	r2, r3
 80064c8:	f002 fe8e 	bl	80091e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	460b      	mov	r3, r1
 80064e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80064ea:	78fb      	ldrb	r3, [r7, #3]
 80064ec:	f003 030f 	and.w	r3, r3, #15
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	7912      	ldrb	r2, [r2, #4]
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d901      	bls.n	80064fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e042      	b.n	8006582 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80064fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006500:	2b00      	cmp	r3, #0
 8006502:	da0f      	bge.n	8006524 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006504:	78fb      	ldrb	r3, [r7, #3]
 8006506:	f003 020f 	and.w	r2, r3, #15
 800650a:	4613      	mov	r3, r2
 800650c:	00db      	lsls	r3, r3, #3
 800650e:	4413      	add	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	3310      	adds	r3, #16
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	4413      	add	r3, r2
 8006518:	3304      	adds	r3, #4
 800651a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2201      	movs	r2, #1
 8006520:	705a      	strb	r2, [r3, #1]
 8006522:	e00f      	b.n	8006544 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006524:	78fb      	ldrb	r3, [r7, #3]
 8006526:	f003 020f 	and.w	r2, r3, #15
 800652a:	4613      	mov	r3, r2
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	4413      	add	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	4413      	add	r3, r2
 800653a:	3304      	adds	r3, #4
 800653c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800654a:	78fb      	ldrb	r3, [r7, #3]
 800654c:	f003 030f 	and.w	r3, r3, #15
 8006550:	b2da      	uxtb	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800655c:	2b01      	cmp	r3, #1
 800655e:	d101      	bne.n	8006564 <HAL_PCD_EP_ClrStall+0x86>
 8006560:	2302      	movs	r3, #2
 8006562:	e00e      	b.n	8006582 <HAL_PCD_EP_ClrStall+0xa4>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68f9      	ldr	r1, [r7, #12]
 8006572:	4618      	mov	r0, r3
 8006574:	f002 fca6 	bl	8008ec4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	460b      	mov	r3, r1
 8006594:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006596:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800659a:	2b00      	cmp	r3, #0
 800659c:	da0c      	bge.n	80065b8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800659e:	78fb      	ldrb	r3, [r7, #3]
 80065a0:	f003 020f 	and.w	r2, r3, #15
 80065a4:	4613      	mov	r3, r2
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	4413      	add	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	3310      	adds	r3, #16
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	4413      	add	r3, r2
 80065b2:	3304      	adds	r3, #4
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	e00c      	b.n	80065d2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	f003 020f 	and.w	r2, r3, #15
 80065be:	4613      	mov	r3, r2
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	4413      	add	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	4413      	add	r3, r2
 80065ce:	3304      	adds	r3, #4
 80065d0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68f9      	ldr	r1, [r7, #12]
 80065d8:	4618      	mov	r0, r3
 80065da:	f002 fac5 	bl	8008b68 <USB_EPStopXfer>
 80065de:	4603      	mov	r3, r0
 80065e0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80065e2:	7afb      	ldrb	r3, [r7, #11]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08a      	sub	sp, #40	@ 0x28
 80065f0:	af02      	add	r7, sp, #8
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	4613      	mov	r3, r2
 8006604:	00db      	lsls	r3, r3, #3
 8006606:	4413      	add	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	3310      	adds	r3, #16
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	4413      	add	r3, r2
 8006610:	3304      	adds	r3, #4
 8006612:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	695a      	ldr	r2, [r3, #20]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	429a      	cmp	r2, r3
 800661e:	d901      	bls.n	8006624 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e06b      	b.n	80066fc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	691a      	ldr	r2, [r3, #16]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	69fa      	ldr	r2, [r7, #28]
 8006636:	429a      	cmp	r2, r3
 8006638:	d902      	bls.n	8006640 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	3303      	adds	r3, #3
 8006644:	089b      	lsrs	r3, r3, #2
 8006646:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006648:	e02a      	b.n	80066a0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	691a      	ldr	r2, [r3, #16]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	69fa      	ldr	r2, [r7, #28]
 800665c:	429a      	cmp	r2, r3
 800665e:	d902      	bls.n	8006666 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	3303      	adds	r3, #3
 800666a:	089b      	lsrs	r3, r3, #2
 800666c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	68d9      	ldr	r1, [r3, #12]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	b2da      	uxtb	r2, r3
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	4603      	mov	r3, r0
 8006682:	6978      	ldr	r0, [r7, #20]
 8006684:	f002 fb1a 	bl	8008cbc <USB_WritePacket>

    ep->xfer_buff  += len;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	441a      	add	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	695a      	ldr	r2, [r3, #20]
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	441a      	add	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d809      	bhi.n	80066ca <PCD_WriteEmptyTxFifo+0xde>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	695a      	ldr	r2, [r3, #20]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066be:	429a      	cmp	r2, r3
 80066c0:	d203      	bcs.n	80066ca <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1bf      	bne.n	800664a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	691a      	ldr	r2, [r3, #16]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d811      	bhi.n	80066fa <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	f003 030f 	and.w	r3, r3, #15
 80066dc:	2201      	movs	r2, #1
 80066de:	fa02 f303 	lsl.w	r3, r2, r3
 80066e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	43db      	mvns	r3, r3
 80066f0:	6939      	ldr	r1, [r7, #16]
 80066f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066f6:	4013      	ands	r3, r2
 80066f8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3720      	adds	r7, #32
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	333c      	adds	r3, #60	@ 0x3c
 800671c:	3304      	adds	r3, #4
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	4413      	add	r3, r2
 800672a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	799b      	ldrb	r3, [r3, #6]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d17b      	bne.n	8006832 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f003 0308 	and.w	r3, r3, #8
 8006740:	2b00      	cmp	r3, #0
 8006742:	d015      	beq.n	8006770 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	4a61      	ldr	r2, [pc, #388]	@ (80068cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006748:	4293      	cmp	r3, r2
 800674a:	f240 80b9 	bls.w	80068c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 80b3 	beq.w	80068c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006766:	461a      	mov	r2, r3
 8006768:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800676c:	6093      	str	r3, [r2, #8]
 800676e:	e0a7      	b.n	80068c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b00      	cmp	r3, #0
 8006778:	d009      	beq.n	800678e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	4413      	add	r3, r2
 8006782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006786:	461a      	mov	r2, r3
 8006788:	2320      	movs	r3, #32
 800678a:	6093      	str	r3, [r2, #8]
 800678c:	e098      	b.n	80068c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006794:	2b00      	cmp	r3, #0
 8006796:	f040 8093 	bne.w	80068c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	4a4b      	ldr	r2, [pc, #300]	@ (80068cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d90f      	bls.n	80067c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00a      	beq.n	80067c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067b8:	461a      	mov	r2, r3
 80067ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067be:	6093      	str	r3, [r2, #8]
 80067c0:	e07e      	b.n	80068c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	4613      	mov	r3, r2
 80067c6:	00db      	lsls	r3, r3, #3
 80067c8:	4413      	add	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	4413      	add	r3, r2
 80067d4:	3304      	adds	r3, #4
 80067d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6a1a      	ldr	r2, [r3, #32]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	0159      	lsls	r1, r3, #5
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	440b      	add	r3, r1
 80067e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067ee:	1ad2      	subs	r2, r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d114      	bne.n	8006824 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d109      	bne.n	8006816 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6818      	ldr	r0, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800680c:	461a      	mov	r2, r3
 800680e:	2101      	movs	r1, #1
 8006810:	f002 fcea 	bl	80091e8 <USB_EP0_OutStart>
 8006814:	e006      	b.n	8006824 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	68da      	ldr	r2, [r3, #12]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	441a      	add	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	b2db      	uxtb	r3, r3
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f004 ff52 	bl	800b6d4 <HAL_PCD_DataOutStageCallback>
 8006830:	e046      	b.n	80068c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	4a26      	ldr	r2, [pc, #152]	@ (80068d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d124      	bne.n	8006884 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00a      	beq.n	800685a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006850:	461a      	mov	r2, r3
 8006852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006856:	6093      	str	r3, [r2, #8]
 8006858:	e032      	b.n	80068c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f003 0320 	and.w	r3, r3, #32
 8006860:	2b00      	cmp	r3, #0
 8006862:	d008      	beq.n	8006876 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006870:	461a      	mov	r2, r3
 8006872:	2320      	movs	r3, #32
 8006874:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	b2db      	uxtb	r3, r3
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f004 ff29 	bl	800b6d4 <HAL_PCD_DataOutStageCallback>
 8006882:	e01d      	b.n	80068c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d114      	bne.n	80068b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800688a:	6879      	ldr	r1, [r7, #4]
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	4613      	mov	r3, r2
 8006890:	00db      	lsls	r3, r3, #3
 8006892:	4413      	add	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	440b      	add	r3, r1
 8006898:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d108      	bne.n	80068b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6818      	ldr	r0, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80068ac:	461a      	mov	r2, r3
 80068ae:	2100      	movs	r1, #0
 80068b0:	f002 fc9a 	bl	80091e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f004 ff0a 	bl	800b6d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3720      	adds	r7, #32
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	4f54300a 	.word	0x4f54300a
 80068d0:	4f54310a 	.word	0x4f54310a

080068d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	333c      	adds	r3, #60	@ 0x3c
 80068ec:	3304      	adds	r3, #4
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4a15      	ldr	r2, [pc, #84]	@ (800695c <PCD_EP_OutSetupPacket_int+0x88>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d90e      	bls.n	8006928 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006910:	2b00      	cmp	r3, #0
 8006912:	d009      	beq.n	8006928 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006920:	461a      	mov	r2, r3
 8006922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006926:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f004 fec1 	bl	800b6b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4a0a      	ldr	r2, [pc, #40]	@ (800695c <PCD_EP_OutSetupPacket_int+0x88>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d90c      	bls.n	8006950 <PCD_EP_OutSetupPacket_int+0x7c>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	799b      	ldrb	r3, [r3, #6]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d108      	bne.n	8006950 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6818      	ldr	r0, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006948:	461a      	mov	r2, r3
 800694a:	2101      	movs	r1, #1
 800694c:	f002 fc4c 	bl	80091e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3718      	adds	r7, #24
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	4f54300a 	.word	0x4f54300a

08006960 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	460b      	mov	r3, r1
 800696a:	70fb      	strb	r3, [r7, #3]
 800696c:	4613      	mov	r3, r2
 800696e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006976:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006978:	78fb      	ldrb	r3, [r7, #3]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d107      	bne.n	800698e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800697e:	883b      	ldrh	r3, [r7, #0]
 8006980:	0419      	lsls	r1, r3, #16
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	430a      	orrs	r2, r1
 800698a:	629a      	str	r2, [r3, #40]	@ 0x28
 800698c:	e028      	b.n	80069e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006994:	0c1b      	lsrs	r3, r3, #16
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	4413      	add	r3, r2
 800699a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800699c:	2300      	movs	r3, #0
 800699e:	73fb      	strb	r3, [r7, #15]
 80069a0:	e00d      	b.n	80069be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
 80069a8:	3340      	adds	r3, #64	@ 0x40
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	0c1b      	lsrs	r3, r3, #16
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	4413      	add	r3, r2
 80069b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	3301      	adds	r3, #1
 80069bc:	73fb      	strb	r3, [r7, #15]
 80069be:	7bfa      	ldrb	r2, [r7, #15]
 80069c0:	78fb      	ldrb	r3, [r7, #3]
 80069c2:	3b01      	subs	r3, #1
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d3ec      	bcc.n	80069a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80069c8:	883b      	ldrh	r3, [r7, #0]
 80069ca:	0418      	lsls	r0, r3, #16
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6819      	ldr	r1, [r3, #0]
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	4302      	orrs	r2, r0
 80069d8:	3340      	adds	r3, #64	@ 0x40
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	440b      	add	r3, r1
 80069de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	460b      	mov	r3, r1
 80069f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	887a      	ldrh	r2, [r7, #2]
 8006a00:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e267      	b.n	8006f0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d075      	beq.n	8006b32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006a46:	4b88      	ldr	r3, [pc, #544]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f003 030c 	and.w	r3, r3, #12
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	d00c      	beq.n	8006a6c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a52:	4b85      	ldr	r3, [pc, #532]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006a5a:	2b08      	cmp	r3, #8
 8006a5c:	d112      	bne.n	8006a84 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a5e:	4b82      	ldr	r3, [pc, #520]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a6a:	d10b      	bne.n	8006a84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a6c:	4b7e      	ldr	r3, [pc, #504]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d05b      	beq.n	8006b30 <HAL_RCC_OscConfig+0x108>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d157      	bne.n	8006b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e242      	b.n	8006f0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a8c:	d106      	bne.n	8006a9c <HAL_RCC_OscConfig+0x74>
 8006a8e:	4b76      	ldr	r3, [pc, #472]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a75      	ldr	r2, [pc, #468]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a98:	6013      	str	r3, [r2, #0]
 8006a9a:	e01d      	b.n	8006ad8 <HAL_RCC_OscConfig+0xb0>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006aa4:	d10c      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x98>
 8006aa6:	4b70      	ldr	r3, [pc, #448]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a6f      	ldr	r2, [pc, #444]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ab0:	6013      	str	r3, [r2, #0]
 8006ab2:	4b6d      	ldr	r3, [pc, #436]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a6c      	ldr	r2, [pc, #432]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006abc:	6013      	str	r3, [r2, #0]
 8006abe:	e00b      	b.n	8006ad8 <HAL_RCC_OscConfig+0xb0>
 8006ac0:	4b69      	ldr	r3, [pc, #420]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a68      	ldr	r2, [pc, #416]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	4b66      	ldr	r3, [pc, #408]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a65      	ldr	r2, [pc, #404]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d013      	beq.n	8006b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae0:	f7fb ffe2 	bl	8002aa8 <HAL_GetTick>
 8006ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ae6:	e008      	b.n	8006afa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ae8:	f7fb ffde 	bl	8002aa8 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b64      	cmp	r3, #100	@ 0x64
 8006af4:	d901      	bls.n	8006afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e207      	b.n	8006f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006afa:	4b5b      	ldr	r3, [pc, #364]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0f0      	beq.n	8006ae8 <HAL_RCC_OscConfig+0xc0>
 8006b06:	e014      	b.n	8006b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b08:	f7fb ffce 	bl	8002aa8 <HAL_GetTick>
 8006b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b0e:	e008      	b.n	8006b22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b10:	f7fb ffca 	bl	8002aa8 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b64      	cmp	r3, #100	@ 0x64
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e1f3      	b.n	8006f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b22:	4b51      	ldr	r3, [pc, #324]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1f0      	bne.n	8006b10 <HAL_RCC_OscConfig+0xe8>
 8006b2e:	e000      	b.n	8006b32 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d063      	beq.n	8006c06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f003 030c 	and.w	r3, r3, #12
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00b      	beq.n	8006b62 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b4a:	4b47      	ldr	r3, [pc, #284]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006b52:	2b08      	cmp	r3, #8
 8006b54:	d11c      	bne.n	8006b90 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b56:	4b44      	ldr	r3, [pc, #272]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d116      	bne.n	8006b90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b62:	4b41      	ldr	r3, [pc, #260]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d005      	beq.n	8006b7a <HAL_RCC_OscConfig+0x152>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d001      	beq.n	8006b7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e1c7      	b.n	8006f0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	4937      	ldr	r1, [pc, #220]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b8e:	e03a      	b.n	8006c06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d020      	beq.n	8006bda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b98:	4b34      	ldr	r3, [pc, #208]	@ (8006c6c <HAL_RCC_OscConfig+0x244>)
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9e:	f7fb ff83 	bl	8002aa8 <HAL_GetTick>
 8006ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ba4:	e008      	b.n	8006bb8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ba6:	f7fb ff7f 	bl	8002aa8 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d901      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e1a8      	b.n	8006f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d0f0      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bc4:	4b28      	ldr	r3, [pc, #160]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	00db      	lsls	r3, r3, #3
 8006bd2:	4925      	ldr	r1, [pc, #148]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	600b      	str	r3, [r1, #0]
 8006bd8:	e015      	b.n	8006c06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bda:	4b24      	ldr	r3, [pc, #144]	@ (8006c6c <HAL_RCC_OscConfig+0x244>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be0:	f7fb ff62 	bl	8002aa8 <HAL_GetTick>
 8006be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006be6:	e008      	b.n	8006bfa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006be8:	f7fb ff5e 	bl	8002aa8 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e187      	b.n	8006f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1f0      	bne.n	8006be8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0308 	and.w	r3, r3, #8
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d036      	beq.n	8006c80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d016      	beq.n	8006c48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c1a:	4b15      	ldr	r3, [pc, #84]	@ (8006c70 <HAL_RCC_OscConfig+0x248>)
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c20:	f7fb ff42 	bl	8002aa8 <HAL_GetTick>
 8006c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c26:	e008      	b.n	8006c3a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c28:	f7fb ff3e 	bl	8002aa8 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e167      	b.n	8006f0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c68 <HAL_RCC_OscConfig+0x240>)
 8006c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0f0      	beq.n	8006c28 <HAL_RCC_OscConfig+0x200>
 8006c46:	e01b      	b.n	8006c80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c48:	4b09      	ldr	r3, [pc, #36]	@ (8006c70 <HAL_RCC_OscConfig+0x248>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c4e:	f7fb ff2b 	bl	8002aa8 <HAL_GetTick>
 8006c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c54:	e00e      	b.n	8006c74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c56:	f7fb ff27 	bl	8002aa8 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d907      	bls.n	8006c74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e150      	b.n	8006f0a <HAL_RCC_OscConfig+0x4e2>
 8006c68:	40023800 	.word	0x40023800
 8006c6c:	42470000 	.word	0x42470000
 8006c70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c74:	4b88      	ldr	r3, [pc, #544]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1ea      	bne.n	8006c56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 8097 	beq.w	8006dbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c92:	4b81      	ldr	r3, [pc, #516]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10f      	bne.n	8006cbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	60bb      	str	r3, [r7, #8]
 8006ca2:	4b7d      	ldr	r3, [pc, #500]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca6:	4a7c      	ldr	r2, [pc, #496]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8006cae:	4b7a      	ldr	r3, [pc, #488]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cb6:	60bb      	str	r3, [r7, #8]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cbe:	4b77      	ldr	r3, [pc, #476]	@ (8006e9c <HAL_RCC_OscConfig+0x474>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d118      	bne.n	8006cfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cca:	4b74      	ldr	r3, [pc, #464]	@ (8006e9c <HAL_RCC_OscConfig+0x474>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a73      	ldr	r2, [pc, #460]	@ (8006e9c <HAL_RCC_OscConfig+0x474>)
 8006cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cd6:	f7fb fee7 	bl	8002aa8 <HAL_GetTick>
 8006cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cdc:	e008      	b.n	8006cf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cde:	f7fb fee3 	bl	8002aa8 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d901      	bls.n	8006cf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e10c      	b.n	8006f0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cf0:	4b6a      	ldr	r3, [pc, #424]	@ (8006e9c <HAL_RCC_OscConfig+0x474>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d0f0      	beq.n	8006cde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d106      	bne.n	8006d12 <HAL_RCC_OscConfig+0x2ea>
 8006d04:	4b64      	ldr	r3, [pc, #400]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d08:	4a63      	ldr	r2, [pc, #396]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006d0a:	f043 0301 	orr.w	r3, r3, #1
 8006d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d10:	e01c      	b.n	8006d4c <HAL_RCC_OscConfig+0x324>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	2b05      	cmp	r3, #5
 8006d18:	d10c      	bne.n	8006d34 <HAL_RCC_OscConfig+0x30c>
 8006d1a:	4b5f      	ldr	r3, [pc, #380]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d1e:	4a5e      	ldr	r2, [pc, #376]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006d20:	f043 0304 	orr.w	r3, r3, #4
 8006d24:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d26:	4b5c      	ldr	r3, [pc, #368]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d2a:	4a5b      	ldr	r2, [pc, #364]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006d2c:	f043 0301 	orr.w	r3, r3, #1
 8006d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d32:	e00b      	b.n	8006d4c <HAL_RCC_OscConfig+0x324>
 8006d34:	4b58      	ldr	r3, [pc, #352]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d38:	4a57      	ldr	r2, [pc, #348]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006d3a:	f023 0301 	bic.w	r3, r3, #1
 8006d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d40:	4b55      	ldr	r3, [pc, #340]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d44:	4a54      	ldr	r2, [pc, #336]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006d46:	f023 0304 	bic.w	r3, r3, #4
 8006d4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d015      	beq.n	8006d80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d54:	f7fb fea8 	bl	8002aa8 <HAL_GetTick>
 8006d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d5a:	e00a      	b.n	8006d72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d5c:	f7fb fea4 	bl	8002aa8 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e0cb      	b.n	8006f0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d72:	4b49      	ldr	r3, [pc, #292]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d0ee      	beq.n	8006d5c <HAL_RCC_OscConfig+0x334>
 8006d7e:	e014      	b.n	8006daa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d80:	f7fb fe92 	bl	8002aa8 <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d86:	e00a      	b.n	8006d9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d88:	f7fb fe8e 	bl	8002aa8 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e0b5      	b.n	8006f0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d9e:	4b3e      	ldr	r3, [pc, #248]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1ee      	bne.n	8006d88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006daa:	7dfb      	ldrb	r3, [r7, #23]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d105      	bne.n	8006dbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006db0:	4b39      	ldr	r3, [pc, #228]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db4:	4a38      	ldr	r2, [pc, #224]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006db6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f000 80a1 	beq.w	8006f08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006dc6:	4b34      	ldr	r3, [pc, #208]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 030c 	and.w	r3, r3, #12
 8006dce:	2b08      	cmp	r3, #8
 8006dd0:	d05c      	beq.n	8006e8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d141      	bne.n	8006e5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dda:	4b31      	ldr	r3, [pc, #196]	@ (8006ea0 <HAL_RCC_OscConfig+0x478>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de0:	f7fb fe62 	bl	8002aa8 <HAL_GetTick>
 8006de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006de6:	e008      	b.n	8006dfa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006de8:	f7fb fe5e 	bl	8002aa8 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e087      	b.n	8006f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dfa:	4b27      	ldr	r3, [pc, #156]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1f0      	bne.n	8006de8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	69da      	ldr	r2, [r3, #28]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e14:	019b      	lsls	r3, r3, #6
 8006e16:	431a      	orrs	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1c:	085b      	lsrs	r3, r3, #1
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	041b      	lsls	r3, r3, #16
 8006e22:	431a      	orrs	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e28:	061b      	lsls	r3, r3, #24
 8006e2a:	491b      	ldr	r1, [pc, #108]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e30:	4b1b      	ldr	r3, [pc, #108]	@ (8006ea0 <HAL_RCC_OscConfig+0x478>)
 8006e32:	2201      	movs	r2, #1
 8006e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e36:	f7fb fe37 	bl	8002aa8 <HAL_GetTick>
 8006e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e3c:	e008      	b.n	8006e50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e3e:	f7fb fe33 	bl	8002aa8 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d901      	bls.n	8006e50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e05c      	b.n	8006f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e50:	4b11      	ldr	r3, [pc, #68]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d0f0      	beq.n	8006e3e <HAL_RCC_OscConfig+0x416>
 8006e5c:	e054      	b.n	8006f08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e5e:	4b10      	ldr	r3, [pc, #64]	@ (8006ea0 <HAL_RCC_OscConfig+0x478>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e64:	f7fb fe20 	bl	8002aa8 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e6c:	f7fb fe1c 	bl	8002aa8 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e045      	b.n	8006f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e7e:	4b06      	ldr	r3, [pc, #24]	@ (8006e98 <HAL_RCC_OscConfig+0x470>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1f0      	bne.n	8006e6c <HAL_RCC_OscConfig+0x444>
 8006e8a:	e03d      	b.n	8006f08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d107      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e038      	b.n	8006f0a <HAL_RCC_OscConfig+0x4e2>
 8006e98:	40023800 	.word	0x40023800
 8006e9c:	40007000 	.word	0x40007000
 8006ea0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8006f14 <HAL_RCC_OscConfig+0x4ec>)
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d028      	beq.n	8006f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d121      	bne.n	8006f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d11a      	bne.n	8006f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006eda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d111      	bne.n	8006f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eea:	085b      	lsrs	r3, r3, #1
 8006eec:	3b01      	subs	r3, #1
 8006eee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d107      	bne.n	8006f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d001      	beq.n	8006f08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e000      	b.n	8006f0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3718      	adds	r7, #24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	40023800 	.word	0x40023800

08006f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e0cc      	b.n	80070c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f2c:	4b68      	ldr	r3, [pc, #416]	@ (80070d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0307 	and.w	r3, r3, #7
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d90c      	bls.n	8006f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f3a:	4b65      	ldr	r3, [pc, #404]	@ (80070d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	b2d2      	uxtb	r2, r2
 8006f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f42:	4b63      	ldr	r3, [pc, #396]	@ (80070d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d001      	beq.n	8006f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e0b8      	b.n	80070c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0302 	and.w	r3, r3, #2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d020      	beq.n	8006fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d005      	beq.n	8006f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f6c:	4b59      	ldr	r3, [pc, #356]	@ (80070d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	4a58      	ldr	r2, [pc, #352]	@ (80070d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006f76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0308 	and.w	r3, r3, #8
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d005      	beq.n	8006f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f84:	4b53      	ldr	r3, [pc, #332]	@ (80070d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	4a52      	ldr	r2, [pc, #328]	@ (80070d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f90:	4b50      	ldr	r3, [pc, #320]	@ (80070d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	494d      	ldr	r1, [pc, #308]	@ (80070d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d044      	beq.n	8007038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d107      	bne.n	8006fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fb6:	4b47      	ldr	r3, [pc, #284]	@ (80070d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d119      	bne.n	8006ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e07f      	b.n	80070c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d003      	beq.n	8006fd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fd2:	2b03      	cmp	r3, #3
 8006fd4:	d107      	bne.n	8006fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80070d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d109      	bne.n	8006ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e06f      	b.n	80070c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80070d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e067      	b.n	80070c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ff6:	4b37      	ldr	r3, [pc, #220]	@ (80070d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f023 0203 	bic.w	r2, r3, #3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	4934      	ldr	r1, [pc, #208]	@ (80070d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007004:	4313      	orrs	r3, r2
 8007006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007008:	f7fb fd4e 	bl	8002aa8 <HAL_GetTick>
 800700c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800700e:	e00a      	b.n	8007026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007010:	f7fb fd4a 	bl	8002aa8 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800701e:	4293      	cmp	r3, r2
 8007020:	d901      	bls.n	8007026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e04f      	b.n	80070c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007026:	4b2b      	ldr	r3, [pc, #172]	@ (80070d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f003 020c 	and.w	r2, r3, #12
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	429a      	cmp	r2, r3
 8007036:	d1eb      	bne.n	8007010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007038:	4b25      	ldr	r3, [pc, #148]	@ (80070d0 <HAL_RCC_ClockConfig+0x1b8>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0307 	and.w	r3, r3, #7
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	429a      	cmp	r2, r3
 8007044:	d20c      	bcs.n	8007060 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007046:	4b22      	ldr	r3, [pc, #136]	@ (80070d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007048:	683a      	ldr	r2, [r7, #0]
 800704a:	b2d2      	uxtb	r2, r2
 800704c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800704e:	4b20      	ldr	r3, [pc, #128]	@ (80070d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0307 	and.w	r3, r3, #7
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d001      	beq.n	8007060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e032      	b.n	80070c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0304 	and.w	r3, r3, #4
 8007068:	2b00      	cmp	r3, #0
 800706a:	d008      	beq.n	800707e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800706c:	4b19      	ldr	r3, [pc, #100]	@ (80070d4 <HAL_RCC_ClockConfig+0x1bc>)
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	4916      	ldr	r1, [pc, #88]	@ (80070d4 <HAL_RCC_ClockConfig+0x1bc>)
 800707a:	4313      	orrs	r3, r2
 800707c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0308 	and.w	r3, r3, #8
 8007086:	2b00      	cmp	r3, #0
 8007088:	d009      	beq.n	800709e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800708a:	4b12      	ldr	r3, [pc, #72]	@ (80070d4 <HAL_RCC_ClockConfig+0x1bc>)
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	490e      	ldr	r1, [pc, #56]	@ (80070d4 <HAL_RCC_ClockConfig+0x1bc>)
 800709a:	4313      	orrs	r3, r2
 800709c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800709e:	f000 f821 	bl	80070e4 <HAL_RCC_GetSysClockFreq>
 80070a2:	4602      	mov	r2, r0
 80070a4:	4b0b      	ldr	r3, [pc, #44]	@ (80070d4 <HAL_RCC_ClockConfig+0x1bc>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	091b      	lsrs	r3, r3, #4
 80070aa:	f003 030f 	and.w	r3, r3, #15
 80070ae:	490a      	ldr	r1, [pc, #40]	@ (80070d8 <HAL_RCC_ClockConfig+0x1c0>)
 80070b0:	5ccb      	ldrb	r3, [r1, r3]
 80070b2:	fa22 f303 	lsr.w	r3, r2, r3
 80070b6:	4a09      	ldr	r2, [pc, #36]	@ (80070dc <HAL_RCC_ClockConfig+0x1c4>)
 80070b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80070ba:	4b09      	ldr	r3, [pc, #36]	@ (80070e0 <HAL_RCC_ClockConfig+0x1c8>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fb fcae 	bl	8002a20 <HAL_InitTick>

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	40023c00 	.word	0x40023c00
 80070d4:	40023800 	.word	0x40023800
 80070d8:	0800f270 	.word	0x0800f270
 80070dc:	20000004 	.word	0x20000004
 80070e0:	20000008 	.word	0x20000008

080070e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070e8:	b094      	sub	sp, #80	@ 0x50
 80070ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80070f8:	2300      	movs	r3, #0
 80070fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070fc:	4b79      	ldr	r3, [pc, #484]	@ (80072e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f003 030c 	and.w	r3, r3, #12
 8007104:	2b08      	cmp	r3, #8
 8007106:	d00d      	beq.n	8007124 <HAL_RCC_GetSysClockFreq+0x40>
 8007108:	2b08      	cmp	r3, #8
 800710a:	f200 80e1 	bhi.w	80072d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800710e:	2b00      	cmp	r3, #0
 8007110:	d002      	beq.n	8007118 <HAL_RCC_GetSysClockFreq+0x34>
 8007112:	2b04      	cmp	r3, #4
 8007114:	d003      	beq.n	800711e <HAL_RCC_GetSysClockFreq+0x3a>
 8007116:	e0db      	b.n	80072d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007118:	4b73      	ldr	r3, [pc, #460]	@ (80072e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800711a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800711c:	e0db      	b.n	80072d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800711e:	4b73      	ldr	r3, [pc, #460]	@ (80072ec <HAL_RCC_GetSysClockFreq+0x208>)
 8007120:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007122:	e0d8      	b.n	80072d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007124:	4b6f      	ldr	r3, [pc, #444]	@ (80072e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800712c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800712e:	4b6d      	ldr	r3, [pc, #436]	@ (80072e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d063      	beq.n	8007202 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800713a:	4b6a      	ldr	r3, [pc, #424]	@ (80072e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	099b      	lsrs	r3, r3, #6
 8007140:	2200      	movs	r2, #0
 8007142:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007144:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800714c:	633b      	str	r3, [r7, #48]	@ 0x30
 800714e:	2300      	movs	r3, #0
 8007150:	637b      	str	r3, [r7, #52]	@ 0x34
 8007152:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007156:	4622      	mov	r2, r4
 8007158:	462b      	mov	r3, r5
 800715a:	f04f 0000 	mov.w	r0, #0
 800715e:	f04f 0100 	mov.w	r1, #0
 8007162:	0159      	lsls	r1, r3, #5
 8007164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007168:	0150      	lsls	r0, r2, #5
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	4621      	mov	r1, r4
 8007170:	1a51      	subs	r1, r2, r1
 8007172:	6139      	str	r1, [r7, #16]
 8007174:	4629      	mov	r1, r5
 8007176:	eb63 0301 	sbc.w	r3, r3, r1
 800717a:	617b      	str	r3, [r7, #20]
 800717c:	f04f 0200 	mov.w	r2, #0
 8007180:	f04f 0300 	mov.w	r3, #0
 8007184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007188:	4659      	mov	r1, fp
 800718a:	018b      	lsls	r3, r1, #6
 800718c:	4651      	mov	r1, sl
 800718e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007192:	4651      	mov	r1, sl
 8007194:	018a      	lsls	r2, r1, #6
 8007196:	4651      	mov	r1, sl
 8007198:	ebb2 0801 	subs.w	r8, r2, r1
 800719c:	4659      	mov	r1, fp
 800719e:	eb63 0901 	sbc.w	r9, r3, r1
 80071a2:	f04f 0200 	mov.w	r2, #0
 80071a6:	f04f 0300 	mov.w	r3, #0
 80071aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071b6:	4690      	mov	r8, r2
 80071b8:	4699      	mov	r9, r3
 80071ba:	4623      	mov	r3, r4
 80071bc:	eb18 0303 	adds.w	r3, r8, r3
 80071c0:	60bb      	str	r3, [r7, #8]
 80071c2:	462b      	mov	r3, r5
 80071c4:	eb49 0303 	adc.w	r3, r9, r3
 80071c8:	60fb      	str	r3, [r7, #12]
 80071ca:	f04f 0200 	mov.w	r2, #0
 80071ce:	f04f 0300 	mov.w	r3, #0
 80071d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80071d6:	4629      	mov	r1, r5
 80071d8:	024b      	lsls	r3, r1, #9
 80071da:	4621      	mov	r1, r4
 80071dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80071e0:	4621      	mov	r1, r4
 80071e2:	024a      	lsls	r2, r1, #9
 80071e4:	4610      	mov	r0, r2
 80071e6:	4619      	mov	r1, r3
 80071e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071ea:	2200      	movs	r2, #0
 80071ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80071f4:	f7f9 fd48 	bl	8000c88 <__aeabi_uldivmod>
 80071f8:	4602      	mov	r2, r0
 80071fa:	460b      	mov	r3, r1
 80071fc:	4613      	mov	r3, r2
 80071fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007200:	e058      	b.n	80072b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007202:	4b38      	ldr	r3, [pc, #224]	@ (80072e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	099b      	lsrs	r3, r3, #6
 8007208:	2200      	movs	r2, #0
 800720a:	4618      	mov	r0, r3
 800720c:	4611      	mov	r1, r2
 800720e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007212:	623b      	str	r3, [r7, #32]
 8007214:	2300      	movs	r3, #0
 8007216:	627b      	str	r3, [r7, #36]	@ 0x24
 8007218:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800721c:	4642      	mov	r2, r8
 800721e:	464b      	mov	r3, r9
 8007220:	f04f 0000 	mov.w	r0, #0
 8007224:	f04f 0100 	mov.w	r1, #0
 8007228:	0159      	lsls	r1, r3, #5
 800722a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800722e:	0150      	lsls	r0, r2, #5
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	4641      	mov	r1, r8
 8007236:	ebb2 0a01 	subs.w	sl, r2, r1
 800723a:	4649      	mov	r1, r9
 800723c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007240:	f04f 0200 	mov.w	r2, #0
 8007244:	f04f 0300 	mov.w	r3, #0
 8007248:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800724c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007250:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007254:	ebb2 040a 	subs.w	r4, r2, sl
 8007258:	eb63 050b 	sbc.w	r5, r3, fp
 800725c:	f04f 0200 	mov.w	r2, #0
 8007260:	f04f 0300 	mov.w	r3, #0
 8007264:	00eb      	lsls	r3, r5, #3
 8007266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800726a:	00e2      	lsls	r2, r4, #3
 800726c:	4614      	mov	r4, r2
 800726e:	461d      	mov	r5, r3
 8007270:	4643      	mov	r3, r8
 8007272:	18e3      	adds	r3, r4, r3
 8007274:	603b      	str	r3, [r7, #0]
 8007276:	464b      	mov	r3, r9
 8007278:	eb45 0303 	adc.w	r3, r5, r3
 800727c:	607b      	str	r3, [r7, #4]
 800727e:	f04f 0200 	mov.w	r2, #0
 8007282:	f04f 0300 	mov.w	r3, #0
 8007286:	e9d7 4500 	ldrd	r4, r5, [r7]
 800728a:	4629      	mov	r1, r5
 800728c:	028b      	lsls	r3, r1, #10
 800728e:	4621      	mov	r1, r4
 8007290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007294:	4621      	mov	r1, r4
 8007296:	028a      	lsls	r2, r1, #10
 8007298:	4610      	mov	r0, r2
 800729a:	4619      	mov	r1, r3
 800729c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800729e:	2200      	movs	r2, #0
 80072a0:	61bb      	str	r3, [r7, #24]
 80072a2:	61fa      	str	r2, [r7, #28]
 80072a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072a8:	f7f9 fcee 	bl	8000c88 <__aeabi_uldivmod>
 80072ac:	4602      	mov	r2, r0
 80072ae:	460b      	mov	r3, r1
 80072b0:	4613      	mov	r3, r2
 80072b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80072b4:	4b0b      	ldr	r3, [pc, #44]	@ (80072e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	0c1b      	lsrs	r3, r3, #16
 80072ba:	f003 0303 	and.w	r3, r3, #3
 80072be:	3301      	adds	r3, #1
 80072c0:	005b      	lsls	r3, r3, #1
 80072c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80072c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80072ce:	e002      	b.n	80072d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072d0:	4b05      	ldr	r3, [pc, #20]	@ (80072e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80072d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80072d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3750      	adds	r7, #80	@ 0x50
 80072dc:	46bd      	mov	sp, r7
 80072de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072e2:	bf00      	nop
 80072e4:	40023800 	.word	0x40023800
 80072e8:	00f42400 	.word	0x00f42400
 80072ec:	007a1200 	.word	0x007a1200

080072f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072f0:	b480      	push	{r7}
 80072f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072f4:	4b03      	ldr	r3, [pc, #12]	@ (8007304 <HAL_RCC_GetHCLKFreq+0x14>)
 80072f6:	681b      	ldr	r3, [r3, #0]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	20000004 	.word	0x20000004

08007308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800730c:	f7ff fff0 	bl	80072f0 <HAL_RCC_GetHCLKFreq>
 8007310:	4602      	mov	r2, r0
 8007312:	4b05      	ldr	r3, [pc, #20]	@ (8007328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	0a9b      	lsrs	r3, r3, #10
 8007318:	f003 0307 	and.w	r3, r3, #7
 800731c:	4903      	ldr	r1, [pc, #12]	@ (800732c <HAL_RCC_GetPCLK1Freq+0x24>)
 800731e:	5ccb      	ldrb	r3, [r1, r3]
 8007320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007324:	4618      	mov	r0, r3
 8007326:	bd80      	pop	{r7, pc}
 8007328:	40023800 	.word	0x40023800
 800732c:	0800f280 	.word	0x0800f280

08007330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007334:	f7ff ffdc 	bl	80072f0 <HAL_RCC_GetHCLKFreq>
 8007338:	4602      	mov	r2, r0
 800733a:	4b05      	ldr	r3, [pc, #20]	@ (8007350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	0b5b      	lsrs	r3, r3, #13
 8007340:	f003 0307 	and.w	r3, r3, #7
 8007344:	4903      	ldr	r1, [pc, #12]	@ (8007354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007346:	5ccb      	ldrb	r3, [r1, r3]
 8007348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800734c:	4618      	mov	r0, r3
 800734e:	bd80      	pop	{r7, pc}
 8007350:	40023800 	.word	0x40023800
 8007354:	0800f280 	.word	0x0800f280

08007358 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b00      	cmp	r3, #0
 8007372:	d105      	bne.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800737c:	2b00      	cmp	r3, #0
 800737e:	d035      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007380:	4b62      	ldr	r3, [pc, #392]	@ (800750c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007386:	f7fb fb8f 	bl	8002aa8 <HAL_GetTick>
 800738a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800738c:	e008      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800738e:	f7fb fb8b 	bl	8002aa8 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	2b02      	cmp	r3, #2
 800739a:	d901      	bls.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e0b0      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073a0:	4b5b      	ldr	r3, [pc, #364]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1f0      	bne.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	019a      	lsls	r2, r3, #6
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	071b      	lsls	r3, r3, #28
 80073b8:	4955      	ldr	r1, [pc, #340]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80073c0:	4b52      	ldr	r3, [pc, #328]	@ (800750c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80073c2:	2201      	movs	r2, #1
 80073c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073c6:	f7fb fb6f 	bl	8002aa8 <HAL_GetTick>
 80073ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073cc:	e008      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80073ce:	f7fb fb6b 	bl	8002aa8 <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d901      	bls.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e090      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073e0:	4b4b      	ldr	r3, [pc, #300]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d0f0      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0302 	and.w	r3, r3, #2
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 8083 	beq.w	8007500 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80073fa:	2300      	movs	r3, #0
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	4b44      	ldr	r3, [pc, #272]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007402:	4a43      	ldr	r2, [pc, #268]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007408:	6413      	str	r3, [r2, #64]	@ 0x40
 800740a:	4b41      	ldr	r3, [pc, #260]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800740c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007416:	4b3f      	ldr	r3, [pc, #252]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a3e      	ldr	r2, [pc, #248]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800741c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007420:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007422:	f7fb fb41 	bl	8002aa8 <HAL_GetTick>
 8007426:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007428:	e008      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800742a:	f7fb fb3d 	bl	8002aa8 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b02      	cmp	r3, #2
 8007436:	d901      	bls.n	800743c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e062      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800743c:	4b35      	ldr	r3, [pc, #212]	@ (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007444:	2b00      	cmp	r3, #0
 8007446:	d0f0      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007448:	4b31      	ldr	r3, [pc, #196]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800744a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800744c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007450:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d02f      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	429a      	cmp	r2, r3
 8007464:	d028      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007466:	4b2a      	ldr	r3, [pc, #168]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800746a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800746e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007470:	4b29      	ldr	r3, [pc, #164]	@ (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007472:	2201      	movs	r2, #1
 8007474:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007476:	4b28      	ldr	r3, [pc, #160]	@ (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800747c:	4a24      	ldr	r2, [pc, #144]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007482:	4b23      	ldr	r3, [pc, #140]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b01      	cmp	r3, #1
 800748c:	d114      	bne.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800748e:	f7fb fb0b 	bl	8002aa8 <HAL_GetTick>
 8007492:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007494:	e00a      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007496:	f7fb fb07 	bl	8002aa8 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d901      	bls.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e02a      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ac:	4b18      	ldr	r3, [pc, #96]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074b0:	f003 0302 	and.w	r3, r3, #2
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d0ee      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074c4:	d10d      	bne.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80074c6:	4b12      	ldr	r3, [pc, #72]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80074d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074da:	490d      	ldr	r1, [pc, #52]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	608b      	str	r3, [r1, #8]
 80074e0:	e005      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x196>
 80074e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	4a0a      	ldr	r2, [pc, #40]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074e8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80074ec:	6093      	str	r3, [r2, #8]
 80074ee:	4b08      	ldr	r3, [pc, #32]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074f0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074fa:	4905      	ldr	r1, [pc, #20]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3718      	adds	r7, #24
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	42470068 	.word	0x42470068
 8007510:	40023800 	.word	0x40023800
 8007514:	40007000 	.word	0x40007000
 8007518:	42470e40 	.word	0x42470e40

0800751c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800751c:	b480      	push	{r7}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007524:	2300      	movs	r3, #0
 8007526:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007528:	2300      	movs	r3, #0
 800752a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d13f      	bne.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800753a:	4b24      	ldr	r3, [pc, #144]	@ (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d006      	beq.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007550:	d12f      	bne.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007552:	4b1f      	ldr	r3, [pc, #124]	@ (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007554:	617b      	str	r3, [r7, #20]
          break;
 8007556:	e02f      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007558:	4b1c      	ldr	r3, [pc, #112]	@ (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007560:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007564:	d108      	bne.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007566:	4b19      	ldr	r3, [pc, #100]	@ (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800756e:	4a19      	ldr	r2, [pc, #100]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007570:	fbb2 f3f3 	udiv	r3, r2, r3
 8007574:	613b      	str	r3, [r7, #16]
 8007576:	e007      	b.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007578:	4b14      	ldr	r3, [pc, #80]	@ (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007580:	4a15      	ldr	r2, [pc, #84]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007582:	fbb2 f3f3 	udiv	r3, r2, r3
 8007586:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007588:	4b10      	ldr	r3, [pc, #64]	@ (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800758a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800758e:	099b      	lsrs	r3, r3, #6
 8007590:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	fb02 f303 	mul.w	r3, r2, r3
 800759a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800759c:	4b0b      	ldr	r3, [pc, #44]	@ (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800759e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075a2:	0f1b      	lsrs	r3, r3, #28
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ae:	617b      	str	r3, [r7, #20]
          break;
 80075b0:	e002      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80075b2:	2300      	movs	r3, #0
 80075b4:	617b      	str	r3, [r7, #20]
          break;
 80075b6:	bf00      	nop
        }
      }
      break;
 80075b8:	e000      	b.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80075ba:	bf00      	nop
    }
  }
  return frequency;
 80075bc:	697b      	ldr	r3, [r7, #20]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	371c      	adds	r7, #28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	40023800 	.word	0x40023800
 80075d0:	00bb8000 	.word	0x00bb8000
 80075d4:	007a1200 	.word	0x007a1200
 80075d8:	00f42400 	.word	0x00f42400

080075dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e07b      	b.n	80076e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d108      	bne.n	8007608 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075fe:	d009      	beq.n	8007614 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	61da      	str	r2, [r3, #28]
 8007606:	e005      	b.n	8007614 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d106      	bne.n	8007634 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7fa fffa 	bl	8002628 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2202      	movs	r2, #2
 8007638:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800764a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800765c:	431a      	orrs	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007666:	431a      	orrs	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	f003 0302 	and.w	r3, r3, #2
 8007670:	431a      	orrs	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	431a      	orrs	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007684:	431a      	orrs	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800768e:	431a      	orrs	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007698:	ea42 0103 	orr.w	r1, r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	430a      	orrs	r2, r1
 80076aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	0c1b      	lsrs	r3, r3, #16
 80076b2:	f003 0104 	and.w	r1, r3, #4
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ba:	f003 0210 	and.w	r2, r3, #16
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	430a      	orrs	r2, r1
 80076c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	69da      	ldr	r2, [r3, #28]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b082      	sub	sp, #8
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e042      	b.n	8007786 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	d106      	bne.n	800771a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7fa ffcf 	bl	80026b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2224      	movs	r2, #36	@ 0x24
 800771e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68da      	ldr	r2, [r3, #12]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007730:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f82c 	bl	8007790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	691a      	ldr	r2, [r3, #16]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007746:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	695a      	ldr	r2, [r3, #20]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007756:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007766:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2220      	movs	r2, #32
 8007772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2220      	movs	r2, #32
 800777a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
	...

08007790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007794:	b0c0      	sub	sp, #256	@ 0x100
 8007796:	af00      	add	r7, sp, #0
 8007798:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800779c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80077a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ac:	68d9      	ldr	r1, [r3, #12]
 80077ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	ea40 0301 	orr.w	r3, r0, r1
 80077b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077be:	689a      	ldr	r2, [r3, #8]
 80077c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	431a      	orrs	r2, r3
 80077c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	431a      	orrs	r2, r3
 80077d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80077dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80077e8:	f021 010c 	bic.w	r1, r1, #12
 80077ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077f6:	430b      	orrs	r3, r1
 80077f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800780a:	6999      	ldr	r1, [r3, #24]
 800780c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	ea40 0301 	orr.w	r3, r0, r1
 8007816:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	4b8f      	ldr	r3, [pc, #572]	@ (8007a5c <UART_SetConfig+0x2cc>)
 8007820:	429a      	cmp	r2, r3
 8007822:	d005      	beq.n	8007830 <UART_SetConfig+0xa0>
 8007824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	4b8d      	ldr	r3, [pc, #564]	@ (8007a60 <UART_SetConfig+0x2d0>)
 800782c:	429a      	cmp	r2, r3
 800782e:	d104      	bne.n	800783a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007830:	f7ff fd7e 	bl	8007330 <HAL_RCC_GetPCLK2Freq>
 8007834:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007838:	e003      	b.n	8007842 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800783a:	f7ff fd65 	bl	8007308 <HAL_RCC_GetPCLK1Freq>
 800783e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800784c:	f040 810c 	bne.w	8007a68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007854:	2200      	movs	r2, #0
 8007856:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800785a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800785e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007862:	4622      	mov	r2, r4
 8007864:	462b      	mov	r3, r5
 8007866:	1891      	adds	r1, r2, r2
 8007868:	65b9      	str	r1, [r7, #88]	@ 0x58
 800786a:	415b      	adcs	r3, r3
 800786c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800786e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007872:	4621      	mov	r1, r4
 8007874:	eb12 0801 	adds.w	r8, r2, r1
 8007878:	4629      	mov	r1, r5
 800787a:	eb43 0901 	adc.w	r9, r3, r1
 800787e:	f04f 0200 	mov.w	r2, #0
 8007882:	f04f 0300 	mov.w	r3, #0
 8007886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800788a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800788e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007892:	4690      	mov	r8, r2
 8007894:	4699      	mov	r9, r3
 8007896:	4623      	mov	r3, r4
 8007898:	eb18 0303 	adds.w	r3, r8, r3
 800789c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80078a0:	462b      	mov	r3, r5
 80078a2:	eb49 0303 	adc.w	r3, r9, r3
 80078a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80078aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80078b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80078ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80078be:	460b      	mov	r3, r1
 80078c0:	18db      	adds	r3, r3, r3
 80078c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80078c4:	4613      	mov	r3, r2
 80078c6:	eb42 0303 	adc.w	r3, r2, r3
 80078ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80078cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80078d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80078d4:	f7f9 f9d8 	bl	8000c88 <__aeabi_uldivmod>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4b61      	ldr	r3, [pc, #388]	@ (8007a64 <UART_SetConfig+0x2d4>)
 80078de:	fba3 2302 	umull	r2, r3, r3, r2
 80078e2:	095b      	lsrs	r3, r3, #5
 80078e4:	011c      	lsls	r4, r3, #4
 80078e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078ea:	2200      	movs	r2, #0
 80078ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80078f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80078f8:	4642      	mov	r2, r8
 80078fa:	464b      	mov	r3, r9
 80078fc:	1891      	adds	r1, r2, r2
 80078fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007900:	415b      	adcs	r3, r3
 8007902:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007904:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007908:	4641      	mov	r1, r8
 800790a:	eb12 0a01 	adds.w	sl, r2, r1
 800790e:	4649      	mov	r1, r9
 8007910:	eb43 0b01 	adc.w	fp, r3, r1
 8007914:	f04f 0200 	mov.w	r2, #0
 8007918:	f04f 0300 	mov.w	r3, #0
 800791c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007920:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007924:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007928:	4692      	mov	sl, r2
 800792a:	469b      	mov	fp, r3
 800792c:	4643      	mov	r3, r8
 800792e:	eb1a 0303 	adds.w	r3, sl, r3
 8007932:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007936:	464b      	mov	r3, r9
 8007938:	eb4b 0303 	adc.w	r3, fp, r3
 800793c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800794c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007950:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007954:	460b      	mov	r3, r1
 8007956:	18db      	adds	r3, r3, r3
 8007958:	643b      	str	r3, [r7, #64]	@ 0x40
 800795a:	4613      	mov	r3, r2
 800795c:	eb42 0303 	adc.w	r3, r2, r3
 8007960:	647b      	str	r3, [r7, #68]	@ 0x44
 8007962:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007966:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800796a:	f7f9 f98d 	bl	8000c88 <__aeabi_uldivmod>
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	4611      	mov	r1, r2
 8007974:	4b3b      	ldr	r3, [pc, #236]	@ (8007a64 <UART_SetConfig+0x2d4>)
 8007976:	fba3 2301 	umull	r2, r3, r3, r1
 800797a:	095b      	lsrs	r3, r3, #5
 800797c:	2264      	movs	r2, #100	@ 0x64
 800797e:	fb02 f303 	mul.w	r3, r2, r3
 8007982:	1acb      	subs	r3, r1, r3
 8007984:	00db      	lsls	r3, r3, #3
 8007986:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800798a:	4b36      	ldr	r3, [pc, #216]	@ (8007a64 <UART_SetConfig+0x2d4>)
 800798c:	fba3 2302 	umull	r2, r3, r3, r2
 8007990:	095b      	lsrs	r3, r3, #5
 8007992:	005b      	lsls	r3, r3, #1
 8007994:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007998:	441c      	add	r4, r3
 800799a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800799e:	2200      	movs	r2, #0
 80079a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80079a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80079ac:	4642      	mov	r2, r8
 80079ae:	464b      	mov	r3, r9
 80079b0:	1891      	adds	r1, r2, r2
 80079b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80079b4:	415b      	adcs	r3, r3
 80079b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80079bc:	4641      	mov	r1, r8
 80079be:	1851      	adds	r1, r2, r1
 80079c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80079c2:	4649      	mov	r1, r9
 80079c4:	414b      	adcs	r3, r1
 80079c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80079c8:	f04f 0200 	mov.w	r2, #0
 80079cc:	f04f 0300 	mov.w	r3, #0
 80079d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80079d4:	4659      	mov	r1, fp
 80079d6:	00cb      	lsls	r3, r1, #3
 80079d8:	4651      	mov	r1, sl
 80079da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079de:	4651      	mov	r1, sl
 80079e0:	00ca      	lsls	r2, r1, #3
 80079e2:	4610      	mov	r0, r2
 80079e4:	4619      	mov	r1, r3
 80079e6:	4603      	mov	r3, r0
 80079e8:	4642      	mov	r2, r8
 80079ea:	189b      	adds	r3, r3, r2
 80079ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079f0:	464b      	mov	r3, r9
 80079f2:	460a      	mov	r2, r1
 80079f4:	eb42 0303 	adc.w	r3, r2, r3
 80079f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007a08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007a0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007a10:	460b      	mov	r3, r1
 8007a12:	18db      	adds	r3, r3, r3
 8007a14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a16:	4613      	mov	r3, r2
 8007a18:	eb42 0303 	adc.w	r3, r2, r3
 8007a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007a22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007a26:	f7f9 f92f 	bl	8000c88 <__aeabi_uldivmod>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a64 <UART_SetConfig+0x2d4>)
 8007a30:	fba3 1302 	umull	r1, r3, r3, r2
 8007a34:	095b      	lsrs	r3, r3, #5
 8007a36:	2164      	movs	r1, #100	@ 0x64
 8007a38:	fb01 f303 	mul.w	r3, r1, r3
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	00db      	lsls	r3, r3, #3
 8007a40:	3332      	adds	r3, #50	@ 0x32
 8007a42:	4a08      	ldr	r2, [pc, #32]	@ (8007a64 <UART_SetConfig+0x2d4>)
 8007a44:	fba2 2303 	umull	r2, r3, r2, r3
 8007a48:	095b      	lsrs	r3, r3, #5
 8007a4a:	f003 0207 	and.w	r2, r3, #7
 8007a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4422      	add	r2, r4
 8007a56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a58:	e106      	b.n	8007c68 <UART_SetConfig+0x4d8>
 8007a5a:	bf00      	nop
 8007a5c:	40011000 	.word	0x40011000
 8007a60:	40011400 	.word	0x40011400
 8007a64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007a76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007a7a:	4642      	mov	r2, r8
 8007a7c:	464b      	mov	r3, r9
 8007a7e:	1891      	adds	r1, r2, r2
 8007a80:	6239      	str	r1, [r7, #32]
 8007a82:	415b      	adcs	r3, r3
 8007a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a8a:	4641      	mov	r1, r8
 8007a8c:	1854      	adds	r4, r2, r1
 8007a8e:	4649      	mov	r1, r9
 8007a90:	eb43 0501 	adc.w	r5, r3, r1
 8007a94:	f04f 0200 	mov.w	r2, #0
 8007a98:	f04f 0300 	mov.w	r3, #0
 8007a9c:	00eb      	lsls	r3, r5, #3
 8007a9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007aa2:	00e2      	lsls	r2, r4, #3
 8007aa4:	4614      	mov	r4, r2
 8007aa6:	461d      	mov	r5, r3
 8007aa8:	4643      	mov	r3, r8
 8007aaa:	18e3      	adds	r3, r4, r3
 8007aac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ab0:	464b      	mov	r3, r9
 8007ab2:	eb45 0303 	adc.w	r3, r5, r3
 8007ab6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ac6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007aca:	f04f 0200 	mov.w	r2, #0
 8007ace:	f04f 0300 	mov.w	r3, #0
 8007ad2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	008b      	lsls	r3, r1, #2
 8007ada:	4621      	mov	r1, r4
 8007adc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	008a      	lsls	r2, r1, #2
 8007ae4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007ae8:	f7f9 f8ce 	bl	8000c88 <__aeabi_uldivmod>
 8007aec:	4602      	mov	r2, r0
 8007aee:	460b      	mov	r3, r1
 8007af0:	4b60      	ldr	r3, [pc, #384]	@ (8007c74 <UART_SetConfig+0x4e4>)
 8007af2:	fba3 2302 	umull	r2, r3, r3, r2
 8007af6:	095b      	lsrs	r3, r3, #5
 8007af8:	011c      	lsls	r4, r3, #4
 8007afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007afe:	2200      	movs	r2, #0
 8007b00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007b08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007b0c:	4642      	mov	r2, r8
 8007b0e:	464b      	mov	r3, r9
 8007b10:	1891      	adds	r1, r2, r2
 8007b12:	61b9      	str	r1, [r7, #24]
 8007b14:	415b      	adcs	r3, r3
 8007b16:	61fb      	str	r3, [r7, #28]
 8007b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b1c:	4641      	mov	r1, r8
 8007b1e:	1851      	adds	r1, r2, r1
 8007b20:	6139      	str	r1, [r7, #16]
 8007b22:	4649      	mov	r1, r9
 8007b24:	414b      	adcs	r3, r1
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	f04f 0200 	mov.w	r2, #0
 8007b2c:	f04f 0300 	mov.w	r3, #0
 8007b30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b34:	4659      	mov	r1, fp
 8007b36:	00cb      	lsls	r3, r1, #3
 8007b38:	4651      	mov	r1, sl
 8007b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b3e:	4651      	mov	r1, sl
 8007b40:	00ca      	lsls	r2, r1, #3
 8007b42:	4610      	mov	r0, r2
 8007b44:	4619      	mov	r1, r3
 8007b46:	4603      	mov	r3, r0
 8007b48:	4642      	mov	r2, r8
 8007b4a:	189b      	adds	r3, r3, r2
 8007b4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b50:	464b      	mov	r3, r9
 8007b52:	460a      	mov	r2, r1
 8007b54:	eb42 0303 	adc.w	r3, r2, r3
 8007b58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007b68:	f04f 0200 	mov.w	r2, #0
 8007b6c:	f04f 0300 	mov.w	r3, #0
 8007b70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007b74:	4649      	mov	r1, r9
 8007b76:	008b      	lsls	r3, r1, #2
 8007b78:	4641      	mov	r1, r8
 8007b7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b7e:	4641      	mov	r1, r8
 8007b80:	008a      	lsls	r2, r1, #2
 8007b82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007b86:	f7f9 f87f 	bl	8000c88 <__aeabi_uldivmod>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	4611      	mov	r1, r2
 8007b90:	4b38      	ldr	r3, [pc, #224]	@ (8007c74 <UART_SetConfig+0x4e4>)
 8007b92:	fba3 2301 	umull	r2, r3, r3, r1
 8007b96:	095b      	lsrs	r3, r3, #5
 8007b98:	2264      	movs	r2, #100	@ 0x64
 8007b9a:	fb02 f303 	mul.w	r3, r2, r3
 8007b9e:	1acb      	subs	r3, r1, r3
 8007ba0:	011b      	lsls	r3, r3, #4
 8007ba2:	3332      	adds	r3, #50	@ 0x32
 8007ba4:	4a33      	ldr	r2, [pc, #204]	@ (8007c74 <UART_SetConfig+0x4e4>)
 8007ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8007baa:	095b      	lsrs	r3, r3, #5
 8007bac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007bb0:	441c      	add	r4, r3
 8007bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	673b      	str	r3, [r7, #112]	@ 0x70
 8007bba:	677a      	str	r2, [r7, #116]	@ 0x74
 8007bbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007bc0:	4642      	mov	r2, r8
 8007bc2:	464b      	mov	r3, r9
 8007bc4:	1891      	adds	r1, r2, r2
 8007bc6:	60b9      	str	r1, [r7, #8]
 8007bc8:	415b      	adcs	r3, r3
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bd0:	4641      	mov	r1, r8
 8007bd2:	1851      	adds	r1, r2, r1
 8007bd4:	6039      	str	r1, [r7, #0]
 8007bd6:	4649      	mov	r1, r9
 8007bd8:	414b      	adcs	r3, r1
 8007bda:	607b      	str	r3, [r7, #4]
 8007bdc:	f04f 0200 	mov.w	r2, #0
 8007be0:	f04f 0300 	mov.w	r3, #0
 8007be4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007be8:	4659      	mov	r1, fp
 8007bea:	00cb      	lsls	r3, r1, #3
 8007bec:	4651      	mov	r1, sl
 8007bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bf2:	4651      	mov	r1, sl
 8007bf4:	00ca      	lsls	r2, r1, #3
 8007bf6:	4610      	mov	r0, r2
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	4642      	mov	r2, r8
 8007bfe:	189b      	adds	r3, r3, r2
 8007c00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c02:	464b      	mov	r3, r9
 8007c04:	460a      	mov	r2, r1
 8007c06:	eb42 0303 	adc.w	r3, r2, r3
 8007c0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c16:	667a      	str	r2, [r7, #100]	@ 0x64
 8007c18:	f04f 0200 	mov.w	r2, #0
 8007c1c:	f04f 0300 	mov.w	r3, #0
 8007c20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007c24:	4649      	mov	r1, r9
 8007c26:	008b      	lsls	r3, r1, #2
 8007c28:	4641      	mov	r1, r8
 8007c2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c2e:	4641      	mov	r1, r8
 8007c30:	008a      	lsls	r2, r1, #2
 8007c32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007c36:	f7f9 f827 	bl	8000c88 <__aeabi_uldivmod>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c74 <UART_SetConfig+0x4e4>)
 8007c40:	fba3 1302 	umull	r1, r3, r3, r2
 8007c44:	095b      	lsrs	r3, r3, #5
 8007c46:	2164      	movs	r1, #100	@ 0x64
 8007c48:	fb01 f303 	mul.w	r3, r1, r3
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	011b      	lsls	r3, r3, #4
 8007c50:	3332      	adds	r3, #50	@ 0x32
 8007c52:	4a08      	ldr	r2, [pc, #32]	@ (8007c74 <UART_SetConfig+0x4e4>)
 8007c54:	fba2 2303 	umull	r2, r3, r2, r3
 8007c58:	095b      	lsrs	r3, r3, #5
 8007c5a:	f003 020f 	and.w	r2, r3, #15
 8007c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4422      	add	r2, r4
 8007c66:	609a      	str	r2, [r3, #8]
}
 8007c68:	bf00      	nop
 8007c6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c74:	51eb851f 	.word	0x51eb851f

08007c78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c78:	b084      	sub	sp, #16
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	f107 001c 	add.w	r0, r7, #28
 8007c86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c8a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d123      	bne.n	8007cda <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007ca6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007cba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d105      	bne.n	8007cce <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f001 fae8 	bl	80092a4 <USB_CoreReset>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	73fb      	strb	r3, [r7, #15]
 8007cd8:	e01b      	b.n	8007d12 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f001 fadc 	bl	80092a4 <USB_CoreReset>
 8007cec:	4603      	mov	r3, r0
 8007cee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007cf0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d106      	bne.n	8007d06 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cfc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	639a      	str	r2, [r3, #56]	@ 0x38
 8007d04:	e005      	b.n	8007d12 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007d12:	7fbb      	ldrb	r3, [r7, #30]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d10b      	bne.n	8007d30 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	f043 0206 	orr.w	r2, r3, #6
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	f043 0220 	orr.w	r2, r3, #32
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d3c:	b004      	add	sp, #16
 8007d3e:	4770      	bx	lr

08007d40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007d4e:	79fb      	ldrb	r3, [r7, #7]
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d165      	bne.n	8007e20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	4a41      	ldr	r2, [pc, #260]	@ (8007e5c <USB_SetTurnaroundTime+0x11c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d906      	bls.n	8007d6a <USB_SetTurnaroundTime+0x2a>
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	4a40      	ldr	r2, [pc, #256]	@ (8007e60 <USB_SetTurnaroundTime+0x120>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d202      	bcs.n	8007d6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007d64:	230f      	movs	r3, #15
 8007d66:	617b      	str	r3, [r7, #20]
 8007d68:	e062      	b.n	8007e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	4a3c      	ldr	r2, [pc, #240]	@ (8007e60 <USB_SetTurnaroundTime+0x120>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d306      	bcc.n	8007d80 <USB_SetTurnaroundTime+0x40>
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	4a3b      	ldr	r2, [pc, #236]	@ (8007e64 <USB_SetTurnaroundTime+0x124>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d202      	bcs.n	8007d80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007d7a:	230e      	movs	r3, #14
 8007d7c:	617b      	str	r3, [r7, #20]
 8007d7e:	e057      	b.n	8007e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	4a38      	ldr	r2, [pc, #224]	@ (8007e64 <USB_SetTurnaroundTime+0x124>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d306      	bcc.n	8007d96 <USB_SetTurnaroundTime+0x56>
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	4a37      	ldr	r2, [pc, #220]	@ (8007e68 <USB_SetTurnaroundTime+0x128>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d202      	bcs.n	8007d96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007d90:	230d      	movs	r3, #13
 8007d92:	617b      	str	r3, [r7, #20]
 8007d94:	e04c      	b.n	8007e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	4a33      	ldr	r2, [pc, #204]	@ (8007e68 <USB_SetTurnaroundTime+0x128>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d306      	bcc.n	8007dac <USB_SetTurnaroundTime+0x6c>
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	4a32      	ldr	r2, [pc, #200]	@ (8007e6c <USB_SetTurnaroundTime+0x12c>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d802      	bhi.n	8007dac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007da6:	230c      	movs	r3, #12
 8007da8:	617b      	str	r3, [r7, #20]
 8007daa:	e041      	b.n	8007e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	4a2f      	ldr	r2, [pc, #188]	@ (8007e6c <USB_SetTurnaroundTime+0x12c>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d906      	bls.n	8007dc2 <USB_SetTurnaroundTime+0x82>
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	4a2e      	ldr	r2, [pc, #184]	@ (8007e70 <USB_SetTurnaroundTime+0x130>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d802      	bhi.n	8007dc2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007dbc:	230b      	movs	r3, #11
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	e036      	b.n	8007e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	4a2a      	ldr	r2, [pc, #168]	@ (8007e70 <USB_SetTurnaroundTime+0x130>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d906      	bls.n	8007dd8 <USB_SetTurnaroundTime+0x98>
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	4a29      	ldr	r2, [pc, #164]	@ (8007e74 <USB_SetTurnaroundTime+0x134>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d802      	bhi.n	8007dd8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007dd2:	230a      	movs	r3, #10
 8007dd4:	617b      	str	r3, [r7, #20]
 8007dd6:	e02b      	b.n	8007e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	4a26      	ldr	r2, [pc, #152]	@ (8007e74 <USB_SetTurnaroundTime+0x134>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d906      	bls.n	8007dee <USB_SetTurnaroundTime+0xae>
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	4a25      	ldr	r2, [pc, #148]	@ (8007e78 <USB_SetTurnaroundTime+0x138>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d202      	bcs.n	8007dee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007de8:	2309      	movs	r3, #9
 8007dea:	617b      	str	r3, [r7, #20]
 8007dec:	e020      	b.n	8007e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	4a21      	ldr	r2, [pc, #132]	@ (8007e78 <USB_SetTurnaroundTime+0x138>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d306      	bcc.n	8007e04 <USB_SetTurnaroundTime+0xc4>
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	4a20      	ldr	r2, [pc, #128]	@ (8007e7c <USB_SetTurnaroundTime+0x13c>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d802      	bhi.n	8007e04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007dfe:	2308      	movs	r3, #8
 8007e00:	617b      	str	r3, [r7, #20]
 8007e02:	e015      	b.n	8007e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	4a1d      	ldr	r2, [pc, #116]	@ (8007e7c <USB_SetTurnaroundTime+0x13c>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d906      	bls.n	8007e1a <USB_SetTurnaroundTime+0xda>
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8007e80 <USB_SetTurnaroundTime+0x140>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d202      	bcs.n	8007e1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007e14:	2307      	movs	r3, #7
 8007e16:	617b      	str	r3, [r7, #20]
 8007e18:	e00a      	b.n	8007e30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007e1a:	2306      	movs	r3, #6
 8007e1c:	617b      	str	r3, [r7, #20]
 8007e1e:	e007      	b.n	8007e30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007e20:	79fb      	ldrb	r3, [r7, #7]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d102      	bne.n	8007e2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007e26:	2309      	movs	r3, #9
 8007e28:	617b      	str	r3, [r7, #20]
 8007e2a:	e001      	b.n	8007e30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007e2c:	2309      	movs	r3, #9
 8007e2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	68da      	ldr	r2, [r3, #12]
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	029b      	lsls	r3, r3, #10
 8007e44:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007e48:	431a      	orrs	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	371c      	adds	r7, #28
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	00d8acbf 	.word	0x00d8acbf
 8007e60:	00e4e1c0 	.word	0x00e4e1c0
 8007e64:	00f42400 	.word	0x00f42400
 8007e68:	01067380 	.word	0x01067380
 8007e6c:	011a499f 	.word	0x011a499f
 8007e70:	01312cff 	.word	0x01312cff
 8007e74:	014ca43f 	.word	0x014ca43f
 8007e78:	016e3600 	.word	0x016e3600
 8007e7c:	01a6ab1f 	.word	0x01a6ab1f
 8007e80:	01e84800 	.word	0x01e84800

08007e84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	f043 0201 	orr.w	r2, r3, #1
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b083      	sub	sp, #12
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	f023 0201 	bic.w	r2, r3, #1
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ee4:	78fb      	ldrb	r3, [r7, #3]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d115      	bne.n	8007f16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ef6:	200a      	movs	r0, #10
 8007ef8:	f7fa fde2 	bl	8002ac0 <HAL_Delay>
      ms += 10U;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	330a      	adds	r3, #10
 8007f00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f001 f93f 	bl	8009186 <USB_GetMode>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d01e      	beq.n	8007f4c <USB_SetCurrentMode+0x84>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f12:	d9f0      	bls.n	8007ef6 <USB_SetCurrentMode+0x2e>
 8007f14:	e01a      	b.n	8007f4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f16:	78fb      	ldrb	r3, [r7, #3]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d115      	bne.n	8007f48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007f28:	200a      	movs	r0, #10
 8007f2a:	f7fa fdc9 	bl	8002ac0 <HAL_Delay>
      ms += 10U;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	330a      	adds	r3, #10
 8007f32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f001 f926 	bl	8009186 <USB_GetMode>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d005      	beq.n	8007f4c <USB_SetCurrentMode+0x84>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f44:	d9f0      	bls.n	8007f28 <USB_SetCurrentMode+0x60>
 8007f46:	e001      	b.n	8007f4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e005      	b.n	8007f58 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2bc8      	cmp	r3, #200	@ 0xc8
 8007f50:	d101      	bne.n	8007f56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e000      	b.n	8007f58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f60:	b084      	sub	sp, #16
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b086      	sub	sp, #24
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	613b      	str	r3, [r7, #16]
 8007f7e:	e009      	b.n	8007f94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	3340      	adds	r3, #64	@ 0x40
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4413      	add	r3, r2
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	3301      	adds	r3, #1
 8007f92:	613b      	str	r3, [r7, #16]
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	2b0e      	cmp	r3, #14
 8007f98:	d9f2      	bls.n	8007f80 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007f9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d11c      	bne.n	8007fdc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fb0:	f043 0302 	orr.w	r3, r3, #2
 8007fb4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	639a      	str	r2, [r3, #56]	@ 0x38
 8007fda:	e00b      	b.n	8007ff4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fec:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008000:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008004:	2b01      	cmp	r3, #1
 8008006:	d10d      	bne.n	8008024 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800800c:	2b00      	cmp	r3, #0
 800800e:	d104      	bne.n	800801a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008010:	2100      	movs	r1, #0
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f968 	bl	80082e8 <USB_SetDevSpeed>
 8008018:	e008      	b.n	800802c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800801a:	2101      	movs	r1, #1
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f963 	bl	80082e8 <USB_SetDevSpeed>
 8008022:	e003      	b.n	800802c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008024:	2103      	movs	r1, #3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f95e 	bl	80082e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800802c:	2110      	movs	r1, #16
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f8fa 	bl	8008228 <USB_FlushTxFifo>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f924 	bl	800828c <USB_FlushRxFifo>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008054:	461a      	mov	r2, r3
 8008056:	2300      	movs	r3, #0
 8008058:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008060:	461a      	mov	r2, r3
 8008062:	2300      	movs	r3, #0
 8008064:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800806c:	461a      	mov	r2, r3
 800806e:	2300      	movs	r3, #0
 8008070:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008072:	2300      	movs	r3, #0
 8008074:	613b      	str	r3, [r7, #16]
 8008076:	e043      	b.n	8008100 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4413      	add	r3, r2
 8008080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800808a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800808e:	d118      	bne.n	80080c2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10a      	bne.n	80080ac <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	015a      	lsls	r2, r3, #5
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	4413      	add	r3, r2
 800809e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080a2:	461a      	mov	r2, r3
 80080a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80080a8:	6013      	str	r3, [r2, #0]
 80080aa:	e013      	b.n	80080d4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080b8:	461a      	mov	r2, r3
 80080ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	e008      	b.n	80080d4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ce:	461a      	mov	r2, r3
 80080d0:	2300      	movs	r3, #0
 80080d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	4413      	add	r3, r2
 80080dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080e0:	461a      	mov	r2, r3
 80080e2:	2300      	movs	r3, #0
 80080e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	015a      	lsls	r2, r3, #5
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080f2:	461a      	mov	r2, r3
 80080f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80080f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	3301      	adds	r3, #1
 80080fe:	613b      	str	r3, [r7, #16]
 8008100:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008104:	461a      	mov	r2, r3
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	4293      	cmp	r3, r2
 800810a:	d3b5      	bcc.n	8008078 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800810c:	2300      	movs	r3, #0
 800810e:	613b      	str	r3, [r7, #16]
 8008110:	e043      	b.n	800819a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	015a      	lsls	r2, r3, #5
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	4413      	add	r3, r2
 800811a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008124:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008128:	d118      	bne.n	800815c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10a      	bne.n	8008146 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	015a      	lsls	r2, r3, #5
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	4413      	add	r3, r2
 8008138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800813c:	461a      	mov	r2, r3
 800813e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008142:	6013      	str	r3, [r2, #0]
 8008144:	e013      	b.n	800816e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	4413      	add	r3, r2
 800814e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008152:	461a      	mov	r2, r3
 8008154:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008158:	6013      	str	r3, [r2, #0]
 800815a:	e008      	b.n	800816e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	4413      	add	r3, r2
 8008164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008168:	461a      	mov	r2, r3
 800816a:	2300      	movs	r3, #0
 800816c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	015a      	lsls	r2, r3, #5
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	4413      	add	r3, r2
 8008176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800817a:	461a      	mov	r2, r3
 800817c:	2300      	movs	r3, #0
 800817e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	4413      	add	r3, r2
 8008188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800818c:	461a      	mov	r2, r3
 800818e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008192:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	3301      	adds	r3, #1
 8008198:	613b      	str	r3, [r7, #16]
 800819a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800819e:	461a      	mov	r2, r3
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d3b5      	bcc.n	8008112 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80081c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80081c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d105      	bne.n	80081dc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	f043 0210 	orr.w	r2, r3, #16
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	699a      	ldr	r2, [r3, #24]
 80081e0:	4b10      	ldr	r3, [pc, #64]	@ (8008224 <USB_DevInit+0x2c4>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80081e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d005      	beq.n	80081fc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	f043 0208 	orr.w	r2, r3, #8
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80081fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008200:	2b01      	cmp	r3, #1
 8008202:	d107      	bne.n	8008214 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800820c:	f043 0304 	orr.w	r3, r3, #4
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008214:	7dfb      	ldrb	r3, [r7, #23]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008220:	b004      	add	sp, #16
 8008222:	4770      	bx	lr
 8008224:	803c3800 	.word	0x803c3800

08008228 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008232:	2300      	movs	r3, #0
 8008234:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	3301      	adds	r3, #1
 800823a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008242:	d901      	bls.n	8008248 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e01b      	b.n	8008280 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	daf2      	bge.n	8008236 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008250:	2300      	movs	r3, #0
 8008252:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	019b      	lsls	r3, r3, #6
 8008258:	f043 0220 	orr.w	r2, r3, #32
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	3301      	adds	r3, #1
 8008264:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800826c:	d901      	bls.n	8008272 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e006      	b.n	8008280 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f003 0320 	and.w	r3, r3, #32
 800827a:	2b20      	cmp	r3, #32
 800827c:	d0f0      	beq.n	8008260 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008294:	2300      	movs	r3, #0
 8008296:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	3301      	adds	r3, #1
 800829c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082a4:	d901      	bls.n	80082aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e018      	b.n	80082dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	daf2      	bge.n	8008298 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2210      	movs	r2, #16
 80082ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	3301      	adds	r3, #1
 80082c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082c8:	d901      	bls.n	80082ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e006      	b.n	80082dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	f003 0310 	and.w	r3, r3, #16
 80082d6:	2b10      	cmp	r3, #16
 80082d8:	d0f0      	beq.n	80082bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	68f9      	ldr	r1, [r7, #12]
 8008304:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008308:	4313      	orrs	r3, r2
 800830a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3714      	adds	r7, #20
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800831a:	b480      	push	{r7}
 800831c:	b087      	sub	sp, #28
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f003 0306 	and.w	r3, r3, #6
 8008332:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d102      	bne.n	8008340 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800833a:	2300      	movs	r3, #0
 800833c:	75fb      	strb	r3, [r7, #23]
 800833e:	e00a      	b.n	8008356 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2b02      	cmp	r3, #2
 8008344:	d002      	beq.n	800834c <USB_GetDevSpeed+0x32>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2b06      	cmp	r3, #6
 800834a:	d102      	bne.n	8008352 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800834c:	2302      	movs	r3, #2
 800834e:	75fb      	strb	r3, [r7, #23]
 8008350:	e001      	b.n	8008356 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008352:	230f      	movs	r3, #15
 8008354:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008356:	7dfb      	ldrb	r3, [r7, #23]
}
 8008358:	4618      	mov	r0, r3
 800835a:	371c      	adds	r7, #28
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	785b      	ldrb	r3, [r3, #1]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d13a      	bne.n	80083f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008386:	69da      	ldr	r2, [r3, #28]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	f003 030f 	and.w	r3, r3, #15
 8008390:	2101      	movs	r1, #1
 8008392:	fa01 f303 	lsl.w	r3, r1, r3
 8008396:	b29b      	uxth	r3, r3
 8008398:	68f9      	ldr	r1, [r7, #12]
 800839a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800839e:	4313      	orrs	r3, r2
 80083a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	015a      	lsls	r2, r3, #5
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	4413      	add	r3, r2
 80083aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d155      	bne.n	8008464 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	015a      	lsls	r2, r3, #5
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	4413      	add	r3, r2
 80083c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	791b      	ldrb	r3, [r3, #4]
 80083d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	059b      	lsls	r3, r3, #22
 80083da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083dc:	4313      	orrs	r3, r2
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	0151      	lsls	r1, r2, #5
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	440a      	add	r2, r1
 80083e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083f2:	6013      	str	r3, [r2, #0]
 80083f4:	e036      	b.n	8008464 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083fc:	69da      	ldr	r2, [r3, #28]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	f003 030f 	and.w	r3, r3, #15
 8008406:	2101      	movs	r1, #1
 8008408:	fa01 f303 	lsl.w	r3, r1, r3
 800840c:	041b      	lsls	r3, r3, #16
 800840e:	68f9      	ldr	r1, [r7, #12]
 8008410:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008414:	4313      	orrs	r3, r2
 8008416:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4413      	add	r3, r2
 8008420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800842a:	2b00      	cmp	r3, #0
 800842c:	d11a      	bne.n	8008464 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	4413      	add	r3, r2
 8008436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	791b      	ldrb	r3, [r3, #4]
 8008448:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800844a:	430b      	orrs	r3, r1
 800844c:	4313      	orrs	r3, r2
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	0151      	lsls	r1, r2, #5
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	440a      	add	r2, r1
 8008456:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800845a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800845e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008462:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
	...

08008474 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	785b      	ldrb	r3, [r3, #1]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d161      	bne.n	8008554 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	015a      	lsls	r2, r3, #5
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	4413      	add	r3, r2
 8008498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084a6:	d11f      	bne.n	80084e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	015a      	lsls	r2, r3, #5
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	0151      	lsls	r1, r2, #5
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	440a      	add	r2, r1
 80084be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80084c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	0151      	lsls	r1, r2, #5
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	440a      	add	r2, r1
 80084de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80084e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	f003 030f 	and.w	r3, r3, #15
 80084f8:	2101      	movs	r1, #1
 80084fa:	fa01 f303 	lsl.w	r3, r1, r3
 80084fe:	b29b      	uxth	r3, r3
 8008500:	43db      	mvns	r3, r3
 8008502:	68f9      	ldr	r1, [r7, #12]
 8008504:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008508:	4013      	ands	r3, r2
 800850a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008512:	69da      	ldr	r2, [r3, #28]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	f003 030f 	and.w	r3, r3, #15
 800851c:	2101      	movs	r1, #1
 800851e:	fa01 f303 	lsl.w	r3, r1, r3
 8008522:	b29b      	uxth	r3, r3
 8008524:	43db      	mvns	r3, r3
 8008526:	68f9      	ldr	r1, [r7, #12]
 8008528:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800852c:	4013      	ands	r3, r2
 800852e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	015a      	lsls	r2, r3, #5
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	4413      	add	r3, r2
 8008538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	0159      	lsls	r1, r3, #5
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	440b      	add	r3, r1
 8008546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800854a:	4619      	mov	r1, r3
 800854c:	4b35      	ldr	r3, [pc, #212]	@ (8008624 <USB_DeactivateEndpoint+0x1b0>)
 800854e:	4013      	ands	r3, r2
 8008550:	600b      	str	r3, [r1, #0]
 8008552:	e060      	b.n	8008616 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	015a      	lsls	r2, r3, #5
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	4413      	add	r3, r2
 800855c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008566:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800856a:	d11f      	bne.n	80085ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	0151      	lsls	r1, r2, #5
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	440a      	add	r2, r1
 8008582:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008586:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800858a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4413      	add	r3, r2
 8008594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	0151      	lsls	r1, r2, #5
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	440a      	add	r2, r1
 80085a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	f003 030f 	and.w	r3, r3, #15
 80085bc:	2101      	movs	r1, #1
 80085be:	fa01 f303 	lsl.w	r3, r1, r3
 80085c2:	041b      	lsls	r3, r3, #16
 80085c4:	43db      	mvns	r3, r3
 80085c6:	68f9      	ldr	r1, [r7, #12]
 80085c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085cc:	4013      	ands	r3, r2
 80085ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085d6:	69da      	ldr	r2, [r3, #28]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	f003 030f 	and.w	r3, r3, #15
 80085e0:	2101      	movs	r1, #1
 80085e2:	fa01 f303 	lsl.w	r3, r1, r3
 80085e6:	041b      	lsls	r3, r3, #16
 80085e8:	43db      	mvns	r3, r3
 80085ea:	68f9      	ldr	r1, [r7, #12]
 80085ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085f0:	4013      	ands	r3, r2
 80085f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	0159      	lsls	r1, r3, #5
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	440b      	add	r3, r1
 800860a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800860e:	4619      	mov	r1, r3
 8008610:	4b05      	ldr	r3, [pc, #20]	@ (8008628 <USB_DeactivateEndpoint+0x1b4>)
 8008612:	4013      	ands	r3, r2
 8008614:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	ec337800 	.word	0xec337800
 8008628:	eff37800 	.word	0xeff37800

0800862c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b08a      	sub	sp, #40	@ 0x28
 8008630:	af02      	add	r7, sp, #8
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	4613      	mov	r3, r2
 8008638:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	785b      	ldrb	r3, [r3, #1]
 8008648:	2b01      	cmp	r3, #1
 800864a:	f040 817f 	bne.w	800894c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d132      	bne.n	80086bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	015a      	lsls	r2, r3, #5
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	4413      	add	r3, r2
 800865e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	69ba      	ldr	r2, [r7, #24]
 8008666:	0151      	lsls	r1, r2, #5
 8008668:	69fa      	ldr	r2, [r7, #28]
 800866a:	440a      	add	r2, r1
 800866c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008670:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008674:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008678:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	015a      	lsls	r2, r3, #5
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	4413      	add	r3, r2
 8008682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	69ba      	ldr	r2, [r7, #24]
 800868a:	0151      	lsls	r1, r2, #5
 800868c:	69fa      	ldr	r2, [r7, #28]
 800868e:	440a      	add	r2, r1
 8008690:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008694:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008698:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	015a      	lsls	r2, r3, #5
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	4413      	add	r3, r2
 80086a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	69ba      	ldr	r2, [r7, #24]
 80086aa:	0151      	lsls	r1, r2, #5
 80086ac:	69fa      	ldr	r2, [r7, #28]
 80086ae:	440a      	add	r2, r1
 80086b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086b4:	0cdb      	lsrs	r3, r3, #19
 80086b6:	04db      	lsls	r3, r3, #19
 80086b8:	6113      	str	r3, [r2, #16]
 80086ba:	e097      	b.n	80087ec <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	015a      	lsls	r2, r3, #5
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	4413      	add	r3, r2
 80086c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	69ba      	ldr	r2, [r7, #24]
 80086cc:	0151      	lsls	r1, r2, #5
 80086ce:	69fa      	ldr	r2, [r7, #28]
 80086d0:	440a      	add	r2, r1
 80086d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086d6:	0cdb      	lsrs	r3, r3, #19
 80086d8:	04db      	lsls	r3, r3, #19
 80086da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	015a      	lsls	r2, r3, #5
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	4413      	add	r3, r2
 80086e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	69ba      	ldr	r2, [r7, #24]
 80086ec:	0151      	lsls	r1, r2, #5
 80086ee:	69fa      	ldr	r2, [r7, #28]
 80086f0:	440a      	add	r2, r1
 80086f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086f6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80086fa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80086fe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d11a      	bne.n	800873c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	691a      	ldr	r2, [r3, #16]
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	429a      	cmp	r2, r3
 8008710:	d903      	bls.n	800871a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	689a      	ldr	r2, [r3, #8]
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	015a      	lsls	r2, r3, #5
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	4413      	add	r3, r2
 8008722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	69ba      	ldr	r2, [r7, #24]
 800872a:	0151      	lsls	r1, r2, #5
 800872c:	69fa      	ldr	r2, [r7, #28]
 800872e:	440a      	add	r2, r1
 8008730:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008734:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008738:	6113      	str	r3, [r2, #16]
 800873a:	e044      	b.n	80087c6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	691a      	ldr	r2, [r3, #16]
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	4413      	add	r3, r2
 8008746:	1e5a      	subs	r2, r3, #1
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008750:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	015a      	lsls	r2, r3, #5
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	4413      	add	r3, r2
 800875a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800875e:	691a      	ldr	r2, [r3, #16]
 8008760:	8afb      	ldrh	r3, [r7, #22]
 8008762:	04d9      	lsls	r1, r3, #19
 8008764:	4ba4      	ldr	r3, [pc, #656]	@ (80089f8 <USB_EPStartXfer+0x3cc>)
 8008766:	400b      	ands	r3, r1
 8008768:	69b9      	ldr	r1, [r7, #24]
 800876a:	0148      	lsls	r0, r1, #5
 800876c:	69f9      	ldr	r1, [r7, #28]
 800876e:	4401      	add	r1, r0
 8008770:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008774:	4313      	orrs	r3, r2
 8008776:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	791b      	ldrb	r3, [r3, #4]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d122      	bne.n	80087c6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	4413      	add	r3, r2
 8008788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	69ba      	ldr	r2, [r7, #24]
 8008790:	0151      	lsls	r1, r2, #5
 8008792:	69fa      	ldr	r2, [r7, #28]
 8008794:	440a      	add	r2, r1
 8008796:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800879a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800879e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087ac:	691a      	ldr	r2, [r3, #16]
 80087ae:	8afb      	ldrh	r3, [r7, #22]
 80087b0:	075b      	lsls	r3, r3, #29
 80087b2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80087b6:	69b9      	ldr	r1, [r7, #24]
 80087b8:	0148      	lsls	r0, r1, #5
 80087ba:	69f9      	ldr	r1, [r7, #28]
 80087bc:	4401      	add	r1, r0
 80087be:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80087c2:	4313      	orrs	r3, r2
 80087c4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087d2:	691a      	ldr	r2, [r3, #16]
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087dc:	69b9      	ldr	r1, [r7, #24]
 80087de:	0148      	lsls	r0, r1, #5
 80087e0:	69f9      	ldr	r1, [r7, #28]
 80087e2:	4401      	add	r1, r0
 80087e4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80087e8:	4313      	orrs	r3, r2
 80087ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80087ec:	79fb      	ldrb	r3, [r7, #7]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d14b      	bne.n	800888a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d009      	beq.n	800880e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	4413      	add	r3, r2
 8008802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008806:	461a      	mov	r2, r3
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	69db      	ldr	r3, [r3, #28]
 800880c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	791b      	ldrb	r3, [r3, #4]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d128      	bne.n	8008868 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008822:	2b00      	cmp	r3, #0
 8008824:	d110      	bne.n	8008848 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	015a      	lsls	r2, r3, #5
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	4413      	add	r3, r2
 800882e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	69ba      	ldr	r2, [r7, #24]
 8008836:	0151      	lsls	r1, r2, #5
 8008838:	69fa      	ldr	r2, [r7, #28]
 800883a:	440a      	add	r2, r1
 800883c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008840:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008844:	6013      	str	r3, [r2, #0]
 8008846:	e00f      	b.n	8008868 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	015a      	lsls	r2, r3, #5
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	4413      	add	r3, r2
 8008850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	69ba      	ldr	r2, [r7, #24]
 8008858:	0151      	lsls	r1, r2, #5
 800885a:	69fa      	ldr	r2, [r7, #28]
 800885c:	440a      	add	r2, r1
 800885e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008866:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	4413      	add	r3, r2
 8008870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	69ba      	ldr	r2, [r7, #24]
 8008878:	0151      	lsls	r1, r2, #5
 800887a:	69fa      	ldr	r2, [r7, #28]
 800887c:	440a      	add	r2, r1
 800887e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008882:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008886:	6013      	str	r3, [r2, #0]
 8008888:	e166      	b.n	8008b58 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	015a      	lsls	r2, r3, #5
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	4413      	add	r3, r2
 8008892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	69ba      	ldr	r2, [r7, #24]
 800889a:	0151      	lsls	r1, r2, #5
 800889c:	69fa      	ldr	r2, [r7, #28]
 800889e:	440a      	add	r2, r1
 80088a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088a4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80088a8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	791b      	ldrb	r3, [r3, #4]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d015      	beq.n	80088de <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f000 814e 	beq.w	8008b58 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	f003 030f 	and.w	r3, r3, #15
 80088cc:	2101      	movs	r1, #1
 80088ce:	fa01 f303 	lsl.w	r3, r1, r3
 80088d2:	69f9      	ldr	r1, [r7, #28]
 80088d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088d8:	4313      	orrs	r3, r2
 80088da:	634b      	str	r3, [r1, #52]	@ 0x34
 80088dc:	e13c      	b.n	8008b58 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d110      	bne.n	8008910 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	015a      	lsls	r2, r3, #5
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	4413      	add	r3, r2
 80088f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	69ba      	ldr	r2, [r7, #24]
 80088fe:	0151      	lsls	r1, r2, #5
 8008900:	69fa      	ldr	r2, [r7, #28]
 8008902:	440a      	add	r2, r1
 8008904:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008908:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800890c:	6013      	str	r3, [r2, #0]
 800890e:	e00f      	b.n	8008930 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	69ba      	ldr	r2, [r7, #24]
 8008920:	0151      	lsls	r1, r2, #5
 8008922:	69fa      	ldr	r2, [r7, #28]
 8008924:	440a      	add	r2, r1
 8008926:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800892a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800892e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	68d9      	ldr	r1, [r3, #12]
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	781a      	ldrb	r2, [r3, #0]
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	b298      	uxth	r0, r3
 800893e:	79fb      	ldrb	r3, [r7, #7]
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	4603      	mov	r3, r0
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f000 f9b9 	bl	8008cbc <USB_WritePacket>
 800894a:	e105      	b.n	8008b58 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	015a      	lsls	r2, r3, #5
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	4413      	add	r3, r2
 8008954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	69ba      	ldr	r2, [r7, #24]
 800895c:	0151      	lsls	r1, r2, #5
 800895e:	69fa      	ldr	r2, [r7, #28]
 8008960:	440a      	add	r2, r1
 8008962:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008966:	0cdb      	lsrs	r3, r3, #19
 8008968:	04db      	lsls	r3, r3, #19
 800896a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	4413      	add	r3, r2
 8008974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	69ba      	ldr	r2, [r7, #24]
 800897c:	0151      	lsls	r1, r2, #5
 800897e:	69fa      	ldr	r2, [r7, #28]
 8008980:	440a      	add	r2, r1
 8008982:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008986:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800898a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800898e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d132      	bne.n	80089fc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d003      	beq.n	80089a6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	689a      	ldr	r2, [r3, #8]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	689a      	ldr	r2, [r3, #8]
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089ba:	691a      	ldr	r2, [r3, #16]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	6a1b      	ldr	r3, [r3, #32]
 80089c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089c4:	69b9      	ldr	r1, [r7, #24]
 80089c6:	0148      	lsls	r0, r1, #5
 80089c8:	69f9      	ldr	r1, [r7, #28]
 80089ca:	4401      	add	r1, r0
 80089cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80089d0:	4313      	orrs	r3, r2
 80089d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	0151      	lsls	r1, r2, #5
 80089e6:	69fa      	ldr	r2, [r7, #28]
 80089e8:	440a      	add	r2, r1
 80089ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80089f2:	6113      	str	r3, [r2, #16]
 80089f4:	e062      	b.n	8008abc <USB_EPStartXfer+0x490>
 80089f6:	bf00      	nop
 80089f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d123      	bne.n	8008a4c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	015a      	lsls	r2, r3, #5
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a10:	691a      	ldr	r2, [r3, #16]
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a1a:	69b9      	ldr	r1, [r7, #24]
 8008a1c:	0148      	lsls	r0, r1, #5
 8008a1e:	69f9      	ldr	r1, [r7, #28]
 8008a20:	4401      	add	r1, r0
 8008a22:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008a26:	4313      	orrs	r3, r2
 8008a28:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	015a      	lsls	r2, r3, #5
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	4413      	add	r3, r2
 8008a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	69ba      	ldr	r2, [r7, #24]
 8008a3a:	0151      	lsls	r1, r2, #5
 8008a3c:	69fa      	ldr	r2, [r7, #28]
 8008a3e:	440a      	add	r2, r1
 8008a40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a48:	6113      	str	r3, [r2, #16]
 8008a4a:	e037      	b.n	8008abc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	691a      	ldr	r2, [r3, #16]
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	4413      	add	r3, r2
 8008a56:	1e5a      	subs	r2, r3, #1
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a60:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	8afa      	ldrh	r2, [r7, #22]
 8008a68:	fb03 f202 	mul.w	r2, r3, r2
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	015a      	lsls	r2, r3, #5
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	4413      	add	r3, r2
 8008a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a7c:	691a      	ldr	r2, [r3, #16]
 8008a7e:	8afb      	ldrh	r3, [r7, #22]
 8008a80:	04d9      	lsls	r1, r3, #19
 8008a82:	4b38      	ldr	r3, [pc, #224]	@ (8008b64 <USB_EPStartXfer+0x538>)
 8008a84:	400b      	ands	r3, r1
 8008a86:	69b9      	ldr	r1, [r7, #24]
 8008a88:	0148      	lsls	r0, r1, #5
 8008a8a:	69f9      	ldr	r1, [r7, #28]
 8008a8c:	4401      	add	r1, r0
 8008a8e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008a92:	4313      	orrs	r3, r2
 8008a94:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	015a      	lsls	r2, r3, #5
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aa2:	691a      	ldr	r2, [r3, #16]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	6a1b      	ldr	r3, [r3, #32]
 8008aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008aac:	69b9      	ldr	r1, [r7, #24]
 8008aae:	0148      	lsls	r0, r1, #5
 8008ab0:	69f9      	ldr	r1, [r7, #28]
 8008ab2:	4401      	add	r1, r0
 8008ab4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008abc:	79fb      	ldrb	r3, [r7, #7]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d10d      	bne.n	8008ade <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d009      	beq.n	8008ade <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	68d9      	ldr	r1, [r3, #12]
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	015a      	lsls	r2, r3, #5
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ada:	460a      	mov	r2, r1
 8008adc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	791b      	ldrb	r3, [r3, #4]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d128      	bne.n	8008b38 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d110      	bne.n	8008b18 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	015a      	lsls	r2, r3, #5
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	4413      	add	r3, r2
 8008afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	69ba      	ldr	r2, [r7, #24]
 8008b06:	0151      	lsls	r1, r2, #5
 8008b08:	69fa      	ldr	r2, [r7, #28]
 8008b0a:	440a      	add	r2, r1
 8008b0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	e00f      	b.n	8008b38 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	69ba      	ldr	r2, [r7, #24]
 8008b28:	0151      	lsls	r1, r2, #5
 8008b2a:	69fa      	ldr	r2, [r7, #28]
 8008b2c:	440a      	add	r2, r1
 8008b2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	015a      	lsls	r2, r3, #5
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	4413      	add	r3, r2
 8008b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	69ba      	ldr	r2, [r7, #24]
 8008b48:	0151      	lsls	r1, r2, #5
 8008b4a:	69fa      	ldr	r2, [r7, #28]
 8008b4c:	440a      	add	r2, r1
 8008b4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b52:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008b56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3720      	adds	r7, #32
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	1ff80000 	.word	0x1ff80000

08008b68 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b72:	2300      	movs	r3, #0
 8008b74:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	785b      	ldrb	r3, [r3, #1]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d14a      	bne.n	8008c1c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	015a      	lsls	r2, r3, #5
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	4413      	add	r3, r2
 8008b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b9e:	f040 8086 	bne.w	8008cae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	015a      	lsls	r2, r3, #5
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	4413      	add	r3, r2
 8008bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	7812      	ldrb	r2, [r2, #0]
 8008bb6:	0151      	lsls	r1, r2, #5
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	440a      	add	r2, r1
 8008bbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bc0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008bc4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	7812      	ldrb	r2, [r2, #0]
 8008bda:	0151      	lsls	r1, r2, #5
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	440a      	add	r2, r1
 8008be0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008be4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008be8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	3301      	adds	r3, #1
 8008bee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d902      	bls.n	8008c00 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	75fb      	strb	r3, [r7, #23]
          break;
 8008bfe:	e056      	b.n	8008cae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	015a      	lsls	r2, r3, #5
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	4413      	add	r3, r2
 8008c0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c18:	d0e7      	beq.n	8008bea <USB_EPStopXfer+0x82>
 8008c1a:	e048      	b.n	8008cae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c34:	d13b      	bne.n	8008cae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	015a      	lsls	r2, r3, #5
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	4413      	add	r3, r2
 8008c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	683a      	ldr	r2, [r7, #0]
 8008c48:	7812      	ldrb	r2, [r2, #0]
 8008c4a:	0151      	lsls	r1, r2, #5
 8008c4c:	693a      	ldr	r2, [r7, #16]
 8008c4e:	440a      	add	r2, r1
 8008c50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008c58:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	015a      	lsls	r2, r3, #5
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	4413      	add	r3, r2
 8008c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	683a      	ldr	r2, [r7, #0]
 8008c6c:	7812      	ldrb	r2, [r2, #0]
 8008c6e:	0151      	lsls	r1, r2, #5
 8008c70:	693a      	ldr	r2, [r7, #16]
 8008c72:	440a      	add	r2, r1
 8008c74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	3301      	adds	r3, #1
 8008c82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d902      	bls.n	8008c94 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	75fb      	strb	r3, [r7, #23]
          break;
 8008c92:	e00c      	b.n	8008cae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	015a      	lsls	r2, r3, #5
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cac:	d0e7      	beq.n	8008c7e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	371c      	adds	r7, #28
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b089      	sub	sp, #36	@ 0x24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	4611      	mov	r1, r2
 8008cc8:	461a      	mov	r2, r3
 8008cca:	460b      	mov	r3, r1
 8008ccc:	71fb      	strb	r3, [r7, #7]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008cda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d123      	bne.n	8008d2a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008ce2:	88bb      	ldrh	r3, [r7, #4]
 8008ce4:	3303      	adds	r3, #3
 8008ce6:	089b      	lsrs	r3, r3, #2
 8008ce8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008cea:	2300      	movs	r3, #0
 8008cec:	61bb      	str	r3, [r7, #24]
 8008cee:	e018      	b.n	8008d22 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008cf0:	79fb      	ldrb	r3, [r7, #7]
 8008cf2:	031a      	lsls	r2, r3, #12
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	3301      	adds	r3, #1
 8008d08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	3301      	adds	r3, #1
 8008d14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	61bb      	str	r3, [r7, #24]
 8008d22:	69ba      	ldr	r2, [r7, #24]
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d3e2      	bcc.n	8008cf0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3724      	adds	r7, #36	@ 0x24
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b08b      	sub	sp, #44	@ 0x2c
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	4613      	mov	r3, r2
 8008d44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008d4e:	88fb      	ldrh	r3, [r7, #6]
 8008d50:	089b      	lsrs	r3, r3, #2
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008d56:	88fb      	ldrh	r3, [r7, #6]
 8008d58:	f003 0303 	and.w	r3, r3, #3
 8008d5c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008d5e:	2300      	movs	r3, #0
 8008d60:	623b      	str	r3, [r7, #32]
 8008d62:	e014      	b.n	8008d8e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d72:	3301      	adds	r3, #1
 8008d74:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d78:	3301      	adds	r3, #1
 8008d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7e:	3301      	adds	r3, #1
 8008d80:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d84:	3301      	adds	r3, #1
 8008d86:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008d88:	6a3b      	ldr	r3, [r7, #32]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	623b      	str	r3, [r7, #32]
 8008d8e:	6a3a      	ldr	r2, [r7, #32]
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d3e6      	bcc.n	8008d64 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008d96:	8bfb      	ldrh	r3, [r7, #30]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d01e      	beq.n	8008dda <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008da6:	461a      	mov	r2, r3
 8008da8:	f107 0310 	add.w	r3, r7, #16
 8008dac:	6812      	ldr	r2, [r2, #0]
 8008dae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	6a3b      	ldr	r3, [r7, #32]
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	00db      	lsls	r3, r3, #3
 8008db8:	fa22 f303 	lsr.w	r3, r2, r3
 8008dbc:	b2da      	uxtb	r2, r3
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc0:	701a      	strb	r2, [r3, #0]
      i++;
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	623b      	str	r3, [r7, #32]
      pDest++;
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dca:	3301      	adds	r3, #1
 8008dcc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008dce:	8bfb      	ldrh	r3, [r7, #30]
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008dd4:	8bfb      	ldrh	r3, [r7, #30]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1ea      	bne.n	8008db0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	372c      	adds	r7, #44	@ 0x2c
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	785b      	ldrb	r3, [r3, #1]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d12c      	bne.n	8008e5e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	015a      	lsls	r2, r3, #5
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	db12      	blt.n	8008e3c <USB_EPSetStall+0x54>
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00f      	beq.n	8008e3c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	015a      	lsls	r2, r3, #5
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4413      	add	r3, r2
 8008e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	0151      	lsls	r1, r2, #5
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	440a      	add	r2, r1
 8008e32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e36:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008e3a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	0151      	lsls	r1, r2, #5
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	440a      	add	r2, r1
 8008e52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008e5a:	6013      	str	r3, [r2, #0]
 8008e5c:	e02b      	b.n	8008eb6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	015a      	lsls	r2, r3, #5
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	4413      	add	r3, r2
 8008e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	db12      	blt.n	8008e96 <USB_EPSetStall+0xae>
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00f      	beq.n	8008e96 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	015a      	lsls	r2, r3, #5
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	0151      	lsls	r1, r2, #5
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	440a      	add	r2, r1
 8008e8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e90:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008e94:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	015a      	lsls	r2, r3, #5
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	0151      	lsls	r1, r2, #5
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	440a      	add	r2, r1
 8008eac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008eb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008eb4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3714      	adds	r7, #20
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	785b      	ldrb	r3, [r3, #1]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d128      	bne.n	8008f32 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	015a      	lsls	r2, r3, #5
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	0151      	lsls	r1, r2, #5
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	440a      	add	r2, r1
 8008ef6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008efa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008efe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	791b      	ldrb	r3, [r3, #4]
 8008f04:	2b03      	cmp	r3, #3
 8008f06:	d003      	beq.n	8008f10 <USB_EPClearStall+0x4c>
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	791b      	ldrb	r3, [r3, #4]
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d138      	bne.n	8008f82 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	015a      	lsls	r2, r3, #5
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	4413      	add	r3, r2
 8008f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	0151      	lsls	r1, r2, #5
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	440a      	add	r2, r1
 8008f26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f2e:	6013      	str	r3, [r2, #0]
 8008f30:	e027      	b.n	8008f82 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	015a      	lsls	r2, r3, #5
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	0151      	lsls	r1, r2, #5
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	440a      	add	r2, r1
 8008f48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f4c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008f50:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	791b      	ldrb	r3, [r3, #4]
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d003      	beq.n	8008f62 <USB_EPClearStall+0x9e>
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	791b      	ldrb	r3, [r3, #4]
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d10f      	bne.n	8008f82 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	0151      	lsls	r1, r2, #5
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	440a      	add	r2, r1
 8008f78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f80:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	460b      	mov	r3, r1
 8008f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008fae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008fb2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	78fb      	ldrb	r3, [r7, #3]
 8008fbe:	011b      	lsls	r3, r3, #4
 8008fc0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008fc4:	68f9      	ldr	r1, [r7, #12]
 8008fc6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3714      	adds	r7, #20
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008ff6:	f023 0303 	bic.w	r3, r3, #3
 8008ffa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800900a:	f023 0302 	bic.w	r3, r3, #2
 800900e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800901e:	b480      	push	{r7}
 8009020:	b085      	sub	sp, #20
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009038:	f023 0303 	bic.w	r3, r3, #3
 800903c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800904c:	f043 0302 	orr.w	r3, r3, #2
 8009050:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	3714      	adds	r7, #20
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	695b      	ldr	r3, [r3, #20]
 800906c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	4013      	ands	r3, r2
 8009076:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009078:	68fb      	ldr	r3, [r7, #12]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009086:	b480      	push	{r7}
 8009088:	b085      	sub	sp, #20
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090a2:	69db      	ldr	r3, [r3, #28]
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	4013      	ands	r3, r2
 80090a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	0c1b      	lsrs	r3, r3, #16
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3714      	adds	r7, #20
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b085      	sub	sp, #20
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090d6:	69db      	ldr	r3, [r3, #28]
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	4013      	ands	r3, r2
 80090dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	b29b      	uxth	r3, r3
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3714      	adds	r7, #20
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80090ee:	b480      	push	{r7}
 80090f0:	b085      	sub	sp, #20
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	460b      	mov	r3, r1
 80090f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80090fe:	78fb      	ldrb	r3, [r7, #3]
 8009100:	015a      	lsls	r2, r3, #5
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	4413      	add	r3, r2
 8009106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009114:	695b      	ldr	r3, [r3, #20]
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	4013      	ands	r3, r2
 800911a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800911c:	68bb      	ldr	r3, [r7, #8]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr

0800912a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800912a:	b480      	push	{r7}
 800912c:	b087      	sub	sp, #28
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	460b      	mov	r3, r1
 8009134:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800914a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800914c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800914e:	78fb      	ldrb	r3, [r7, #3]
 8009150:	f003 030f 	and.w	r3, r3, #15
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	fa22 f303 	lsr.w	r3, r2, r3
 800915a:	01db      	lsls	r3, r3, #7
 800915c:	b2db      	uxtb	r3, r3
 800915e:	693a      	ldr	r2, [r7, #16]
 8009160:	4313      	orrs	r3, r2
 8009162:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009164:	78fb      	ldrb	r3, [r7, #3]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	4413      	add	r3, r2
 800916c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	4013      	ands	r3, r2
 8009176:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009178:	68bb      	ldr	r3, [r7, #8]
}
 800917a:	4618      	mov	r0, r3
 800917c:	371c      	adds	r7, #28
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009186:	b480      	push	{r7}
 8009188:	b083      	sub	sp, #12
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	695b      	ldr	r3, [r3, #20]
 8009192:	f003 0301 	and.w	r3, r3, #1
}
 8009196:	4618      	mov	r0, r3
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr

080091a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80091a2:	b480      	push	{r7}
 80091a4:	b085      	sub	sp, #20
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80091c0:	f023 0307 	bic.w	r3, r3, #7
 80091c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80091d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b087      	sub	sp, #28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	460b      	mov	r3, r1
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	333c      	adds	r3, #60	@ 0x3c
 80091fe:	3304      	adds	r3, #4
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	4a26      	ldr	r2, [pc, #152]	@ (80092a0 <USB_EP0_OutStart+0xb8>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d90a      	bls.n	8009222 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009218:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800921c:	d101      	bne.n	8009222 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800921e:	2300      	movs	r3, #0
 8009220:	e037      	b.n	8009292 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009228:	461a      	mov	r2, r3
 800922a:	2300      	movs	r3, #0
 800922c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	697a      	ldr	r2, [r7, #20]
 8009238:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800923c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009240:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009250:	f043 0318 	orr.w	r3, r3, #24
 8009254:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009264:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009268:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800926a:	7afb      	ldrb	r3, [r7, #11]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d10f      	bne.n	8009290 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009276:	461a      	mov	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	697a      	ldr	r2, [r7, #20]
 8009286:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800928a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800928e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	371c      	adds	r7, #28
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	4f54300a 	.word	0x4f54300a

080092a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092ac:	2300      	movs	r3, #0
 80092ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3301      	adds	r3, #1
 80092b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092bc:	d901      	bls.n	80092c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	e01b      	b.n	80092fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	daf2      	bge.n	80092b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80092ca:	2300      	movs	r3, #0
 80092cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	f043 0201 	orr.w	r2, r3, #1
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	3301      	adds	r3, #1
 80092de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092e6:	d901      	bls.n	80092ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e006      	b.n	80092fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	f003 0301 	and.w	r3, r3, #1
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d0f0      	beq.n	80092da <USB_CoreReset+0x36>

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
	...

08009308 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	460b      	mov	r3, r1
 8009312:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009314:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009318:	f002 fc46 	bl	800bba8 <USBD_static_malloc>
 800931c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d109      	bne.n	8009338 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	32b0      	adds	r2, #176	@ 0xb0
 800932e:	2100      	movs	r1, #0
 8009330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009334:	2302      	movs	r3, #2
 8009336:	e0d4      	b.n	80094e2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009338:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800933c:	2100      	movs	r1, #0
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f003 f9f3 	bl	800c72a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	32b0      	adds	r2, #176	@ 0xb0
 800934e:	68f9      	ldr	r1, [r7, #12]
 8009350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	32b0      	adds	r2, #176	@ 0xb0
 800935e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	7c1b      	ldrb	r3, [r3, #16]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d138      	bne.n	80093e2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009370:	4b5e      	ldr	r3, [pc, #376]	@ (80094ec <USBD_CDC_Init+0x1e4>)
 8009372:	7819      	ldrb	r1, [r3, #0]
 8009374:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009378:	2202      	movs	r2, #2
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f002 faf1 	bl	800b962 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009380:	4b5a      	ldr	r3, [pc, #360]	@ (80094ec <USBD_CDC_Init+0x1e4>)
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	f003 020f 	and.w	r2, r3, #15
 8009388:	6879      	ldr	r1, [r7, #4]
 800938a:	4613      	mov	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	440b      	add	r3, r1
 8009394:	3324      	adds	r3, #36	@ 0x24
 8009396:	2201      	movs	r2, #1
 8009398:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800939a:	4b55      	ldr	r3, [pc, #340]	@ (80094f0 <USBD_CDC_Init+0x1e8>)
 800939c:	7819      	ldrb	r1, [r3, #0]
 800939e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80093a2:	2202      	movs	r2, #2
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f002 fadc 	bl	800b962 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80093aa:	4b51      	ldr	r3, [pc, #324]	@ (80094f0 <USBD_CDC_Init+0x1e8>)
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	f003 020f 	and.w	r2, r3, #15
 80093b2:	6879      	ldr	r1, [r7, #4]
 80093b4:	4613      	mov	r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	4413      	add	r3, r2
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	440b      	add	r3, r1
 80093be:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80093c2:	2201      	movs	r2, #1
 80093c4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80093c6:	4b4b      	ldr	r3, [pc, #300]	@ (80094f4 <USBD_CDC_Init+0x1ec>)
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	f003 020f 	and.w	r2, r3, #15
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	4613      	mov	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	4413      	add	r3, r2
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	440b      	add	r3, r1
 80093da:	3326      	adds	r3, #38	@ 0x26
 80093dc:	2210      	movs	r2, #16
 80093de:	801a      	strh	r2, [r3, #0]
 80093e0:	e035      	b.n	800944e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80093e2:	4b42      	ldr	r3, [pc, #264]	@ (80094ec <USBD_CDC_Init+0x1e4>)
 80093e4:	7819      	ldrb	r1, [r3, #0]
 80093e6:	2340      	movs	r3, #64	@ 0x40
 80093e8:	2202      	movs	r2, #2
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f002 fab9 	bl	800b962 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80093f0:	4b3e      	ldr	r3, [pc, #248]	@ (80094ec <USBD_CDC_Init+0x1e4>)
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	f003 020f 	and.w	r2, r3, #15
 80093f8:	6879      	ldr	r1, [r7, #4]
 80093fa:	4613      	mov	r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	4413      	add	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	440b      	add	r3, r1
 8009404:	3324      	adds	r3, #36	@ 0x24
 8009406:	2201      	movs	r2, #1
 8009408:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800940a:	4b39      	ldr	r3, [pc, #228]	@ (80094f0 <USBD_CDC_Init+0x1e8>)
 800940c:	7819      	ldrb	r1, [r3, #0]
 800940e:	2340      	movs	r3, #64	@ 0x40
 8009410:	2202      	movs	r2, #2
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f002 faa5 	bl	800b962 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009418:	4b35      	ldr	r3, [pc, #212]	@ (80094f0 <USBD_CDC_Init+0x1e8>)
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	f003 020f 	and.w	r2, r3, #15
 8009420:	6879      	ldr	r1, [r7, #4]
 8009422:	4613      	mov	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4413      	add	r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	440b      	add	r3, r1
 800942c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009430:	2201      	movs	r2, #1
 8009432:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009434:	4b2f      	ldr	r3, [pc, #188]	@ (80094f4 <USBD_CDC_Init+0x1ec>)
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	f003 020f 	and.w	r2, r3, #15
 800943c:	6879      	ldr	r1, [r7, #4]
 800943e:	4613      	mov	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4413      	add	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	440b      	add	r3, r1
 8009448:	3326      	adds	r3, #38	@ 0x26
 800944a:	2210      	movs	r2, #16
 800944c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800944e:	4b29      	ldr	r3, [pc, #164]	@ (80094f4 <USBD_CDC_Init+0x1ec>)
 8009450:	7819      	ldrb	r1, [r3, #0]
 8009452:	2308      	movs	r3, #8
 8009454:	2203      	movs	r2, #3
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f002 fa83 	bl	800b962 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800945c:	4b25      	ldr	r3, [pc, #148]	@ (80094f4 <USBD_CDC_Init+0x1ec>)
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	f003 020f 	and.w	r2, r3, #15
 8009464:	6879      	ldr	r1, [r7, #4]
 8009466:	4613      	mov	r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	4413      	add	r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	440b      	add	r3, r1
 8009470:	3324      	adds	r3, #36	@ 0x24
 8009472:	2201      	movs	r2, #1
 8009474:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	33b0      	adds	r3, #176	@ 0xb0
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	4413      	add	r3, r2
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2200      	movs	r2, #0
 8009496:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80094ac:	2302      	movs	r3, #2
 80094ae:	e018      	b.n	80094e2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	7c1b      	ldrb	r3, [r3, #16]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10a      	bne.n	80094ce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094b8:	4b0d      	ldr	r3, [pc, #52]	@ (80094f0 <USBD_CDC_Init+0x1e8>)
 80094ba:	7819      	ldrb	r1, [r3, #0]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80094c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f002 fb3a 	bl	800bb40 <USBD_LL_PrepareReceive>
 80094cc:	e008      	b.n	80094e0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094ce:	4b08      	ldr	r3, [pc, #32]	@ (80094f0 <USBD_CDC_Init+0x1e8>)
 80094d0:	7819      	ldrb	r1, [r3, #0]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80094d8:	2340      	movs	r3, #64	@ 0x40
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f002 fb30 	bl	800bb40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	20000097 	.word	0x20000097
 80094f0:	20000098 	.word	0x20000098
 80094f4:	20000099 	.word	0x20000099

080094f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	460b      	mov	r3, r1
 8009502:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009504:	4b3a      	ldr	r3, [pc, #232]	@ (80095f0 <USBD_CDC_DeInit+0xf8>)
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	4619      	mov	r1, r3
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f002 fa4f 	bl	800b9ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009510:	4b37      	ldr	r3, [pc, #220]	@ (80095f0 <USBD_CDC_DeInit+0xf8>)
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	f003 020f 	and.w	r2, r3, #15
 8009518:	6879      	ldr	r1, [r7, #4]
 800951a:	4613      	mov	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	440b      	add	r3, r1
 8009524:	3324      	adds	r3, #36	@ 0x24
 8009526:	2200      	movs	r2, #0
 8009528:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800952a:	4b32      	ldr	r3, [pc, #200]	@ (80095f4 <USBD_CDC_DeInit+0xfc>)
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	4619      	mov	r1, r3
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f002 fa3c 	bl	800b9ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009536:	4b2f      	ldr	r3, [pc, #188]	@ (80095f4 <USBD_CDC_DeInit+0xfc>)
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	f003 020f 	and.w	r2, r3, #15
 800953e:	6879      	ldr	r1, [r7, #4]
 8009540:	4613      	mov	r3, r2
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	4413      	add	r3, r2
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	440b      	add	r3, r1
 800954a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800954e:	2200      	movs	r2, #0
 8009550:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009552:	4b29      	ldr	r3, [pc, #164]	@ (80095f8 <USBD_CDC_DeInit+0x100>)
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	4619      	mov	r1, r3
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f002 fa28 	bl	800b9ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800955e:	4b26      	ldr	r3, [pc, #152]	@ (80095f8 <USBD_CDC_DeInit+0x100>)
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	f003 020f 	and.w	r2, r3, #15
 8009566:	6879      	ldr	r1, [r7, #4]
 8009568:	4613      	mov	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	4413      	add	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	440b      	add	r3, r1
 8009572:	3324      	adds	r3, #36	@ 0x24
 8009574:	2200      	movs	r2, #0
 8009576:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009578:	4b1f      	ldr	r3, [pc, #124]	@ (80095f8 <USBD_CDC_DeInit+0x100>)
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	f003 020f 	and.w	r2, r3, #15
 8009580:	6879      	ldr	r1, [r7, #4]
 8009582:	4613      	mov	r3, r2
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4413      	add	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	440b      	add	r3, r1
 800958c:	3326      	adds	r3, #38	@ 0x26
 800958e:	2200      	movs	r2, #0
 8009590:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	32b0      	adds	r2, #176	@ 0xb0
 800959c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d01f      	beq.n	80095e4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	33b0      	adds	r3, #176	@ 0xb0
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4413      	add	r3, r2
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	32b0      	adds	r2, #176	@ 0xb0
 80095c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c6:	4618      	mov	r0, r3
 80095c8:	f002 fafc 	bl	800bbc4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	32b0      	adds	r2, #176	@ 0xb0
 80095d6:	2100      	movs	r1, #0
 80095d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	20000097 	.word	0x20000097
 80095f4:	20000098 	.word	0x20000098
 80095f8:	20000099 	.word	0x20000099

080095fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	32b0      	adds	r2, #176	@ 0xb0
 8009610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009614:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009616:	2300      	movs	r3, #0
 8009618:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800961a:	2300      	movs	r3, #0
 800961c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d101      	bne.n	800962c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009628:	2303      	movs	r3, #3
 800962a:	e0bf      	b.n	80097ac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009634:	2b00      	cmp	r3, #0
 8009636:	d050      	beq.n	80096da <USBD_CDC_Setup+0xde>
 8009638:	2b20      	cmp	r3, #32
 800963a:	f040 80af 	bne.w	800979c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	88db      	ldrh	r3, [r3, #6]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d03a      	beq.n	80096bc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	b25b      	sxtb	r3, r3
 800964c:	2b00      	cmp	r3, #0
 800964e:	da1b      	bge.n	8009688 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	33b0      	adds	r3, #176	@ 0xb0
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	4413      	add	r3, r2
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	683a      	ldr	r2, [r7, #0]
 8009664:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009666:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009668:	683a      	ldr	r2, [r7, #0]
 800966a:	88d2      	ldrh	r2, [r2, #6]
 800966c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	88db      	ldrh	r3, [r3, #6]
 8009672:	2b07      	cmp	r3, #7
 8009674:	bf28      	it	cs
 8009676:	2307      	movcs	r3, #7
 8009678:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	89fa      	ldrh	r2, [r7, #14]
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f001 fd53 	bl	800b12c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009686:	e090      	b.n	80097aa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	785a      	ldrb	r2, [r3, #1]
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	88db      	ldrh	r3, [r3, #6]
 8009696:	2b3f      	cmp	r3, #63	@ 0x3f
 8009698:	d803      	bhi.n	80096a2 <USBD_CDC_Setup+0xa6>
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	88db      	ldrh	r3, [r3, #6]
 800969e:	b2da      	uxtb	r2, r3
 80096a0:	e000      	b.n	80096a4 <USBD_CDC_Setup+0xa8>
 80096a2:	2240      	movs	r2, #64	@ 0x40
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80096aa:	6939      	ldr	r1, [r7, #16]
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80096b2:	461a      	mov	r2, r3
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f001 fd65 	bl	800b184 <USBD_CtlPrepareRx>
      break;
 80096ba:	e076      	b.n	80097aa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	33b0      	adds	r3, #176	@ 0xb0
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	7850      	ldrb	r0, [r2, #1]
 80096d2:	2200      	movs	r2, #0
 80096d4:	6839      	ldr	r1, [r7, #0]
 80096d6:	4798      	blx	r3
      break;
 80096d8:	e067      	b.n	80097aa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	785b      	ldrb	r3, [r3, #1]
 80096de:	2b0b      	cmp	r3, #11
 80096e0:	d851      	bhi.n	8009786 <USBD_CDC_Setup+0x18a>
 80096e2:	a201      	add	r2, pc, #4	@ (adr r2, 80096e8 <USBD_CDC_Setup+0xec>)
 80096e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e8:	08009719 	.word	0x08009719
 80096ec:	08009795 	.word	0x08009795
 80096f0:	08009787 	.word	0x08009787
 80096f4:	08009787 	.word	0x08009787
 80096f8:	08009787 	.word	0x08009787
 80096fc:	08009787 	.word	0x08009787
 8009700:	08009787 	.word	0x08009787
 8009704:	08009787 	.word	0x08009787
 8009708:	08009787 	.word	0x08009787
 800970c:	08009787 	.word	0x08009787
 8009710:	08009743 	.word	0x08009743
 8009714:	0800976d 	.word	0x0800976d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800971e:	b2db      	uxtb	r3, r3
 8009720:	2b03      	cmp	r3, #3
 8009722:	d107      	bne.n	8009734 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009724:	f107 030a 	add.w	r3, r7, #10
 8009728:	2202      	movs	r2, #2
 800972a:	4619      	mov	r1, r3
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f001 fcfd 	bl	800b12c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009732:	e032      	b.n	800979a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009734:	6839      	ldr	r1, [r7, #0]
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f001 fc7b 	bl	800b032 <USBD_CtlError>
            ret = USBD_FAIL;
 800973c:	2303      	movs	r3, #3
 800973e:	75fb      	strb	r3, [r7, #23]
          break;
 8009740:	e02b      	b.n	800979a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b03      	cmp	r3, #3
 800974c:	d107      	bne.n	800975e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800974e:	f107 030d 	add.w	r3, r7, #13
 8009752:	2201      	movs	r2, #1
 8009754:	4619      	mov	r1, r3
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f001 fce8 	bl	800b12c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800975c:	e01d      	b.n	800979a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800975e:	6839      	ldr	r1, [r7, #0]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f001 fc66 	bl	800b032 <USBD_CtlError>
            ret = USBD_FAIL;
 8009766:	2303      	movs	r3, #3
 8009768:	75fb      	strb	r3, [r7, #23]
          break;
 800976a:	e016      	b.n	800979a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b03      	cmp	r3, #3
 8009776:	d00f      	beq.n	8009798 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f001 fc59 	bl	800b032 <USBD_CtlError>
            ret = USBD_FAIL;
 8009780:	2303      	movs	r3, #3
 8009782:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009784:	e008      	b.n	8009798 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f001 fc52 	bl	800b032 <USBD_CtlError>
          ret = USBD_FAIL;
 800978e:	2303      	movs	r3, #3
 8009790:	75fb      	strb	r3, [r7, #23]
          break;
 8009792:	e002      	b.n	800979a <USBD_CDC_Setup+0x19e>
          break;
 8009794:	bf00      	nop
 8009796:	e008      	b.n	80097aa <USBD_CDC_Setup+0x1ae>
          break;
 8009798:	bf00      	nop
      }
      break;
 800979a:	e006      	b.n	80097aa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800979c:	6839      	ldr	r1, [r7, #0]
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f001 fc47 	bl	800b032 <USBD_CtlError>
      ret = USBD_FAIL;
 80097a4:	2303      	movs	r3, #3
 80097a6:	75fb      	strb	r3, [r7, #23]
      break;
 80097a8:	bf00      	nop
  }

  return (uint8_t)ret;
 80097aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	460b      	mov	r3, r1
 80097be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	32b0      	adds	r2, #176	@ 0xb0
 80097d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d101      	bne.n	80097de <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80097da:	2303      	movs	r3, #3
 80097dc:	e065      	b.n	80098aa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	32b0      	adds	r2, #176	@ 0xb0
 80097e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80097ee:	78fb      	ldrb	r3, [r7, #3]
 80097f0:	f003 020f 	and.w	r2, r3, #15
 80097f4:	6879      	ldr	r1, [r7, #4]
 80097f6:	4613      	mov	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4413      	add	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	440b      	add	r3, r1
 8009800:	3318      	adds	r3, #24
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d02f      	beq.n	8009868 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009808:	78fb      	ldrb	r3, [r7, #3]
 800980a:	f003 020f 	and.w	r2, r3, #15
 800980e:	6879      	ldr	r1, [r7, #4]
 8009810:	4613      	mov	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4413      	add	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	440b      	add	r3, r1
 800981a:	3318      	adds	r3, #24
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	78fb      	ldrb	r3, [r7, #3]
 8009820:	f003 010f 	and.w	r1, r3, #15
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	460b      	mov	r3, r1
 8009828:	00db      	lsls	r3, r3, #3
 800982a:	440b      	add	r3, r1
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4403      	add	r3, r0
 8009830:	331c      	adds	r3, #28
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	fbb2 f1f3 	udiv	r1, r2, r3
 8009838:	fb01 f303 	mul.w	r3, r1, r3
 800983c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800983e:	2b00      	cmp	r3, #0
 8009840:	d112      	bne.n	8009868 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009842:	78fb      	ldrb	r3, [r7, #3]
 8009844:	f003 020f 	and.w	r2, r3, #15
 8009848:	6879      	ldr	r1, [r7, #4]
 800984a:	4613      	mov	r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	440b      	add	r3, r1
 8009854:	3318      	adds	r3, #24
 8009856:	2200      	movs	r2, #0
 8009858:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800985a:	78f9      	ldrb	r1, [r7, #3]
 800985c:	2300      	movs	r3, #0
 800985e:	2200      	movs	r2, #0
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f002 f94c 	bl	800bafe <USBD_LL_Transmit>
 8009866:	e01f      	b.n	80098a8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	2200      	movs	r2, #0
 800986c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	33b0      	adds	r3, #176	@ 0xb0
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	4413      	add	r3, r2
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d010      	beq.n	80098a8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	33b0      	adds	r3, #176	@ 0xb0
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	4413      	add	r3, r2
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	68ba      	ldr	r2, [r7, #8]
 800989a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80098a4:	78fa      	ldrb	r2, [r7, #3]
 80098a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	460b      	mov	r3, r1
 80098bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	32b0      	adds	r2, #176	@ 0xb0
 80098c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	32b0      	adds	r2, #176	@ 0xb0
 80098d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80098e0:	2303      	movs	r3, #3
 80098e2:	e01a      	b.n	800991a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80098e4:	78fb      	ldrb	r3, [r7, #3]
 80098e6:	4619      	mov	r1, r3
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f002 f94a 	bl	800bb82 <USBD_LL_GetRxDataSize>
 80098ee:	4602      	mov	r2, r0
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	33b0      	adds	r3, #176	@ 0xb0
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009914:	4611      	mov	r1, r2
 8009916:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b084      	sub	sp, #16
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	32b0      	adds	r2, #176	@ 0xb0
 8009934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009938:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d101      	bne.n	8009944 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009940:	2303      	movs	r3, #3
 8009942:	e024      	b.n	800998e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	33b0      	adds	r3, #176	@ 0xb0
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d019      	beq.n	800998c <USBD_CDC_EP0_RxReady+0x6a>
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800995e:	2bff      	cmp	r3, #255	@ 0xff
 8009960:	d014      	beq.n	800998c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	33b0      	adds	r3, #176	@ 0xb0
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4413      	add	r3, r2
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800997a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009982:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	22ff      	movs	r2, #255	@ 0xff
 8009988:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
	...

08009998 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b086      	sub	sp, #24
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80099a0:	2182      	movs	r1, #130	@ 0x82
 80099a2:	4818      	ldr	r0, [pc, #96]	@ (8009a04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80099a4:	f000 fd0f 	bl	800a3c6 <USBD_GetEpDesc>
 80099a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80099aa:	2101      	movs	r1, #1
 80099ac:	4815      	ldr	r0, [pc, #84]	@ (8009a04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80099ae:	f000 fd0a 	bl	800a3c6 <USBD_GetEpDesc>
 80099b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80099b4:	2181      	movs	r1, #129	@ 0x81
 80099b6:	4813      	ldr	r0, [pc, #76]	@ (8009a04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80099b8:	f000 fd05 	bl	800a3c6 <USBD_GetEpDesc>
 80099bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d002      	beq.n	80099ca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	2210      	movs	r2, #16
 80099c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d006      	beq.n	80099de <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099d8:	711a      	strb	r2, [r3, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d006      	beq.n	80099f2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099ec:	711a      	strb	r2, [r3, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2243      	movs	r2, #67	@ 0x43
 80099f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80099f8:	4b02      	ldr	r3, [pc, #8]	@ (8009a04 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3718      	adds	r7, #24
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	20000054 	.word	0x20000054

08009a08 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b086      	sub	sp, #24
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a10:	2182      	movs	r1, #130	@ 0x82
 8009a12:	4818      	ldr	r0, [pc, #96]	@ (8009a74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a14:	f000 fcd7 	bl	800a3c6 <USBD_GetEpDesc>
 8009a18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a1a:	2101      	movs	r1, #1
 8009a1c:	4815      	ldr	r0, [pc, #84]	@ (8009a74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a1e:	f000 fcd2 	bl	800a3c6 <USBD_GetEpDesc>
 8009a22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009a24:	2181      	movs	r1, #129	@ 0x81
 8009a26:	4813      	ldr	r0, [pc, #76]	@ (8009a74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a28:	f000 fccd 	bl	800a3c6 <USBD_GetEpDesc>
 8009a2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d002      	beq.n	8009a3a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	2210      	movs	r2, #16
 8009a38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d006      	beq.n	8009a4e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	2200      	movs	r2, #0
 8009a44:	711a      	strb	r2, [r3, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f042 0202 	orr.w	r2, r2, #2
 8009a4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d006      	beq.n	8009a62 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	711a      	strb	r2, [r3, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f042 0202 	orr.w	r2, r2, #2
 8009a60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2243      	movs	r2, #67	@ 0x43
 8009a66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009a68:	4b02      	ldr	r3, [pc, #8]	@ (8009a74 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3718      	adds	r7, #24
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	20000054 	.word	0x20000054

08009a78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a80:	2182      	movs	r1, #130	@ 0x82
 8009a82:	4818      	ldr	r0, [pc, #96]	@ (8009ae4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009a84:	f000 fc9f 	bl	800a3c6 <USBD_GetEpDesc>
 8009a88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a8a:	2101      	movs	r1, #1
 8009a8c:	4815      	ldr	r0, [pc, #84]	@ (8009ae4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009a8e:	f000 fc9a 	bl	800a3c6 <USBD_GetEpDesc>
 8009a92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009a94:	2181      	movs	r1, #129	@ 0x81
 8009a96:	4813      	ldr	r0, [pc, #76]	@ (8009ae4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009a98:	f000 fc95 	bl	800a3c6 <USBD_GetEpDesc>
 8009a9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d002      	beq.n	8009aaa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	2210      	movs	r2, #16
 8009aa8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d006      	beq.n	8009abe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ab8:	711a      	strb	r2, [r3, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d006      	beq.n	8009ad2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009acc:	711a      	strb	r2, [r3, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2243      	movs	r2, #67	@ 0x43
 8009ad6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009ad8:	4b02      	ldr	r3, [pc, #8]	@ (8009ae4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3718      	adds	r7, #24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	20000054 	.word	0x20000054

08009ae8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	220a      	movs	r2, #10
 8009af4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009af6:	4b03      	ldr	r3, [pc, #12]	@ (8009b04 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr
 8009b04:	20000010 	.word	0x20000010

08009b08 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d101      	bne.n	8009b1c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009b18:	2303      	movs	r3, #3
 8009b1a:	e009      	b.n	8009b30 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	33b0      	adds	r3, #176	@ 0xb0
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4413      	add	r3, r2
 8009b2a:	683a      	ldr	r2, [r7, #0]
 8009b2c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	32b0      	adds	r2, #176	@ 0xb0
 8009b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b56:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	e008      	b.n	8009b74 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	68ba      	ldr	r2, [r7, #8]
 8009b66:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	371c      	adds	r7, #28
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	32b0      	adds	r2, #176	@ 0xb0
 8009b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b98:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d101      	bne.n	8009ba4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	e004      	b.n	8009bae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	683a      	ldr	r2, [r7, #0]
 8009ba8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3714      	adds	r7, #20
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
	...

08009bbc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	32b0      	adds	r2, #176	@ 0xb0
 8009bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bd2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	32b0      	adds	r2, #176	@ 0xb0
 8009bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d101      	bne.n	8009bea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e018      	b.n	8009c1c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	7c1b      	ldrb	r3, [r3, #16]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d10a      	bne.n	8009c08 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8009c24 <USBD_CDC_ReceivePacket+0x68>)
 8009bf4:	7819      	ldrb	r1, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009bfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f001 ff9d 	bl	800bb40 <USBD_LL_PrepareReceive>
 8009c06:	e008      	b.n	8009c1a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c08:	4b06      	ldr	r3, [pc, #24]	@ (8009c24 <USBD_CDC_ReceivePacket+0x68>)
 8009c0a:	7819      	ldrb	r1, [r3, #0]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c12:	2340      	movs	r3, #64	@ 0x40
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f001 ff93 	bl	800bb40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	20000098 	.word	0x20000098

08009c28 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	4613      	mov	r3, r2
 8009c34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d101      	bne.n	8009c40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	e01f      	b.n	8009c80 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d003      	beq.n	8009c66 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	68ba      	ldr	r2, [r7, #8]
 8009c62:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	79fa      	ldrb	r2, [r7, #7]
 8009c72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f001 fe0d 	bl	800b894 <USBD_LL_Init>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3718      	adds	r7, #24
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c92:	2300      	movs	r3, #0
 8009c94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d101      	bne.n	8009ca0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e025      	b.n	8009cec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	32ae      	adds	r2, #174	@ 0xae
 8009cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00f      	beq.n	8009cdc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	32ae      	adds	r2, #174	@ 0xae
 8009cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ccc:	f107 020e 	add.w	r2, r7, #14
 8009cd0:	4610      	mov	r0, r2
 8009cd2:	4798      	blx	r3
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009ce2:	1c5a      	adds	r2, r3, #1
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f001 fe15 	bl	800b92c <USBD_LL_Start>
 8009d02:	4603      	mov	r3, r0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3708      	adds	r7, #8
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d14:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	370c      	adds	r7, #12
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b084      	sub	sp, #16
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d009      	beq.n	8009d50 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	78fa      	ldrb	r2, [r7, #3]
 8009d46:	4611      	mov	r1, r2
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	4798      	blx	r3
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b084      	sub	sp, #16
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	460b      	mov	r3, r1
 8009d64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d66:	2300      	movs	r3, #0
 8009d68:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	78fa      	ldrb	r2, [r7, #3]
 8009d74:	4611      	mov	r1, r2
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	4798      	blx	r3
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d001      	beq.n	8009d84 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009d80:	2303      	movs	r3, #3
 8009d82:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b084      	sub	sp, #16
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009d9e:	6839      	ldr	r1, [r7, #0]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f001 f90c 	bl	800afbe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009db4:	461a      	mov	r2, r3
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009dc2:	f003 031f 	and.w	r3, r3, #31
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d01a      	beq.n	8009e00 <USBD_LL_SetupStage+0x72>
 8009dca:	2b02      	cmp	r3, #2
 8009dcc:	d822      	bhi.n	8009e14 <USBD_LL_SetupStage+0x86>
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d002      	beq.n	8009dd8 <USBD_LL_SetupStage+0x4a>
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d00a      	beq.n	8009dec <USBD_LL_SetupStage+0x5e>
 8009dd6:	e01d      	b.n	8009e14 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009dde:	4619      	mov	r1, r3
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fb63 	bl	800a4ac <USBD_StdDevReq>
 8009de6:	4603      	mov	r3, r0
 8009de8:	73fb      	strb	r3, [r7, #15]
      break;
 8009dea:	e020      	b.n	8009e2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009df2:	4619      	mov	r1, r3
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 fbcb 	bl	800a590 <USBD_StdItfReq>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8009dfe:	e016      	b.n	8009e2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009e06:	4619      	mov	r1, r3
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 fc2d 	bl	800a668 <USBD_StdEPReq>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	73fb      	strb	r3, [r7, #15]
      break;
 8009e12:	e00c      	b.n	8009e2e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009e1a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	4619      	mov	r1, r3
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f001 fde2 	bl	800b9ec <USBD_LL_StallEP>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e2c:	bf00      	nop
  }

  return ret;
 8009e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	460b      	mov	r3, r1
 8009e42:	607a      	str	r2, [r7, #4]
 8009e44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009e4a:	7afb      	ldrb	r3, [r7, #11]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d16e      	bne.n	8009f2e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009e56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009e5e:	2b03      	cmp	r3, #3
 8009e60:	f040 8098 	bne.w	8009f94 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	689a      	ldr	r2, [r3, #8]
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d913      	bls.n	8009e98 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	689a      	ldr	r2, [r3, #8]
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	1ad2      	subs	r2, r2, r3
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	68da      	ldr	r2, [r3, #12]
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	4293      	cmp	r3, r2
 8009e88:	bf28      	it	cs
 8009e8a:	4613      	movcs	r3, r2
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	6879      	ldr	r1, [r7, #4]
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f001 f994 	bl	800b1be <USBD_CtlContinueRx>
 8009e96:	e07d      	b.n	8009f94 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009e9e:	f003 031f 	and.w	r3, r3, #31
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d014      	beq.n	8009ed0 <USBD_LL_DataOutStage+0x98>
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d81d      	bhi.n	8009ee6 <USBD_LL_DataOutStage+0xae>
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d002      	beq.n	8009eb4 <USBD_LL_DataOutStage+0x7c>
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d003      	beq.n	8009eba <USBD_LL_DataOutStage+0x82>
 8009eb2:	e018      	b.n	8009ee6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	75bb      	strb	r3, [r7, #22]
            break;
 8009eb8:	e018      	b.n	8009eec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f000 fa64 	bl	800a392 <USBD_CoreFindIF>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	75bb      	strb	r3, [r7, #22]
            break;
 8009ece:	e00d      	b.n	8009eec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	4619      	mov	r1, r3
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f000 fa66 	bl	800a3ac <USBD_CoreFindEP>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	75bb      	strb	r3, [r7, #22]
            break;
 8009ee4:	e002      	b.n	8009eec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	75bb      	strb	r3, [r7, #22]
            break;
 8009eea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009eec:	7dbb      	ldrb	r3, [r7, #22]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d119      	bne.n	8009f26 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	2b03      	cmp	r3, #3
 8009efc:	d113      	bne.n	8009f26 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009efe:	7dba      	ldrb	r2, [r7, #22]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	32ae      	adds	r2, #174	@ 0xae
 8009f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00b      	beq.n	8009f26 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009f0e:	7dba      	ldrb	r2, [r7, #22]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009f16:	7dba      	ldrb	r2, [r7, #22]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	32ae      	adds	r2, #174	@ 0xae
 8009f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f20:	691b      	ldr	r3, [r3, #16]
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009f26:	68f8      	ldr	r0, [r7, #12]
 8009f28:	f001 f95a 	bl	800b1e0 <USBD_CtlSendStatus>
 8009f2c:	e032      	b.n	8009f94 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009f2e:	7afb      	ldrb	r3, [r7, #11]
 8009f30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	4619      	mov	r1, r3
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f000 fa37 	bl	800a3ac <USBD_CoreFindEP>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f42:	7dbb      	ldrb	r3, [r7, #22]
 8009f44:	2bff      	cmp	r3, #255	@ 0xff
 8009f46:	d025      	beq.n	8009f94 <USBD_LL_DataOutStage+0x15c>
 8009f48:	7dbb      	ldrb	r3, [r7, #22]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d122      	bne.n	8009f94 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	d117      	bne.n	8009f8a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009f5a:	7dba      	ldrb	r2, [r7, #22]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	32ae      	adds	r2, #174	@ 0xae
 8009f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f64:	699b      	ldr	r3, [r3, #24]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00f      	beq.n	8009f8a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009f6a:	7dba      	ldrb	r2, [r7, #22]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009f72:	7dba      	ldrb	r2, [r7, #22]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	32ae      	adds	r2, #174	@ 0xae
 8009f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f7c:	699b      	ldr	r3, [r3, #24]
 8009f7e:	7afa      	ldrb	r2, [r7, #11]
 8009f80:	4611      	mov	r1, r2
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	4798      	blx	r3
 8009f86:	4603      	mov	r3, r0
 8009f88:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009f8a:	7dfb      	ldrb	r3, [r7, #23]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d001      	beq.n	8009f94 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009f90:	7dfb      	ldrb	r3, [r7, #23]
 8009f92:	e000      	b.n	8009f96 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3718      	adds	r7, #24
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b086      	sub	sp, #24
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	60f8      	str	r0, [r7, #12]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	607a      	str	r2, [r7, #4]
 8009faa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009fac:	7afb      	ldrb	r3, [r7, #11]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d16f      	bne.n	800a092 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	3314      	adds	r3, #20
 8009fb6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d15a      	bne.n	800a078 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	689a      	ldr	r2, [r3, #8]
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d914      	bls.n	8009ff8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	689a      	ldr	r2, [r3, #8]
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	1ad2      	subs	r2, r2, r3
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	6879      	ldr	r1, [r7, #4]
 8009fe4:	68f8      	ldr	r0, [r7, #12]
 8009fe6:	f001 f8bc 	bl	800b162 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fea:	2300      	movs	r3, #0
 8009fec:	2200      	movs	r2, #0
 8009fee:	2100      	movs	r1, #0
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f001 fda5 	bl	800bb40 <USBD_LL_PrepareReceive>
 8009ff6:	e03f      	b.n	800a078 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	68da      	ldr	r2, [r3, #12]
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	429a      	cmp	r2, r3
 800a002:	d11c      	bne.n	800a03e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	685a      	ldr	r2, [r3, #4]
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d316      	bcc.n	800a03e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	685a      	ldr	r2, [r3, #4]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d20f      	bcs.n	800a03e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a01e:	2200      	movs	r2, #0
 800a020:	2100      	movs	r1, #0
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f001 f89d 	bl	800b162 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a030:	2300      	movs	r3, #0
 800a032:	2200      	movs	r2, #0
 800a034:	2100      	movs	r1, #0
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f001 fd82 	bl	800bb40 <USBD_LL_PrepareReceive>
 800a03c:	e01c      	b.n	800a078 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a044:	b2db      	uxtb	r3, r3
 800a046:	2b03      	cmp	r3, #3
 800a048:	d10f      	bne.n	800a06a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d009      	beq.n	800a06a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2200      	movs	r2, #0
 800a05a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a06a:	2180      	movs	r1, #128	@ 0x80
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f001 fcbd 	bl	800b9ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	f001 f8c7 	bl	800b206 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d03a      	beq.n	800a0f8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f7ff fe42 	bl	8009d0c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a090:	e032      	b.n	800a0f8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a092:	7afb      	ldrb	r3, [r7, #11]
 800a094:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	4619      	mov	r1, r3
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f000 f985 	bl	800a3ac <USBD_CoreFindEP>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0a6:	7dfb      	ldrb	r3, [r7, #23]
 800a0a8:	2bff      	cmp	r3, #255	@ 0xff
 800a0aa:	d025      	beq.n	800a0f8 <USBD_LL_DataInStage+0x15a>
 800a0ac:	7dfb      	ldrb	r3, [r7, #23]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d122      	bne.n	800a0f8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	2b03      	cmp	r3, #3
 800a0bc:	d11c      	bne.n	800a0f8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a0be:	7dfa      	ldrb	r2, [r7, #23]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	32ae      	adds	r2, #174	@ 0xae
 800a0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c8:	695b      	ldr	r3, [r3, #20]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d014      	beq.n	800a0f8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a0ce:	7dfa      	ldrb	r2, [r7, #23]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a0d6:	7dfa      	ldrb	r2, [r7, #23]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	32ae      	adds	r2, #174	@ 0xae
 800a0dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0e0:	695b      	ldr	r3, [r3, #20]
 800a0e2:	7afa      	ldrb	r2, [r7, #11]
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	4798      	blx	r3
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a0ee:	7dbb      	ldrb	r3, [r7, #22]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d001      	beq.n	800a0f8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a0f4:	7dbb      	ldrb	r3, [r7, #22]
 800a0f6:	e000      	b.n	800a0fa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3718      	adds	r7, #24
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b084      	sub	sp, #16
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a10a:	2300      	movs	r3, #0
 800a10c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d014      	beq.n	800a168 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00e      	beq.n	800a168 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	6852      	ldr	r2, [r2, #4]
 800a156:	b2d2      	uxtb	r2, r2
 800a158:	4611      	mov	r1, r2
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	4798      	blx	r3
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d001      	beq.n	800a168 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a164:	2303      	movs	r3, #3
 800a166:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a168:	2340      	movs	r3, #64	@ 0x40
 800a16a:	2200      	movs	r2, #0
 800a16c:	2100      	movs	r1, #0
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f001 fbf7 	bl	800b962 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2240      	movs	r2, #64	@ 0x40
 800a180:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a184:	2340      	movs	r3, #64	@ 0x40
 800a186:	2200      	movs	r2, #0
 800a188:	2180      	movs	r1, #128	@ 0x80
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f001 fbe9 	bl	800b962 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2240      	movs	r2, #64	@ 0x40
 800a19a:	621a      	str	r2, [r3, #32]

  return ret;
 800a19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a1a6:	b480      	push	{r7}
 800a1a8:	b083      	sub	sp, #12
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	78fa      	ldrb	r2, [r7, #3]
 800a1b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	370c      	adds	r7, #12
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr

0800a1c6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a1c6:	b480      	push	{r7}
 800a1c8:	b083      	sub	sp, #12
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b04      	cmp	r3, #4
 800a1d8:	d006      	beq.n	800a1e8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1e0:	b2da      	uxtb	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2204      	movs	r2, #4
 800a1ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	370c      	adds	r7, #12
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr

0800a1fe <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a1fe:	b480      	push	{r7}
 800a200:	b083      	sub	sp, #12
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	2b04      	cmp	r3, #4
 800a210:	d106      	bne.n	800a220 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	370c      	adds	r7, #12
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr

0800a22e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a22e:	b580      	push	{r7, lr}
 800a230:	b082      	sub	sp, #8
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2b03      	cmp	r3, #3
 800a240:	d110      	bne.n	800a264 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00b      	beq.n	800a264 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a252:	69db      	ldr	r3, [r3, #28]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d005      	beq.n	800a264 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a25e:	69db      	ldr	r3, [r3, #28]
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b082      	sub	sp, #8
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	460b      	mov	r3, r1
 800a278:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	32ae      	adds	r2, #174	@ 0xae
 800a284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d101      	bne.n	800a290 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a28c:	2303      	movs	r3, #3
 800a28e:	e01c      	b.n	800a2ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a296:	b2db      	uxtb	r3, r3
 800a298:	2b03      	cmp	r3, #3
 800a29a:	d115      	bne.n	800a2c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	32ae      	adds	r2, #174	@ 0xae
 800a2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2aa:	6a1b      	ldr	r3, [r3, #32]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00b      	beq.n	800a2c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	32ae      	adds	r2, #174	@ 0xae
 800a2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2be:	6a1b      	ldr	r3, [r3, #32]
 800a2c0:	78fa      	ldrb	r2, [r7, #3]
 800a2c2:	4611      	mov	r1, r2
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3708      	adds	r7, #8
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b082      	sub	sp, #8
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
 800a2da:	460b      	mov	r3, r1
 800a2dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	32ae      	adds	r2, #174	@ 0xae
 800a2e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d101      	bne.n	800a2f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	e01c      	b.n	800a32e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	2b03      	cmp	r3, #3
 800a2fe:	d115      	bne.n	800a32c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	32ae      	adds	r2, #174	@ 0xae
 800a30a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a30e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00b      	beq.n	800a32c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	32ae      	adds	r2, #174	@ 0xae
 800a31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a324:	78fa      	ldrb	r2, [r7, #3]
 800a326:	4611      	mov	r1, r2
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a336:	b480      	push	{r7}
 800a338:	b083      	sub	sp, #12
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a354:	2300      	movs	r3, #0
 800a356:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00e      	beq.n	800a388 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	6852      	ldr	r2, [r2, #4]
 800a376:	b2d2      	uxtb	r2, r2
 800a378:	4611      	mov	r1, r2
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	4798      	blx	r3
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d001      	beq.n	800a388 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a384:	2303      	movs	r3, #3
 800a386:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a388:	7bfb      	ldrb	r3, [r7, #15]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a392:	b480      	push	{r7}
 800a394:	b083      	sub	sp, #12
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
 800a39a:	460b      	mov	r3, r1
 800a39c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a39e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a3b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	370c      	adds	r7, #12
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b086      	sub	sp, #24
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	885b      	ldrh	r3, [r3, #2]
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	7812      	ldrb	r2, [r2, #0]
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d91f      	bls.n	800a42c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a3f2:	e013      	b.n	800a41c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a3f4:	f107 030a 	add.w	r3, r7, #10
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6978      	ldr	r0, [r7, #20]
 800a3fc:	f000 f81b 	bl	800a436 <USBD_GetNextDesc>
 800a400:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	785b      	ldrb	r3, [r3, #1]
 800a406:	2b05      	cmp	r3, #5
 800a408:	d108      	bne.n	800a41c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	789b      	ldrb	r3, [r3, #2]
 800a412:	78fa      	ldrb	r2, [r7, #3]
 800a414:	429a      	cmp	r2, r3
 800a416:	d008      	beq.n	800a42a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a418:	2300      	movs	r3, #0
 800a41a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	885b      	ldrh	r3, [r3, #2]
 800a420:	b29a      	uxth	r2, r3
 800a422:	897b      	ldrh	r3, [r7, #10]
 800a424:	429a      	cmp	r2, r3
 800a426:	d8e5      	bhi.n	800a3f4 <USBD_GetEpDesc+0x2e>
 800a428:	e000      	b.n	800a42c <USBD_GetEpDesc+0x66>
          break;
 800a42a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a42c:	693b      	ldr	r3, [r7, #16]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3718      	adds	r7, #24
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a436:	b480      	push	{r7}
 800a438:	b085      	sub	sp, #20
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	881b      	ldrh	r3, [r3, #0]
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	7812      	ldrb	r2, [r2, #0]
 800a44c:	4413      	add	r3, r2
 800a44e:	b29a      	uxth	r2, r3
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	461a      	mov	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4413      	add	r3, r2
 800a45e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a460:	68fb      	ldr	r3, [r7, #12]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3714      	adds	r7, #20
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr

0800a46e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a46e:	b480      	push	{r7}
 800a470:	b087      	sub	sp, #28
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	3301      	adds	r3, #1
 800a484:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a48c:	8a3b      	ldrh	r3, [r7, #16]
 800a48e:	021b      	lsls	r3, r3, #8
 800a490:	b21a      	sxth	r2, r3
 800a492:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a496:	4313      	orrs	r3, r2
 800a498:	b21b      	sxth	r3, r3
 800a49a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a49c:	89fb      	ldrh	r3, [r7, #14]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	371c      	adds	r7, #28
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr
	...

0800a4ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a4c2:	2b40      	cmp	r3, #64	@ 0x40
 800a4c4:	d005      	beq.n	800a4d2 <USBD_StdDevReq+0x26>
 800a4c6:	2b40      	cmp	r3, #64	@ 0x40
 800a4c8:	d857      	bhi.n	800a57a <USBD_StdDevReq+0xce>
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00f      	beq.n	800a4ee <USBD_StdDevReq+0x42>
 800a4ce:	2b20      	cmp	r3, #32
 800a4d0:	d153      	bne.n	800a57a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	32ae      	adds	r2, #174	@ 0xae
 800a4dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	4798      	blx	r3
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a4ec:	e04a      	b.n	800a584 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	785b      	ldrb	r3, [r3, #1]
 800a4f2:	2b09      	cmp	r3, #9
 800a4f4:	d83b      	bhi.n	800a56e <USBD_StdDevReq+0xc2>
 800a4f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4fc <USBD_StdDevReq+0x50>)
 800a4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4fc:	0800a551 	.word	0x0800a551
 800a500:	0800a565 	.word	0x0800a565
 800a504:	0800a56f 	.word	0x0800a56f
 800a508:	0800a55b 	.word	0x0800a55b
 800a50c:	0800a56f 	.word	0x0800a56f
 800a510:	0800a52f 	.word	0x0800a52f
 800a514:	0800a525 	.word	0x0800a525
 800a518:	0800a56f 	.word	0x0800a56f
 800a51c:	0800a547 	.word	0x0800a547
 800a520:	0800a539 	.word	0x0800a539
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fa3c 	bl	800a9a4 <USBD_GetDescriptor>
          break;
 800a52c:	e024      	b.n	800a578 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a52e:	6839      	ldr	r1, [r7, #0]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fba1 	bl	800ac78 <USBD_SetAddress>
          break;
 800a536:	e01f      	b.n	800a578 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a538:	6839      	ldr	r1, [r7, #0]
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 fbe0 	bl	800ad00 <USBD_SetConfig>
 800a540:	4603      	mov	r3, r0
 800a542:	73fb      	strb	r3, [r7, #15]
          break;
 800a544:	e018      	b.n	800a578 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a546:	6839      	ldr	r1, [r7, #0]
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 fc83 	bl	800ae54 <USBD_GetConfig>
          break;
 800a54e:	e013      	b.n	800a578 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a550:	6839      	ldr	r1, [r7, #0]
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 fcb4 	bl	800aec0 <USBD_GetStatus>
          break;
 800a558:	e00e      	b.n	800a578 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a55a:	6839      	ldr	r1, [r7, #0]
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 fce3 	bl	800af28 <USBD_SetFeature>
          break;
 800a562:	e009      	b.n	800a578 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a564:	6839      	ldr	r1, [r7, #0]
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 fd07 	bl	800af7a <USBD_ClrFeature>
          break;
 800a56c:	e004      	b.n	800a578 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a56e:	6839      	ldr	r1, [r7, #0]
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 fd5e 	bl	800b032 <USBD_CtlError>
          break;
 800a576:	bf00      	nop
      }
      break;
 800a578:	e004      	b.n	800a584 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 fd58 	bl	800b032 <USBD_CtlError>
      break;
 800a582:	bf00      	nop
  }

  return ret;
 800a584:	7bfb      	ldrb	r3, [r7, #15]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop

0800a590 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a59a:	2300      	movs	r3, #0
 800a59c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a5a6:	2b40      	cmp	r3, #64	@ 0x40
 800a5a8:	d005      	beq.n	800a5b6 <USBD_StdItfReq+0x26>
 800a5aa:	2b40      	cmp	r3, #64	@ 0x40
 800a5ac:	d852      	bhi.n	800a654 <USBD_StdItfReq+0xc4>
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d001      	beq.n	800a5b6 <USBD_StdItfReq+0x26>
 800a5b2:	2b20      	cmp	r3, #32
 800a5b4:	d14e      	bne.n	800a654 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	d840      	bhi.n	800a646 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	889b      	ldrh	r3, [r3, #4]
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d836      	bhi.n	800a63c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	889b      	ldrh	r3, [r3, #4]
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f7ff fedb 	bl	800a392 <USBD_CoreFindIF>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5e0:	7bbb      	ldrb	r3, [r7, #14]
 800a5e2:	2bff      	cmp	r3, #255	@ 0xff
 800a5e4:	d01d      	beq.n	800a622 <USBD_StdItfReq+0x92>
 800a5e6:	7bbb      	ldrb	r3, [r7, #14]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d11a      	bne.n	800a622 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a5ec:	7bba      	ldrb	r2, [r7, #14]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	32ae      	adds	r2, #174	@ 0xae
 800a5f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00f      	beq.n	800a61c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a5fc:	7bba      	ldrb	r2, [r7, #14]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a604:	7bba      	ldrb	r2, [r7, #14]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	32ae      	adds	r2, #174	@ 0xae
 800a60a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	6839      	ldr	r1, [r7, #0]
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	4798      	blx	r3
 800a616:	4603      	mov	r3, r0
 800a618:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a61a:	e004      	b.n	800a626 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a61c:	2303      	movs	r3, #3
 800a61e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a620:	e001      	b.n	800a626 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a622:	2303      	movs	r3, #3
 800a624:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	88db      	ldrh	r3, [r3, #6]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d110      	bne.n	800a650 <USBD_StdItfReq+0xc0>
 800a62e:	7bfb      	ldrb	r3, [r7, #15]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d10d      	bne.n	800a650 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fdd3 	bl	800b1e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a63a:	e009      	b.n	800a650 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a63c:	6839      	ldr	r1, [r7, #0]
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 fcf7 	bl	800b032 <USBD_CtlError>
          break;
 800a644:	e004      	b.n	800a650 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fcf2 	bl	800b032 <USBD_CtlError>
          break;
 800a64e:	e000      	b.n	800a652 <USBD_StdItfReq+0xc2>
          break;
 800a650:	bf00      	nop
      }
      break;
 800a652:	e004      	b.n	800a65e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a654:	6839      	ldr	r1, [r7, #0]
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fceb 	bl	800b032 <USBD_CtlError>
      break;
 800a65c:	bf00      	nop
  }

  return ret;
 800a65e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a660:	4618      	mov	r0, r3
 800a662:	3710      	adds	r7, #16
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a672:	2300      	movs	r3, #0
 800a674:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	889b      	ldrh	r3, [r3, #4]
 800a67a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a684:	2b40      	cmp	r3, #64	@ 0x40
 800a686:	d007      	beq.n	800a698 <USBD_StdEPReq+0x30>
 800a688:	2b40      	cmp	r3, #64	@ 0x40
 800a68a:	f200 817f 	bhi.w	800a98c <USBD_StdEPReq+0x324>
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d02a      	beq.n	800a6e8 <USBD_StdEPReq+0x80>
 800a692:	2b20      	cmp	r3, #32
 800a694:	f040 817a 	bne.w	800a98c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a698:	7bbb      	ldrb	r3, [r7, #14]
 800a69a:	4619      	mov	r1, r3
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f7ff fe85 	bl	800a3ac <USBD_CoreFindEP>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6a6:	7b7b      	ldrb	r3, [r7, #13]
 800a6a8:	2bff      	cmp	r3, #255	@ 0xff
 800a6aa:	f000 8174 	beq.w	800a996 <USBD_StdEPReq+0x32e>
 800a6ae:	7b7b      	ldrb	r3, [r7, #13]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f040 8170 	bne.w	800a996 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a6b6:	7b7a      	ldrb	r2, [r7, #13]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a6be:	7b7a      	ldrb	r2, [r7, #13]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	32ae      	adds	r2, #174	@ 0xae
 800a6c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	f000 8163 	beq.w	800a996 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a6d0:	7b7a      	ldrb	r2, [r7, #13]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	32ae      	adds	r2, #174	@ 0xae
 800a6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	6839      	ldr	r1, [r7, #0]
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	4798      	blx	r3
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a6e6:	e156      	b.n	800a996 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	785b      	ldrb	r3, [r3, #1]
 800a6ec:	2b03      	cmp	r3, #3
 800a6ee:	d008      	beq.n	800a702 <USBD_StdEPReq+0x9a>
 800a6f0:	2b03      	cmp	r3, #3
 800a6f2:	f300 8145 	bgt.w	800a980 <USBD_StdEPReq+0x318>
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 809b 	beq.w	800a832 <USBD_StdEPReq+0x1ca>
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d03c      	beq.n	800a77a <USBD_StdEPReq+0x112>
 800a700:	e13e      	b.n	800a980 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d002      	beq.n	800a714 <USBD_StdEPReq+0xac>
 800a70e:	2b03      	cmp	r3, #3
 800a710:	d016      	beq.n	800a740 <USBD_StdEPReq+0xd8>
 800a712:	e02c      	b.n	800a76e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a714:	7bbb      	ldrb	r3, [r7, #14]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00d      	beq.n	800a736 <USBD_StdEPReq+0xce>
 800a71a:	7bbb      	ldrb	r3, [r7, #14]
 800a71c:	2b80      	cmp	r3, #128	@ 0x80
 800a71e:	d00a      	beq.n	800a736 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a720:	7bbb      	ldrb	r3, [r7, #14]
 800a722:	4619      	mov	r1, r3
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f001 f961 	bl	800b9ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a72a:	2180      	movs	r1, #128	@ 0x80
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f001 f95d 	bl	800b9ec <USBD_LL_StallEP>
 800a732:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a734:	e020      	b.n	800a778 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a736:	6839      	ldr	r1, [r7, #0]
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 fc7a 	bl	800b032 <USBD_CtlError>
              break;
 800a73e:	e01b      	b.n	800a778 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	885b      	ldrh	r3, [r3, #2]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d10e      	bne.n	800a766 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a748:	7bbb      	ldrb	r3, [r7, #14]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00b      	beq.n	800a766 <USBD_StdEPReq+0xfe>
 800a74e:	7bbb      	ldrb	r3, [r7, #14]
 800a750:	2b80      	cmp	r3, #128	@ 0x80
 800a752:	d008      	beq.n	800a766 <USBD_StdEPReq+0xfe>
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	88db      	ldrh	r3, [r3, #6]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d104      	bne.n	800a766 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a75c:	7bbb      	ldrb	r3, [r7, #14]
 800a75e:	4619      	mov	r1, r3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f001 f943 	bl	800b9ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 fd3a 	bl	800b1e0 <USBD_CtlSendStatus>

              break;
 800a76c:	e004      	b.n	800a778 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a76e:	6839      	ldr	r1, [r7, #0]
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 fc5e 	bl	800b032 <USBD_CtlError>
              break;
 800a776:	bf00      	nop
          }
          break;
 800a778:	e107      	b.n	800a98a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b02      	cmp	r3, #2
 800a784:	d002      	beq.n	800a78c <USBD_StdEPReq+0x124>
 800a786:	2b03      	cmp	r3, #3
 800a788:	d016      	beq.n	800a7b8 <USBD_StdEPReq+0x150>
 800a78a:	e04b      	b.n	800a824 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a78c:	7bbb      	ldrb	r3, [r7, #14]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00d      	beq.n	800a7ae <USBD_StdEPReq+0x146>
 800a792:	7bbb      	ldrb	r3, [r7, #14]
 800a794:	2b80      	cmp	r3, #128	@ 0x80
 800a796:	d00a      	beq.n	800a7ae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a798:	7bbb      	ldrb	r3, [r7, #14]
 800a79a:	4619      	mov	r1, r3
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f001 f925 	bl	800b9ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7a2:	2180      	movs	r1, #128	@ 0x80
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f001 f921 	bl	800b9ec <USBD_LL_StallEP>
 800a7aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7ac:	e040      	b.n	800a830 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a7ae:	6839      	ldr	r1, [r7, #0]
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 fc3e 	bl	800b032 <USBD_CtlError>
              break;
 800a7b6:	e03b      	b.n	800a830 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	885b      	ldrh	r3, [r3, #2]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d136      	bne.n	800a82e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a7c0:	7bbb      	ldrb	r3, [r7, #14]
 800a7c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d004      	beq.n	800a7d4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a7ca:	7bbb      	ldrb	r3, [r7, #14]
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f001 f92b 	bl	800ba2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 fd03 	bl	800b1e0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a7da:	7bbb      	ldrb	r3, [r7, #14]
 800a7dc:	4619      	mov	r1, r3
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7ff fde4 	bl	800a3ac <USBD_CoreFindEP>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7e8:	7b7b      	ldrb	r3, [r7, #13]
 800a7ea:	2bff      	cmp	r3, #255	@ 0xff
 800a7ec:	d01f      	beq.n	800a82e <USBD_StdEPReq+0x1c6>
 800a7ee:	7b7b      	ldrb	r3, [r7, #13]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d11c      	bne.n	800a82e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a7f4:	7b7a      	ldrb	r2, [r7, #13]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a7fc:	7b7a      	ldrb	r2, [r7, #13]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	32ae      	adds	r2, #174	@ 0xae
 800a802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d010      	beq.n	800a82e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a80c:	7b7a      	ldrb	r2, [r7, #13]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	32ae      	adds	r2, #174	@ 0xae
 800a812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	6839      	ldr	r1, [r7, #0]
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	4798      	blx	r3
 800a81e:	4603      	mov	r3, r0
 800a820:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a822:	e004      	b.n	800a82e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a824:	6839      	ldr	r1, [r7, #0]
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 fc03 	bl	800b032 <USBD_CtlError>
              break;
 800a82c:	e000      	b.n	800a830 <USBD_StdEPReq+0x1c8>
              break;
 800a82e:	bf00      	nop
          }
          break;
 800a830:	e0ab      	b.n	800a98a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d002      	beq.n	800a844 <USBD_StdEPReq+0x1dc>
 800a83e:	2b03      	cmp	r3, #3
 800a840:	d032      	beq.n	800a8a8 <USBD_StdEPReq+0x240>
 800a842:	e097      	b.n	800a974 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a844:	7bbb      	ldrb	r3, [r7, #14]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d007      	beq.n	800a85a <USBD_StdEPReq+0x1f2>
 800a84a:	7bbb      	ldrb	r3, [r7, #14]
 800a84c:	2b80      	cmp	r3, #128	@ 0x80
 800a84e:	d004      	beq.n	800a85a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 fbed 	bl	800b032 <USBD_CtlError>
                break;
 800a858:	e091      	b.n	800a97e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a85a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	da0b      	bge.n	800a87a <USBD_StdEPReq+0x212>
 800a862:	7bbb      	ldrb	r3, [r7, #14]
 800a864:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a868:	4613      	mov	r3, r2
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	4413      	add	r3, r2
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	3310      	adds	r3, #16
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	4413      	add	r3, r2
 800a876:	3304      	adds	r3, #4
 800a878:	e00b      	b.n	800a892 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a87a:	7bbb      	ldrb	r3, [r7, #14]
 800a87c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a880:	4613      	mov	r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4413      	add	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	4413      	add	r3, r2
 800a890:	3304      	adds	r3, #4
 800a892:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	2200      	movs	r2, #0
 800a898:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	2202      	movs	r2, #2
 800a89e:	4619      	mov	r1, r3
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fc43 	bl	800b12c <USBD_CtlSendData>
              break;
 800a8a6:	e06a      	b.n	800a97e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a8a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	da11      	bge.n	800a8d4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a8b0:	7bbb      	ldrb	r3, [r7, #14]
 800a8b2:	f003 020f 	and.w	r2, r3, #15
 800a8b6:	6879      	ldr	r1, [r7, #4]
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	4413      	add	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	440b      	add	r3, r1
 800a8c2:	3324      	adds	r3, #36	@ 0x24
 800a8c4:	881b      	ldrh	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d117      	bne.n	800a8fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a8ca:	6839      	ldr	r1, [r7, #0]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 fbb0 	bl	800b032 <USBD_CtlError>
                  break;
 800a8d2:	e054      	b.n	800a97e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a8d4:	7bbb      	ldrb	r3, [r7, #14]
 800a8d6:	f003 020f 	and.w	r2, r3, #15
 800a8da:	6879      	ldr	r1, [r7, #4]
 800a8dc:	4613      	mov	r3, r2
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	4413      	add	r3, r2
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	440b      	add	r3, r1
 800a8e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a8ea:	881b      	ldrh	r3, [r3, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d104      	bne.n	800a8fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a8f0:	6839      	ldr	r1, [r7, #0]
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 fb9d 	bl	800b032 <USBD_CtlError>
                  break;
 800a8f8:	e041      	b.n	800a97e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	da0b      	bge.n	800a91a <USBD_StdEPReq+0x2b2>
 800a902:	7bbb      	ldrb	r3, [r7, #14]
 800a904:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a908:	4613      	mov	r3, r2
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	4413      	add	r3, r2
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	3310      	adds	r3, #16
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	4413      	add	r3, r2
 800a916:	3304      	adds	r3, #4
 800a918:	e00b      	b.n	800a932 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a91a:	7bbb      	ldrb	r3, [r7, #14]
 800a91c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a920:	4613      	mov	r3, r2
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	4413      	add	r3, r2
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	4413      	add	r3, r2
 800a930:	3304      	adds	r3, #4
 800a932:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a934:	7bbb      	ldrb	r3, [r7, #14]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d002      	beq.n	800a940 <USBD_StdEPReq+0x2d8>
 800a93a:	7bbb      	ldrb	r3, [r7, #14]
 800a93c:	2b80      	cmp	r3, #128	@ 0x80
 800a93e:	d103      	bne.n	800a948 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	2200      	movs	r2, #0
 800a944:	601a      	str	r2, [r3, #0]
 800a946:	e00e      	b.n	800a966 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a948:	7bbb      	ldrb	r3, [r7, #14]
 800a94a:	4619      	mov	r1, r3
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f001 f88b 	bl	800ba68 <USBD_LL_IsStallEP>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d003      	beq.n	800a960 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	2201      	movs	r2, #1
 800a95c:	601a      	str	r2, [r3, #0]
 800a95e:	e002      	b.n	800a966 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	2200      	movs	r2, #0
 800a964:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	2202      	movs	r2, #2
 800a96a:	4619      	mov	r1, r3
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 fbdd 	bl	800b12c <USBD_CtlSendData>
              break;
 800a972:	e004      	b.n	800a97e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a974:	6839      	ldr	r1, [r7, #0]
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 fb5b 	bl	800b032 <USBD_CtlError>
              break;
 800a97c:	bf00      	nop
          }
          break;
 800a97e:	e004      	b.n	800a98a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a980:	6839      	ldr	r1, [r7, #0]
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fb55 	bl	800b032 <USBD_CtlError>
          break;
 800a988:	bf00      	nop
      }
      break;
 800a98a:	e005      	b.n	800a998 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a98c:	6839      	ldr	r1, [r7, #0]
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 fb4f 	bl	800b032 <USBD_CtlError>
      break;
 800a994:	e000      	b.n	800a998 <USBD_StdEPReq+0x330>
      break;
 800a996:	bf00      	nop
  }

  return ret;
 800a998:	7bfb      	ldrb	r3, [r7, #15]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
	...

0800a9a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	885b      	ldrh	r3, [r3, #2]
 800a9be:	0a1b      	lsrs	r3, r3, #8
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	3b01      	subs	r3, #1
 800a9c4:	2b06      	cmp	r3, #6
 800a9c6:	f200 8128 	bhi.w	800ac1a <USBD_GetDescriptor+0x276>
 800a9ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a9d0 <USBD_GetDescriptor+0x2c>)
 800a9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d0:	0800a9ed 	.word	0x0800a9ed
 800a9d4:	0800aa05 	.word	0x0800aa05
 800a9d8:	0800aa45 	.word	0x0800aa45
 800a9dc:	0800ac1b 	.word	0x0800ac1b
 800a9e0:	0800ac1b 	.word	0x0800ac1b
 800a9e4:	0800abbb 	.word	0x0800abbb
 800a9e8:	0800abe7 	.word	0x0800abe7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	7c12      	ldrb	r2, [r2, #16]
 800a9f8:	f107 0108 	add.w	r1, r7, #8
 800a9fc:	4610      	mov	r0, r2
 800a9fe:	4798      	blx	r3
 800aa00:	60f8      	str	r0, [r7, #12]
      break;
 800aa02:	e112      	b.n	800ac2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	7c1b      	ldrb	r3, [r3, #16]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d10d      	bne.n	800aa28 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa14:	f107 0208 	add.w	r2, r7, #8
 800aa18:	4610      	mov	r0, r2
 800aa1a:	4798      	blx	r3
 800aa1c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	3301      	adds	r3, #1
 800aa22:	2202      	movs	r2, #2
 800aa24:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aa26:	e100      	b.n	800ac2a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa30:	f107 0208 	add.w	r2, r7, #8
 800aa34:	4610      	mov	r0, r2
 800aa36:	4798      	blx	r3
 800aa38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	2202      	movs	r2, #2
 800aa40:	701a      	strb	r2, [r3, #0]
      break;
 800aa42:	e0f2      	b.n	800ac2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	885b      	ldrh	r3, [r3, #2]
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	2b05      	cmp	r3, #5
 800aa4c:	f200 80ac 	bhi.w	800aba8 <USBD_GetDescriptor+0x204>
 800aa50:	a201      	add	r2, pc, #4	@ (adr r2, 800aa58 <USBD_GetDescriptor+0xb4>)
 800aa52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa56:	bf00      	nop
 800aa58:	0800aa71 	.word	0x0800aa71
 800aa5c:	0800aaa5 	.word	0x0800aaa5
 800aa60:	0800aad9 	.word	0x0800aad9
 800aa64:	0800ab0d 	.word	0x0800ab0d
 800aa68:	0800ab41 	.word	0x0800ab41
 800aa6c:	0800ab75 	.word	0x0800ab75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d00b      	beq.n	800aa94 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	7c12      	ldrb	r2, [r2, #16]
 800aa88:	f107 0108 	add.w	r1, r7, #8
 800aa8c:	4610      	mov	r0, r2
 800aa8e:	4798      	blx	r3
 800aa90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa92:	e091      	b.n	800abb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa94:	6839      	ldr	r1, [r7, #0]
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 facb 	bl	800b032 <USBD_CtlError>
            err++;
 800aa9c:	7afb      	ldrb	r3, [r7, #11]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	72fb      	strb	r3, [r7, #11]
          break;
 800aaa2:	e089      	b.n	800abb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00b      	beq.n	800aac8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	7c12      	ldrb	r2, [r2, #16]
 800aabc:	f107 0108 	add.w	r1, r7, #8
 800aac0:	4610      	mov	r0, r2
 800aac2:	4798      	blx	r3
 800aac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aac6:	e077      	b.n	800abb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aac8:	6839      	ldr	r1, [r7, #0]
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 fab1 	bl	800b032 <USBD_CtlError>
            err++;
 800aad0:	7afb      	ldrb	r3, [r7, #11]
 800aad2:	3301      	adds	r3, #1
 800aad4:	72fb      	strb	r3, [r7, #11]
          break;
 800aad6:	e06f      	b.n	800abb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d00b      	beq.n	800aafc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	7c12      	ldrb	r2, [r2, #16]
 800aaf0:	f107 0108 	add.w	r1, r7, #8
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	4798      	blx	r3
 800aaf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aafa:	e05d      	b.n	800abb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aafc:	6839      	ldr	r1, [r7, #0]
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 fa97 	bl	800b032 <USBD_CtlError>
            err++;
 800ab04:	7afb      	ldrb	r3, [r7, #11]
 800ab06:	3301      	adds	r3, #1
 800ab08:	72fb      	strb	r3, [r7, #11]
          break;
 800ab0a:	e055      	b.n	800abb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d00b      	beq.n	800ab30 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab1e:	691b      	ldr	r3, [r3, #16]
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	7c12      	ldrb	r2, [r2, #16]
 800ab24:	f107 0108 	add.w	r1, r7, #8
 800ab28:	4610      	mov	r0, r2
 800ab2a:	4798      	blx	r3
 800ab2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab2e:	e043      	b.n	800abb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab30:	6839      	ldr	r1, [r7, #0]
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 fa7d 	bl	800b032 <USBD_CtlError>
            err++;
 800ab38:	7afb      	ldrb	r3, [r7, #11]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab3e:	e03b      	b.n	800abb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab46:	695b      	ldr	r3, [r3, #20]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00b      	beq.n	800ab64 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab52:	695b      	ldr	r3, [r3, #20]
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	7c12      	ldrb	r2, [r2, #16]
 800ab58:	f107 0108 	add.w	r1, r7, #8
 800ab5c:	4610      	mov	r0, r2
 800ab5e:	4798      	blx	r3
 800ab60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab62:	e029      	b.n	800abb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab64:	6839      	ldr	r1, [r7, #0]
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 fa63 	bl	800b032 <USBD_CtlError>
            err++;
 800ab6c:	7afb      	ldrb	r3, [r7, #11]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	72fb      	strb	r3, [r7, #11]
          break;
 800ab72:	e021      	b.n	800abb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab7a:	699b      	ldr	r3, [r3, #24]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d00b      	beq.n	800ab98 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab86:	699b      	ldr	r3, [r3, #24]
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	7c12      	ldrb	r2, [r2, #16]
 800ab8c:	f107 0108 	add.w	r1, r7, #8
 800ab90:	4610      	mov	r0, r2
 800ab92:	4798      	blx	r3
 800ab94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab96:	e00f      	b.n	800abb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab98:	6839      	ldr	r1, [r7, #0]
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 fa49 	bl	800b032 <USBD_CtlError>
            err++;
 800aba0:	7afb      	ldrb	r3, [r7, #11]
 800aba2:	3301      	adds	r3, #1
 800aba4:	72fb      	strb	r3, [r7, #11]
          break;
 800aba6:	e007      	b.n	800abb8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aba8:	6839      	ldr	r1, [r7, #0]
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fa41 	bl	800b032 <USBD_CtlError>
          err++;
 800abb0:	7afb      	ldrb	r3, [r7, #11]
 800abb2:	3301      	adds	r3, #1
 800abb4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800abb6:	bf00      	nop
      }
      break;
 800abb8:	e037      	b.n	800ac2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	7c1b      	ldrb	r3, [r3, #16]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d109      	bne.n	800abd6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abca:	f107 0208 	add.w	r2, r7, #8
 800abce:	4610      	mov	r0, r2
 800abd0:	4798      	blx	r3
 800abd2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800abd4:	e029      	b.n	800ac2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800abd6:	6839      	ldr	r1, [r7, #0]
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 fa2a 	bl	800b032 <USBD_CtlError>
        err++;
 800abde:	7afb      	ldrb	r3, [r7, #11]
 800abe0:	3301      	adds	r3, #1
 800abe2:	72fb      	strb	r3, [r7, #11]
      break;
 800abe4:	e021      	b.n	800ac2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	7c1b      	ldrb	r3, [r3, #16]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d10d      	bne.n	800ac0a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abf6:	f107 0208 	add.w	r2, r7, #8
 800abfa:	4610      	mov	r0, r2
 800abfc:	4798      	blx	r3
 800abfe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	3301      	adds	r3, #1
 800ac04:	2207      	movs	r2, #7
 800ac06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac08:	e00f      	b.n	800ac2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac0a:	6839      	ldr	r1, [r7, #0]
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 fa10 	bl	800b032 <USBD_CtlError>
        err++;
 800ac12:	7afb      	ldrb	r3, [r7, #11]
 800ac14:	3301      	adds	r3, #1
 800ac16:	72fb      	strb	r3, [r7, #11]
      break;
 800ac18:	e007      	b.n	800ac2a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ac1a:	6839      	ldr	r1, [r7, #0]
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 fa08 	bl	800b032 <USBD_CtlError>
      err++;
 800ac22:	7afb      	ldrb	r3, [r7, #11]
 800ac24:	3301      	adds	r3, #1
 800ac26:	72fb      	strb	r3, [r7, #11]
      break;
 800ac28:	bf00      	nop
  }

  if (err != 0U)
 800ac2a:	7afb      	ldrb	r3, [r7, #11]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d11e      	bne.n	800ac6e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	88db      	ldrh	r3, [r3, #6]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d016      	beq.n	800ac66 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ac38:	893b      	ldrh	r3, [r7, #8]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00e      	beq.n	800ac5c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	88da      	ldrh	r2, [r3, #6]
 800ac42:	893b      	ldrh	r3, [r7, #8]
 800ac44:	4293      	cmp	r3, r2
 800ac46:	bf28      	it	cs
 800ac48:	4613      	movcs	r3, r2
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ac4e:	893b      	ldrh	r3, [r7, #8]
 800ac50:	461a      	mov	r2, r3
 800ac52:	68f9      	ldr	r1, [r7, #12]
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 fa69 	bl	800b12c <USBD_CtlSendData>
 800ac5a:	e009      	b.n	800ac70 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ac5c:	6839      	ldr	r1, [r7, #0]
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 f9e7 	bl	800b032 <USBD_CtlError>
 800ac64:	e004      	b.n	800ac70 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 faba 	bl	800b1e0 <USBD_CtlSendStatus>
 800ac6c:	e000      	b.n	800ac70 <USBD_GetDescriptor+0x2cc>
    return;
 800ac6e:	bf00      	nop
  }
}
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop

0800ac78 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	889b      	ldrh	r3, [r3, #4]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d131      	bne.n	800acee <USBD_SetAddress+0x76>
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	88db      	ldrh	r3, [r3, #6]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d12d      	bne.n	800acee <USBD_SetAddress+0x76>
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	885b      	ldrh	r3, [r3, #2]
 800ac96:	2b7f      	cmp	r3, #127	@ 0x7f
 800ac98:	d829      	bhi.n	800acee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	885b      	ldrh	r3, [r3, #2]
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aca4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acac:	b2db      	uxtb	r3, r3
 800acae:	2b03      	cmp	r3, #3
 800acb0:	d104      	bne.n	800acbc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800acb2:	6839      	ldr	r1, [r7, #0]
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 f9bc 	bl	800b032 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acba:	e01d      	b.n	800acf8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	7bfa      	ldrb	r2, [r7, #15]
 800acc0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800acc4:	7bfb      	ldrb	r3, [r7, #15]
 800acc6:	4619      	mov	r1, r3
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 fef9 	bl	800bac0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fa86 	bl	800b1e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d004      	beq.n	800ace4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2202      	movs	r2, #2
 800acde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ace2:	e009      	b.n	800acf8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2201      	movs	r2, #1
 800ace8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acec:	e004      	b.n	800acf8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800acee:	6839      	ldr	r1, [r7, #0]
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 f99e 	bl	800b032 <USBD_CtlError>
  }
}
 800acf6:	bf00      	nop
 800acf8:	bf00      	nop
 800acfa:	3710      	adds	r7, #16
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	885b      	ldrh	r3, [r3, #2]
 800ad12:	b2da      	uxtb	r2, r3
 800ad14:	4b4e      	ldr	r3, [pc, #312]	@ (800ae50 <USBD_SetConfig+0x150>)
 800ad16:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ad18:	4b4d      	ldr	r3, [pc, #308]	@ (800ae50 <USBD_SetConfig+0x150>)
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d905      	bls.n	800ad2c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ad20:	6839      	ldr	r1, [r7, #0]
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 f985 	bl	800b032 <USBD_CtlError>
    return USBD_FAIL;
 800ad28:	2303      	movs	r3, #3
 800ad2a:	e08c      	b.n	800ae46 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	d002      	beq.n	800ad3e <USBD_SetConfig+0x3e>
 800ad38:	2b03      	cmp	r3, #3
 800ad3a:	d029      	beq.n	800ad90 <USBD_SetConfig+0x90>
 800ad3c:	e075      	b.n	800ae2a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ad3e:	4b44      	ldr	r3, [pc, #272]	@ (800ae50 <USBD_SetConfig+0x150>)
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d020      	beq.n	800ad88 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ad46:	4b42      	ldr	r3, [pc, #264]	@ (800ae50 <USBD_SetConfig+0x150>)
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad50:	4b3f      	ldr	r3, [pc, #252]	@ (800ae50 <USBD_SetConfig+0x150>)
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	4619      	mov	r1, r3
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f7fe ffe3 	bl	8009d22 <USBD_SetClassConfig>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d008      	beq.n	800ad78 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ad66:	6839      	ldr	r1, [r7, #0]
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 f962 	bl	800b032 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2202      	movs	r2, #2
 800ad72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ad76:	e065      	b.n	800ae44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 fa31 	bl	800b1e0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2203      	movs	r2, #3
 800ad82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ad86:	e05d      	b.n	800ae44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 fa29 	bl	800b1e0 <USBD_CtlSendStatus>
      break;
 800ad8e:	e059      	b.n	800ae44 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ad90:	4b2f      	ldr	r3, [pc, #188]	@ (800ae50 <USBD_SetConfig+0x150>)
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d112      	bne.n	800adbe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2202      	movs	r2, #2
 800ad9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ada0:	4b2b      	ldr	r3, [pc, #172]	@ (800ae50 <USBD_SetConfig+0x150>)
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	461a      	mov	r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800adaa:	4b29      	ldr	r3, [pc, #164]	@ (800ae50 <USBD_SetConfig+0x150>)
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	4619      	mov	r1, r3
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f7fe ffd2 	bl	8009d5a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 fa12 	bl	800b1e0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800adbc:	e042      	b.n	800ae44 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800adbe:	4b24      	ldr	r3, [pc, #144]	@ (800ae50 <USBD_SetConfig+0x150>)
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	461a      	mov	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d02a      	beq.n	800ae22 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	b2db      	uxtb	r3, r3
 800add2:	4619      	mov	r1, r3
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f7fe ffc0 	bl	8009d5a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800adda:	4b1d      	ldr	r3, [pc, #116]	@ (800ae50 <USBD_SetConfig+0x150>)
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ade4:	4b1a      	ldr	r3, [pc, #104]	@ (800ae50 <USBD_SetConfig+0x150>)
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	4619      	mov	r1, r3
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7fe ff99 	bl	8009d22 <USBD_SetClassConfig>
 800adf0:	4603      	mov	r3, r0
 800adf2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800adf4:	7bfb      	ldrb	r3, [r7, #15]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00f      	beq.n	800ae1a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800adfa:	6839      	ldr	r1, [r7, #0]
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 f918 	bl	800b032 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	4619      	mov	r1, r3
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7fe ffa5 	bl	8009d5a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2202      	movs	r2, #2
 800ae14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ae18:	e014      	b.n	800ae44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 f9e0 	bl	800b1e0 <USBD_CtlSendStatus>
      break;
 800ae20:	e010      	b.n	800ae44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 f9dc 	bl	800b1e0 <USBD_CtlSendStatus>
      break;
 800ae28:	e00c      	b.n	800ae44 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ae2a:	6839      	ldr	r1, [r7, #0]
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 f900 	bl	800b032 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae32:	4b07      	ldr	r3, [pc, #28]	@ (800ae50 <USBD_SetConfig+0x150>)
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	4619      	mov	r1, r3
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f7fe ff8e 	bl	8009d5a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ae3e:	2303      	movs	r3, #3
 800ae40:	73fb      	strb	r3, [r7, #15]
      break;
 800ae42:	bf00      	nop
  }

  return ret;
 800ae44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	20000674 	.word	0x20000674

0800ae54 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	88db      	ldrh	r3, [r3, #6]
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d004      	beq.n	800ae70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ae66:	6839      	ldr	r1, [r7, #0]
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 f8e2 	bl	800b032 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ae6e:	e023      	b.n	800aeb8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2b02      	cmp	r3, #2
 800ae7a:	dc02      	bgt.n	800ae82 <USBD_GetConfig+0x2e>
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	dc03      	bgt.n	800ae88 <USBD_GetConfig+0x34>
 800ae80:	e015      	b.n	800aeae <USBD_GetConfig+0x5a>
 800ae82:	2b03      	cmp	r3, #3
 800ae84:	d00b      	beq.n	800ae9e <USBD_GetConfig+0x4a>
 800ae86:	e012      	b.n	800aeae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	3308      	adds	r3, #8
 800ae92:	2201      	movs	r2, #1
 800ae94:	4619      	mov	r1, r3
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 f948 	bl	800b12c <USBD_CtlSendData>
        break;
 800ae9c:	e00c      	b.n	800aeb8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	3304      	adds	r3, #4
 800aea2:	2201      	movs	r2, #1
 800aea4:	4619      	mov	r1, r3
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 f940 	bl	800b12c <USBD_CtlSendData>
        break;
 800aeac:	e004      	b.n	800aeb8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800aeae:	6839      	ldr	r1, [r7, #0]
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 f8be 	bl	800b032 <USBD_CtlError>
        break;
 800aeb6:	bf00      	nop
}
 800aeb8:	bf00      	nop
 800aeba:	3708      	adds	r7, #8
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	3b01      	subs	r3, #1
 800aed4:	2b02      	cmp	r3, #2
 800aed6:	d81e      	bhi.n	800af16 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	88db      	ldrh	r3, [r3, #6]
 800aedc:	2b02      	cmp	r3, #2
 800aede:	d004      	beq.n	800aeea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800aee0:	6839      	ldr	r1, [r7, #0]
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 f8a5 	bl	800b032 <USBD_CtlError>
        break;
 800aee8:	e01a      	b.n	800af20 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2201      	movs	r2, #1
 800aeee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d005      	beq.n	800af06 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	f043 0202 	orr.w	r2, r3, #2
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	330c      	adds	r3, #12
 800af0a:	2202      	movs	r2, #2
 800af0c:	4619      	mov	r1, r3
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 f90c 	bl	800b12c <USBD_CtlSendData>
      break;
 800af14:	e004      	b.n	800af20 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 f88a 	bl	800b032 <USBD_CtlError>
      break;
 800af1e:	bf00      	nop
  }
}
 800af20:	bf00      	nop
 800af22:	3708      	adds	r7, #8
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	885b      	ldrh	r3, [r3, #2]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d107      	bne.n	800af4a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 f94c 	bl	800b1e0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800af48:	e013      	b.n	800af72 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	885b      	ldrh	r3, [r3, #2]
 800af4e:	2b02      	cmp	r3, #2
 800af50:	d10b      	bne.n	800af6a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	889b      	ldrh	r3, [r3, #4]
 800af56:	0a1b      	lsrs	r3, r3, #8
 800af58:	b29b      	uxth	r3, r3
 800af5a:	b2da      	uxtb	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f93c 	bl	800b1e0 <USBD_CtlSendStatus>
}
 800af68:	e003      	b.n	800af72 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800af6a:	6839      	ldr	r1, [r7, #0]
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 f860 	bl	800b032 <USBD_CtlError>
}
 800af72:	bf00      	nop
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b082      	sub	sp, #8
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
 800af82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	3b01      	subs	r3, #1
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d80b      	bhi.n	800afaa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	885b      	ldrh	r3, [r3, #2]
 800af96:	2b01      	cmp	r3, #1
 800af98:	d10c      	bne.n	800afb4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 f91c 	bl	800b1e0 <USBD_CtlSendStatus>
      }
      break;
 800afa8:	e004      	b.n	800afb4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800afaa:	6839      	ldr	r1, [r7, #0]
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 f840 	bl	800b032 <USBD_CtlError>
      break;
 800afb2:	e000      	b.n	800afb6 <USBD_ClrFeature+0x3c>
      break;
 800afb4:	bf00      	nop
  }
}
 800afb6:	bf00      	nop
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b084      	sub	sp, #16
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	781a      	ldrb	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	3301      	adds	r3, #1
 800afd8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	781a      	ldrb	r2, [r3, #0]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	3301      	adds	r3, #1
 800afe6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f7ff fa40 	bl	800a46e <SWAPBYTE>
 800afee:	4603      	mov	r3, r0
 800aff0:	461a      	mov	r2, r3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	3301      	adds	r3, #1
 800affa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	3301      	adds	r3, #1
 800b000:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f7ff fa33 	bl	800a46e <SWAPBYTE>
 800b008:	4603      	mov	r3, r0
 800b00a:	461a      	mov	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	3301      	adds	r3, #1
 800b014:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	3301      	adds	r3, #1
 800b01a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f7ff fa26 	bl	800a46e <SWAPBYTE>
 800b022:	4603      	mov	r3, r0
 800b024:	461a      	mov	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	80da      	strh	r2, [r3, #6]
}
 800b02a:	bf00      	nop
 800b02c:	3710      	adds	r7, #16
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b082      	sub	sp, #8
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
 800b03a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b03c:	2180      	movs	r1, #128	@ 0x80
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 fcd4 	bl	800b9ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b044:	2100      	movs	r1, #0
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 fcd0 	bl	800b9ec <USBD_LL_StallEP>
}
 800b04c:	bf00      	nop
 800b04e:	3708      	adds	r7, #8
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b060:	2300      	movs	r3, #0
 800b062:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d042      	beq.n	800b0f0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b06e:	6938      	ldr	r0, [r7, #16]
 800b070:	f000 f842 	bl	800b0f8 <USBD_GetLen>
 800b074:	4603      	mov	r3, r0
 800b076:	3301      	adds	r3, #1
 800b078:	005b      	lsls	r3, r3, #1
 800b07a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b07e:	d808      	bhi.n	800b092 <USBD_GetString+0x3e>
 800b080:	6938      	ldr	r0, [r7, #16]
 800b082:	f000 f839 	bl	800b0f8 <USBD_GetLen>
 800b086:	4603      	mov	r3, r0
 800b088:	3301      	adds	r3, #1
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	005b      	lsls	r3, r3, #1
 800b08e:	b29a      	uxth	r2, r3
 800b090:	e001      	b.n	800b096 <USBD_GetString+0x42>
 800b092:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b09a:	7dfb      	ldrb	r3, [r7, #23]
 800b09c:	68ba      	ldr	r2, [r7, #8]
 800b09e:	4413      	add	r3, r2
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	7812      	ldrb	r2, [r2, #0]
 800b0a4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0a6:	7dfb      	ldrb	r3, [r7, #23]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b0ac:	7dfb      	ldrb	r3, [r7, #23]
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	2203      	movs	r2, #3
 800b0b4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0b6:	7dfb      	ldrb	r3, [r7, #23]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b0bc:	e013      	b.n	800b0e6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b0be:	7dfb      	ldrb	r3, [r7, #23]
 800b0c0:	68ba      	ldr	r2, [r7, #8]
 800b0c2:	4413      	add	r3, r2
 800b0c4:	693a      	ldr	r2, [r7, #16]
 800b0c6:	7812      	ldrb	r2, [r2, #0]
 800b0c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	613b      	str	r3, [r7, #16]
    idx++;
 800b0d0:	7dfb      	ldrb	r3, [r7, #23]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b0d6:	7dfb      	ldrb	r3, [r7, #23]
 800b0d8:	68ba      	ldr	r2, [r7, #8]
 800b0da:	4413      	add	r3, r2
 800b0dc:	2200      	movs	r2, #0
 800b0de:	701a      	strb	r2, [r3, #0]
    idx++;
 800b0e0:	7dfb      	ldrb	r3, [r7, #23]
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1e7      	bne.n	800b0be <USBD_GetString+0x6a>
 800b0ee:	e000      	b.n	800b0f2 <USBD_GetString+0x9e>
    return;
 800b0f0:	bf00      	nop
  }
}
 800b0f2:	3718      	adds	r7, #24
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b085      	sub	sp, #20
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b100:	2300      	movs	r3, #0
 800b102:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b108:	e005      	b.n	800b116 <USBD_GetLen+0x1e>
  {
    len++;
 800b10a:	7bfb      	ldrb	r3, [r7, #15]
 800b10c:	3301      	adds	r3, #1
 800b10e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	3301      	adds	r3, #1
 800b114:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d1f5      	bne.n	800b10a <USBD_GetLen+0x12>
  }

  return len;
 800b11e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3714      	adds	r7, #20
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr

0800b12c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2202      	movs	r2, #2
 800b13c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	68ba      	ldr	r2, [r7, #8]
 800b150:	2100      	movs	r1, #0
 800b152:	68f8      	ldr	r0, [r7, #12]
 800b154:	f000 fcd3 	bl	800bafe <USBD_LL_Transmit>

  return USBD_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b084      	sub	sp, #16
 800b166:	af00      	add	r7, sp, #0
 800b168:	60f8      	str	r0, [r7, #12]
 800b16a:	60b9      	str	r1, [r7, #8]
 800b16c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	2100      	movs	r1, #0
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	f000 fcc2 	bl	800bafe <USBD_LL_Transmit>

  return USBD_OK;
 800b17a:	2300      	movs	r3, #0
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3710      	adds	r7, #16
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	60b9      	str	r1, [r7, #8]
 800b18e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2203      	movs	r2, #3
 800b194:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	68ba      	ldr	r2, [r7, #8]
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	f000 fcc6 	bl	800bb40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1b4:	2300      	movs	r3, #0
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b084      	sub	sp, #16
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	60f8      	str	r0, [r7, #12]
 800b1c6:	60b9      	str	r1, [r7, #8]
 800b1c8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	68ba      	ldr	r2, [r7, #8]
 800b1ce:	2100      	movs	r1, #0
 800b1d0:	68f8      	ldr	r0, [r7, #12]
 800b1d2:	f000 fcb5 	bl	800bb40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1d6:	2300      	movs	r3, #0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2204      	movs	r2, #4
 800b1ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	2100      	movs	r1, #0
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 fc81 	bl	800bafe <USBD_LL_Transmit>

  return USBD_OK;
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3708      	adds	r7, #8
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b206:	b580      	push	{r7, lr}
 800b208:	b082      	sub	sp, #8
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2205      	movs	r2, #5
 800b212:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b216:	2300      	movs	r3, #0
 800b218:	2200      	movs	r2, #0
 800b21a:	2100      	movs	r1, #0
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 fc8f 	bl	800bb40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b222:	2300      	movs	r3, #0
}
 800b224:	4618      	mov	r0, r3
 800b226:	3708      	adds	r7, #8
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b230:	2200      	movs	r2, #0
 800b232:	4912      	ldr	r1, [pc, #72]	@ (800b27c <MX_USB_DEVICE_Init+0x50>)
 800b234:	4812      	ldr	r0, [pc, #72]	@ (800b280 <MX_USB_DEVICE_Init+0x54>)
 800b236:	f7fe fcf7 	bl	8009c28 <USBD_Init>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d001      	beq.n	800b244 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b240:	f7f6 fb66 	bl	8001910 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b244:	490f      	ldr	r1, [pc, #60]	@ (800b284 <MX_USB_DEVICE_Init+0x58>)
 800b246:	480e      	ldr	r0, [pc, #56]	@ (800b280 <MX_USB_DEVICE_Init+0x54>)
 800b248:	f7fe fd1e 	bl	8009c88 <USBD_RegisterClass>
 800b24c:	4603      	mov	r3, r0
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d001      	beq.n	800b256 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b252:	f7f6 fb5d 	bl	8001910 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b256:	490c      	ldr	r1, [pc, #48]	@ (800b288 <MX_USB_DEVICE_Init+0x5c>)
 800b258:	4809      	ldr	r0, [pc, #36]	@ (800b280 <MX_USB_DEVICE_Init+0x54>)
 800b25a:	f7fe fc55 	bl	8009b08 <USBD_CDC_RegisterInterface>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b264:	f7f6 fb54 	bl	8001910 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b268:	4805      	ldr	r0, [pc, #20]	@ (800b280 <MX_USB_DEVICE_Init+0x54>)
 800b26a:	f7fe fd43 	bl	8009cf4 <USBD_Start>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b00      	cmp	r3, #0
 800b272:	d001      	beq.n	800b278 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b274:	f7f6 fb4c 	bl	8001910 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b278:	bf00      	nop
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	200000b0 	.word	0x200000b0
 800b280:	20000678 	.word	0x20000678
 800b284:	2000001c 	.word	0x2000001c
 800b288:	2000009c 	.word	0x2000009c

0800b28c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b290:	2200      	movs	r2, #0
 800b292:	4905      	ldr	r1, [pc, #20]	@ (800b2a8 <CDC_Init_FS+0x1c>)
 800b294:	4805      	ldr	r0, [pc, #20]	@ (800b2ac <CDC_Init_FS+0x20>)
 800b296:	f7fe fc51 	bl	8009b3c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b29a:	4905      	ldr	r1, [pc, #20]	@ (800b2b0 <CDC_Init_FS+0x24>)
 800b29c:	4803      	ldr	r0, [pc, #12]	@ (800b2ac <CDC_Init_FS+0x20>)
 800b29e:	f7fe fc6f 	bl	8009b80 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b2a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	bd80      	pop	{r7, pc}
 800b2a8:	20001154 	.word	0x20001154
 800b2ac:	20000678 	.word	0x20000678
 800b2b0:	20000954 	.word	0x20000954

0800b2b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b2b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	6039      	str	r1, [r7, #0]
 800b2ce:	71fb      	strb	r3, [r7, #7]
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b2d4:	79fb      	ldrb	r3, [r7, #7]
 800b2d6:	2b23      	cmp	r3, #35	@ 0x23
 800b2d8:	d84a      	bhi.n	800b370 <CDC_Control_FS+0xac>
 800b2da:	a201      	add	r2, pc, #4	@ (adr r2, 800b2e0 <CDC_Control_FS+0x1c>)
 800b2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e0:	0800b371 	.word	0x0800b371
 800b2e4:	0800b371 	.word	0x0800b371
 800b2e8:	0800b371 	.word	0x0800b371
 800b2ec:	0800b371 	.word	0x0800b371
 800b2f0:	0800b371 	.word	0x0800b371
 800b2f4:	0800b371 	.word	0x0800b371
 800b2f8:	0800b371 	.word	0x0800b371
 800b2fc:	0800b371 	.word	0x0800b371
 800b300:	0800b371 	.word	0x0800b371
 800b304:	0800b371 	.word	0x0800b371
 800b308:	0800b371 	.word	0x0800b371
 800b30c:	0800b371 	.word	0x0800b371
 800b310:	0800b371 	.word	0x0800b371
 800b314:	0800b371 	.word	0x0800b371
 800b318:	0800b371 	.word	0x0800b371
 800b31c:	0800b371 	.word	0x0800b371
 800b320:	0800b371 	.word	0x0800b371
 800b324:	0800b371 	.word	0x0800b371
 800b328:	0800b371 	.word	0x0800b371
 800b32c:	0800b371 	.word	0x0800b371
 800b330:	0800b371 	.word	0x0800b371
 800b334:	0800b371 	.word	0x0800b371
 800b338:	0800b371 	.word	0x0800b371
 800b33c:	0800b371 	.word	0x0800b371
 800b340:	0800b371 	.word	0x0800b371
 800b344:	0800b371 	.word	0x0800b371
 800b348:	0800b371 	.word	0x0800b371
 800b34c:	0800b371 	.word	0x0800b371
 800b350:	0800b371 	.word	0x0800b371
 800b354:	0800b371 	.word	0x0800b371
 800b358:	0800b371 	.word	0x0800b371
 800b35c:	0800b371 	.word	0x0800b371
 800b360:	0800b371 	.word	0x0800b371
 800b364:	0800b371 	.word	0x0800b371
 800b368:	0800b371 	.word	0x0800b371
 800b36c:	0800b371 	.word	0x0800b371
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b370:	bf00      	nop
  }

  return (USBD_OK);
 800b372:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b374:	4618      	mov	r0, r3
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b38a:	6879      	ldr	r1, [r7, #4]
 800b38c:	4805      	ldr	r0, [pc, #20]	@ (800b3a4 <CDC_Receive_FS+0x24>)
 800b38e:	f7fe fbf7 	bl	8009b80 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b392:	4804      	ldr	r0, [pc, #16]	@ (800b3a4 <CDC_Receive_FS+0x24>)
 800b394:	f7fe fc12 	bl	8009bbc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b398:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3708      	adds	r7, #8
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	20000678 	.word	0x20000678

0800b3a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b087      	sub	sp, #28
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b3ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	371c      	adds	r7, #28
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
	...

0800b3cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	6039      	str	r1, [r7, #0]
 800b3d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	2212      	movs	r2, #18
 800b3dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b3de:	4b03      	ldr	r3, [pc, #12]	@ (800b3ec <USBD_FS_DeviceDescriptor+0x20>)
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	200000cc 	.word	0x200000cc

0800b3f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	6039      	str	r1, [r7, #0]
 800b3fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	2204      	movs	r2, #4
 800b400:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b402:	4b03      	ldr	r3, [pc, #12]	@ (800b410 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b404:	4618      	mov	r0, r3
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	200000e0 	.word	0x200000e0

0800b414 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	4603      	mov	r3, r0
 800b41c:	6039      	str	r1, [r7, #0]
 800b41e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b420:	79fb      	ldrb	r3, [r7, #7]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d105      	bne.n	800b432 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b426:	683a      	ldr	r2, [r7, #0]
 800b428:	4907      	ldr	r1, [pc, #28]	@ (800b448 <USBD_FS_ProductStrDescriptor+0x34>)
 800b42a:	4808      	ldr	r0, [pc, #32]	@ (800b44c <USBD_FS_ProductStrDescriptor+0x38>)
 800b42c:	f7ff fe12 	bl	800b054 <USBD_GetString>
 800b430:	e004      	b.n	800b43c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b432:	683a      	ldr	r2, [r7, #0]
 800b434:	4904      	ldr	r1, [pc, #16]	@ (800b448 <USBD_FS_ProductStrDescriptor+0x34>)
 800b436:	4805      	ldr	r0, [pc, #20]	@ (800b44c <USBD_FS_ProductStrDescriptor+0x38>)
 800b438:	f7ff fe0c 	bl	800b054 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b43c:	4b02      	ldr	r3, [pc, #8]	@ (800b448 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3708      	adds	r7, #8
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	20001954 	.word	0x20001954
 800b44c:	0800ef28 	.word	0x0800ef28

0800b450 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	4603      	mov	r3, r0
 800b458:	6039      	str	r1, [r7, #0]
 800b45a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b45c:	683a      	ldr	r2, [r7, #0]
 800b45e:	4904      	ldr	r1, [pc, #16]	@ (800b470 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b460:	4804      	ldr	r0, [pc, #16]	@ (800b474 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b462:	f7ff fdf7 	bl	800b054 <USBD_GetString>
  return USBD_StrDesc;
 800b466:	4b02      	ldr	r3, [pc, #8]	@ (800b470 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	20001954 	.word	0x20001954
 800b474:	0800ef40 	.word	0x0800ef40

0800b478 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	4603      	mov	r3, r0
 800b480:	6039      	str	r1, [r7, #0]
 800b482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	221a      	movs	r2, #26
 800b488:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b48a:	f000 f843 	bl	800b514 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b48e:	4b02      	ldr	r3, [pc, #8]	@ (800b498 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b490:	4618      	mov	r0, r3
 800b492:	3708      	adds	r7, #8
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	200000e4 	.word	0x200000e4

0800b49c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	6039      	str	r1, [r7, #0]
 800b4a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b4a8:	79fb      	ldrb	r3, [r7, #7]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d105      	bne.n	800b4ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	4907      	ldr	r1, [pc, #28]	@ (800b4d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4b2:	4808      	ldr	r0, [pc, #32]	@ (800b4d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4b4:	f7ff fdce 	bl	800b054 <USBD_GetString>
 800b4b8:	e004      	b.n	800b4c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4ba:	683a      	ldr	r2, [r7, #0]
 800b4bc:	4904      	ldr	r1, [pc, #16]	@ (800b4d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4be:	4805      	ldr	r0, [pc, #20]	@ (800b4d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4c0:	f7ff fdc8 	bl	800b054 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4c4:	4b02      	ldr	r3, [pc, #8]	@ (800b4d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3708      	adds	r7, #8
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	20001954 	.word	0x20001954
 800b4d4:	0800ef54 	.word	0x0800ef54

0800b4d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	4603      	mov	r3, r0
 800b4e0:	6039      	str	r1, [r7, #0]
 800b4e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b4e4:	79fb      	ldrb	r3, [r7, #7]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d105      	bne.n	800b4f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b4ea:	683a      	ldr	r2, [r7, #0]
 800b4ec:	4907      	ldr	r1, [pc, #28]	@ (800b50c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b4ee:	4808      	ldr	r0, [pc, #32]	@ (800b510 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b4f0:	f7ff fdb0 	bl	800b054 <USBD_GetString>
 800b4f4:	e004      	b.n	800b500 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b4f6:	683a      	ldr	r2, [r7, #0]
 800b4f8:	4904      	ldr	r1, [pc, #16]	@ (800b50c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b4fa:	4805      	ldr	r0, [pc, #20]	@ (800b510 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b4fc:	f7ff fdaa 	bl	800b054 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b500:	4b02      	ldr	r3, [pc, #8]	@ (800b50c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b502:	4618      	mov	r0, r3
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	20001954 	.word	0x20001954
 800b510:	0800ef60 	.word	0x0800ef60

0800b514 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b51a:	4b0f      	ldr	r3, [pc, #60]	@ (800b558 <Get_SerialNum+0x44>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b520:	4b0e      	ldr	r3, [pc, #56]	@ (800b55c <Get_SerialNum+0x48>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b526:	4b0e      	ldr	r3, [pc, #56]	@ (800b560 <Get_SerialNum+0x4c>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4413      	add	r3, r2
 800b532:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d009      	beq.n	800b54e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b53a:	2208      	movs	r2, #8
 800b53c:	4909      	ldr	r1, [pc, #36]	@ (800b564 <Get_SerialNum+0x50>)
 800b53e:	68f8      	ldr	r0, [r7, #12]
 800b540:	f000 f814 	bl	800b56c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b544:	2204      	movs	r2, #4
 800b546:	4908      	ldr	r1, [pc, #32]	@ (800b568 <Get_SerialNum+0x54>)
 800b548:	68b8      	ldr	r0, [r7, #8]
 800b54a:	f000 f80f 	bl	800b56c <IntToUnicode>
  }
}
 800b54e:	bf00      	nop
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	1fff7a10 	.word	0x1fff7a10
 800b55c:	1fff7a14 	.word	0x1fff7a14
 800b560:	1fff7a18 	.word	0x1fff7a18
 800b564:	200000e6 	.word	0x200000e6
 800b568:	200000f6 	.word	0x200000f6

0800b56c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b087      	sub	sp, #28
 800b570:	af00      	add	r7, sp, #0
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	4613      	mov	r3, r2
 800b578:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b57a:	2300      	movs	r3, #0
 800b57c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b57e:	2300      	movs	r3, #0
 800b580:	75fb      	strb	r3, [r7, #23]
 800b582:	e027      	b.n	800b5d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	0f1b      	lsrs	r3, r3, #28
 800b588:	2b09      	cmp	r3, #9
 800b58a:	d80b      	bhi.n	800b5a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	0f1b      	lsrs	r3, r3, #28
 800b590:	b2da      	uxtb	r2, r3
 800b592:	7dfb      	ldrb	r3, [r7, #23]
 800b594:	005b      	lsls	r3, r3, #1
 800b596:	4619      	mov	r1, r3
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	440b      	add	r3, r1
 800b59c:	3230      	adds	r2, #48	@ 0x30
 800b59e:	b2d2      	uxtb	r2, r2
 800b5a0:	701a      	strb	r2, [r3, #0]
 800b5a2:	e00a      	b.n	800b5ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	0f1b      	lsrs	r3, r3, #28
 800b5a8:	b2da      	uxtb	r2, r3
 800b5aa:	7dfb      	ldrb	r3, [r7, #23]
 800b5ac:	005b      	lsls	r3, r3, #1
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	440b      	add	r3, r1
 800b5b4:	3237      	adds	r2, #55	@ 0x37
 800b5b6:	b2d2      	uxtb	r2, r2
 800b5b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	011b      	lsls	r3, r3, #4
 800b5be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b5c0:	7dfb      	ldrb	r3, [r7, #23]
 800b5c2:	005b      	lsls	r3, r3, #1
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	68ba      	ldr	r2, [r7, #8]
 800b5c8:	4413      	add	r3, r2
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b5ce:	7dfb      	ldrb	r3, [r7, #23]
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	75fb      	strb	r3, [r7, #23]
 800b5d4:	7dfa      	ldrb	r2, [r7, #23]
 800b5d6:	79fb      	ldrb	r3, [r7, #7]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d3d3      	bcc.n	800b584 <IntToUnicode+0x18>
  }
}
 800b5dc:	bf00      	nop
 800b5de:	bf00      	nop
 800b5e0:	371c      	adds	r7, #28
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr
	...

0800b5ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b08a      	sub	sp, #40	@ 0x28
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5f4:	f107 0314 	add.w	r3, r7, #20
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]
 800b5fc:	605a      	str	r2, [r3, #4]
 800b5fe:	609a      	str	r2, [r3, #8]
 800b600:	60da      	str	r2, [r3, #12]
 800b602:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b60c:	d147      	bne.n	800b69e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b60e:	2300      	movs	r3, #0
 800b610:	613b      	str	r3, [r7, #16]
 800b612:	4b25      	ldr	r3, [pc, #148]	@ (800b6a8 <HAL_PCD_MspInit+0xbc>)
 800b614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b616:	4a24      	ldr	r2, [pc, #144]	@ (800b6a8 <HAL_PCD_MspInit+0xbc>)
 800b618:	f043 0301 	orr.w	r3, r3, #1
 800b61c:	6313      	str	r3, [r2, #48]	@ 0x30
 800b61e:	4b22      	ldr	r3, [pc, #136]	@ (800b6a8 <HAL_PCD_MspInit+0xbc>)
 800b620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b622:	f003 0301 	and.w	r3, r3, #1
 800b626:	613b      	str	r3, [r7, #16]
 800b628:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b62a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b62e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b630:	2300      	movs	r3, #0
 800b632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b634:	2300      	movs	r3, #0
 800b636:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b638:	f107 0314 	add.w	r3, r7, #20
 800b63c:	4619      	mov	r1, r3
 800b63e:	481b      	ldr	r0, [pc, #108]	@ (800b6ac <HAL_PCD_MspInit+0xc0>)
 800b640:	f7f7 ff74 	bl	800352c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b644:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b64a:	2302      	movs	r3, #2
 800b64c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b64e:	2300      	movs	r3, #0
 800b650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b652:	2300      	movs	r3, #0
 800b654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b656:	230a      	movs	r3, #10
 800b658:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b65a:	f107 0314 	add.w	r3, r7, #20
 800b65e:	4619      	mov	r1, r3
 800b660:	4812      	ldr	r0, [pc, #72]	@ (800b6ac <HAL_PCD_MspInit+0xc0>)
 800b662:	f7f7 ff63 	bl	800352c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b666:	4b10      	ldr	r3, [pc, #64]	@ (800b6a8 <HAL_PCD_MspInit+0xbc>)
 800b668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b66a:	4a0f      	ldr	r2, [pc, #60]	@ (800b6a8 <HAL_PCD_MspInit+0xbc>)
 800b66c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b670:	6353      	str	r3, [r2, #52]	@ 0x34
 800b672:	2300      	movs	r3, #0
 800b674:	60fb      	str	r3, [r7, #12]
 800b676:	4b0c      	ldr	r3, [pc, #48]	@ (800b6a8 <HAL_PCD_MspInit+0xbc>)
 800b678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b67a:	4a0b      	ldr	r2, [pc, #44]	@ (800b6a8 <HAL_PCD_MspInit+0xbc>)
 800b67c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b680:	6453      	str	r3, [r2, #68]	@ 0x44
 800b682:	4b09      	ldr	r3, [pc, #36]	@ (800b6a8 <HAL_PCD_MspInit+0xbc>)
 800b684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b68a:	60fb      	str	r3, [r7, #12]
 800b68c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b68e:	2200      	movs	r2, #0
 800b690:	2100      	movs	r1, #0
 800b692:	2043      	movs	r0, #67	@ 0x43
 800b694:	f7f7 ff13 	bl	80034be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b698:	2043      	movs	r0, #67	@ 0x43
 800b69a:	f7f7 ff2c 	bl	80034f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b69e:	bf00      	nop
 800b6a0:	3728      	adds	r7, #40	@ 0x28
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	40023800 	.word	0x40023800
 800b6ac:	40020000 	.word	0x40020000

0800b6b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	4610      	mov	r0, r2
 800b6c8:	f7fe fb61 	bl	8009d8e <USBD_LL_SetupStage>
}
 800b6cc:	bf00      	nop
 800b6ce:	3708      	adds	r7, #8
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b6e6:	78fa      	ldrb	r2, [r7, #3]
 800b6e8:	6879      	ldr	r1, [r7, #4]
 800b6ea:	4613      	mov	r3, r2
 800b6ec:	00db      	lsls	r3, r3, #3
 800b6ee:	4413      	add	r3, r2
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	440b      	add	r3, r1
 800b6f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	78fb      	ldrb	r3, [r7, #3]
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	f7fe fb9b 	bl	8009e38 <USBD_LL_DataOutStage>
}
 800b702:	bf00      	nop
 800b704:	3708      	adds	r7, #8
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b082      	sub	sp, #8
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	460b      	mov	r3, r1
 800b714:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b71c:	78fa      	ldrb	r2, [r7, #3]
 800b71e:	6879      	ldr	r1, [r7, #4]
 800b720:	4613      	mov	r3, r2
 800b722:	00db      	lsls	r3, r3, #3
 800b724:	4413      	add	r3, r2
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	440b      	add	r3, r1
 800b72a:	3320      	adds	r3, #32
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	78fb      	ldrb	r3, [r7, #3]
 800b730:	4619      	mov	r1, r3
 800b732:	f7fe fc34 	bl	8009f9e <USBD_LL_DataInStage>
}
 800b736:	bf00      	nop
 800b738:	3708      	adds	r7, #8
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b082      	sub	sp, #8
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7fe fd6e 	bl	800a22e <USBD_LL_SOF>
}
 800b752:	bf00      	nop
 800b754:	3708      	adds	r7, #8
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}

0800b75a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b75a:	b580      	push	{r7, lr}
 800b75c:	b084      	sub	sp, #16
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b762:	2301      	movs	r3, #1
 800b764:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	79db      	ldrb	r3, [r3, #7]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d102      	bne.n	800b774 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b76e:	2300      	movs	r3, #0
 800b770:	73fb      	strb	r3, [r7, #15]
 800b772:	e008      	b.n	800b786 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	79db      	ldrb	r3, [r3, #7]
 800b778:	2b02      	cmp	r3, #2
 800b77a:	d102      	bne.n	800b782 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b77c:	2301      	movs	r3, #1
 800b77e:	73fb      	strb	r3, [r7, #15]
 800b780:	e001      	b.n	800b786 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b782:	f7f6 f8c5 	bl	8001910 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b78c:	7bfa      	ldrb	r2, [r7, #15]
 800b78e:	4611      	mov	r1, r2
 800b790:	4618      	mov	r0, r3
 800b792:	f7fe fd08 	bl	800a1a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7fe fcb0 	bl	800a102 <USBD_LL_Reset>
}
 800b7a2:	bf00      	nop
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
	...

0800b7ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7fe fd03 	bl	800a1c6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	6812      	ldr	r2, [r2, #0]
 800b7ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b7d2:	f043 0301 	orr.w	r3, r3, #1
 800b7d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	7adb      	ldrb	r3, [r3, #11]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d005      	beq.n	800b7ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b7e0:	4b04      	ldr	r3, [pc, #16]	@ (800b7f4 <HAL_PCD_SuspendCallback+0x48>)
 800b7e2:	691b      	ldr	r3, [r3, #16]
 800b7e4:	4a03      	ldr	r2, [pc, #12]	@ (800b7f4 <HAL_PCD_SuspendCallback+0x48>)
 800b7e6:	f043 0306 	orr.w	r3, r3, #6
 800b7ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b7ec:	bf00      	nop
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	e000ed00 	.word	0xe000ed00

0800b7f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b806:	4618      	mov	r0, r3
 800b808:	f7fe fcf9 	bl	800a1fe <USBD_LL_Resume>
}
 800b80c:	bf00      	nop
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	460b      	mov	r3, r1
 800b81e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b826:	78fa      	ldrb	r2, [r7, #3]
 800b828:	4611      	mov	r1, r2
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fe fd51 	bl	800a2d2 <USBD_LL_IsoOUTIncomplete>
}
 800b830:	bf00      	nop
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	460b      	mov	r3, r1
 800b842:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b84a:	78fa      	ldrb	r2, [r7, #3]
 800b84c:	4611      	mov	r1, r2
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fe fd0d 	bl	800a26e <USBD_LL_IsoINIncomplete>
}
 800b854:	bf00      	nop
 800b856:	3708      	adds	r7, #8
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fe fd63 	bl	800a336 <USBD_LL_DevConnected>
}
 800b870:	bf00      	nop
 800b872:	3708      	adds	r7, #8
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b886:	4618      	mov	r0, r3
 800b888:	f7fe fd60 	bl	800a34c <USBD_LL_DevDisconnected>
}
 800b88c:	bf00      	nop
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d13c      	bne.n	800b91e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b8a4:	4a20      	ldr	r2, [pc, #128]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4a1e      	ldr	r2, [pc, #120]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8b0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b8b4:	4b1c      	ldr	r3, [pc, #112]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b8ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b8bc:	4b1a      	ldr	r3, [pc, #104]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8be:	2204      	movs	r2, #4
 800b8c0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b8c2:	4b19      	ldr	r3, [pc, #100]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8c4:	2202      	movs	r2, #2
 800b8c6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b8c8:	4b17      	ldr	r3, [pc, #92]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b8ce:	4b16      	ldr	r3, [pc, #88]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8d0:	2202      	movs	r2, #2
 800b8d2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b8d4:	4b14      	ldr	r3, [pc, #80]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b8da:	4b13      	ldr	r3, [pc, #76]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8dc:	2200      	movs	r2, #0
 800b8de:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b8e0:	4b11      	ldr	r3, [pc, #68]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b8e6:	4b10      	ldr	r3, [pc, #64]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b8ec:	4b0e      	ldr	r3, [pc, #56]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b8f2:	480d      	ldr	r0, [pc, #52]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8f4:	f7f9 fe46 	bl	8005584 <HAL_PCD_Init>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d001      	beq.n	800b902 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b8fe:	f7f6 f807 	bl	8001910 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b902:	2180      	movs	r1, #128	@ 0x80
 800b904:	4808      	ldr	r0, [pc, #32]	@ (800b928 <USBD_LL_Init+0x94>)
 800b906:	f7fb f872 	bl	80069ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b90a:	2240      	movs	r2, #64	@ 0x40
 800b90c:	2100      	movs	r1, #0
 800b90e:	4806      	ldr	r0, [pc, #24]	@ (800b928 <USBD_LL_Init+0x94>)
 800b910:	f7fb f826 	bl	8006960 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b914:	2280      	movs	r2, #128	@ 0x80
 800b916:	2101      	movs	r1, #1
 800b918:	4803      	ldr	r0, [pc, #12]	@ (800b928 <USBD_LL_Init+0x94>)
 800b91a:	f7fb f821 	bl	8006960 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3708      	adds	r7, #8
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	20001b54 	.word	0x20001b54

0800b92c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b934:	2300      	movs	r3, #0
 800b936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b938:	2300      	movs	r3, #0
 800b93a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b942:	4618      	mov	r0, r3
 800b944:	f7f9 ff2d 	bl	80057a2 <HAL_PCD_Start>
 800b948:	4603      	mov	r3, r0
 800b94a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b94c:	7bfb      	ldrb	r3, [r7, #15]
 800b94e:	4618      	mov	r0, r3
 800b950:	f000 f942 	bl	800bbd8 <USBD_Get_USB_Status>
 800b954:	4603      	mov	r3, r0
 800b956:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b958:	7bbb      	ldrb	r3, [r7, #14]
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3710      	adds	r7, #16
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}

0800b962 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b084      	sub	sp, #16
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
 800b96a:	4608      	mov	r0, r1
 800b96c:	4611      	mov	r1, r2
 800b96e:	461a      	mov	r2, r3
 800b970:	4603      	mov	r3, r0
 800b972:	70fb      	strb	r3, [r7, #3]
 800b974:	460b      	mov	r3, r1
 800b976:	70bb      	strb	r3, [r7, #2]
 800b978:	4613      	mov	r3, r2
 800b97a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b97c:	2300      	movs	r3, #0
 800b97e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b980:	2300      	movs	r3, #0
 800b982:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b98a:	78bb      	ldrb	r3, [r7, #2]
 800b98c:	883a      	ldrh	r2, [r7, #0]
 800b98e:	78f9      	ldrb	r1, [r7, #3]
 800b990:	f7fa fc01 	bl	8006196 <HAL_PCD_EP_Open>
 800b994:	4603      	mov	r3, r0
 800b996:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b998:	7bfb      	ldrb	r3, [r7, #15]
 800b99a:	4618      	mov	r0, r3
 800b99c:	f000 f91c 	bl	800bbd8 <USBD_Get_USB_Status>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b084      	sub	sp, #16
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b9c8:	78fa      	ldrb	r2, [r7, #3]
 800b9ca:	4611      	mov	r1, r2
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7fa fc4c 	bl	800626a <HAL_PCD_EP_Close>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9d6:	7bfb      	ldrb	r3, [r7, #15]
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f000 f8fd 	bl	800bbd8 <USBD_Get_USB_Status>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3710      	adds	r7, #16
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba06:	78fa      	ldrb	r2, [r7, #3]
 800ba08:	4611      	mov	r1, r2
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fa fd04 	bl	8006418 <HAL_PCD_EP_SetStall>
 800ba10:	4603      	mov	r3, r0
 800ba12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba14:	7bfb      	ldrb	r3, [r7, #15]
 800ba16:	4618      	mov	r0, r3
 800ba18:	f000 f8de 	bl	800bbd8 <USBD_Get_USB_Status>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba20:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b084      	sub	sp, #16
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
 800ba32:	460b      	mov	r3, r1
 800ba34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba36:	2300      	movs	r3, #0
 800ba38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba44:	78fa      	ldrb	r2, [r7, #3]
 800ba46:	4611      	mov	r1, r2
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7fa fd48 	bl	80064de <HAL_PCD_EP_ClrStall>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba52:	7bfb      	ldrb	r3, [r7, #15]
 800ba54:	4618      	mov	r0, r3
 800ba56:	f000 f8bf 	bl	800bbd8 <USBD_Get_USB_Status>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	460b      	mov	r3, r1
 800ba72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ba7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	da0b      	bge.n	800ba9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ba84:	78fb      	ldrb	r3, [r7, #3]
 800ba86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba8a:	68f9      	ldr	r1, [r7, #12]
 800ba8c:	4613      	mov	r3, r2
 800ba8e:	00db      	lsls	r3, r3, #3
 800ba90:	4413      	add	r3, r2
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	440b      	add	r3, r1
 800ba96:	3316      	adds	r3, #22
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	e00b      	b.n	800bab4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ba9c:	78fb      	ldrb	r3, [r7, #3]
 800ba9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800baa2:	68f9      	ldr	r1, [r7, #12]
 800baa4:	4613      	mov	r3, r2
 800baa6:	00db      	lsls	r3, r3, #3
 800baa8:	4413      	add	r3, r2
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	440b      	add	r3, r1
 800baae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800bab2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3714      	adds	r7, #20
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr

0800bac0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	460b      	mov	r3, r1
 800baca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bacc:	2300      	movs	r3, #0
 800bace:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bad0:	2300      	movs	r3, #0
 800bad2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bada:	78fa      	ldrb	r2, [r7, #3]
 800badc:	4611      	mov	r1, r2
 800bade:	4618      	mov	r0, r3
 800bae0:	f7fa fb35 	bl	800614e <HAL_PCD_SetAddress>
 800bae4:	4603      	mov	r3, r0
 800bae6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bae8:	7bfb      	ldrb	r3, [r7, #15]
 800baea:	4618      	mov	r0, r3
 800baec:	f000 f874 	bl	800bbd8 <USBD_Get_USB_Status>
 800baf0:	4603      	mov	r3, r0
 800baf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b086      	sub	sp, #24
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	60f8      	str	r0, [r7, #12]
 800bb06:	607a      	str	r2, [r7, #4]
 800bb08:	603b      	str	r3, [r7, #0]
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb12:	2300      	movs	r3, #0
 800bb14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bb1c:	7af9      	ldrb	r1, [r7, #11]
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	f7fa fc3f 	bl	80063a4 <HAL_PCD_EP_Transmit>
 800bb26:	4603      	mov	r3, r0
 800bb28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb2a:	7dfb      	ldrb	r3, [r7, #23]
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f000 f853 	bl	800bbd8 <USBD_Get_USB_Status>
 800bb32:	4603      	mov	r3, r0
 800bb34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb36:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3718      	adds	r7, #24
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b086      	sub	sp, #24
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	607a      	str	r2, [r7, #4]
 800bb4a:	603b      	str	r3, [r7, #0]
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb50:	2300      	movs	r3, #0
 800bb52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb54:	2300      	movs	r3, #0
 800bb56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bb5e:	7af9      	ldrb	r1, [r7, #11]
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	f7fa fbcb 	bl	80062fe <HAL_PCD_EP_Receive>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb6c:	7dfb      	ldrb	r3, [r7, #23]
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f000 f832 	bl	800bbd8 <USBD_Get_USB_Status>
 800bb74:	4603      	mov	r3, r0
 800bb76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb78:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3718      	adds	r7, #24
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b082      	sub	sp, #8
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb94:	78fa      	ldrb	r2, [r7, #3]
 800bb96:	4611      	mov	r1, r2
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7fa fbeb 	bl	8006374 <HAL_PCD_EP_GetRxCount>
 800bb9e:	4603      	mov	r3, r0
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3708      	adds	r7, #8
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bbb0:	4b03      	ldr	r3, [pc, #12]	@ (800bbc0 <USBD_static_malloc+0x18>)
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	370c      	adds	r7, #12
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	20002038 	.word	0x20002038

0800bbc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]

}
 800bbcc:	bf00      	nop
 800bbce:	370c      	adds	r7, #12
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr

0800bbd8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b085      	sub	sp, #20
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	4603      	mov	r3, r0
 800bbe0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bbe6:	79fb      	ldrb	r3, [r7, #7]
 800bbe8:	2b03      	cmp	r3, #3
 800bbea:	d817      	bhi.n	800bc1c <USBD_Get_USB_Status+0x44>
 800bbec:	a201      	add	r2, pc, #4	@ (adr r2, 800bbf4 <USBD_Get_USB_Status+0x1c>)
 800bbee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf2:	bf00      	nop
 800bbf4:	0800bc05 	.word	0x0800bc05
 800bbf8:	0800bc0b 	.word	0x0800bc0b
 800bbfc:	0800bc11 	.word	0x0800bc11
 800bc00:	0800bc17 	.word	0x0800bc17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bc04:	2300      	movs	r3, #0
 800bc06:	73fb      	strb	r3, [r7, #15]
    break;
 800bc08:	e00b      	b.n	800bc22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc0a:	2303      	movs	r3, #3
 800bc0c:	73fb      	strb	r3, [r7, #15]
    break;
 800bc0e:	e008      	b.n	800bc22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc10:	2301      	movs	r3, #1
 800bc12:	73fb      	strb	r3, [r7, #15]
    break;
 800bc14:	e005      	b.n	800bc22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc16:	2303      	movs	r3, #3
 800bc18:	73fb      	strb	r3, [r7, #15]
    break;
 800bc1a:	e002      	b.n	800bc22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc20:	bf00      	nop
  }
  return usb_status;
 800bc22:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3714      	adds	r7, #20
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <__cvt>:
 800bc30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc34:	ec57 6b10 	vmov	r6, r7, d0
 800bc38:	2f00      	cmp	r7, #0
 800bc3a:	460c      	mov	r4, r1
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	463b      	mov	r3, r7
 800bc40:	bfbb      	ittet	lt
 800bc42:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bc46:	461f      	movlt	r7, r3
 800bc48:	2300      	movge	r3, #0
 800bc4a:	232d      	movlt	r3, #45	@ 0x2d
 800bc4c:	700b      	strb	r3, [r1, #0]
 800bc4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc50:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bc54:	4691      	mov	r9, r2
 800bc56:	f023 0820 	bic.w	r8, r3, #32
 800bc5a:	bfbc      	itt	lt
 800bc5c:	4632      	movlt	r2, r6
 800bc5e:	4616      	movlt	r6, r2
 800bc60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bc64:	d005      	beq.n	800bc72 <__cvt+0x42>
 800bc66:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bc6a:	d100      	bne.n	800bc6e <__cvt+0x3e>
 800bc6c:	3401      	adds	r4, #1
 800bc6e:	2102      	movs	r1, #2
 800bc70:	e000      	b.n	800bc74 <__cvt+0x44>
 800bc72:	2103      	movs	r1, #3
 800bc74:	ab03      	add	r3, sp, #12
 800bc76:	9301      	str	r3, [sp, #4]
 800bc78:	ab02      	add	r3, sp, #8
 800bc7a:	9300      	str	r3, [sp, #0]
 800bc7c:	ec47 6b10 	vmov	d0, r6, r7
 800bc80:	4653      	mov	r3, sl
 800bc82:	4622      	mov	r2, r4
 800bc84:	f000 fe5c 	bl	800c940 <_dtoa_r>
 800bc88:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bc8c:	4605      	mov	r5, r0
 800bc8e:	d119      	bne.n	800bcc4 <__cvt+0x94>
 800bc90:	f019 0f01 	tst.w	r9, #1
 800bc94:	d00e      	beq.n	800bcb4 <__cvt+0x84>
 800bc96:	eb00 0904 	add.w	r9, r0, r4
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	4630      	mov	r0, r6
 800bca0:	4639      	mov	r1, r7
 800bca2:	f7f4 ff11 	bl	8000ac8 <__aeabi_dcmpeq>
 800bca6:	b108      	cbz	r0, 800bcac <__cvt+0x7c>
 800bca8:	f8cd 900c 	str.w	r9, [sp, #12]
 800bcac:	2230      	movs	r2, #48	@ 0x30
 800bcae:	9b03      	ldr	r3, [sp, #12]
 800bcb0:	454b      	cmp	r3, r9
 800bcb2:	d31e      	bcc.n	800bcf2 <__cvt+0xc2>
 800bcb4:	9b03      	ldr	r3, [sp, #12]
 800bcb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcb8:	1b5b      	subs	r3, r3, r5
 800bcba:	4628      	mov	r0, r5
 800bcbc:	6013      	str	r3, [r2, #0]
 800bcbe:	b004      	add	sp, #16
 800bcc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bcc8:	eb00 0904 	add.w	r9, r0, r4
 800bccc:	d1e5      	bne.n	800bc9a <__cvt+0x6a>
 800bcce:	7803      	ldrb	r3, [r0, #0]
 800bcd0:	2b30      	cmp	r3, #48	@ 0x30
 800bcd2:	d10a      	bne.n	800bcea <__cvt+0xba>
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	4630      	mov	r0, r6
 800bcda:	4639      	mov	r1, r7
 800bcdc:	f7f4 fef4 	bl	8000ac8 <__aeabi_dcmpeq>
 800bce0:	b918      	cbnz	r0, 800bcea <__cvt+0xba>
 800bce2:	f1c4 0401 	rsb	r4, r4, #1
 800bce6:	f8ca 4000 	str.w	r4, [sl]
 800bcea:	f8da 3000 	ldr.w	r3, [sl]
 800bcee:	4499      	add	r9, r3
 800bcf0:	e7d3      	b.n	800bc9a <__cvt+0x6a>
 800bcf2:	1c59      	adds	r1, r3, #1
 800bcf4:	9103      	str	r1, [sp, #12]
 800bcf6:	701a      	strb	r2, [r3, #0]
 800bcf8:	e7d9      	b.n	800bcae <__cvt+0x7e>

0800bcfa <__exponent>:
 800bcfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcfc:	2900      	cmp	r1, #0
 800bcfe:	bfba      	itte	lt
 800bd00:	4249      	neglt	r1, r1
 800bd02:	232d      	movlt	r3, #45	@ 0x2d
 800bd04:	232b      	movge	r3, #43	@ 0x2b
 800bd06:	2909      	cmp	r1, #9
 800bd08:	7002      	strb	r2, [r0, #0]
 800bd0a:	7043      	strb	r3, [r0, #1]
 800bd0c:	dd29      	ble.n	800bd62 <__exponent+0x68>
 800bd0e:	f10d 0307 	add.w	r3, sp, #7
 800bd12:	461d      	mov	r5, r3
 800bd14:	270a      	movs	r7, #10
 800bd16:	461a      	mov	r2, r3
 800bd18:	fbb1 f6f7 	udiv	r6, r1, r7
 800bd1c:	fb07 1416 	mls	r4, r7, r6, r1
 800bd20:	3430      	adds	r4, #48	@ 0x30
 800bd22:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bd26:	460c      	mov	r4, r1
 800bd28:	2c63      	cmp	r4, #99	@ 0x63
 800bd2a:	f103 33ff 	add.w	r3, r3, #4294967295
 800bd2e:	4631      	mov	r1, r6
 800bd30:	dcf1      	bgt.n	800bd16 <__exponent+0x1c>
 800bd32:	3130      	adds	r1, #48	@ 0x30
 800bd34:	1e94      	subs	r4, r2, #2
 800bd36:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bd3a:	1c41      	adds	r1, r0, #1
 800bd3c:	4623      	mov	r3, r4
 800bd3e:	42ab      	cmp	r3, r5
 800bd40:	d30a      	bcc.n	800bd58 <__exponent+0x5e>
 800bd42:	f10d 0309 	add.w	r3, sp, #9
 800bd46:	1a9b      	subs	r3, r3, r2
 800bd48:	42ac      	cmp	r4, r5
 800bd4a:	bf88      	it	hi
 800bd4c:	2300      	movhi	r3, #0
 800bd4e:	3302      	adds	r3, #2
 800bd50:	4403      	add	r3, r0
 800bd52:	1a18      	subs	r0, r3, r0
 800bd54:	b003      	add	sp, #12
 800bd56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd58:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bd5c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bd60:	e7ed      	b.n	800bd3e <__exponent+0x44>
 800bd62:	2330      	movs	r3, #48	@ 0x30
 800bd64:	3130      	adds	r1, #48	@ 0x30
 800bd66:	7083      	strb	r3, [r0, #2]
 800bd68:	70c1      	strb	r1, [r0, #3]
 800bd6a:	1d03      	adds	r3, r0, #4
 800bd6c:	e7f1      	b.n	800bd52 <__exponent+0x58>
	...

0800bd70 <_printf_float>:
 800bd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd74:	b08d      	sub	sp, #52	@ 0x34
 800bd76:	460c      	mov	r4, r1
 800bd78:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bd7c:	4616      	mov	r6, r2
 800bd7e:	461f      	mov	r7, r3
 800bd80:	4605      	mov	r5, r0
 800bd82:	f000 fcdb 	bl	800c73c <_localeconv_r>
 800bd86:	6803      	ldr	r3, [r0, #0]
 800bd88:	9304      	str	r3, [sp, #16]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7f4 fa70 	bl	8000270 <strlen>
 800bd90:	2300      	movs	r3, #0
 800bd92:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd94:	f8d8 3000 	ldr.w	r3, [r8]
 800bd98:	9005      	str	r0, [sp, #20]
 800bd9a:	3307      	adds	r3, #7
 800bd9c:	f023 0307 	bic.w	r3, r3, #7
 800bda0:	f103 0208 	add.w	r2, r3, #8
 800bda4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bda8:	f8d4 b000 	ldr.w	fp, [r4]
 800bdac:	f8c8 2000 	str.w	r2, [r8]
 800bdb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bdb4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bdb8:	9307      	str	r3, [sp, #28]
 800bdba:	f8cd 8018 	str.w	r8, [sp, #24]
 800bdbe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bdc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdc6:	4b9c      	ldr	r3, [pc, #624]	@ (800c038 <_printf_float+0x2c8>)
 800bdc8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdcc:	f7f4 feae 	bl	8000b2c <__aeabi_dcmpun>
 800bdd0:	bb70      	cbnz	r0, 800be30 <_printf_float+0xc0>
 800bdd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdd6:	4b98      	ldr	r3, [pc, #608]	@ (800c038 <_printf_float+0x2c8>)
 800bdd8:	f04f 32ff 	mov.w	r2, #4294967295
 800bddc:	f7f4 fe88 	bl	8000af0 <__aeabi_dcmple>
 800bde0:	bb30      	cbnz	r0, 800be30 <_printf_float+0xc0>
 800bde2:	2200      	movs	r2, #0
 800bde4:	2300      	movs	r3, #0
 800bde6:	4640      	mov	r0, r8
 800bde8:	4649      	mov	r1, r9
 800bdea:	f7f4 fe77 	bl	8000adc <__aeabi_dcmplt>
 800bdee:	b110      	cbz	r0, 800bdf6 <_printf_float+0x86>
 800bdf0:	232d      	movs	r3, #45	@ 0x2d
 800bdf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bdf6:	4a91      	ldr	r2, [pc, #580]	@ (800c03c <_printf_float+0x2cc>)
 800bdf8:	4b91      	ldr	r3, [pc, #580]	@ (800c040 <_printf_float+0x2d0>)
 800bdfa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bdfe:	bf94      	ite	ls
 800be00:	4690      	movls	r8, r2
 800be02:	4698      	movhi	r8, r3
 800be04:	2303      	movs	r3, #3
 800be06:	6123      	str	r3, [r4, #16]
 800be08:	f02b 0304 	bic.w	r3, fp, #4
 800be0c:	6023      	str	r3, [r4, #0]
 800be0e:	f04f 0900 	mov.w	r9, #0
 800be12:	9700      	str	r7, [sp, #0]
 800be14:	4633      	mov	r3, r6
 800be16:	aa0b      	add	r2, sp, #44	@ 0x2c
 800be18:	4621      	mov	r1, r4
 800be1a:	4628      	mov	r0, r5
 800be1c:	f000 f9d2 	bl	800c1c4 <_printf_common>
 800be20:	3001      	adds	r0, #1
 800be22:	f040 808d 	bne.w	800bf40 <_printf_float+0x1d0>
 800be26:	f04f 30ff 	mov.w	r0, #4294967295
 800be2a:	b00d      	add	sp, #52	@ 0x34
 800be2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be30:	4642      	mov	r2, r8
 800be32:	464b      	mov	r3, r9
 800be34:	4640      	mov	r0, r8
 800be36:	4649      	mov	r1, r9
 800be38:	f7f4 fe78 	bl	8000b2c <__aeabi_dcmpun>
 800be3c:	b140      	cbz	r0, 800be50 <_printf_float+0xe0>
 800be3e:	464b      	mov	r3, r9
 800be40:	2b00      	cmp	r3, #0
 800be42:	bfbc      	itt	lt
 800be44:	232d      	movlt	r3, #45	@ 0x2d
 800be46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800be4a:	4a7e      	ldr	r2, [pc, #504]	@ (800c044 <_printf_float+0x2d4>)
 800be4c:	4b7e      	ldr	r3, [pc, #504]	@ (800c048 <_printf_float+0x2d8>)
 800be4e:	e7d4      	b.n	800bdfa <_printf_float+0x8a>
 800be50:	6863      	ldr	r3, [r4, #4]
 800be52:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800be56:	9206      	str	r2, [sp, #24]
 800be58:	1c5a      	adds	r2, r3, #1
 800be5a:	d13b      	bne.n	800bed4 <_printf_float+0x164>
 800be5c:	2306      	movs	r3, #6
 800be5e:	6063      	str	r3, [r4, #4]
 800be60:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800be64:	2300      	movs	r3, #0
 800be66:	6022      	str	r2, [r4, #0]
 800be68:	9303      	str	r3, [sp, #12]
 800be6a:	ab0a      	add	r3, sp, #40	@ 0x28
 800be6c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800be70:	ab09      	add	r3, sp, #36	@ 0x24
 800be72:	9300      	str	r3, [sp, #0]
 800be74:	6861      	ldr	r1, [r4, #4]
 800be76:	ec49 8b10 	vmov	d0, r8, r9
 800be7a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800be7e:	4628      	mov	r0, r5
 800be80:	f7ff fed6 	bl	800bc30 <__cvt>
 800be84:	9b06      	ldr	r3, [sp, #24]
 800be86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800be88:	2b47      	cmp	r3, #71	@ 0x47
 800be8a:	4680      	mov	r8, r0
 800be8c:	d129      	bne.n	800bee2 <_printf_float+0x172>
 800be8e:	1cc8      	adds	r0, r1, #3
 800be90:	db02      	blt.n	800be98 <_printf_float+0x128>
 800be92:	6863      	ldr	r3, [r4, #4]
 800be94:	4299      	cmp	r1, r3
 800be96:	dd41      	ble.n	800bf1c <_printf_float+0x1ac>
 800be98:	f1aa 0a02 	sub.w	sl, sl, #2
 800be9c:	fa5f fa8a 	uxtb.w	sl, sl
 800bea0:	3901      	subs	r1, #1
 800bea2:	4652      	mov	r2, sl
 800bea4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bea8:	9109      	str	r1, [sp, #36]	@ 0x24
 800beaa:	f7ff ff26 	bl	800bcfa <__exponent>
 800beae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800beb0:	1813      	adds	r3, r2, r0
 800beb2:	2a01      	cmp	r2, #1
 800beb4:	4681      	mov	r9, r0
 800beb6:	6123      	str	r3, [r4, #16]
 800beb8:	dc02      	bgt.n	800bec0 <_printf_float+0x150>
 800beba:	6822      	ldr	r2, [r4, #0]
 800bebc:	07d2      	lsls	r2, r2, #31
 800bebe:	d501      	bpl.n	800bec4 <_printf_float+0x154>
 800bec0:	3301      	adds	r3, #1
 800bec2:	6123      	str	r3, [r4, #16]
 800bec4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d0a2      	beq.n	800be12 <_printf_float+0xa2>
 800becc:	232d      	movs	r3, #45	@ 0x2d
 800bece:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bed2:	e79e      	b.n	800be12 <_printf_float+0xa2>
 800bed4:	9a06      	ldr	r2, [sp, #24]
 800bed6:	2a47      	cmp	r2, #71	@ 0x47
 800bed8:	d1c2      	bne.n	800be60 <_printf_float+0xf0>
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d1c0      	bne.n	800be60 <_printf_float+0xf0>
 800bede:	2301      	movs	r3, #1
 800bee0:	e7bd      	b.n	800be5e <_printf_float+0xee>
 800bee2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bee6:	d9db      	bls.n	800bea0 <_printf_float+0x130>
 800bee8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800beec:	d118      	bne.n	800bf20 <_printf_float+0x1b0>
 800beee:	2900      	cmp	r1, #0
 800bef0:	6863      	ldr	r3, [r4, #4]
 800bef2:	dd0b      	ble.n	800bf0c <_printf_float+0x19c>
 800bef4:	6121      	str	r1, [r4, #16]
 800bef6:	b913      	cbnz	r3, 800befe <_printf_float+0x18e>
 800bef8:	6822      	ldr	r2, [r4, #0]
 800befa:	07d0      	lsls	r0, r2, #31
 800befc:	d502      	bpl.n	800bf04 <_printf_float+0x194>
 800befe:	3301      	adds	r3, #1
 800bf00:	440b      	add	r3, r1
 800bf02:	6123      	str	r3, [r4, #16]
 800bf04:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bf06:	f04f 0900 	mov.w	r9, #0
 800bf0a:	e7db      	b.n	800bec4 <_printf_float+0x154>
 800bf0c:	b913      	cbnz	r3, 800bf14 <_printf_float+0x1a4>
 800bf0e:	6822      	ldr	r2, [r4, #0]
 800bf10:	07d2      	lsls	r2, r2, #31
 800bf12:	d501      	bpl.n	800bf18 <_printf_float+0x1a8>
 800bf14:	3302      	adds	r3, #2
 800bf16:	e7f4      	b.n	800bf02 <_printf_float+0x192>
 800bf18:	2301      	movs	r3, #1
 800bf1a:	e7f2      	b.n	800bf02 <_printf_float+0x192>
 800bf1c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bf20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf22:	4299      	cmp	r1, r3
 800bf24:	db05      	blt.n	800bf32 <_printf_float+0x1c2>
 800bf26:	6823      	ldr	r3, [r4, #0]
 800bf28:	6121      	str	r1, [r4, #16]
 800bf2a:	07d8      	lsls	r0, r3, #31
 800bf2c:	d5ea      	bpl.n	800bf04 <_printf_float+0x194>
 800bf2e:	1c4b      	adds	r3, r1, #1
 800bf30:	e7e7      	b.n	800bf02 <_printf_float+0x192>
 800bf32:	2900      	cmp	r1, #0
 800bf34:	bfd4      	ite	le
 800bf36:	f1c1 0202 	rsble	r2, r1, #2
 800bf3a:	2201      	movgt	r2, #1
 800bf3c:	4413      	add	r3, r2
 800bf3e:	e7e0      	b.n	800bf02 <_printf_float+0x192>
 800bf40:	6823      	ldr	r3, [r4, #0]
 800bf42:	055a      	lsls	r2, r3, #21
 800bf44:	d407      	bmi.n	800bf56 <_printf_float+0x1e6>
 800bf46:	6923      	ldr	r3, [r4, #16]
 800bf48:	4642      	mov	r2, r8
 800bf4a:	4631      	mov	r1, r6
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	47b8      	blx	r7
 800bf50:	3001      	adds	r0, #1
 800bf52:	d12b      	bne.n	800bfac <_printf_float+0x23c>
 800bf54:	e767      	b.n	800be26 <_printf_float+0xb6>
 800bf56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bf5a:	f240 80dd 	bls.w	800c118 <_printf_float+0x3a8>
 800bf5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bf62:	2200      	movs	r2, #0
 800bf64:	2300      	movs	r3, #0
 800bf66:	f7f4 fdaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf6a:	2800      	cmp	r0, #0
 800bf6c:	d033      	beq.n	800bfd6 <_printf_float+0x266>
 800bf6e:	4a37      	ldr	r2, [pc, #220]	@ (800c04c <_printf_float+0x2dc>)
 800bf70:	2301      	movs	r3, #1
 800bf72:	4631      	mov	r1, r6
 800bf74:	4628      	mov	r0, r5
 800bf76:	47b8      	blx	r7
 800bf78:	3001      	adds	r0, #1
 800bf7a:	f43f af54 	beq.w	800be26 <_printf_float+0xb6>
 800bf7e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bf82:	4543      	cmp	r3, r8
 800bf84:	db02      	blt.n	800bf8c <_printf_float+0x21c>
 800bf86:	6823      	ldr	r3, [r4, #0]
 800bf88:	07d8      	lsls	r0, r3, #31
 800bf8a:	d50f      	bpl.n	800bfac <_printf_float+0x23c>
 800bf8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf90:	4631      	mov	r1, r6
 800bf92:	4628      	mov	r0, r5
 800bf94:	47b8      	blx	r7
 800bf96:	3001      	adds	r0, #1
 800bf98:	f43f af45 	beq.w	800be26 <_printf_float+0xb6>
 800bf9c:	f04f 0900 	mov.w	r9, #0
 800bfa0:	f108 38ff 	add.w	r8, r8, #4294967295
 800bfa4:	f104 0a1a 	add.w	sl, r4, #26
 800bfa8:	45c8      	cmp	r8, r9
 800bfaa:	dc09      	bgt.n	800bfc0 <_printf_float+0x250>
 800bfac:	6823      	ldr	r3, [r4, #0]
 800bfae:	079b      	lsls	r3, r3, #30
 800bfb0:	f100 8103 	bmi.w	800c1ba <_printf_float+0x44a>
 800bfb4:	68e0      	ldr	r0, [r4, #12]
 800bfb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfb8:	4298      	cmp	r0, r3
 800bfba:	bfb8      	it	lt
 800bfbc:	4618      	movlt	r0, r3
 800bfbe:	e734      	b.n	800be2a <_printf_float+0xba>
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	4652      	mov	r2, sl
 800bfc4:	4631      	mov	r1, r6
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	47b8      	blx	r7
 800bfca:	3001      	adds	r0, #1
 800bfcc:	f43f af2b 	beq.w	800be26 <_printf_float+0xb6>
 800bfd0:	f109 0901 	add.w	r9, r9, #1
 800bfd4:	e7e8      	b.n	800bfa8 <_printf_float+0x238>
 800bfd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	dc39      	bgt.n	800c050 <_printf_float+0x2e0>
 800bfdc:	4a1b      	ldr	r2, [pc, #108]	@ (800c04c <_printf_float+0x2dc>)
 800bfde:	2301      	movs	r3, #1
 800bfe0:	4631      	mov	r1, r6
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	47b8      	blx	r7
 800bfe6:	3001      	adds	r0, #1
 800bfe8:	f43f af1d 	beq.w	800be26 <_printf_float+0xb6>
 800bfec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bff0:	ea59 0303 	orrs.w	r3, r9, r3
 800bff4:	d102      	bne.n	800bffc <_printf_float+0x28c>
 800bff6:	6823      	ldr	r3, [r4, #0]
 800bff8:	07d9      	lsls	r1, r3, #31
 800bffa:	d5d7      	bpl.n	800bfac <_printf_float+0x23c>
 800bffc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c000:	4631      	mov	r1, r6
 800c002:	4628      	mov	r0, r5
 800c004:	47b8      	blx	r7
 800c006:	3001      	adds	r0, #1
 800c008:	f43f af0d 	beq.w	800be26 <_printf_float+0xb6>
 800c00c:	f04f 0a00 	mov.w	sl, #0
 800c010:	f104 0b1a 	add.w	fp, r4, #26
 800c014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c016:	425b      	negs	r3, r3
 800c018:	4553      	cmp	r3, sl
 800c01a:	dc01      	bgt.n	800c020 <_printf_float+0x2b0>
 800c01c:	464b      	mov	r3, r9
 800c01e:	e793      	b.n	800bf48 <_printf_float+0x1d8>
 800c020:	2301      	movs	r3, #1
 800c022:	465a      	mov	r2, fp
 800c024:	4631      	mov	r1, r6
 800c026:	4628      	mov	r0, r5
 800c028:	47b8      	blx	r7
 800c02a:	3001      	adds	r0, #1
 800c02c:	f43f aefb 	beq.w	800be26 <_printf_float+0xb6>
 800c030:	f10a 0a01 	add.w	sl, sl, #1
 800c034:	e7ee      	b.n	800c014 <_printf_float+0x2a4>
 800c036:	bf00      	nop
 800c038:	7fefffff 	.word	0x7fefffff
 800c03c:	0800f288 	.word	0x0800f288
 800c040:	0800f28c 	.word	0x0800f28c
 800c044:	0800f290 	.word	0x0800f290
 800c048:	0800f294 	.word	0x0800f294
 800c04c:	0800f298 	.word	0x0800f298
 800c050:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c052:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c056:	4553      	cmp	r3, sl
 800c058:	bfa8      	it	ge
 800c05a:	4653      	movge	r3, sl
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	4699      	mov	r9, r3
 800c060:	dc36      	bgt.n	800c0d0 <_printf_float+0x360>
 800c062:	f04f 0b00 	mov.w	fp, #0
 800c066:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c06a:	f104 021a 	add.w	r2, r4, #26
 800c06e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c070:	9306      	str	r3, [sp, #24]
 800c072:	eba3 0309 	sub.w	r3, r3, r9
 800c076:	455b      	cmp	r3, fp
 800c078:	dc31      	bgt.n	800c0de <_printf_float+0x36e>
 800c07a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c07c:	459a      	cmp	sl, r3
 800c07e:	dc3a      	bgt.n	800c0f6 <_printf_float+0x386>
 800c080:	6823      	ldr	r3, [r4, #0]
 800c082:	07da      	lsls	r2, r3, #31
 800c084:	d437      	bmi.n	800c0f6 <_printf_float+0x386>
 800c086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c088:	ebaa 0903 	sub.w	r9, sl, r3
 800c08c:	9b06      	ldr	r3, [sp, #24]
 800c08e:	ebaa 0303 	sub.w	r3, sl, r3
 800c092:	4599      	cmp	r9, r3
 800c094:	bfa8      	it	ge
 800c096:	4699      	movge	r9, r3
 800c098:	f1b9 0f00 	cmp.w	r9, #0
 800c09c:	dc33      	bgt.n	800c106 <_printf_float+0x396>
 800c09e:	f04f 0800 	mov.w	r8, #0
 800c0a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c0a6:	f104 0b1a 	add.w	fp, r4, #26
 800c0aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0ac:	ebaa 0303 	sub.w	r3, sl, r3
 800c0b0:	eba3 0309 	sub.w	r3, r3, r9
 800c0b4:	4543      	cmp	r3, r8
 800c0b6:	f77f af79 	ble.w	800bfac <_printf_float+0x23c>
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	465a      	mov	r2, fp
 800c0be:	4631      	mov	r1, r6
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	47b8      	blx	r7
 800c0c4:	3001      	adds	r0, #1
 800c0c6:	f43f aeae 	beq.w	800be26 <_printf_float+0xb6>
 800c0ca:	f108 0801 	add.w	r8, r8, #1
 800c0ce:	e7ec      	b.n	800c0aa <_printf_float+0x33a>
 800c0d0:	4642      	mov	r2, r8
 800c0d2:	4631      	mov	r1, r6
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	47b8      	blx	r7
 800c0d8:	3001      	adds	r0, #1
 800c0da:	d1c2      	bne.n	800c062 <_printf_float+0x2f2>
 800c0dc:	e6a3      	b.n	800be26 <_printf_float+0xb6>
 800c0de:	2301      	movs	r3, #1
 800c0e0:	4631      	mov	r1, r6
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	9206      	str	r2, [sp, #24]
 800c0e6:	47b8      	blx	r7
 800c0e8:	3001      	adds	r0, #1
 800c0ea:	f43f ae9c 	beq.w	800be26 <_printf_float+0xb6>
 800c0ee:	9a06      	ldr	r2, [sp, #24]
 800c0f0:	f10b 0b01 	add.w	fp, fp, #1
 800c0f4:	e7bb      	b.n	800c06e <_printf_float+0x2fe>
 800c0f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0fa:	4631      	mov	r1, r6
 800c0fc:	4628      	mov	r0, r5
 800c0fe:	47b8      	blx	r7
 800c100:	3001      	adds	r0, #1
 800c102:	d1c0      	bne.n	800c086 <_printf_float+0x316>
 800c104:	e68f      	b.n	800be26 <_printf_float+0xb6>
 800c106:	9a06      	ldr	r2, [sp, #24]
 800c108:	464b      	mov	r3, r9
 800c10a:	4442      	add	r2, r8
 800c10c:	4631      	mov	r1, r6
 800c10e:	4628      	mov	r0, r5
 800c110:	47b8      	blx	r7
 800c112:	3001      	adds	r0, #1
 800c114:	d1c3      	bne.n	800c09e <_printf_float+0x32e>
 800c116:	e686      	b.n	800be26 <_printf_float+0xb6>
 800c118:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c11c:	f1ba 0f01 	cmp.w	sl, #1
 800c120:	dc01      	bgt.n	800c126 <_printf_float+0x3b6>
 800c122:	07db      	lsls	r3, r3, #31
 800c124:	d536      	bpl.n	800c194 <_printf_float+0x424>
 800c126:	2301      	movs	r3, #1
 800c128:	4642      	mov	r2, r8
 800c12a:	4631      	mov	r1, r6
 800c12c:	4628      	mov	r0, r5
 800c12e:	47b8      	blx	r7
 800c130:	3001      	adds	r0, #1
 800c132:	f43f ae78 	beq.w	800be26 <_printf_float+0xb6>
 800c136:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c13a:	4631      	mov	r1, r6
 800c13c:	4628      	mov	r0, r5
 800c13e:	47b8      	blx	r7
 800c140:	3001      	adds	r0, #1
 800c142:	f43f ae70 	beq.w	800be26 <_printf_float+0xb6>
 800c146:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c14a:	2200      	movs	r2, #0
 800c14c:	2300      	movs	r3, #0
 800c14e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c152:	f7f4 fcb9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c156:	b9c0      	cbnz	r0, 800c18a <_printf_float+0x41a>
 800c158:	4653      	mov	r3, sl
 800c15a:	f108 0201 	add.w	r2, r8, #1
 800c15e:	4631      	mov	r1, r6
 800c160:	4628      	mov	r0, r5
 800c162:	47b8      	blx	r7
 800c164:	3001      	adds	r0, #1
 800c166:	d10c      	bne.n	800c182 <_printf_float+0x412>
 800c168:	e65d      	b.n	800be26 <_printf_float+0xb6>
 800c16a:	2301      	movs	r3, #1
 800c16c:	465a      	mov	r2, fp
 800c16e:	4631      	mov	r1, r6
 800c170:	4628      	mov	r0, r5
 800c172:	47b8      	blx	r7
 800c174:	3001      	adds	r0, #1
 800c176:	f43f ae56 	beq.w	800be26 <_printf_float+0xb6>
 800c17a:	f108 0801 	add.w	r8, r8, #1
 800c17e:	45d0      	cmp	r8, sl
 800c180:	dbf3      	blt.n	800c16a <_printf_float+0x3fa>
 800c182:	464b      	mov	r3, r9
 800c184:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c188:	e6df      	b.n	800bf4a <_printf_float+0x1da>
 800c18a:	f04f 0800 	mov.w	r8, #0
 800c18e:	f104 0b1a 	add.w	fp, r4, #26
 800c192:	e7f4      	b.n	800c17e <_printf_float+0x40e>
 800c194:	2301      	movs	r3, #1
 800c196:	4642      	mov	r2, r8
 800c198:	e7e1      	b.n	800c15e <_printf_float+0x3ee>
 800c19a:	2301      	movs	r3, #1
 800c19c:	464a      	mov	r2, r9
 800c19e:	4631      	mov	r1, r6
 800c1a0:	4628      	mov	r0, r5
 800c1a2:	47b8      	blx	r7
 800c1a4:	3001      	adds	r0, #1
 800c1a6:	f43f ae3e 	beq.w	800be26 <_printf_float+0xb6>
 800c1aa:	f108 0801 	add.w	r8, r8, #1
 800c1ae:	68e3      	ldr	r3, [r4, #12]
 800c1b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c1b2:	1a5b      	subs	r3, r3, r1
 800c1b4:	4543      	cmp	r3, r8
 800c1b6:	dcf0      	bgt.n	800c19a <_printf_float+0x42a>
 800c1b8:	e6fc      	b.n	800bfb4 <_printf_float+0x244>
 800c1ba:	f04f 0800 	mov.w	r8, #0
 800c1be:	f104 0919 	add.w	r9, r4, #25
 800c1c2:	e7f4      	b.n	800c1ae <_printf_float+0x43e>

0800c1c4 <_printf_common>:
 800c1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1c8:	4616      	mov	r6, r2
 800c1ca:	4698      	mov	r8, r3
 800c1cc:	688a      	ldr	r2, [r1, #8]
 800c1ce:	690b      	ldr	r3, [r1, #16]
 800c1d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	bfb8      	it	lt
 800c1d8:	4613      	movlt	r3, r2
 800c1da:	6033      	str	r3, [r6, #0]
 800c1dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c1e0:	4607      	mov	r7, r0
 800c1e2:	460c      	mov	r4, r1
 800c1e4:	b10a      	cbz	r2, 800c1ea <_printf_common+0x26>
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	6033      	str	r3, [r6, #0]
 800c1ea:	6823      	ldr	r3, [r4, #0]
 800c1ec:	0699      	lsls	r1, r3, #26
 800c1ee:	bf42      	ittt	mi
 800c1f0:	6833      	ldrmi	r3, [r6, #0]
 800c1f2:	3302      	addmi	r3, #2
 800c1f4:	6033      	strmi	r3, [r6, #0]
 800c1f6:	6825      	ldr	r5, [r4, #0]
 800c1f8:	f015 0506 	ands.w	r5, r5, #6
 800c1fc:	d106      	bne.n	800c20c <_printf_common+0x48>
 800c1fe:	f104 0a19 	add.w	sl, r4, #25
 800c202:	68e3      	ldr	r3, [r4, #12]
 800c204:	6832      	ldr	r2, [r6, #0]
 800c206:	1a9b      	subs	r3, r3, r2
 800c208:	42ab      	cmp	r3, r5
 800c20a:	dc26      	bgt.n	800c25a <_printf_common+0x96>
 800c20c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c210:	6822      	ldr	r2, [r4, #0]
 800c212:	3b00      	subs	r3, #0
 800c214:	bf18      	it	ne
 800c216:	2301      	movne	r3, #1
 800c218:	0692      	lsls	r2, r2, #26
 800c21a:	d42b      	bmi.n	800c274 <_printf_common+0xb0>
 800c21c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c220:	4641      	mov	r1, r8
 800c222:	4638      	mov	r0, r7
 800c224:	47c8      	blx	r9
 800c226:	3001      	adds	r0, #1
 800c228:	d01e      	beq.n	800c268 <_printf_common+0xa4>
 800c22a:	6823      	ldr	r3, [r4, #0]
 800c22c:	6922      	ldr	r2, [r4, #16]
 800c22e:	f003 0306 	and.w	r3, r3, #6
 800c232:	2b04      	cmp	r3, #4
 800c234:	bf02      	ittt	eq
 800c236:	68e5      	ldreq	r5, [r4, #12]
 800c238:	6833      	ldreq	r3, [r6, #0]
 800c23a:	1aed      	subeq	r5, r5, r3
 800c23c:	68a3      	ldr	r3, [r4, #8]
 800c23e:	bf0c      	ite	eq
 800c240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c244:	2500      	movne	r5, #0
 800c246:	4293      	cmp	r3, r2
 800c248:	bfc4      	itt	gt
 800c24a:	1a9b      	subgt	r3, r3, r2
 800c24c:	18ed      	addgt	r5, r5, r3
 800c24e:	2600      	movs	r6, #0
 800c250:	341a      	adds	r4, #26
 800c252:	42b5      	cmp	r5, r6
 800c254:	d11a      	bne.n	800c28c <_printf_common+0xc8>
 800c256:	2000      	movs	r0, #0
 800c258:	e008      	b.n	800c26c <_printf_common+0xa8>
 800c25a:	2301      	movs	r3, #1
 800c25c:	4652      	mov	r2, sl
 800c25e:	4641      	mov	r1, r8
 800c260:	4638      	mov	r0, r7
 800c262:	47c8      	blx	r9
 800c264:	3001      	adds	r0, #1
 800c266:	d103      	bne.n	800c270 <_printf_common+0xac>
 800c268:	f04f 30ff 	mov.w	r0, #4294967295
 800c26c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c270:	3501      	adds	r5, #1
 800c272:	e7c6      	b.n	800c202 <_printf_common+0x3e>
 800c274:	18e1      	adds	r1, r4, r3
 800c276:	1c5a      	adds	r2, r3, #1
 800c278:	2030      	movs	r0, #48	@ 0x30
 800c27a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c27e:	4422      	add	r2, r4
 800c280:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c284:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c288:	3302      	adds	r3, #2
 800c28a:	e7c7      	b.n	800c21c <_printf_common+0x58>
 800c28c:	2301      	movs	r3, #1
 800c28e:	4622      	mov	r2, r4
 800c290:	4641      	mov	r1, r8
 800c292:	4638      	mov	r0, r7
 800c294:	47c8      	blx	r9
 800c296:	3001      	adds	r0, #1
 800c298:	d0e6      	beq.n	800c268 <_printf_common+0xa4>
 800c29a:	3601      	adds	r6, #1
 800c29c:	e7d9      	b.n	800c252 <_printf_common+0x8e>
	...

0800c2a0 <_printf_i>:
 800c2a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c2a4:	7e0f      	ldrb	r7, [r1, #24]
 800c2a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c2a8:	2f78      	cmp	r7, #120	@ 0x78
 800c2aa:	4691      	mov	r9, r2
 800c2ac:	4680      	mov	r8, r0
 800c2ae:	460c      	mov	r4, r1
 800c2b0:	469a      	mov	sl, r3
 800c2b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c2b6:	d807      	bhi.n	800c2c8 <_printf_i+0x28>
 800c2b8:	2f62      	cmp	r7, #98	@ 0x62
 800c2ba:	d80a      	bhi.n	800c2d2 <_printf_i+0x32>
 800c2bc:	2f00      	cmp	r7, #0
 800c2be:	f000 80d2 	beq.w	800c466 <_printf_i+0x1c6>
 800c2c2:	2f58      	cmp	r7, #88	@ 0x58
 800c2c4:	f000 80b9 	beq.w	800c43a <_printf_i+0x19a>
 800c2c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c2cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c2d0:	e03a      	b.n	800c348 <_printf_i+0xa8>
 800c2d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c2d6:	2b15      	cmp	r3, #21
 800c2d8:	d8f6      	bhi.n	800c2c8 <_printf_i+0x28>
 800c2da:	a101      	add	r1, pc, #4	@ (adr r1, 800c2e0 <_printf_i+0x40>)
 800c2dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c2e0:	0800c339 	.word	0x0800c339
 800c2e4:	0800c34d 	.word	0x0800c34d
 800c2e8:	0800c2c9 	.word	0x0800c2c9
 800c2ec:	0800c2c9 	.word	0x0800c2c9
 800c2f0:	0800c2c9 	.word	0x0800c2c9
 800c2f4:	0800c2c9 	.word	0x0800c2c9
 800c2f8:	0800c34d 	.word	0x0800c34d
 800c2fc:	0800c2c9 	.word	0x0800c2c9
 800c300:	0800c2c9 	.word	0x0800c2c9
 800c304:	0800c2c9 	.word	0x0800c2c9
 800c308:	0800c2c9 	.word	0x0800c2c9
 800c30c:	0800c44d 	.word	0x0800c44d
 800c310:	0800c377 	.word	0x0800c377
 800c314:	0800c407 	.word	0x0800c407
 800c318:	0800c2c9 	.word	0x0800c2c9
 800c31c:	0800c2c9 	.word	0x0800c2c9
 800c320:	0800c46f 	.word	0x0800c46f
 800c324:	0800c2c9 	.word	0x0800c2c9
 800c328:	0800c377 	.word	0x0800c377
 800c32c:	0800c2c9 	.word	0x0800c2c9
 800c330:	0800c2c9 	.word	0x0800c2c9
 800c334:	0800c40f 	.word	0x0800c40f
 800c338:	6833      	ldr	r3, [r6, #0]
 800c33a:	1d1a      	adds	r2, r3, #4
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	6032      	str	r2, [r6, #0]
 800c340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c344:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c348:	2301      	movs	r3, #1
 800c34a:	e09d      	b.n	800c488 <_printf_i+0x1e8>
 800c34c:	6833      	ldr	r3, [r6, #0]
 800c34e:	6820      	ldr	r0, [r4, #0]
 800c350:	1d19      	adds	r1, r3, #4
 800c352:	6031      	str	r1, [r6, #0]
 800c354:	0606      	lsls	r6, r0, #24
 800c356:	d501      	bpl.n	800c35c <_printf_i+0xbc>
 800c358:	681d      	ldr	r5, [r3, #0]
 800c35a:	e003      	b.n	800c364 <_printf_i+0xc4>
 800c35c:	0645      	lsls	r5, r0, #25
 800c35e:	d5fb      	bpl.n	800c358 <_printf_i+0xb8>
 800c360:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c364:	2d00      	cmp	r5, #0
 800c366:	da03      	bge.n	800c370 <_printf_i+0xd0>
 800c368:	232d      	movs	r3, #45	@ 0x2d
 800c36a:	426d      	negs	r5, r5
 800c36c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c370:	4859      	ldr	r0, [pc, #356]	@ (800c4d8 <_printf_i+0x238>)
 800c372:	230a      	movs	r3, #10
 800c374:	e011      	b.n	800c39a <_printf_i+0xfa>
 800c376:	6821      	ldr	r1, [r4, #0]
 800c378:	6833      	ldr	r3, [r6, #0]
 800c37a:	0608      	lsls	r0, r1, #24
 800c37c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c380:	d402      	bmi.n	800c388 <_printf_i+0xe8>
 800c382:	0649      	lsls	r1, r1, #25
 800c384:	bf48      	it	mi
 800c386:	b2ad      	uxthmi	r5, r5
 800c388:	2f6f      	cmp	r7, #111	@ 0x6f
 800c38a:	4853      	ldr	r0, [pc, #332]	@ (800c4d8 <_printf_i+0x238>)
 800c38c:	6033      	str	r3, [r6, #0]
 800c38e:	bf14      	ite	ne
 800c390:	230a      	movne	r3, #10
 800c392:	2308      	moveq	r3, #8
 800c394:	2100      	movs	r1, #0
 800c396:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c39a:	6866      	ldr	r6, [r4, #4]
 800c39c:	60a6      	str	r6, [r4, #8]
 800c39e:	2e00      	cmp	r6, #0
 800c3a0:	bfa2      	ittt	ge
 800c3a2:	6821      	ldrge	r1, [r4, #0]
 800c3a4:	f021 0104 	bicge.w	r1, r1, #4
 800c3a8:	6021      	strge	r1, [r4, #0]
 800c3aa:	b90d      	cbnz	r5, 800c3b0 <_printf_i+0x110>
 800c3ac:	2e00      	cmp	r6, #0
 800c3ae:	d04b      	beq.n	800c448 <_printf_i+0x1a8>
 800c3b0:	4616      	mov	r6, r2
 800c3b2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c3b6:	fb03 5711 	mls	r7, r3, r1, r5
 800c3ba:	5dc7      	ldrb	r7, [r0, r7]
 800c3bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c3c0:	462f      	mov	r7, r5
 800c3c2:	42bb      	cmp	r3, r7
 800c3c4:	460d      	mov	r5, r1
 800c3c6:	d9f4      	bls.n	800c3b2 <_printf_i+0x112>
 800c3c8:	2b08      	cmp	r3, #8
 800c3ca:	d10b      	bne.n	800c3e4 <_printf_i+0x144>
 800c3cc:	6823      	ldr	r3, [r4, #0]
 800c3ce:	07df      	lsls	r7, r3, #31
 800c3d0:	d508      	bpl.n	800c3e4 <_printf_i+0x144>
 800c3d2:	6923      	ldr	r3, [r4, #16]
 800c3d4:	6861      	ldr	r1, [r4, #4]
 800c3d6:	4299      	cmp	r1, r3
 800c3d8:	bfde      	ittt	le
 800c3da:	2330      	movle	r3, #48	@ 0x30
 800c3dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c3e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c3e4:	1b92      	subs	r2, r2, r6
 800c3e6:	6122      	str	r2, [r4, #16]
 800c3e8:	f8cd a000 	str.w	sl, [sp]
 800c3ec:	464b      	mov	r3, r9
 800c3ee:	aa03      	add	r2, sp, #12
 800c3f0:	4621      	mov	r1, r4
 800c3f2:	4640      	mov	r0, r8
 800c3f4:	f7ff fee6 	bl	800c1c4 <_printf_common>
 800c3f8:	3001      	adds	r0, #1
 800c3fa:	d14a      	bne.n	800c492 <_printf_i+0x1f2>
 800c3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c400:	b004      	add	sp, #16
 800c402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c406:	6823      	ldr	r3, [r4, #0]
 800c408:	f043 0320 	orr.w	r3, r3, #32
 800c40c:	6023      	str	r3, [r4, #0]
 800c40e:	4833      	ldr	r0, [pc, #204]	@ (800c4dc <_printf_i+0x23c>)
 800c410:	2778      	movs	r7, #120	@ 0x78
 800c412:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c416:	6823      	ldr	r3, [r4, #0]
 800c418:	6831      	ldr	r1, [r6, #0]
 800c41a:	061f      	lsls	r7, r3, #24
 800c41c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c420:	d402      	bmi.n	800c428 <_printf_i+0x188>
 800c422:	065f      	lsls	r7, r3, #25
 800c424:	bf48      	it	mi
 800c426:	b2ad      	uxthmi	r5, r5
 800c428:	6031      	str	r1, [r6, #0]
 800c42a:	07d9      	lsls	r1, r3, #31
 800c42c:	bf44      	itt	mi
 800c42e:	f043 0320 	orrmi.w	r3, r3, #32
 800c432:	6023      	strmi	r3, [r4, #0]
 800c434:	b11d      	cbz	r5, 800c43e <_printf_i+0x19e>
 800c436:	2310      	movs	r3, #16
 800c438:	e7ac      	b.n	800c394 <_printf_i+0xf4>
 800c43a:	4827      	ldr	r0, [pc, #156]	@ (800c4d8 <_printf_i+0x238>)
 800c43c:	e7e9      	b.n	800c412 <_printf_i+0x172>
 800c43e:	6823      	ldr	r3, [r4, #0]
 800c440:	f023 0320 	bic.w	r3, r3, #32
 800c444:	6023      	str	r3, [r4, #0]
 800c446:	e7f6      	b.n	800c436 <_printf_i+0x196>
 800c448:	4616      	mov	r6, r2
 800c44a:	e7bd      	b.n	800c3c8 <_printf_i+0x128>
 800c44c:	6833      	ldr	r3, [r6, #0]
 800c44e:	6825      	ldr	r5, [r4, #0]
 800c450:	6961      	ldr	r1, [r4, #20]
 800c452:	1d18      	adds	r0, r3, #4
 800c454:	6030      	str	r0, [r6, #0]
 800c456:	062e      	lsls	r6, r5, #24
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	d501      	bpl.n	800c460 <_printf_i+0x1c0>
 800c45c:	6019      	str	r1, [r3, #0]
 800c45e:	e002      	b.n	800c466 <_printf_i+0x1c6>
 800c460:	0668      	lsls	r0, r5, #25
 800c462:	d5fb      	bpl.n	800c45c <_printf_i+0x1bc>
 800c464:	8019      	strh	r1, [r3, #0]
 800c466:	2300      	movs	r3, #0
 800c468:	6123      	str	r3, [r4, #16]
 800c46a:	4616      	mov	r6, r2
 800c46c:	e7bc      	b.n	800c3e8 <_printf_i+0x148>
 800c46e:	6833      	ldr	r3, [r6, #0]
 800c470:	1d1a      	adds	r2, r3, #4
 800c472:	6032      	str	r2, [r6, #0]
 800c474:	681e      	ldr	r6, [r3, #0]
 800c476:	6862      	ldr	r2, [r4, #4]
 800c478:	2100      	movs	r1, #0
 800c47a:	4630      	mov	r0, r6
 800c47c:	f7f3 fea8 	bl	80001d0 <memchr>
 800c480:	b108      	cbz	r0, 800c486 <_printf_i+0x1e6>
 800c482:	1b80      	subs	r0, r0, r6
 800c484:	6060      	str	r0, [r4, #4]
 800c486:	6863      	ldr	r3, [r4, #4]
 800c488:	6123      	str	r3, [r4, #16]
 800c48a:	2300      	movs	r3, #0
 800c48c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c490:	e7aa      	b.n	800c3e8 <_printf_i+0x148>
 800c492:	6923      	ldr	r3, [r4, #16]
 800c494:	4632      	mov	r2, r6
 800c496:	4649      	mov	r1, r9
 800c498:	4640      	mov	r0, r8
 800c49a:	47d0      	blx	sl
 800c49c:	3001      	adds	r0, #1
 800c49e:	d0ad      	beq.n	800c3fc <_printf_i+0x15c>
 800c4a0:	6823      	ldr	r3, [r4, #0]
 800c4a2:	079b      	lsls	r3, r3, #30
 800c4a4:	d413      	bmi.n	800c4ce <_printf_i+0x22e>
 800c4a6:	68e0      	ldr	r0, [r4, #12]
 800c4a8:	9b03      	ldr	r3, [sp, #12]
 800c4aa:	4298      	cmp	r0, r3
 800c4ac:	bfb8      	it	lt
 800c4ae:	4618      	movlt	r0, r3
 800c4b0:	e7a6      	b.n	800c400 <_printf_i+0x160>
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	4632      	mov	r2, r6
 800c4b6:	4649      	mov	r1, r9
 800c4b8:	4640      	mov	r0, r8
 800c4ba:	47d0      	blx	sl
 800c4bc:	3001      	adds	r0, #1
 800c4be:	d09d      	beq.n	800c3fc <_printf_i+0x15c>
 800c4c0:	3501      	adds	r5, #1
 800c4c2:	68e3      	ldr	r3, [r4, #12]
 800c4c4:	9903      	ldr	r1, [sp, #12]
 800c4c6:	1a5b      	subs	r3, r3, r1
 800c4c8:	42ab      	cmp	r3, r5
 800c4ca:	dcf2      	bgt.n	800c4b2 <_printf_i+0x212>
 800c4cc:	e7eb      	b.n	800c4a6 <_printf_i+0x206>
 800c4ce:	2500      	movs	r5, #0
 800c4d0:	f104 0619 	add.w	r6, r4, #25
 800c4d4:	e7f5      	b.n	800c4c2 <_printf_i+0x222>
 800c4d6:	bf00      	nop
 800c4d8:	0800f29a 	.word	0x0800f29a
 800c4dc:	0800f2ab 	.word	0x0800f2ab

0800c4e0 <std>:
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	b510      	push	{r4, lr}
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	e9c0 3300 	strd	r3, r3, [r0]
 800c4ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4ee:	6083      	str	r3, [r0, #8]
 800c4f0:	8181      	strh	r1, [r0, #12]
 800c4f2:	6643      	str	r3, [r0, #100]	@ 0x64
 800c4f4:	81c2      	strh	r2, [r0, #14]
 800c4f6:	6183      	str	r3, [r0, #24]
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	2208      	movs	r2, #8
 800c4fc:	305c      	adds	r0, #92	@ 0x5c
 800c4fe:	f000 f914 	bl	800c72a <memset>
 800c502:	4b0d      	ldr	r3, [pc, #52]	@ (800c538 <std+0x58>)
 800c504:	6263      	str	r3, [r4, #36]	@ 0x24
 800c506:	4b0d      	ldr	r3, [pc, #52]	@ (800c53c <std+0x5c>)
 800c508:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c50a:	4b0d      	ldr	r3, [pc, #52]	@ (800c540 <std+0x60>)
 800c50c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c50e:	4b0d      	ldr	r3, [pc, #52]	@ (800c544 <std+0x64>)
 800c510:	6323      	str	r3, [r4, #48]	@ 0x30
 800c512:	4b0d      	ldr	r3, [pc, #52]	@ (800c548 <std+0x68>)
 800c514:	6224      	str	r4, [r4, #32]
 800c516:	429c      	cmp	r4, r3
 800c518:	d006      	beq.n	800c528 <std+0x48>
 800c51a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c51e:	4294      	cmp	r4, r2
 800c520:	d002      	beq.n	800c528 <std+0x48>
 800c522:	33d0      	adds	r3, #208	@ 0xd0
 800c524:	429c      	cmp	r4, r3
 800c526:	d105      	bne.n	800c534 <std+0x54>
 800c528:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c530:	f000 b978 	b.w	800c824 <__retarget_lock_init_recursive>
 800c534:	bd10      	pop	{r4, pc}
 800c536:	bf00      	nop
 800c538:	0800c6a5 	.word	0x0800c6a5
 800c53c:	0800c6c7 	.word	0x0800c6c7
 800c540:	0800c6ff 	.word	0x0800c6ff
 800c544:	0800c723 	.word	0x0800c723
 800c548:	20002258 	.word	0x20002258

0800c54c <stdio_exit_handler>:
 800c54c:	4a02      	ldr	r2, [pc, #8]	@ (800c558 <stdio_exit_handler+0xc>)
 800c54e:	4903      	ldr	r1, [pc, #12]	@ (800c55c <stdio_exit_handler+0x10>)
 800c550:	4803      	ldr	r0, [pc, #12]	@ (800c560 <stdio_exit_handler+0x14>)
 800c552:	f000 b869 	b.w	800c628 <_fwalk_sglue>
 800c556:	bf00      	nop
 800c558:	20000100 	.word	0x20000100
 800c55c:	0800e185 	.word	0x0800e185
 800c560:	20000110 	.word	0x20000110

0800c564 <cleanup_stdio>:
 800c564:	6841      	ldr	r1, [r0, #4]
 800c566:	4b0c      	ldr	r3, [pc, #48]	@ (800c598 <cleanup_stdio+0x34>)
 800c568:	4299      	cmp	r1, r3
 800c56a:	b510      	push	{r4, lr}
 800c56c:	4604      	mov	r4, r0
 800c56e:	d001      	beq.n	800c574 <cleanup_stdio+0x10>
 800c570:	f001 fe08 	bl	800e184 <_fflush_r>
 800c574:	68a1      	ldr	r1, [r4, #8]
 800c576:	4b09      	ldr	r3, [pc, #36]	@ (800c59c <cleanup_stdio+0x38>)
 800c578:	4299      	cmp	r1, r3
 800c57a:	d002      	beq.n	800c582 <cleanup_stdio+0x1e>
 800c57c:	4620      	mov	r0, r4
 800c57e:	f001 fe01 	bl	800e184 <_fflush_r>
 800c582:	68e1      	ldr	r1, [r4, #12]
 800c584:	4b06      	ldr	r3, [pc, #24]	@ (800c5a0 <cleanup_stdio+0x3c>)
 800c586:	4299      	cmp	r1, r3
 800c588:	d004      	beq.n	800c594 <cleanup_stdio+0x30>
 800c58a:	4620      	mov	r0, r4
 800c58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c590:	f001 bdf8 	b.w	800e184 <_fflush_r>
 800c594:	bd10      	pop	{r4, pc}
 800c596:	bf00      	nop
 800c598:	20002258 	.word	0x20002258
 800c59c:	200022c0 	.word	0x200022c0
 800c5a0:	20002328 	.word	0x20002328

0800c5a4 <global_stdio_init.part.0>:
 800c5a4:	b510      	push	{r4, lr}
 800c5a6:	4b0b      	ldr	r3, [pc, #44]	@ (800c5d4 <global_stdio_init.part.0+0x30>)
 800c5a8:	4c0b      	ldr	r4, [pc, #44]	@ (800c5d8 <global_stdio_init.part.0+0x34>)
 800c5aa:	4a0c      	ldr	r2, [pc, #48]	@ (800c5dc <global_stdio_init.part.0+0x38>)
 800c5ac:	601a      	str	r2, [r3, #0]
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	2104      	movs	r1, #4
 800c5b4:	f7ff ff94 	bl	800c4e0 <std>
 800c5b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c5bc:	2201      	movs	r2, #1
 800c5be:	2109      	movs	r1, #9
 800c5c0:	f7ff ff8e 	bl	800c4e0 <std>
 800c5c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c5c8:	2202      	movs	r2, #2
 800c5ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5ce:	2112      	movs	r1, #18
 800c5d0:	f7ff bf86 	b.w	800c4e0 <std>
 800c5d4:	20002390 	.word	0x20002390
 800c5d8:	20002258 	.word	0x20002258
 800c5dc:	0800c54d 	.word	0x0800c54d

0800c5e0 <__sfp_lock_acquire>:
 800c5e0:	4801      	ldr	r0, [pc, #4]	@ (800c5e8 <__sfp_lock_acquire+0x8>)
 800c5e2:	f000 b920 	b.w	800c826 <__retarget_lock_acquire_recursive>
 800c5e6:	bf00      	nop
 800c5e8:	20002399 	.word	0x20002399

0800c5ec <__sfp_lock_release>:
 800c5ec:	4801      	ldr	r0, [pc, #4]	@ (800c5f4 <__sfp_lock_release+0x8>)
 800c5ee:	f000 b91b 	b.w	800c828 <__retarget_lock_release_recursive>
 800c5f2:	bf00      	nop
 800c5f4:	20002399 	.word	0x20002399

0800c5f8 <__sinit>:
 800c5f8:	b510      	push	{r4, lr}
 800c5fa:	4604      	mov	r4, r0
 800c5fc:	f7ff fff0 	bl	800c5e0 <__sfp_lock_acquire>
 800c600:	6a23      	ldr	r3, [r4, #32]
 800c602:	b11b      	cbz	r3, 800c60c <__sinit+0x14>
 800c604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c608:	f7ff bff0 	b.w	800c5ec <__sfp_lock_release>
 800c60c:	4b04      	ldr	r3, [pc, #16]	@ (800c620 <__sinit+0x28>)
 800c60e:	6223      	str	r3, [r4, #32]
 800c610:	4b04      	ldr	r3, [pc, #16]	@ (800c624 <__sinit+0x2c>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d1f5      	bne.n	800c604 <__sinit+0xc>
 800c618:	f7ff ffc4 	bl	800c5a4 <global_stdio_init.part.0>
 800c61c:	e7f2      	b.n	800c604 <__sinit+0xc>
 800c61e:	bf00      	nop
 800c620:	0800c565 	.word	0x0800c565
 800c624:	20002390 	.word	0x20002390

0800c628 <_fwalk_sglue>:
 800c628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c62c:	4607      	mov	r7, r0
 800c62e:	4688      	mov	r8, r1
 800c630:	4614      	mov	r4, r2
 800c632:	2600      	movs	r6, #0
 800c634:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c638:	f1b9 0901 	subs.w	r9, r9, #1
 800c63c:	d505      	bpl.n	800c64a <_fwalk_sglue+0x22>
 800c63e:	6824      	ldr	r4, [r4, #0]
 800c640:	2c00      	cmp	r4, #0
 800c642:	d1f7      	bne.n	800c634 <_fwalk_sglue+0xc>
 800c644:	4630      	mov	r0, r6
 800c646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c64a:	89ab      	ldrh	r3, [r5, #12]
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d907      	bls.n	800c660 <_fwalk_sglue+0x38>
 800c650:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c654:	3301      	adds	r3, #1
 800c656:	d003      	beq.n	800c660 <_fwalk_sglue+0x38>
 800c658:	4629      	mov	r1, r5
 800c65a:	4638      	mov	r0, r7
 800c65c:	47c0      	blx	r8
 800c65e:	4306      	orrs	r6, r0
 800c660:	3568      	adds	r5, #104	@ 0x68
 800c662:	e7e9      	b.n	800c638 <_fwalk_sglue+0x10>

0800c664 <siprintf>:
 800c664:	b40e      	push	{r1, r2, r3}
 800c666:	b500      	push	{lr}
 800c668:	b09c      	sub	sp, #112	@ 0x70
 800c66a:	ab1d      	add	r3, sp, #116	@ 0x74
 800c66c:	9002      	str	r0, [sp, #8]
 800c66e:	9006      	str	r0, [sp, #24]
 800c670:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c674:	4809      	ldr	r0, [pc, #36]	@ (800c69c <siprintf+0x38>)
 800c676:	9107      	str	r1, [sp, #28]
 800c678:	9104      	str	r1, [sp, #16]
 800c67a:	4909      	ldr	r1, [pc, #36]	@ (800c6a0 <siprintf+0x3c>)
 800c67c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c680:	9105      	str	r1, [sp, #20]
 800c682:	6800      	ldr	r0, [r0, #0]
 800c684:	9301      	str	r3, [sp, #4]
 800c686:	a902      	add	r1, sp, #8
 800c688:	f001 fbfc 	bl	800de84 <_svfiprintf_r>
 800c68c:	9b02      	ldr	r3, [sp, #8]
 800c68e:	2200      	movs	r2, #0
 800c690:	701a      	strb	r2, [r3, #0]
 800c692:	b01c      	add	sp, #112	@ 0x70
 800c694:	f85d eb04 	ldr.w	lr, [sp], #4
 800c698:	b003      	add	sp, #12
 800c69a:	4770      	bx	lr
 800c69c:	2000010c 	.word	0x2000010c
 800c6a0:	ffff0208 	.word	0xffff0208

0800c6a4 <__sread>:
 800c6a4:	b510      	push	{r4, lr}
 800c6a6:	460c      	mov	r4, r1
 800c6a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6ac:	f000 f86c 	bl	800c788 <_read_r>
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	bfab      	itete	ge
 800c6b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c6b6:	89a3      	ldrhlt	r3, [r4, #12]
 800c6b8:	181b      	addge	r3, r3, r0
 800c6ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c6be:	bfac      	ite	ge
 800c6c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c6c2:	81a3      	strhlt	r3, [r4, #12]
 800c6c4:	bd10      	pop	{r4, pc}

0800c6c6 <__swrite>:
 800c6c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ca:	461f      	mov	r7, r3
 800c6cc:	898b      	ldrh	r3, [r1, #12]
 800c6ce:	05db      	lsls	r3, r3, #23
 800c6d0:	4605      	mov	r5, r0
 800c6d2:	460c      	mov	r4, r1
 800c6d4:	4616      	mov	r6, r2
 800c6d6:	d505      	bpl.n	800c6e4 <__swrite+0x1e>
 800c6d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6dc:	2302      	movs	r3, #2
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f000 f840 	bl	800c764 <_lseek_r>
 800c6e4:	89a3      	ldrh	r3, [r4, #12]
 800c6e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c6ee:	81a3      	strh	r3, [r4, #12]
 800c6f0:	4632      	mov	r2, r6
 800c6f2:	463b      	mov	r3, r7
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6fa:	f000 b857 	b.w	800c7ac <_write_r>

0800c6fe <__sseek>:
 800c6fe:	b510      	push	{r4, lr}
 800c700:	460c      	mov	r4, r1
 800c702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c706:	f000 f82d 	bl	800c764 <_lseek_r>
 800c70a:	1c43      	adds	r3, r0, #1
 800c70c:	89a3      	ldrh	r3, [r4, #12]
 800c70e:	bf15      	itete	ne
 800c710:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c712:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c716:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c71a:	81a3      	strheq	r3, [r4, #12]
 800c71c:	bf18      	it	ne
 800c71e:	81a3      	strhne	r3, [r4, #12]
 800c720:	bd10      	pop	{r4, pc}

0800c722 <__sclose>:
 800c722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c726:	f000 b80d 	b.w	800c744 <_close_r>

0800c72a <memset>:
 800c72a:	4402      	add	r2, r0
 800c72c:	4603      	mov	r3, r0
 800c72e:	4293      	cmp	r3, r2
 800c730:	d100      	bne.n	800c734 <memset+0xa>
 800c732:	4770      	bx	lr
 800c734:	f803 1b01 	strb.w	r1, [r3], #1
 800c738:	e7f9      	b.n	800c72e <memset+0x4>
	...

0800c73c <_localeconv_r>:
 800c73c:	4800      	ldr	r0, [pc, #0]	@ (800c740 <_localeconv_r+0x4>)
 800c73e:	4770      	bx	lr
 800c740:	2000024c 	.word	0x2000024c

0800c744 <_close_r>:
 800c744:	b538      	push	{r3, r4, r5, lr}
 800c746:	4d06      	ldr	r5, [pc, #24]	@ (800c760 <_close_r+0x1c>)
 800c748:	2300      	movs	r3, #0
 800c74a:	4604      	mov	r4, r0
 800c74c:	4608      	mov	r0, r1
 800c74e:	602b      	str	r3, [r5, #0]
 800c750:	f7f6 f896 	bl	8002880 <_close>
 800c754:	1c43      	adds	r3, r0, #1
 800c756:	d102      	bne.n	800c75e <_close_r+0x1a>
 800c758:	682b      	ldr	r3, [r5, #0]
 800c75a:	b103      	cbz	r3, 800c75e <_close_r+0x1a>
 800c75c:	6023      	str	r3, [r4, #0]
 800c75e:	bd38      	pop	{r3, r4, r5, pc}
 800c760:	20002394 	.word	0x20002394

0800c764 <_lseek_r>:
 800c764:	b538      	push	{r3, r4, r5, lr}
 800c766:	4d07      	ldr	r5, [pc, #28]	@ (800c784 <_lseek_r+0x20>)
 800c768:	4604      	mov	r4, r0
 800c76a:	4608      	mov	r0, r1
 800c76c:	4611      	mov	r1, r2
 800c76e:	2200      	movs	r2, #0
 800c770:	602a      	str	r2, [r5, #0]
 800c772:	461a      	mov	r2, r3
 800c774:	f7f6 f8ab 	bl	80028ce <_lseek>
 800c778:	1c43      	adds	r3, r0, #1
 800c77a:	d102      	bne.n	800c782 <_lseek_r+0x1e>
 800c77c:	682b      	ldr	r3, [r5, #0]
 800c77e:	b103      	cbz	r3, 800c782 <_lseek_r+0x1e>
 800c780:	6023      	str	r3, [r4, #0]
 800c782:	bd38      	pop	{r3, r4, r5, pc}
 800c784:	20002394 	.word	0x20002394

0800c788 <_read_r>:
 800c788:	b538      	push	{r3, r4, r5, lr}
 800c78a:	4d07      	ldr	r5, [pc, #28]	@ (800c7a8 <_read_r+0x20>)
 800c78c:	4604      	mov	r4, r0
 800c78e:	4608      	mov	r0, r1
 800c790:	4611      	mov	r1, r2
 800c792:	2200      	movs	r2, #0
 800c794:	602a      	str	r2, [r5, #0]
 800c796:	461a      	mov	r2, r3
 800c798:	f7f6 f839 	bl	800280e <_read>
 800c79c:	1c43      	adds	r3, r0, #1
 800c79e:	d102      	bne.n	800c7a6 <_read_r+0x1e>
 800c7a0:	682b      	ldr	r3, [r5, #0]
 800c7a2:	b103      	cbz	r3, 800c7a6 <_read_r+0x1e>
 800c7a4:	6023      	str	r3, [r4, #0]
 800c7a6:	bd38      	pop	{r3, r4, r5, pc}
 800c7a8:	20002394 	.word	0x20002394

0800c7ac <_write_r>:
 800c7ac:	b538      	push	{r3, r4, r5, lr}
 800c7ae:	4d07      	ldr	r5, [pc, #28]	@ (800c7cc <_write_r+0x20>)
 800c7b0:	4604      	mov	r4, r0
 800c7b2:	4608      	mov	r0, r1
 800c7b4:	4611      	mov	r1, r2
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	602a      	str	r2, [r5, #0]
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	f7f6 f844 	bl	8002848 <_write>
 800c7c0:	1c43      	adds	r3, r0, #1
 800c7c2:	d102      	bne.n	800c7ca <_write_r+0x1e>
 800c7c4:	682b      	ldr	r3, [r5, #0]
 800c7c6:	b103      	cbz	r3, 800c7ca <_write_r+0x1e>
 800c7c8:	6023      	str	r3, [r4, #0]
 800c7ca:	bd38      	pop	{r3, r4, r5, pc}
 800c7cc:	20002394 	.word	0x20002394

0800c7d0 <__errno>:
 800c7d0:	4b01      	ldr	r3, [pc, #4]	@ (800c7d8 <__errno+0x8>)
 800c7d2:	6818      	ldr	r0, [r3, #0]
 800c7d4:	4770      	bx	lr
 800c7d6:	bf00      	nop
 800c7d8:	2000010c 	.word	0x2000010c

0800c7dc <__libc_init_array>:
 800c7dc:	b570      	push	{r4, r5, r6, lr}
 800c7de:	4d0d      	ldr	r5, [pc, #52]	@ (800c814 <__libc_init_array+0x38>)
 800c7e0:	4c0d      	ldr	r4, [pc, #52]	@ (800c818 <__libc_init_array+0x3c>)
 800c7e2:	1b64      	subs	r4, r4, r5
 800c7e4:	10a4      	asrs	r4, r4, #2
 800c7e6:	2600      	movs	r6, #0
 800c7e8:	42a6      	cmp	r6, r4
 800c7ea:	d109      	bne.n	800c800 <__libc_init_array+0x24>
 800c7ec:	4d0b      	ldr	r5, [pc, #44]	@ (800c81c <__libc_init_array+0x40>)
 800c7ee:	4c0c      	ldr	r4, [pc, #48]	@ (800c820 <__libc_init_array+0x44>)
 800c7f0:	f002 fb6c 	bl	800eecc <_init>
 800c7f4:	1b64      	subs	r4, r4, r5
 800c7f6:	10a4      	asrs	r4, r4, #2
 800c7f8:	2600      	movs	r6, #0
 800c7fa:	42a6      	cmp	r6, r4
 800c7fc:	d105      	bne.n	800c80a <__libc_init_array+0x2e>
 800c7fe:	bd70      	pop	{r4, r5, r6, pc}
 800c800:	f855 3b04 	ldr.w	r3, [r5], #4
 800c804:	4798      	blx	r3
 800c806:	3601      	adds	r6, #1
 800c808:	e7ee      	b.n	800c7e8 <__libc_init_array+0xc>
 800c80a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c80e:	4798      	blx	r3
 800c810:	3601      	adds	r6, #1
 800c812:	e7f2      	b.n	800c7fa <__libc_init_array+0x1e>
 800c814:	0800f600 	.word	0x0800f600
 800c818:	0800f600 	.word	0x0800f600
 800c81c:	0800f600 	.word	0x0800f600
 800c820:	0800f604 	.word	0x0800f604

0800c824 <__retarget_lock_init_recursive>:
 800c824:	4770      	bx	lr

0800c826 <__retarget_lock_acquire_recursive>:
 800c826:	4770      	bx	lr

0800c828 <__retarget_lock_release_recursive>:
 800c828:	4770      	bx	lr

0800c82a <quorem>:
 800c82a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82e:	6903      	ldr	r3, [r0, #16]
 800c830:	690c      	ldr	r4, [r1, #16]
 800c832:	42a3      	cmp	r3, r4
 800c834:	4607      	mov	r7, r0
 800c836:	db7e      	blt.n	800c936 <quorem+0x10c>
 800c838:	3c01      	subs	r4, #1
 800c83a:	f101 0814 	add.w	r8, r1, #20
 800c83e:	00a3      	lsls	r3, r4, #2
 800c840:	f100 0514 	add.w	r5, r0, #20
 800c844:	9300      	str	r3, [sp, #0]
 800c846:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c84a:	9301      	str	r3, [sp, #4]
 800c84c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c850:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c854:	3301      	adds	r3, #1
 800c856:	429a      	cmp	r2, r3
 800c858:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c85c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c860:	d32e      	bcc.n	800c8c0 <quorem+0x96>
 800c862:	f04f 0a00 	mov.w	sl, #0
 800c866:	46c4      	mov	ip, r8
 800c868:	46ae      	mov	lr, r5
 800c86a:	46d3      	mov	fp, sl
 800c86c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c870:	b298      	uxth	r0, r3
 800c872:	fb06 a000 	mla	r0, r6, r0, sl
 800c876:	0c02      	lsrs	r2, r0, #16
 800c878:	0c1b      	lsrs	r3, r3, #16
 800c87a:	fb06 2303 	mla	r3, r6, r3, r2
 800c87e:	f8de 2000 	ldr.w	r2, [lr]
 800c882:	b280      	uxth	r0, r0
 800c884:	b292      	uxth	r2, r2
 800c886:	1a12      	subs	r2, r2, r0
 800c888:	445a      	add	r2, fp
 800c88a:	f8de 0000 	ldr.w	r0, [lr]
 800c88e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c892:	b29b      	uxth	r3, r3
 800c894:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c898:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c89c:	b292      	uxth	r2, r2
 800c89e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c8a2:	45e1      	cmp	r9, ip
 800c8a4:	f84e 2b04 	str.w	r2, [lr], #4
 800c8a8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c8ac:	d2de      	bcs.n	800c86c <quorem+0x42>
 800c8ae:	9b00      	ldr	r3, [sp, #0]
 800c8b0:	58eb      	ldr	r3, [r5, r3]
 800c8b2:	b92b      	cbnz	r3, 800c8c0 <quorem+0x96>
 800c8b4:	9b01      	ldr	r3, [sp, #4]
 800c8b6:	3b04      	subs	r3, #4
 800c8b8:	429d      	cmp	r5, r3
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	d32f      	bcc.n	800c91e <quorem+0xf4>
 800c8be:	613c      	str	r4, [r7, #16]
 800c8c0:	4638      	mov	r0, r7
 800c8c2:	f001 f97b 	bl	800dbbc <__mcmp>
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	db25      	blt.n	800c916 <quorem+0xec>
 800c8ca:	4629      	mov	r1, r5
 800c8cc:	2000      	movs	r0, #0
 800c8ce:	f858 2b04 	ldr.w	r2, [r8], #4
 800c8d2:	f8d1 c000 	ldr.w	ip, [r1]
 800c8d6:	fa1f fe82 	uxth.w	lr, r2
 800c8da:	fa1f f38c 	uxth.w	r3, ip
 800c8de:	eba3 030e 	sub.w	r3, r3, lr
 800c8e2:	4403      	add	r3, r0
 800c8e4:	0c12      	lsrs	r2, r2, #16
 800c8e6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c8ea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8f4:	45c1      	cmp	r9, r8
 800c8f6:	f841 3b04 	str.w	r3, [r1], #4
 800c8fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c8fe:	d2e6      	bcs.n	800c8ce <quorem+0xa4>
 800c900:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c904:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c908:	b922      	cbnz	r2, 800c914 <quorem+0xea>
 800c90a:	3b04      	subs	r3, #4
 800c90c:	429d      	cmp	r5, r3
 800c90e:	461a      	mov	r2, r3
 800c910:	d30b      	bcc.n	800c92a <quorem+0x100>
 800c912:	613c      	str	r4, [r7, #16]
 800c914:	3601      	adds	r6, #1
 800c916:	4630      	mov	r0, r6
 800c918:	b003      	add	sp, #12
 800c91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c91e:	6812      	ldr	r2, [r2, #0]
 800c920:	3b04      	subs	r3, #4
 800c922:	2a00      	cmp	r2, #0
 800c924:	d1cb      	bne.n	800c8be <quorem+0x94>
 800c926:	3c01      	subs	r4, #1
 800c928:	e7c6      	b.n	800c8b8 <quorem+0x8e>
 800c92a:	6812      	ldr	r2, [r2, #0]
 800c92c:	3b04      	subs	r3, #4
 800c92e:	2a00      	cmp	r2, #0
 800c930:	d1ef      	bne.n	800c912 <quorem+0xe8>
 800c932:	3c01      	subs	r4, #1
 800c934:	e7ea      	b.n	800c90c <quorem+0xe2>
 800c936:	2000      	movs	r0, #0
 800c938:	e7ee      	b.n	800c918 <quorem+0xee>
 800c93a:	0000      	movs	r0, r0
 800c93c:	0000      	movs	r0, r0
	...

0800c940 <_dtoa_r>:
 800c940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c944:	69c7      	ldr	r7, [r0, #28]
 800c946:	b099      	sub	sp, #100	@ 0x64
 800c948:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c94c:	ec55 4b10 	vmov	r4, r5, d0
 800c950:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c952:	9109      	str	r1, [sp, #36]	@ 0x24
 800c954:	4683      	mov	fp, r0
 800c956:	920e      	str	r2, [sp, #56]	@ 0x38
 800c958:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c95a:	b97f      	cbnz	r7, 800c97c <_dtoa_r+0x3c>
 800c95c:	2010      	movs	r0, #16
 800c95e:	f000 fdfd 	bl	800d55c <malloc>
 800c962:	4602      	mov	r2, r0
 800c964:	f8cb 001c 	str.w	r0, [fp, #28]
 800c968:	b920      	cbnz	r0, 800c974 <_dtoa_r+0x34>
 800c96a:	4ba7      	ldr	r3, [pc, #668]	@ (800cc08 <_dtoa_r+0x2c8>)
 800c96c:	21ef      	movs	r1, #239	@ 0xef
 800c96e:	48a7      	ldr	r0, [pc, #668]	@ (800cc0c <_dtoa_r+0x2cc>)
 800c970:	f001 fc68 	bl	800e244 <__assert_func>
 800c974:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c978:	6007      	str	r7, [r0, #0]
 800c97a:	60c7      	str	r7, [r0, #12]
 800c97c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c980:	6819      	ldr	r1, [r3, #0]
 800c982:	b159      	cbz	r1, 800c99c <_dtoa_r+0x5c>
 800c984:	685a      	ldr	r2, [r3, #4]
 800c986:	604a      	str	r2, [r1, #4]
 800c988:	2301      	movs	r3, #1
 800c98a:	4093      	lsls	r3, r2
 800c98c:	608b      	str	r3, [r1, #8]
 800c98e:	4658      	mov	r0, fp
 800c990:	f000 feda 	bl	800d748 <_Bfree>
 800c994:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c998:	2200      	movs	r2, #0
 800c99a:	601a      	str	r2, [r3, #0]
 800c99c:	1e2b      	subs	r3, r5, #0
 800c99e:	bfb9      	ittee	lt
 800c9a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c9a4:	9303      	strlt	r3, [sp, #12]
 800c9a6:	2300      	movge	r3, #0
 800c9a8:	6033      	strge	r3, [r6, #0]
 800c9aa:	9f03      	ldr	r7, [sp, #12]
 800c9ac:	4b98      	ldr	r3, [pc, #608]	@ (800cc10 <_dtoa_r+0x2d0>)
 800c9ae:	bfbc      	itt	lt
 800c9b0:	2201      	movlt	r2, #1
 800c9b2:	6032      	strlt	r2, [r6, #0]
 800c9b4:	43bb      	bics	r3, r7
 800c9b6:	d112      	bne.n	800c9de <_dtoa_r+0x9e>
 800c9b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c9ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c9be:	6013      	str	r3, [r2, #0]
 800c9c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c9c4:	4323      	orrs	r3, r4
 800c9c6:	f000 854d 	beq.w	800d464 <_dtoa_r+0xb24>
 800c9ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c9cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cc24 <_dtoa_r+0x2e4>
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	f000 854f 	beq.w	800d474 <_dtoa_r+0xb34>
 800c9d6:	f10a 0303 	add.w	r3, sl, #3
 800c9da:	f000 bd49 	b.w	800d470 <_dtoa_r+0xb30>
 800c9de:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	ec51 0b17 	vmov	r0, r1, d7
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c9ee:	f7f4 f86b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9f2:	4680      	mov	r8, r0
 800c9f4:	b158      	cbz	r0, 800ca0e <_dtoa_r+0xce>
 800c9f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	6013      	str	r3, [r2, #0]
 800c9fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c9fe:	b113      	cbz	r3, 800ca06 <_dtoa_r+0xc6>
 800ca00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ca02:	4b84      	ldr	r3, [pc, #528]	@ (800cc14 <_dtoa_r+0x2d4>)
 800ca04:	6013      	str	r3, [r2, #0]
 800ca06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cc28 <_dtoa_r+0x2e8>
 800ca0a:	f000 bd33 	b.w	800d474 <_dtoa_r+0xb34>
 800ca0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ca12:	aa16      	add	r2, sp, #88	@ 0x58
 800ca14:	a917      	add	r1, sp, #92	@ 0x5c
 800ca16:	4658      	mov	r0, fp
 800ca18:	f001 f980 	bl	800dd1c <__d2b>
 800ca1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ca20:	4681      	mov	r9, r0
 800ca22:	2e00      	cmp	r6, #0
 800ca24:	d077      	beq.n	800cb16 <_dtoa_r+0x1d6>
 800ca26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ca2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ca38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ca3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ca40:	4619      	mov	r1, r3
 800ca42:	2200      	movs	r2, #0
 800ca44:	4b74      	ldr	r3, [pc, #464]	@ (800cc18 <_dtoa_r+0x2d8>)
 800ca46:	f7f3 fc1f 	bl	8000288 <__aeabi_dsub>
 800ca4a:	a369      	add	r3, pc, #420	@ (adr r3, 800cbf0 <_dtoa_r+0x2b0>)
 800ca4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca50:	f7f3 fdd2 	bl	80005f8 <__aeabi_dmul>
 800ca54:	a368      	add	r3, pc, #416	@ (adr r3, 800cbf8 <_dtoa_r+0x2b8>)
 800ca56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5a:	f7f3 fc17 	bl	800028c <__adddf3>
 800ca5e:	4604      	mov	r4, r0
 800ca60:	4630      	mov	r0, r6
 800ca62:	460d      	mov	r5, r1
 800ca64:	f7f3 fd5e 	bl	8000524 <__aeabi_i2d>
 800ca68:	a365      	add	r3, pc, #404	@ (adr r3, 800cc00 <_dtoa_r+0x2c0>)
 800ca6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6e:	f7f3 fdc3 	bl	80005f8 <__aeabi_dmul>
 800ca72:	4602      	mov	r2, r0
 800ca74:	460b      	mov	r3, r1
 800ca76:	4620      	mov	r0, r4
 800ca78:	4629      	mov	r1, r5
 800ca7a:	f7f3 fc07 	bl	800028c <__adddf3>
 800ca7e:	4604      	mov	r4, r0
 800ca80:	460d      	mov	r5, r1
 800ca82:	f7f4 f869 	bl	8000b58 <__aeabi_d2iz>
 800ca86:	2200      	movs	r2, #0
 800ca88:	4607      	mov	r7, r0
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	4629      	mov	r1, r5
 800ca90:	f7f4 f824 	bl	8000adc <__aeabi_dcmplt>
 800ca94:	b140      	cbz	r0, 800caa8 <_dtoa_r+0x168>
 800ca96:	4638      	mov	r0, r7
 800ca98:	f7f3 fd44 	bl	8000524 <__aeabi_i2d>
 800ca9c:	4622      	mov	r2, r4
 800ca9e:	462b      	mov	r3, r5
 800caa0:	f7f4 f812 	bl	8000ac8 <__aeabi_dcmpeq>
 800caa4:	b900      	cbnz	r0, 800caa8 <_dtoa_r+0x168>
 800caa6:	3f01      	subs	r7, #1
 800caa8:	2f16      	cmp	r7, #22
 800caaa:	d851      	bhi.n	800cb50 <_dtoa_r+0x210>
 800caac:	4b5b      	ldr	r3, [pc, #364]	@ (800cc1c <_dtoa_r+0x2dc>)
 800caae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800caba:	f7f4 f80f 	bl	8000adc <__aeabi_dcmplt>
 800cabe:	2800      	cmp	r0, #0
 800cac0:	d048      	beq.n	800cb54 <_dtoa_r+0x214>
 800cac2:	3f01      	subs	r7, #1
 800cac4:	2300      	movs	r3, #0
 800cac6:	9312      	str	r3, [sp, #72]	@ 0x48
 800cac8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800caca:	1b9b      	subs	r3, r3, r6
 800cacc:	1e5a      	subs	r2, r3, #1
 800cace:	bf44      	itt	mi
 800cad0:	f1c3 0801 	rsbmi	r8, r3, #1
 800cad4:	2300      	movmi	r3, #0
 800cad6:	9208      	str	r2, [sp, #32]
 800cad8:	bf54      	ite	pl
 800cada:	f04f 0800 	movpl.w	r8, #0
 800cade:	9308      	strmi	r3, [sp, #32]
 800cae0:	2f00      	cmp	r7, #0
 800cae2:	db39      	blt.n	800cb58 <_dtoa_r+0x218>
 800cae4:	9b08      	ldr	r3, [sp, #32]
 800cae6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cae8:	443b      	add	r3, r7
 800caea:	9308      	str	r3, [sp, #32]
 800caec:	2300      	movs	r3, #0
 800caee:	930a      	str	r3, [sp, #40]	@ 0x28
 800caf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caf2:	2b09      	cmp	r3, #9
 800caf4:	d864      	bhi.n	800cbc0 <_dtoa_r+0x280>
 800caf6:	2b05      	cmp	r3, #5
 800caf8:	bfc4      	itt	gt
 800cafa:	3b04      	subgt	r3, #4
 800cafc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb00:	f1a3 0302 	sub.w	r3, r3, #2
 800cb04:	bfcc      	ite	gt
 800cb06:	2400      	movgt	r4, #0
 800cb08:	2401      	movle	r4, #1
 800cb0a:	2b03      	cmp	r3, #3
 800cb0c:	d863      	bhi.n	800cbd6 <_dtoa_r+0x296>
 800cb0e:	e8df f003 	tbb	[pc, r3]
 800cb12:	372a      	.short	0x372a
 800cb14:	5535      	.short	0x5535
 800cb16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cb1a:	441e      	add	r6, r3
 800cb1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cb20:	2b20      	cmp	r3, #32
 800cb22:	bfc1      	itttt	gt
 800cb24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cb28:	409f      	lslgt	r7, r3
 800cb2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cb2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cb32:	bfd6      	itet	le
 800cb34:	f1c3 0320 	rsble	r3, r3, #32
 800cb38:	ea47 0003 	orrgt.w	r0, r7, r3
 800cb3c:	fa04 f003 	lslle.w	r0, r4, r3
 800cb40:	f7f3 fce0 	bl	8000504 <__aeabi_ui2d>
 800cb44:	2201      	movs	r2, #1
 800cb46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cb4a:	3e01      	subs	r6, #1
 800cb4c:	9214      	str	r2, [sp, #80]	@ 0x50
 800cb4e:	e777      	b.n	800ca40 <_dtoa_r+0x100>
 800cb50:	2301      	movs	r3, #1
 800cb52:	e7b8      	b.n	800cac6 <_dtoa_r+0x186>
 800cb54:	9012      	str	r0, [sp, #72]	@ 0x48
 800cb56:	e7b7      	b.n	800cac8 <_dtoa_r+0x188>
 800cb58:	427b      	negs	r3, r7
 800cb5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	eba8 0807 	sub.w	r8, r8, r7
 800cb62:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cb64:	e7c4      	b.n	800caf0 <_dtoa_r+0x1b0>
 800cb66:	2300      	movs	r3, #0
 800cb68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	dc35      	bgt.n	800cbdc <_dtoa_r+0x29c>
 800cb70:	2301      	movs	r3, #1
 800cb72:	9300      	str	r3, [sp, #0]
 800cb74:	9307      	str	r3, [sp, #28]
 800cb76:	461a      	mov	r2, r3
 800cb78:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb7a:	e00b      	b.n	800cb94 <_dtoa_r+0x254>
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	e7f3      	b.n	800cb68 <_dtoa_r+0x228>
 800cb80:	2300      	movs	r3, #0
 800cb82:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb86:	18fb      	adds	r3, r7, r3
 800cb88:	9300      	str	r3, [sp, #0]
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	9307      	str	r3, [sp, #28]
 800cb90:	bfb8      	it	lt
 800cb92:	2301      	movlt	r3, #1
 800cb94:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cb98:	2100      	movs	r1, #0
 800cb9a:	2204      	movs	r2, #4
 800cb9c:	f102 0514 	add.w	r5, r2, #20
 800cba0:	429d      	cmp	r5, r3
 800cba2:	d91f      	bls.n	800cbe4 <_dtoa_r+0x2a4>
 800cba4:	6041      	str	r1, [r0, #4]
 800cba6:	4658      	mov	r0, fp
 800cba8:	f000 fd8e 	bl	800d6c8 <_Balloc>
 800cbac:	4682      	mov	sl, r0
 800cbae:	2800      	cmp	r0, #0
 800cbb0:	d13c      	bne.n	800cc2c <_dtoa_r+0x2ec>
 800cbb2:	4b1b      	ldr	r3, [pc, #108]	@ (800cc20 <_dtoa_r+0x2e0>)
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	f240 11af 	movw	r1, #431	@ 0x1af
 800cbba:	e6d8      	b.n	800c96e <_dtoa_r+0x2e>
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e7e0      	b.n	800cb82 <_dtoa_r+0x242>
 800cbc0:	2401      	movs	r4, #1
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbc6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cbc8:	f04f 33ff 	mov.w	r3, #4294967295
 800cbcc:	9300      	str	r3, [sp, #0]
 800cbce:	9307      	str	r3, [sp, #28]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	2312      	movs	r3, #18
 800cbd4:	e7d0      	b.n	800cb78 <_dtoa_r+0x238>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cbda:	e7f5      	b.n	800cbc8 <_dtoa_r+0x288>
 800cbdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbde:	9300      	str	r3, [sp, #0]
 800cbe0:	9307      	str	r3, [sp, #28]
 800cbe2:	e7d7      	b.n	800cb94 <_dtoa_r+0x254>
 800cbe4:	3101      	adds	r1, #1
 800cbe6:	0052      	lsls	r2, r2, #1
 800cbe8:	e7d8      	b.n	800cb9c <_dtoa_r+0x25c>
 800cbea:	bf00      	nop
 800cbec:	f3af 8000 	nop.w
 800cbf0:	636f4361 	.word	0x636f4361
 800cbf4:	3fd287a7 	.word	0x3fd287a7
 800cbf8:	8b60c8b3 	.word	0x8b60c8b3
 800cbfc:	3fc68a28 	.word	0x3fc68a28
 800cc00:	509f79fb 	.word	0x509f79fb
 800cc04:	3fd34413 	.word	0x3fd34413
 800cc08:	0800f2c9 	.word	0x0800f2c9
 800cc0c:	0800f2e0 	.word	0x0800f2e0
 800cc10:	7ff00000 	.word	0x7ff00000
 800cc14:	0800f299 	.word	0x0800f299
 800cc18:	3ff80000 	.word	0x3ff80000
 800cc1c:	0800f3d8 	.word	0x0800f3d8
 800cc20:	0800f338 	.word	0x0800f338
 800cc24:	0800f2c5 	.word	0x0800f2c5
 800cc28:	0800f298 	.word	0x0800f298
 800cc2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cc30:	6018      	str	r0, [r3, #0]
 800cc32:	9b07      	ldr	r3, [sp, #28]
 800cc34:	2b0e      	cmp	r3, #14
 800cc36:	f200 80a4 	bhi.w	800cd82 <_dtoa_r+0x442>
 800cc3a:	2c00      	cmp	r4, #0
 800cc3c:	f000 80a1 	beq.w	800cd82 <_dtoa_r+0x442>
 800cc40:	2f00      	cmp	r7, #0
 800cc42:	dd33      	ble.n	800ccac <_dtoa_r+0x36c>
 800cc44:	4bad      	ldr	r3, [pc, #692]	@ (800cefc <_dtoa_r+0x5bc>)
 800cc46:	f007 020f 	and.w	r2, r7, #15
 800cc4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc4e:	ed93 7b00 	vldr	d7, [r3]
 800cc52:	05f8      	lsls	r0, r7, #23
 800cc54:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cc58:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cc5c:	d516      	bpl.n	800cc8c <_dtoa_r+0x34c>
 800cc5e:	4ba8      	ldr	r3, [pc, #672]	@ (800cf00 <_dtoa_r+0x5c0>)
 800cc60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cc68:	f7f3 fdf0 	bl	800084c <__aeabi_ddiv>
 800cc6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc70:	f004 040f 	and.w	r4, r4, #15
 800cc74:	2603      	movs	r6, #3
 800cc76:	4da2      	ldr	r5, [pc, #648]	@ (800cf00 <_dtoa_r+0x5c0>)
 800cc78:	b954      	cbnz	r4, 800cc90 <_dtoa_r+0x350>
 800cc7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc82:	f7f3 fde3 	bl	800084c <__aeabi_ddiv>
 800cc86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc8a:	e028      	b.n	800ccde <_dtoa_r+0x39e>
 800cc8c:	2602      	movs	r6, #2
 800cc8e:	e7f2      	b.n	800cc76 <_dtoa_r+0x336>
 800cc90:	07e1      	lsls	r1, r4, #31
 800cc92:	d508      	bpl.n	800cca6 <_dtoa_r+0x366>
 800cc94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc98:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cc9c:	f7f3 fcac 	bl	80005f8 <__aeabi_dmul>
 800cca0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cca4:	3601      	adds	r6, #1
 800cca6:	1064      	asrs	r4, r4, #1
 800cca8:	3508      	adds	r5, #8
 800ccaa:	e7e5      	b.n	800cc78 <_dtoa_r+0x338>
 800ccac:	f000 80d2 	beq.w	800ce54 <_dtoa_r+0x514>
 800ccb0:	427c      	negs	r4, r7
 800ccb2:	4b92      	ldr	r3, [pc, #584]	@ (800cefc <_dtoa_r+0x5bc>)
 800ccb4:	4d92      	ldr	r5, [pc, #584]	@ (800cf00 <_dtoa_r+0x5c0>)
 800ccb6:	f004 020f 	and.w	r2, r4, #15
 800ccba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ccc6:	f7f3 fc97 	bl	80005f8 <__aeabi_dmul>
 800ccca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccce:	1124      	asrs	r4, r4, #4
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	2602      	movs	r6, #2
 800ccd4:	2c00      	cmp	r4, #0
 800ccd6:	f040 80b2 	bne.w	800ce3e <_dtoa_r+0x4fe>
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d1d3      	bne.n	800cc86 <_dtoa_r+0x346>
 800ccde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cce0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	f000 80b7 	beq.w	800ce58 <_dtoa_r+0x518>
 800ccea:	4b86      	ldr	r3, [pc, #536]	@ (800cf04 <_dtoa_r+0x5c4>)
 800ccec:	2200      	movs	r2, #0
 800ccee:	4620      	mov	r0, r4
 800ccf0:	4629      	mov	r1, r5
 800ccf2:	f7f3 fef3 	bl	8000adc <__aeabi_dcmplt>
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	f000 80ae 	beq.w	800ce58 <_dtoa_r+0x518>
 800ccfc:	9b07      	ldr	r3, [sp, #28]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	f000 80aa 	beq.w	800ce58 <_dtoa_r+0x518>
 800cd04:	9b00      	ldr	r3, [sp, #0]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	dd37      	ble.n	800cd7a <_dtoa_r+0x43a>
 800cd0a:	1e7b      	subs	r3, r7, #1
 800cd0c:	9304      	str	r3, [sp, #16]
 800cd0e:	4620      	mov	r0, r4
 800cd10:	4b7d      	ldr	r3, [pc, #500]	@ (800cf08 <_dtoa_r+0x5c8>)
 800cd12:	2200      	movs	r2, #0
 800cd14:	4629      	mov	r1, r5
 800cd16:	f7f3 fc6f 	bl	80005f8 <__aeabi_dmul>
 800cd1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd1e:	9c00      	ldr	r4, [sp, #0]
 800cd20:	3601      	adds	r6, #1
 800cd22:	4630      	mov	r0, r6
 800cd24:	f7f3 fbfe 	bl	8000524 <__aeabi_i2d>
 800cd28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd2c:	f7f3 fc64 	bl	80005f8 <__aeabi_dmul>
 800cd30:	4b76      	ldr	r3, [pc, #472]	@ (800cf0c <_dtoa_r+0x5cc>)
 800cd32:	2200      	movs	r2, #0
 800cd34:	f7f3 faaa 	bl	800028c <__adddf3>
 800cd38:	4605      	mov	r5, r0
 800cd3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cd3e:	2c00      	cmp	r4, #0
 800cd40:	f040 808d 	bne.w	800ce5e <_dtoa_r+0x51e>
 800cd44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd48:	4b71      	ldr	r3, [pc, #452]	@ (800cf10 <_dtoa_r+0x5d0>)
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f7f3 fa9c 	bl	8000288 <__aeabi_dsub>
 800cd50:	4602      	mov	r2, r0
 800cd52:	460b      	mov	r3, r1
 800cd54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd58:	462a      	mov	r2, r5
 800cd5a:	4633      	mov	r3, r6
 800cd5c:	f7f3 fedc 	bl	8000b18 <__aeabi_dcmpgt>
 800cd60:	2800      	cmp	r0, #0
 800cd62:	f040 828b 	bne.w	800d27c <_dtoa_r+0x93c>
 800cd66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd6a:	462a      	mov	r2, r5
 800cd6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cd70:	f7f3 feb4 	bl	8000adc <__aeabi_dcmplt>
 800cd74:	2800      	cmp	r0, #0
 800cd76:	f040 8128 	bne.w	800cfca <_dtoa_r+0x68a>
 800cd7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cd7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cd82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	f2c0 815a 	blt.w	800d03e <_dtoa_r+0x6fe>
 800cd8a:	2f0e      	cmp	r7, #14
 800cd8c:	f300 8157 	bgt.w	800d03e <_dtoa_r+0x6fe>
 800cd90:	4b5a      	ldr	r3, [pc, #360]	@ (800cefc <_dtoa_r+0x5bc>)
 800cd92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cd96:	ed93 7b00 	vldr	d7, [r3]
 800cd9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	ed8d 7b00 	vstr	d7, [sp]
 800cda2:	da03      	bge.n	800cdac <_dtoa_r+0x46c>
 800cda4:	9b07      	ldr	r3, [sp, #28]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	f340 8101 	ble.w	800cfae <_dtoa_r+0x66e>
 800cdac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cdb0:	4656      	mov	r6, sl
 800cdb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	4629      	mov	r1, r5
 800cdba:	f7f3 fd47 	bl	800084c <__aeabi_ddiv>
 800cdbe:	f7f3 fecb 	bl	8000b58 <__aeabi_d2iz>
 800cdc2:	4680      	mov	r8, r0
 800cdc4:	f7f3 fbae 	bl	8000524 <__aeabi_i2d>
 800cdc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdcc:	f7f3 fc14 	bl	80005f8 <__aeabi_dmul>
 800cdd0:	4602      	mov	r2, r0
 800cdd2:	460b      	mov	r3, r1
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	4629      	mov	r1, r5
 800cdd8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cddc:	f7f3 fa54 	bl	8000288 <__aeabi_dsub>
 800cde0:	f806 4b01 	strb.w	r4, [r6], #1
 800cde4:	9d07      	ldr	r5, [sp, #28]
 800cde6:	eba6 040a 	sub.w	r4, r6, sl
 800cdea:	42a5      	cmp	r5, r4
 800cdec:	4602      	mov	r2, r0
 800cdee:	460b      	mov	r3, r1
 800cdf0:	f040 8117 	bne.w	800d022 <_dtoa_r+0x6e2>
 800cdf4:	f7f3 fa4a 	bl	800028c <__adddf3>
 800cdf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	460d      	mov	r5, r1
 800ce00:	f7f3 fe8a 	bl	8000b18 <__aeabi_dcmpgt>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	f040 80f9 	bne.w	800cffc <_dtoa_r+0x6bc>
 800ce0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce0e:	4620      	mov	r0, r4
 800ce10:	4629      	mov	r1, r5
 800ce12:	f7f3 fe59 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce16:	b118      	cbz	r0, 800ce20 <_dtoa_r+0x4e0>
 800ce18:	f018 0f01 	tst.w	r8, #1
 800ce1c:	f040 80ee 	bne.w	800cffc <_dtoa_r+0x6bc>
 800ce20:	4649      	mov	r1, r9
 800ce22:	4658      	mov	r0, fp
 800ce24:	f000 fc90 	bl	800d748 <_Bfree>
 800ce28:	2300      	movs	r3, #0
 800ce2a:	7033      	strb	r3, [r6, #0]
 800ce2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ce2e:	3701      	adds	r7, #1
 800ce30:	601f      	str	r7, [r3, #0]
 800ce32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f000 831d 	beq.w	800d474 <_dtoa_r+0xb34>
 800ce3a:	601e      	str	r6, [r3, #0]
 800ce3c:	e31a      	b.n	800d474 <_dtoa_r+0xb34>
 800ce3e:	07e2      	lsls	r2, r4, #31
 800ce40:	d505      	bpl.n	800ce4e <_dtoa_r+0x50e>
 800ce42:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ce46:	f7f3 fbd7 	bl	80005f8 <__aeabi_dmul>
 800ce4a:	3601      	adds	r6, #1
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	1064      	asrs	r4, r4, #1
 800ce50:	3508      	adds	r5, #8
 800ce52:	e73f      	b.n	800ccd4 <_dtoa_r+0x394>
 800ce54:	2602      	movs	r6, #2
 800ce56:	e742      	b.n	800ccde <_dtoa_r+0x39e>
 800ce58:	9c07      	ldr	r4, [sp, #28]
 800ce5a:	9704      	str	r7, [sp, #16]
 800ce5c:	e761      	b.n	800cd22 <_dtoa_r+0x3e2>
 800ce5e:	4b27      	ldr	r3, [pc, #156]	@ (800cefc <_dtoa_r+0x5bc>)
 800ce60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ce62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ce6a:	4454      	add	r4, sl
 800ce6c:	2900      	cmp	r1, #0
 800ce6e:	d053      	beq.n	800cf18 <_dtoa_r+0x5d8>
 800ce70:	4928      	ldr	r1, [pc, #160]	@ (800cf14 <_dtoa_r+0x5d4>)
 800ce72:	2000      	movs	r0, #0
 800ce74:	f7f3 fcea 	bl	800084c <__aeabi_ddiv>
 800ce78:	4633      	mov	r3, r6
 800ce7a:	462a      	mov	r2, r5
 800ce7c:	f7f3 fa04 	bl	8000288 <__aeabi_dsub>
 800ce80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ce84:	4656      	mov	r6, sl
 800ce86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce8a:	f7f3 fe65 	bl	8000b58 <__aeabi_d2iz>
 800ce8e:	4605      	mov	r5, r0
 800ce90:	f7f3 fb48 	bl	8000524 <__aeabi_i2d>
 800ce94:	4602      	mov	r2, r0
 800ce96:	460b      	mov	r3, r1
 800ce98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce9c:	f7f3 f9f4 	bl	8000288 <__aeabi_dsub>
 800cea0:	3530      	adds	r5, #48	@ 0x30
 800cea2:	4602      	mov	r2, r0
 800cea4:	460b      	mov	r3, r1
 800cea6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ceaa:	f806 5b01 	strb.w	r5, [r6], #1
 800ceae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ceb2:	f7f3 fe13 	bl	8000adc <__aeabi_dcmplt>
 800ceb6:	2800      	cmp	r0, #0
 800ceb8:	d171      	bne.n	800cf9e <_dtoa_r+0x65e>
 800ceba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cebe:	4911      	ldr	r1, [pc, #68]	@ (800cf04 <_dtoa_r+0x5c4>)
 800cec0:	2000      	movs	r0, #0
 800cec2:	f7f3 f9e1 	bl	8000288 <__aeabi_dsub>
 800cec6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ceca:	f7f3 fe07 	bl	8000adc <__aeabi_dcmplt>
 800cece:	2800      	cmp	r0, #0
 800ced0:	f040 8095 	bne.w	800cffe <_dtoa_r+0x6be>
 800ced4:	42a6      	cmp	r6, r4
 800ced6:	f43f af50 	beq.w	800cd7a <_dtoa_r+0x43a>
 800ceda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cede:	4b0a      	ldr	r3, [pc, #40]	@ (800cf08 <_dtoa_r+0x5c8>)
 800cee0:	2200      	movs	r2, #0
 800cee2:	f7f3 fb89 	bl	80005f8 <__aeabi_dmul>
 800cee6:	4b08      	ldr	r3, [pc, #32]	@ (800cf08 <_dtoa_r+0x5c8>)
 800cee8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ceec:	2200      	movs	r2, #0
 800ceee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cef2:	f7f3 fb81 	bl	80005f8 <__aeabi_dmul>
 800cef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cefa:	e7c4      	b.n	800ce86 <_dtoa_r+0x546>
 800cefc:	0800f3d8 	.word	0x0800f3d8
 800cf00:	0800f3b0 	.word	0x0800f3b0
 800cf04:	3ff00000 	.word	0x3ff00000
 800cf08:	40240000 	.word	0x40240000
 800cf0c:	401c0000 	.word	0x401c0000
 800cf10:	40140000 	.word	0x40140000
 800cf14:	3fe00000 	.word	0x3fe00000
 800cf18:	4631      	mov	r1, r6
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	f7f3 fb6c 	bl	80005f8 <__aeabi_dmul>
 800cf20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cf24:	9415      	str	r4, [sp, #84]	@ 0x54
 800cf26:	4656      	mov	r6, sl
 800cf28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf2c:	f7f3 fe14 	bl	8000b58 <__aeabi_d2iz>
 800cf30:	4605      	mov	r5, r0
 800cf32:	f7f3 faf7 	bl	8000524 <__aeabi_i2d>
 800cf36:	4602      	mov	r2, r0
 800cf38:	460b      	mov	r3, r1
 800cf3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf3e:	f7f3 f9a3 	bl	8000288 <__aeabi_dsub>
 800cf42:	3530      	adds	r5, #48	@ 0x30
 800cf44:	f806 5b01 	strb.w	r5, [r6], #1
 800cf48:	4602      	mov	r2, r0
 800cf4a:	460b      	mov	r3, r1
 800cf4c:	42a6      	cmp	r6, r4
 800cf4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cf52:	f04f 0200 	mov.w	r2, #0
 800cf56:	d124      	bne.n	800cfa2 <_dtoa_r+0x662>
 800cf58:	4bac      	ldr	r3, [pc, #688]	@ (800d20c <_dtoa_r+0x8cc>)
 800cf5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cf5e:	f7f3 f995 	bl	800028c <__adddf3>
 800cf62:	4602      	mov	r2, r0
 800cf64:	460b      	mov	r3, r1
 800cf66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf6a:	f7f3 fdd5 	bl	8000b18 <__aeabi_dcmpgt>
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	d145      	bne.n	800cffe <_dtoa_r+0x6be>
 800cf72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cf76:	49a5      	ldr	r1, [pc, #660]	@ (800d20c <_dtoa_r+0x8cc>)
 800cf78:	2000      	movs	r0, #0
 800cf7a:	f7f3 f985 	bl	8000288 <__aeabi_dsub>
 800cf7e:	4602      	mov	r2, r0
 800cf80:	460b      	mov	r3, r1
 800cf82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf86:	f7f3 fda9 	bl	8000adc <__aeabi_dcmplt>
 800cf8a:	2800      	cmp	r0, #0
 800cf8c:	f43f aef5 	beq.w	800cd7a <_dtoa_r+0x43a>
 800cf90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cf92:	1e73      	subs	r3, r6, #1
 800cf94:	9315      	str	r3, [sp, #84]	@ 0x54
 800cf96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cf9a:	2b30      	cmp	r3, #48	@ 0x30
 800cf9c:	d0f8      	beq.n	800cf90 <_dtoa_r+0x650>
 800cf9e:	9f04      	ldr	r7, [sp, #16]
 800cfa0:	e73e      	b.n	800ce20 <_dtoa_r+0x4e0>
 800cfa2:	4b9b      	ldr	r3, [pc, #620]	@ (800d210 <_dtoa_r+0x8d0>)
 800cfa4:	f7f3 fb28 	bl	80005f8 <__aeabi_dmul>
 800cfa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfac:	e7bc      	b.n	800cf28 <_dtoa_r+0x5e8>
 800cfae:	d10c      	bne.n	800cfca <_dtoa_r+0x68a>
 800cfb0:	4b98      	ldr	r3, [pc, #608]	@ (800d214 <_dtoa_r+0x8d4>)
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cfb8:	f7f3 fb1e 	bl	80005f8 <__aeabi_dmul>
 800cfbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cfc0:	f7f3 fda0 	bl	8000b04 <__aeabi_dcmpge>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	f000 8157 	beq.w	800d278 <_dtoa_r+0x938>
 800cfca:	2400      	movs	r4, #0
 800cfcc:	4625      	mov	r5, r4
 800cfce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfd0:	43db      	mvns	r3, r3
 800cfd2:	9304      	str	r3, [sp, #16]
 800cfd4:	4656      	mov	r6, sl
 800cfd6:	2700      	movs	r7, #0
 800cfd8:	4621      	mov	r1, r4
 800cfda:	4658      	mov	r0, fp
 800cfdc:	f000 fbb4 	bl	800d748 <_Bfree>
 800cfe0:	2d00      	cmp	r5, #0
 800cfe2:	d0dc      	beq.n	800cf9e <_dtoa_r+0x65e>
 800cfe4:	b12f      	cbz	r7, 800cff2 <_dtoa_r+0x6b2>
 800cfe6:	42af      	cmp	r7, r5
 800cfe8:	d003      	beq.n	800cff2 <_dtoa_r+0x6b2>
 800cfea:	4639      	mov	r1, r7
 800cfec:	4658      	mov	r0, fp
 800cfee:	f000 fbab 	bl	800d748 <_Bfree>
 800cff2:	4629      	mov	r1, r5
 800cff4:	4658      	mov	r0, fp
 800cff6:	f000 fba7 	bl	800d748 <_Bfree>
 800cffa:	e7d0      	b.n	800cf9e <_dtoa_r+0x65e>
 800cffc:	9704      	str	r7, [sp, #16]
 800cffe:	4633      	mov	r3, r6
 800d000:	461e      	mov	r6, r3
 800d002:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d006:	2a39      	cmp	r2, #57	@ 0x39
 800d008:	d107      	bne.n	800d01a <_dtoa_r+0x6da>
 800d00a:	459a      	cmp	sl, r3
 800d00c:	d1f8      	bne.n	800d000 <_dtoa_r+0x6c0>
 800d00e:	9a04      	ldr	r2, [sp, #16]
 800d010:	3201      	adds	r2, #1
 800d012:	9204      	str	r2, [sp, #16]
 800d014:	2230      	movs	r2, #48	@ 0x30
 800d016:	f88a 2000 	strb.w	r2, [sl]
 800d01a:	781a      	ldrb	r2, [r3, #0]
 800d01c:	3201      	adds	r2, #1
 800d01e:	701a      	strb	r2, [r3, #0]
 800d020:	e7bd      	b.n	800cf9e <_dtoa_r+0x65e>
 800d022:	4b7b      	ldr	r3, [pc, #492]	@ (800d210 <_dtoa_r+0x8d0>)
 800d024:	2200      	movs	r2, #0
 800d026:	f7f3 fae7 	bl	80005f8 <__aeabi_dmul>
 800d02a:	2200      	movs	r2, #0
 800d02c:	2300      	movs	r3, #0
 800d02e:	4604      	mov	r4, r0
 800d030:	460d      	mov	r5, r1
 800d032:	f7f3 fd49 	bl	8000ac8 <__aeabi_dcmpeq>
 800d036:	2800      	cmp	r0, #0
 800d038:	f43f aebb 	beq.w	800cdb2 <_dtoa_r+0x472>
 800d03c:	e6f0      	b.n	800ce20 <_dtoa_r+0x4e0>
 800d03e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d040:	2a00      	cmp	r2, #0
 800d042:	f000 80db 	beq.w	800d1fc <_dtoa_r+0x8bc>
 800d046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d048:	2a01      	cmp	r2, #1
 800d04a:	f300 80bf 	bgt.w	800d1cc <_dtoa_r+0x88c>
 800d04e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d050:	2a00      	cmp	r2, #0
 800d052:	f000 80b7 	beq.w	800d1c4 <_dtoa_r+0x884>
 800d056:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d05a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d05c:	4646      	mov	r6, r8
 800d05e:	9a08      	ldr	r2, [sp, #32]
 800d060:	2101      	movs	r1, #1
 800d062:	441a      	add	r2, r3
 800d064:	4658      	mov	r0, fp
 800d066:	4498      	add	r8, r3
 800d068:	9208      	str	r2, [sp, #32]
 800d06a:	f000 fc21 	bl	800d8b0 <__i2b>
 800d06e:	4605      	mov	r5, r0
 800d070:	b15e      	cbz	r6, 800d08a <_dtoa_r+0x74a>
 800d072:	9b08      	ldr	r3, [sp, #32]
 800d074:	2b00      	cmp	r3, #0
 800d076:	dd08      	ble.n	800d08a <_dtoa_r+0x74a>
 800d078:	42b3      	cmp	r3, r6
 800d07a:	9a08      	ldr	r2, [sp, #32]
 800d07c:	bfa8      	it	ge
 800d07e:	4633      	movge	r3, r6
 800d080:	eba8 0803 	sub.w	r8, r8, r3
 800d084:	1af6      	subs	r6, r6, r3
 800d086:	1ad3      	subs	r3, r2, r3
 800d088:	9308      	str	r3, [sp, #32]
 800d08a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d08c:	b1f3      	cbz	r3, 800d0cc <_dtoa_r+0x78c>
 800d08e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d090:	2b00      	cmp	r3, #0
 800d092:	f000 80b7 	beq.w	800d204 <_dtoa_r+0x8c4>
 800d096:	b18c      	cbz	r4, 800d0bc <_dtoa_r+0x77c>
 800d098:	4629      	mov	r1, r5
 800d09a:	4622      	mov	r2, r4
 800d09c:	4658      	mov	r0, fp
 800d09e:	f000 fcc7 	bl	800da30 <__pow5mult>
 800d0a2:	464a      	mov	r2, r9
 800d0a4:	4601      	mov	r1, r0
 800d0a6:	4605      	mov	r5, r0
 800d0a8:	4658      	mov	r0, fp
 800d0aa:	f000 fc17 	bl	800d8dc <__multiply>
 800d0ae:	4649      	mov	r1, r9
 800d0b0:	9004      	str	r0, [sp, #16]
 800d0b2:	4658      	mov	r0, fp
 800d0b4:	f000 fb48 	bl	800d748 <_Bfree>
 800d0b8:	9b04      	ldr	r3, [sp, #16]
 800d0ba:	4699      	mov	r9, r3
 800d0bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0be:	1b1a      	subs	r2, r3, r4
 800d0c0:	d004      	beq.n	800d0cc <_dtoa_r+0x78c>
 800d0c2:	4649      	mov	r1, r9
 800d0c4:	4658      	mov	r0, fp
 800d0c6:	f000 fcb3 	bl	800da30 <__pow5mult>
 800d0ca:	4681      	mov	r9, r0
 800d0cc:	2101      	movs	r1, #1
 800d0ce:	4658      	mov	r0, fp
 800d0d0:	f000 fbee 	bl	800d8b0 <__i2b>
 800d0d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0d6:	4604      	mov	r4, r0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	f000 81cf 	beq.w	800d47c <_dtoa_r+0xb3c>
 800d0de:	461a      	mov	r2, r3
 800d0e0:	4601      	mov	r1, r0
 800d0e2:	4658      	mov	r0, fp
 800d0e4:	f000 fca4 	bl	800da30 <__pow5mult>
 800d0e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	4604      	mov	r4, r0
 800d0ee:	f300 8095 	bgt.w	800d21c <_dtoa_r+0x8dc>
 800d0f2:	9b02      	ldr	r3, [sp, #8]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f040 8087 	bne.w	800d208 <_dtoa_r+0x8c8>
 800d0fa:	9b03      	ldr	r3, [sp, #12]
 800d0fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d100:	2b00      	cmp	r3, #0
 800d102:	f040 8089 	bne.w	800d218 <_dtoa_r+0x8d8>
 800d106:	9b03      	ldr	r3, [sp, #12]
 800d108:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d10c:	0d1b      	lsrs	r3, r3, #20
 800d10e:	051b      	lsls	r3, r3, #20
 800d110:	b12b      	cbz	r3, 800d11e <_dtoa_r+0x7de>
 800d112:	9b08      	ldr	r3, [sp, #32]
 800d114:	3301      	adds	r3, #1
 800d116:	9308      	str	r3, [sp, #32]
 800d118:	f108 0801 	add.w	r8, r8, #1
 800d11c:	2301      	movs	r3, #1
 800d11e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d122:	2b00      	cmp	r3, #0
 800d124:	f000 81b0 	beq.w	800d488 <_dtoa_r+0xb48>
 800d128:	6923      	ldr	r3, [r4, #16]
 800d12a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d12e:	6918      	ldr	r0, [r3, #16]
 800d130:	f000 fb72 	bl	800d818 <__hi0bits>
 800d134:	f1c0 0020 	rsb	r0, r0, #32
 800d138:	9b08      	ldr	r3, [sp, #32]
 800d13a:	4418      	add	r0, r3
 800d13c:	f010 001f 	ands.w	r0, r0, #31
 800d140:	d077      	beq.n	800d232 <_dtoa_r+0x8f2>
 800d142:	f1c0 0320 	rsb	r3, r0, #32
 800d146:	2b04      	cmp	r3, #4
 800d148:	dd6b      	ble.n	800d222 <_dtoa_r+0x8e2>
 800d14a:	9b08      	ldr	r3, [sp, #32]
 800d14c:	f1c0 001c 	rsb	r0, r0, #28
 800d150:	4403      	add	r3, r0
 800d152:	4480      	add	r8, r0
 800d154:	4406      	add	r6, r0
 800d156:	9308      	str	r3, [sp, #32]
 800d158:	f1b8 0f00 	cmp.w	r8, #0
 800d15c:	dd05      	ble.n	800d16a <_dtoa_r+0x82a>
 800d15e:	4649      	mov	r1, r9
 800d160:	4642      	mov	r2, r8
 800d162:	4658      	mov	r0, fp
 800d164:	f000 fcbe 	bl	800dae4 <__lshift>
 800d168:	4681      	mov	r9, r0
 800d16a:	9b08      	ldr	r3, [sp, #32]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	dd05      	ble.n	800d17c <_dtoa_r+0x83c>
 800d170:	4621      	mov	r1, r4
 800d172:	461a      	mov	r2, r3
 800d174:	4658      	mov	r0, fp
 800d176:	f000 fcb5 	bl	800dae4 <__lshift>
 800d17a:	4604      	mov	r4, r0
 800d17c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d059      	beq.n	800d236 <_dtoa_r+0x8f6>
 800d182:	4621      	mov	r1, r4
 800d184:	4648      	mov	r0, r9
 800d186:	f000 fd19 	bl	800dbbc <__mcmp>
 800d18a:	2800      	cmp	r0, #0
 800d18c:	da53      	bge.n	800d236 <_dtoa_r+0x8f6>
 800d18e:	1e7b      	subs	r3, r7, #1
 800d190:	9304      	str	r3, [sp, #16]
 800d192:	4649      	mov	r1, r9
 800d194:	2300      	movs	r3, #0
 800d196:	220a      	movs	r2, #10
 800d198:	4658      	mov	r0, fp
 800d19a:	f000 faf7 	bl	800d78c <__multadd>
 800d19e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d1a0:	4681      	mov	r9, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	f000 8172 	beq.w	800d48c <_dtoa_r+0xb4c>
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	4629      	mov	r1, r5
 800d1ac:	220a      	movs	r2, #10
 800d1ae:	4658      	mov	r0, fp
 800d1b0:	f000 faec 	bl	800d78c <__multadd>
 800d1b4:	9b00      	ldr	r3, [sp, #0]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	4605      	mov	r5, r0
 800d1ba:	dc67      	bgt.n	800d28c <_dtoa_r+0x94c>
 800d1bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1be:	2b02      	cmp	r3, #2
 800d1c0:	dc41      	bgt.n	800d246 <_dtoa_r+0x906>
 800d1c2:	e063      	b.n	800d28c <_dtoa_r+0x94c>
 800d1c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d1c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d1ca:	e746      	b.n	800d05a <_dtoa_r+0x71a>
 800d1cc:	9b07      	ldr	r3, [sp, #28]
 800d1ce:	1e5c      	subs	r4, r3, #1
 800d1d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1d2:	42a3      	cmp	r3, r4
 800d1d4:	bfbf      	itttt	lt
 800d1d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d1d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d1da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d1dc:	1ae3      	sublt	r3, r4, r3
 800d1de:	bfb4      	ite	lt
 800d1e0:	18d2      	addlt	r2, r2, r3
 800d1e2:	1b1c      	subge	r4, r3, r4
 800d1e4:	9b07      	ldr	r3, [sp, #28]
 800d1e6:	bfbc      	itt	lt
 800d1e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d1ea:	2400      	movlt	r4, #0
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	bfb5      	itete	lt
 800d1f0:	eba8 0603 	sublt.w	r6, r8, r3
 800d1f4:	9b07      	ldrge	r3, [sp, #28]
 800d1f6:	2300      	movlt	r3, #0
 800d1f8:	4646      	movge	r6, r8
 800d1fa:	e730      	b.n	800d05e <_dtoa_r+0x71e>
 800d1fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d1fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d200:	4646      	mov	r6, r8
 800d202:	e735      	b.n	800d070 <_dtoa_r+0x730>
 800d204:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d206:	e75c      	b.n	800d0c2 <_dtoa_r+0x782>
 800d208:	2300      	movs	r3, #0
 800d20a:	e788      	b.n	800d11e <_dtoa_r+0x7de>
 800d20c:	3fe00000 	.word	0x3fe00000
 800d210:	40240000 	.word	0x40240000
 800d214:	40140000 	.word	0x40140000
 800d218:	9b02      	ldr	r3, [sp, #8]
 800d21a:	e780      	b.n	800d11e <_dtoa_r+0x7de>
 800d21c:	2300      	movs	r3, #0
 800d21e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d220:	e782      	b.n	800d128 <_dtoa_r+0x7e8>
 800d222:	d099      	beq.n	800d158 <_dtoa_r+0x818>
 800d224:	9a08      	ldr	r2, [sp, #32]
 800d226:	331c      	adds	r3, #28
 800d228:	441a      	add	r2, r3
 800d22a:	4498      	add	r8, r3
 800d22c:	441e      	add	r6, r3
 800d22e:	9208      	str	r2, [sp, #32]
 800d230:	e792      	b.n	800d158 <_dtoa_r+0x818>
 800d232:	4603      	mov	r3, r0
 800d234:	e7f6      	b.n	800d224 <_dtoa_r+0x8e4>
 800d236:	9b07      	ldr	r3, [sp, #28]
 800d238:	9704      	str	r7, [sp, #16]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	dc20      	bgt.n	800d280 <_dtoa_r+0x940>
 800d23e:	9300      	str	r3, [sp, #0]
 800d240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d242:	2b02      	cmp	r3, #2
 800d244:	dd1e      	ble.n	800d284 <_dtoa_r+0x944>
 800d246:	9b00      	ldr	r3, [sp, #0]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f47f aec0 	bne.w	800cfce <_dtoa_r+0x68e>
 800d24e:	4621      	mov	r1, r4
 800d250:	2205      	movs	r2, #5
 800d252:	4658      	mov	r0, fp
 800d254:	f000 fa9a 	bl	800d78c <__multadd>
 800d258:	4601      	mov	r1, r0
 800d25a:	4604      	mov	r4, r0
 800d25c:	4648      	mov	r0, r9
 800d25e:	f000 fcad 	bl	800dbbc <__mcmp>
 800d262:	2800      	cmp	r0, #0
 800d264:	f77f aeb3 	ble.w	800cfce <_dtoa_r+0x68e>
 800d268:	4656      	mov	r6, sl
 800d26a:	2331      	movs	r3, #49	@ 0x31
 800d26c:	f806 3b01 	strb.w	r3, [r6], #1
 800d270:	9b04      	ldr	r3, [sp, #16]
 800d272:	3301      	adds	r3, #1
 800d274:	9304      	str	r3, [sp, #16]
 800d276:	e6ae      	b.n	800cfd6 <_dtoa_r+0x696>
 800d278:	9c07      	ldr	r4, [sp, #28]
 800d27a:	9704      	str	r7, [sp, #16]
 800d27c:	4625      	mov	r5, r4
 800d27e:	e7f3      	b.n	800d268 <_dtoa_r+0x928>
 800d280:	9b07      	ldr	r3, [sp, #28]
 800d282:	9300      	str	r3, [sp, #0]
 800d284:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d286:	2b00      	cmp	r3, #0
 800d288:	f000 8104 	beq.w	800d494 <_dtoa_r+0xb54>
 800d28c:	2e00      	cmp	r6, #0
 800d28e:	dd05      	ble.n	800d29c <_dtoa_r+0x95c>
 800d290:	4629      	mov	r1, r5
 800d292:	4632      	mov	r2, r6
 800d294:	4658      	mov	r0, fp
 800d296:	f000 fc25 	bl	800dae4 <__lshift>
 800d29a:	4605      	mov	r5, r0
 800d29c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d05a      	beq.n	800d358 <_dtoa_r+0xa18>
 800d2a2:	6869      	ldr	r1, [r5, #4]
 800d2a4:	4658      	mov	r0, fp
 800d2a6:	f000 fa0f 	bl	800d6c8 <_Balloc>
 800d2aa:	4606      	mov	r6, r0
 800d2ac:	b928      	cbnz	r0, 800d2ba <_dtoa_r+0x97a>
 800d2ae:	4b84      	ldr	r3, [pc, #528]	@ (800d4c0 <_dtoa_r+0xb80>)
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d2b6:	f7ff bb5a 	b.w	800c96e <_dtoa_r+0x2e>
 800d2ba:	692a      	ldr	r2, [r5, #16]
 800d2bc:	3202      	adds	r2, #2
 800d2be:	0092      	lsls	r2, r2, #2
 800d2c0:	f105 010c 	add.w	r1, r5, #12
 800d2c4:	300c      	adds	r0, #12
 800d2c6:	f000 ffaf 	bl	800e228 <memcpy>
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	4631      	mov	r1, r6
 800d2ce:	4658      	mov	r0, fp
 800d2d0:	f000 fc08 	bl	800dae4 <__lshift>
 800d2d4:	f10a 0301 	add.w	r3, sl, #1
 800d2d8:	9307      	str	r3, [sp, #28]
 800d2da:	9b00      	ldr	r3, [sp, #0]
 800d2dc:	4453      	add	r3, sl
 800d2de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2e0:	9b02      	ldr	r3, [sp, #8]
 800d2e2:	f003 0301 	and.w	r3, r3, #1
 800d2e6:	462f      	mov	r7, r5
 800d2e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2ea:	4605      	mov	r5, r0
 800d2ec:	9b07      	ldr	r3, [sp, #28]
 800d2ee:	4621      	mov	r1, r4
 800d2f0:	3b01      	subs	r3, #1
 800d2f2:	4648      	mov	r0, r9
 800d2f4:	9300      	str	r3, [sp, #0]
 800d2f6:	f7ff fa98 	bl	800c82a <quorem>
 800d2fa:	4639      	mov	r1, r7
 800d2fc:	9002      	str	r0, [sp, #8]
 800d2fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d302:	4648      	mov	r0, r9
 800d304:	f000 fc5a 	bl	800dbbc <__mcmp>
 800d308:	462a      	mov	r2, r5
 800d30a:	9008      	str	r0, [sp, #32]
 800d30c:	4621      	mov	r1, r4
 800d30e:	4658      	mov	r0, fp
 800d310:	f000 fc70 	bl	800dbf4 <__mdiff>
 800d314:	68c2      	ldr	r2, [r0, #12]
 800d316:	4606      	mov	r6, r0
 800d318:	bb02      	cbnz	r2, 800d35c <_dtoa_r+0xa1c>
 800d31a:	4601      	mov	r1, r0
 800d31c:	4648      	mov	r0, r9
 800d31e:	f000 fc4d 	bl	800dbbc <__mcmp>
 800d322:	4602      	mov	r2, r0
 800d324:	4631      	mov	r1, r6
 800d326:	4658      	mov	r0, fp
 800d328:	920e      	str	r2, [sp, #56]	@ 0x38
 800d32a:	f000 fa0d 	bl	800d748 <_Bfree>
 800d32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d330:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d332:	9e07      	ldr	r6, [sp, #28]
 800d334:	ea43 0102 	orr.w	r1, r3, r2
 800d338:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d33a:	4319      	orrs	r1, r3
 800d33c:	d110      	bne.n	800d360 <_dtoa_r+0xa20>
 800d33e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d342:	d029      	beq.n	800d398 <_dtoa_r+0xa58>
 800d344:	9b08      	ldr	r3, [sp, #32]
 800d346:	2b00      	cmp	r3, #0
 800d348:	dd02      	ble.n	800d350 <_dtoa_r+0xa10>
 800d34a:	9b02      	ldr	r3, [sp, #8]
 800d34c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d350:	9b00      	ldr	r3, [sp, #0]
 800d352:	f883 8000 	strb.w	r8, [r3]
 800d356:	e63f      	b.n	800cfd8 <_dtoa_r+0x698>
 800d358:	4628      	mov	r0, r5
 800d35a:	e7bb      	b.n	800d2d4 <_dtoa_r+0x994>
 800d35c:	2201      	movs	r2, #1
 800d35e:	e7e1      	b.n	800d324 <_dtoa_r+0x9e4>
 800d360:	9b08      	ldr	r3, [sp, #32]
 800d362:	2b00      	cmp	r3, #0
 800d364:	db04      	blt.n	800d370 <_dtoa_r+0xa30>
 800d366:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d368:	430b      	orrs	r3, r1
 800d36a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d36c:	430b      	orrs	r3, r1
 800d36e:	d120      	bne.n	800d3b2 <_dtoa_r+0xa72>
 800d370:	2a00      	cmp	r2, #0
 800d372:	dded      	ble.n	800d350 <_dtoa_r+0xa10>
 800d374:	4649      	mov	r1, r9
 800d376:	2201      	movs	r2, #1
 800d378:	4658      	mov	r0, fp
 800d37a:	f000 fbb3 	bl	800dae4 <__lshift>
 800d37e:	4621      	mov	r1, r4
 800d380:	4681      	mov	r9, r0
 800d382:	f000 fc1b 	bl	800dbbc <__mcmp>
 800d386:	2800      	cmp	r0, #0
 800d388:	dc03      	bgt.n	800d392 <_dtoa_r+0xa52>
 800d38a:	d1e1      	bne.n	800d350 <_dtoa_r+0xa10>
 800d38c:	f018 0f01 	tst.w	r8, #1
 800d390:	d0de      	beq.n	800d350 <_dtoa_r+0xa10>
 800d392:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d396:	d1d8      	bne.n	800d34a <_dtoa_r+0xa0a>
 800d398:	9a00      	ldr	r2, [sp, #0]
 800d39a:	2339      	movs	r3, #57	@ 0x39
 800d39c:	7013      	strb	r3, [r2, #0]
 800d39e:	4633      	mov	r3, r6
 800d3a0:	461e      	mov	r6, r3
 800d3a2:	3b01      	subs	r3, #1
 800d3a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d3a8:	2a39      	cmp	r2, #57	@ 0x39
 800d3aa:	d052      	beq.n	800d452 <_dtoa_r+0xb12>
 800d3ac:	3201      	adds	r2, #1
 800d3ae:	701a      	strb	r2, [r3, #0]
 800d3b0:	e612      	b.n	800cfd8 <_dtoa_r+0x698>
 800d3b2:	2a00      	cmp	r2, #0
 800d3b4:	dd07      	ble.n	800d3c6 <_dtoa_r+0xa86>
 800d3b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d3ba:	d0ed      	beq.n	800d398 <_dtoa_r+0xa58>
 800d3bc:	9a00      	ldr	r2, [sp, #0]
 800d3be:	f108 0301 	add.w	r3, r8, #1
 800d3c2:	7013      	strb	r3, [r2, #0]
 800d3c4:	e608      	b.n	800cfd8 <_dtoa_r+0x698>
 800d3c6:	9b07      	ldr	r3, [sp, #28]
 800d3c8:	9a07      	ldr	r2, [sp, #28]
 800d3ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d3ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d028      	beq.n	800d426 <_dtoa_r+0xae6>
 800d3d4:	4649      	mov	r1, r9
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	220a      	movs	r2, #10
 800d3da:	4658      	mov	r0, fp
 800d3dc:	f000 f9d6 	bl	800d78c <__multadd>
 800d3e0:	42af      	cmp	r7, r5
 800d3e2:	4681      	mov	r9, r0
 800d3e4:	f04f 0300 	mov.w	r3, #0
 800d3e8:	f04f 020a 	mov.w	r2, #10
 800d3ec:	4639      	mov	r1, r7
 800d3ee:	4658      	mov	r0, fp
 800d3f0:	d107      	bne.n	800d402 <_dtoa_r+0xac2>
 800d3f2:	f000 f9cb 	bl	800d78c <__multadd>
 800d3f6:	4607      	mov	r7, r0
 800d3f8:	4605      	mov	r5, r0
 800d3fa:	9b07      	ldr	r3, [sp, #28]
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	9307      	str	r3, [sp, #28]
 800d400:	e774      	b.n	800d2ec <_dtoa_r+0x9ac>
 800d402:	f000 f9c3 	bl	800d78c <__multadd>
 800d406:	4629      	mov	r1, r5
 800d408:	4607      	mov	r7, r0
 800d40a:	2300      	movs	r3, #0
 800d40c:	220a      	movs	r2, #10
 800d40e:	4658      	mov	r0, fp
 800d410:	f000 f9bc 	bl	800d78c <__multadd>
 800d414:	4605      	mov	r5, r0
 800d416:	e7f0      	b.n	800d3fa <_dtoa_r+0xaba>
 800d418:	9b00      	ldr	r3, [sp, #0]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	bfcc      	ite	gt
 800d41e:	461e      	movgt	r6, r3
 800d420:	2601      	movle	r6, #1
 800d422:	4456      	add	r6, sl
 800d424:	2700      	movs	r7, #0
 800d426:	4649      	mov	r1, r9
 800d428:	2201      	movs	r2, #1
 800d42a:	4658      	mov	r0, fp
 800d42c:	f000 fb5a 	bl	800dae4 <__lshift>
 800d430:	4621      	mov	r1, r4
 800d432:	4681      	mov	r9, r0
 800d434:	f000 fbc2 	bl	800dbbc <__mcmp>
 800d438:	2800      	cmp	r0, #0
 800d43a:	dcb0      	bgt.n	800d39e <_dtoa_r+0xa5e>
 800d43c:	d102      	bne.n	800d444 <_dtoa_r+0xb04>
 800d43e:	f018 0f01 	tst.w	r8, #1
 800d442:	d1ac      	bne.n	800d39e <_dtoa_r+0xa5e>
 800d444:	4633      	mov	r3, r6
 800d446:	461e      	mov	r6, r3
 800d448:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d44c:	2a30      	cmp	r2, #48	@ 0x30
 800d44e:	d0fa      	beq.n	800d446 <_dtoa_r+0xb06>
 800d450:	e5c2      	b.n	800cfd8 <_dtoa_r+0x698>
 800d452:	459a      	cmp	sl, r3
 800d454:	d1a4      	bne.n	800d3a0 <_dtoa_r+0xa60>
 800d456:	9b04      	ldr	r3, [sp, #16]
 800d458:	3301      	adds	r3, #1
 800d45a:	9304      	str	r3, [sp, #16]
 800d45c:	2331      	movs	r3, #49	@ 0x31
 800d45e:	f88a 3000 	strb.w	r3, [sl]
 800d462:	e5b9      	b.n	800cfd8 <_dtoa_r+0x698>
 800d464:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d466:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d4c4 <_dtoa_r+0xb84>
 800d46a:	b11b      	cbz	r3, 800d474 <_dtoa_r+0xb34>
 800d46c:	f10a 0308 	add.w	r3, sl, #8
 800d470:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d472:	6013      	str	r3, [r2, #0]
 800d474:	4650      	mov	r0, sl
 800d476:	b019      	add	sp, #100	@ 0x64
 800d478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d47c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d47e:	2b01      	cmp	r3, #1
 800d480:	f77f ae37 	ble.w	800d0f2 <_dtoa_r+0x7b2>
 800d484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d486:	930a      	str	r3, [sp, #40]	@ 0x28
 800d488:	2001      	movs	r0, #1
 800d48a:	e655      	b.n	800d138 <_dtoa_r+0x7f8>
 800d48c:	9b00      	ldr	r3, [sp, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	f77f aed6 	ble.w	800d240 <_dtoa_r+0x900>
 800d494:	4656      	mov	r6, sl
 800d496:	4621      	mov	r1, r4
 800d498:	4648      	mov	r0, r9
 800d49a:	f7ff f9c6 	bl	800c82a <quorem>
 800d49e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d4a2:	f806 8b01 	strb.w	r8, [r6], #1
 800d4a6:	9b00      	ldr	r3, [sp, #0]
 800d4a8:	eba6 020a 	sub.w	r2, r6, sl
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	ddb3      	ble.n	800d418 <_dtoa_r+0xad8>
 800d4b0:	4649      	mov	r1, r9
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	220a      	movs	r2, #10
 800d4b6:	4658      	mov	r0, fp
 800d4b8:	f000 f968 	bl	800d78c <__multadd>
 800d4bc:	4681      	mov	r9, r0
 800d4be:	e7ea      	b.n	800d496 <_dtoa_r+0xb56>
 800d4c0:	0800f338 	.word	0x0800f338
 800d4c4:	0800f2bc 	.word	0x0800f2bc

0800d4c8 <_free_r>:
 800d4c8:	b538      	push	{r3, r4, r5, lr}
 800d4ca:	4605      	mov	r5, r0
 800d4cc:	2900      	cmp	r1, #0
 800d4ce:	d041      	beq.n	800d554 <_free_r+0x8c>
 800d4d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4d4:	1f0c      	subs	r4, r1, #4
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	bfb8      	it	lt
 800d4da:	18e4      	addlt	r4, r4, r3
 800d4dc:	f000 f8e8 	bl	800d6b0 <__malloc_lock>
 800d4e0:	4a1d      	ldr	r2, [pc, #116]	@ (800d558 <_free_r+0x90>)
 800d4e2:	6813      	ldr	r3, [r2, #0]
 800d4e4:	b933      	cbnz	r3, 800d4f4 <_free_r+0x2c>
 800d4e6:	6063      	str	r3, [r4, #4]
 800d4e8:	6014      	str	r4, [r2, #0]
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4f0:	f000 b8e4 	b.w	800d6bc <__malloc_unlock>
 800d4f4:	42a3      	cmp	r3, r4
 800d4f6:	d908      	bls.n	800d50a <_free_r+0x42>
 800d4f8:	6820      	ldr	r0, [r4, #0]
 800d4fa:	1821      	adds	r1, r4, r0
 800d4fc:	428b      	cmp	r3, r1
 800d4fe:	bf01      	itttt	eq
 800d500:	6819      	ldreq	r1, [r3, #0]
 800d502:	685b      	ldreq	r3, [r3, #4]
 800d504:	1809      	addeq	r1, r1, r0
 800d506:	6021      	streq	r1, [r4, #0]
 800d508:	e7ed      	b.n	800d4e6 <_free_r+0x1e>
 800d50a:	461a      	mov	r2, r3
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	b10b      	cbz	r3, 800d514 <_free_r+0x4c>
 800d510:	42a3      	cmp	r3, r4
 800d512:	d9fa      	bls.n	800d50a <_free_r+0x42>
 800d514:	6811      	ldr	r1, [r2, #0]
 800d516:	1850      	adds	r0, r2, r1
 800d518:	42a0      	cmp	r0, r4
 800d51a:	d10b      	bne.n	800d534 <_free_r+0x6c>
 800d51c:	6820      	ldr	r0, [r4, #0]
 800d51e:	4401      	add	r1, r0
 800d520:	1850      	adds	r0, r2, r1
 800d522:	4283      	cmp	r3, r0
 800d524:	6011      	str	r1, [r2, #0]
 800d526:	d1e0      	bne.n	800d4ea <_free_r+0x22>
 800d528:	6818      	ldr	r0, [r3, #0]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	6053      	str	r3, [r2, #4]
 800d52e:	4408      	add	r0, r1
 800d530:	6010      	str	r0, [r2, #0]
 800d532:	e7da      	b.n	800d4ea <_free_r+0x22>
 800d534:	d902      	bls.n	800d53c <_free_r+0x74>
 800d536:	230c      	movs	r3, #12
 800d538:	602b      	str	r3, [r5, #0]
 800d53a:	e7d6      	b.n	800d4ea <_free_r+0x22>
 800d53c:	6820      	ldr	r0, [r4, #0]
 800d53e:	1821      	adds	r1, r4, r0
 800d540:	428b      	cmp	r3, r1
 800d542:	bf04      	itt	eq
 800d544:	6819      	ldreq	r1, [r3, #0]
 800d546:	685b      	ldreq	r3, [r3, #4]
 800d548:	6063      	str	r3, [r4, #4]
 800d54a:	bf04      	itt	eq
 800d54c:	1809      	addeq	r1, r1, r0
 800d54e:	6021      	streq	r1, [r4, #0]
 800d550:	6054      	str	r4, [r2, #4]
 800d552:	e7ca      	b.n	800d4ea <_free_r+0x22>
 800d554:	bd38      	pop	{r3, r4, r5, pc}
 800d556:	bf00      	nop
 800d558:	200023a0 	.word	0x200023a0

0800d55c <malloc>:
 800d55c:	4b02      	ldr	r3, [pc, #8]	@ (800d568 <malloc+0xc>)
 800d55e:	4601      	mov	r1, r0
 800d560:	6818      	ldr	r0, [r3, #0]
 800d562:	f000 b825 	b.w	800d5b0 <_malloc_r>
 800d566:	bf00      	nop
 800d568:	2000010c 	.word	0x2000010c

0800d56c <sbrk_aligned>:
 800d56c:	b570      	push	{r4, r5, r6, lr}
 800d56e:	4e0f      	ldr	r6, [pc, #60]	@ (800d5ac <sbrk_aligned+0x40>)
 800d570:	460c      	mov	r4, r1
 800d572:	6831      	ldr	r1, [r6, #0]
 800d574:	4605      	mov	r5, r0
 800d576:	b911      	cbnz	r1, 800d57e <sbrk_aligned+0x12>
 800d578:	f000 fe46 	bl	800e208 <_sbrk_r>
 800d57c:	6030      	str	r0, [r6, #0]
 800d57e:	4621      	mov	r1, r4
 800d580:	4628      	mov	r0, r5
 800d582:	f000 fe41 	bl	800e208 <_sbrk_r>
 800d586:	1c43      	adds	r3, r0, #1
 800d588:	d103      	bne.n	800d592 <sbrk_aligned+0x26>
 800d58a:	f04f 34ff 	mov.w	r4, #4294967295
 800d58e:	4620      	mov	r0, r4
 800d590:	bd70      	pop	{r4, r5, r6, pc}
 800d592:	1cc4      	adds	r4, r0, #3
 800d594:	f024 0403 	bic.w	r4, r4, #3
 800d598:	42a0      	cmp	r0, r4
 800d59a:	d0f8      	beq.n	800d58e <sbrk_aligned+0x22>
 800d59c:	1a21      	subs	r1, r4, r0
 800d59e:	4628      	mov	r0, r5
 800d5a0:	f000 fe32 	bl	800e208 <_sbrk_r>
 800d5a4:	3001      	adds	r0, #1
 800d5a6:	d1f2      	bne.n	800d58e <sbrk_aligned+0x22>
 800d5a8:	e7ef      	b.n	800d58a <sbrk_aligned+0x1e>
 800d5aa:	bf00      	nop
 800d5ac:	2000239c 	.word	0x2000239c

0800d5b0 <_malloc_r>:
 800d5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5b4:	1ccd      	adds	r5, r1, #3
 800d5b6:	f025 0503 	bic.w	r5, r5, #3
 800d5ba:	3508      	adds	r5, #8
 800d5bc:	2d0c      	cmp	r5, #12
 800d5be:	bf38      	it	cc
 800d5c0:	250c      	movcc	r5, #12
 800d5c2:	2d00      	cmp	r5, #0
 800d5c4:	4606      	mov	r6, r0
 800d5c6:	db01      	blt.n	800d5cc <_malloc_r+0x1c>
 800d5c8:	42a9      	cmp	r1, r5
 800d5ca:	d904      	bls.n	800d5d6 <_malloc_r+0x26>
 800d5cc:	230c      	movs	r3, #12
 800d5ce:	6033      	str	r3, [r6, #0]
 800d5d0:	2000      	movs	r0, #0
 800d5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d6ac <_malloc_r+0xfc>
 800d5da:	f000 f869 	bl	800d6b0 <__malloc_lock>
 800d5de:	f8d8 3000 	ldr.w	r3, [r8]
 800d5e2:	461c      	mov	r4, r3
 800d5e4:	bb44      	cbnz	r4, 800d638 <_malloc_r+0x88>
 800d5e6:	4629      	mov	r1, r5
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	f7ff ffbf 	bl	800d56c <sbrk_aligned>
 800d5ee:	1c43      	adds	r3, r0, #1
 800d5f0:	4604      	mov	r4, r0
 800d5f2:	d158      	bne.n	800d6a6 <_malloc_r+0xf6>
 800d5f4:	f8d8 4000 	ldr.w	r4, [r8]
 800d5f8:	4627      	mov	r7, r4
 800d5fa:	2f00      	cmp	r7, #0
 800d5fc:	d143      	bne.n	800d686 <_malloc_r+0xd6>
 800d5fe:	2c00      	cmp	r4, #0
 800d600:	d04b      	beq.n	800d69a <_malloc_r+0xea>
 800d602:	6823      	ldr	r3, [r4, #0]
 800d604:	4639      	mov	r1, r7
 800d606:	4630      	mov	r0, r6
 800d608:	eb04 0903 	add.w	r9, r4, r3
 800d60c:	f000 fdfc 	bl	800e208 <_sbrk_r>
 800d610:	4581      	cmp	r9, r0
 800d612:	d142      	bne.n	800d69a <_malloc_r+0xea>
 800d614:	6821      	ldr	r1, [r4, #0]
 800d616:	1a6d      	subs	r5, r5, r1
 800d618:	4629      	mov	r1, r5
 800d61a:	4630      	mov	r0, r6
 800d61c:	f7ff ffa6 	bl	800d56c <sbrk_aligned>
 800d620:	3001      	adds	r0, #1
 800d622:	d03a      	beq.n	800d69a <_malloc_r+0xea>
 800d624:	6823      	ldr	r3, [r4, #0]
 800d626:	442b      	add	r3, r5
 800d628:	6023      	str	r3, [r4, #0]
 800d62a:	f8d8 3000 	ldr.w	r3, [r8]
 800d62e:	685a      	ldr	r2, [r3, #4]
 800d630:	bb62      	cbnz	r2, 800d68c <_malloc_r+0xdc>
 800d632:	f8c8 7000 	str.w	r7, [r8]
 800d636:	e00f      	b.n	800d658 <_malloc_r+0xa8>
 800d638:	6822      	ldr	r2, [r4, #0]
 800d63a:	1b52      	subs	r2, r2, r5
 800d63c:	d420      	bmi.n	800d680 <_malloc_r+0xd0>
 800d63e:	2a0b      	cmp	r2, #11
 800d640:	d917      	bls.n	800d672 <_malloc_r+0xc2>
 800d642:	1961      	adds	r1, r4, r5
 800d644:	42a3      	cmp	r3, r4
 800d646:	6025      	str	r5, [r4, #0]
 800d648:	bf18      	it	ne
 800d64a:	6059      	strne	r1, [r3, #4]
 800d64c:	6863      	ldr	r3, [r4, #4]
 800d64e:	bf08      	it	eq
 800d650:	f8c8 1000 	streq.w	r1, [r8]
 800d654:	5162      	str	r2, [r4, r5]
 800d656:	604b      	str	r3, [r1, #4]
 800d658:	4630      	mov	r0, r6
 800d65a:	f000 f82f 	bl	800d6bc <__malloc_unlock>
 800d65e:	f104 000b 	add.w	r0, r4, #11
 800d662:	1d23      	adds	r3, r4, #4
 800d664:	f020 0007 	bic.w	r0, r0, #7
 800d668:	1ac2      	subs	r2, r0, r3
 800d66a:	bf1c      	itt	ne
 800d66c:	1a1b      	subne	r3, r3, r0
 800d66e:	50a3      	strne	r3, [r4, r2]
 800d670:	e7af      	b.n	800d5d2 <_malloc_r+0x22>
 800d672:	6862      	ldr	r2, [r4, #4]
 800d674:	42a3      	cmp	r3, r4
 800d676:	bf0c      	ite	eq
 800d678:	f8c8 2000 	streq.w	r2, [r8]
 800d67c:	605a      	strne	r2, [r3, #4]
 800d67e:	e7eb      	b.n	800d658 <_malloc_r+0xa8>
 800d680:	4623      	mov	r3, r4
 800d682:	6864      	ldr	r4, [r4, #4]
 800d684:	e7ae      	b.n	800d5e4 <_malloc_r+0x34>
 800d686:	463c      	mov	r4, r7
 800d688:	687f      	ldr	r7, [r7, #4]
 800d68a:	e7b6      	b.n	800d5fa <_malloc_r+0x4a>
 800d68c:	461a      	mov	r2, r3
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	42a3      	cmp	r3, r4
 800d692:	d1fb      	bne.n	800d68c <_malloc_r+0xdc>
 800d694:	2300      	movs	r3, #0
 800d696:	6053      	str	r3, [r2, #4]
 800d698:	e7de      	b.n	800d658 <_malloc_r+0xa8>
 800d69a:	230c      	movs	r3, #12
 800d69c:	6033      	str	r3, [r6, #0]
 800d69e:	4630      	mov	r0, r6
 800d6a0:	f000 f80c 	bl	800d6bc <__malloc_unlock>
 800d6a4:	e794      	b.n	800d5d0 <_malloc_r+0x20>
 800d6a6:	6005      	str	r5, [r0, #0]
 800d6a8:	e7d6      	b.n	800d658 <_malloc_r+0xa8>
 800d6aa:	bf00      	nop
 800d6ac:	200023a0 	.word	0x200023a0

0800d6b0 <__malloc_lock>:
 800d6b0:	4801      	ldr	r0, [pc, #4]	@ (800d6b8 <__malloc_lock+0x8>)
 800d6b2:	f7ff b8b8 	b.w	800c826 <__retarget_lock_acquire_recursive>
 800d6b6:	bf00      	nop
 800d6b8:	20002398 	.word	0x20002398

0800d6bc <__malloc_unlock>:
 800d6bc:	4801      	ldr	r0, [pc, #4]	@ (800d6c4 <__malloc_unlock+0x8>)
 800d6be:	f7ff b8b3 	b.w	800c828 <__retarget_lock_release_recursive>
 800d6c2:	bf00      	nop
 800d6c4:	20002398 	.word	0x20002398

0800d6c8 <_Balloc>:
 800d6c8:	b570      	push	{r4, r5, r6, lr}
 800d6ca:	69c6      	ldr	r6, [r0, #28]
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	460d      	mov	r5, r1
 800d6d0:	b976      	cbnz	r6, 800d6f0 <_Balloc+0x28>
 800d6d2:	2010      	movs	r0, #16
 800d6d4:	f7ff ff42 	bl	800d55c <malloc>
 800d6d8:	4602      	mov	r2, r0
 800d6da:	61e0      	str	r0, [r4, #28]
 800d6dc:	b920      	cbnz	r0, 800d6e8 <_Balloc+0x20>
 800d6de:	4b18      	ldr	r3, [pc, #96]	@ (800d740 <_Balloc+0x78>)
 800d6e0:	4818      	ldr	r0, [pc, #96]	@ (800d744 <_Balloc+0x7c>)
 800d6e2:	216b      	movs	r1, #107	@ 0x6b
 800d6e4:	f000 fdae 	bl	800e244 <__assert_func>
 800d6e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6ec:	6006      	str	r6, [r0, #0]
 800d6ee:	60c6      	str	r6, [r0, #12]
 800d6f0:	69e6      	ldr	r6, [r4, #28]
 800d6f2:	68f3      	ldr	r3, [r6, #12]
 800d6f4:	b183      	cbz	r3, 800d718 <_Balloc+0x50>
 800d6f6:	69e3      	ldr	r3, [r4, #28]
 800d6f8:	68db      	ldr	r3, [r3, #12]
 800d6fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d6fe:	b9b8      	cbnz	r0, 800d730 <_Balloc+0x68>
 800d700:	2101      	movs	r1, #1
 800d702:	fa01 f605 	lsl.w	r6, r1, r5
 800d706:	1d72      	adds	r2, r6, #5
 800d708:	0092      	lsls	r2, r2, #2
 800d70a:	4620      	mov	r0, r4
 800d70c:	f000 fdb8 	bl	800e280 <_calloc_r>
 800d710:	b160      	cbz	r0, 800d72c <_Balloc+0x64>
 800d712:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d716:	e00e      	b.n	800d736 <_Balloc+0x6e>
 800d718:	2221      	movs	r2, #33	@ 0x21
 800d71a:	2104      	movs	r1, #4
 800d71c:	4620      	mov	r0, r4
 800d71e:	f000 fdaf 	bl	800e280 <_calloc_r>
 800d722:	69e3      	ldr	r3, [r4, #28]
 800d724:	60f0      	str	r0, [r6, #12]
 800d726:	68db      	ldr	r3, [r3, #12]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d1e4      	bne.n	800d6f6 <_Balloc+0x2e>
 800d72c:	2000      	movs	r0, #0
 800d72e:	bd70      	pop	{r4, r5, r6, pc}
 800d730:	6802      	ldr	r2, [r0, #0]
 800d732:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d736:	2300      	movs	r3, #0
 800d738:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d73c:	e7f7      	b.n	800d72e <_Balloc+0x66>
 800d73e:	bf00      	nop
 800d740:	0800f2c9 	.word	0x0800f2c9
 800d744:	0800f349 	.word	0x0800f349

0800d748 <_Bfree>:
 800d748:	b570      	push	{r4, r5, r6, lr}
 800d74a:	69c6      	ldr	r6, [r0, #28]
 800d74c:	4605      	mov	r5, r0
 800d74e:	460c      	mov	r4, r1
 800d750:	b976      	cbnz	r6, 800d770 <_Bfree+0x28>
 800d752:	2010      	movs	r0, #16
 800d754:	f7ff ff02 	bl	800d55c <malloc>
 800d758:	4602      	mov	r2, r0
 800d75a:	61e8      	str	r0, [r5, #28]
 800d75c:	b920      	cbnz	r0, 800d768 <_Bfree+0x20>
 800d75e:	4b09      	ldr	r3, [pc, #36]	@ (800d784 <_Bfree+0x3c>)
 800d760:	4809      	ldr	r0, [pc, #36]	@ (800d788 <_Bfree+0x40>)
 800d762:	218f      	movs	r1, #143	@ 0x8f
 800d764:	f000 fd6e 	bl	800e244 <__assert_func>
 800d768:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d76c:	6006      	str	r6, [r0, #0]
 800d76e:	60c6      	str	r6, [r0, #12]
 800d770:	b13c      	cbz	r4, 800d782 <_Bfree+0x3a>
 800d772:	69eb      	ldr	r3, [r5, #28]
 800d774:	6862      	ldr	r2, [r4, #4]
 800d776:	68db      	ldr	r3, [r3, #12]
 800d778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d77c:	6021      	str	r1, [r4, #0]
 800d77e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d782:	bd70      	pop	{r4, r5, r6, pc}
 800d784:	0800f2c9 	.word	0x0800f2c9
 800d788:	0800f349 	.word	0x0800f349

0800d78c <__multadd>:
 800d78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d790:	690d      	ldr	r5, [r1, #16]
 800d792:	4607      	mov	r7, r0
 800d794:	460c      	mov	r4, r1
 800d796:	461e      	mov	r6, r3
 800d798:	f101 0c14 	add.w	ip, r1, #20
 800d79c:	2000      	movs	r0, #0
 800d79e:	f8dc 3000 	ldr.w	r3, [ip]
 800d7a2:	b299      	uxth	r1, r3
 800d7a4:	fb02 6101 	mla	r1, r2, r1, r6
 800d7a8:	0c1e      	lsrs	r6, r3, #16
 800d7aa:	0c0b      	lsrs	r3, r1, #16
 800d7ac:	fb02 3306 	mla	r3, r2, r6, r3
 800d7b0:	b289      	uxth	r1, r1
 800d7b2:	3001      	adds	r0, #1
 800d7b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7b8:	4285      	cmp	r5, r0
 800d7ba:	f84c 1b04 	str.w	r1, [ip], #4
 800d7be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7c2:	dcec      	bgt.n	800d79e <__multadd+0x12>
 800d7c4:	b30e      	cbz	r6, 800d80a <__multadd+0x7e>
 800d7c6:	68a3      	ldr	r3, [r4, #8]
 800d7c8:	42ab      	cmp	r3, r5
 800d7ca:	dc19      	bgt.n	800d800 <__multadd+0x74>
 800d7cc:	6861      	ldr	r1, [r4, #4]
 800d7ce:	4638      	mov	r0, r7
 800d7d0:	3101      	adds	r1, #1
 800d7d2:	f7ff ff79 	bl	800d6c8 <_Balloc>
 800d7d6:	4680      	mov	r8, r0
 800d7d8:	b928      	cbnz	r0, 800d7e6 <__multadd+0x5a>
 800d7da:	4602      	mov	r2, r0
 800d7dc:	4b0c      	ldr	r3, [pc, #48]	@ (800d810 <__multadd+0x84>)
 800d7de:	480d      	ldr	r0, [pc, #52]	@ (800d814 <__multadd+0x88>)
 800d7e0:	21ba      	movs	r1, #186	@ 0xba
 800d7e2:	f000 fd2f 	bl	800e244 <__assert_func>
 800d7e6:	6922      	ldr	r2, [r4, #16]
 800d7e8:	3202      	adds	r2, #2
 800d7ea:	f104 010c 	add.w	r1, r4, #12
 800d7ee:	0092      	lsls	r2, r2, #2
 800d7f0:	300c      	adds	r0, #12
 800d7f2:	f000 fd19 	bl	800e228 <memcpy>
 800d7f6:	4621      	mov	r1, r4
 800d7f8:	4638      	mov	r0, r7
 800d7fa:	f7ff ffa5 	bl	800d748 <_Bfree>
 800d7fe:	4644      	mov	r4, r8
 800d800:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d804:	3501      	adds	r5, #1
 800d806:	615e      	str	r6, [r3, #20]
 800d808:	6125      	str	r5, [r4, #16]
 800d80a:	4620      	mov	r0, r4
 800d80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d810:	0800f338 	.word	0x0800f338
 800d814:	0800f349 	.word	0x0800f349

0800d818 <__hi0bits>:
 800d818:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d81c:	4603      	mov	r3, r0
 800d81e:	bf36      	itet	cc
 800d820:	0403      	lslcc	r3, r0, #16
 800d822:	2000      	movcs	r0, #0
 800d824:	2010      	movcc	r0, #16
 800d826:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d82a:	bf3c      	itt	cc
 800d82c:	021b      	lslcc	r3, r3, #8
 800d82e:	3008      	addcc	r0, #8
 800d830:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d834:	bf3c      	itt	cc
 800d836:	011b      	lslcc	r3, r3, #4
 800d838:	3004      	addcc	r0, #4
 800d83a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d83e:	bf3c      	itt	cc
 800d840:	009b      	lslcc	r3, r3, #2
 800d842:	3002      	addcc	r0, #2
 800d844:	2b00      	cmp	r3, #0
 800d846:	db05      	blt.n	800d854 <__hi0bits+0x3c>
 800d848:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d84c:	f100 0001 	add.w	r0, r0, #1
 800d850:	bf08      	it	eq
 800d852:	2020      	moveq	r0, #32
 800d854:	4770      	bx	lr

0800d856 <__lo0bits>:
 800d856:	6803      	ldr	r3, [r0, #0]
 800d858:	4602      	mov	r2, r0
 800d85a:	f013 0007 	ands.w	r0, r3, #7
 800d85e:	d00b      	beq.n	800d878 <__lo0bits+0x22>
 800d860:	07d9      	lsls	r1, r3, #31
 800d862:	d421      	bmi.n	800d8a8 <__lo0bits+0x52>
 800d864:	0798      	lsls	r0, r3, #30
 800d866:	bf49      	itett	mi
 800d868:	085b      	lsrmi	r3, r3, #1
 800d86a:	089b      	lsrpl	r3, r3, #2
 800d86c:	2001      	movmi	r0, #1
 800d86e:	6013      	strmi	r3, [r2, #0]
 800d870:	bf5c      	itt	pl
 800d872:	6013      	strpl	r3, [r2, #0]
 800d874:	2002      	movpl	r0, #2
 800d876:	4770      	bx	lr
 800d878:	b299      	uxth	r1, r3
 800d87a:	b909      	cbnz	r1, 800d880 <__lo0bits+0x2a>
 800d87c:	0c1b      	lsrs	r3, r3, #16
 800d87e:	2010      	movs	r0, #16
 800d880:	b2d9      	uxtb	r1, r3
 800d882:	b909      	cbnz	r1, 800d888 <__lo0bits+0x32>
 800d884:	3008      	adds	r0, #8
 800d886:	0a1b      	lsrs	r3, r3, #8
 800d888:	0719      	lsls	r1, r3, #28
 800d88a:	bf04      	itt	eq
 800d88c:	091b      	lsreq	r3, r3, #4
 800d88e:	3004      	addeq	r0, #4
 800d890:	0799      	lsls	r1, r3, #30
 800d892:	bf04      	itt	eq
 800d894:	089b      	lsreq	r3, r3, #2
 800d896:	3002      	addeq	r0, #2
 800d898:	07d9      	lsls	r1, r3, #31
 800d89a:	d403      	bmi.n	800d8a4 <__lo0bits+0x4e>
 800d89c:	085b      	lsrs	r3, r3, #1
 800d89e:	f100 0001 	add.w	r0, r0, #1
 800d8a2:	d003      	beq.n	800d8ac <__lo0bits+0x56>
 800d8a4:	6013      	str	r3, [r2, #0]
 800d8a6:	4770      	bx	lr
 800d8a8:	2000      	movs	r0, #0
 800d8aa:	4770      	bx	lr
 800d8ac:	2020      	movs	r0, #32
 800d8ae:	4770      	bx	lr

0800d8b0 <__i2b>:
 800d8b0:	b510      	push	{r4, lr}
 800d8b2:	460c      	mov	r4, r1
 800d8b4:	2101      	movs	r1, #1
 800d8b6:	f7ff ff07 	bl	800d6c8 <_Balloc>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	b928      	cbnz	r0, 800d8ca <__i2b+0x1a>
 800d8be:	4b05      	ldr	r3, [pc, #20]	@ (800d8d4 <__i2b+0x24>)
 800d8c0:	4805      	ldr	r0, [pc, #20]	@ (800d8d8 <__i2b+0x28>)
 800d8c2:	f240 1145 	movw	r1, #325	@ 0x145
 800d8c6:	f000 fcbd 	bl	800e244 <__assert_func>
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	6144      	str	r4, [r0, #20]
 800d8ce:	6103      	str	r3, [r0, #16]
 800d8d0:	bd10      	pop	{r4, pc}
 800d8d2:	bf00      	nop
 800d8d4:	0800f338 	.word	0x0800f338
 800d8d8:	0800f349 	.word	0x0800f349

0800d8dc <__multiply>:
 800d8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e0:	4614      	mov	r4, r2
 800d8e2:	690a      	ldr	r2, [r1, #16]
 800d8e4:	6923      	ldr	r3, [r4, #16]
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	bfa8      	it	ge
 800d8ea:	4623      	movge	r3, r4
 800d8ec:	460f      	mov	r7, r1
 800d8ee:	bfa4      	itt	ge
 800d8f0:	460c      	movge	r4, r1
 800d8f2:	461f      	movge	r7, r3
 800d8f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d8f8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d8fc:	68a3      	ldr	r3, [r4, #8]
 800d8fe:	6861      	ldr	r1, [r4, #4]
 800d900:	eb0a 0609 	add.w	r6, sl, r9
 800d904:	42b3      	cmp	r3, r6
 800d906:	b085      	sub	sp, #20
 800d908:	bfb8      	it	lt
 800d90a:	3101      	addlt	r1, #1
 800d90c:	f7ff fedc 	bl	800d6c8 <_Balloc>
 800d910:	b930      	cbnz	r0, 800d920 <__multiply+0x44>
 800d912:	4602      	mov	r2, r0
 800d914:	4b44      	ldr	r3, [pc, #272]	@ (800da28 <__multiply+0x14c>)
 800d916:	4845      	ldr	r0, [pc, #276]	@ (800da2c <__multiply+0x150>)
 800d918:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d91c:	f000 fc92 	bl	800e244 <__assert_func>
 800d920:	f100 0514 	add.w	r5, r0, #20
 800d924:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d928:	462b      	mov	r3, r5
 800d92a:	2200      	movs	r2, #0
 800d92c:	4543      	cmp	r3, r8
 800d92e:	d321      	bcc.n	800d974 <__multiply+0x98>
 800d930:	f107 0114 	add.w	r1, r7, #20
 800d934:	f104 0214 	add.w	r2, r4, #20
 800d938:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d93c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d940:	9302      	str	r3, [sp, #8]
 800d942:	1b13      	subs	r3, r2, r4
 800d944:	3b15      	subs	r3, #21
 800d946:	f023 0303 	bic.w	r3, r3, #3
 800d94a:	3304      	adds	r3, #4
 800d94c:	f104 0715 	add.w	r7, r4, #21
 800d950:	42ba      	cmp	r2, r7
 800d952:	bf38      	it	cc
 800d954:	2304      	movcc	r3, #4
 800d956:	9301      	str	r3, [sp, #4]
 800d958:	9b02      	ldr	r3, [sp, #8]
 800d95a:	9103      	str	r1, [sp, #12]
 800d95c:	428b      	cmp	r3, r1
 800d95e:	d80c      	bhi.n	800d97a <__multiply+0x9e>
 800d960:	2e00      	cmp	r6, #0
 800d962:	dd03      	ble.n	800d96c <__multiply+0x90>
 800d964:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d05b      	beq.n	800da24 <__multiply+0x148>
 800d96c:	6106      	str	r6, [r0, #16]
 800d96e:	b005      	add	sp, #20
 800d970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d974:	f843 2b04 	str.w	r2, [r3], #4
 800d978:	e7d8      	b.n	800d92c <__multiply+0x50>
 800d97a:	f8b1 a000 	ldrh.w	sl, [r1]
 800d97e:	f1ba 0f00 	cmp.w	sl, #0
 800d982:	d024      	beq.n	800d9ce <__multiply+0xf2>
 800d984:	f104 0e14 	add.w	lr, r4, #20
 800d988:	46a9      	mov	r9, r5
 800d98a:	f04f 0c00 	mov.w	ip, #0
 800d98e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d992:	f8d9 3000 	ldr.w	r3, [r9]
 800d996:	fa1f fb87 	uxth.w	fp, r7
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	fb0a 330b 	mla	r3, sl, fp, r3
 800d9a0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d9a4:	f8d9 7000 	ldr.w	r7, [r9]
 800d9a8:	4463      	add	r3, ip
 800d9aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d9ae:	fb0a c70b 	mla	r7, sl, fp, ip
 800d9b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d9b6:	b29b      	uxth	r3, r3
 800d9b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d9bc:	4572      	cmp	r2, lr
 800d9be:	f849 3b04 	str.w	r3, [r9], #4
 800d9c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d9c6:	d8e2      	bhi.n	800d98e <__multiply+0xb2>
 800d9c8:	9b01      	ldr	r3, [sp, #4]
 800d9ca:	f845 c003 	str.w	ip, [r5, r3]
 800d9ce:	9b03      	ldr	r3, [sp, #12]
 800d9d0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d9d4:	3104      	adds	r1, #4
 800d9d6:	f1b9 0f00 	cmp.w	r9, #0
 800d9da:	d021      	beq.n	800da20 <__multiply+0x144>
 800d9dc:	682b      	ldr	r3, [r5, #0]
 800d9de:	f104 0c14 	add.w	ip, r4, #20
 800d9e2:	46ae      	mov	lr, r5
 800d9e4:	f04f 0a00 	mov.w	sl, #0
 800d9e8:	f8bc b000 	ldrh.w	fp, [ip]
 800d9ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d9f0:	fb09 770b 	mla	r7, r9, fp, r7
 800d9f4:	4457      	add	r7, sl
 800d9f6:	b29b      	uxth	r3, r3
 800d9f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d9fc:	f84e 3b04 	str.w	r3, [lr], #4
 800da00:	f85c 3b04 	ldr.w	r3, [ip], #4
 800da04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da08:	f8be 3000 	ldrh.w	r3, [lr]
 800da0c:	fb09 330a 	mla	r3, r9, sl, r3
 800da10:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800da14:	4562      	cmp	r2, ip
 800da16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da1a:	d8e5      	bhi.n	800d9e8 <__multiply+0x10c>
 800da1c:	9f01      	ldr	r7, [sp, #4]
 800da1e:	51eb      	str	r3, [r5, r7]
 800da20:	3504      	adds	r5, #4
 800da22:	e799      	b.n	800d958 <__multiply+0x7c>
 800da24:	3e01      	subs	r6, #1
 800da26:	e79b      	b.n	800d960 <__multiply+0x84>
 800da28:	0800f338 	.word	0x0800f338
 800da2c:	0800f349 	.word	0x0800f349

0800da30 <__pow5mult>:
 800da30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da34:	4615      	mov	r5, r2
 800da36:	f012 0203 	ands.w	r2, r2, #3
 800da3a:	4607      	mov	r7, r0
 800da3c:	460e      	mov	r6, r1
 800da3e:	d007      	beq.n	800da50 <__pow5mult+0x20>
 800da40:	4c25      	ldr	r4, [pc, #148]	@ (800dad8 <__pow5mult+0xa8>)
 800da42:	3a01      	subs	r2, #1
 800da44:	2300      	movs	r3, #0
 800da46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da4a:	f7ff fe9f 	bl	800d78c <__multadd>
 800da4e:	4606      	mov	r6, r0
 800da50:	10ad      	asrs	r5, r5, #2
 800da52:	d03d      	beq.n	800dad0 <__pow5mult+0xa0>
 800da54:	69fc      	ldr	r4, [r7, #28]
 800da56:	b97c      	cbnz	r4, 800da78 <__pow5mult+0x48>
 800da58:	2010      	movs	r0, #16
 800da5a:	f7ff fd7f 	bl	800d55c <malloc>
 800da5e:	4602      	mov	r2, r0
 800da60:	61f8      	str	r0, [r7, #28]
 800da62:	b928      	cbnz	r0, 800da70 <__pow5mult+0x40>
 800da64:	4b1d      	ldr	r3, [pc, #116]	@ (800dadc <__pow5mult+0xac>)
 800da66:	481e      	ldr	r0, [pc, #120]	@ (800dae0 <__pow5mult+0xb0>)
 800da68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800da6c:	f000 fbea 	bl	800e244 <__assert_func>
 800da70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da74:	6004      	str	r4, [r0, #0]
 800da76:	60c4      	str	r4, [r0, #12]
 800da78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800da7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da80:	b94c      	cbnz	r4, 800da96 <__pow5mult+0x66>
 800da82:	f240 2171 	movw	r1, #625	@ 0x271
 800da86:	4638      	mov	r0, r7
 800da88:	f7ff ff12 	bl	800d8b0 <__i2b>
 800da8c:	2300      	movs	r3, #0
 800da8e:	f8c8 0008 	str.w	r0, [r8, #8]
 800da92:	4604      	mov	r4, r0
 800da94:	6003      	str	r3, [r0, #0]
 800da96:	f04f 0900 	mov.w	r9, #0
 800da9a:	07eb      	lsls	r3, r5, #31
 800da9c:	d50a      	bpl.n	800dab4 <__pow5mult+0x84>
 800da9e:	4631      	mov	r1, r6
 800daa0:	4622      	mov	r2, r4
 800daa2:	4638      	mov	r0, r7
 800daa4:	f7ff ff1a 	bl	800d8dc <__multiply>
 800daa8:	4631      	mov	r1, r6
 800daaa:	4680      	mov	r8, r0
 800daac:	4638      	mov	r0, r7
 800daae:	f7ff fe4b 	bl	800d748 <_Bfree>
 800dab2:	4646      	mov	r6, r8
 800dab4:	106d      	asrs	r5, r5, #1
 800dab6:	d00b      	beq.n	800dad0 <__pow5mult+0xa0>
 800dab8:	6820      	ldr	r0, [r4, #0]
 800daba:	b938      	cbnz	r0, 800dacc <__pow5mult+0x9c>
 800dabc:	4622      	mov	r2, r4
 800dabe:	4621      	mov	r1, r4
 800dac0:	4638      	mov	r0, r7
 800dac2:	f7ff ff0b 	bl	800d8dc <__multiply>
 800dac6:	6020      	str	r0, [r4, #0]
 800dac8:	f8c0 9000 	str.w	r9, [r0]
 800dacc:	4604      	mov	r4, r0
 800dace:	e7e4      	b.n	800da9a <__pow5mult+0x6a>
 800dad0:	4630      	mov	r0, r6
 800dad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dad6:	bf00      	nop
 800dad8:	0800f3a4 	.word	0x0800f3a4
 800dadc:	0800f2c9 	.word	0x0800f2c9
 800dae0:	0800f349 	.word	0x0800f349

0800dae4 <__lshift>:
 800dae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dae8:	460c      	mov	r4, r1
 800daea:	6849      	ldr	r1, [r1, #4]
 800daec:	6923      	ldr	r3, [r4, #16]
 800daee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800daf2:	68a3      	ldr	r3, [r4, #8]
 800daf4:	4607      	mov	r7, r0
 800daf6:	4691      	mov	r9, r2
 800daf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dafc:	f108 0601 	add.w	r6, r8, #1
 800db00:	42b3      	cmp	r3, r6
 800db02:	db0b      	blt.n	800db1c <__lshift+0x38>
 800db04:	4638      	mov	r0, r7
 800db06:	f7ff fddf 	bl	800d6c8 <_Balloc>
 800db0a:	4605      	mov	r5, r0
 800db0c:	b948      	cbnz	r0, 800db22 <__lshift+0x3e>
 800db0e:	4602      	mov	r2, r0
 800db10:	4b28      	ldr	r3, [pc, #160]	@ (800dbb4 <__lshift+0xd0>)
 800db12:	4829      	ldr	r0, [pc, #164]	@ (800dbb8 <__lshift+0xd4>)
 800db14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800db18:	f000 fb94 	bl	800e244 <__assert_func>
 800db1c:	3101      	adds	r1, #1
 800db1e:	005b      	lsls	r3, r3, #1
 800db20:	e7ee      	b.n	800db00 <__lshift+0x1c>
 800db22:	2300      	movs	r3, #0
 800db24:	f100 0114 	add.w	r1, r0, #20
 800db28:	f100 0210 	add.w	r2, r0, #16
 800db2c:	4618      	mov	r0, r3
 800db2e:	4553      	cmp	r3, sl
 800db30:	db33      	blt.n	800db9a <__lshift+0xb6>
 800db32:	6920      	ldr	r0, [r4, #16]
 800db34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db38:	f104 0314 	add.w	r3, r4, #20
 800db3c:	f019 091f 	ands.w	r9, r9, #31
 800db40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800db48:	d02b      	beq.n	800dba2 <__lshift+0xbe>
 800db4a:	f1c9 0e20 	rsb	lr, r9, #32
 800db4e:	468a      	mov	sl, r1
 800db50:	2200      	movs	r2, #0
 800db52:	6818      	ldr	r0, [r3, #0]
 800db54:	fa00 f009 	lsl.w	r0, r0, r9
 800db58:	4310      	orrs	r0, r2
 800db5a:	f84a 0b04 	str.w	r0, [sl], #4
 800db5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800db62:	459c      	cmp	ip, r3
 800db64:	fa22 f20e 	lsr.w	r2, r2, lr
 800db68:	d8f3      	bhi.n	800db52 <__lshift+0x6e>
 800db6a:	ebac 0304 	sub.w	r3, ip, r4
 800db6e:	3b15      	subs	r3, #21
 800db70:	f023 0303 	bic.w	r3, r3, #3
 800db74:	3304      	adds	r3, #4
 800db76:	f104 0015 	add.w	r0, r4, #21
 800db7a:	4584      	cmp	ip, r0
 800db7c:	bf38      	it	cc
 800db7e:	2304      	movcc	r3, #4
 800db80:	50ca      	str	r2, [r1, r3]
 800db82:	b10a      	cbz	r2, 800db88 <__lshift+0xa4>
 800db84:	f108 0602 	add.w	r6, r8, #2
 800db88:	3e01      	subs	r6, #1
 800db8a:	4638      	mov	r0, r7
 800db8c:	612e      	str	r6, [r5, #16]
 800db8e:	4621      	mov	r1, r4
 800db90:	f7ff fdda 	bl	800d748 <_Bfree>
 800db94:	4628      	mov	r0, r5
 800db96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db9a:	f842 0f04 	str.w	r0, [r2, #4]!
 800db9e:	3301      	adds	r3, #1
 800dba0:	e7c5      	b.n	800db2e <__lshift+0x4a>
 800dba2:	3904      	subs	r1, #4
 800dba4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dba8:	f841 2f04 	str.w	r2, [r1, #4]!
 800dbac:	459c      	cmp	ip, r3
 800dbae:	d8f9      	bhi.n	800dba4 <__lshift+0xc0>
 800dbb0:	e7ea      	b.n	800db88 <__lshift+0xa4>
 800dbb2:	bf00      	nop
 800dbb4:	0800f338 	.word	0x0800f338
 800dbb8:	0800f349 	.word	0x0800f349

0800dbbc <__mcmp>:
 800dbbc:	690a      	ldr	r2, [r1, #16]
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	6900      	ldr	r0, [r0, #16]
 800dbc2:	1a80      	subs	r0, r0, r2
 800dbc4:	b530      	push	{r4, r5, lr}
 800dbc6:	d10e      	bne.n	800dbe6 <__mcmp+0x2a>
 800dbc8:	3314      	adds	r3, #20
 800dbca:	3114      	adds	r1, #20
 800dbcc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dbd0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dbd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dbd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dbdc:	4295      	cmp	r5, r2
 800dbde:	d003      	beq.n	800dbe8 <__mcmp+0x2c>
 800dbe0:	d205      	bcs.n	800dbee <__mcmp+0x32>
 800dbe2:	f04f 30ff 	mov.w	r0, #4294967295
 800dbe6:	bd30      	pop	{r4, r5, pc}
 800dbe8:	42a3      	cmp	r3, r4
 800dbea:	d3f3      	bcc.n	800dbd4 <__mcmp+0x18>
 800dbec:	e7fb      	b.n	800dbe6 <__mcmp+0x2a>
 800dbee:	2001      	movs	r0, #1
 800dbf0:	e7f9      	b.n	800dbe6 <__mcmp+0x2a>
	...

0800dbf4 <__mdiff>:
 800dbf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf8:	4689      	mov	r9, r1
 800dbfa:	4606      	mov	r6, r0
 800dbfc:	4611      	mov	r1, r2
 800dbfe:	4648      	mov	r0, r9
 800dc00:	4614      	mov	r4, r2
 800dc02:	f7ff ffdb 	bl	800dbbc <__mcmp>
 800dc06:	1e05      	subs	r5, r0, #0
 800dc08:	d112      	bne.n	800dc30 <__mdiff+0x3c>
 800dc0a:	4629      	mov	r1, r5
 800dc0c:	4630      	mov	r0, r6
 800dc0e:	f7ff fd5b 	bl	800d6c8 <_Balloc>
 800dc12:	4602      	mov	r2, r0
 800dc14:	b928      	cbnz	r0, 800dc22 <__mdiff+0x2e>
 800dc16:	4b3f      	ldr	r3, [pc, #252]	@ (800dd14 <__mdiff+0x120>)
 800dc18:	f240 2137 	movw	r1, #567	@ 0x237
 800dc1c:	483e      	ldr	r0, [pc, #248]	@ (800dd18 <__mdiff+0x124>)
 800dc1e:	f000 fb11 	bl	800e244 <__assert_func>
 800dc22:	2301      	movs	r3, #1
 800dc24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc28:	4610      	mov	r0, r2
 800dc2a:	b003      	add	sp, #12
 800dc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc30:	bfbc      	itt	lt
 800dc32:	464b      	movlt	r3, r9
 800dc34:	46a1      	movlt	r9, r4
 800dc36:	4630      	mov	r0, r6
 800dc38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dc3c:	bfba      	itte	lt
 800dc3e:	461c      	movlt	r4, r3
 800dc40:	2501      	movlt	r5, #1
 800dc42:	2500      	movge	r5, #0
 800dc44:	f7ff fd40 	bl	800d6c8 <_Balloc>
 800dc48:	4602      	mov	r2, r0
 800dc4a:	b918      	cbnz	r0, 800dc54 <__mdiff+0x60>
 800dc4c:	4b31      	ldr	r3, [pc, #196]	@ (800dd14 <__mdiff+0x120>)
 800dc4e:	f240 2145 	movw	r1, #581	@ 0x245
 800dc52:	e7e3      	b.n	800dc1c <__mdiff+0x28>
 800dc54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dc58:	6926      	ldr	r6, [r4, #16]
 800dc5a:	60c5      	str	r5, [r0, #12]
 800dc5c:	f109 0310 	add.w	r3, r9, #16
 800dc60:	f109 0514 	add.w	r5, r9, #20
 800dc64:	f104 0e14 	add.w	lr, r4, #20
 800dc68:	f100 0b14 	add.w	fp, r0, #20
 800dc6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dc70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dc74:	9301      	str	r3, [sp, #4]
 800dc76:	46d9      	mov	r9, fp
 800dc78:	f04f 0c00 	mov.w	ip, #0
 800dc7c:	9b01      	ldr	r3, [sp, #4]
 800dc7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dc82:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dc86:	9301      	str	r3, [sp, #4]
 800dc88:	fa1f f38a 	uxth.w	r3, sl
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	b283      	uxth	r3, r0
 800dc90:	1acb      	subs	r3, r1, r3
 800dc92:	0c00      	lsrs	r0, r0, #16
 800dc94:	4463      	add	r3, ip
 800dc96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dc9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dca4:	4576      	cmp	r6, lr
 800dca6:	f849 3b04 	str.w	r3, [r9], #4
 800dcaa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dcae:	d8e5      	bhi.n	800dc7c <__mdiff+0x88>
 800dcb0:	1b33      	subs	r3, r6, r4
 800dcb2:	3b15      	subs	r3, #21
 800dcb4:	f023 0303 	bic.w	r3, r3, #3
 800dcb8:	3415      	adds	r4, #21
 800dcba:	3304      	adds	r3, #4
 800dcbc:	42a6      	cmp	r6, r4
 800dcbe:	bf38      	it	cc
 800dcc0:	2304      	movcc	r3, #4
 800dcc2:	441d      	add	r5, r3
 800dcc4:	445b      	add	r3, fp
 800dcc6:	461e      	mov	r6, r3
 800dcc8:	462c      	mov	r4, r5
 800dcca:	4544      	cmp	r4, r8
 800dccc:	d30e      	bcc.n	800dcec <__mdiff+0xf8>
 800dcce:	f108 0103 	add.w	r1, r8, #3
 800dcd2:	1b49      	subs	r1, r1, r5
 800dcd4:	f021 0103 	bic.w	r1, r1, #3
 800dcd8:	3d03      	subs	r5, #3
 800dcda:	45a8      	cmp	r8, r5
 800dcdc:	bf38      	it	cc
 800dcde:	2100      	movcc	r1, #0
 800dce0:	440b      	add	r3, r1
 800dce2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dce6:	b191      	cbz	r1, 800dd0e <__mdiff+0x11a>
 800dce8:	6117      	str	r7, [r2, #16]
 800dcea:	e79d      	b.n	800dc28 <__mdiff+0x34>
 800dcec:	f854 1b04 	ldr.w	r1, [r4], #4
 800dcf0:	46e6      	mov	lr, ip
 800dcf2:	0c08      	lsrs	r0, r1, #16
 800dcf4:	fa1c fc81 	uxtah	ip, ip, r1
 800dcf8:	4471      	add	r1, lr
 800dcfa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dcfe:	b289      	uxth	r1, r1
 800dd00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dd04:	f846 1b04 	str.w	r1, [r6], #4
 800dd08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd0c:	e7dd      	b.n	800dcca <__mdiff+0xd6>
 800dd0e:	3f01      	subs	r7, #1
 800dd10:	e7e7      	b.n	800dce2 <__mdiff+0xee>
 800dd12:	bf00      	nop
 800dd14:	0800f338 	.word	0x0800f338
 800dd18:	0800f349 	.word	0x0800f349

0800dd1c <__d2b>:
 800dd1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd20:	460f      	mov	r7, r1
 800dd22:	2101      	movs	r1, #1
 800dd24:	ec59 8b10 	vmov	r8, r9, d0
 800dd28:	4616      	mov	r6, r2
 800dd2a:	f7ff fccd 	bl	800d6c8 <_Balloc>
 800dd2e:	4604      	mov	r4, r0
 800dd30:	b930      	cbnz	r0, 800dd40 <__d2b+0x24>
 800dd32:	4602      	mov	r2, r0
 800dd34:	4b23      	ldr	r3, [pc, #140]	@ (800ddc4 <__d2b+0xa8>)
 800dd36:	4824      	ldr	r0, [pc, #144]	@ (800ddc8 <__d2b+0xac>)
 800dd38:	f240 310f 	movw	r1, #783	@ 0x30f
 800dd3c:	f000 fa82 	bl	800e244 <__assert_func>
 800dd40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dd44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dd48:	b10d      	cbz	r5, 800dd4e <__d2b+0x32>
 800dd4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd4e:	9301      	str	r3, [sp, #4]
 800dd50:	f1b8 0300 	subs.w	r3, r8, #0
 800dd54:	d023      	beq.n	800dd9e <__d2b+0x82>
 800dd56:	4668      	mov	r0, sp
 800dd58:	9300      	str	r3, [sp, #0]
 800dd5a:	f7ff fd7c 	bl	800d856 <__lo0bits>
 800dd5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dd62:	b1d0      	cbz	r0, 800dd9a <__d2b+0x7e>
 800dd64:	f1c0 0320 	rsb	r3, r0, #32
 800dd68:	fa02 f303 	lsl.w	r3, r2, r3
 800dd6c:	430b      	orrs	r3, r1
 800dd6e:	40c2      	lsrs	r2, r0
 800dd70:	6163      	str	r3, [r4, #20]
 800dd72:	9201      	str	r2, [sp, #4]
 800dd74:	9b01      	ldr	r3, [sp, #4]
 800dd76:	61a3      	str	r3, [r4, #24]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	bf0c      	ite	eq
 800dd7c:	2201      	moveq	r2, #1
 800dd7e:	2202      	movne	r2, #2
 800dd80:	6122      	str	r2, [r4, #16]
 800dd82:	b1a5      	cbz	r5, 800ddae <__d2b+0x92>
 800dd84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dd88:	4405      	add	r5, r0
 800dd8a:	603d      	str	r5, [r7, #0]
 800dd8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dd90:	6030      	str	r0, [r6, #0]
 800dd92:	4620      	mov	r0, r4
 800dd94:	b003      	add	sp, #12
 800dd96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd9a:	6161      	str	r1, [r4, #20]
 800dd9c:	e7ea      	b.n	800dd74 <__d2b+0x58>
 800dd9e:	a801      	add	r0, sp, #4
 800dda0:	f7ff fd59 	bl	800d856 <__lo0bits>
 800dda4:	9b01      	ldr	r3, [sp, #4]
 800dda6:	6163      	str	r3, [r4, #20]
 800dda8:	3020      	adds	r0, #32
 800ddaa:	2201      	movs	r2, #1
 800ddac:	e7e8      	b.n	800dd80 <__d2b+0x64>
 800ddae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ddb2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ddb6:	6038      	str	r0, [r7, #0]
 800ddb8:	6918      	ldr	r0, [r3, #16]
 800ddba:	f7ff fd2d 	bl	800d818 <__hi0bits>
 800ddbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ddc2:	e7e5      	b.n	800dd90 <__d2b+0x74>
 800ddc4:	0800f338 	.word	0x0800f338
 800ddc8:	0800f349 	.word	0x0800f349

0800ddcc <__ssputs_r>:
 800ddcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddd0:	688e      	ldr	r6, [r1, #8]
 800ddd2:	461f      	mov	r7, r3
 800ddd4:	42be      	cmp	r6, r7
 800ddd6:	680b      	ldr	r3, [r1, #0]
 800ddd8:	4682      	mov	sl, r0
 800ddda:	460c      	mov	r4, r1
 800dddc:	4690      	mov	r8, r2
 800ddde:	d82d      	bhi.n	800de3c <__ssputs_r+0x70>
 800dde0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dde4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dde8:	d026      	beq.n	800de38 <__ssputs_r+0x6c>
 800ddea:	6965      	ldr	r5, [r4, #20]
 800ddec:	6909      	ldr	r1, [r1, #16]
 800ddee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ddf2:	eba3 0901 	sub.w	r9, r3, r1
 800ddf6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ddfa:	1c7b      	adds	r3, r7, #1
 800ddfc:	444b      	add	r3, r9
 800ddfe:	106d      	asrs	r5, r5, #1
 800de00:	429d      	cmp	r5, r3
 800de02:	bf38      	it	cc
 800de04:	461d      	movcc	r5, r3
 800de06:	0553      	lsls	r3, r2, #21
 800de08:	d527      	bpl.n	800de5a <__ssputs_r+0x8e>
 800de0a:	4629      	mov	r1, r5
 800de0c:	f7ff fbd0 	bl	800d5b0 <_malloc_r>
 800de10:	4606      	mov	r6, r0
 800de12:	b360      	cbz	r0, 800de6e <__ssputs_r+0xa2>
 800de14:	6921      	ldr	r1, [r4, #16]
 800de16:	464a      	mov	r2, r9
 800de18:	f000 fa06 	bl	800e228 <memcpy>
 800de1c:	89a3      	ldrh	r3, [r4, #12]
 800de1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800de22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de26:	81a3      	strh	r3, [r4, #12]
 800de28:	6126      	str	r6, [r4, #16]
 800de2a:	6165      	str	r5, [r4, #20]
 800de2c:	444e      	add	r6, r9
 800de2e:	eba5 0509 	sub.w	r5, r5, r9
 800de32:	6026      	str	r6, [r4, #0]
 800de34:	60a5      	str	r5, [r4, #8]
 800de36:	463e      	mov	r6, r7
 800de38:	42be      	cmp	r6, r7
 800de3a:	d900      	bls.n	800de3e <__ssputs_r+0x72>
 800de3c:	463e      	mov	r6, r7
 800de3e:	6820      	ldr	r0, [r4, #0]
 800de40:	4632      	mov	r2, r6
 800de42:	4641      	mov	r1, r8
 800de44:	f000 f9c6 	bl	800e1d4 <memmove>
 800de48:	68a3      	ldr	r3, [r4, #8]
 800de4a:	1b9b      	subs	r3, r3, r6
 800de4c:	60a3      	str	r3, [r4, #8]
 800de4e:	6823      	ldr	r3, [r4, #0]
 800de50:	4433      	add	r3, r6
 800de52:	6023      	str	r3, [r4, #0]
 800de54:	2000      	movs	r0, #0
 800de56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de5a:	462a      	mov	r2, r5
 800de5c:	f000 fa36 	bl	800e2cc <_realloc_r>
 800de60:	4606      	mov	r6, r0
 800de62:	2800      	cmp	r0, #0
 800de64:	d1e0      	bne.n	800de28 <__ssputs_r+0x5c>
 800de66:	6921      	ldr	r1, [r4, #16]
 800de68:	4650      	mov	r0, sl
 800de6a:	f7ff fb2d 	bl	800d4c8 <_free_r>
 800de6e:	230c      	movs	r3, #12
 800de70:	f8ca 3000 	str.w	r3, [sl]
 800de74:	89a3      	ldrh	r3, [r4, #12]
 800de76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de7a:	81a3      	strh	r3, [r4, #12]
 800de7c:	f04f 30ff 	mov.w	r0, #4294967295
 800de80:	e7e9      	b.n	800de56 <__ssputs_r+0x8a>
	...

0800de84 <_svfiprintf_r>:
 800de84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de88:	4698      	mov	r8, r3
 800de8a:	898b      	ldrh	r3, [r1, #12]
 800de8c:	061b      	lsls	r3, r3, #24
 800de8e:	b09d      	sub	sp, #116	@ 0x74
 800de90:	4607      	mov	r7, r0
 800de92:	460d      	mov	r5, r1
 800de94:	4614      	mov	r4, r2
 800de96:	d510      	bpl.n	800deba <_svfiprintf_r+0x36>
 800de98:	690b      	ldr	r3, [r1, #16]
 800de9a:	b973      	cbnz	r3, 800deba <_svfiprintf_r+0x36>
 800de9c:	2140      	movs	r1, #64	@ 0x40
 800de9e:	f7ff fb87 	bl	800d5b0 <_malloc_r>
 800dea2:	6028      	str	r0, [r5, #0]
 800dea4:	6128      	str	r0, [r5, #16]
 800dea6:	b930      	cbnz	r0, 800deb6 <_svfiprintf_r+0x32>
 800dea8:	230c      	movs	r3, #12
 800deaa:	603b      	str	r3, [r7, #0]
 800deac:	f04f 30ff 	mov.w	r0, #4294967295
 800deb0:	b01d      	add	sp, #116	@ 0x74
 800deb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deb6:	2340      	movs	r3, #64	@ 0x40
 800deb8:	616b      	str	r3, [r5, #20]
 800deba:	2300      	movs	r3, #0
 800debc:	9309      	str	r3, [sp, #36]	@ 0x24
 800debe:	2320      	movs	r3, #32
 800dec0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dec4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dec8:	2330      	movs	r3, #48	@ 0x30
 800deca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e068 <_svfiprintf_r+0x1e4>
 800dece:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ded2:	f04f 0901 	mov.w	r9, #1
 800ded6:	4623      	mov	r3, r4
 800ded8:	469a      	mov	sl, r3
 800deda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dede:	b10a      	cbz	r2, 800dee4 <_svfiprintf_r+0x60>
 800dee0:	2a25      	cmp	r2, #37	@ 0x25
 800dee2:	d1f9      	bne.n	800ded8 <_svfiprintf_r+0x54>
 800dee4:	ebba 0b04 	subs.w	fp, sl, r4
 800dee8:	d00b      	beq.n	800df02 <_svfiprintf_r+0x7e>
 800deea:	465b      	mov	r3, fp
 800deec:	4622      	mov	r2, r4
 800deee:	4629      	mov	r1, r5
 800def0:	4638      	mov	r0, r7
 800def2:	f7ff ff6b 	bl	800ddcc <__ssputs_r>
 800def6:	3001      	adds	r0, #1
 800def8:	f000 80a7 	beq.w	800e04a <_svfiprintf_r+0x1c6>
 800defc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800defe:	445a      	add	r2, fp
 800df00:	9209      	str	r2, [sp, #36]	@ 0x24
 800df02:	f89a 3000 	ldrb.w	r3, [sl]
 800df06:	2b00      	cmp	r3, #0
 800df08:	f000 809f 	beq.w	800e04a <_svfiprintf_r+0x1c6>
 800df0c:	2300      	movs	r3, #0
 800df0e:	f04f 32ff 	mov.w	r2, #4294967295
 800df12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df16:	f10a 0a01 	add.w	sl, sl, #1
 800df1a:	9304      	str	r3, [sp, #16]
 800df1c:	9307      	str	r3, [sp, #28]
 800df1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df22:	931a      	str	r3, [sp, #104]	@ 0x68
 800df24:	4654      	mov	r4, sl
 800df26:	2205      	movs	r2, #5
 800df28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df2c:	484e      	ldr	r0, [pc, #312]	@ (800e068 <_svfiprintf_r+0x1e4>)
 800df2e:	f7f2 f94f 	bl	80001d0 <memchr>
 800df32:	9a04      	ldr	r2, [sp, #16]
 800df34:	b9d8      	cbnz	r0, 800df6e <_svfiprintf_r+0xea>
 800df36:	06d0      	lsls	r0, r2, #27
 800df38:	bf44      	itt	mi
 800df3a:	2320      	movmi	r3, #32
 800df3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df40:	0711      	lsls	r1, r2, #28
 800df42:	bf44      	itt	mi
 800df44:	232b      	movmi	r3, #43	@ 0x2b
 800df46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df4a:	f89a 3000 	ldrb.w	r3, [sl]
 800df4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800df50:	d015      	beq.n	800df7e <_svfiprintf_r+0xfa>
 800df52:	9a07      	ldr	r2, [sp, #28]
 800df54:	4654      	mov	r4, sl
 800df56:	2000      	movs	r0, #0
 800df58:	f04f 0c0a 	mov.w	ip, #10
 800df5c:	4621      	mov	r1, r4
 800df5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df62:	3b30      	subs	r3, #48	@ 0x30
 800df64:	2b09      	cmp	r3, #9
 800df66:	d94b      	bls.n	800e000 <_svfiprintf_r+0x17c>
 800df68:	b1b0      	cbz	r0, 800df98 <_svfiprintf_r+0x114>
 800df6a:	9207      	str	r2, [sp, #28]
 800df6c:	e014      	b.n	800df98 <_svfiprintf_r+0x114>
 800df6e:	eba0 0308 	sub.w	r3, r0, r8
 800df72:	fa09 f303 	lsl.w	r3, r9, r3
 800df76:	4313      	orrs	r3, r2
 800df78:	9304      	str	r3, [sp, #16]
 800df7a:	46a2      	mov	sl, r4
 800df7c:	e7d2      	b.n	800df24 <_svfiprintf_r+0xa0>
 800df7e:	9b03      	ldr	r3, [sp, #12]
 800df80:	1d19      	adds	r1, r3, #4
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	9103      	str	r1, [sp, #12]
 800df86:	2b00      	cmp	r3, #0
 800df88:	bfbb      	ittet	lt
 800df8a:	425b      	neglt	r3, r3
 800df8c:	f042 0202 	orrlt.w	r2, r2, #2
 800df90:	9307      	strge	r3, [sp, #28]
 800df92:	9307      	strlt	r3, [sp, #28]
 800df94:	bfb8      	it	lt
 800df96:	9204      	strlt	r2, [sp, #16]
 800df98:	7823      	ldrb	r3, [r4, #0]
 800df9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800df9c:	d10a      	bne.n	800dfb4 <_svfiprintf_r+0x130>
 800df9e:	7863      	ldrb	r3, [r4, #1]
 800dfa0:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfa2:	d132      	bne.n	800e00a <_svfiprintf_r+0x186>
 800dfa4:	9b03      	ldr	r3, [sp, #12]
 800dfa6:	1d1a      	adds	r2, r3, #4
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	9203      	str	r2, [sp, #12]
 800dfac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dfb0:	3402      	adds	r4, #2
 800dfb2:	9305      	str	r3, [sp, #20]
 800dfb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e078 <_svfiprintf_r+0x1f4>
 800dfb8:	7821      	ldrb	r1, [r4, #0]
 800dfba:	2203      	movs	r2, #3
 800dfbc:	4650      	mov	r0, sl
 800dfbe:	f7f2 f907 	bl	80001d0 <memchr>
 800dfc2:	b138      	cbz	r0, 800dfd4 <_svfiprintf_r+0x150>
 800dfc4:	9b04      	ldr	r3, [sp, #16]
 800dfc6:	eba0 000a 	sub.w	r0, r0, sl
 800dfca:	2240      	movs	r2, #64	@ 0x40
 800dfcc:	4082      	lsls	r2, r0
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	3401      	adds	r4, #1
 800dfd2:	9304      	str	r3, [sp, #16]
 800dfd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfd8:	4824      	ldr	r0, [pc, #144]	@ (800e06c <_svfiprintf_r+0x1e8>)
 800dfda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dfde:	2206      	movs	r2, #6
 800dfe0:	f7f2 f8f6 	bl	80001d0 <memchr>
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	d036      	beq.n	800e056 <_svfiprintf_r+0x1d2>
 800dfe8:	4b21      	ldr	r3, [pc, #132]	@ (800e070 <_svfiprintf_r+0x1ec>)
 800dfea:	bb1b      	cbnz	r3, 800e034 <_svfiprintf_r+0x1b0>
 800dfec:	9b03      	ldr	r3, [sp, #12]
 800dfee:	3307      	adds	r3, #7
 800dff0:	f023 0307 	bic.w	r3, r3, #7
 800dff4:	3308      	adds	r3, #8
 800dff6:	9303      	str	r3, [sp, #12]
 800dff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dffa:	4433      	add	r3, r6
 800dffc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dffe:	e76a      	b.n	800ded6 <_svfiprintf_r+0x52>
 800e000:	fb0c 3202 	mla	r2, ip, r2, r3
 800e004:	460c      	mov	r4, r1
 800e006:	2001      	movs	r0, #1
 800e008:	e7a8      	b.n	800df5c <_svfiprintf_r+0xd8>
 800e00a:	2300      	movs	r3, #0
 800e00c:	3401      	adds	r4, #1
 800e00e:	9305      	str	r3, [sp, #20]
 800e010:	4619      	mov	r1, r3
 800e012:	f04f 0c0a 	mov.w	ip, #10
 800e016:	4620      	mov	r0, r4
 800e018:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e01c:	3a30      	subs	r2, #48	@ 0x30
 800e01e:	2a09      	cmp	r2, #9
 800e020:	d903      	bls.n	800e02a <_svfiprintf_r+0x1a6>
 800e022:	2b00      	cmp	r3, #0
 800e024:	d0c6      	beq.n	800dfb4 <_svfiprintf_r+0x130>
 800e026:	9105      	str	r1, [sp, #20]
 800e028:	e7c4      	b.n	800dfb4 <_svfiprintf_r+0x130>
 800e02a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e02e:	4604      	mov	r4, r0
 800e030:	2301      	movs	r3, #1
 800e032:	e7f0      	b.n	800e016 <_svfiprintf_r+0x192>
 800e034:	ab03      	add	r3, sp, #12
 800e036:	9300      	str	r3, [sp, #0]
 800e038:	462a      	mov	r2, r5
 800e03a:	4b0e      	ldr	r3, [pc, #56]	@ (800e074 <_svfiprintf_r+0x1f0>)
 800e03c:	a904      	add	r1, sp, #16
 800e03e:	4638      	mov	r0, r7
 800e040:	f7fd fe96 	bl	800bd70 <_printf_float>
 800e044:	1c42      	adds	r2, r0, #1
 800e046:	4606      	mov	r6, r0
 800e048:	d1d6      	bne.n	800dff8 <_svfiprintf_r+0x174>
 800e04a:	89ab      	ldrh	r3, [r5, #12]
 800e04c:	065b      	lsls	r3, r3, #25
 800e04e:	f53f af2d 	bmi.w	800deac <_svfiprintf_r+0x28>
 800e052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e054:	e72c      	b.n	800deb0 <_svfiprintf_r+0x2c>
 800e056:	ab03      	add	r3, sp, #12
 800e058:	9300      	str	r3, [sp, #0]
 800e05a:	462a      	mov	r2, r5
 800e05c:	4b05      	ldr	r3, [pc, #20]	@ (800e074 <_svfiprintf_r+0x1f0>)
 800e05e:	a904      	add	r1, sp, #16
 800e060:	4638      	mov	r0, r7
 800e062:	f7fe f91d 	bl	800c2a0 <_printf_i>
 800e066:	e7ed      	b.n	800e044 <_svfiprintf_r+0x1c0>
 800e068:	0800f4a0 	.word	0x0800f4a0
 800e06c:	0800f4aa 	.word	0x0800f4aa
 800e070:	0800bd71 	.word	0x0800bd71
 800e074:	0800ddcd 	.word	0x0800ddcd
 800e078:	0800f4a6 	.word	0x0800f4a6

0800e07c <__sflush_r>:
 800e07c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e084:	0716      	lsls	r6, r2, #28
 800e086:	4605      	mov	r5, r0
 800e088:	460c      	mov	r4, r1
 800e08a:	d454      	bmi.n	800e136 <__sflush_r+0xba>
 800e08c:	684b      	ldr	r3, [r1, #4]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	dc02      	bgt.n	800e098 <__sflush_r+0x1c>
 800e092:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e094:	2b00      	cmp	r3, #0
 800e096:	dd48      	ble.n	800e12a <__sflush_r+0xae>
 800e098:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e09a:	2e00      	cmp	r6, #0
 800e09c:	d045      	beq.n	800e12a <__sflush_r+0xae>
 800e09e:	2300      	movs	r3, #0
 800e0a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e0a4:	682f      	ldr	r7, [r5, #0]
 800e0a6:	6a21      	ldr	r1, [r4, #32]
 800e0a8:	602b      	str	r3, [r5, #0]
 800e0aa:	d030      	beq.n	800e10e <__sflush_r+0x92>
 800e0ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e0ae:	89a3      	ldrh	r3, [r4, #12]
 800e0b0:	0759      	lsls	r1, r3, #29
 800e0b2:	d505      	bpl.n	800e0c0 <__sflush_r+0x44>
 800e0b4:	6863      	ldr	r3, [r4, #4]
 800e0b6:	1ad2      	subs	r2, r2, r3
 800e0b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e0ba:	b10b      	cbz	r3, 800e0c0 <__sflush_r+0x44>
 800e0bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e0be:	1ad2      	subs	r2, r2, r3
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e0c4:	6a21      	ldr	r1, [r4, #32]
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	47b0      	blx	r6
 800e0ca:	1c43      	adds	r3, r0, #1
 800e0cc:	89a3      	ldrh	r3, [r4, #12]
 800e0ce:	d106      	bne.n	800e0de <__sflush_r+0x62>
 800e0d0:	6829      	ldr	r1, [r5, #0]
 800e0d2:	291d      	cmp	r1, #29
 800e0d4:	d82b      	bhi.n	800e12e <__sflush_r+0xb2>
 800e0d6:	4a2a      	ldr	r2, [pc, #168]	@ (800e180 <__sflush_r+0x104>)
 800e0d8:	410a      	asrs	r2, r1
 800e0da:	07d6      	lsls	r6, r2, #31
 800e0dc:	d427      	bmi.n	800e12e <__sflush_r+0xb2>
 800e0de:	2200      	movs	r2, #0
 800e0e0:	6062      	str	r2, [r4, #4]
 800e0e2:	04d9      	lsls	r1, r3, #19
 800e0e4:	6922      	ldr	r2, [r4, #16]
 800e0e6:	6022      	str	r2, [r4, #0]
 800e0e8:	d504      	bpl.n	800e0f4 <__sflush_r+0x78>
 800e0ea:	1c42      	adds	r2, r0, #1
 800e0ec:	d101      	bne.n	800e0f2 <__sflush_r+0x76>
 800e0ee:	682b      	ldr	r3, [r5, #0]
 800e0f0:	b903      	cbnz	r3, 800e0f4 <__sflush_r+0x78>
 800e0f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800e0f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e0f6:	602f      	str	r7, [r5, #0]
 800e0f8:	b1b9      	cbz	r1, 800e12a <__sflush_r+0xae>
 800e0fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e0fe:	4299      	cmp	r1, r3
 800e100:	d002      	beq.n	800e108 <__sflush_r+0x8c>
 800e102:	4628      	mov	r0, r5
 800e104:	f7ff f9e0 	bl	800d4c8 <_free_r>
 800e108:	2300      	movs	r3, #0
 800e10a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e10c:	e00d      	b.n	800e12a <__sflush_r+0xae>
 800e10e:	2301      	movs	r3, #1
 800e110:	4628      	mov	r0, r5
 800e112:	47b0      	blx	r6
 800e114:	4602      	mov	r2, r0
 800e116:	1c50      	adds	r0, r2, #1
 800e118:	d1c9      	bne.n	800e0ae <__sflush_r+0x32>
 800e11a:	682b      	ldr	r3, [r5, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d0c6      	beq.n	800e0ae <__sflush_r+0x32>
 800e120:	2b1d      	cmp	r3, #29
 800e122:	d001      	beq.n	800e128 <__sflush_r+0xac>
 800e124:	2b16      	cmp	r3, #22
 800e126:	d11e      	bne.n	800e166 <__sflush_r+0xea>
 800e128:	602f      	str	r7, [r5, #0]
 800e12a:	2000      	movs	r0, #0
 800e12c:	e022      	b.n	800e174 <__sflush_r+0xf8>
 800e12e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e132:	b21b      	sxth	r3, r3
 800e134:	e01b      	b.n	800e16e <__sflush_r+0xf2>
 800e136:	690f      	ldr	r7, [r1, #16]
 800e138:	2f00      	cmp	r7, #0
 800e13a:	d0f6      	beq.n	800e12a <__sflush_r+0xae>
 800e13c:	0793      	lsls	r3, r2, #30
 800e13e:	680e      	ldr	r6, [r1, #0]
 800e140:	bf08      	it	eq
 800e142:	694b      	ldreq	r3, [r1, #20]
 800e144:	600f      	str	r7, [r1, #0]
 800e146:	bf18      	it	ne
 800e148:	2300      	movne	r3, #0
 800e14a:	eba6 0807 	sub.w	r8, r6, r7
 800e14e:	608b      	str	r3, [r1, #8]
 800e150:	f1b8 0f00 	cmp.w	r8, #0
 800e154:	dde9      	ble.n	800e12a <__sflush_r+0xae>
 800e156:	6a21      	ldr	r1, [r4, #32]
 800e158:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e15a:	4643      	mov	r3, r8
 800e15c:	463a      	mov	r2, r7
 800e15e:	4628      	mov	r0, r5
 800e160:	47b0      	blx	r6
 800e162:	2800      	cmp	r0, #0
 800e164:	dc08      	bgt.n	800e178 <__sflush_r+0xfc>
 800e166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e16a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e16e:	81a3      	strh	r3, [r4, #12]
 800e170:	f04f 30ff 	mov.w	r0, #4294967295
 800e174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e178:	4407      	add	r7, r0
 800e17a:	eba8 0800 	sub.w	r8, r8, r0
 800e17e:	e7e7      	b.n	800e150 <__sflush_r+0xd4>
 800e180:	dfbffffe 	.word	0xdfbffffe

0800e184 <_fflush_r>:
 800e184:	b538      	push	{r3, r4, r5, lr}
 800e186:	690b      	ldr	r3, [r1, #16]
 800e188:	4605      	mov	r5, r0
 800e18a:	460c      	mov	r4, r1
 800e18c:	b913      	cbnz	r3, 800e194 <_fflush_r+0x10>
 800e18e:	2500      	movs	r5, #0
 800e190:	4628      	mov	r0, r5
 800e192:	bd38      	pop	{r3, r4, r5, pc}
 800e194:	b118      	cbz	r0, 800e19e <_fflush_r+0x1a>
 800e196:	6a03      	ldr	r3, [r0, #32]
 800e198:	b90b      	cbnz	r3, 800e19e <_fflush_r+0x1a>
 800e19a:	f7fe fa2d 	bl	800c5f8 <__sinit>
 800e19e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d0f3      	beq.n	800e18e <_fflush_r+0xa>
 800e1a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e1a8:	07d0      	lsls	r0, r2, #31
 800e1aa:	d404      	bmi.n	800e1b6 <_fflush_r+0x32>
 800e1ac:	0599      	lsls	r1, r3, #22
 800e1ae:	d402      	bmi.n	800e1b6 <_fflush_r+0x32>
 800e1b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1b2:	f7fe fb38 	bl	800c826 <__retarget_lock_acquire_recursive>
 800e1b6:	4628      	mov	r0, r5
 800e1b8:	4621      	mov	r1, r4
 800e1ba:	f7ff ff5f 	bl	800e07c <__sflush_r>
 800e1be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e1c0:	07da      	lsls	r2, r3, #31
 800e1c2:	4605      	mov	r5, r0
 800e1c4:	d4e4      	bmi.n	800e190 <_fflush_r+0xc>
 800e1c6:	89a3      	ldrh	r3, [r4, #12]
 800e1c8:	059b      	lsls	r3, r3, #22
 800e1ca:	d4e1      	bmi.n	800e190 <_fflush_r+0xc>
 800e1cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1ce:	f7fe fb2b 	bl	800c828 <__retarget_lock_release_recursive>
 800e1d2:	e7dd      	b.n	800e190 <_fflush_r+0xc>

0800e1d4 <memmove>:
 800e1d4:	4288      	cmp	r0, r1
 800e1d6:	b510      	push	{r4, lr}
 800e1d8:	eb01 0402 	add.w	r4, r1, r2
 800e1dc:	d902      	bls.n	800e1e4 <memmove+0x10>
 800e1de:	4284      	cmp	r4, r0
 800e1e0:	4623      	mov	r3, r4
 800e1e2:	d807      	bhi.n	800e1f4 <memmove+0x20>
 800e1e4:	1e43      	subs	r3, r0, #1
 800e1e6:	42a1      	cmp	r1, r4
 800e1e8:	d008      	beq.n	800e1fc <memmove+0x28>
 800e1ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e1f2:	e7f8      	b.n	800e1e6 <memmove+0x12>
 800e1f4:	4402      	add	r2, r0
 800e1f6:	4601      	mov	r1, r0
 800e1f8:	428a      	cmp	r2, r1
 800e1fa:	d100      	bne.n	800e1fe <memmove+0x2a>
 800e1fc:	bd10      	pop	{r4, pc}
 800e1fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e202:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e206:	e7f7      	b.n	800e1f8 <memmove+0x24>

0800e208 <_sbrk_r>:
 800e208:	b538      	push	{r3, r4, r5, lr}
 800e20a:	4d06      	ldr	r5, [pc, #24]	@ (800e224 <_sbrk_r+0x1c>)
 800e20c:	2300      	movs	r3, #0
 800e20e:	4604      	mov	r4, r0
 800e210:	4608      	mov	r0, r1
 800e212:	602b      	str	r3, [r5, #0]
 800e214:	f7f4 fb68 	bl	80028e8 <_sbrk>
 800e218:	1c43      	adds	r3, r0, #1
 800e21a:	d102      	bne.n	800e222 <_sbrk_r+0x1a>
 800e21c:	682b      	ldr	r3, [r5, #0]
 800e21e:	b103      	cbz	r3, 800e222 <_sbrk_r+0x1a>
 800e220:	6023      	str	r3, [r4, #0]
 800e222:	bd38      	pop	{r3, r4, r5, pc}
 800e224:	20002394 	.word	0x20002394

0800e228 <memcpy>:
 800e228:	440a      	add	r2, r1
 800e22a:	4291      	cmp	r1, r2
 800e22c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e230:	d100      	bne.n	800e234 <memcpy+0xc>
 800e232:	4770      	bx	lr
 800e234:	b510      	push	{r4, lr}
 800e236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e23a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e23e:	4291      	cmp	r1, r2
 800e240:	d1f9      	bne.n	800e236 <memcpy+0xe>
 800e242:	bd10      	pop	{r4, pc}

0800e244 <__assert_func>:
 800e244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e246:	4614      	mov	r4, r2
 800e248:	461a      	mov	r2, r3
 800e24a:	4b09      	ldr	r3, [pc, #36]	@ (800e270 <__assert_func+0x2c>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	4605      	mov	r5, r0
 800e250:	68d8      	ldr	r0, [r3, #12]
 800e252:	b954      	cbnz	r4, 800e26a <__assert_func+0x26>
 800e254:	4b07      	ldr	r3, [pc, #28]	@ (800e274 <__assert_func+0x30>)
 800e256:	461c      	mov	r4, r3
 800e258:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e25c:	9100      	str	r1, [sp, #0]
 800e25e:	462b      	mov	r3, r5
 800e260:	4905      	ldr	r1, [pc, #20]	@ (800e278 <__assert_func+0x34>)
 800e262:	f000 f86f 	bl	800e344 <fiprintf>
 800e266:	f000 f87f 	bl	800e368 <abort>
 800e26a:	4b04      	ldr	r3, [pc, #16]	@ (800e27c <__assert_func+0x38>)
 800e26c:	e7f4      	b.n	800e258 <__assert_func+0x14>
 800e26e:	bf00      	nop
 800e270:	2000010c 	.word	0x2000010c
 800e274:	0800f4f6 	.word	0x0800f4f6
 800e278:	0800f4c8 	.word	0x0800f4c8
 800e27c:	0800f4bb 	.word	0x0800f4bb

0800e280 <_calloc_r>:
 800e280:	b570      	push	{r4, r5, r6, lr}
 800e282:	fba1 5402 	umull	r5, r4, r1, r2
 800e286:	b93c      	cbnz	r4, 800e298 <_calloc_r+0x18>
 800e288:	4629      	mov	r1, r5
 800e28a:	f7ff f991 	bl	800d5b0 <_malloc_r>
 800e28e:	4606      	mov	r6, r0
 800e290:	b928      	cbnz	r0, 800e29e <_calloc_r+0x1e>
 800e292:	2600      	movs	r6, #0
 800e294:	4630      	mov	r0, r6
 800e296:	bd70      	pop	{r4, r5, r6, pc}
 800e298:	220c      	movs	r2, #12
 800e29a:	6002      	str	r2, [r0, #0]
 800e29c:	e7f9      	b.n	800e292 <_calloc_r+0x12>
 800e29e:	462a      	mov	r2, r5
 800e2a0:	4621      	mov	r1, r4
 800e2a2:	f7fe fa42 	bl	800c72a <memset>
 800e2a6:	e7f5      	b.n	800e294 <_calloc_r+0x14>

0800e2a8 <__ascii_mbtowc>:
 800e2a8:	b082      	sub	sp, #8
 800e2aa:	b901      	cbnz	r1, 800e2ae <__ascii_mbtowc+0x6>
 800e2ac:	a901      	add	r1, sp, #4
 800e2ae:	b142      	cbz	r2, 800e2c2 <__ascii_mbtowc+0x1a>
 800e2b0:	b14b      	cbz	r3, 800e2c6 <__ascii_mbtowc+0x1e>
 800e2b2:	7813      	ldrb	r3, [r2, #0]
 800e2b4:	600b      	str	r3, [r1, #0]
 800e2b6:	7812      	ldrb	r2, [r2, #0]
 800e2b8:	1e10      	subs	r0, r2, #0
 800e2ba:	bf18      	it	ne
 800e2bc:	2001      	movne	r0, #1
 800e2be:	b002      	add	sp, #8
 800e2c0:	4770      	bx	lr
 800e2c2:	4610      	mov	r0, r2
 800e2c4:	e7fb      	b.n	800e2be <__ascii_mbtowc+0x16>
 800e2c6:	f06f 0001 	mvn.w	r0, #1
 800e2ca:	e7f8      	b.n	800e2be <__ascii_mbtowc+0x16>

0800e2cc <_realloc_r>:
 800e2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2d0:	4680      	mov	r8, r0
 800e2d2:	4615      	mov	r5, r2
 800e2d4:	460c      	mov	r4, r1
 800e2d6:	b921      	cbnz	r1, 800e2e2 <_realloc_r+0x16>
 800e2d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2dc:	4611      	mov	r1, r2
 800e2de:	f7ff b967 	b.w	800d5b0 <_malloc_r>
 800e2e2:	b92a      	cbnz	r2, 800e2f0 <_realloc_r+0x24>
 800e2e4:	f7ff f8f0 	bl	800d4c8 <_free_r>
 800e2e8:	2400      	movs	r4, #0
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2f0:	f000 f841 	bl	800e376 <_malloc_usable_size_r>
 800e2f4:	4285      	cmp	r5, r0
 800e2f6:	4606      	mov	r6, r0
 800e2f8:	d802      	bhi.n	800e300 <_realloc_r+0x34>
 800e2fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e2fe:	d8f4      	bhi.n	800e2ea <_realloc_r+0x1e>
 800e300:	4629      	mov	r1, r5
 800e302:	4640      	mov	r0, r8
 800e304:	f7ff f954 	bl	800d5b0 <_malloc_r>
 800e308:	4607      	mov	r7, r0
 800e30a:	2800      	cmp	r0, #0
 800e30c:	d0ec      	beq.n	800e2e8 <_realloc_r+0x1c>
 800e30e:	42b5      	cmp	r5, r6
 800e310:	462a      	mov	r2, r5
 800e312:	4621      	mov	r1, r4
 800e314:	bf28      	it	cs
 800e316:	4632      	movcs	r2, r6
 800e318:	f7ff ff86 	bl	800e228 <memcpy>
 800e31c:	4621      	mov	r1, r4
 800e31e:	4640      	mov	r0, r8
 800e320:	f7ff f8d2 	bl	800d4c8 <_free_r>
 800e324:	463c      	mov	r4, r7
 800e326:	e7e0      	b.n	800e2ea <_realloc_r+0x1e>

0800e328 <__ascii_wctomb>:
 800e328:	4603      	mov	r3, r0
 800e32a:	4608      	mov	r0, r1
 800e32c:	b141      	cbz	r1, 800e340 <__ascii_wctomb+0x18>
 800e32e:	2aff      	cmp	r2, #255	@ 0xff
 800e330:	d904      	bls.n	800e33c <__ascii_wctomb+0x14>
 800e332:	228a      	movs	r2, #138	@ 0x8a
 800e334:	601a      	str	r2, [r3, #0]
 800e336:	f04f 30ff 	mov.w	r0, #4294967295
 800e33a:	4770      	bx	lr
 800e33c:	700a      	strb	r2, [r1, #0]
 800e33e:	2001      	movs	r0, #1
 800e340:	4770      	bx	lr
	...

0800e344 <fiprintf>:
 800e344:	b40e      	push	{r1, r2, r3}
 800e346:	b503      	push	{r0, r1, lr}
 800e348:	4601      	mov	r1, r0
 800e34a:	ab03      	add	r3, sp, #12
 800e34c:	4805      	ldr	r0, [pc, #20]	@ (800e364 <fiprintf+0x20>)
 800e34e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e352:	6800      	ldr	r0, [r0, #0]
 800e354:	9301      	str	r3, [sp, #4]
 800e356:	f000 f83f 	bl	800e3d8 <_vfiprintf_r>
 800e35a:	b002      	add	sp, #8
 800e35c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e360:	b003      	add	sp, #12
 800e362:	4770      	bx	lr
 800e364:	2000010c 	.word	0x2000010c

0800e368 <abort>:
 800e368:	b508      	push	{r3, lr}
 800e36a:	2006      	movs	r0, #6
 800e36c:	f000 fa08 	bl	800e780 <raise>
 800e370:	2001      	movs	r0, #1
 800e372:	f7f4 fa41 	bl	80027f8 <_exit>

0800e376 <_malloc_usable_size_r>:
 800e376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e37a:	1f18      	subs	r0, r3, #4
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	bfbc      	itt	lt
 800e380:	580b      	ldrlt	r3, [r1, r0]
 800e382:	18c0      	addlt	r0, r0, r3
 800e384:	4770      	bx	lr

0800e386 <__sfputc_r>:
 800e386:	6893      	ldr	r3, [r2, #8]
 800e388:	3b01      	subs	r3, #1
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	b410      	push	{r4}
 800e38e:	6093      	str	r3, [r2, #8]
 800e390:	da08      	bge.n	800e3a4 <__sfputc_r+0x1e>
 800e392:	6994      	ldr	r4, [r2, #24]
 800e394:	42a3      	cmp	r3, r4
 800e396:	db01      	blt.n	800e39c <__sfputc_r+0x16>
 800e398:	290a      	cmp	r1, #10
 800e39a:	d103      	bne.n	800e3a4 <__sfputc_r+0x1e>
 800e39c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3a0:	f000 b932 	b.w	800e608 <__swbuf_r>
 800e3a4:	6813      	ldr	r3, [r2, #0]
 800e3a6:	1c58      	adds	r0, r3, #1
 800e3a8:	6010      	str	r0, [r2, #0]
 800e3aa:	7019      	strb	r1, [r3, #0]
 800e3ac:	4608      	mov	r0, r1
 800e3ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3b2:	4770      	bx	lr

0800e3b4 <__sfputs_r>:
 800e3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3b6:	4606      	mov	r6, r0
 800e3b8:	460f      	mov	r7, r1
 800e3ba:	4614      	mov	r4, r2
 800e3bc:	18d5      	adds	r5, r2, r3
 800e3be:	42ac      	cmp	r4, r5
 800e3c0:	d101      	bne.n	800e3c6 <__sfputs_r+0x12>
 800e3c2:	2000      	movs	r0, #0
 800e3c4:	e007      	b.n	800e3d6 <__sfputs_r+0x22>
 800e3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ca:	463a      	mov	r2, r7
 800e3cc:	4630      	mov	r0, r6
 800e3ce:	f7ff ffda 	bl	800e386 <__sfputc_r>
 800e3d2:	1c43      	adds	r3, r0, #1
 800e3d4:	d1f3      	bne.n	800e3be <__sfputs_r+0xa>
 800e3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e3d8 <_vfiprintf_r>:
 800e3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3dc:	460d      	mov	r5, r1
 800e3de:	b09d      	sub	sp, #116	@ 0x74
 800e3e0:	4614      	mov	r4, r2
 800e3e2:	4698      	mov	r8, r3
 800e3e4:	4606      	mov	r6, r0
 800e3e6:	b118      	cbz	r0, 800e3f0 <_vfiprintf_r+0x18>
 800e3e8:	6a03      	ldr	r3, [r0, #32]
 800e3ea:	b90b      	cbnz	r3, 800e3f0 <_vfiprintf_r+0x18>
 800e3ec:	f7fe f904 	bl	800c5f8 <__sinit>
 800e3f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3f2:	07d9      	lsls	r1, r3, #31
 800e3f4:	d405      	bmi.n	800e402 <_vfiprintf_r+0x2a>
 800e3f6:	89ab      	ldrh	r3, [r5, #12]
 800e3f8:	059a      	lsls	r2, r3, #22
 800e3fa:	d402      	bmi.n	800e402 <_vfiprintf_r+0x2a>
 800e3fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3fe:	f7fe fa12 	bl	800c826 <__retarget_lock_acquire_recursive>
 800e402:	89ab      	ldrh	r3, [r5, #12]
 800e404:	071b      	lsls	r3, r3, #28
 800e406:	d501      	bpl.n	800e40c <_vfiprintf_r+0x34>
 800e408:	692b      	ldr	r3, [r5, #16]
 800e40a:	b99b      	cbnz	r3, 800e434 <_vfiprintf_r+0x5c>
 800e40c:	4629      	mov	r1, r5
 800e40e:	4630      	mov	r0, r6
 800e410:	f000 f938 	bl	800e684 <__swsetup_r>
 800e414:	b170      	cbz	r0, 800e434 <_vfiprintf_r+0x5c>
 800e416:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e418:	07dc      	lsls	r4, r3, #31
 800e41a:	d504      	bpl.n	800e426 <_vfiprintf_r+0x4e>
 800e41c:	f04f 30ff 	mov.w	r0, #4294967295
 800e420:	b01d      	add	sp, #116	@ 0x74
 800e422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e426:	89ab      	ldrh	r3, [r5, #12]
 800e428:	0598      	lsls	r0, r3, #22
 800e42a:	d4f7      	bmi.n	800e41c <_vfiprintf_r+0x44>
 800e42c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e42e:	f7fe f9fb 	bl	800c828 <__retarget_lock_release_recursive>
 800e432:	e7f3      	b.n	800e41c <_vfiprintf_r+0x44>
 800e434:	2300      	movs	r3, #0
 800e436:	9309      	str	r3, [sp, #36]	@ 0x24
 800e438:	2320      	movs	r3, #32
 800e43a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e43e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e442:	2330      	movs	r3, #48	@ 0x30
 800e444:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e5f4 <_vfiprintf_r+0x21c>
 800e448:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e44c:	f04f 0901 	mov.w	r9, #1
 800e450:	4623      	mov	r3, r4
 800e452:	469a      	mov	sl, r3
 800e454:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e458:	b10a      	cbz	r2, 800e45e <_vfiprintf_r+0x86>
 800e45a:	2a25      	cmp	r2, #37	@ 0x25
 800e45c:	d1f9      	bne.n	800e452 <_vfiprintf_r+0x7a>
 800e45e:	ebba 0b04 	subs.w	fp, sl, r4
 800e462:	d00b      	beq.n	800e47c <_vfiprintf_r+0xa4>
 800e464:	465b      	mov	r3, fp
 800e466:	4622      	mov	r2, r4
 800e468:	4629      	mov	r1, r5
 800e46a:	4630      	mov	r0, r6
 800e46c:	f7ff ffa2 	bl	800e3b4 <__sfputs_r>
 800e470:	3001      	adds	r0, #1
 800e472:	f000 80a7 	beq.w	800e5c4 <_vfiprintf_r+0x1ec>
 800e476:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e478:	445a      	add	r2, fp
 800e47a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e47c:	f89a 3000 	ldrb.w	r3, [sl]
 800e480:	2b00      	cmp	r3, #0
 800e482:	f000 809f 	beq.w	800e5c4 <_vfiprintf_r+0x1ec>
 800e486:	2300      	movs	r3, #0
 800e488:	f04f 32ff 	mov.w	r2, #4294967295
 800e48c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e490:	f10a 0a01 	add.w	sl, sl, #1
 800e494:	9304      	str	r3, [sp, #16]
 800e496:	9307      	str	r3, [sp, #28]
 800e498:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e49c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e49e:	4654      	mov	r4, sl
 800e4a0:	2205      	movs	r2, #5
 800e4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4a6:	4853      	ldr	r0, [pc, #332]	@ (800e5f4 <_vfiprintf_r+0x21c>)
 800e4a8:	f7f1 fe92 	bl	80001d0 <memchr>
 800e4ac:	9a04      	ldr	r2, [sp, #16]
 800e4ae:	b9d8      	cbnz	r0, 800e4e8 <_vfiprintf_r+0x110>
 800e4b0:	06d1      	lsls	r1, r2, #27
 800e4b2:	bf44      	itt	mi
 800e4b4:	2320      	movmi	r3, #32
 800e4b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4ba:	0713      	lsls	r3, r2, #28
 800e4bc:	bf44      	itt	mi
 800e4be:	232b      	movmi	r3, #43	@ 0x2b
 800e4c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4c4:	f89a 3000 	ldrb.w	r3, [sl]
 800e4c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4ca:	d015      	beq.n	800e4f8 <_vfiprintf_r+0x120>
 800e4cc:	9a07      	ldr	r2, [sp, #28]
 800e4ce:	4654      	mov	r4, sl
 800e4d0:	2000      	movs	r0, #0
 800e4d2:	f04f 0c0a 	mov.w	ip, #10
 800e4d6:	4621      	mov	r1, r4
 800e4d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4dc:	3b30      	subs	r3, #48	@ 0x30
 800e4de:	2b09      	cmp	r3, #9
 800e4e0:	d94b      	bls.n	800e57a <_vfiprintf_r+0x1a2>
 800e4e2:	b1b0      	cbz	r0, 800e512 <_vfiprintf_r+0x13a>
 800e4e4:	9207      	str	r2, [sp, #28]
 800e4e6:	e014      	b.n	800e512 <_vfiprintf_r+0x13a>
 800e4e8:	eba0 0308 	sub.w	r3, r0, r8
 800e4ec:	fa09 f303 	lsl.w	r3, r9, r3
 800e4f0:	4313      	orrs	r3, r2
 800e4f2:	9304      	str	r3, [sp, #16]
 800e4f4:	46a2      	mov	sl, r4
 800e4f6:	e7d2      	b.n	800e49e <_vfiprintf_r+0xc6>
 800e4f8:	9b03      	ldr	r3, [sp, #12]
 800e4fa:	1d19      	adds	r1, r3, #4
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	9103      	str	r1, [sp, #12]
 800e500:	2b00      	cmp	r3, #0
 800e502:	bfbb      	ittet	lt
 800e504:	425b      	neglt	r3, r3
 800e506:	f042 0202 	orrlt.w	r2, r2, #2
 800e50a:	9307      	strge	r3, [sp, #28]
 800e50c:	9307      	strlt	r3, [sp, #28]
 800e50e:	bfb8      	it	lt
 800e510:	9204      	strlt	r2, [sp, #16]
 800e512:	7823      	ldrb	r3, [r4, #0]
 800e514:	2b2e      	cmp	r3, #46	@ 0x2e
 800e516:	d10a      	bne.n	800e52e <_vfiprintf_r+0x156>
 800e518:	7863      	ldrb	r3, [r4, #1]
 800e51a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e51c:	d132      	bne.n	800e584 <_vfiprintf_r+0x1ac>
 800e51e:	9b03      	ldr	r3, [sp, #12]
 800e520:	1d1a      	adds	r2, r3, #4
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	9203      	str	r2, [sp, #12]
 800e526:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e52a:	3402      	adds	r4, #2
 800e52c:	9305      	str	r3, [sp, #20]
 800e52e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e604 <_vfiprintf_r+0x22c>
 800e532:	7821      	ldrb	r1, [r4, #0]
 800e534:	2203      	movs	r2, #3
 800e536:	4650      	mov	r0, sl
 800e538:	f7f1 fe4a 	bl	80001d0 <memchr>
 800e53c:	b138      	cbz	r0, 800e54e <_vfiprintf_r+0x176>
 800e53e:	9b04      	ldr	r3, [sp, #16]
 800e540:	eba0 000a 	sub.w	r0, r0, sl
 800e544:	2240      	movs	r2, #64	@ 0x40
 800e546:	4082      	lsls	r2, r0
 800e548:	4313      	orrs	r3, r2
 800e54a:	3401      	adds	r4, #1
 800e54c:	9304      	str	r3, [sp, #16]
 800e54e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e552:	4829      	ldr	r0, [pc, #164]	@ (800e5f8 <_vfiprintf_r+0x220>)
 800e554:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e558:	2206      	movs	r2, #6
 800e55a:	f7f1 fe39 	bl	80001d0 <memchr>
 800e55e:	2800      	cmp	r0, #0
 800e560:	d03f      	beq.n	800e5e2 <_vfiprintf_r+0x20a>
 800e562:	4b26      	ldr	r3, [pc, #152]	@ (800e5fc <_vfiprintf_r+0x224>)
 800e564:	bb1b      	cbnz	r3, 800e5ae <_vfiprintf_r+0x1d6>
 800e566:	9b03      	ldr	r3, [sp, #12]
 800e568:	3307      	adds	r3, #7
 800e56a:	f023 0307 	bic.w	r3, r3, #7
 800e56e:	3308      	adds	r3, #8
 800e570:	9303      	str	r3, [sp, #12]
 800e572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e574:	443b      	add	r3, r7
 800e576:	9309      	str	r3, [sp, #36]	@ 0x24
 800e578:	e76a      	b.n	800e450 <_vfiprintf_r+0x78>
 800e57a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e57e:	460c      	mov	r4, r1
 800e580:	2001      	movs	r0, #1
 800e582:	e7a8      	b.n	800e4d6 <_vfiprintf_r+0xfe>
 800e584:	2300      	movs	r3, #0
 800e586:	3401      	adds	r4, #1
 800e588:	9305      	str	r3, [sp, #20]
 800e58a:	4619      	mov	r1, r3
 800e58c:	f04f 0c0a 	mov.w	ip, #10
 800e590:	4620      	mov	r0, r4
 800e592:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e596:	3a30      	subs	r2, #48	@ 0x30
 800e598:	2a09      	cmp	r2, #9
 800e59a:	d903      	bls.n	800e5a4 <_vfiprintf_r+0x1cc>
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d0c6      	beq.n	800e52e <_vfiprintf_r+0x156>
 800e5a0:	9105      	str	r1, [sp, #20]
 800e5a2:	e7c4      	b.n	800e52e <_vfiprintf_r+0x156>
 800e5a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5a8:	4604      	mov	r4, r0
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	e7f0      	b.n	800e590 <_vfiprintf_r+0x1b8>
 800e5ae:	ab03      	add	r3, sp, #12
 800e5b0:	9300      	str	r3, [sp, #0]
 800e5b2:	462a      	mov	r2, r5
 800e5b4:	4b12      	ldr	r3, [pc, #72]	@ (800e600 <_vfiprintf_r+0x228>)
 800e5b6:	a904      	add	r1, sp, #16
 800e5b8:	4630      	mov	r0, r6
 800e5ba:	f7fd fbd9 	bl	800bd70 <_printf_float>
 800e5be:	4607      	mov	r7, r0
 800e5c0:	1c78      	adds	r0, r7, #1
 800e5c2:	d1d6      	bne.n	800e572 <_vfiprintf_r+0x19a>
 800e5c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5c6:	07d9      	lsls	r1, r3, #31
 800e5c8:	d405      	bmi.n	800e5d6 <_vfiprintf_r+0x1fe>
 800e5ca:	89ab      	ldrh	r3, [r5, #12]
 800e5cc:	059a      	lsls	r2, r3, #22
 800e5ce:	d402      	bmi.n	800e5d6 <_vfiprintf_r+0x1fe>
 800e5d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5d2:	f7fe f929 	bl	800c828 <__retarget_lock_release_recursive>
 800e5d6:	89ab      	ldrh	r3, [r5, #12]
 800e5d8:	065b      	lsls	r3, r3, #25
 800e5da:	f53f af1f 	bmi.w	800e41c <_vfiprintf_r+0x44>
 800e5de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e5e0:	e71e      	b.n	800e420 <_vfiprintf_r+0x48>
 800e5e2:	ab03      	add	r3, sp, #12
 800e5e4:	9300      	str	r3, [sp, #0]
 800e5e6:	462a      	mov	r2, r5
 800e5e8:	4b05      	ldr	r3, [pc, #20]	@ (800e600 <_vfiprintf_r+0x228>)
 800e5ea:	a904      	add	r1, sp, #16
 800e5ec:	4630      	mov	r0, r6
 800e5ee:	f7fd fe57 	bl	800c2a0 <_printf_i>
 800e5f2:	e7e4      	b.n	800e5be <_vfiprintf_r+0x1e6>
 800e5f4:	0800f4a0 	.word	0x0800f4a0
 800e5f8:	0800f4aa 	.word	0x0800f4aa
 800e5fc:	0800bd71 	.word	0x0800bd71
 800e600:	0800e3b5 	.word	0x0800e3b5
 800e604:	0800f4a6 	.word	0x0800f4a6

0800e608 <__swbuf_r>:
 800e608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e60a:	460e      	mov	r6, r1
 800e60c:	4614      	mov	r4, r2
 800e60e:	4605      	mov	r5, r0
 800e610:	b118      	cbz	r0, 800e61a <__swbuf_r+0x12>
 800e612:	6a03      	ldr	r3, [r0, #32]
 800e614:	b90b      	cbnz	r3, 800e61a <__swbuf_r+0x12>
 800e616:	f7fd ffef 	bl	800c5f8 <__sinit>
 800e61a:	69a3      	ldr	r3, [r4, #24]
 800e61c:	60a3      	str	r3, [r4, #8]
 800e61e:	89a3      	ldrh	r3, [r4, #12]
 800e620:	071a      	lsls	r2, r3, #28
 800e622:	d501      	bpl.n	800e628 <__swbuf_r+0x20>
 800e624:	6923      	ldr	r3, [r4, #16]
 800e626:	b943      	cbnz	r3, 800e63a <__swbuf_r+0x32>
 800e628:	4621      	mov	r1, r4
 800e62a:	4628      	mov	r0, r5
 800e62c:	f000 f82a 	bl	800e684 <__swsetup_r>
 800e630:	b118      	cbz	r0, 800e63a <__swbuf_r+0x32>
 800e632:	f04f 37ff 	mov.w	r7, #4294967295
 800e636:	4638      	mov	r0, r7
 800e638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e63a:	6823      	ldr	r3, [r4, #0]
 800e63c:	6922      	ldr	r2, [r4, #16]
 800e63e:	1a98      	subs	r0, r3, r2
 800e640:	6963      	ldr	r3, [r4, #20]
 800e642:	b2f6      	uxtb	r6, r6
 800e644:	4283      	cmp	r3, r0
 800e646:	4637      	mov	r7, r6
 800e648:	dc05      	bgt.n	800e656 <__swbuf_r+0x4e>
 800e64a:	4621      	mov	r1, r4
 800e64c:	4628      	mov	r0, r5
 800e64e:	f7ff fd99 	bl	800e184 <_fflush_r>
 800e652:	2800      	cmp	r0, #0
 800e654:	d1ed      	bne.n	800e632 <__swbuf_r+0x2a>
 800e656:	68a3      	ldr	r3, [r4, #8]
 800e658:	3b01      	subs	r3, #1
 800e65a:	60a3      	str	r3, [r4, #8]
 800e65c:	6823      	ldr	r3, [r4, #0]
 800e65e:	1c5a      	adds	r2, r3, #1
 800e660:	6022      	str	r2, [r4, #0]
 800e662:	701e      	strb	r6, [r3, #0]
 800e664:	6962      	ldr	r2, [r4, #20]
 800e666:	1c43      	adds	r3, r0, #1
 800e668:	429a      	cmp	r2, r3
 800e66a:	d004      	beq.n	800e676 <__swbuf_r+0x6e>
 800e66c:	89a3      	ldrh	r3, [r4, #12]
 800e66e:	07db      	lsls	r3, r3, #31
 800e670:	d5e1      	bpl.n	800e636 <__swbuf_r+0x2e>
 800e672:	2e0a      	cmp	r6, #10
 800e674:	d1df      	bne.n	800e636 <__swbuf_r+0x2e>
 800e676:	4621      	mov	r1, r4
 800e678:	4628      	mov	r0, r5
 800e67a:	f7ff fd83 	bl	800e184 <_fflush_r>
 800e67e:	2800      	cmp	r0, #0
 800e680:	d0d9      	beq.n	800e636 <__swbuf_r+0x2e>
 800e682:	e7d6      	b.n	800e632 <__swbuf_r+0x2a>

0800e684 <__swsetup_r>:
 800e684:	b538      	push	{r3, r4, r5, lr}
 800e686:	4b29      	ldr	r3, [pc, #164]	@ (800e72c <__swsetup_r+0xa8>)
 800e688:	4605      	mov	r5, r0
 800e68a:	6818      	ldr	r0, [r3, #0]
 800e68c:	460c      	mov	r4, r1
 800e68e:	b118      	cbz	r0, 800e698 <__swsetup_r+0x14>
 800e690:	6a03      	ldr	r3, [r0, #32]
 800e692:	b90b      	cbnz	r3, 800e698 <__swsetup_r+0x14>
 800e694:	f7fd ffb0 	bl	800c5f8 <__sinit>
 800e698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e69c:	0719      	lsls	r1, r3, #28
 800e69e:	d422      	bmi.n	800e6e6 <__swsetup_r+0x62>
 800e6a0:	06da      	lsls	r2, r3, #27
 800e6a2:	d407      	bmi.n	800e6b4 <__swsetup_r+0x30>
 800e6a4:	2209      	movs	r2, #9
 800e6a6:	602a      	str	r2, [r5, #0]
 800e6a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6ac:	81a3      	strh	r3, [r4, #12]
 800e6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e6b2:	e033      	b.n	800e71c <__swsetup_r+0x98>
 800e6b4:	0758      	lsls	r0, r3, #29
 800e6b6:	d512      	bpl.n	800e6de <__swsetup_r+0x5a>
 800e6b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6ba:	b141      	cbz	r1, 800e6ce <__swsetup_r+0x4a>
 800e6bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6c0:	4299      	cmp	r1, r3
 800e6c2:	d002      	beq.n	800e6ca <__swsetup_r+0x46>
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	f7fe feff 	bl	800d4c8 <_free_r>
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6ce:	89a3      	ldrh	r3, [r4, #12]
 800e6d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e6d4:	81a3      	strh	r3, [r4, #12]
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	6063      	str	r3, [r4, #4]
 800e6da:	6923      	ldr	r3, [r4, #16]
 800e6dc:	6023      	str	r3, [r4, #0]
 800e6de:	89a3      	ldrh	r3, [r4, #12]
 800e6e0:	f043 0308 	orr.w	r3, r3, #8
 800e6e4:	81a3      	strh	r3, [r4, #12]
 800e6e6:	6923      	ldr	r3, [r4, #16]
 800e6e8:	b94b      	cbnz	r3, 800e6fe <__swsetup_r+0x7a>
 800e6ea:	89a3      	ldrh	r3, [r4, #12]
 800e6ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e6f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6f4:	d003      	beq.n	800e6fe <__swsetup_r+0x7a>
 800e6f6:	4621      	mov	r1, r4
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	f000 f883 	bl	800e804 <__smakebuf_r>
 800e6fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e702:	f013 0201 	ands.w	r2, r3, #1
 800e706:	d00a      	beq.n	800e71e <__swsetup_r+0x9a>
 800e708:	2200      	movs	r2, #0
 800e70a:	60a2      	str	r2, [r4, #8]
 800e70c:	6962      	ldr	r2, [r4, #20]
 800e70e:	4252      	negs	r2, r2
 800e710:	61a2      	str	r2, [r4, #24]
 800e712:	6922      	ldr	r2, [r4, #16]
 800e714:	b942      	cbnz	r2, 800e728 <__swsetup_r+0xa4>
 800e716:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e71a:	d1c5      	bne.n	800e6a8 <__swsetup_r+0x24>
 800e71c:	bd38      	pop	{r3, r4, r5, pc}
 800e71e:	0799      	lsls	r1, r3, #30
 800e720:	bf58      	it	pl
 800e722:	6962      	ldrpl	r2, [r4, #20]
 800e724:	60a2      	str	r2, [r4, #8]
 800e726:	e7f4      	b.n	800e712 <__swsetup_r+0x8e>
 800e728:	2000      	movs	r0, #0
 800e72a:	e7f7      	b.n	800e71c <__swsetup_r+0x98>
 800e72c:	2000010c 	.word	0x2000010c

0800e730 <_raise_r>:
 800e730:	291f      	cmp	r1, #31
 800e732:	b538      	push	{r3, r4, r5, lr}
 800e734:	4605      	mov	r5, r0
 800e736:	460c      	mov	r4, r1
 800e738:	d904      	bls.n	800e744 <_raise_r+0x14>
 800e73a:	2316      	movs	r3, #22
 800e73c:	6003      	str	r3, [r0, #0]
 800e73e:	f04f 30ff 	mov.w	r0, #4294967295
 800e742:	bd38      	pop	{r3, r4, r5, pc}
 800e744:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e746:	b112      	cbz	r2, 800e74e <_raise_r+0x1e>
 800e748:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e74c:	b94b      	cbnz	r3, 800e762 <_raise_r+0x32>
 800e74e:	4628      	mov	r0, r5
 800e750:	f000 f830 	bl	800e7b4 <_getpid_r>
 800e754:	4622      	mov	r2, r4
 800e756:	4601      	mov	r1, r0
 800e758:	4628      	mov	r0, r5
 800e75a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e75e:	f000 b817 	b.w	800e790 <_kill_r>
 800e762:	2b01      	cmp	r3, #1
 800e764:	d00a      	beq.n	800e77c <_raise_r+0x4c>
 800e766:	1c59      	adds	r1, r3, #1
 800e768:	d103      	bne.n	800e772 <_raise_r+0x42>
 800e76a:	2316      	movs	r3, #22
 800e76c:	6003      	str	r3, [r0, #0]
 800e76e:	2001      	movs	r0, #1
 800e770:	e7e7      	b.n	800e742 <_raise_r+0x12>
 800e772:	2100      	movs	r1, #0
 800e774:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e778:	4620      	mov	r0, r4
 800e77a:	4798      	blx	r3
 800e77c:	2000      	movs	r0, #0
 800e77e:	e7e0      	b.n	800e742 <_raise_r+0x12>

0800e780 <raise>:
 800e780:	4b02      	ldr	r3, [pc, #8]	@ (800e78c <raise+0xc>)
 800e782:	4601      	mov	r1, r0
 800e784:	6818      	ldr	r0, [r3, #0]
 800e786:	f7ff bfd3 	b.w	800e730 <_raise_r>
 800e78a:	bf00      	nop
 800e78c:	2000010c 	.word	0x2000010c

0800e790 <_kill_r>:
 800e790:	b538      	push	{r3, r4, r5, lr}
 800e792:	4d07      	ldr	r5, [pc, #28]	@ (800e7b0 <_kill_r+0x20>)
 800e794:	2300      	movs	r3, #0
 800e796:	4604      	mov	r4, r0
 800e798:	4608      	mov	r0, r1
 800e79a:	4611      	mov	r1, r2
 800e79c:	602b      	str	r3, [r5, #0]
 800e79e:	f7f4 f81b 	bl	80027d8 <_kill>
 800e7a2:	1c43      	adds	r3, r0, #1
 800e7a4:	d102      	bne.n	800e7ac <_kill_r+0x1c>
 800e7a6:	682b      	ldr	r3, [r5, #0]
 800e7a8:	b103      	cbz	r3, 800e7ac <_kill_r+0x1c>
 800e7aa:	6023      	str	r3, [r4, #0]
 800e7ac:	bd38      	pop	{r3, r4, r5, pc}
 800e7ae:	bf00      	nop
 800e7b0:	20002394 	.word	0x20002394

0800e7b4 <_getpid_r>:
 800e7b4:	f7f4 b808 	b.w	80027c8 <_getpid>

0800e7b8 <__swhatbuf_r>:
 800e7b8:	b570      	push	{r4, r5, r6, lr}
 800e7ba:	460c      	mov	r4, r1
 800e7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7c0:	2900      	cmp	r1, #0
 800e7c2:	b096      	sub	sp, #88	@ 0x58
 800e7c4:	4615      	mov	r5, r2
 800e7c6:	461e      	mov	r6, r3
 800e7c8:	da0d      	bge.n	800e7e6 <__swhatbuf_r+0x2e>
 800e7ca:	89a3      	ldrh	r3, [r4, #12]
 800e7cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e7d0:	f04f 0100 	mov.w	r1, #0
 800e7d4:	bf14      	ite	ne
 800e7d6:	2340      	movne	r3, #64	@ 0x40
 800e7d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e7dc:	2000      	movs	r0, #0
 800e7de:	6031      	str	r1, [r6, #0]
 800e7e0:	602b      	str	r3, [r5, #0]
 800e7e2:	b016      	add	sp, #88	@ 0x58
 800e7e4:	bd70      	pop	{r4, r5, r6, pc}
 800e7e6:	466a      	mov	r2, sp
 800e7e8:	f000 f848 	bl	800e87c <_fstat_r>
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	dbec      	blt.n	800e7ca <__swhatbuf_r+0x12>
 800e7f0:	9901      	ldr	r1, [sp, #4]
 800e7f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e7f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e7fa:	4259      	negs	r1, r3
 800e7fc:	4159      	adcs	r1, r3
 800e7fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e802:	e7eb      	b.n	800e7dc <__swhatbuf_r+0x24>

0800e804 <__smakebuf_r>:
 800e804:	898b      	ldrh	r3, [r1, #12]
 800e806:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e808:	079d      	lsls	r5, r3, #30
 800e80a:	4606      	mov	r6, r0
 800e80c:	460c      	mov	r4, r1
 800e80e:	d507      	bpl.n	800e820 <__smakebuf_r+0x1c>
 800e810:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e814:	6023      	str	r3, [r4, #0]
 800e816:	6123      	str	r3, [r4, #16]
 800e818:	2301      	movs	r3, #1
 800e81a:	6163      	str	r3, [r4, #20]
 800e81c:	b003      	add	sp, #12
 800e81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e820:	ab01      	add	r3, sp, #4
 800e822:	466a      	mov	r2, sp
 800e824:	f7ff ffc8 	bl	800e7b8 <__swhatbuf_r>
 800e828:	9f00      	ldr	r7, [sp, #0]
 800e82a:	4605      	mov	r5, r0
 800e82c:	4639      	mov	r1, r7
 800e82e:	4630      	mov	r0, r6
 800e830:	f7fe febe 	bl	800d5b0 <_malloc_r>
 800e834:	b948      	cbnz	r0, 800e84a <__smakebuf_r+0x46>
 800e836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e83a:	059a      	lsls	r2, r3, #22
 800e83c:	d4ee      	bmi.n	800e81c <__smakebuf_r+0x18>
 800e83e:	f023 0303 	bic.w	r3, r3, #3
 800e842:	f043 0302 	orr.w	r3, r3, #2
 800e846:	81a3      	strh	r3, [r4, #12]
 800e848:	e7e2      	b.n	800e810 <__smakebuf_r+0xc>
 800e84a:	89a3      	ldrh	r3, [r4, #12]
 800e84c:	6020      	str	r0, [r4, #0]
 800e84e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e852:	81a3      	strh	r3, [r4, #12]
 800e854:	9b01      	ldr	r3, [sp, #4]
 800e856:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e85a:	b15b      	cbz	r3, 800e874 <__smakebuf_r+0x70>
 800e85c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e860:	4630      	mov	r0, r6
 800e862:	f000 f81d 	bl	800e8a0 <_isatty_r>
 800e866:	b128      	cbz	r0, 800e874 <__smakebuf_r+0x70>
 800e868:	89a3      	ldrh	r3, [r4, #12]
 800e86a:	f023 0303 	bic.w	r3, r3, #3
 800e86e:	f043 0301 	orr.w	r3, r3, #1
 800e872:	81a3      	strh	r3, [r4, #12]
 800e874:	89a3      	ldrh	r3, [r4, #12]
 800e876:	431d      	orrs	r5, r3
 800e878:	81a5      	strh	r5, [r4, #12]
 800e87a:	e7cf      	b.n	800e81c <__smakebuf_r+0x18>

0800e87c <_fstat_r>:
 800e87c:	b538      	push	{r3, r4, r5, lr}
 800e87e:	4d07      	ldr	r5, [pc, #28]	@ (800e89c <_fstat_r+0x20>)
 800e880:	2300      	movs	r3, #0
 800e882:	4604      	mov	r4, r0
 800e884:	4608      	mov	r0, r1
 800e886:	4611      	mov	r1, r2
 800e888:	602b      	str	r3, [r5, #0]
 800e88a:	f7f4 f805 	bl	8002898 <_fstat>
 800e88e:	1c43      	adds	r3, r0, #1
 800e890:	d102      	bne.n	800e898 <_fstat_r+0x1c>
 800e892:	682b      	ldr	r3, [r5, #0]
 800e894:	b103      	cbz	r3, 800e898 <_fstat_r+0x1c>
 800e896:	6023      	str	r3, [r4, #0]
 800e898:	bd38      	pop	{r3, r4, r5, pc}
 800e89a:	bf00      	nop
 800e89c:	20002394 	.word	0x20002394

0800e8a0 <_isatty_r>:
 800e8a0:	b538      	push	{r3, r4, r5, lr}
 800e8a2:	4d06      	ldr	r5, [pc, #24]	@ (800e8bc <_isatty_r+0x1c>)
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	4604      	mov	r4, r0
 800e8a8:	4608      	mov	r0, r1
 800e8aa:	602b      	str	r3, [r5, #0]
 800e8ac:	f7f4 f804 	bl	80028b8 <_isatty>
 800e8b0:	1c43      	adds	r3, r0, #1
 800e8b2:	d102      	bne.n	800e8ba <_isatty_r+0x1a>
 800e8b4:	682b      	ldr	r3, [r5, #0]
 800e8b6:	b103      	cbz	r3, 800e8ba <_isatty_r+0x1a>
 800e8b8:	6023      	str	r3, [r4, #0]
 800e8ba:	bd38      	pop	{r3, r4, r5, pc}
 800e8bc:	20002394 	.word	0x20002394

0800e8c0 <log>:
 800e8c0:	b538      	push	{r3, r4, r5, lr}
 800e8c2:	ed2d 8b02 	vpush	{d8}
 800e8c6:	ec55 4b10 	vmov	r4, r5, d0
 800e8ca:	f000 f949 	bl	800eb60 <__ieee754_log>
 800e8ce:	4622      	mov	r2, r4
 800e8d0:	462b      	mov	r3, r5
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	4629      	mov	r1, r5
 800e8d6:	eeb0 8a40 	vmov.f32	s16, s0
 800e8da:	eef0 8a60 	vmov.f32	s17, s1
 800e8de:	f7f2 f925 	bl	8000b2c <__aeabi_dcmpun>
 800e8e2:	b998      	cbnz	r0, 800e90c <log+0x4c>
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	4620      	mov	r0, r4
 800e8ea:	4629      	mov	r1, r5
 800e8ec:	f7f2 f914 	bl	8000b18 <__aeabi_dcmpgt>
 800e8f0:	b960      	cbnz	r0, 800e90c <log+0x4c>
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	4629      	mov	r1, r5
 800e8fa:	f7f2 f8e5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8fe:	b160      	cbz	r0, 800e91a <log+0x5a>
 800e900:	f7fd ff66 	bl	800c7d0 <__errno>
 800e904:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800e930 <log+0x70>
 800e908:	2322      	movs	r3, #34	@ 0x22
 800e90a:	6003      	str	r3, [r0, #0]
 800e90c:	eeb0 0a48 	vmov.f32	s0, s16
 800e910:	eef0 0a68 	vmov.f32	s1, s17
 800e914:	ecbd 8b02 	vpop	{d8}
 800e918:	bd38      	pop	{r3, r4, r5, pc}
 800e91a:	f7fd ff59 	bl	800c7d0 <__errno>
 800e91e:	ecbd 8b02 	vpop	{d8}
 800e922:	2321      	movs	r3, #33	@ 0x21
 800e924:	6003      	str	r3, [r0, #0]
 800e926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e92a:	4803      	ldr	r0, [pc, #12]	@ (800e938 <log+0x78>)
 800e92c:	f000 b834 	b.w	800e998 <nan>
 800e930:	00000000 	.word	0x00000000
 800e934:	fff00000 	.word	0xfff00000
 800e938:	0800f4f6 	.word	0x0800f4f6

0800e93c <sqrt>:
 800e93c:	b538      	push	{r3, r4, r5, lr}
 800e93e:	ed2d 8b02 	vpush	{d8}
 800e942:	ec55 4b10 	vmov	r4, r5, d0
 800e946:	f000 f82f 	bl	800e9a8 <__ieee754_sqrt>
 800e94a:	4622      	mov	r2, r4
 800e94c:	462b      	mov	r3, r5
 800e94e:	4620      	mov	r0, r4
 800e950:	4629      	mov	r1, r5
 800e952:	eeb0 8a40 	vmov.f32	s16, s0
 800e956:	eef0 8a60 	vmov.f32	s17, s1
 800e95a:	f7f2 f8e7 	bl	8000b2c <__aeabi_dcmpun>
 800e95e:	b990      	cbnz	r0, 800e986 <sqrt+0x4a>
 800e960:	2200      	movs	r2, #0
 800e962:	2300      	movs	r3, #0
 800e964:	4620      	mov	r0, r4
 800e966:	4629      	mov	r1, r5
 800e968:	f7f2 f8b8 	bl	8000adc <__aeabi_dcmplt>
 800e96c:	b158      	cbz	r0, 800e986 <sqrt+0x4a>
 800e96e:	f7fd ff2f 	bl	800c7d0 <__errno>
 800e972:	2321      	movs	r3, #33	@ 0x21
 800e974:	6003      	str	r3, [r0, #0]
 800e976:	2200      	movs	r2, #0
 800e978:	2300      	movs	r3, #0
 800e97a:	4610      	mov	r0, r2
 800e97c:	4619      	mov	r1, r3
 800e97e:	f7f1 ff65 	bl	800084c <__aeabi_ddiv>
 800e982:	ec41 0b18 	vmov	d8, r0, r1
 800e986:	eeb0 0a48 	vmov.f32	s0, s16
 800e98a:	eef0 0a68 	vmov.f32	s1, s17
 800e98e:	ecbd 8b02 	vpop	{d8}
 800e992:	bd38      	pop	{r3, r4, r5, pc}
 800e994:	0000      	movs	r0, r0
	...

0800e998 <nan>:
 800e998:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e9a0 <nan+0x8>
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop
 800e9a0:	00000000 	.word	0x00000000
 800e9a4:	7ff80000 	.word	0x7ff80000

0800e9a8 <__ieee754_sqrt>:
 800e9a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ac:	4a68      	ldr	r2, [pc, #416]	@ (800eb50 <__ieee754_sqrt+0x1a8>)
 800e9ae:	ec55 4b10 	vmov	r4, r5, d0
 800e9b2:	43aa      	bics	r2, r5
 800e9b4:	462b      	mov	r3, r5
 800e9b6:	4621      	mov	r1, r4
 800e9b8:	d110      	bne.n	800e9dc <__ieee754_sqrt+0x34>
 800e9ba:	4622      	mov	r2, r4
 800e9bc:	4620      	mov	r0, r4
 800e9be:	4629      	mov	r1, r5
 800e9c0:	f7f1 fe1a 	bl	80005f8 <__aeabi_dmul>
 800e9c4:	4602      	mov	r2, r0
 800e9c6:	460b      	mov	r3, r1
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	4629      	mov	r1, r5
 800e9cc:	f7f1 fc5e 	bl	800028c <__adddf3>
 800e9d0:	4604      	mov	r4, r0
 800e9d2:	460d      	mov	r5, r1
 800e9d4:	ec45 4b10 	vmov	d0, r4, r5
 800e9d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9dc:	2d00      	cmp	r5, #0
 800e9de:	dc0e      	bgt.n	800e9fe <__ieee754_sqrt+0x56>
 800e9e0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e9e4:	4322      	orrs	r2, r4
 800e9e6:	d0f5      	beq.n	800e9d4 <__ieee754_sqrt+0x2c>
 800e9e8:	b19d      	cbz	r5, 800ea12 <__ieee754_sqrt+0x6a>
 800e9ea:	4622      	mov	r2, r4
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	4629      	mov	r1, r5
 800e9f0:	f7f1 fc4a 	bl	8000288 <__aeabi_dsub>
 800e9f4:	4602      	mov	r2, r0
 800e9f6:	460b      	mov	r3, r1
 800e9f8:	f7f1 ff28 	bl	800084c <__aeabi_ddiv>
 800e9fc:	e7e8      	b.n	800e9d0 <__ieee754_sqrt+0x28>
 800e9fe:	152a      	asrs	r2, r5, #20
 800ea00:	d115      	bne.n	800ea2e <__ieee754_sqrt+0x86>
 800ea02:	2000      	movs	r0, #0
 800ea04:	e009      	b.n	800ea1a <__ieee754_sqrt+0x72>
 800ea06:	0acb      	lsrs	r3, r1, #11
 800ea08:	3a15      	subs	r2, #21
 800ea0a:	0549      	lsls	r1, r1, #21
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d0fa      	beq.n	800ea06 <__ieee754_sqrt+0x5e>
 800ea10:	e7f7      	b.n	800ea02 <__ieee754_sqrt+0x5a>
 800ea12:	462a      	mov	r2, r5
 800ea14:	e7fa      	b.n	800ea0c <__ieee754_sqrt+0x64>
 800ea16:	005b      	lsls	r3, r3, #1
 800ea18:	3001      	adds	r0, #1
 800ea1a:	02dc      	lsls	r4, r3, #11
 800ea1c:	d5fb      	bpl.n	800ea16 <__ieee754_sqrt+0x6e>
 800ea1e:	1e44      	subs	r4, r0, #1
 800ea20:	1b12      	subs	r2, r2, r4
 800ea22:	f1c0 0420 	rsb	r4, r0, #32
 800ea26:	fa21 f404 	lsr.w	r4, r1, r4
 800ea2a:	4323      	orrs	r3, r4
 800ea2c:	4081      	lsls	r1, r0
 800ea2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea32:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ea36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ea3a:	07d2      	lsls	r2, r2, #31
 800ea3c:	bf5c      	itt	pl
 800ea3e:	005b      	lslpl	r3, r3, #1
 800ea40:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ea44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ea48:	bf58      	it	pl
 800ea4a:	0049      	lslpl	r1, r1, #1
 800ea4c:	2600      	movs	r6, #0
 800ea4e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ea52:	106d      	asrs	r5, r5, #1
 800ea54:	0049      	lsls	r1, r1, #1
 800ea56:	2016      	movs	r0, #22
 800ea58:	4632      	mov	r2, r6
 800ea5a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ea5e:	1917      	adds	r7, r2, r4
 800ea60:	429f      	cmp	r7, r3
 800ea62:	bfde      	ittt	le
 800ea64:	193a      	addle	r2, r7, r4
 800ea66:	1bdb      	suble	r3, r3, r7
 800ea68:	1936      	addle	r6, r6, r4
 800ea6a:	0fcf      	lsrs	r7, r1, #31
 800ea6c:	3801      	subs	r0, #1
 800ea6e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ea72:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ea76:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ea7a:	d1f0      	bne.n	800ea5e <__ieee754_sqrt+0xb6>
 800ea7c:	4604      	mov	r4, r0
 800ea7e:	2720      	movs	r7, #32
 800ea80:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ea84:	429a      	cmp	r2, r3
 800ea86:	eb00 0e0c 	add.w	lr, r0, ip
 800ea8a:	db02      	blt.n	800ea92 <__ieee754_sqrt+0xea>
 800ea8c:	d113      	bne.n	800eab6 <__ieee754_sqrt+0x10e>
 800ea8e:	458e      	cmp	lr, r1
 800ea90:	d811      	bhi.n	800eab6 <__ieee754_sqrt+0x10e>
 800ea92:	f1be 0f00 	cmp.w	lr, #0
 800ea96:	eb0e 000c 	add.w	r0, lr, ip
 800ea9a:	da42      	bge.n	800eb22 <__ieee754_sqrt+0x17a>
 800ea9c:	2800      	cmp	r0, #0
 800ea9e:	db40      	blt.n	800eb22 <__ieee754_sqrt+0x17a>
 800eaa0:	f102 0801 	add.w	r8, r2, #1
 800eaa4:	1a9b      	subs	r3, r3, r2
 800eaa6:	458e      	cmp	lr, r1
 800eaa8:	bf88      	it	hi
 800eaaa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800eaae:	eba1 010e 	sub.w	r1, r1, lr
 800eab2:	4464      	add	r4, ip
 800eab4:	4642      	mov	r2, r8
 800eab6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800eaba:	3f01      	subs	r7, #1
 800eabc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800eac0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800eac4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800eac8:	d1dc      	bne.n	800ea84 <__ieee754_sqrt+0xdc>
 800eaca:	4319      	orrs	r1, r3
 800eacc:	d01b      	beq.n	800eb06 <__ieee754_sqrt+0x15e>
 800eace:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800eb54 <__ieee754_sqrt+0x1ac>
 800ead2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800eb58 <__ieee754_sqrt+0x1b0>
 800ead6:	e9da 0100 	ldrd	r0, r1, [sl]
 800eada:	e9db 2300 	ldrd	r2, r3, [fp]
 800eade:	f7f1 fbd3 	bl	8000288 <__aeabi_dsub>
 800eae2:	e9da 8900 	ldrd	r8, r9, [sl]
 800eae6:	4602      	mov	r2, r0
 800eae8:	460b      	mov	r3, r1
 800eaea:	4640      	mov	r0, r8
 800eaec:	4649      	mov	r1, r9
 800eaee:	f7f1 ffff 	bl	8000af0 <__aeabi_dcmple>
 800eaf2:	b140      	cbz	r0, 800eb06 <__ieee754_sqrt+0x15e>
 800eaf4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800eaf8:	e9da 0100 	ldrd	r0, r1, [sl]
 800eafc:	e9db 2300 	ldrd	r2, r3, [fp]
 800eb00:	d111      	bne.n	800eb26 <__ieee754_sqrt+0x17e>
 800eb02:	3601      	adds	r6, #1
 800eb04:	463c      	mov	r4, r7
 800eb06:	1072      	asrs	r2, r6, #1
 800eb08:	0863      	lsrs	r3, r4, #1
 800eb0a:	07f1      	lsls	r1, r6, #31
 800eb0c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800eb10:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800eb14:	bf48      	it	mi
 800eb16:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800eb1a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800eb1e:	4618      	mov	r0, r3
 800eb20:	e756      	b.n	800e9d0 <__ieee754_sqrt+0x28>
 800eb22:	4690      	mov	r8, r2
 800eb24:	e7be      	b.n	800eaa4 <__ieee754_sqrt+0xfc>
 800eb26:	f7f1 fbb1 	bl	800028c <__adddf3>
 800eb2a:	e9da 8900 	ldrd	r8, r9, [sl]
 800eb2e:	4602      	mov	r2, r0
 800eb30:	460b      	mov	r3, r1
 800eb32:	4640      	mov	r0, r8
 800eb34:	4649      	mov	r1, r9
 800eb36:	f7f1 ffd1 	bl	8000adc <__aeabi_dcmplt>
 800eb3a:	b120      	cbz	r0, 800eb46 <__ieee754_sqrt+0x19e>
 800eb3c:	1ca0      	adds	r0, r4, #2
 800eb3e:	bf08      	it	eq
 800eb40:	3601      	addeq	r6, #1
 800eb42:	3402      	adds	r4, #2
 800eb44:	e7df      	b.n	800eb06 <__ieee754_sqrt+0x15e>
 800eb46:	1c63      	adds	r3, r4, #1
 800eb48:	f023 0401 	bic.w	r4, r3, #1
 800eb4c:	e7db      	b.n	800eb06 <__ieee754_sqrt+0x15e>
 800eb4e:	bf00      	nop
 800eb50:	7ff00000 	.word	0x7ff00000
 800eb54:	200002d0 	.word	0x200002d0
 800eb58:	200002c8 	.word	0x200002c8
 800eb5c:	00000000 	.word	0x00000000

0800eb60 <__ieee754_log>:
 800eb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb64:	ec51 0b10 	vmov	r0, r1, d0
 800eb68:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800eb6c:	b087      	sub	sp, #28
 800eb6e:	460d      	mov	r5, r1
 800eb70:	da26      	bge.n	800ebc0 <__ieee754_log+0x60>
 800eb72:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800eb76:	4303      	orrs	r3, r0
 800eb78:	4602      	mov	r2, r0
 800eb7a:	d10a      	bne.n	800eb92 <__ieee754_log+0x32>
 800eb7c:	49ce      	ldr	r1, [pc, #824]	@ (800eeb8 <__ieee754_log+0x358>)
 800eb7e:	2200      	movs	r2, #0
 800eb80:	2300      	movs	r3, #0
 800eb82:	2000      	movs	r0, #0
 800eb84:	f7f1 fe62 	bl	800084c <__aeabi_ddiv>
 800eb88:	ec41 0b10 	vmov	d0, r0, r1
 800eb8c:	b007      	add	sp, #28
 800eb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb92:	2900      	cmp	r1, #0
 800eb94:	da05      	bge.n	800eba2 <__ieee754_log+0x42>
 800eb96:	460b      	mov	r3, r1
 800eb98:	f7f1 fb76 	bl	8000288 <__aeabi_dsub>
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	2300      	movs	r3, #0
 800eba0:	e7f0      	b.n	800eb84 <__ieee754_log+0x24>
 800eba2:	4bc6      	ldr	r3, [pc, #792]	@ (800eebc <__ieee754_log+0x35c>)
 800eba4:	2200      	movs	r2, #0
 800eba6:	f7f1 fd27 	bl	80005f8 <__aeabi_dmul>
 800ebaa:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800ebae:	460d      	mov	r5, r1
 800ebb0:	4ac3      	ldr	r2, [pc, #780]	@ (800eec0 <__ieee754_log+0x360>)
 800ebb2:	4295      	cmp	r5, r2
 800ebb4:	dd06      	ble.n	800ebc4 <__ieee754_log+0x64>
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	460b      	mov	r3, r1
 800ebba:	f7f1 fb67 	bl	800028c <__adddf3>
 800ebbe:	e7e3      	b.n	800eb88 <__ieee754_log+0x28>
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	e7f5      	b.n	800ebb0 <__ieee754_log+0x50>
 800ebc4:	152c      	asrs	r4, r5, #20
 800ebc6:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800ebca:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ebce:	441c      	add	r4, r3
 800ebd0:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800ebd4:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800ebd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ebdc:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800ebe0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800ebe4:	ea42 0105 	orr.w	r1, r2, r5
 800ebe8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800ebec:	2200      	movs	r2, #0
 800ebee:	4bb5      	ldr	r3, [pc, #724]	@ (800eec4 <__ieee754_log+0x364>)
 800ebf0:	f7f1 fb4a 	bl	8000288 <__aeabi_dsub>
 800ebf4:	1cab      	adds	r3, r5, #2
 800ebf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ebfa:	2b02      	cmp	r3, #2
 800ebfc:	4682      	mov	sl, r0
 800ebfe:	468b      	mov	fp, r1
 800ec00:	f04f 0200 	mov.w	r2, #0
 800ec04:	dc53      	bgt.n	800ecae <__ieee754_log+0x14e>
 800ec06:	2300      	movs	r3, #0
 800ec08:	f7f1 ff5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec0c:	b1d0      	cbz	r0, 800ec44 <__ieee754_log+0xe4>
 800ec0e:	2c00      	cmp	r4, #0
 800ec10:	f000 8120 	beq.w	800ee54 <__ieee754_log+0x2f4>
 800ec14:	4620      	mov	r0, r4
 800ec16:	f7f1 fc85 	bl	8000524 <__aeabi_i2d>
 800ec1a:	a391      	add	r3, pc, #580	@ (adr r3, 800ee60 <__ieee754_log+0x300>)
 800ec1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec20:	4606      	mov	r6, r0
 800ec22:	460f      	mov	r7, r1
 800ec24:	f7f1 fce8 	bl	80005f8 <__aeabi_dmul>
 800ec28:	a38f      	add	r3, pc, #572	@ (adr r3, 800ee68 <__ieee754_log+0x308>)
 800ec2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2e:	4604      	mov	r4, r0
 800ec30:	460d      	mov	r5, r1
 800ec32:	4630      	mov	r0, r6
 800ec34:	4639      	mov	r1, r7
 800ec36:	f7f1 fcdf 	bl	80005f8 <__aeabi_dmul>
 800ec3a:	4602      	mov	r2, r0
 800ec3c:	460b      	mov	r3, r1
 800ec3e:	4620      	mov	r0, r4
 800ec40:	4629      	mov	r1, r5
 800ec42:	e7ba      	b.n	800ebba <__ieee754_log+0x5a>
 800ec44:	a38a      	add	r3, pc, #552	@ (adr r3, 800ee70 <__ieee754_log+0x310>)
 800ec46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec4a:	4650      	mov	r0, sl
 800ec4c:	4659      	mov	r1, fp
 800ec4e:	f7f1 fcd3 	bl	80005f8 <__aeabi_dmul>
 800ec52:	4602      	mov	r2, r0
 800ec54:	460b      	mov	r3, r1
 800ec56:	2000      	movs	r0, #0
 800ec58:	499b      	ldr	r1, [pc, #620]	@ (800eec8 <__ieee754_log+0x368>)
 800ec5a:	f7f1 fb15 	bl	8000288 <__aeabi_dsub>
 800ec5e:	4652      	mov	r2, sl
 800ec60:	4606      	mov	r6, r0
 800ec62:	460f      	mov	r7, r1
 800ec64:	465b      	mov	r3, fp
 800ec66:	4650      	mov	r0, sl
 800ec68:	4659      	mov	r1, fp
 800ec6a:	f7f1 fcc5 	bl	80005f8 <__aeabi_dmul>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	460b      	mov	r3, r1
 800ec72:	4630      	mov	r0, r6
 800ec74:	4639      	mov	r1, r7
 800ec76:	f7f1 fcbf 	bl	80005f8 <__aeabi_dmul>
 800ec7a:	4606      	mov	r6, r0
 800ec7c:	460f      	mov	r7, r1
 800ec7e:	b914      	cbnz	r4, 800ec86 <__ieee754_log+0x126>
 800ec80:	4632      	mov	r2, r6
 800ec82:	463b      	mov	r3, r7
 800ec84:	e0a0      	b.n	800edc8 <__ieee754_log+0x268>
 800ec86:	4620      	mov	r0, r4
 800ec88:	f7f1 fc4c 	bl	8000524 <__aeabi_i2d>
 800ec8c:	a374      	add	r3, pc, #464	@ (adr r3, 800ee60 <__ieee754_log+0x300>)
 800ec8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec92:	4680      	mov	r8, r0
 800ec94:	4689      	mov	r9, r1
 800ec96:	f7f1 fcaf 	bl	80005f8 <__aeabi_dmul>
 800ec9a:	a373      	add	r3, pc, #460	@ (adr r3, 800ee68 <__ieee754_log+0x308>)
 800ec9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca0:	4604      	mov	r4, r0
 800eca2:	460d      	mov	r5, r1
 800eca4:	4640      	mov	r0, r8
 800eca6:	4649      	mov	r1, r9
 800eca8:	f7f1 fca6 	bl	80005f8 <__aeabi_dmul>
 800ecac:	e0a5      	b.n	800edfa <__ieee754_log+0x29a>
 800ecae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ecb2:	f7f1 faeb 	bl	800028c <__adddf3>
 800ecb6:	4602      	mov	r2, r0
 800ecb8:	460b      	mov	r3, r1
 800ecba:	4650      	mov	r0, sl
 800ecbc:	4659      	mov	r1, fp
 800ecbe:	f7f1 fdc5 	bl	800084c <__aeabi_ddiv>
 800ecc2:	e9cd 0100 	strd	r0, r1, [sp]
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	f7f1 fc2c 	bl	8000524 <__aeabi_i2d>
 800eccc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ecd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ecd4:	4610      	mov	r0, r2
 800ecd6:	4619      	mov	r1, r3
 800ecd8:	f7f1 fc8e 	bl	80005f8 <__aeabi_dmul>
 800ecdc:	4602      	mov	r2, r0
 800ecde:	460b      	mov	r3, r1
 800ece0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ece4:	f7f1 fc88 	bl	80005f8 <__aeabi_dmul>
 800ece8:	a363      	add	r3, pc, #396	@ (adr r3, 800ee78 <__ieee754_log+0x318>)
 800ecea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecee:	4680      	mov	r8, r0
 800ecf0:	4689      	mov	r9, r1
 800ecf2:	f7f1 fc81 	bl	80005f8 <__aeabi_dmul>
 800ecf6:	a362      	add	r3, pc, #392	@ (adr r3, 800ee80 <__ieee754_log+0x320>)
 800ecf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecfc:	f7f1 fac6 	bl	800028c <__adddf3>
 800ed00:	4642      	mov	r2, r8
 800ed02:	464b      	mov	r3, r9
 800ed04:	f7f1 fc78 	bl	80005f8 <__aeabi_dmul>
 800ed08:	a35f      	add	r3, pc, #380	@ (adr r3, 800ee88 <__ieee754_log+0x328>)
 800ed0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed0e:	f7f1 fabd 	bl	800028c <__adddf3>
 800ed12:	4642      	mov	r2, r8
 800ed14:	464b      	mov	r3, r9
 800ed16:	f7f1 fc6f 	bl	80005f8 <__aeabi_dmul>
 800ed1a:	a35d      	add	r3, pc, #372	@ (adr r3, 800ee90 <__ieee754_log+0x330>)
 800ed1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed20:	f7f1 fab4 	bl	800028c <__adddf3>
 800ed24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed28:	f7f1 fc66 	bl	80005f8 <__aeabi_dmul>
 800ed2c:	a35a      	add	r3, pc, #360	@ (adr r3, 800ee98 <__ieee754_log+0x338>)
 800ed2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed36:	4640      	mov	r0, r8
 800ed38:	4649      	mov	r1, r9
 800ed3a:	f7f1 fc5d 	bl	80005f8 <__aeabi_dmul>
 800ed3e:	a358      	add	r3, pc, #352	@ (adr r3, 800eea0 <__ieee754_log+0x340>)
 800ed40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed44:	f7f1 faa2 	bl	800028c <__adddf3>
 800ed48:	4642      	mov	r2, r8
 800ed4a:	464b      	mov	r3, r9
 800ed4c:	f7f1 fc54 	bl	80005f8 <__aeabi_dmul>
 800ed50:	a355      	add	r3, pc, #340	@ (adr r3, 800eea8 <__ieee754_log+0x348>)
 800ed52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed56:	f7f1 fa99 	bl	800028c <__adddf3>
 800ed5a:	4642      	mov	r2, r8
 800ed5c:	464b      	mov	r3, r9
 800ed5e:	f7f1 fc4b 	bl	80005f8 <__aeabi_dmul>
 800ed62:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800ed66:	4602      	mov	r2, r0
 800ed68:	460b      	mov	r3, r1
 800ed6a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800ed6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed72:	f7f1 fa8b 	bl	800028c <__adddf3>
 800ed76:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800ed7a:	3551      	adds	r5, #81	@ 0x51
 800ed7c:	4335      	orrs	r5, r6
 800ed7e:	2d00      	cmp	r5, #0
 800ed80:	4680      	mov	r8, r0
 800ed82:	4689      	mov	r9, r1
 800ed84:	dd48      	ble.n	800ee18 <__ieee754_log+0x2b8>
 800ed86:	4b50      	ldr	r3, [pc, #320]	@ (800eec8 <__ieee754_log+0x368>)
 800ed88:	2200      	movs	r2, #0
 800ed8a:	4650      	mov	r0, sl
 800ed8c:	4659      	mov	r1, fp
 800ed8e:	f7f1 fc33 	bl	80005f8 <__aeabi_dmul>
 800ed92:	4652      	mov	r2, sl
 800ed94:	465b      	mov	r3, fp
 800ed96:	f7f1 fc2f 	bl	80005f8 <__aeabi_dmul>
 800ed9a:	4602      	mov	r2, r0
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	4606      	mov	r6, r0
 800eda0:	460f      	mov	r7, r1
 800eda2:	4640      	mov	r0, r8
 800eda4:	4649      	mov	r1, r9
 800eda6:	f7f1 fa71 	bl	800028c <__adddf3>
 800edaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800edae:	f7f1 fc23 	bl	80005f8 <__aeabi_dmul>
 800edb2:	4680      	mov	r8, r0
 800edb4:	4689      	mov	r9, r1
 800edb6:	b964      	cbnz	r4, 800edd2 <__ieee754_log+0x272>
 800edb8:	4602      	mov	r2, r0
 800edba:	460b      	mov	r3, r1
 800edbc:	4630      	mov	r0, r6
 800edbe:	4639      	mov	r1, r7
 800edc0:	f7f1 fa62 	bl	8000288 <__aeabi_dsub>
 800edc4:	4602      	mov	r2, r0
 800edc6:	460b      	mov	r3, r1
 800edc8:	4650      	mov	r0, sl
 800edca:	4659      	mov	r1, fp
 800edcc:	f7f1 fa5c 	bl	8000288 <__aeabi_dsub>
 800edd0:	e6da      	b.n	800eb88 <__ieee754_log+0x28>
 800edd2:	a323      	add	r3, pc, #140	@ (adr r3, 800ee60 <__ieee754_log+0x300>)
 800edd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eddc:	f7f1 fc0c 	bl	80005f8 <__aeabi_dmul>
 800ede0:	a321      	add	r3, pc, #132	@ (adr r3, 800ee68 <__ieee754_log+0x308>)
 800ede2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede6:	4604      	mov	r4, r0
 800ede8:	460d      	mov	r5, r1
 800edea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edee:	f7f1 fc03 	bl	80005f8 <__aeabi_dmul>
 800edf2:	4642      	mov	r2, r8
 800edf4:	464b      	mov	r3, r9
 800edf6:	f7f1 fa49 	bl	800028c <__adddf3>
 800edfa:	4602      	mov	r2, r0
 800edfc:	460b      	mov	r3, r1
 800edfe:	4630      	mov	r0, r6
 800ee00:	4639      	mov	r1, r7
 800ee02:	f7f1 fa41 	bl	8000288 <__aeabi_dsub>
 800ee06:	4652      	mov	r2, sl
 800ee08:	465b      	mov	r3, fp
 800ee0a:	f7f1 fa3d 	bl	8000288 <__aeabi_dsub>
 800ee0e:	4602      	mov	r2, r0
 800ee10:	460b      	mov	r3, r1
 800ee12:	4620      	mov	r0, r4
 800ee14:	4629      	mov	r1, r5
 800ee16:	e7d9      	b.n	800edcc <__ieee754_log+0x26c>
 800ee18:	4602      	mov	r2, r0
 800ee1a:	460b      	mov	r3, r1
 800ee1c:	4650      	mov	r0, sl
 800ee1e:	4659      	mov	r1, fp
 800ee20:	f7f1 fa32 	bl	8000288 <__aeabi_dsub>
 800ee24:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee28:	f7f1 fbe6 	bl	80005f8 <__aeabi_dmul>
 800ee2c:	4606      	mov	r6, r0
 800ee2e:	460f      	mov	r7, r1
 800ee30:	2c00      	cmp	r4, #0
 800ee32:	f43f af25 	beq.w	800ec80 <__ieee754_log+0x120>
 800ee36:	a30a      	add	r3, pc, #40	@ (adr r3, 800ee60 <__ieee754_log+0x300>)
 800ee38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee40:	f7f1 fbda 	bl	80005f8 <__aeabi_dmul>
 800ee44:	a308      	add	r3, pc, #32	@ (adr r3, 800ee68 <__ieee754_log+0x308>)
 800ee46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee4a:	4604      	mov	r4, r0
 800ee4c:	460d      	mov	r5, r1
 800ee4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee52:	e729      	b.n	800eca8 <__ieee754_log+0x148>
 800ee54:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800eeb0 <__ieee754_log+0x350>
 800ee58:	e698      	b.n	800eb8c <__ieee754_log+0x2c>
 800ee5a:	bf00      	nop
 800ee5c:	f3af 8000 	nop.w
 800ee60:	fee00000 	.word	0xfee00000
 800ee64:	3fe62e42 	.word	0x3fe62e42
 800ee68:	35793c76 	.word	0x35793c76
 800ee6c:	3dea39ef 	.word	0x3dea39ef
 800ee70:	55555555 	.word	0x55555555
 800ee74:	3fd55555 	.word	0x3fd55555
 800ee78:	df3e5244 	.word	0xdf3e5244
 800ee7c:	3fc2f112 	.word	0x3fc2f112
 800ee80:	96cb03de 	.word	0x96cb03de
 800ee84:	3fc74664 	.word	0x3fc74664
 800ee88:	94229359 	.word	0x94229359
 800ee8c:	3fd24924 	.word	0x3fd24924
 800ee90:	55555593 	.word	0x55555593
 800ee94:	3fe55555 	.word	0x3fe55555
 800ee98:	d078c69f 	.word	0xd078c69f
 800ee9c:	3fc39a09 	.word	0x3fc39a09
 800eea0:	1d8e78af 	.word	0x1d8e78af
 800eea4:	3fcc71c5 	.word	0x3fcc71c5
 800eea8:	9997fa04 	.word	0x9997fa04
 800eeac:	3fd99999 	.word	0x3fd99999
	...
 800eeb8:	c3500000 	.word	0xc3500000
 800eebc:	43500000 	.word	0x43500000
 800eec0:	7fefffff 	.word	0x7fefffff
 800eec4:	3ff00000 	.word	0x3ff00000
 800eec8:	3fe00000 	.word	0x3fe00000

0800eecc <_init>:
 800eecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eece:	bf00      	nop
 800eed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eed2:	bc08      	pop	{r3}
 800eed4:	469e      	mov	lr, r3
 800eed6:	4770      	bx	lr

0800eed8 <_fini>:
 800eed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeda:	bf00      	nop
 800eedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eede:	bc08      	pop	{r3}
 800eee0:	469e      	mov	lr, r3
 800eee2:	4770      	bx	lr
