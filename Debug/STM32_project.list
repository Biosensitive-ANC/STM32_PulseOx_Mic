
STM32_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  08010650  08010650  00011650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d78  08010d78  000122d8  2**0
                  CONTENTS
  4 .ARM          00000008  08010d78  08010d78  00011d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d80  08010d80  000122d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d80  08010d80  00011d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010d84  08010d84  00011d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  08010d88  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000122d8  2**0
                  CONTENTS
 10 .bss          00002180  200002d8  200002d8  000122d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002458  20002458  000122d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000122d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020536  00000000  00000000  00012308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e13  00000000  00000000  0003283e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d20  00000000  00000000  00037658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001695  00000000  00000000  00039378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028d21  00000000  00000000  0003aa0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002795d  00000000  00000000  0006372e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5454  00000000  00000000  0008b08b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001704df  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008e38  00000000  00000000  00170524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  0017935c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010634 	.word	0x08010634

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	08010634 	.word	0x08010634

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <dcRemoval>:

#include "filter.h"


DC_FILTER_T dcRemoval(float x, float prev_w, float alpha)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b08b      	sub	sp, #44	@ 0x2c
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000f82:	edc7 0a04 	vstr	s1, [r7, #16]
 8000f86:	ed87 1a03 	vstr	s2, [r7, #12]
  DC_FILTER_T filtered;
  filtered.w = x + alpha * prev_w;
 8000f8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f96:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9e:	edc7 7a06 	vstr	s15, [r7, #24]
  filtered.result = filtered.w - prev_w;
 8000fa2:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fae:	edc7 7a07 	vstr	s15, [r7, #28]

  return filtered;
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	f107 0218 	add.w	r2, r7, #24
 8000fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fbe:	e883 0003 	stmia.w	r3, {r0, r1}
 8000fc2:	6a3a      	ldr	r2, [r7, #32]
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc6:	ee07 2a10 	vmov	s14, r2
 8000fca:	ee07 3a90 	vmov	s15, r3
}
 8000fce:	eeb0 0a47 	vmov.f32	s0, s14
 8000fd2:	eef0 0a67 	vmov.f32	s1, s15
 8000fd6:	372c      	adds	r7, #44	@ 0x2c
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <lowPassButterworthFilter>:

//Low pass butterworth filter order=1 alpha1=0.1
void lowPassButterworthFilter(float x, BUTTERWORTH_FILTER_T * filterResult)
{
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fea:	6038      	str	r0, [r7, #0]
	filterResult->v[0] = filterResult->v[1];
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	601a      	str	r2, [r3, #0]

    //Fs = 100Hz and Fc = 10Hz
    //filterResult->v[1] = (2.452372752527856026e-1 * x) + (0.50952544949442879485 * filterResult->v[0]);

    //Fs = 100Hz and Fc = 4Hz
    filterResult->v[1] = (1.367287359973195227e-1 * x) + (0.72654252800536101020 * filterResult->v[0]); //Very precise butterworth filter
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff faa7 	bl	8000548 <__aeabi_f2d>
 8000ffa:	a319      	add	r3, pc, #100	@ (adr r3, 8001060 <lowPassButterworthFilter+0x80>)
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	f7ff fafa 	bl	80005f8 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4614      	mov	r4, r2
 800100a:	461d      	mov	r5, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa99 	bl	8000548 <__aeabi_f2d>
 8001016:	a314      	add	r3, pc, #80	@ (adr r3, 8001068 <lowPassButterworthFilter+0x88>)
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	f7ff faec 	bl	80005f8 <__aeabi_dmul>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4620      	mov	r0, r4
 8001026:	4629      	mov	r1, r5
 8001028:	f7ff f930 	bl	800028c <__adddf3>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fdd8 	bl	8000be8 <__aeabi_d2f>
 8001038:	4602      	mov	r2, r0
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	605a      	str	r2, [r3, #4]

    filterResult->result = filterResult->v[0] + filterResult->v[1];
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	ed93 7a00 	vldr	s14, [r3]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	edd3 7a01 	vldr	s15, [r3, #4]
 800104a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bdb0      	pop	{r4, r5, r7, pc}
 800105c:	f3af 8000 	nop.w
 8001060:	c4c41579 	.word	0xc4c41579
 8001064:	3fc18053 	.word	0x3fc18053
 8001068:	1d9df544 	.word	0x1d9df544
 800106c:	3fe73fd6 	.word	0x3fe73fd6

08001070 <meanDiff>:

float meanDiff(float M, MEAN_DIFF_FILTER_T* filterValues)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	ed87 0a01 	vstr	s0, [r7, #4]
 800107a:	6038      	str	r0, [r7, #0]
  float avg = 0;
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]

  filterValues->sum -= filterValues->values[filterValues->index];
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
  filterValues->values[filterValues->index] = M;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	601a      	str	r2, [r3, #0]
  filterValues->sum += filterValues->values[filterValues->index];
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	edd3 7a00 	vldr	s15, [r3]
 80010c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

  filterValues->index++;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010d8:	3301      	adds	r3, #1
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  filterValues->index = filterValues->index % MEAN_FILTER_SIZE;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 80010e8:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <meanDiff+0xe0>)
 80010ea:	fba3 1302 	umull	r1, r3, r3, r2
 80010ee:	08d9      	lsrs	r1, r3, #3
 80010f0:	460b      	mov	r3, r1
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	1a5b      	subs	r3, r3, r1
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(filterValues->count < MEAN_FILTER_SIZE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001106:	2b0e      	cmp	r3, #14
 8001108:	d807      	bhi.n	800111a <meanDiff+0xaa>
    filterValues->count++;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001110:	3301      	adds	r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  avg = filterValues->sum / filterValues->count;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800112e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001132:	edc7 7a03 	vstr	s15, [r7, #12]
  return avg - M;
 8001136:	ed97 7a03 	vldr	s14, [r7, #12]
 800113a:	edd7 7a01 	vldr	s15, [r7, #4]
 800113e:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001142:	eeb0 0a67 	vmov.f32	s0, s15
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	88888889 	.word	0x88888889

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115a:	f001 fd6b 	bl	8002c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115e:	f000 f8ad 	bl	80012bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001162:	f000 fae7 	bl	8001734 <MX_GPIO_Init>
  MX_DMA_Init();
 8001166:	f000 fac5 	bl	80016f4 <MX_DMA_Init>
  MX_I2C1_Init();
 800116a:	f000 f963 	bl	8001434 <MX_I2C1_Init>
  MX_I2S3_Init();
 800116e:	f000 f98f 	bl	8001490 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001172:	f000 f9bd 	bl	80014f0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001176:	f000 fa93 	bl	80016a0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800117a:	f00b fa8b 	bl	800c694 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800117e:	f000 f907 	bl	8001390 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001182:	f000 f9ed 	bl	8001560 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


	//uint8_t message[] = "Hello PC! STM32 is sending data...\r\n";

	OLED_Init();                // Initialize the OLED display
 8001186:	f001 f89d 	bl	80022c4 <OLED_Init>
	OLED_Clear();               // Clear the OLED screen
 800118a:	f001 f90e 	bl	80023aa <OLED_Clear>
	HAL_Delay(100);
 800118e:	2064      	movs	r0, #100	@ 0x64
 8001190:	f001 fdc2 	bl	8002d18 <HAL_Delay>

    if (MAX30102_Init() != HAL_OK) {
 8001194:	f000 fcc2 	bl	8001b1c <MAX30102_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d005      	beq.n	80011aa <main+0x56>
        OLED_ShowString(0, 0, "MAX30102 OK");
 800119e:	4a3a      	ldr	r2, [pc, #232]	@ (8001288 <main+0x134>)
 80011a0:	2100      	movs	r1, #0
 80011a2:	2000      	movs	r0, #0
 80011a4:	f001 f976 	bl	8002494 <OLED_ShowString>
 80011a8:	e004      	b.n	80011b4 <main+0x60>
    } else {
        OLED_ShowString(0, 0, "MAX30102 ERROR");
 80011aa:	4a38      	ldr	r2, [pc, #224]	@ (800128c <main+0x138>)
 80011ac:	2100      	movs	r1, #0
 80011ae:	2000      	movs	r0, #0
 80011b0:	f001 f970 	bl	8002494 <OLED_ShowString>
    }

    // enable DMA for microphone to record data
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE); // cast to 32 because STM moment
 80011b4:	2208      	movs	r2, #8
 80011b6:	4936      	ldr	r1, [pc, #216]	@ (8001290 <main+0x13c>)
 80011b8:	4836      	ldr	r0, [pc, #216]	@ (8001294 <main+0x140>)
 80011ba:	f001 fe15 	bl	8002de8 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	currentMillis = millis();
 80011be:	f001 fcf5 	bl	8002bac <millis>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b34      	ldr	r3, [pc, #208]	@ (8001298 <main+0x144>)
 80011c8:	601a      	str	r2, [r3, #0]

	while (1)
	{

		if( pulseOximiterIntFlag )
 80011ca:	4b34      	ldr	r3, [pc, #208]	@ (800129c <main+0x148>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d009      	beq.n	80011e8 <main+0x94>
		{
			if (MAX30102_DumpFifo() == HAL_OK) {
 80011d4:	f000 fd1a 	bl	8001c0c <MAX30102_DumpFifo>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d104      	bne.n	80011e8 <main+0x94>

				pulseOximiterIntFlag = 0;
 80011de:	4b2f      	ldr	r3, [pc, #188]	@ (800129c <main+0x148>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]

				MAX30102_ProcessData();
 80011e4:	f000 fd24 	bl	8001c30 <MAX30102_ProcessData>
			}
		}


		// Display the data over the built in USB every 5 seconds
		currentMillis = millis();
 80011e8:	f001 fce0 	bl	8002bac <millis>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b29      	ldr	r3, [pc, #164]	@ (8001298 <main+0x144>)
 80011f2:	601a      	str	r2, [r3, #0]
		if( currentMillis - lastMillis > DISP_REFRESH_MS )
 80011f4:	4b28      	ldr	r3, [pc, #160]	@ (8001298 <main+0x144>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b29      	ldr	r3, [pc, #164]	@ (80012a0 <main+0x14c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001202:	4293      	cmp	r3, r2
 8001204:	dde1      	ble.n	80011ca <main+0x76>
		{
			float bpm = MAX30102_getBPM();
 8001206:	f001 f825 	bl	8002254 <MAX30102_getBPM>
 800120a:	ed87 0a01 	vstr	s0, [r7, #4]
			float spo2 = MAX30102_getSPO2();
 800120e:	f001 f82f 	bl	8002270 <MAX30102_getSPO2>
 8001212:	ed87 0a00 	vstr	s0, [r7]

			HAL_GPIO_TogglePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin);		//LED blinking
 8001216:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800121a:	4822      	ldr	r0, [pc, #136]	@ (80012a4 <main+0x150>)
 800121c:	f002 ffdf 	bl	80041de <HAL_GPIO_TogglePin>

			sprintf(message, "BPM: %.2f     ", bpm);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff f991 	bl	8000548 <__aeabi_f2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	491f      	ldr	r1, [pc, #124]	@ (80012a8 <main+0x154>)
 800122c:	481f      	ldr	r0, [pc, #124]	@ (80012ac <main+0x158>)
 800122e:	f00c fdcd 	bl	800ddcc <siprintf>
			//sprintf(message, "%.2f", );

			OLED_ShowString(0, 0, message);
 8001232:	4a1e      	ldr	r2, [pc, #120]	@ (80012ac <main+0x158>)
 8001234:	2100      	movs	r1, #0
 8001236:	2000      	movs	r0, #0
 8001238:	f001 f92c 	bl	8002494 <OLED_ShowString>


			sprintf(message, "SpO2: %.2f     ", spo2);
 800123c:	6838      	ldr	r0, [r7, #0]
 800123e:	f7ff f983 	bl	8000548 <__aeabi_f2d>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	491a      	ldr	r1, [pc, #104]	@ (80012b0 <main+0x15c>)
 8001248:	4818      	ldr	r0, [pc, #96]	@ (80012ac <main+0x158>)
 800124a:	f00c fdbf 	bl	800ddcc <siprintf>
			 			//sprintf(message, "%.2f", );

			OLED_ShowString(0, 2, message);
 800124e:	4a17      	ldr	r2, [pc, #92]	@ (80012ac <main+0x158>)
 8001250:	2102      	movs	r1, #2
 8001252:	2000      	movs	r0, #0
 8001254:	f001 f91e 	bl	8002494 <OLED_ShowString>
			//MAX30102_readTemperature();

			// Display on OLED
			sprintf(message, "Noise: %d    ", adc_value);
 8001258:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <main+0x160>)
 800125a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125e:	461a      	mov	r2, r3
 8001260:	4915      	ldr	r1, [pc, #84]	@ (80012b8 <main+0x164>)
 8001262:	4812      	ldr	r0, [pc, #72]	@ (80012ac <main+0x158>)
 8001264:	f00c fdb2 	bl	800ddcc <siprintf>
			OLED_ShowString(0, 4, message);
 8001268:	4a10      	ldr	r2, [pc, #64]	@ (80012ac <main+0x158>)
 800126a:	2104      	movs	r1, #4
 800126c:	2000      	movs	r0, #0
 800126e:	f001 f911 	bl	8002494 <OLED_ShowString>


			HAL_GPIO_TogglePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin);
 8001272:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001276:	480b      	ldr	r0, [pc, #44]	@ (80012a4 <main+0x150>)
 8001278:	f002 ffb1 	bl	80041de <HAL_GPIO_TogglePin>
			lastMillis = currentMillis;
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <main+0x144>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a07      	ldr	r2, [pc, #28]	@ (80012a0 <main+0x14c>)
 8001282:	6013      	str	r3, [r2, #0]
		if( pulseOximiterIntFlag )
 8001284:	e7a1      	b.n	80011ca <main+0x76>
 8001286:	bf00      	nop
 8001288:	08010650 	.word	0x08010650
 800128c:	0801065c 	.word	0x0801065c
 8001290:	2000056c 	.word	0x2000056c
 8001294:	200002f4 	.word	0x200002f4
 8001298:	20000520 	.word	0x20000520
 800129c:	20000568 	.word	0x20000568
 80012a0:	20000524 	.word	0x20000524
 80012a4:	40020c00 	.word	0x40020c00
 80012a8:	0801066c 	.word	0x0801066c
 80012ac:	20000528 	.word	0x20000528
 80012b0:	0801067c 	.word	0x0801067c
 80012b4:	2000057c 	.word	0x2000057c
 80012b8:	0801068c 	.word	0x0801068c

080012bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b094      	sub	sp, #80	@ 0x50
 80012c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c2:	f107 0320 	add.w	r3, r7, #32
 80012c6:	2230      	movs	r2, #48	@ 0x30
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f00c fde1 	bl	800de92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	4b28      	ldr	r3, [pc, #160]	@ (8001388 <SystemClock_Config+0xcc>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e8:	4a27      	ldr	r2, [pc, #156]	@ (8001388 <SystemClock_Config+0xcc>)
 80012ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f0:	4b25      	ldr	r3, [pc, #148]	@ (8001388 <SystemClock_Config+0xcc>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	4b22      	ldr	r3, [pc, #136]	@ (800138c <SystemClock_Config+0xd0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a21      	ldr	r2, [pc, #132]	@ (800138c <SystemClock_Config+0xd0>)
 8001306:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b1f      	ldr	r3, [pc, #124]	@ (800138c <SystemClock_Config+0xd0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001318:	2301      	movs	r3, #1
 800131a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800131c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001322:	2302      	movs	r3, #2
 8001324:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001326:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800132a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800132c:	2308      	movs	r3, #8
 800132e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001330:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001334:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001336:	2302      	movs	r3, #2
 8001338:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800133a:	2307      	movs	r3, #7
 800133c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133e:	f107 0320 	add.w	r3, r7, #32
 8001342:	4618      	mov	r0, r3
 8001344:	f006 f814 	bl	8007370 <HAL_RCC_OscConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800134e:	f000 fb8f 	bl	8001a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001352:	230f      	movs	r3, #15
 8001354:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001356:	2302      	movs	r3, #2
 8001358:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800135e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001362:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001364:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001368:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	2105      	movs	r1, #5
 8001370:	4618      	mov	r0, r3
 8001372:	f006 fa75 	bl	8007860 <HAL_RCC_ClockConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800137c:	f000 fb78 	bl	8001a70 <Error_Handler>
  }
}
 8001380:	bf00      	nop
 8001382:	3750      	adds	r7, #80	@ 0x50
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40023800 	.word	0x40023800
 800138c:	40007000 	.word	0x40007000

08001390 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013a2:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013a4:	4a21      	ldr	r2, [pc, #132]	@ (800142c <MX_ADC1_Init+0x9c>)
 80013a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013be:	2201      	movs	r2, #1
 80013c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013c2:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ca:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d0:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013d2:	4a17      	ldr	r2, [pc, #92]	@ (8001430 <MX_ADC1_Init+0xa0>)
 80013d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d6:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013de:	2201      	movs	r2, #1
 80013e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80013e2:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80013ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013f0:	480d      	ldr	r0, [pc, #52]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013f2:	f001 fcb5 	bl	8002d60 <HAL_ADC_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013fc:	f000 fb38 	bl	8001a70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001400:	2301      	movs	r3, #1
 8001402:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001404:	2301      	movs	r3, #1
 8001406:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001408:	2303      	movs	r3, #3
 800140a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800140c:	463b      	mov	r3, r7
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	@ (8001428 <MX_ADC1_Init+0x98>)
 8001412:	f001 fe0d 	bl	8003030 <HAL_ADC_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800141c:	f000 fb28 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200002f4 	.word	0x200002f4
 800142c:	40012000 	.word	0x40012000
 8001430:	0f000001 	.word	0x0f000001

08001434 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001438:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <MX_I2C1_Init+0x50>)
 800143a:	4a13      	ldr	r2, [pc, #76]	@ (8001488 <MX_I2C1_Init+0x54>)
 800143c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800143e:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <MX_I2C1_Init+0x50>)
 8001440:	4a12      	ldr	r2, [pc, #72]	@ (800148c <MX_I2C1_Init+0x58>)
 8001442:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001444:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <MX_I2C1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <MX_I2C1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001450:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <MX_I2C1_Init+0x50>)
 8001452:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001456:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001458:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <MX_I2C1_Init+0x50>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800145e:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <MX_I2C1_Init+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001464:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <MX_I2C1_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146a:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <MX_I2C1_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	@ (8001484 <MX_I2C1_Init+0x50>)
 8001472:	f002 fee7 	bl	8004244 <HAL_I2C_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800147c:	f000 faf8 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2000039c 	.word	0x2000039c
 8001488:	40005400 	.word	0x40005400
 800148c:	000186a0 	.word	0x000186a0

08001490 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001494:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <MX_I2S3_Init+0x54>)
 8001496:	4a14      	ldr	r2, [pc, #80]	@ (80014e8 <MX_I2S3_Init+0x58>)
 8001498:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800149a:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <MX_I2S3_Init+0x54>)
 800149c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014a0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <MX_I2S3_Init+0x54>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80014a8:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <MX_I2S3_Init+0x54>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80014ae:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <MX_I2S3_Init+0x54>)
 80014b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014b4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <MX_I2S3_Init+0x54>)
 80014b8:	4a0c      	ldr	r2, [pc, #48]	@ (80014ec <MX_I2S3_Init+0x5c>)
 80014ba:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80014bc:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_I2S3_Init+0x54>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80014c2:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <MX_I2S3_Init+0x54>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <MX_I2S3_Init+0x54>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <MX_I2S3_Init+0x54>)
 80014d0:	f004 f85c 	bl	800558c <HAL_I2S_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80014da:	f000 fac9 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200003f0 	.word	0x200003f0
 80014e8:	40003c00 	.word	0x40003c00
 80014ec:	00017700 	.word	0x00017700

080014f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014f4:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <MX_SPI1_Init+0x68>)
 80014f6:	4a19      	ldr	r2, [pc, #100]	@ (800155c <MX_SPI1_Init+0x6c>)
 80014f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014fa:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <MX_SPI1_Init+0x68>)
 80014fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001500:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <MX_SPI1_Init+0x68>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001508:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <MX_SPI1_Init+0x68>)
 800150a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800150e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001510:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <MX_SPI1_Init+0x68>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001516:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <MX_SPI1_Init+0x68>)
 8001518:	2200      	movs	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800151c:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <MX_SPI1_Init+0x68>)
 800151e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001522:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001524:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <MX_SPI1_Init+0x68>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800152a:	4b0b      	ldr	r3, [pc, #44]	@ (8001558 <MX_SPI1_Init+0x68>)
 800152c:	2200      	movs	r2, #0
 800152e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001530:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <MX_SPI1_Init+0x68>)
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001536:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <MX_SPI1_Init+0x68>)
 8001538:	2200      	movs	r2, #0
 800153a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800153c:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <MX_SPI1_Init+0x68>)
 800153e:	220a      	movs	r2, #10
 8001540:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001542:	4805      	ldr	r0, [pc, #20]	@ (8001558 <MX_SPI1_Init+0x68>)
 8001544:	f006 fcee 	bl	8007f24 <HAL_SPI_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800154e:	f000 fa8f 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000438 	.word	0x20000438
 800155c:	40013000 	.word	0x40013000

08001560 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b096      	sub	sp, #88	@ 0x58
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001566:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001574:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800157e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]
 800158e:	615a      	str	r2, [r3, #20]
 8001590:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2220      	movs	r2, #32
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f00c fc7a 	bl	800de92 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800159e:	4b3e      	ldr	r3, [pc, #248]	@ (8001698 <MX_TIM1_Init+0x138>)
 80015a0:	4a3e      	ldr	r2, [pc, #248]	@ (800169c <MX_TIM1_Init+0x13c>)
 80015a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 54;
 80015a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001698 <MX_TIM1_Init+0x138>)
 80015a6:	2236      	movs	r2, #54	@ 0x36
 80015a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001698 <MX_TIM1_Init+0x138>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 80015b0:	4b39      	ldr	r3, [pc, #228]	@ (8001698 <MX_TIM1_Init+0x138>)
 80015b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b8:	4b37      	ldr	r3, [pc, #220]	@ (8001698 <MX_TIM1_Init+0x138>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015be:	4b36      	ldr	r3, [pc, #216]	@ (8001698 <MX_TIM1_Init+0x138>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c4:	4b34      	ldr	r3, [pc, #208]	@ (8001698 <MX_TIM1_Init+0x138>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015ca:	4833      	ldr	r0, [pc, #204]	@ (8001698 <MX_TIM1_Init+0x138>)
 80015cc:	f006 fd33 	bl	8008036 <HAL_TIM_Base_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80015d6:	f000 fa4b 	bl	8001a70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015de:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015e0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015e4:	4619      	mov	r1, r3
 80015e6:	482c      	ldr	r0, [pc, #176]	@ (8001698 <MX_TIM1_Init+0x138>)
 80015e8:	f006 fe2a 	bl	8008240 <HAL_TIM_ConfigClockSource>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80015f2:	f000 fa3d 	bl	8001a70 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80015f6:	4828      	ldr	r0, [pc, #160]	@ (8001698 <MX_TIM1_Init+0x138>)
 80015f8:	f006 fd6c 	bl	80080d4 <HAL_TIM_OC_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001602:	f000 fa35 	bl	8001a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800160e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001612:	4619      	mov	r1, r3
 8001614:	4820      	ldr	r0, [pc, #128]	@ (8001698 <MX_TIM1_Init+0x138>)
 8001616:	f007 f9d1 	bl	80089bc <HAL_TIMEx_MasterConfigSynchronization>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001620:	f000 fa26 	bl	8001a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001624:	2300      	movs	r3, #0
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162c:	2300      	movs	r3, #0
 800162e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001630:	2300      	movs	r3, #0
 8001632:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001638:	2300      	movs	r3, #0
 800163a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800163c:	2300      	movs	r3, #0
 800163e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001640:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001644:	2200      	movs	r2, #0
 8001646:	4619      	mov	r1, r3
 8001648:	4813      	ldr	r0, [pc, #76]	@ (8001698 <MX_TIM1_Init+0x138>)
 800164a:	f006 fd9d 	bl	8008188 <HAL_TIM_OC_ConfigChannel>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001654:	f000 fa0c 	bl	8001a70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800166c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001670:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	4619      	mov	r1, r3
 800167a:	4807      	ldr	r0, [pc, #28]	@ (8001698 <MX_TIM1_Init+0x138>)
 800167c:	f007 fa1a 	bl	8008ab4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001686:	f000 f9f3 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800168a:	4803      	ldr	r0, [pc, #12]	@ (8001698 <MX_TIM1_Init+0x138>)
 800168c:	f001 f8fc 	bl	8002888 <HAL_TIM_MspPostInit>

}
 8001690:	bf00      	nop
 8001692:	3758      	adds	r7, #88	@ 0x58
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000490 	.word	0x20000490
 800169c:	40010000 	.word	0x40010000

080016a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <MX_USART2_UART_Init+0x4c>)
 80016a6:	4a12      	ldr	r2, [pc, #72]	@ (80016f0 <MX_USART2_UART_Init+0x50>)
 80016a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016aa:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <MX_USART2_UART_Init+0x4c>)
 80016ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <MX_USART2_UART_Init+0x4c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <MX_USART2_UART_Init+0x4c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <MX_USART2_UART_Init+0x4c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016c4:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <MX_USART2_UART_Init+0x4c>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ca:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <MX_USART2_UART_Init+0x4c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <MX_USART2_UART_Init+0x4c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016d6:	4805      	ldr	r0, [pc, #20]	@ (80016ec <MX_USART2_UART_Init+0x4c>)
 80016d8:	f007 fa3e 	bl	8008b58 <HAL_UART_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016e2:	f000 f9c5 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200004d8 	.word	0x200004d8
 80016f0:	40004400 	.word	0x40004400

080016f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <MX_DMA_Init+0x3c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	4a0b      	ldr	r2, [pc, #44]	@ (8001730 <MX_DMA_Init+0x3c>)
 8001704:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001708:	6313      	str	r3, [r2, #48]	@ 0x30
 800170a:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <MX_DMA_Init+0x3c>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2038      	movs	r0, #56	@ 0x38
 800171c:	f002 f803 	bl	8003726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001720:	2038      	movs	r0, #56	@ 0x38
 8001722:	f002 f81c 	bl	800375e <HAL_NVIC_EnableIRQ>

}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800

08001734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08c      	sub	sp, #48	@ 0x30
 8001738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
 800174e:	4b7f      	ldr	r3, [pc, #508]	@ (800194c <MX_GPIO_Init+0x218>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a7e      	ldr	r2, [pc, #504]	@ (800194c <MX_GPIO_Init+0x218>)
 8001754:	f043 0310 	orr.w	r3, r3, #16
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b7c      	ldr	r3, [pc, #496]	@ (800194c <MX_GPIO_Init+0x218>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	61bb      	str	r3, [r7, #24]
 8001764:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	4b78      	ldr	r3, [pc, #480]	@ (800194c <MX_GPIO_Init+0x218>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a77      	ldr	r2, [pc, #476]	@ (800194c <MX_GPIO_Init+0x218>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b75      	ldr	r3, [pc, #468]	@ (800194c <MX_GPIO_Init+0x218>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b71      	ldr	r3, [pc, #452]	@ (800194c <MX_GPIO_Init+0x218>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a70      	ldr	r2, [pc, #448]	@ (800194c <MX_GPIO_Init+0x218>)
 800178c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b6e      	ldr	r3, [pc, #440]	@ (800194c <MX_GPIO_Init+0x218>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b6a      	ldr	r3, [pc, #424]	@ (800194c <MX_GPIO_Init+0x218>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a69      	ldr	r2, [pc, #420]	@ (800194c <MX_GPIO_Init+0x218>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b67      	ldr	r3, [pc, #412]	@ (800194c <MX_GPIO_Init+0x218>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	4b63      	ldr	r3, [pc, #396]	@ (800194c <MX_GPIO_Init+0x218>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a62      	ldr	r2, [pc, #392]	@ (800194c <MX_GPIO_Init+0x218>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b60      	ldr	r3, [pc, #384]	@ (800194c <MX_GPIO_Init+0x218>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b5c      	ldr	r3, [pc, #368]	@ (800194c <MX_GPIO_Init+0x218>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a5b      	ldr	r2, [pc, #364]	@ (800194c <MX_GPIO_Init+0x218>)
 80017e0:	f043 0308 	orr.w	r3, r3, #8
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b59      	ldr	r3, [pc, #356]	@ (800194c <MX_GPIO_Init+0x218>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2108      	movs	r1, #8
 80017f6:	4856      	ldr	r0, [pc, #344]	@ (8001950 <MX_GPIO_Init+0x21c>)
 80017f8:	f002 fcd8 	bl	80041ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80017fc:	2201      	movs	r2, #1
 80017fe:	2101      	movs	r1, #1
 8001800:	4854      	ldr	r0, [pc, #336]	@ (8001954 <MX_GPIO_Init+0x220>)
 8001802:	f002 fcd3 	bl	80041ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_debug_GPIO_Port, ADC_debug_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	2102      	movs	r1, #2
 800180a:	4852      	ldr	r0, [pc, #328]	@ (8001954 <MX_GPIO_Init+0x220>)
 800180c:	f002 fcce 	bl	80041ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001810:	2200      	movs	r2, #0
 8001812:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001816:	4850      	ldr	r0, [pc, #320]	@ (8001958 <MX_GPIO_Init+0x224>)
 8001818:	f002 fcc8 	bl	80041ac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800181c:	2308      	movs	r3, #8
 800181e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001820:	2301      	movs	r3, #1
 8001822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	4619      	mov	r1, r3
 8001832:	4847      	ldr	r0, [pc, #284]	@ (8001950 <MX_GPIO_Init+0x21c>)
 8001834:	f002 fb1e 	bl	8003e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001838:	2301      	movs	r3, #1
 800183a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001848:	f107 031c 	add.w	r3, r7, #28
 800184c:	4619      	mov	r1, r3
 800184e:	4841      	ldr	r0, [pc, #260]	@ (8001954 <MX_GPIO_Init+0x220>)
 8001850:	f002 fb10 	bl	8003e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_debug_Pin */
  GPIO_InitStruct.Pin = ADC_debug_Pin;
 8001854:	2302      	movs	r3, #2
 8001856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001858:	2301      	movs	r3, #1
 800185a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001860:	2303      	movs	r3, #3
 8001862:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ADC_debug_GPIO_Port, &GPIO_InitStruct);
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	4619      	mov	r1, r3
 800186a:	483a      	ldr	r0, [pc, #232]	@ (8001954 <MX_GPIO_Init+0x220>)
 800186c:	f002 fb02 	bl	8003e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001870:	2308      	movs	r3, #8
 8001872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001880:	2305      	movs	r3, #5
 8001882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4619      	mov	r1, r3
 800188a:	4832      	ldr	r0, [pc, #200]	@ (8001954 <MX_GPIO_Init+0x220>)
 800188c:	f002 faf2 	bl	8003e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pulse_Oximeter_Int_Pin */
  GPIO_InitStruct.Pin = Pulse_Oximeter_Int_Pin;
 8001890:	2301      	movs	r3, #1
 8001892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001894:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800189a:	2301      	movs	r3, #1
 800189c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Pulse_Oximeter_Int_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	4619      	mov	r1, r3
 80018a4:	482d      	ldr	r0, [pc, #180]	@ (800195c <MX_GPIO_Init+0x228>)
 80018a6:	f002 fae5 	bl	8003e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80018aa:	2304      	movs	r3, #4
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	4827      	ldr	r0, [pc, #156]	@ (800195c <MX_GPIO_Init+0x228>)
 80018be:	f002 fad9 	bl	8003e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80018c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018d4:	2305      	movs	r3, #5
 80018d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4619      	mov	r1, r3
 80018de:	481f      	ldr	r0, [pc, #124]	@ (800195c <MX_GPIO_Init+0x228>)
 80018e0:	f002 fac8 	bl	8003e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80018e4:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80018e8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f6:	f107 031c 	add.w	r3, r7, #28
 80018fa:	4619      	mov	r1, r3
 80018fc:	4816      	ldr	r0, [pc, #88]	@ (8001958 <MX_GPIO_Init+0x224>)
 80018fe:	f002 fab9 	bl	8003e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001902:	2320      	movs	r3, #32
 8001904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	4619      	mov	r1, r3
 8001914:	4810      	ldr	r0, [pc, #64]	@ (8001958 <MX_GPIO_Init+0x224>)
 8001916:	f002 faad 	bl	8003e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800191a:	2302      	movs	r3, #2
 800191c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800191e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	4619      	mov	r1, r3
 800192e:	4808      	ldr	r0, [pc, #32]	@ (8001950 <MX_GPIO_Init+0x21c>)
 8001930:	f002 faa0 	bl	8003e74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2100      	movs	r1, #0
 8001938:	2006      	movs	r0, #6
 800193a:	f001 fef4 	bl	8003726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800193e:	2006      	movs	r0, #6
 8001940:	f001 ff0d 	bl	800375e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001944:	bf00      	nop
 8001946:	3730      	adds	r7, #48	@ 0x30
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40023800 	.word	0x40023800
 8001950:	40021000 	.word	0x40021000
 8001954:	40020800 	.word	0x40020800
 8001958:	40020c00 	.word	0x40020c00
 800195c:	40020400 	.word	0x40020400

08001960 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Pulse_Oximeter_Int_Pin)
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d102      	bne.n	8001976 <HAL_GPIO_EXTI_Callback+0x16>
	{
		pulseOximiterIntFlag = 1;
 8001970:	4b04      	ldr	r3, [pc, #16]	@ (8001984 <HAL_GPIO_EXTI_Callback+0x24>)
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
	}
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000568 	.word	0x20000568

08001988 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001988:	b5b0      	push	{r4, r5, r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	static float adc1_dc = 0.0;
	static uint16_t adc_sum = 0;


    if (hadc->Instance == ADC1) {
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a30      	ldr	r2, [pc, #192]	@ (8001a58 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d14f      	bne.n	8001a3a <HAL_ADC_ConvCpltCallback+0xb2>
    	// get adc reading sum
        adc_sum = 0;
 800199a:	4b30      	ldr	r3, [pc, #192]	@ (8001a5c <HAL_ADC_ConvCpltCallback+0xd4>)
 800199c:	2200      	movs	r2, #0
 800199e:	801a      	strh	r2, [r3, #0]
        for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	e00c      	b.n	80019c0 <HAL_ADC_ConvCpltCallback+0x38>
            adc_sum += adc_buffer[i];
 80019a6:	4a2e      	ldr	r2, [pc, #184]	@ (8001a60 <HAL_ADC_ConvCpltCallback+0xd8>)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80019ae:	4b2b      	ldr	r3, [pc, #172]	@ (8001a5c <HAL_ADC_ConvCpltCallback+0xd4>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b29      	ldr	r3, [pc, #164]	@ (8001a5c <HAL_ADC_ConvCpltCallback+0xd4>)
 80019b8:	801a      	strh	r2, [r3, #0]
        for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	3301      	adds	r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b07      	cmp	r3, #7
 80019c4:	ddef      	ble.n	80019a6 <HAL_ADC_ConvCpltCallback+0x1e>
        }

    	adc1_dc = ADC_DC_FILT_COEFF * adc1_dc + (1-ADC_DC_FILT_COEFF) * adc_sum; // calculate dc offset
 80019c6:	4b27      	ldr	r3, [pc, #156]	@ (8001a64 <HAL_ADC_ConvCpltCallback+0xdc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fdbc 	bl	8000548 <__aeabi_f2d>
 80019d0:	a31d      	add	r3, pc, #116	@ (adr r3, 8001a48 <HAL_ADC_ConvCpltCallback+0xc0>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	f7fe fe0f 	bl	80005f8 <__aeabi_dmul>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4614      	mov	r4, r2
 80019e0:	461d      	mov	r5, r3
 80019e2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a5c <HAL_ADC_ConvCpltCallback+0xd4>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fd9c 	bl	8000524 <__aeabi_i2d>
 80019ec:	a318      	add	r3, pc, #96	@ (adr r3, 8001a50 <HAL_ADC_ConvCpltCallback+0xc8>)
 80019ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f2:	f7fe fe01 	bl	80005f8 <__aeabi_dmul>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4620      	mov	r0, r4
 80019fc:	4629      	mov	r1, r5
 80019fe:	f7fe fc45 	bl	800028c <__adddf3>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f7ff f8ed 	bl	8000be8 <__aeabi_d2f>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4a14      	ldr	r2, [pc, #80]	@ (8001a64 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001a12:	6013      	str	r3, [r2, #0]

    	adc_value = adc_sum - (uint16_t)adc1_dc; // remove dc offset from sum
 8001a14:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <HAL_ADC_ConvCpltCallback+0xd4>)
 8001a16:	881a      	ldrh	r2, [r3, #0]
 8001a18:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001a1a:	edd3 7a00 	vldr	s15, [r3]
 8001a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a22:	ee17 3a90 	vmov	r3, s15
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	b21a      	sxth	r2, r3
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a68 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001a30:	801a      	strh	r2, [r3, #0]

        HAL_GPIO_TogglePin(ADC_debug_GPIO_Port, ADC_debug_Pin);  // Toggle the ADC_debug pin
 8001a32:	2102      	movs	r1, #2
 8001a34:	480d      	ldr	r0, [pc, #52]	@ (8001a6c <HAL_ADC_ConvCpltCallback+0xe4>)
 8001a36:	f002 fbd2 	bl	80041de <HAL_GPIO_TogglePin>

        // add DMA command for spi here? or maybe do it some other way
    }
}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bdb0      	pop	{r4, r5, r7, pc}
 8001a42:	bf00      	nop
 8001a44:	f3af 8000 	nop.w
 8001a48:	d916872b 	.word	0xd916872b
 8001a4c:	3feff7ce 	.word	0x3feff7ce
 8001a50:	d2f1aa00 	.word	0xd2f1aa00
 8001a54:	3f50624d 	.word	0x3f50624d
 8001a58:	40012000 	.word	0x40012000
 8001a5c:	2000057e 	.word	0x2000057e
 8001a60:	2000056c 	.word	0x2000056c
 8001a64:	20000580 	.word	0x20000580
 8001a68:	2000057c 	.word	0x2000057c
 8001a6c:	40020800 	.word	0x40020800

08001a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a74:	b672      	cpsid	i
}
 8001a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <Error_Handler+0x8>

08001a7c <MAX30102_WriteRegister>:
uint8_t max30102_sensor_data[6 * MAX30102_SAMPLES_PER_BURST] = {0};


/* USER CODE BEGIN 0 */
// I2C write to register
HAL_StatusTypeDef MAX30102_WriteRegister(uint8_t reg, uint8_t value) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af04      	add	r7, sp, #16
 8001a82:	4603      	mov	r3, r0
 8001a84:	460a      	mov	r2, r1
 8001a86:	71fb      	strb	r3, [r7, #7]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(&hi2c1, (MAX30102_ADDRESS << 1), reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 100);
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	2364      	movs	r3, #100	@ 0x64
 8001a92:	9302      	str	r3, [sp, #8]
 8001a94:	2301      	movs	r3, #1
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	1dbb      	adds	r3, r7, #6
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	21ae      	movs	r1, #174	@ 0xae
 8001aa0:	4803      	ldr	r0, [pc, #12]	@ (8001ab0 <MAX30102_WriteRegister+0x34>)
 8001aa2:	f002 fe11 	bl	80046c8 <HAL_I2C_Mem_Write>
 8001aa6:	4603      	mov	r3, r0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	2000039c 	.word	0x2000039c

08001ab4 <MAX30102_ReadRegister>:

// I2C read from register
HAL_StatusTypeDef MAX30102_ReadRegister(uint8_t reg, uint8_t *value) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af04      	add	r7, sp, #16
 8001aba:	4603      	mov	r3, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Read(&hi2c1, (MAX30102_ADDRESS << 1), reg, I2C_MEMADD_SIZE_8BIT, value, 1, 100);
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	2364      	movs	r3, #100	@ 0x64
 8001ac6:	9302      	str	r3, [sp, #8]
 8001ac8:	2301      	movs	r3, #1
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	21ae      	movs	r1, #174	@ 0xae
 8001ad4:	4803      	ldr	r0, [pc, #12]	@ (8001ae4 <MAX30102_ReadRegister+0x30>)
 8001ad6:	f002 fef1 	bl	80048bc <HAL_I2C_Mem_Read>
 8001ada:	4603      	mov	r3, r0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	2000039c 	.word	0x2000039c

08001ae8 <MAX30102_ReadFIFO>:

// Read FIFO data
uint8_t MAX30102_ReadFIFO(uint8_t *buffer, uint8_t length) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af04      	add	r7, sp, #16
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Read(&hi2c1, (MAX30102_ADDRESS << 1), REG_FIFO_DATA, I2C_MEMADD_SIZE_8BIT, buffer, length, 100);
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	2264      	movs	r2, #100	@ 0x64
 8001afa:	9202      	str	r2, [sp, #8]
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	2301      	movs	r3, #1
 8001b04:	2207      	movs	r2, #7
 8001b06:	21ae      	movs	r1, #174	@ 0xae
 8001b08:	4803      	ldr	r0, [pc, #12]	@ (8001b18 <MAX30102_ReadFIFO+0x30>)
 8001b0a:	f002 fed7 	bl	80048bc <HAL_I2C_Mem_Read>
 8001b0e:	4603      	mov	r3, r0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	2000039c 	.word	0x2000039c

08001b1c <MAX30102_Init>:

// MAX30102 initialization
uint8_t MAX30102_Init(void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
    uint8_t part_id = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	71bb      	strb	r3, [r7, #6]

    // Read MAX30102 ID to verify device presence
    if (MAX30102_ReadRegister(REG_PART_ID, &part_id) != HAL_OK || part_id != 0x15) {
 8001b26:	1dbb      	adds	r3, r7, #6
 8001b28:	4619      	mov	r1, r3
 8001b2a:	20ff      	movs	r0, #255	@ 0xff
 8001b2c:	f7ff ffc2 	bl	8001ab4 <MAX30102_ReadRegister>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d102      	bne.n	8001b3c <MAX30102_Init+0x20>
 8001b36:	79bb      	ldrb	r3, [r7, #6]
 8001b38:	2b15      	cmp	r3, #21
 8001b3a:	d001      	beq.n	8001b40 <MAX30102_Init+0x24>
        return 0;  // Device not found
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e02b      	b.n	8001b98 <MAX30102_Init+0x7c>
    }

    // Reset MAX30102
    MAX30102_WriteRegister(REG_MODE_CONFIG, (1 << 6));  // Reset MAX30102  (bit 6)
 8001b40:	2140      	movs	r1, #64	@ 0x40
 8001b42:	2009      	movs	r0, #9
 8001b44:	f7ff ff9a 	bl	8001a7c <MAX30102_WriteRegister>
    HAL_Delay(10);
 8001b48:	200a      	movs	r0, #10
 8001b4a:	f001 f8e5 	bl	8002d18 <HAL_Delay>

    // Configure SPO2 mode
    MAX30102_WriteRegister(REG_MODE_CONFIG, 0b011 << BIT_MODE);  // Use heart rate mode only (or 0x07 to enable SPO2)
 8001b4e:	2103      	movs	r1, #3
 8001b50:	2009      	movs	r0, #9
 8001b52:	f7ff ff93 	bl	8001a7c <MAX30102_WriteRegister>
    uint8_t spo2_bits = (0b01 << BIT_SPO2_ADC_RGE) |  (0b001 << BIT_SPO2_SR) | (0b01 << BIT_LED_PW); //pw of 11 browns out supply
 8001b56:	2325      	movs	r3, #37	@ 0x25
 8001b58:	71fb      	strb	r3, [r7, #7]
    MAX30102_WriteRegister(REG_SPO2_CONFIG, spo2_bits);  // Set ADC range and sampling rate
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	200a      	movs	r0, #10
 8001b60:	f7ff ff8c 	bl	8001a7c <MAX30102_WriteRegister>

    // Set LED brightness (0x24 represents medium brightness, adjustable)
    redLEDCurrent = 50;
 8001b64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <MAX30102_Init+0x84>)
 8001b66:	2232      	movs	r2, #50	@ 0x32
 8001b68:	701a      	strb	r2, [r3, #0]
    MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba0 <MAX30102_Init+0x84>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	2001      	movs	r0, #1
 8001b72:	f000 f825 	bl	8001bc0 <MAX30102_setLedCurrent>
    MAX30102_setLedCurrent(IR_LED, redLEDCurrent);
 8001b76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <MAX30102_Init+0x84>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	2002      	movs	r0, #2
 8001b7e:	f000 f81f 	bl	8001bc0 <MAX30102_setLedCurrent>
    //MAX30102_WriteRegister(REG_LED1_PA, 0x24);  // LED1 (Red)
    //MAX30102_WriteRegister(REG_LED2_PA, 0x24);  // LED2 (Infrared)

    // interrupts
    MAX30102_WriteRegister(REG_FIFO_CONFIG, (0b000 << BIT_SMP_AVG) | ((32 - MAX30102_SAMPLES_PER_BURST) << BIT_FIFO_A_FULL_VAL)); // max value is 15 min is 0
 8001b82:	2100      	movs	r1, #0
 8001b84:	2008      	movs	r0, #8
 8001b86:	f7ff ff79 	bl	8001a7c <MAX30102_WriteRegister>
    MAX30102_WriteRegister(REG_INT1_EN, 1 << BIT_EN_A_FULL_INT);
 8001b8a:	2180      	movs	r1, #128	@ 0x80
 8001b8c:	2002      	movs	r0, #2
 8001b8e:	f7ff ff75 	bl	8001a7c <MAX30102_WriteRegister>

    MAX30102_ClearInterrupt();
 8001b92:	f000 f807 	bl	8001ba4 <MAX30102_ClearInterrupt>

    return 1;  // Initialization successful
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	2000064c 	.word	0x2000064c

08001ba4 <MAX30102_ClearInterrupt>:

void MAX30102_ClearInterrupt(void) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
	uint8_t reset = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	71fb      	strb	r3, [r7, #7]
	MAX30102_ReadRegister(REG_STATUS, &reset); // clears initial interrupt
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f7ff ff7e 	bl	8001ab4 <MAX30102_ReadRegister>
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <MAX30102_setLedCurrent>:
	return 1;
}


uint8_t MAX30102_setLedCurrent(uint8_t led, uint8_t currentLevel)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	460a      	mov	r2, r1
 8001bca:	71fb      	strb	r3, [r7, #7]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	71bb      	strb	r3, [r7, #6]
	uint8_t ledRegister = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	73fb      	strb	r3, [r7, #15]

	switch(led){
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d002      	beq.n	8001be0 <MAX30102_setLedCurrent+0x20>
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d003      	beq.n	8001be6 <MAX30102_setLedCurrent+0x26>
 8001bde:	e005      	b.n	8001bec <MAX30102_setLedCurrent+0x2c>
	case RED_LED: 	ledRegister = REG_LED1_PA; break;
 8001be0:	230c      	movs	r3, #12
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	e002      	b.n	8001bec <MAX30102_setLedCurrent+0x2c>
	case IR_LED:	ledRegister = REG_LED2_PA; break;
 8001be6:	230d      	movs	r3, #13
 8001be8:	73fb      	strb	r3, [r7, #15]
 8001bea:	bf00      	nop
	}

	if( MAX30102_WriteRegister(ledRegister, currentLevel) != HAL_OK){
 8001bec:	79ba      	ldrb	r2, [r7, #6]
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ff42 	bl	8001a7c <MAX30102_WriteRegister>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MAX30102_setLedCurrent+0x42>
		return 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e000      	b.n	8001c04 <MAX30102_setLedCurrent+0x44>
	}
	return 1;
 8001c02:	2301      	movs	r3, #1
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <MAX30102_DumpFifo>:

uint8_t MAX30102_DumpFifo() {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
	uint8_t retval = MAX30102_ReadFIFO(max30102_sensor_data, 6 * MAX30102_SAMPLES_PER_BURST);
 8001c12:	21c0      	movs	r1, #192	@ 0xc0
 8001c14:	4805      	ldr	r0, [pc, #20]	@ (8001c2c <MAX30102_DumpFifo+0x20>)
 8001c16:	f7ff ff67 	bl	8001ae8 <MAX30102_ReadFIFO>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
	MAX30102_ClearInterrupt();
 8001c1e:	f7ff ffc1 	bl	8001ba4 <MAX30102_ClearInterrupt>
	return retval;
 8001c22:	79fb      	ldrb	r3, [r7, #7]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000658 	.word	0x20000658

08001c30 <MAX30102_ProcessData>:

void MAX30102_ProcessData() {
 8001c30:	b5b0      	push	{r4, r5, r7, lr}
 8001c32:	b08e      	sub	sp, #56	@ 0x38
 8001c34:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < MAX30102_SAMPLES_PER_BURST; i++) {
 8001c36:	2300      	movs	r3, #0
 8001c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c3a:	e048      	b.n	8001cce <MAX30102_ProcessData+0x9e>
		// heart rate mode only needs red, so only save red data initially long term
		FIFO_LED_DATA rawData = {0};
 8001c3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
		uint8_t n = i*6;
 8001c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	0052      	lsls	r2, r2, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		rawData.redLedRaw = ((max30102_sensor_data[n+0] << 16) | (max30102_sensor_data[n+1] << 8) | max30102_sensor_data[n+2]);
 8001c56:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c5a:	4a21      	ldr	r2, [pc, #132]	@ (8001ce0 <MAX30102_ProcessData+0xb0>)
 8001c5c:	5cd3      	ldrb	r3, [r2, r3]
 8001c5e:	041a      	lsls	r2, r3, #16
 8001c60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c64:	3301      	adds	r3, #1
 8001c66:	491e      	ldr	r1, [pc, #120]	@ (8001ce0 <MAX30102_ProcessData+0xb0>)
 8001c68:	5ccb      	ldrb	r3, [r1, r3]
 8001c6a:	021b      	lsls	r3, r3, #8
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001c72:	3202      	adds	r2, #2
 8001c74:	491a      	ldr	r1, [pc, #104]	@ (8001ce0 <MAX30102_ProcessData+0xb0>)
 8001c76:	5c8a      	ldrb	r2, [r1, r2]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
		rawData.irLedRaw = 	((max30102_sensor_data[n+3] << 16) | (max30102_sensor_data[n+4] << 8) | max30102_sensor_data[n+5]);
 8001c7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c80:	3303      	adds	r3, #3
 8001c82:	4a17      	ldr	r2, [pc, #92]	@ (8001ce0 <MAX30102_ProcessData+0xb0>)
 8001c84:	5cd3      	ldrb	r3, [r2, r3]
 8001c86:	041a      	lsls	r2, r3, #16
 8001c88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	4914      	ldr	r1, [pc, #80]	@ (8001ce0 <MAX30102_ProcessData+0xb0>)
 8001c90:	5ccb      	ldrb	r3, [r1, r3]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	4313      	orrs	r3, r2
 8001c96:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001c9a:	3205      	adds	r2, #5
 8001c9c:	4910      	ldr	r1, [pc, #64]	@ (8001ce0 <MAX30102_ProcessData+0xb0>)
 8001c9e:	5c8a      	ldrb	r2, [r1, r2]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c

		pulseOximeter = pulseOximeter_update(rawData);
 8001ca4:	4c0f      	ldr	r4, [pc, #60]	@ (8001ce4 <MAX30102_ProcessData+0xb4>)
 8001ca6:	4638      	mov	r0, r7
 8001ca8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cac:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001cb0:	f000 f978 	bl	8001fa4 <pulseOximeter_update>
 8001cb4:	4625      	mov	r5, r4
 8001cb6:	463c      	mov	r4, r7
 8001cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cc4:	e885 0003 	stmia.w	r5, {r0, r1}
	for (int i = 0 ; i < MAX30102_SAMPLES_PER_BURST; i++) {
 8001cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cca:	3301      	adds	r3, #1
 8001ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cd0:	2b1f      	cmp	r3, #31
 8001cd2:	ddb3      	ble.n	8001c3c <MAX30102_ProcessData+0xc>

	}
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3738      	adds	r7, #56	@ 0x38
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000658 	.word	0x20000658
 8001ce4:	20000584 	.word	0x20000584

08001ce8 <compare>:

	currentTemperature = temperature;
}

// Comparison function for qsort
int compare(const void *a, const void *b) {
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
    return (*(int*)a - *(int*)b);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	1ad3      	subs	r3, r2, r3
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <getMedian>:

// Function to calculate the median
double getMedian(int arr[], int size) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
    // Sort the array
    qsort(arr, size, sizeof(int), compare);
 8001d12:	6839      	ldr	r1, [r7, #0]
 8001d14:	4b0d      	ldr	r3, [pc, #52]	@ (8001d4c <getMedian+0x44>)
 8001d16:	2204      	movs	r2, #4
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f00b f9f6 	bl	800d10a <qsort>

    return arr[size / 2];
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	0fda      	lsrs	r2, r3, #31
 8001d22:	4413      	add	r3, r2
 8001d24:	105b      	asrs	r3, r3, #1
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fbf8 	bl	8000524 <__aeabi_i2d>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d3c:	eeb0 0a47 	vmov.f32	s0, s14
 8001d40:	eef0 0a67 	vmov.f32	s1, s15
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	08001ce9 	.word	0x08001ce9

08001d50 <detectPulse>:
    return 0;
}*/


bool detectPulse(float sensor_value)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	ed87 0a01 	vstr	s0, [r7, #4]
  static float prev_sensor_value = 0;
  static uint8_t values_went_down = 0;
  static uint16_t currentBeatIndex = 0;

  if(sensor_value > PULSE_MAX_THRESHOLD)
 8001d5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d5e:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001ec8 <detectPulse+0x178>
 8001d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6a:	dd0b      	ble.n	8001d84 <detectPulse+0x34>
  {
    currentPulseDetectorState = PULSE_IDLE;
 8001d6c:	4b57      	ldr	r3, [pc, #348]	@ (8001ecc <detectPulse+0x17c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
    prev_sensor_value = 0;
 8001d72:	4b57      	ldr	r3, [pc, #348]	@ (8001ed0 <detectPulse+0x180>)
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
    values_went_down = 0;
 8001d7a:	4b56      	ldr	r3, [pc, #344]	@ (8001ed4 <detectPulse+0x184>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
    return false;
 8001d80:	2300      	movs	r3, #0
 8001d82:	e097      	b.n	8001eb4 <detectPulse+0x164>
  }

  currentBeatIndex++;
 8001d84:	4b54      	ldr	r3, [pc, #336]	@ (8001ed8 <detectPulse+0x188>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	4b52      	ldr	r3, [pc, #328]	@ (8001ed8 <detectPulse+0x188>)
 8001d8e:	801a      	strh	r2, [r3, #0]

  switch(currentPulseDetectorState)
 8001d90:	4b4e      	ldr	r3, [pc, #312]	@ (8001ecc <detectPulse+0x17c>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d06a      	beq.n	8001e6e <detectPulse+0x11e>
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	f300 8087 	bgt.w	8001eac <detectPulse+0x15c>
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <detectPulse+0x58>
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d011      	beq.n	8001dca <detectPulse+0x7a>
 8001da6:	e081      	b.n	8001eac <detectPulse+0x15c>
  {
    case PULSE_IDLE:
      if(sensor_value >= PULSE_MIN_THRESHOLD) {
 8001da8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dac:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001edc <detectPulse+0x18c>
 8001db0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db8:	da00      	bge.n	8001dbc <detectPulse+0x6c>
        currentPulseDetectorState = PULSE_TRACE_UP;
        values_went_down = 0;
      }
      break;
 8001dba:	e077      	b.n	8001eac <detectPulse+0x15c>
        currentPulseDetectorState = PULSE_TRACE_UP;
 8001dbc:	4b43      	ldr	r3, [pc, #268]	@ (8001ecc <detectPulse+0x17c>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
        values_went_down = 0;
 8001dc2:	4b44      	ldr	r3, [pc, #272]	@ (8001ed4 <detectPulse+0x184>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
      break;
 8001dc8:	e070      	b.n	8001eac <detectPulse+0x15c>

    case PULSE_TRACE_UP:
      if (!(sensor_value > prev_sensor_value))
 8001dca:	4b41      	ldr	r3, [pc, #260]	@ (8001ed0 <detectPulse+0x180>)
 8001dcc:	edd3 7a00 	vldr	s15, [r3]
 8001dd0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ddc:	bfcc      	ite	gt
 8001dde:	2301      	movgt	r3, #1
 8001de0:	2300      	movle	r3, #0
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f083 0301 	eor.w	r3, r3, #1
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d05d      	beq.n	8001eaa <detectPulse+0x15a>
      {
    	valuesBPM[bpmIndex] = currentBeatIndex;
 8001dee:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed8 <detectPulse+0x188>)
 8001df0:	8819      	ldrh	r1, [r3, #0]
 8001df2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee0 <detectPulse+0x190>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee4 <detectPulse+0x194>)
 8001dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    	currentBeatIndex = 0;
 8001dfe:	4b36      	ldr	r3, [pc, #216]	@ (8001ed8 <detectPulse+0x188>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	801a      	strh	r2, [r3, #0]

        bpmIndex++;
 8001e04:	4b36      	ldr	r3, [pc, #216]	@ (8001ee0 <detectPulse+0x190>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	4b34      	ldr	r3, [pc, #208]	@ (8001ee0 <detectPulse+0x190>)
 8001e0e:	701a      	strb	r2, [r3, #0]

        if (bpmIndex >= PULSE_BPM_SAMPLE_SIZE){
 8001e10:	4b33      	ldr	r3, [pc, #204]	@ (8001ee0 <detectPulse+0x190>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d925      	bls.n	8001e64 <detectPulse+0x114>
        	bpmIndex = 0;
 8001e18:	4b31      	ldr	r3, [pc, #196]	@ (8001ee0 <detectPulse+0x190>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
        	uint16_t medianIdx = getMedian(valuesBPM, (int)PULSE_BPM_SAMPLE_SIZE);
 8001e1e:	2109      	movs	r1, #9
 8001e20:	4830      	ldr	r0, [pc, #192]	@ (8001ee4 <detectPulse+0x194>)
 8001e22:	f7ff ff71 	bl	8001d08 <getMedian>
 8001e26:	ec53 2b10 	vmov	r2, r3, d0
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f7fe febb 	bl	8000ba8 <__aeabi_d2uiz>
 8001e32:	4603      	mov	r3, r0
 8001e34:	81fb      	strh	r3, [r7, #14]

        	if(medianIdx > 0)
 8001e36:	89fb      	ldrh	r3, [r7, #14]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d013      	beq.n	8001e64 <detectPulse+0x114>
        		currentBPM = (60.0 * MAX30102_SAMPLE_RATE) / medianIdx;
 8001e3c:	89fb      	ldrh	r3, [r7, #14]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fb70 	bl	8000524 <__aeabi_i2d>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	a11d      	add	r1, pc, #116	@ (adr r1, 8001ec0 <detectPulse+0x170>)
 8001e4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e4e:	f7fe fcfd 	bl	800084c <__aeabi_ddiv>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f7fe fec5 	bl	8000be8 <__aeabi_d2f>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4a21      	ldr	r2, [pc, #132]	@ (8001ee8 <detectPulse+0x198>)
 8001e62:	6013      	str	r3, [r2, #0]
        }

        currentPulseDetectorState = PULSE_TRACE_DOWN;
 8001e64:	4b19      	ldr	r3, [pc, #100]	@ (8001ecc <detectPulse+0x17c>)
 8001e66:	2202      	movs	r2, #2
 8001e68:	701a      	strb	r2, [r3, #0]

        return true;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e022      	b.n	8001eb4 <detectPulse+0x164>
      }
      break;

    case PULSE_TRACE_DOWN:
      if(sensor_value < prev_sensor_value)
 8001e6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ed0 <detectPulse+0x180>)
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e80:	d505      	bpl.n	8001e8e <detectPulse+0x13e>
      {
        values_went_down++;
 8001e82:	4b14      	ldr	r3, [pc, #80]	@ (8001ed4 <detectPulse+0x184>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	3301      	adds	r3, #1
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4b12      	ldr	r3, [pc, #72]	@ (8001ed4 <detectPulse+0x184>)
 8001e8c:	701a      	strb	r2, [r3, #0]
      }


      if(sensor_value < PULSE_MIN_THRESHOLD)
 8001e8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e92:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001edc <detectPulse+0x18c>
 8001e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9e:	d400      	bmi.n	8001ea2 <detectPulse+0x152>
      {
        currentPulseDetectorState = PULSE_IDLE;
      }
      break;
 8001ea0:	e004      	b.n	8001eac <detectPulse+0x15c>
        currentPulseDetectorState = PULSE_IDLE;
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <detectPulse+0x17c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
      break;
 8001ea8:	e000      	b.n	8001eac <detectPulse+0x15c>
      break;
 8001eaa:	bf00      	nop
  }

  prev_sensor_value = sensor_value;
 8001eac:	4a08      	ldr	r2, [pc, #32]	@ (8001ed0 <detectPulse+0x180>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6013      	str	r3, [r2, #0]
  return false;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	f3af 8000 	nop.w
 8001ec0:	00000000 	.word	0x00000000
 8001ec4:	40b77000 	.word	0x40b77000
 8001ec8:	44fa0000 	.word	0x44fa0000
 8001ecc:	20000654 	.word	0x20000654
 8001ed0:	20000718 	.word	0x20000718
 8001ed4:	2000071c 	.word	0x2000071c
 8001ed8:	2000071e 	.word	0x2000071e
 8001edc:	42c80000 	.word	0x42c80000
 8001ee0:	20000638 	.word	0x20000638
 8001ee4:	20000614 	.word	0x20000614
 8001ee8:	20000610 	.word	0x20000610

08001eec <balanceIntesities>:

void balanceIntesities( float redLedDC, float IRLedDC )
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ef6:	edc7 0a00 	vstr	s1, [r7]
	uint32_t currentTime = millis();
 8001efa:	f000 fe57 	bl	8002bac <millis>
 8001efe:	60f8      	str	r0, [r7, #12]
  if( currentTime - lastREDLedCurrentCheck >= RED_LED_CURRENT_ADJUSTMENT_MS)
 8001f00:	4b25      	ldr	r3, [pc, #148]	@ (8001f98 <balanceIntesities+0xac>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	2bc7      	cmp	r3, #199	@ 0xc7
 8001f0c:	d940      	bls.n	8001f90 <balanceIntesities+0xa4>
  {
	if( IRLedDC - redLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent < 51)
 8001f0e:	ed97 7a00 	vldr	s14, [r7]
 8001f12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f1a:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001f9c <balanceIntesities+0xb0>
 8001f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f26:	dd10      	ble.n	8001f4a <balanceIntesities+0x5e>
 8001f28:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa0 <balanceIntesities+0xb4>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b32      	cmp	r3, #50	@ 0x32
 8001f2e:	d80c      	bhi.n	8001f4a <balanceIntesities+0x5e>
    {
		redLEDCurrent++;
 8001f30:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa0 <balanceIntesities+0xb4>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	3301      	adds	r3, #1
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	4b19      	ldr	r3, [pc, #100]	@ (8001fa0 <balanceIntesities+0xb4>)
 8001f3a:	701a      	strb	r2, [r3, #0]
		MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8001f3c:	4b18      	ldr	r3, [pc, #96]	@ (8001fa0 <balanceIntesities+0xb4>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	4619      	mov	r1, r3
 8001f42:	2001      	movs	r0, #1
 8001f44:	f7ff fe3c 	bl	8001bc0 <MAX30102_setLedCurrent>
 8001f48:	e01c      	b.n	8001f84 <balanceIntesities+0x98>
    }
    else if(redLedDC - IRLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent > 0)
 8001f4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f4e:	edd7 7a00 	vldr	s15, [r7]
 8001f52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f56:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001f9c <balanceIntesities+0xb0>
 8001f5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f62:	dd0f      	ble.n	8001f84 <balanceIntesities+0x98>
 8001f64:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <balanceIntesities+0xb4>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00b      	beq.n	8001f84 <balanceIntesities+0x98>
    {
    	redLEDCurrent--;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <balanceIntesities+0xb4>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa0 <balanceIntesities+0xb4>)
 8001f76:	701a      	strb	r2, [r3, #0]
    	MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8001f78:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <balanceIntesities+0xb4>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	2001      	movs	r0, #1
 8001f80:	f7ff fe1e 	bl	8001bc0 <MAX30102_setLedCurrent>
    }

    lastREDLedCurrentCheck = millis();
 8001f84:	f000 fe12 	bl	8002bac <millis>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4b02      	ldr	r3, [pc, #8]	@ (8001f98 <balanceIntesities+0xac>)
 8001f8e:	601a      	str	r2, [r3, #0]
  }
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000650 	.word	0x20000650
 8001f9c:	461c4000 	.word	0x461c4000
 8001fa0:	2000064c 	.word	0x2000064c

08001fa4 <pulseOximeter_update>:

MAX30102 pulseOximeter_update(FIFO_LED_DATA m_fifoData)
	{
 8001fa4:	b5b0      	push	{r4, r5, r7, lr}
 8001fa6:	b090      	sub	sp, #64	@ 0x40
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	e883 0006 	stmia.w	r3, {r1, r2}
		MAX30102 result = {
 8001fb2:	f107 0310 	add.w	r3, r7, #16
 8001fb6:	2228      	movs	r2, #40	@ 0x28
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f00b ff69 	bl	800de92 <memset>
 8001fc0:	4b96      	ldr	r3, [pc, #600]	@ (800221c <pulseOximeter_update+0x278>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc6:	4b96      	ldr	r3, [pc, #600]	@ (8002220 <pulseOximeter_update+0x27c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	633b      	str	r3, [r7, #48]	@ 0x30
		/*float dcFilteredIR*/ 0.0,
		/*float dcFilteredRed*/ 0.0,
		/*float temperature;*/ currentTemperature
	};

	dcFilterIR = dcRemoval( (float)m_fifoData.irLedRaw, dcFilterIR.w, ALPHA );
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	ee07 3a90 	vmov	s15, r3
 8001fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fd6:	4b93      	ldr	r3, [pc, #588]	@ (8002224 <pulseOximeter_update+0x280>)
 8001fd8:	ed93 7a00 	vldr	s14, [r3]
 8001fdc:	ed9f 1a92 	vldr	s2, [pc, #584]	@ 8002228 <pulseOximeter_update+0x284>
 8001fe0:	eef0 0a47 	vmov.f32	s1, s14
 8001fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe8:	f7fe ffc6 	bl	8000f78 <dcRemoval>
 8001fec:	eeb0 7a40 	vmov.f32	s14, s0
 8001ff0:	eef0 7a60 	vmov.f32	s15, s1
 8001ff4:	4b8b      	ldr	r3, [pc, #556]	@ (8002224 <pulseOximeter_update+0x280>)
 8001ff6:	ed83 7a00 	vstr	s14, [r3]
 8001ffa:	edc3 7a01 	vstr	s15, [r3, #4]
	dcFilterRed = dcRemoval( (float)m_fifoData.redLedRaw, dcFilterRed.w, ALPHA );
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002008:	4b88      	ldr	r3, [pc, #544]	@ (800222c <pulseOximeter_update+0x288>)
 800200a:	ed93 7a00 	vldr	s14, [r3]
 800200e:	ed9f 1a86 	vldr	s2, [pc, #536]	@ 8002228 <pulseOximeter_update+0x284>
 8002012:	eef0 0a47 	vmov.f32	s1, s14
 8002016:	eeb0 0a67 	vmov.f32	s0, s15
 800201a:	f7fe ffad 	bl	8000f78 <dcRemoval>
 800201e:	eeb0 7a40 	vmov.f32	s14, s0
 8002022:	eef0 7a60 	vmov.f32	s15, s1
 8002026:	4b81      	ldr	r3, [pc, #516]	@ (800222c <pulseOximeter_update+0x288>)
 8002028:	ed83 7a00 	vstr	s14, [r3]
 800202c:	edc3 7a01 	vstr	s15, [r3, #4]

	float meanDiffResIR = meanDiff( dcFilterIR.result, &meanDiffIR);
 8002030:	4b7c      	ldr	r3, [pc, #496]	@ (8002224 <pulseOximeter_update+0x280>)
 8002032:	edd3 7a01 	vldr	s15, [r3, #4]
 8002036:	487e      	ldr	r0, [pc, #504]	@ (8002230 <pulseOximeter_update+0x28c>)
 8002038:	eeb0 0a67 	vmov.f32	s0, s15
 800203c:	f7ff f818 	bl	8001070 <meanDiff>
 8002040:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
	lowPassButterworthFilter( meanDiffResIR/*-dcFilterIR.result*/, &lpbFilterIR );
 8002044:	487b      	ldr	r0, [pc, #492]	@ (8002234 <pulseOximeter_update+0x290>)
 8002046:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 800204a:	f7fe ffc9 	bl	8000fe0 <lowPassButterworthFilter>

	irACValueSqSum += dcFilterIR.result * dcFilterIR.result;
 800204e:	4b75      	ldr	r3, [pc, #468]	@ (8002224 <pulseOximeter_update+0x280>)
 8002050:	ed93 7a01 	vldr	s14, [r3, #4]
 8002054:	4b73      	ldr	r3, [pc, #460]	@ (8002224 <pulseOximeter_update+0x280>)
 8002056:	edd3 7a01 	vldr	s15, [r3, #4]
 800205a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800205e:	4b76      	ldr	r3, [pc, #472]	@ (8002238 <pulseOximeter_update+0x294>)
 8002060:	edd3 7a00 	vldr	s15, [r3]
 8002064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002068:	4b73      	ldr	r3, [pc, #460]	@ (8002238 <pulseOximeter_update+0x294>)
 800206a:	edc3 7a00 	vstr	s15, [r3]
	redACValueSqSum += dcFilterRed.result * dcFilterRed.result;
 800206e:	4b6f      	ldr	r3, [pc, #444]	@ (800222c <pulseOximeter_update+0x288>)
 8002070:	ed93 7a01 	vldr	s14, [r3, #4]
 8002074:	4b6d      	ldr	r3, [pc, #436]	@ (800222c <pulseOximeter_update+0x288>)
 8002076:	edd3 7a01 	vldr	s15, [r3, #4]
 800207a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800207e:	4b6f      	ldr	r3, [pc, #444]	@ (800223c <pulseOximeter_update+0x298>)
 8002080:	edd3 7a00 	vldr	s15, [r3]
 8002084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002088:	4b6c      	ldr	r3, [pc, #432]	@ (800223c <pulseOximeter_update+0x298>)
 800208a:	edc3 7a00 	vstr	s15, [r3]
	samplesRecorded++;
 800208e:	4b6c      	ldr	r3, [pc, #432]	@ (8002240 <pulseOximeter_update+0x29c>)
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	3301      	adds	r3, #1
 8002094:	b29a      	uxth	r2, r3
 8002096:	4b6a      	ldr	r3, [pc, #424]	@ (8002240 <pulseOximeter_update+0x29c>)
 8002098:	801a      	strh	r2, [r3, #0]

	if( detectPulse( lpbFilterIR.result ) &&  samplesRecorded > 0 )
 800209a:	4b66      	ldr	r3, [pc, #408]	@ (8002234 <pulseOximeter_update+0x290>)
 800209c:	edd3 7a02 	vldr	s15, [r3, #8]
 80020a0:	eeb0 0a67 	vmov.f32	s0, s15
 80020a4:	f7ff fe54 	bl	8001d50 <detectPulse>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 8088 	beq.w	80021c0 <pulseOximeter_update+0x21c>
 80020b0:	4b63      	ldr	r3, [pc, #396]	@ (8002240 <pulseOximeter_update+0x29c>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8083 	beq.w	80021c0 <pulseOximeter_update+0x21c>
	{
		result.pulseDetected=true;
 80020ba:	2301      	movs	r3, #1
 80020bc:	743b      	strb	r3, [r7, #16]
		pulsesDetected++;
 80020be:	4b61      	ldr	r3, [pc, #388]	@ (8002244 <pulseOximeter_update+0x2a0>)
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	3301      	adds	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002244 <pulseOximeter_update+0x2a0>)
 80020c8:	801a      	strh	r2, [r3, #0]

		if( (pulsesDetected % RESET_SPO2_EVERY_N_PULSES == 0) )
 80020ca:	4b5e      	ldr	r3, [pc, #376]	@ (8002244 <pulseOximeter_update+0x2a0>)
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d173      	bne.n	80021c0 <pulseOximeter_update+0x21c>
		{
			float ratioRMS = log( sqrt(redACValueSqSum/samplesRecorded) ) / log( sqrt(irACValueSqSum/samplesRecorded) );
 80020d8:	4b58      	ldr	r3, [pc, #352]	@ (800223c <pulseOximeter_update+0x298>)
 80020da:	ed93 7a00 	vldr	s14, [r3]
 80020de:	4b58      	ldr	r3, [pc, #352]	@ (8002240 <pulseOximeter_update+0x29c>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020ee:	ee16 0a90 	vmov	r0, s13
 80020f2:	f7fe fa29 	bl	8000548 <__aeabi_f2d>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	ec43 2b10 	vmov	d0, r2, r3
 80020fe:	f00d ffd1 	bl	80100a4 <sqrt>
 8002102:	eeb0 7a40 	vmov.f32	s14, s0
 8002106:	eef0 7a60 	vmov.f32	s15, s1
 800210a:	eeb0 0a47 	vmov.f32	s0, s14
 800210e:	eef0 0a67 	vmov.f32	s1, s15
 8002112:	f00d ff89 	bl	8010028 <log>
 8002116:	ec55 4b10 	vmov	r4, r5, d0
 800211a:	4b47      	ldr	r3, [pc, #284]	@ (8002238 <pulseOximeter_update+0x294>)
 800211c:	ed93 7a00 	vldr	s14, [r3]
 8002120:	4b47      	ldr	r3, [pc, #284]	@ (8002240 <pulseOximeter_update+0x29c>)
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	ee07 3a90 	vmov	s15, r3
 8002128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800212c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002130:	ee16 0a90 	vmov	r0, s13
 8002134:	f7fe fa08 	bl	8000548 <__aeabi_f2d>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	ec43 2b10 	vmov	d0, r2, r3
 8002140:	f00d ffb0 	bl	80100a4 <sqrt>
 8002144:	eeb0 7a40 	vmov.f32	s14, s0
 8002148:	eef0 7a60 	vmov.f32	s15, s1
 800214c:	eeb0 0a47 	vmov.f32	s0, s14
 8002150:	eef0 0a67 	vmov.f32	s1, s15
 8002154:	f00d ff68 	bl	8010028 <log>
 8002158:	ec53 2b10 	vmov	r2, r3, d0
 800215c:	4620      	mov	r0, r4
 800215e:	4629      	mov	r1, r5
 8002160:	f7fe fb74 	bl	800084c <__aeabi_ddiv>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	f7fe fd3c 	bl	8000be8 <__aeabi_d2f>
 8002170:	4603      	mov	r3, r0
 8002172:	63bb      	str	r3, [r7, #56]	@ 0x38
			currentSpO2Value = 114.0 - 18.0 * ratioRMS;
 8002174:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002176:	f7fe f9e7 	bl	8000548 <__aeabi_f2d>
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	4b32      	ldr	r3, [pc, #200]	@ (8002248 <pulseOximeter_update+0x2a4>)
 8002180:	f7fe fa3a 	bl	80005f8 <__aeabi_dmul>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	f04f 0000 	mov.w	r0, #0
 800218c:	492f      	ldr	r1, [pc, #188]	@ (800224c <pulseOximeter_update+0x2a8>)
 800218e:	f7fe f87b 	bl	8000288 <__aeabi_dsub>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	f7fe fd25 	bl	8000be8 <__aeabi_d2f>
 800219e:	4603      	mov	r3, r0
 80021a0:	4a1e      	ldr	r2, [pc, #120]	@ (800221c <pulseOximeter_update+0x278>)
 80021a2:	6013      	str	r3, [r2, #0]

			//uint8_t ratio =  ((redACValueSqSum/samplesRecorded) * 100) / (irACValueSqSum/samplesRecorded);
			//if (ratio > 183) ratio = 183;
			//currentSpO2Value = uch_spo2_table[ratio];

			result.SpO2 = currentSpO2Value;
 80021a4:	4b1d      	ldr	r3, [pc, #116]	@ (800221c <pulseOximeter_update+0x278>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	627b      	str	r3, [r7, #36]	@ 0x24

			irACValueSqSum = 0;
 80021aa:	4b23      	ldr	r3, [pc, #140]	@ (8002238 <pulseOximeter_update+0x294>)
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
			redACValueSqSum = 0;
 80021b2:	4b22      	ldr	r3, [pc, #136]	@ (800223c <pulseOximeter_update+0x298>)
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
			samplesRecorded = 0;
 80021ba:	4b21      	ldr	r3, [pc, #132]	@ (8002240 <pulseOximeter_update+0x29c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	801a      	strh	r2, [r3, #0]
		}
	}

	balanceIntesities( dcFilterRed.w, dcFilterIR.w );
 80021c0:	4b1a      	ldr	r3, [pc, #104]	@ (800222c <pulseOximeter_update+0x288>)
 80021c2:	edd3 7a00 	vldr	s15, [r3]
 80021c6:	4b17      	ldr	r3, [pc, #92]	@ (8002224 <pulseOximeter_update+0x280>)
 80021c8:	ed93 7a00 	vldr	s14, [r3]
 80021cc:	eef0 0a47 	vmov.f32	s1, s14
 80021d0:	eeb0 0a67 	vmov.f32	s0, s15
 80021d4:	f7ff fe8a 	bl	8001eec <balanceIntesities>

	result.heartBPM = currentBPM;
 80021d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002250 <pulseOximeter_update+0x2ac>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	617b      	str	r3, [r7, #20]
	result.irCardiogram = lpbFilterIR.result;
 80021de:	4b15      	ldr	r3, [pc, #84]	@ (8002234 <pulseOximeter_update+0x290>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	61bb      	str	r3, [r7, #24]
	result.irDcValue = dcFilterIR.w;
 80021e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002224 <pulseOximeter_update+0x280>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	61fb      	str	r3, [r7, #28]
	result.redDcValue = dcFilterRed.w;
 80021ea:	4b10      	ldr	r3, [pc, #64]	@ (800222c <pulseOximeter_update+0x288>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	623b      	str	r3, [r7, #32]
	result.dcFilteredIR = dcFilterIR.result;
 80021f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002224 <pulseOximeter_update+0x280>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	result.dcFilteredRed = dcFilterRed.result;
 80021f6:	4b0d      	ldr	r3, [pc, #52]	@ (800222c <pulseOximeter_update+0x288>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	633b      	str	r3, [r7, #48]	@ 0x30

	return result;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	461d      	mov	r5, r3
 8002200:	f107 0410 	add.w	r4, r7, #16
 8002204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800220a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800220c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002210:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	3740      	adds	r7, #64	@ 0x40
 8002218:	46bd      	mov	sp, r7
 800221a:	bdb0      	pop	{r4, r5, r7, pc}
 800221c:	20000648 	.word	0x20000648
 8002220:	20000000 	.word	0x20000000
 8002224:	200005ac 	.word	0x200005ac
 8002228:	3f733333 	.word	0x3f733333
 800222c:	200005b4 	.word	0x200005b4
 8002230:	200005bc 	.word	0x200005bc
 8002234:	20000604 	.word	0x20000604
 8002238:	2000063c 	.word	0x2000063c
 800223c:	20000640 	.word	0x20000640
 8002240:	20000644 	.word	0x20000644
 8002244:	20000646 	.word	0x20000646
 8002248:	40320000 	.word	0x40320000
 800224c:	405c8000 	.word	0x405c8000
 8002250:	20000610 	.word	0x20000610

08002254 <MAX30102_getBPM>:

float MAX30102_getBPM(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
	return pulseOximeter.heartBPM;
 8002258:	4b04      	ldr	r3, [pc, #16]	@ (800226c <MAX30102_getBPM+0x18>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	ee07 3a90 	vmov	s15, r3
}
 8002260:	eeb0 0a67 	vmov.f32	s0, s15
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	20000584 	.word	0x20000584

08002270 <MAX30102_getSPO2>:
float MAX30102_getSPO2(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
	return pulseOximeter.SpO2;
 8002274:	4b04      	ldr	r3, [pc, #16]	@ (8002288 <MAX30102_getSPO2+0x18>)
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	ee07 3a90 	vmov	s15, r3
}
 800227c:	eeb0 0a67 	vmov.f32	s0, s15
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	20000584 	.word	0x20000584

0800228c <OLED_Write>:
/**
 * @brief Send a command or data to the OLED
 * @param mode OLED_CMD indicates command mode, OLED_DATA indicates data mode
 * @param data The byte to be sent
 */
void OLED_Write(uint8_t mode, uint8_t data) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af02      	add	r7, sp, #8
 8002292:	4603      	mov	r3, r0
 8002294:	460a      	mov	r2, r1
 8002296:	71fb      	strb	r3, [r7, #7]
 8002298:	4613      	mov	r3, r2
 800229a:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2];
    buffer[0] = mode;  // Control byte
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	733b      	strb	r3, [r7, #12]
    buffer[1] = data;  // Data
 80022a0:	79bb      	ldrb	r3, [r7, #6]
 80022a2:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 80022a4:	f107 020c 	add.w	r2, r7, #12
 80022a8:	f04f 33ff 	mov.w	r3, #4294967295
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2302      	movs	r3, #2
 80022b0:	2178      	movs	r1, #120	@ 0x78
 80022b2:	4803      	ldr	r0, [pc, #12]	@ (80022c0 <OLED_Write+0x34>)
 80022b4:	f002 f90a 	bl	80044cc <HAL_I2C_Master_Transmit>
}
 80022b8:	bf00      	nop
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	2000039c 	.word	0x2000039c

080022c4 <OLED_Init>:

/**
 * @brief Initialize the OLED
 */
void OLED_Init(void) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
    HAL_Delay(100); // Wait for the screen to power up and stabilize
 80022c8:	2064      	movs	r0, #100	@ 0x64
 80022ca:	f000 fd25 	bl	8002d18 <HAL_Delay>

    // Initialization commands (based on the SSD1306 datasheet)
    OLED_Write(OLED_CMD, 0xAE); // Turn off display
 80022ce:	21ae      	movs	r1, #174	@ 0xae
 80022d0:	2000      	movs	r0, #0
 80022d2:	f7ff ffdb 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0x20); // Set memory addressing mode
 80022d6:	2120      	movs	r1, #32
 80022d8:	2000      	movs	r0, #0
 80022da:	f7ff ffd7 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0x10); // Use horizontal addressing mode
 80022de:	2110      	movs	r1, #16
 80022e0:	2000      	movs	r0, #0
 80022e2:	f7ff ffd3 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0xB0); // Set page start address
 80022e6:	21b0      	movs	r1, #176	@ 0xb0
 80022e8:	2000      	movs	r0, #0
 80022ea:	f7ff ffcf 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0xC8); // Set COM output scan direction (from top to bottom)
 80022ee:	21c8      	movs	r1, #200	@ 0xc8
 80022f0:	2000      	movs	r0, #0
 80022f2:	f7ff ffcb 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0x00); // Set lower column address
 80022f6:	2100      	movs	r1, #0
 80022f8:	2000      	movs	r0, #0
 80022fa:	f7ff ffc7 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0x10); // Set higher column address
 80022fe:	2110      	movs	r1, #16
 8002300:	2000      	movs	r0, #0
 8002302:	f7ff ffc3 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0x40); // Set display start line
 8002306:	2140      	movs	r1, #64	@ 0x40
 8002308:	2000      	movs	r0, #0
 800230a:	f7ff ffbf 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0x81); // Set contrast control
 800230e:	2181      	movs	r1, #129	@ 0x81
 8002310:	2000      	movs	r0, #0
 8002312:	f7ff ffbb 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0xFF); // Maximum contrast
 8002316:	21ff      	movs	r1, #255	@ 0xff
 8002318:	2000      	movs	r0, #0
 800231a:	f7ff ffb7 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0xA1); // Set segment re-map (left to right)
 800231e:	21a1      	movs	r1, #161	@ 0xa1
 8002320:	2000      	movs	r0, #0
 8002322:	f7ff ffb3 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0xA6); // Set normal display mode
 8002326:	21a6      	movs	r1, #166	@ 0xa6
 8002328:	2000      	movs	r0, #0
 800232a:	f7ff ffaf 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0xA8); // Set multiplex ratio
 800232e:	21a8      	movs	r1, #168	@ 0xa8
 8002330:	2000      	movs	r0, #0
 8002332:	f7ff ffab 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0x3F); // 1/64 duty cycle
 8002336:	213f      	movs	r1, #63	@ 0x3f
 8002338:	2000      	movs	r0, #0
 800233a:	f7ff ffa7 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0xD3); // Set display offset
 800233e:	21d3      	movs	r1, #211	@ 0xd3
 8002340:	2000      	movs	r0, #0
 8002342:	f7ff ffa3 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0x00); // No offset
 8002346:	2100      	movs	r1, #0
 8002348:	2000      	movs	r0, #0
 800234a:	f7ff ff9f 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0xD5); // Set display clock divide ratio
 800234e:	21d5      	movs	r1, #213	@ 0xd5
 8002350:	2000      	movs	r0, #0
 8002352:	f7ff ff9b 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0xF0); // Set to default value
 8002356:	21f0      	movs	r1, #240	@ 0xf0
 8002358:	2000      	movs	r0, #0
 800235a:	f7ff ff97 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0xD9); // Set pre-charge period
 800235e:	21d9      	movs	r1, #217	@ 0xd9
 8002360:	2000      	movs	r0, #0
 8002362:	f7ff ff93 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0x22); //
 8002366:	2122      	movs	r1, #34	@ 0x22
 8002368:	2000      	movs	r0, #0
 800236a:	f7ff ff8f 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0xDA); // Set COM hardware configuration
 800236e:	21da      	movs	r1, #218	@ 0xda
 8002370:	2000      	movs	r0, #0
 8002372:	f7ff ff8b 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0x12); //
 8002376:	2112      	movs	r1, #18
 8002378:	2000      	movs	r0, #0
 800237a:	f7ff ff87 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0xDB); // Set VCOMH deselect level
 800237e:	21db      	movs	r1, #219	@ 0xdb
 8002380:	2000      	movs	r0, #0
 8002382:	f7ff ff83 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0x20); // ~0.77×VCC
 8002386:	2120      	movs	r1, #32
 8002388:	2000      	movs	r0, #0
 800238a:	f7ff ff7f 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0x8D); // Set charge pump
 800238e:	218d      	movs	r1, #141	@ 0x8d
 8002390:	2000      	movs	r0, #0
 8002392:	f7ff ff7b 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0x14); // Enable charge pump
 8002396:	2114      	movs	r1, #20
 8002398:	2000      	movs	r0, #0
 800239a:	f7ff ff77 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0xAF); // Turn on display
 800239e:	21af      	movs	r1, #175	@ 0xaf
 80023a0:	2000      	movs	r0, #0
 80023a2:	f7ff ff73 	bl	800228c <OLED_Write>
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}

080023aa <OLED_Clear>:

/**
 * @brief Clear the OLED display
 */
void OLED_Clear(void) {
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++) {
 80023b0:	2300      	movs	r3, #0
 80023b2:	71fb      	strb	r3, [r7, #7]
 80023b4:	e01f      	b.n	80023f6 <OLED_Clear+0x4c>
        OLED_Write(OLED_CMD, 0xB0 + page); // Set page address
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	3b50      	subs	r3, #80	@ 0x50
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	4619      	mov	r1, r3
 80023be:	2000      	movs	r0, #0
 80023c0:	f7ff ff64 	bl	800228c <OLED_Write>
        OLED_Write(OLED_CMD, 0x00);        // Set lower column address
 80023c4:	2100      	movs	r1, #0
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7ff ff60 	bl	800228c <OLED_Write>
        OLED_Write(OLED_CMD, 0x10);        // Set higher column address
 80023cc:	2110      	movs	r1, #16
 80023ce:	2000      	movs	r0, #0
 80023d0:	f7ff ff5c 	bl	800228c <OLED_Write>
        for (uint8_t col = 0; col < 128; col++) {
 80023d4:	2300      	movs	r3, #0
 80023d6:	71bb      	strb	r3, [r7, #6]
 80023d8:	e006      	b.n	80023e8 <OLED_Clear+0x3e>
            OLED_Write(OLED_DATA, 0x00); // Clear display
 80023da:	2100      	movs	r1, #0
 80023dc:	2040      	movs	r0, #64	@ 0x40
 80023de:	f7ff ff55 	bl	800228c <OLED_Write>
        for (uint8_t col = 0; col < 128; col++) {
 80023e2:	79bb      	ldrb	r3, [r7, #6]
 80023e4:	3301      	adds	r3, #1
 80023e6:	71bb      	strb	r3, [r7, #6]
 80023e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	daf4      	bge.n	80023da <OLED_Clear+0x30>
    for (uint8_t page = 0; page < 8; page++) {
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	3301      	adds	r3, #1
 80023f4:	71fb      	strb	r3, [r7, #7]
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	2b07      	cmp	r3, #7
 80023fa:	d9dc      	bls.n	80023b6 <OLED_Clear+0xc>
        }
    }
}
 80023fc:	bf00      	nop
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <OLED_ShowChar>:
 * @brief Display a character at a specified position
 * @param x X-coordinate (column address, 0~127)
 * @param y Page address (row number, 0~7)
 * @param ch Character to display
 */
void OLED_ShowChar(uint8_t x, uint8_t y, char ch) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
 8002412:	460b      	mov	r3, r1
 8002414:	71bb      	strb	r3, [r7, #6]
 8002416:	4613      	mov	r3, r2
 8002418:	717b      	strb	r3, [r7, #5]
    if (ch < 32 || ch > 127) return; // Character out of range
 800241a:	797b      	ldrb	r3, [r7, #5]
 800241c:	2b1f      	cmp	r3, #31
 800241e:	d933      	bls.n	8002488 <OLED_ShowChar+0x80>
 8002420:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002424:	2b00      	cmp	r3, #0
 8002426:	db2f      	blt.n	8002488 <OLED_ShowChar+0x80>

    OLED_Write(OLED_CMD, 0xB0 + y);         // Set page address
 8002428:	79bb      	ldrb	r3, [r7, #6]
 800242a:	3b50      	subs	r3, #80	@ 0x50
 800242c:	b2db      	uxtb	r3, r3
 800242e:	4619      	mov	r1, r3
 8002430:	2000      	movs	r0, #0
 8002432:	f7ff ff2b 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0x00 + (x & 0x0F)); // Set lower column address
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	b2db      	uxtb	r3, r3
 800243e:	4619      	mov	r1, r3
 8002440:	2000      	movs	r0, #0
 8002442:	f7ff ff23 	bl	800228c <OLED_Write>
    OLED_Write(OLED_CMD, 0x10 + ((x >> 4) & 0x0F)); // Set higher column address
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	b2db      	uxtb	r3, r3
 800244c:	3310      	adds	r3, #16
 800244e:	b2db      	uxtb	r3, r3
 8002450:	4619      	mov	r1, r3
 8002452:	2000      	movs	r0, #0
 8002454:	f7ff ff1a 	bl	800228c <OLED_Write>

    const uint8_t *font_data = Font8x8[ch - 32]; // Get character dot matrix data
 8002458:	797b      	ldrb	r3, [r7, #5]
 800245a:	3b20      	subs	r3, #32
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4a0c      	ldr	r2, [pc, #48]	@ (8002490 <OLED_ShowChar+0x88>)
 8002460:	4413      	add	r3, r2
 8002462:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < 8; i++) {
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	e00a      	b.n	8002480 <OLED_ShowChar+0x78>
        OLED_Write(OLED_DATA, font_data[i]); // Write character dot matrix data
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	4413      	add	r3, r2
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	4619      	mov	r1, r3
 8002474:	2040      	movs	r0, #64	@ 0x40
 8002476:	f7ff ff09 	bl	800228c <OLED_Write>
    for (int i = 0; i < 8; i++) {
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	3301      	adds	r3, #1
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b07      	cmp	r3, #7
 8002484:	ddf1      	ble.n	800246a <OLED_ShowChar+0x62>
 8002486:	e000      	b.n	800248a <OLED_ShowChar+0x82>
    if (ch < 32 || ch > 127) return; // Character out of range
 8002488:	bf00      	nop
    }
}
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	080106e4 	.word	0x080106e4

08002494 <OLED_ShowString>:
 * @brief Display a string at a specified position
 * @param x Starting X-coordinate (column address)
 * @param y Starting page address (row number)
 * @param str String to display
 */
void OLED_ShowString(uint8_t x, uint8_t y, char* str) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	603a      	str	r2, [r7, #0]
 800249e:	71fb      	strb	r3, [r7, #7]
 80024a0:	460b      	mov	r3, r1
 80024a2:	71bb      	strb	r3, [r7, #6]
    while (*str) {
 80024a4:	e014      	b.n	80024d0 <OLED_ShowString+0x3c>
        OLED_ShowChar(x, y, *str); // Display individual character
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	781a      	ldrb	r2, [r3, #0]
 80024aa:	79b9      	ldrb	r1, [r7, #6]
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff ffaa 	bl	8002408 <OLED_ShowChar>
        x += 8;                    // Each character occupies 8 columns
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	3308      	adds	r3, #8
 80024b8:	71fb      	strb	r3, [r7, #7]
        if (x > 120) {             // Wrap to the next line if exceeding screen width
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	2b78      	cmp	r3, #120	@ 0x78
 80024be:	d904      	bls.n	80024ca <OLED_ShowString+0x36>
            x = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	71fb      	strb	r3, [r7, #7]
            y++;
 80024c4:	79bb      	ldrb	r3, [r7, #6]
 80024c6:	3301      	adds	r3, #1
 80024c8:	71bb      	strb	r3, [r7, #6]
        }
        str++;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	3301      	adds	r3, #1
 80024ce:	603b      	str	r3, [r7, #0]
    while (*str) {
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1e6      	bne.n	80024a6 <OLED_ShowString+0x12>
    }
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	4b10      	ldr	r3, [pc, #64]	@ (8002530 <HAL_MspInit+0x4c>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002530 <HAL_MspInit+0x4c>)
 80024f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002530 <HAL_MspInit+0x4c>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002502:	607b      	str	r3, [r7, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	603b      	str	r3, [r7, #0]
 800250a:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <HAL_MspInit+0x4c>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	4a08      	ldr	r2, [pc, #32]	@ (8002530 <HAL_MspInit+0x4c>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	@ 0x40
 8002516:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <HAL_MspInit+0x4c>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002522:	2007      	movs	r0, #7
 8002524:	f001 f8f4 	bl	8003710 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40023800 	.word	0x40023800

08002534 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	@ 0x28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a2f      	ldr	r2, [pc, #188]	@ (8002610 <HAL_ADC_MspInit+0xdc>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d158      	bne.n	8002608 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	4b2e      	ldr	r3, [pc, #184]	@ (8002614 <HAL_ADC_MspInit+0xe0>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	4a2d      	ldr	r2, [pc, #180]	@ (8002614 <HAL_ADC_MspInit+0xe0>)
 8002560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002564:	6453      	str	r3, [r2, #68]	@ 0x44
 8002566:	4b2b      	ldr	r3, [pc, #172]	@ (8002614 <HAL_ADC_MspInit+0xe0>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	4b27      	ldr	r3, [pc, #156]	@ (8002614 <HAL_ADC_MspInit+0xe0>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	4a26      	ldr	r2, [pc, #152]	@ (8002614 <HAL_ADC_MspInit+0xe0>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6313      	str	r3, [r2, #48]	@ 0x30
 8002582:	4b24      	ldr	r3, [pc, #144]	@ (8002614 <HAL_ADC_MspInit+0xe0>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800258e:	2302      	movs	r3, #2
 8002590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002592:	2303      	movs	r3, #3
 8002594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259a:	f107 0314 	add.w	r3, r7, #20
 800259e:	4619      	mov	r1, r3
 80025a0:	481d      	ldr	r0, [pc, #116]	@ (8002618 <HAL_ADC_MspInit+0xe4>)
 80025a2:	f001 fc67 	bl	8003e74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80025a6:	4b1d      	ldr	r3, [pc, #116]	@ (800261c <HAL_ADC_MspInit+0xe8>)
 80025a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002620 <HAL_ADC_MspInit+0xec>)
 80025aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80025ac:	4b1b      	ldr	r3, [pc, #108]	@ (800261c <HAL_ADC_MspInit+0xe8>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025b2:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <HAL_ADC_MspInit+0xe8>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b8:	4b18      	ldr	r3, [pc, #96]	@ (800261c <HAL_ADC_MspInit+0xe8>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025be:	4b17      	ldr	r3, [pc, #92]	@ (800261c <HAL_ADC_MspInit+0xe8>)
 80025c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025c6:	4b15      	ldr	r3, [pc, #84]	@ (800261c <HAL_ADC_MspInit+0xe8>)
 80025c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025ce:	4b13      	ldr	r3, [pc, #76]	@ (800261c <HAL_ADC_MspInit+0xe8>)
 80025d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80025d6:	4b11      	ldr	r3, [pc, #68]	@ (800261c <HAL_ADC_MspInit+0xe8>)
 80025d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80025de:	4b0f      	ldr	r3, [pc, #60]	@ (800261c <HAL_ADC_MspInit+0xe8>)
 80025e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025e4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025e6:	4b0d      	ldr	r3, [pc, #52]	@ (800261c <HAL_ADC_MspInit+0xe8>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025ec:	480b      	ldr	r0, [pc, #44]	@ (800261c <HAL_ADC_MspInit+0xe8>)
 80025ee:	f001 f8d1 	bl	8003794 <HAL_DMA_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80025f8:	f7ff fa3a 	bl	8001a70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a07      	ldr	r2, [pc, #28]	@ (800261c <HAL_ADC_MspInit+0xe8>)
 8002600:	639a      	str	r2, [r3, #56]	@ 0x38
 8002602:	4a06      	ldr	r2, [pc, #24]	@ (800261c <HAL_ADC_MspInit+0xe8>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002608:	bf00      	nop
 800260a:	3728      	adds	r7, #40	@ 0x28
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40012000 	.word	0x40012000
 8002614:	40023800 	.word	0x40023800
 8002618:	40020000 	.word	0x40020000
 800261c:	2000033c 	.word	0x2000033c
 8002620:	40026410 	.word	0x40026410

08002624 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	@ 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a19      	ldr	r2, [pc, #100]	@ (80026a8 <HAL_I2C_MspInit+0x84>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d12c      	bne.n	80026a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	4b18      	ldr	r3, [pc, #96]	@ (80026ac <HAL_I2C_MspInit+0x88>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	4a17      	ldr	r2, [pc, #92]	@ (80026ac <HAL_I2C_MspInit+0x88>)
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	6313      	str	r3, [r2, #48]	@ 0x30
 8002656:	4b15      	ldr	r3, [pc, #84]	@ (80026ac <HAL_I2C_MspInit+0x88>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002662:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002668:	2312      	movs	r3, #18
 800266a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800266c:	2301      	movs	r3, #1
 800266e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002674:	2304      	movs	r3, #4
 8002676:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	4619      	mov	r1, r3
 800267e:	480c      	ldr	r0, [pc, #48]	@ (80026b0 <HAL_I2C_MspInit+0x8c>)
 8002680:	f001 fbf8 	bl	8003e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <HAL_I2C_MspInit+0x88>)
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	4a07      	ldr	r2, [pc, #28]	@ (80026ac <HAL_I2C_MspInit+0x88>)
 800268e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002692:	6413      	str	r3, [r2, #64]	@ 0x40
 8002694:	4b05      	ldr	r3, [pc, #20]	@ (80026ac <HAL_I2C_MspInit+0x88>)
 8002696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002698:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80026a0:	bf00      	nop
 80026a2:	3728      	adds	r7, #40	@ 0x28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40005400 	.word	0x40005400
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40020400 	.word	0x40020400

080026b4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08e      	sub	sp, #56	@ 0x38
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a31      	ldr	r2, [pc, #196]	@ (80027a4 <HAL_I2S_MspInit+0xf0>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d15a      	bne.n	800279a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80026e4:	2301      	movs	r3, #1
 80026e6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80026e8:	23c0      	movs	r3, #192	@ 0xc0
 80026ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80026ec:	2302      	movs	r3, #2
 80026ee:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	4618      	mov	r0, r3
 80026f6:	f005 fad3 	bl	8007ca0 <HAL_RCCEx_PeriphCLKConfig>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002700:	f7ff f9b6 	bl	8001a70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	4b27      	ldr	r3, [pc, #156]	@ (80027a8 <HAL_I2S_MspInit+0xf4>)
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	4a26      	ldr	r2, [pc, #152]	@ (80027a8 <HAL_I2S_MspInit+0xf4>)
 800270e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002712:	6413      	str	r3, [r2, #64]	@ 0x40
 8002714:	4b24      	ldr	r3, [pc, #144]	@ (80027a8 <HAL_I2S_MspInit+0xf4>)
 8002716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002718:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	4b20      	ldr	r3, [pc, #128]	@ (80027a8 <HAL_I2S_MspInit+0xf4>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002728:	4a1f      	ldr	r2, [pc, #124]	@ (80027a8 <HAL_I2S_MspInit+0xf4>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002730:	4b1d      	ldr	r3, [pc, #116]	@ (80027a8 <HAL_I2S_MspInit+0xf4>)
 8002732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800273c:	2300      	movs	r3, #0
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	4b19      	ldr	r3, [pc, #100]	@ (80027a8 <HAL_I2S_MspInit+0xf4>)
 8002742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002744:	4a18      	ldr	r2, [pc, #96]	@ (80027a8 <HAL_I2S_MspInit+0xf4>)
 8002746:	f043 0304 	orr.w	r3, r3, #4
 800274a:	6313      	str	r3, [r2, #48]	@ 0x30
 800274c:	4b16      	ldr	r3, [pc, #88]	@ (80027a8 <HAL_I2S_MspInit+0xf4>)
 800274e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002758:	2310      	movs	r3, #16
 800275a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002764:	2300      	movs	r3, #0
 8002766:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002768:	2306      	movs	r3, #6
 800276a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800276c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002770:	4619      	mov	r1, r3
 8002772:	480e      	ldr	r0, [pc, #56]	@ (80027ac <HAL_I2S_MspInit+0xf8>)
 8002774:	f001 fb7e 	bl	8003e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002778:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800277c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002786:	2300      	movs	r3, #0
 8002788:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800278a:	2306      	movs	r3, #6
 800278c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800278e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002792:	4619      	mov	r1, r3
 8002794:	4806      	ldr	r0, [pc, #24]	@ (80027b0 <HAL_I2S_MspInit+0xfc>)
 8002796:	f001 fb6d 	bl	8003e74 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800279a:	bf00      	nop
 800279c:	3738      	adds	r7, #56	@ 0x38
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40003c00 	.word	0x40003c00
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40020000 	.word	0x40020000
 80027b0:	40020800 	.word	0x40020800

080027b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	@ 0x28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a19      	ldr	r2, [pc, #100]	@ (8002838 <HAL_SPI_MspInit+0x84>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d12b      	bne.n	800282e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	4b18      	ldr	r3, [pc, #96]	@ (800283c <HAL_SPI_MspInit+0x88>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	4a17      	ldr	r2, [pc, #92]	@ (800283c <HAL_SPI_MspInit+0x88>)
 80027e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027e6:	4b15      	ldr	r3, [pc, #84]	@ (800283c <HAL_SPI_MspInit+0x88>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	4b11      	ldr	r3, [pc, #68]	@ (800283c <HAL_SPI_MspInit+0x88>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	4a10      	ldr	r2, [pc, #64]	@ (800283c <HAL_SPI_MspInit+0x88>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6313      	str	r3, [r2, #48]	@ 0x30
 8002802:	4b0e      	ldr	r3, [pc, #56]	@ (800283c <HAL_SPI_MspInit+0x88>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800280e:	23e0      	movs	r3, #224	@ 0xe0
 8002810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002812:	2302      	movs	r3, #2
 8002814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281a:	2300      	movs	r3, #0
 800281c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800281e:	2305      	movs	r3, #5
 8002820:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002822:	f107 0314 	add.w	r3, r7, #20
 8002826:	4619      	mov	r1, r3
 8002828:	4805      	ldr	r0, [pc, #20]	@ (8002840 <HAL_SPI_MspInit+0x8c>)
 800282a:	f001 fb23 	bl	8003e74 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800282e:	bf00      	nop
 8002830:	3728      	adds	r7, #40	@ 0x28
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40013000 	.word	0x40013000
 800283c:	40023800 	.word	0x40023800
 8002840:	40020000 	.word	0x40020000

08002844 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0b      	ldr	r2, [pc, #44]	@ (8002880 <HAL_TIM_Base_MspInit+0x3c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d10d      	bne.n	8002872 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b0a      	ldr	r3, [pc, #40]	@ (8002884 <HAL_TIM_Base_MspInit+0x40>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	4a09      	ldr	r2, [pc, #36]	@ (8002884 <HAL_TIM_Base_MspInit+0x40>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6453      	str	r3, [r2, #68]	@ 0x44
 8002866:	4b07      	ldr	r3, [pc, #28]	@ (8002884 <HAL_TIM_Base_MspInit+0x40>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40010000 	.word	0x40010000
 8002884:	40023800 	.word	0x40023800

08002888 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 030c 	add.w	r3, r7, #12
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a12      	ldr	r2, [pc, #72]	@ (80028f0 <HAL_TIM_MspPostInit+0x68>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d11e      	bne.n	80028e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	4b11      	ldr	r3, [pc, #68]	@ (80028f4 <HAL_TIM_MspPostInit+0x6c>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	4a10      	ldr	r2, [pc, #64]	@ (80028f4 <HAL_TIM_MspPostInit+0x6c>)
 80028b4:	f043 0310 	orr.w	r3, r3, #16
 80028b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ba:	4b0e      	ldr	r3, [pc, #56]	@ (80028f4 <HAL_TIM_MspPostInit+0x6c>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d4:	2300      	movs	r3, #0
 80028d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028d8:	2301      	movs	r3, #1
 80028da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028dc:	f107 030c 	add.w	r3, r7, #12
 80028e0:	4619      	mov	r1, r3
 80028e2:	4805      	ldr	r0, [pc, #20]	@ (80028f8 <HAL_TIM_MspPostInit+0x70>)
 80028e4:	f001 fac6 	bl	8003e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028e8:	bf00      	nop
 80028ea:	3720      	adds	r7, #32
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40010000 	.word	0x40010000
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40021000 	.word	0x40021000

080028fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	@ 0x28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a19      	ldr	r2, [pc, #100]	@ (8002980 <HAL_UART_MspInit+0x84>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d12b      	bne.n	8002976 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	4b18      	ldr	r3, [pc, #96]	@ (8002984 <HAL_UART_MspInit+0x88>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	4a17      	ldr	r2, [pc, #92]	@ (8002984 <HAL_UART_MspInit+0x88>)
 8002928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800292c:	6413      	str	r3, [r2, #64]	@ 0x40
 800292e:	4b15      	ldr	r3, [pc, #84]	@ (8002984 <HAL_UART_MspInit+0x88>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	4b11      	ldr	r3, [pc, #68]	@ (8002984 <HAL_UART_MspInit+0x88>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	4a10      	ldr	r2, [pc, #64]	@ (8002984 <HAL_UART_MspInit+0x88>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6313      	str	r3, [r2, #48]	@ 0x30
 800294a:	4b0e      	ldr	r3, [pc, #56]	@ (8002984 <HAL_UART_MspInit+0x88>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002956:	230c      	movs	r3, #12
 8002958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295a:	2302      	movs	r3, #2
 800295c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002962:	2303      	movs	r3, #3
 8002964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002966:	2307      	movs	r3, #7
 8002968:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296a:	f107 0314 	add.w	r3, r7, #20
 800296e:	4619      	mov	r1, r3
 8002970:	4805      	ldr	r0, [pc, #20]	@ (8002988 <HAL_UART_MspInit+0x8c>)
 8002972:	f001 fa7f 	bl	8003e74 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002976:	bf00      	nop
 8002978:	3728      	adds	r7, #40	@ 0x28
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40004400 	.word	0x40004400
 8002984:	40023800 	.word	0x40023800
 8002988:	40020000 	.word	0x40020000

0800298c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002990:	bf00      	nop
 8002992:	e7fd      	b.n	8002990 <NMI_Handler+0x4>

08002994 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002998:	bf00      	nop
 800299a:	e7fd      	b.n	8002998 <HardFault_Handler+0x4>

0800299c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029a0:	bf00      	nop
 80029a2:	e7fd      	b.n	80029a0 <MemManage_Handler+0x4>

080029a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <BusFault_Handler+0x4>

080029ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029b0:	bf00      	nop
 80029b2:	e7fd      	b.n	80029b0 <UsageFault_Handler+0x4>

080029b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029e2:	f000 f979 	bl	8002cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}

080029ea <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pulse_Oximeter_Int_Pin);
 80029ee:	2001      	movs	r0, #1
 80029f0:	f001 fc10 	bl	8004214 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80029f4:	bf00      	nop
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029fc:	4802      	ldr	r0, [pc, #8]	@ (8002a08 <DMA2_Stream0_IRQHandler+0x10>)
 80029fe:	f000 ffcf 	bl	80039a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	2000033c 	.word	0x2000033c

08002a0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002a10:	4802      	ldr	r0, [pc, #8]	@ (8002a1c <OTG_FS_IRQHandler+0x10>)
 8002a12:	f003 fb9f 	bl	8006154 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20001c08 	.word	0x20001c08

08002a20 <_getpid>:
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	2301      	movs	r3, #1
 8002a26:	4618      	mov	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <_kill>:
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
 8002a3a:	f00b fa7d 	bl	800df38 <__errno>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2216      	movs	r2, #22
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	f04f 33ff 	mov.w	r3, #4294967295
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <_exit>:
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff ffe7 	bl	8002a30 <_kill>
 8002a62:	bf00      	nop
 8002a64:	e7fd      	b.n	8002a62 <_exit+0x12>

08002a66 <_read>:
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	e00a      	b.n	8002a8e <_read+0x28>
 8002a78:	f3af 8000 	nop.w
 8002a7c:	4601      	mov	r1, r0
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	60ba      	str	r2, [r7, #8]
 8002a84:	b2ca      	uxtb	r2, r1
 8002a86:	701a      	strb	r2, [r3, #0]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	dbf0      	blt.n	8002a78 <_read+0x12>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <_write>:
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	e009      	b.n	8002ac6 <_write+0x26>
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	60ba      	str	r2, [r7, #8]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f3af 8000 	nop.w
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	dbf1      	blt.n	8002ab2 <_write+0x12>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <_close>:
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <_fstat>:
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	2300      	movs	r3, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <_isatty>:
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	2301      	movs	r3, #1
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <_lseek>:
 8002b26:	b480      	push	{r7}
 8002b28:	b085      	sub	sp, #20
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	2300      	movs	r3, #0
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <_sbrk>:
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	4a14      	ldr	r2, [pc, #80]	@ (8002b9c <_sbrk+0x5c>)
 8002b4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ba0 <_sbrk+0x60>)
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	4b13      	ldr	r3, [pc, #76]	@ (8002ba4 <_sbrk+0x64>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <_sbrk+0x22>
 8002b5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ba4 <_sbrk+0x64>)
 8002b5e:	4a12      	ldr	r2, [pc, #72]	@ (8002ba8 <_sbrk+0x68>)
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	4b10      	ldr	r3, [pc, #64]	@ (8002ba4 <_sbrk+0x64>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d207      	bcs.n	8002b80 <_sbrk+0x40>
 8002b70:	f00b f9e2 	bl	800df38 <__errno>
 8002b74:	4603      	mov	r3, r0
 8002b76:	220c      	movs	r2, #12
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7e:	e009      	b.n	8002b94 <_sbrk+0x54>
 8002b80:	4b08      	ldr	r3, [pc, #32]	@ (8002ba4 <_sbrk+0x64>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	4b07      	ldr	r3, [pc, #28]	@ (8002ba4 <_sbrk+0x64>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	4a05      	ldr	r2, [pc, #20]	@ (8002ba4 <_sbrk+0x64>)
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20020000 	.word	0x20020000
 8002ba0:	00000400 	.word	0x00000400
 8002ba4:	20000720 	.word	0x20000720
 8002ba8:	20002458 	.word	0x20002458

08002bac <millis>:
  }
}

// Get number of elapsed milliseconds
uint32_t millis(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002bb0:	f000 f8a6 	bl	8002d00 <HAL_GetTick>
 8002bb4:	4603      	mov	r3, r0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bc0:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <SystemInit+0x20>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc6:	4a05      	ldr	r2, [pc, #20]	@ (8002bdc <SystemInit+0x20>)
 8002bc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack     /* set stack pointer */
 8002be0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c18 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002be4:	f7ff ffea 	bl	8002bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002be8:	480c      	ldr	r0, [pc, #48]	@ (8002c1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bea:	490d      	ldr	r1, [pc, #52]	@ (8002c20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bec:	4a0d      	ldr	r2, [pc, #52]	@ (8002c24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf0:	e002      	b.n	8002bf8 <LoopCopyDataInit>

08002bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bf6:	3304      	adds	r3, #4

08002bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bfc:	d3f9      	bcc.n	8002bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8002c28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c00:	4c0a      	ldr	r4, [pc, #40]	@ (8002c2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c04:	e001      	b.n	8002c0a <LoopFillZerobss>

08002c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c08:	3204      	adds	r2, #4

08002c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c0c:	d3fb      	bcc.n	8002c06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c0e:	f00b f999 	bl	800df44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c12:	f7fe fa9f 	bl	8001154 <main>
  bx  lr    
 8002c16:	4770      	bx	lr
   ldr   sp, =_estack     /* set stack pointer */
 8002c18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c20:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8002c24:	08010d88 	.word	0x08010d88
  ldr r2, =_sbss
 8002c28:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8002c2c:	20002458 	.word	0x20002458

08002c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c30:	e7fe      	b.n	8002c30 <ADC_IRQHandler>
	...

08002c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c38:	4b0e      	ldr	r3, [pc, #56]	@ (8002c74 <HAL_Init+0x40>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c74 <HAL_Init+0x40>)
 8002c3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c44:	4b0b      	ldr	r3, [pc, #44]	@ (8002c74 <HAL_Init+0x40>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a0a      	ldr	r2, [pc, #40]	@ (8002c74 <HAL_Init+0x40>)
 8002c4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c50:	4b08      	ldr	r3, [pc, #32]	@ (8002c74 <HAL_Init+0x40>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a07      	ldr	r2, [pc, #28]	@ (8002c74 <HAL_Init+0x40>)
 8002c56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c5c:	2003      	movs	r0, #3
 8002c5e:	f000 fd57 	bl	8003710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c62:	2000      	movs	r0, #0
 8002c64:	f000 f808 	bl	8002c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c68:	f7ff fc3c 	bl	80024e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023c00 	.word	0x40023c00

08002c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c80:	4b12      	ldr	r3, [pc, #72]	@ (8002ccc <HAL_InitTick+0x54>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b12      	ldr	r3, [pc, #72]	@ (8002cd0 <HAL_InitTick+0x58>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 fd6f 	bl	800377a <HAL_SYSTICK_Config>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e00e      	b.n	8002cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b0f      	cmp	r3, #15
 8002caa:	d80a      	bhi.n	8002cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cac:	2200      	movs	r2, #0
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb4:	f000 fd37 	bl	8003726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cb8:	4a06      	ldr	r2, [pc, #24]	@ (8002cd4 <HAL_InitTick+0x5c>)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e000      	b.n	8002cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20000004 	.word	0x20000004
 8002cd0:	2000000c 	.word	0x2000000c
 8002cd4:	20000008 	.word	0x20000008

08002cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cdc:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <HAL_IncTick+0x20>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <HAL_IncTick+0x24>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	4a04      	ldr	r2, [pc, #16]	@ (8002cfc <HAL_IncTick+0x24>)
 8002cea:	6013      	str	r3, [r2, #0]
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	2000000c 	.word	0x2000000c
 8002cfc:	20000724 	.word	0x20000724

08002d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return uwTick;
 8002d04:	4b03      	ldr	r3, [pc, #12]	@ (8002d14 <HAL_GetTick+0x14>)
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20000724 	.word	0x20000724

08002d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d20:	f7ff ffee 	bl	8002d00 <HAL_GetTick>
 8002d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d30:	d005      	beq.n	8002d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d32:	4b0a      	ldr	r3, [pc, #40]	@ (8002d5c <HAL_Delay+0x44>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d3e:	bf00      	nop
 8002d40:	f7ff ffde 	bl	8002d00 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d8f7      	bhi.n	8002d40 <HAL_Delay+0x28>
  {
  }
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	2000000c 	.word	0x2000000c

08002d60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e033      	b.n	8002dde <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff fbd8 	bl	8002534 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d118      	bne.n	8002dd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002da6:	f023 0302 	bic.w	r3, r3, #2
 8002daa:	f043 0202 	orr.w	r2, r3, #2
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fa5e 	bl	8003274 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	f023 0303 	bic.w	r3, r3, #3
 8002dc6:	f043 0201 	orr.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002dce:	e001      	b.n	8002dd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_ADC_Start_DMA+0x1e>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e0e9      	b.n	8002fda <HAL_ADC_Start_DMA+0x1f2>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d018      	beq.n	8002e4e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e2c:	4b6d      	ldr	r3, [pc, #436]	@ (8002fe4 <HAL_ADC_Start_DMA+0x1fc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a6d      	ldr	r2, [pc, #436]	@ (8002fe8 <HAL_ADC_Start_DMA+0x200>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	0c9a      	lsrs	r2, r3, #18
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002e40:	e002      	b.n	8002e48 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	3b01      	subs	r3, #1
 8002e46:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f9      	bne.n	8002e42 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e5c:	d107      	bne.n	8002e6e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e6c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	f040 80a1 	bne.w	8002fc0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e82:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002e86:	f023 0301 	bic.w	r3, r3, #1
 8002e8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d007      	beq.n	8002eb0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ea8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ebc:	d106      	bne.n	8002ecc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec2:	f023 0206 	bic.w	r2, r3, #6
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	645a      	str	r2, [r3, #68]	@ 0x44
 8002eca:	e002      	b.n	8002ed2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eda:	4b44      	ldr	r3, [pc, #272]	@ (8002fec <HAL_ADC_Start_DMA+0x204>)
 8002edc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee2:	4a43      	ldr	r2, [pc, #268]	@ (8002ff0 <HAL_ADC_Start_DMA+0x208>)
 8002ee4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eea:	4a42      	ldr	r2, [pc, #264]	@ (8002ff4 <HAL_ADC_Start_DMA+0x20c>)
 8002eec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef2:	4a41      	ldr	r2, [pc, #260]	@ (8002ff8 <HAL_ADC_Start_DMA+0x210>)
 8002ef4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002efe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002f0e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f1e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	334c      	adds	r3, #76	@ 0x4c
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f000 fcde 	bl	80038f0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d12a      	bne.n	8002f96 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a2d      	ldr	r2, [pc, #180]	@ (8002ffc <HAL_ADC_Start_DMA+0x214>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d015      	beq.n	8002f76 <HAL_ADC_Start_DMA+0x18e>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a2c      	ldr	r2, [pc, #176]	@ (8003000 <HAL_ADC_Start_DMA+0x218>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d105      	bne.n	8002f60 <HAL_ADC_Start_DMA+0x178>
 8002f54:	4b25      	ldr	r3, [pc, #148]	@ (8002fec <HAL_ADC_Start_DMA+0x204>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a27      	ldr	r2, [pc, #156]	@ (8003004 <HAL_ADC_Start_DMA+0x21c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d136      	bne.n	8002fd8 <HAL_ADC_Start_DMA+0x1f0>
 8002f6a:	4b20      	ldr	r3, [pc, #128]	@ (8002fec <HAL_ADC_Start_DMA+0x204>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d130      	bne.n	8002fd8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d129      	bne.n	8002fd8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	e020      	b.n	8002fd8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a18      	ldr	r2, [pc, #96]	@ (8002ffc <HAL_ADC_Start_DMA+0x214>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d11b      	bne.n	8002fd8 <HAL_ADC_Start_DMA+0x1f0>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d114      	bne.n	8002fd8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002fbc:	609a      	str	r2, [r3, #8]
 8002fbe:	e00b      	b.n	8002fd8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc4:	f043 0210 	orr.w	r2, r3, #16
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd0:	f043 0201 	orr.w	r2, r3, #1
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000004 	.word	0x20000004
 8002fe8:	431bde83 	.word	0x431bde83
 8002fec:	40012300 	.word	0x40012300
 8002ff0:	0800346d 	.word	0x0800346d
 8002ff4:	08003527 	.word	0x08003527
 8002ff8:	08003543 	.word	0x08003543
 8002ffc:	40012000 	.word	0x40012000
 8003000:	40012100 	.word	0x40012100
 8003004:	40012200 	.word	0x40012200

08003008 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_ADC_ConfigChannel+0x1c>
 8003048:	2302      	movs	r3, #2
 800304a:	e105      	b.n	8003258 <HAL_ADC_ConfigChannel+0x228>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b09      	cmp	r3, #9
 800305a:	d925      	bls.n	80030a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68d9      	ldr	r1, [r3, #12]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	b29b      	uxth	r3, r3
 8003068:	461a      	mov	r2, r3
 800306a:	4613      	mov	r3, r2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4413      	add	r3, r2
 8003070:	3b1e      	subs	r3, #30
 8003072:	2207      	movs	r2, #7
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43da      	mvns	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	400a      	ands	r2, r1
 8003080:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68d9      	ldr	r1, [r3, #12]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	b29b      	uxth	r3, r3
 8003092:	4618      	mov	r0, r3
 8003094:	4603      	mov	r3, r0
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4403      	add	r3, r0
 800309a:	3b1e      	subs	r3, #30
 800309c:	409a      	lsls	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	e022      	b.n	80030ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6919      	ldr	r1, [r3, #16]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	4613      	mov	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	2207      	movs	r2, #7
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43da      	mvns	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	400a      	ands	r2, r1
 80030ca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6919      	ldr	r1, [r3, #16]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	4618      	mov	r0, r3
 80030de:	4603      	mov	r3, r0
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4403      	add	r3, r0
 80030e4:	409a      	lsls	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b06      	cmp	r3, #6
 80030f4:	d824      	bhi.n	8003140 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	3b05      	subs	r3, #5
 8003108:	221f      	movs	r2, #31
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43da      	mvns	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	400a      	ands	r2, r1
 8003116:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	b29b      	uxth	r3, r3
 8003124:	4618      	mov	r0, r3
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	3b05      	subs	r3, #5
 8003132:	fa00 f203 	lsl.w	r2, r0, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	635a      	str	r2, [r3, #52]	@ 0x34
 800313e:	e04c      	b.n	80031da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b0c      	cmp	r3, #12
 8003146:	d824      	bhi.n	8003192 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	3b23      	subs	r3, #35	@ 0x23
 800315a:	221f      	movs	r2, #31
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43da      	mvns	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	400a      	ands	r2, r1
 8003168:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	b29b      	uxth	r3, r3
 8003176:	4618      	mov	r0, r3
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	3b23      	subs	r3, #35	@ 0x23
 8003184:	fa00 f203 	lsl.w	r2, r0, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003190:	e023      	b.n	80031da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	3b41      	subs	r3, #65	@ 0x41
 80031a4:	221f      	movs	r2, #31
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43da      	mvns	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	400a      	ands	r2, r1
 80031b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	4618      	mov	r0, r3
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	3b41      	subs	r3, #65	@ 0x41
 80031ce:	fa00 f203 	lsl.w	r2, r0, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031da:	4b22      	ldr	r3, [pc, #136]	@ (8003264 <HAL_ADC_ConfigChannel+0x234>)
 80031dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a21      	ldr	r2, [pc, #132]	@ (8003268 <HAL_ADC_ConfigChannel+0x238>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d109      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x1cc>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b12      	cmp	r3, #18
 80031ee:	d105      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a19      	ldr	r2, [pc, #100]	@ (8003268 <HAL_ADC_ConfigChannel+0x238>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d123      	bne.n	800324e <HAL_ADC_ConfigChannel+0x21e>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b10      	cmp	r3, #16
 800320c:	d003      	beq.n	8003216 <HAL_ADC_ConfigChannel+0x1e6>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b11      	cmp	r3, #17
 8003214:	d11b      	bne.n	800324e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b10      	cmp	r3, #16
 8003228:	d111      	bne.n	800324e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800322a:	4b10      	ldr	r3, [pc, #64]	@ (800326c <HAL_ADC_ConfigChannel+0x23c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a10      	ldr	r2, [pc, #64]	@ (8003270 <HAL_ADC_ConfigChannel+0x240>)
 8003230:	fba2 2303 	umull	r2, r3, r2, r3
 8003234:	0c9a      	lsrs	r2, r3, #18
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003240:	e002      	b.n	8003248 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	3b01      	subs	r3, #1
 8003246:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f9      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	40012300 	.word	0x40012300
 8003268:	40012000 	.word	0x40012000
 800326c:	20000004 	.word	0x20000004
 8003270:	431bde83 	.word	0x431bde83

08003274 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800327c:	4b79      	ldr	r3, [pc, #484]	@ (8003464 <ADC_Init+0x1f0>)
 800327e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	431a      	orrs	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	021a      	lsls	r2, r3, #8
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80032cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6899      	ldr	r1, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003306:	4a58      	ldr	r2, [pc, #352]	@ (8003468 <ADC_Init+0x1f4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d022      	beq.n	8003352 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800331a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6899      	ldr	r1, [r3, #8]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800333c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6899      	ldr	r1, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	e00f      	b.n	8003372 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003360:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003370:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0202 	bic.w	r2, r2, #2
 8003380:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6899      	ldr	r1, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	7e1b      	ldrb	r3, [r3, #24]
 800338c:	005a      	lsls	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01b      	beq.n	80033d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033ae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80033be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6859      	ldr	r1, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ca:	3b01      	subs	r3, #1
 80033cc:	035a      	lsls	r2, r3, #13
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	e007      	b.n	80033e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033e6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80033f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	3b01      	subs	r3, #1
 8003404:	051a      	lsls	r2, r3, #20
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800341c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6899      	ldr	r1, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800342a:	025a      	lsls	r2, r3, #9
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003442:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6899      	ldr	r1, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	029a      	lsls	r2, r3, #10
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	609a      	str	r2, [r3, #8]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	40012300 	.word	0x40012300
 8003468:	0f000001 	.word	0x0f000001

0800346c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003478:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003482:	2b00      	cmp	r3, #0
 8003484:	d13c      	bne.n	8003500 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d12b      	bne.n	80034f8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d127      	bne.n	80034f8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ae:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d006      	beq.n	80034c4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d119      	bne.n	80034f8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0220 	bic.w	r2, r2, #32
 80034d2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f0:	f043 0201 	orr.w	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f7fe fa45 	bl	8001988 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034fe:	e00e      	b.n	800351e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f7ff fd85 	bl	800301c <HAL_ADC_ErrorCallback>
}
 8003512:	e004      	b.n	800351e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
}
 800351e:	bf00      	nop
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003532:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f7ff fd67 	bl	8003008 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800353a:	bf00      	nop
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2240      	movs	r2, #64	@ 0x40
 8003554:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355a:	f043 0204 	orr.w	r2, r3, #4
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f7ff fd5a 	bl	800301c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003568:	bf00      	nop
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003580:	4b0c      	ldr	r3, [pc, #48]	@ (80035b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800358c:	4013      	ands	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003598:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800359c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035a2:	4a04      	ldr	r2, [pc, #16]	@ (80035b4 <__NVIC_SetPriorityGrouping+0x44>)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	60d3      	str	r3, [r2, #12]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035bc:	4b04      	ldr	r3, [pc, #16]	@ (80035d0 <__NVIC_GetPriorityGrouping+0x18>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	0a1b      	lsrs	r3, r3, #8
 80035c2:	f003 0307 	and.w	r3, r3, #7
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	db0b      	blt.n	80035fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	f003 021f 	and.w	r2, r3, #31
 80035ec:	4907      	ldr	r1, [pc, #28]	@ (800360c <__NVIC_EnableIRQ+0x38>)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	2001      	movs	r0, #1
 80035f6:	fa00 f202 	lsl.w	r2, r0, r2
 80035fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	e000e100 	.word	0xe000e100

08003610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	6039      	str	r1, [r7, #0]
 800361a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800361c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003620:	2b00      	cmp	r3, #0
 8003622:	db0a      	blt.n	800363a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	b2da      	uxtb	r2, r3
 8003628:	490c      	ldr	r1, [pc, #48]	@ (800365c <__NVIC_SetPriority+0x4c>)
 800362a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362e:	0112      	lsls	r2, r2, #4
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	440b      	add	r3, r1
 8003634:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003638:	e00a      	b.n	8003650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	4908      	ldr	r1, [pc, #32]	@ (8003660 <__NVIC_SetPriority+0x50>)
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	3b04      	subs	r3, #4
 8003648:	0112      	lsls	r2, r2, #4
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	440b      	add	r3, r1
 800364e:	761a      	strb	r2, [r3, #24]
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	e000e100 	.word	0xe000e100
 8003660:	e000ed00 	.word	0xe000ed00

08003664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003664:	b480      	push	{r7}
 8003666:	b089      	sub	sp, #36	@ 0x24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f1c3 0307 	rsb	r3, r3, #7
 800367e:	2b04      	cmp	r3, #4
 8003680:	bf28      	it	cs
 8003682:	2304      	movcs	r3, #4
 8003684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	3304      	adds	r3, #4
 800368a:	2b06      	cmp	r3, #6
 800368c:	d902      	bls.n	8003694 <NVIC_EncodePriority+0x30>
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	3b03      	subs	r3, #3
 8003692:	e000      	b.n	8003696 <NVIC_EncodePriority+0x32>
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003698:	f04f 32ff 	mov.w	r2, #4294967295
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43da      	mvns	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	401a      	ands	r2, r3
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036ac:	f04f 31ff 	mov.w	r1, #4294967295
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	fa01 f303 	lsl.w	r3, r1, r3
 80036b6:	43d9      	mvns	r1, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036bc:	4313      	orrs	r3, r2
         );
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3724      	adds	r7, #36	@ 0x24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
	...

080036cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036dc:	d301      	bcc.n	80036e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036de:	2301      	movs	r3, #1
 80036e0:	e00f      	b.n	8003702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e2:	4a0a      	ldr	r2, [pc, #40]	@ (800370c <SysTick_Config+0x40>)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ea:	210f      	movs	r1, #15
 80036ec:	f04f 30ff 	mov.w	r0, #4294967295
 80036f0:	f7ff ff8e 	bl	8003610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f4:	4b05      	ldr	r3, [pc, #20]	@ (800370c <SysTick_Config+0x40>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036fa:	4b04      	ldr	r3, [pc, #16]	@ (800370c <SysTick_Config+0x40>)
 80036fc:	2207      	movs	r2, #7
 80036fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	e000e010 	.word	0xe000e010

08003710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff ff29 	bl	8003570 <__NVIC_SetPriorityGrouping>
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003726:	b580      	push	{r7, lr}
 8003728:	b086      	sub	sp, #24
 800372a:	af00      	add	r7, sp, #0
 800372c:	4603      	mov	r3, r0
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003738:	f7ff ff3e 	bl	80035b8 <__NVIC_GetPriorityGrouping>
 800373c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	6978      	ldr	r0, [r7, #20]
 8003744:	f7ff ff8e 	bl	8003664 <NVIC_EncodePriority>
 8003748:	4602      	mov	r2, r0
 800374a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff ff5d 	bl	8003610 <__NVIC_SetPriority>
}
 8003756:	bf00      	nop
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	4603      	mov	r3, r0
 8003766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ff31 	bl	80035d4 <__NVIC_EnableIRQ>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ffa2 	bl	80036cc <SysTick_Config>
 8003788:	4603      	mov	r3, r0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037a0:	f7ff faae 	bl	8002d00 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e099      	b.n	80038e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037d0:	e00f      	b.n	80037f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037d2:	f7ff fa95 	bl	8002d00 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b05      	cmp	r3, #5
 80037de:	d908      	bls.n	80037f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2203      	movs	r2, #3
 80037ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e078      	b.n	80038e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e8      	bne.n	80037d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4b38      	ldr	r3, [pc, #224]	@ (80038ec <HAL_DMA_Init+0x158>)
 800380c:	4013      	ands	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800381e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003836:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	2b04      	cmp	r3, #4
 800384a:	d107      	bne.n	800385c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003854:	4313      	orrs	r3, r2
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f023 0307 	bic.w	r3, r3, #7
 8003872:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003882:	2b04      	cmp	r3, #4
 8003884:	d117      	bne.n	80038b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00e      	beq.n	80038b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fa6f 	bl	8003d7c <DMA_CheckFifoParam>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2240      	movs	r2, #64	@ 0x40
 80038a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80038b2:	2301      	movs	r3, #1
 80038b4:	e016      	b.n	80038e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fa26 	bl	8003d10 <DMA_CalcBaseAndBitshift>
 80038c4:	4603      	mov	r3, r0
 80038c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038cc:	223f      	movs	r2, #63	@ 0x3f
 80038ce:	409a      	lsls	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	f010803f 	.word	0xf010803f

080038f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003906:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_DMA_Start_IT+0x26>
 8003912:	2302      	movs	r3, #2
 8003914:	e040      	b.n	8003998 <HAL_DMA_Start_IT+0xa8>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b01      	cmp	r3, #1
 8003928:	d12f      	bne.n	800398a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2202      	movs	r2, #2
 800392e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f9b8 	bl	8003cb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003948:	223f      	movs	r2, #63	@ 0x3f
 800394a:	409a      	lsls	r2, r3
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0216 	orr.w	r2, r2, #22
 800395e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	2b00      	cmp	r3, #0
 8003966:	d007      	beq.n	8003978 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0208 	orr.w	r2, r2, #8
 8003976:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	e005      	b.n	8003996 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003992:	2302      	movs	r3, #2
 8003994:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003996:	7dfb      	ldrb	r3, [r7, #23]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039ac:	4b8e      	ldr	r3, [pc, #568]	@ (8003be8 <HAL_DMA_IRQHandler+0x248>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a8e      	ldr	r2, [pc, #568]	@ (8003bec <HAL_DMA_IRQHandler+0x24c>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	0a9b      	lsrs	r3, r3, #10
 80039b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ca:	2208      	movs	r2, #8
 80039cc:	409a      	lsls	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01a      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d013      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0204 	bic.w	r2, r2, #4
 80039f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f8:	2208      	movs	r2, #8
 80039fa:	409a      	lsls	r2, r3
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a04:	f043 0201 	orr.w	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a10:	2201      	movs	r2, #1
 8003a12:	409a      	lsls	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d012      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2e:	2201      	movs	r2, #1
 8003a30:	409a      	lsls	r2, r3
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a3a:	f043 0202 	orr.w	r2, r3, #2
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a46:	2204      	movs	r2, #4
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d012      	beq.n	8003a78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00b      	beq.n	8003a78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a64:	2204      	movs	r2, #4
 8003a66:	409a      	lsls	r2, r3
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a70:	f043 0204 	orr.w	r2, r3, #4
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7c:	2210      	movs	r2, #16
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d043      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d03c      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9a:	2210      	movs	r2, #16
 8003a9c:	409a      	lsls	r2, r3
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d018      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d108      	bne.n	8003ad0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d024      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	4798      	blx	r3
 8003ace:	e01f      	b.n	8003b10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01b      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	4798      	blx	r3
 8003ae0:	e016      	b.n	8003b10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d107      	bne.n	8003b00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0208 	bic.w	r2, r2, #8
 8003afe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b14:	2220      	movs	r2, #32
 8003b16:	409a      	lsls	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 808f 	beq.w	8003c40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0310 	and.w	r3, r3, #16
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 8087 	beq.w	8003c40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b36:	2220      	movs	r2, #32
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b05      	cmp	r3, #5
 8003b48:	d136      	bne.n	8003bb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0216 	bic.w	r2, r2, #22
 8003b58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695a      	ldr	r2, [r3, #20]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d103      	bne.n	8003b7a <HAL_DMA_IRQHandler+0x1da>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d007      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0208 	bic.w	r2, r2, #8
 8003b88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8e:	223f      	movs	r2, #63	@ 0x3f
 8003b90:	409a      	lsls	r2, r3
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d07e      	beq.n	8003cac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
        }
        return;
 8003bb6:	e079      	b.n	8003cac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01d      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10d      	bne.n	8003bf0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d031      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	4798      	blx	r3
 8003be4:	e02c      	b.n	8003c40 <HAL_DMA_IRQHandler+0x2a0>
 8003be6:	bf00      	nop
 8003be8:	20000004 	.word	0x20000004
 8003bec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d023      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	4798      	blx	r3
 8003c00:	e01e      	b.n	8003c40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10f      	bne.n	8003c30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0210 	bic.w	r2, r2, #16
 8003c1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d032      	beq.n	8003cae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d022      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2205      	movs	r2, #5
 8003c58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0201 	bic.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d307      	bcc.n	8003c88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f2      	bne.n	8003c6c <HAL_DMA_IRQHandler+0x2cc>
 8003c86:	e000      	b.n	8003c8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	4798      	blx	r3
 8003caa:	e000      	b.n	8003cae <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cac:	bf00      	nop
    }
  }
}
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003cd0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b40      	cmp	r3, #64	@ 0x40
 8003ce0:	d108      	bne.n	8003cf4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cf2:	e007      	b.n	8003d04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	60da      	str	r2, [r3, #12]
}
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	3b10      	subs	r3, #16
 8003d20:	4a14      	ldr	r2, [pc, #80]	@ (8003d74 <DMA_CalcBaseAndBitshift+0x64>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	091b      	lsrs	r3, r3, #4
 8003d28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d2a:	4a13      	ldr	r2, [pc, #76]	@ (8003d78 <DMA_CalcBaseAndBitshift+0x68>)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4413      	add	r3, r2
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d909      	bls.n	8003d52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d46:	f023 0303 	bic.w	r3, r3, #3
 8003d4a:	1d1a      	adds	r2, r3, #4
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d50:	e007      	b.n	8003d62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d5a:	f023 0303 	bic.w	r3, r3, #3
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	aaaaaaab 	.word	0xaaaaaaab
 8003d78:	080109fc 	.word	0x080109fc

08003d7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d11f      	bne.n	8003dd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	d856      	bhi.n	8003e4a <DMA_CheckFifoParam+0xce>
 8003d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003da4 <DMA_CheckFifoParam+0x28>)
 8003d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da2:	bf00      	nop
 8003da4:	08003db5 	.word	0x08003db5
 8003da8:	08003dc7 	.word	0x08003dc7
 8003dac:	08003db5 	.word	0x08003db5
 8003db0:	08003e4b 	.word	0x08003e4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d046      	beq.n	8003e4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc4:	e043      	b.n	8003e4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003dce:	d140      	bne.n	8003e52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dd4:	e03d      	b.n	8003e52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dde:	d121      	bne.n	8003e24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d837      	bhi.n	8003e56 <DMA_CheckFifoParam+0xda>
 8003de6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dec <DMA_CheckFifoParam+0x70>)
 8003de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dec:	08003dfd 	.word	0x08003dfd
 8003df0:	08003e03 	.word	0x08003e03
 8003df4:	08003dfd 	.word	0x08003dfd
 8003df8:	08003e15 	.word	0x08003e15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8003e00:	e030      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d025      	beq.n	8003e5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e12:	e022      	b.n	8003e5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e1c:	d11f      	bne.n	8003e5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e22:	e01c      	b.n	8003e5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d903      	bls.n	8003e32 <DMA_CheckFifoParam+0xb6>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d003      	beq.n	8003e38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e30:	e018      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	73fb      	strb	r3, [r7, #15]
      break;
 8003e36:	e015      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00e      	beq.n	8003e62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	73fb      	strb	r3, [r7, #15]
      break;
 8003e48:	e00b      	b.n	8003e62 <DMA_CheckFifoParam+0xe6>
      break;
 8003e4a:	bf00      	nop
 8003e4c:	e00a      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
      break;
 8003e4e:	bf00      	nop
 8003e50:	e008      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
      break;
 8003e52:	bf00      	nop
 8003e54:	e006      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
      break;
 8003e56:	bf00      	nop
 8003e58:	e004      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
      break;
 8003e5a:	bf00      	nop
 8003e5c:	e002      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e5e:	bf00      	nop
 8003e60:	e000      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
      break;
 8003e62:	bf00      	nop
    }
  } 
  
  return status; 
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop

08003e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b089      	sub	sp, #36	@ 0x24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
 8003e8e:	e16b      	b.n	8004168 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e90:	2201      	movs	r2, #1
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	f040 815a 	bne.w	8004162 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d005      	beq.n	8003ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d130      	bne.n	8003f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003efc:	2201      	movs	r2, #1
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 0201 	and.w	r2, r3, #1
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d017      	beq.n	8003f64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	2203      	movs	r2, #3
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d123      	bne.n	8003fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	08da      	lsrs	r2, r3, #3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3208      	adds	r2, #8
 8003f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	220f      	movs	r2, #15
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	08da      	lsrs	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3208      	adds	r2, #8
 8003fb2:	69b9      	ldr	r1, [r7, #24]
 8003fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 0203 	and.w	r2, r3, #3
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80b4 	beq.w	8004162 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	4b60      	ldr	r3, [pc, #384]	@ (8004180 <HAL_GPIO_Init+0x30c>)
 8004000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004002:	4a5f      	ldr	r2, [pc, #380]	@ (8004180 <HAL_GPIO_Init+0x30c>)
 8004004:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004008:	6453      	str	r3, [r2, #68]	@ 0x44
 800400a:	4b5d      	ldr	r3, [pc, #372]	@ (8004180 <HAL_GPIO_Init+0x30c>)
 800400c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004016:	4a5b      	ldr	r2, [pc, #364]	@ (8004184 <HAL_GPIO_Init+0x310>)
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	089b      	lsrs	r3, r3, #2
 800401c:	3302      	adds	r3, #2
 800401e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	220f      	movs	r2, #15
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43db      	mvns	r3, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a52      	ldr	r2, [pc, #328]	@ (8004188 <HAL_GPIO_Init+0x314>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d02b      	beq.n	800409a <HAL_GPIO_Init+0x226>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a51      	ldr	r2, [pc, #324]	@ (800418c <HAL_GPIO_Init+0x318>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d025      	beq.n	8004096 <HAL_GPIO_Init+0x222>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a50      	ldr	r2, [pc, #320]	@ (8004190 <HAL_GPIO_Init+0x31c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d01f      	beq.n	8004092 <HAL_GPIO_Init+0x21e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a4f      	ldr	r2, [pc, #316]	@ (8004194 <HAL_GPIO_Init+0x320>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d019      	beq.n	800408e <HAL_GPIO_Init+0x21a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a4e      	ldr	r2, [pc, #312]	@ (8004198 <HAL_GPIO_Init+0x324>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d013      	beq.n	800408a <HAL_GPIO_Init+0x216>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a4d      	ldr	r2, [pc, #308]	@ (800419c <HAL_GPIO_Init+0x328>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00d      	beq.n	8004086 <HAL_GPIO_Init+0x212>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a4c      	ldr	r2, [pc, #304]	@ (80041a0 <HAL_GPIO_Init+0x32c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d007      	beq.n	8004082 <HAL_GPIO_Init+0x20e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a4b      	ldr	r2, [pc, #300]	@ (80041a4 <HAL_GPIO_Init+0x330>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d101      	bne.n	800407e <HAL_GPIO_Init+0x20a>
 800407a:	2307      	movs	r3, #7
 800407c:	e00e      	b.n	800409c <HAL_GPIO_Init+0x228>
 800407e:	2308      	movs	r3, #8
 8004080:	e00c      	b.n	800409c <HAL_GPIO_Init+0x228>
 8004082:	2306      	movs	r3, #6
 8004084:	e00a      	b.n	800409c <HAL_GPIO_Init+0x228>
 8004086:	2305      	movs	r3, #5
 8004088:	e008      	b.n	800409c <HAL_GPIO_Init+0x228>
 800408a:	2304      	movs	r3, #4
 800408c:	e006      	b.n	800409c <HAL_GPIO_Init+0x228>
 800408e:	2303      	movs	r3, #3
 8004090:	e004      	b.n	800409c <HAL_GPIO_Init+0x228>
 8004092:	2302      	movs	r3, #2
 8004094:	e002      	b.n	800409c <HAL_GPIO_Init+0x228>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <HAL_GPIO_Init+0x228>
 800409a:	2300      	movs	r3, #0
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	f002 0203 	and.w	r2, r2, #3
 80040a2:	0092      	lsls	r2, r2, #2
 80040a4:	4093      	lsls	r3, r2
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040ac:	4935      	ldr	r1, [pc, #212]	@ (8004184 <HAL_GPIO_Init+0x310>)
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	089b      	lsrs	r3, r3, #2
 80040b2:	3302      	adds	r3, #2
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040ba:	4b3b      	ldr	r3, [pc, #236]	@ (80041a8 <HAL_GPIO_Init+0x334>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	43db      	mvns	r3, r3
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4013      	ands	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040de:	4a32      	ldr	r2, [pc, #200]	@ (80041a8 <HAL_GPIO_Init+0x334>)
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040e4:	4b30      	ldr	r3, [pc, #192]	@ (80041a8 <HAL_GPIO_Init+0x334>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004108:	4a27      	ldr	r2, [pc, #156]	@ (80041a8 <HAL_GPIO_Init+0x334>)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800410e:	4b26      	ldr	r3, [pc, #152]	@ (80041a8 <HAL_GPIO_Init+0x334>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	43db      	mvns	r3, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4013      	ands	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4313      	orrs	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004132:	4a1d      	ldr	r2, [pc, #116]	@ (80041a8 <HAL_GPIO_Init+0x334>)
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004138:	4b1b      	ldr	r3, [pc, #108]	@ (80041a8 <HAL_GPIO_Init+0x334>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	43db      	mvns	r3, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4013      	ands	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800415c:	4a12      	ldr	r2, [pc, #72]	@ (80041a8 <HAL_GPIO_Init+0x334>)
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	3301      	adds	r3, #1
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	2b0f      	cmp	r3, #15
 800416c:	f67f ae90 	bls.w	8003e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004170:	bf00      	nop
 8004172:	bf00      	nop
 8004174:	3724      	adds	r7, #36	@ 0x24
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800
 8004184:	40013800 	.word	0x40013800
 8004188:	40020000 	.word	0x40020000
 800418c:	40020400 	.word	0x40020400
 8004190:	40020800 	.word	0x40020800
 8004194:	40020c00 	.word	0x40020c00
 8004198:	40021000 	.word	0x40021000
 800419c:	40021400 	.word	0x40021400
 80041a0:	40021800 	.word	0x40021800
 80041a4:	40021c00 	.word	0x40021c00
 80041a8:	40013c00 	.word	0x40013c00

080041ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	807b      	strh	r3, [r7, #2]
 80041b8:	4613      	mov	r3, r2
 80041ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041bc:	787b      	ldrb	r3, [r7, #1]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041c2:	887a      	ldrh	r2, [r7, #2]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041c8:	e003      	b.n	80041d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041ca:	887b      	ldrh	r3, [r7, #2]
 80041cc:	041a      	lsls	r2, r3, #16
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	619a      	str	r2, [r3, #24]
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041de:	b480      	push	{r7}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	460b      	mov	r3, r1
 80041e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041f0:	887a      	ldrh	r2, [r7, #2]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4013      	ands	r3, r2
 80041f6:	041a      	lsls	r2, r3, #16
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	43d9      	mvns	r1, r3
 80041fc:	887b      	ldrh	r3, [r7, #2]
 80041fe:	400b      	ands	r3, r1
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	619a      	str	r2, [r3, #24]
}
 8004206:	bf00      	nop
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800421e:	4b08      	ldr	r3, [pc, #32]	@ (8004240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004220:	695a      	ldr	r2, [r3, #20]
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	4013      	ands	r3, r2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d006      	beq.n	8004238 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800422a:	4a05      	ldr	r2, [pc, #20]	@ (8004240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800422c:	88fb      	ldrh	r3, [r7, #6]
 800422e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	4618      	mov	r0, r3
 8004234:	f7fd fb94 	bl	8001960 <HAL_GPIO_EXTI_Callback>
  }
}
 8004238:	bf00      	nop
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40013c00 	.word	0x40013c00

08004244 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e12b      	b.n	80044ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fe f9da 	bl	8002624 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2224      	movs	r2, #36	@ 0x24
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0201 	bic.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004296:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042a8:	f003 fcd2 	bl	8007c50 <HAL_RCC_GetPCLK1Freq>
 80042ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	4a81      	ldr	r2, [pc, #516]	@ (80044b8 <HAL_I2C_Init+0x274>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d807      	bhi.n	80042c8 <HAL_I2C_Init+0x84>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4a80      	ldr	r2, [pc, #512]	@ (80044bc <HAL_I2C_Init+0x278>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	bf94      	ite	ls
 80042c0:	2301      	movls	r3, #1
 80042c2:	2300      	movhi	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	e006      	b.n	80042d6 <HAL_I2C_Init+0x92>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4a7d      	ldr	r2, [pc, #500]	@ (80044c0 <HAL_I2C_Init+0x27c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	bf94      	ite	ls
 80042d0:	2301      	movls	r3, #1
 80042d2:	2300      	movhi	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e0e7      	b.n	80044ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4a78      	ldr	r2, [pc, #480]	@ (80044c4 <HAL_I2C_Init+0x280>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	0c9b      	lsrs	r3, r3, #18
 80042e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	4a6a      	ldr	r2, [pc, #424]	@ (80044b8 <HAL_I2C_Init+0x274>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d802      	bhi.n	8004318 <HAL_I2C_Init+0xd4>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	3301      	adds	r3, #1
 8004316:	e009      	b.n	800432c <HAL_I2C_Init+0xe8>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800431e:	fb02 f303 	mul.w	r3, r2, r3
 8004322:	4a69      	ldr	r2, [pc, #420]	@ (80044c8 <HAL_I2C_Init+0x284>)
 8004324:	fba2 2303 	umull	r2, r3, r2, r3
 8004328:	099b      	lsrs	r3, r3, #6
 800432a:	3301      	adds	r3, #1
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	430b      	orrs	r3, r1
 8004332:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800433e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	495c      	ldr	r1, [pc, #368]	@ (80044b8 <HAL_I2C_Init+0x274>)
 8004348:	428b      	cmp	r3, r1
 800434a:	d819      	bhi.n	8004380 <HAL_I2C_Init+0x13c>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	1e59      	subs	r1, r3, #1
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	fbb1 f3f3 	udiv	r3, r1, r3
 800435a:	1c59      	adds	r1, r3, #1
 800435c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004360:	400b      	ands	r3, r1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_I2C_Init+0x138>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1e59      	subs	r1, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	fbb1 f3f3 	udiv	r3, r1, r3
 8004374:	3301      	adds	r3, #1
 8004376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800437a:	e051      	b.n	8004420 <HAL_I2C_Init+0x1dc>
 800437c:	2304      	movs	r3, #4
 800437e:	e04f      	b.n	8004420 <HAL_I2C_Init+0x1dc>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d111      	bne.n	80043ac <HAL_I2C_Init+0x168>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	1e58      	subs	r0, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6859      	ldr	r1, [r3, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	440b      	add	r3, r1
 8004396:	fbb0 f3f3 	udiv	r3, r0, r3
 800439a:	3301      	adds	r3, #1
 800439c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	bf0c      	ite	eq
 80043a4:	2301      	moveq	r3, #1
 80043a6:	2300      	movne	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	e012      	b.n	80043d2 <HAL_I2C_Init+0x18e>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	1e58      	subs	r0, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6859      	ldr	r1, [r3, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	0099      	lsls	r1, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c2:	3301      	adds	r3, #1
 80043c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bf0c      	ite	eq
 80043cc:	2301      	moveq	r3, #1
 80043ce:	2300      	movne	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_I2C_Init+0x196>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e022      	b.n	8004420 <HAL_I2C_Init+0x1dc>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10e      	bne.n	8004400 <HAL_I2C_Init+0x1bc>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	1e58      	subs	r0, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6859      	ldr	r1, [r3, #4]
 80043ea:	460b      	mov	r3, r1
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	440b      	add	r3, r1
 80043f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80043f4:	3301      	adds	r3, #1
 80043f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043fe:	e00f      	b.n	8004420 <HAL_I2C_Init+0x1dc>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	1e58      	subs	r0, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6859      	ldr	r1, [r3, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	0099      	lsls	r1, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	fbb0 f3f3 	udiv	r3, r0, r3
 8004416:	3301      	adds	r3, #1
 8004418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800441c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	6809      	ldr	r1, [r1, #0]
 8004424:	4313      	orrs	r3, r2
 8004426:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69da      	ldr	r2, [r3, #28]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800444e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6911      	ldr	r1, [r2, #16]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	68d2      	ldr	r2, [r2, #12]
 800445a:	4311      	orrs	r1, r2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6812      	ldr	r2, [r2, #0]
 8004460:	430b      	orrs	r3, r1
 8004462:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	000186a0 	.word	0x000186a0
 80044bc:	001e847f 	.word	0x001e847f
 80044c0:	003d08ff 	.word	0x003d08ff
 80044c4:	431bde83 	.word	0x431bde83
 80044c8:	10624dd3 	.word	0x10624dd3

080044cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	607a      	str	r2, [r7, #4]
 80044d6:	461a      	mov	r2, r3
 80044d8:	460b      	mov	r3, r1
 80044da:	817b      	strh	r3, [r7, #10]
 80044dc:	4613      	mov	r3, r2
 80044de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044e0:	f7fe fc0e 	bl	8002d00 <HAL_GetTick>
 80044e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	f040 80e0 	bne.w	80046b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	2319      	movs	r3, #25
 80044fa:	2201      	movs	r2, #1
 80044fc:	4970      	ldr	r1, [pc, #448]	@ (80046c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 fe0e 	bl	8005120 <I2C_WaitOnFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800450a:	2302      	movs	r3, #2
 800450c:	e0d3      	b.n	80046b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_I2C_Master_Transmit+0x50>
 8004518:	2302      	movs	r3, #2
 800451a:	e0cc      	b.n	80046b6 <HAL_I2C_Master_Transmit+0x1ea>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b01      	cmp	r3, #1
 8004530:	d007      	beq.n	8004542 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0201 	orr.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004550:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2221      	movs	r2, #33	@ 0x21
 8004556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2210      	movs	r2, #16
 800455e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	893a      	ldrh	r2, [r7, #8]
 8004572:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4a50      	ldr	r2, [pc, #320]	@ (80046c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004582:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004584:	8979      	ldrh	r1, [r7, #10]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	6a3a      	ldr	r2, [r7, #32]
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 fbc8 	bl	8004d20 <I2C_MasterRequestWrite>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e08d      	b.n	80046b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800459a:	2300      	movs	r3, #0
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	613b      	str	r3, [r7, #16]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80045b0:	e066      	b.n	8004680 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	6a39      	ldr	r1, [r7, #32]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 fecc 	bl	8005354 <I2C_WaitOnTXEFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00d      	beq.n	80045de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d107      	bne.n	80045da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e06b      	b.n	80046b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e2:	781a      	ldrb	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b04      	cmp	r3, #4
 800461a:	d11b      	bne.n	8004654 <HAL_I2C_Master_Transmit+0x188>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004620:	2b00      	cmp	r3, #0
 8004622:	d017      	beq.n	8004654 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004628:	781a      	ldrb	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	6a39      	ldr	r1, [r7, #32]
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 fec3 	bl	80053e4 <I2C_WaitOnBTFFlagUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00d      	beq.n	8004680 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004668:	2b04      	cmp	r3, #4
 800466a:	d107      	bne.n	800467c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800467a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e01a      	b.n	80046b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004684:	2b00      	cmp	r3, #0
 8004686:	d194      	bne.n	80045b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004696:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	e000      	b.n	80046b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80046b4:	2302      	movs	r3, #2
  }
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	00100002 	.word	0x00100002
 80046c4:	ffff0000 	.word	0xffff0000

080046c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	4608      	mov	r0, r1
 80046d2:	4611      	mov	r1, r2
 80046d4:	461a      	mov	r2, r3
 80046d6:	4603      	mov	r3, r0
 80046d8:	817b      	strh	r3, [r7, #10]
 80046da:	460b      	mov	r3, r1
 80046dc:	813b      	strh	r3, [r7, #8]
 80046de:	4613      	mov	r3, r2
 80046e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046e2:	f7fe fb0d 	bl	8002d00 <HAL_GetTick>
 80046e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	f040 80d9 	bne.w	80048a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	2319      	movs	r3, #25
 80046fc:	2201      	movs	r2, #1
 80046fe:	496d      	ldr	r1, [pc, #436]	@ (80048b4 <HAL_I2C_Mem_Write+0x1ec>)
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 fd0d 	bl	8005120 <I2C_WaitOnFlagUntilTimeout>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800470c:	2302      	movs	r3, #2
 800470e:	e0cc      	b.n	80048aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_I2C_Mem_Write+0x56>
 800471a:	2302      	movs	r3, #2
 800471c:	e0c5      	b.n	80048aa <HAL_I2C_Mem_Write+0x1e2>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b01      	cmp	r3, #1
 8004732:	d007      	beq.n	8004744 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004752:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2221      	movs	r2, #33	@ 0x21
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2240      	movs	r2, #64	@ 0x40
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a3a      	ldr	r2, [r7, #32]
 800476e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004774:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4a4d      	ldr	r2, [pc, #308]	@ (80048b8 <HAL_I2C_Mem_Write+0x1f0>)
 8004784:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004786:	88f8      	ldrh	r0, [r7, #6]
 8004788:	893a      	ldrh	r2, [r7, #8]
 800478a:	8979      	ldrh	r1, [r7, #10]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	4603      	mov	r3, r0
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 fb44 	bl	8004e24 <I2C_RequestMemoryWrite>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d052      	beq.n	8004848 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e081      	b.n	80048aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 fdd2 	bl	8005354 <I2C_WaitOnTXEFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00d      	beq.n	80047d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d107      	bne.n	80047ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e06b      	b.n	80048aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d6:	781a      	ldrb	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b04      	cmp	r3, #4
 800480e:	d11b      	bne.n	8004848 <HAL_I2C_Mem_Write+0x180>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004814:	2b00      	cmp	r3, #0
 8004816:	d017      	beq.n	8004848 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481c:	781a      	ldrb	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004832:	3b01      	subs	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1aa      	bne.n	80047a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 fdc5 	bl	80053e4 <I2C_WaitOnBTFFlagUntilTimeout>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00d      	beq.n	800487c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004864:	2b04      	cmp	r3, #4
 8004866:	d107      	bne.n	8004878 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004876:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e016      	b.n	80048aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800488a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	e000      	b.n	80048aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80048a8:	2302      	movs	r3, #2
  }
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	00100002 	.word	0x00100002
 80048b8:	ffff0000 	.word	0xffff0000

080048bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08c      	sub	sp, #48	@ 0x30
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	4608      	mov	r0, r1
 80048c6:	4611      	mov	r1, r2
 80048c8:	461a      	mov	r2, r3
 80048ca:	4603      	mov	r3, r0
 80048cc:	817b      	strh	r3, [r7, #10]
 80048ce:	460b      	mov	r3, r1
 80048d0:	813b      	strh	r3, [r7, #8]
 80048d2:	4613      	mov	r3, r2
 80048d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048d6:	f7fe fa13 	bl	8002d00 <HAL_GetTick>
 80048da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	f040 8214 	bne.w	8004d12 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	2319      	movs	r3, #25
 80048f0:	2201      	movs	r2, #1
 80048f2:	497b      	ldr	r1, [pc, #492]	@ (8004ae0 <HAL_I2C_Mem_Read+0x224>)
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 fc13 	bl	8005120 <I2C_WaitOnFlagUntilTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004900:	2302      	movs	r3, #2
 8004902:	e207      	b.n	8004d14 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <HAL_I2C_Mem_Read+0x56>
 800490e:	2302      	movs	r3, #2
 8004910:	e200      	b.n	8004d14 <HAL_I2C_Mem_Read+0x458>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b01      	cmp	r3, #1
 8004926:	d007      	beq.n	8004938 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004946:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2222      	movs	r2, #34	@ 0x22
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2240      	movs	r2, #64	@ 0x40
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004962:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004968:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4a5b      	ldr	r2, [pc, #364]	@ (8004ae4 <HAL_I2C_Mem_Read+0x228>)
 8004978:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800497a:	88f8      	ldrh	r0, [r7, #6]
 800497c:	893a      	ldrh	r2, [r7, #8]
 800497e:	8979      	ldrh	r1, [r7, #10]
 8004980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004982:	9301      	str	r3, [sp, #4]
 8004984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	4603      	mov	r3, r0
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 fae0 	bl	8004f50 <I2C_RequestMemoryRead>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e1bc      	b.n	8004d14 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d113      	bne.n	80049ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049a2:	2300      	movs	r3, #0
 80049a4:	623b      	str	r3, [r7, #32]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	623b      	str	r3, [r7, #32]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	623b      	str	r3, [r7, #32]
 80049b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	e190      	b.n	8004cec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d11b      	bne.n	8004a0a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e2:	2300      	movs	r3, #0
 80049e4:	61fb      	str	r3, [r7, #28]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	61fb      	str	r3, [r7, #28]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	61fb      	str	r3, [r7, #28]
 80049f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	e170      	b.n	8004cec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d11b      	bne.n	8004a4a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a32:	2300      	movs	r3, #0
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	61bb      	str	r3, [r7, #24]
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	e150      	b.n	8004cec <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004a60:	e144      	b.n	8004cec <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	f200 80f1 	bhi.w	8004c4e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d123      	bne.n	8004abc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a76:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fcfb 	bl	8005474 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e145      	b.n	8004d14 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691a      	ldr	r2, [r3, #16]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004aba:	e117      	b.n	8004cec <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d14e      	bne.n	8004b62 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aca:	2200      	movs	r2, #0
 8004acc:	4906      	ldr	r1, [pc, #24]	@ (8004ae8 <HAL_I2C_Mem_Read+0x22c>)
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 fb26 	bl	8005120 <I2C_WaitOnFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d008      	beq.n	8004aec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e11a      	b.n	8004d14 <HAL_I2C_Mem_Read+0x458>
 8004ade:	bf00      	nop
 8004ae0:	00100002 	.word	0x00100002
 8004ae4:	ffff0000 	.word	0xffff0000
 8004ae8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004afa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691a      	ldr	r2, [r3, #16]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0e:	1c5a      	adds	r2, r3, #1
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b60:	e0c4      	b.n	8004cec <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b68:	2200      	movs	r2, #0
 8004b6a:	496c      	ldr	r1, [pc, #432]	@ (8004d1c <HAL_I2C_Mem_Read+0x460>)
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 fad7 	bl	8005120 <I2C_WaitOnFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0cb      	b.n	8004d14 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	4955      	ldr	r1, [pc, #340]	@ (8004d1c <HAL_I2C_Mem_Read+0x460>)
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 faa9 	bl	8005120 <I2C_WaitOnFlagUntilTimeout>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e09d      	b.n	8004d14 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	691a      	ldr	r2, [r3, #16]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c4c:	e04e      	b.n	8004cec <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c50:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 fc0e 	bl	8005474 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e058      	b.n	8004d14 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	691a      	ldr	r2, [r3, #16]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	f003 0304 	and.w	r3, r3, #4
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d124      	bne.n	8004cec <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d107      	bne.n	8004cba <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cb8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	691a      	ldr	r2, [r3, #16]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f47f aeb6 	bne.w	8004a62 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e000      	b.n	8004d14 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004d12:	2302      	movs	r3, #2
  }
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3728      	adds	r7, #40	@ 0x28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	00010004 	.word	0x00010004

08004d20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	607a      	str	r2, [r7, #4]
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d006      	beq.n	8004d4a <I2C_MasterRequestWrite+0x2a>
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d003      	beq.n	8004d4a <I2C_MasterRequestWrite+0x2a>
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d48:	d108      	bne.n	8004d5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	e00b      	b.n	8004d74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d60:	2b12      	cmp	r3, #18
 8004d62:	d107      	bne.n	8004d74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 f9cd 	bl	8005120 <I2C_WaitOnFlagUntilTimeout>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00d      	beq.n	8004da8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d9a:	d103      	bne.n	8004da4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004da2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e035      	b.n	8004e14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004db0:	d108      	bne.n	8004dc4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004db2:	897b      	ldrh	r3, [r7, #10]
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	461a      	mov	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004dc0:	611a      	str	r2, [r3, #16]
 8004dc2:	e01b      	b.n	8004dfc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004dc4:	897b      	ldrh	r3, [r7, #10]
 8004dc6:	11db      	asrs	r3, r3, #7
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	f003 0306 	and.w	r3, r3, #6
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	f063 030f 	orn	r3, r3, #15
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	490e      	ldr	r1, [pc, #56]	@ (8004e1c <I2C_MasterRequestWrite+0xfc>)
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 fa16 	bl	8005214 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e010      	b.n	8004e14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004df2:	897b      	ldrh	r3, [r7, #10]
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	4907      	ldr	r1, [pc, #28]	@ (8004e20 <I2C_MasterRequestWrite+0x100>)
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 fa06 	bl	8005214 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	00010008 	.word	0x00010008
 8004e20:	00010002 	.word	0x00010002

08004e24 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b088      	sub	sp, #32
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	4608      	mov	r0, r1
 8004e2e:	4611      	mov	r1, r2
 8004e30:	461a      	mov	r2, r3
 8004e32:	4603      	mov	r3, r0
 8004e34:	817b      	strh	r3, [r7, #10]
 8004e36:	460b      	mov	r3, r1
 8004e38:	813b      	strh	r3, [r7, #8]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 f960 	bl	8005120 <I2C_WaitOnFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00d      	beq.n	8004e82 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e74:	d103      	bne.n	8004e7e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e05f      	b.n	8004f42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e82:	897b      	ldrh	r3, [r7, #10]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	461a      	mov	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e94:	6a3a      	ldr	r2, [r7, #32]
 8004e96:	492d      	ldr	r1, [pc, #180]	@ (8004f4c <I2C_RequestMemoryWrite+0x128>)
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 f9bb 	bl	8005214 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e04c      	b.n	8004f42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ec0:	6a39      	ldr	r1, [r7, #32]
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 fa46 	bl	8005354 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00d      	beq.n	8004eea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d107      	bne.n	8004ee6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ee4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e02b      	b.n	8004f42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d105      	bne.n	8004efc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ef0:	893b      	ldrh	r3, [r7, #8]
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	611a      	str	r2, [r3, #16]
 8004efa:	e021      	b.n	8004f40 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004efc:	893b      	ldrh	r3, [r7, #8]
 8004efe:	0a1b      	lsrs	r3, r3, #8
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f0c:	6a39      	ldr	r1, [r7, #32]
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 fa20 	bl	8005354 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00d      	beq.n	8004f36 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d107      	bne.n	8004f32 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e005      	b.n	8004f42 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f36:	893b      	ldrh	r3, [r7, #8]
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	00010002 	.word	0x00010002

08004f50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af02      	add	r7, sp, #8
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	4608      	mov	r0, r1
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	4603      	mov	r3, r0
 8004f60:	817b      	strh	r3, [r7, #10]
 8004f62:	460b      	mov	r3, r1
 8004f64:	813b      	strh	r3, [r7, #8]
 8004f66:	4613      	mov	r3, r2
 8004f68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 f8c2 	bl	8005120 <I2C_WaitOnFlagUntilTimeout>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00d      	beq.n	8004fbe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fb0:	d103      	bne.n	8004fba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fb8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e0aa      	b.n	8005114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fbe:	897b      	ldrh	r3, [r7, #10]
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fcc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd0:	6a3a      	ldr	r2, [r7, #32]
 8004fd2:	4952      	ldr	r1, [pc, #328]	@ (800511c <I2C_RequestMemoryRead+0x1cc>)
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 f91d 	bl	8005214 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e097      	b.n	8005114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ffc:	6a39      	ldr	r1, [r7, #32]
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 f9a8 	bl	8005354 <I2C_WaitOnTXEFlagUntilTimeout>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00d      	beq.n	8005026 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500e:	2b04      	cmp	r3, #4
 8005010:	d107      	bne.n	8005022 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005020:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e076      	b.n	8005114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d105      	bne.n	8005038 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800502c:	893b      	ldrh	r3, [r7, #8]
 800502e:	b2da      	uxtb	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	611a      	str	r2, [r3, #16]
 8005036:	e021      	b.n	800507c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005038:	893b      	ldrh	r3, [r7, #8]
 800503a:	0a1b      	lsrs	r3, r3, #8
 800503c:	b29b      	uxth	r3, r3
 800503e:	b2da      	uxtb	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005048:	6a39      	ldr	r1, [r7, #32]
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 f982 	bl	8005354 <I2C_WaitOnTXEFlagUntilTimeout>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00d      	beq.n	8005072 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	2b04      	cmp	r3, #4
 800505c:	d107      	bne.n	800506e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800506c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e050      	b.n	8005114 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005072:	893b      	ldrh	r3, [r7, #8]
 8005074:	b2da      	uxtb	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800507c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800507e:	6a39      	ldr	r1, [r7, #32]
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 f967 	bl	8005354 <I2C_WaitOnTXEFlagUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00d      	beq.n	80050a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005090:	2b04      	cmp	r3, #4
 8005092:	d107      	bne.n	80050a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e035      	b.n	8005114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	2200      	movs	r2, #0
 80050c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 f82b 	bl	8005120 <I2C_WaitOnFlagUntilTimeout>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00d      	beq.n	80050ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050de:	d103      	bne.n	80050e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e013      	b.n	8005114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050ec:	897b      	ldrh	r3, [r7, #10]
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	f043 0301 	orr.w	r3, r3, #1
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fe:	6a3a      	ldr	r2, [r7, #32]
 8005100:	4906      	ldr	r1, [pc, #24]	@ (800511c <I2C_RequestMemoryRead+0x1cc>)
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f886 	bl	8005214 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e000      	b.n	8005114 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	00010002 	.word	0x00010002

08005120 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	603b      	str	r3, [r7, #0]
 800512c:	4613      	mov	r3, r2
 800512e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005130:	e048      	b.n	80051c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005138:	d044      	beq.n	80051c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800513a:	f7fd fde1 	bl	8002d00 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	429a      	cmp	r2, r3
 8005148:	d302      	bcc.n	8005150 <I2C_WaitOnFlagUntilTimeout+0x30>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d139      	bne.n	80051c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	0c1b      	lsrs	r3, r3, #16
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b01      	cmp	r3, #1
 8005158:	d10d      	bne.n	8005176 <I2C_WaitOnFlagUntilTimeout+0x56>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	43da      	mvns	r2, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	4013      	ands	r3, r2
 8005166:	b29b      	uxth	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	bf0c      	ite	eq
 800516c:	2301      	moveq	r3, #1
 800516e:	2300      	movne	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	461a      	mov	r2, r3
 8005174:	e00c      	b.n	8005190 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	43da      	mvns	r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	4013      	ands	r3, r2
 8005182:	b29b      	uxth	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	bf0c      	ite	eq
 8005188:	2301      	moveq	r3, #1
 800518a:	2300      	movne	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	461a      	mov	r2, r3
 8005190:	79fb      	ldrb	r3, [r7, #7]
 8005192:	429a      	cmp	r2, r3
 8005194:	d116      	bne.n	80051c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b0:	f043 0220 	orr.w	r2, r3, #32
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e023      	b.n	800520c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	0c1b      	lsrs	r3, r3, #16
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d10d      	bne.n	80051ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	43da      	mvns	r2, r3
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4013      	ands	r3, r2
 80051da:	b29b      	uxth	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	bf0c      	ite	eq
 80051e0:	2301      	moveq	r3, #1
 80051e2:	2300      	movne	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	461a      	mov	r2, r3
 80051e8:	e00c      	b.n	8005204 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	43da      	mvns	r2, r3
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	4013      	ands	r3, r2
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	bf0c      	ite	eq
 80051fc:	2301      	moveq	r3, #1
 80051fe:	2300      	movne	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	461a      	mov	r2, r3
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	429a      	cmp	r2, r3
 8005208:	d093      	beq.n	8005132 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
 8005220:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005222:	e071      	b.n	8005308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800522e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005232:	d123      	bne.n	800527c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005242:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800524c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005268:	f043 0204 	orr.w	r2, r3, #4
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e067      	b.n	800534c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005282:	d041      	beq.n	8005308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005284:	f7fd fd3c 	bl	8002d00 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	429a      	cmp	r2, r3
 8005292:	d302      	bcc.n	800529a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d136      	bne.n	8005308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	0c1b      	lsrs	r3, r3, #16
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d10c      	bne.n	80052be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	43da      	mvns	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4013      	ands	r3, r2
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	bf14      	ite	ne
 80052b6:	2301      	movne	r3, #1
 80052b8:	2300      	moveq	r3, #0
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	e00b      	b.n	80052d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	43da      	mvns	r2, r3
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	4013      	ands	r3, r2
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	bf14      	ite	ne
 80052d0:	2301      	movne	r3, #1
 80052d2:	2300      	moveq	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d016      	beq.n	8005308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f4:	f043 0220 	orr.w	r2, r3, #32
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e021      	b.n	800534c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	0c1b      	lsrs	r3, r3, #16
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b01      	cmp	r3, #1
 8005310:	d10c      	bne.n	800532c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	43da      	mvns	r2, r3
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4013      	ands	r3, r2
 800531e:	b29b      	uxth	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	bf14      	ite	ne
 8005324:	2301      	movne	r3, #1
 8005326:	2300      	moveq	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	e00b      	b.n	8005344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	43da      	mvns	r2, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4013      	ands	r3, r2
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	bf14      	ite	ne
 800533e:	2301      	movne	r3, #1
 8005340:	2300      	moveq	r3, #0
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	f47f af6d 	bne.w	8005224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005360:	e034      	b.n	80053cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f8e3 	bl	800552e <I2C_IsAcknowledgeFailed>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e034      	b.n	80053dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005378:	d028      	beq.n	80053cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537a:	f7fd fcc1 	bl	8002d00 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	429a      	cmp	r2, r3
 8005388:	d302      	bcc.n	8005390 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d11d      	bne.n	80053cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800539a:	2b80      	cmp	r3, #128	@ 0x80
 800539c:	d016      	beq.n	80053cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b8:	f043 0220 	orr.w	r2, r3, #32
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e007      	b.n	80053dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d6:	2b80      	cmp	r3, #128	@ 0x80
 80053d8:	d1c3      	bne.n	8005362 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053f0:	e034      	b.n	800545c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 f89b 	bl	800552e <I2C_IsAcknowledgeFailed>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e034      	b.n	800546c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005408:	d028      	beq.n	800545c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540a:	f7fd fc79 	bl	8002d00 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	429a      	cmp	r2, r3
 8005418:	d302      	bcc.n	8005420 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d11d      	bne.n	800545c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	f003 0304 	and.w	r3, r3, #4
 800542a:	2b04      	cmp	r3, #4
 800542c:	d016      	beq.n	800545c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2220      	movs	r2, #32
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005448:	f043 0220 	orr.w	r2, r3, #32
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e007      	b.n	800546c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f003 0304 	and.w	r3, r3, #4
 8005466:	2b04      	cmp	r3, #4
 8005468:	d1c3      	bne.n	80053f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005480:	e049      	b.n	8005516 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b10      	cmp	r3, #16
 800548e:	d119      	bne.n	80054c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f06f 0210 	mvn.w	r2, #16
 8005498:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e030      	b.n	8005526 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c4:	f7fd fc1c 	bl	8002d00 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d302      	bcc.n	80054da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d11d      	bne.n	8005516 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e4:	2b40      	cmp	r3, #64	@ 0x40
 80054e6:	d016      	beq.n	8005516 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005502:	f043 0220 	orr.w	r2, r3, #32
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e007      	b.n	8005526 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005520:	2b40      	cmp	r3, #64	@ 0x40
 8005522:	d1ae      	bne.n	8005482 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005540:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005544:	d11b      	bne.n	800557e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800554e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2220      	movs	r2, #32
 800555a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556a:	f043 0204 	orr.w	r2, r3, #4
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e000      	b.n	8005580 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e128      	b.n	80057f0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d109      	bne.n	80055be <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a90      	ldr	r2, [pc, #576]	@ (80057f8 <HAL_I2S_Init+0x26c>)
 80055b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7fd f87b 	bl	80026b4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2202      	movs	r2, #2
 80055c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6812      	ldr	r2, [r2, #0]
 80055d0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80055d4:	f023 030f 	bic.w	r3, r3, #15
 80055d8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2202      	movs	r2, #2
 80055e0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d060      	beq.n	80056ac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d102      	bne.n	80055f8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80055f2:	2310      	movs	r3, #16
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	e001      	b.n	80055fc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80055f8:	2320      	movs	r3, #32
 80055fa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	2b20      	cmp	r3, #32
 8005602:	d802      	bhi.n	800560a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800560a:	2001      	movs	r0, #1
 800560c:	f002 fc2a 	bl	8007e64 <HAL_RCCEx_GetPeriphCLKFreq>
 8005610:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800561a:	d125      	bne.n	8005668 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d010      	beq.n	8005646 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	fbb2 f2f3 	udiv	r2, r2, r3
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	461a      	mov	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005640:	3305      	adds	r3, #5
 8005642:	613b      	str	r3, [r7, #16]
 8005644:	e01f      	b.n	8005686 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	461a      	mov	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005662:	3305      	adds	r3, #5
 8005664:	613b      	str	r3, [r7, #16]
 8005666:	e00e      	b.n	8005686 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	461a      	mov	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005682:	3305      	adds	r3, #5
 8005684:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	4a5c      	ldr	r2, [pc, #368]	@ (80057fc <HAL_I2S_Init+0x270>)
 800568a:	fba2 2303 	umull	r2, r3, r2, r3
 800568e:	08db      	lsrs	r3, r3, #3
 8005690:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	085b      	lsrs	r3, r3, #1
 80056a2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	021b      	lsls	r3, r3, #8
 80056a8:	61bb      	str	r3, [r7, #24]
 80056aa:	e003      	b.n	80056b4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80056ac:	2302      	movs	r3, #2
 80056ae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d902      	bls.n	80056c0 <HAL_I2S_Init+0x134>
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	2bff      	cmp	r3, #255	@ 0xff
 80056be:	d907      	bls.n	80056d0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c4:	f043 0210 	orr.w	r2, r3, #16
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e08f      	b.n	80057f0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	ea42 0103 	orr.w	r1, r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69fa      	ldr	r2, [r7, #28]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80056ee:	f023 030f 	bic.w	r3, r3, #15
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6851      	ldr	r1, [r2, #4]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6892      	ldr	r2, [r2, #8]
 80056fa:	4311      	orrs	r1, r2
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	68d2      	ldr	r2, [r2, #12]
 8005700:	4311      	orrs	r1, r2
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6992      	ldr	r2, [r2, #24]
 8005706:	430a      	orrs	r2, r1
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005712:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d161      	bne.n	80057e0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a38      	ldr	r2, [pc, #224]	@ (8005800 <HAL_I2S_Init+0x274>)
 8005720:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a37      	ldr	r2, [pc, #220]	@ (8005804 <HAL_I2S_Init+0x278>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d101      	bne.n	8005730 <HAL_I2S_Init+0x1a4>
 800572c:	4b36      	ldr	r3, [pc, #216]	@ (8005808 <HAL_I2S_Init+0x27c>)
 800572e:	e001      	b.n	8005734 <HAL_I2S_Init+0x1a8>
 8005730:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6812      	ldr	r2, [r2, #0]
 800573a:	4932      	ldr	r1, [pc, #200]	@ (8005804 <HAL_I2S_Init+0x278>)
 800573c:	428a      	cmp	r2, r1
 800573e:	d101      	bne.n	8005744 <HAL_I2S_Init+0x1b8>
 8005740:	4a31      	ldr	r2, [pc, #196]	@ (8005808 <HAL_I2S_Init+0x27c>)
 8005742:	e001      	b.n	8005748 <HAL_I2S_Init+0x1bc>
 8005744:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005748:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800574c:	f023 030f 	bic.w	r3, r3, #15
 8005750:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a2b      	ldr	r2, [pc, #172]	@ (8005804 <HAL_I2S_Init+0x278>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d101      	bne.n	8005760 <HAL_I2S_Init+0x1d4>
 800575c:	4b2a      	ldr	r3, [pc, #168]	@ (8005808 <HAL_I2S_Init+0x27c>)
 800575e:	e001      	b.n	8005764 <HAL_I2S_Init+0x1d8>
 8005760:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005764:	2202      	movs	r2, #2
 8005766:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a25      	ldr	r2, [pc, #148]	@ (8005804 <HAL_I2S_Init+0x278>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d101      	bne.n	8005776 <HAL_I2S_Init+0x1ea>
 8005772:	4b25      	ldr	r3, [pc, #148]	@ (8005808 <HAL_I2S_Init+0x27c>)
 8005774:	e001      	b.n	800577a <HAL_I2S_Init+0x1ee>
 8005776:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005786:	d003      	beq.n	8005790 <HAL_I2S_Init+0x204>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d103      	bne.n	8005798 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005790:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	e001      	b.n	800579c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005798:	2300      	movs	r3, #0
 800579a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80057a6:	4313      	orrs	r3, r2
 80057a8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80057b0:	4313      	orrs	r3, r2
 80057b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80057ba:	4313      	orrs	r3, r2
 80057bc:	b29a      	uxth	r2, r3
 80057be:	897b      	ldrh	r3, [r7, #10]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80057c8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a0d      	ldr	r2, [pc, #52]	@ (8005804 <HAL_I2S_Init+0x278>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d101      	bne.n	80057d8 <HAL_I2S_Init+0x24c>
 80057d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005808 <HAL_I2S_Init+0x27c>)
 80057d6:	e001      	b.n	80057dc <HAL_I2S_Init+0x250>
 80057d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057dc:	897a      	ldrh	r2, [r7, #10]
 80057de:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3720      	adds	r7, #32
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	08005903 	.word	0x08005903
 80057fc:	cccccccd 	.word	0xcccccccd
 8005800:	08005a19 	.word	0x08005a19
 8005804:	40003800 	.word	0x40003800
 8005808:	40003400 	.word	0x40003400

0800580c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005854:	881a      	ldrh	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005860:	1c9a      	adds	r2, r3, #2
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800586a:	b29b      	uxth	r3, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005878:	b29b      	uxth	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10e      	bne.n	800589c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800588c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff ffb8 	bl	800580c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800589c:	bf00      	nop
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b6:	b292      	uxth	r2, r2
 80058b8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058be:	1c9a      	adds	r2, r3, #2
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10e      	bne.n	80058fa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80058ea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff ff93 	bl	8005820 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80058fa:	bf00      	nop
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b086      	sub	sp, #24
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b04      	cmp	r3, #4
 800591c:	d13a      	bne.n	8005994 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b01      	cmp	r3, #1
 8005926:	d109      	bne.n	800593c <I2S_IRQHandler+0x3a>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005932:	2b40      	cmp	r3, #64	@ 0x40
 8005934:	d102      	bne.n	800593c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7ff ffb4 	bl	80058a4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005942:	2b40      	cmp	r3, #64	@ 0x40
 8005944:	d126      	bne.n	8005994 <I2S_IRQHandler+0x92>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b20      	cmp	r3, #32
 8005952:	d11f      	bne.n	8005994 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005962:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005964:	2300      	movs	r3, #0
 8005966:	613b      	str	r3, [r7, #16]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	613b      	str	r3, [r7, #16]
 8005978:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005986:	f043 0202 	orr.w	r2, r3, #2
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7ff ff50 	bl	8005834 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b03      	cmp	r3, #3
 800599e:	d136      	bne.n	8005a0e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d109      	bne.n	80059be <I2S_IRQHandler+0xbc>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b4:	2b80      	cmp	r3, #128	@ 0x80
 80059b6:	d102      	bne.n	80059be <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7ff ff45 	bl	8005848 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d122      	bne.n	8005a0e <I2S_IRQHandler+0x10c>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f003 0320 	and.w	r3, r3, #32
 80059d2:	2b20      	cmp	r3, #32
 80059d4:	d11b      	bne.n	8005a0e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80059e4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80059e6:	2300      	movs	r3, #0
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a00:	f043 0204 	orr.w	r2, r3, #4
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff ff13 	bl	8005834 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a0e:	bf00      	nop
 8005a10:	3718      	adds	r7, #24
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b088      	sub	sp, #32
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a92      	ldr	r2, [pc, #584]	@ (8005c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d101      	bne.n	8005a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005a32:	4b92      	ldr	r3, [pc, #584]	@ (8005c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a34:	e001      	b.n	8005a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005a36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a8b      	ldr	r2, [pc, #556]	@ (8005c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d101      	bne.n	8005a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005a50:	4b8a      	ldr	r3, [pc, #552]	@ (8005c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a52:	e001      	b.n	8005a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005a54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a64:	d004      	beq.n	8005a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f040 8099 	bne.w	8005ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d107      	bne.n	8005a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f925 	bl	8005cd4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d107      	bne.n	8005aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f9c8 	bl	8005e34 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aaa:	2b40      	cmp	r3, #64	@ 0x40
 8005aac:	d13a      	bne.n	8005b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f003 0320 	and.w	r3, r3, #32
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d035      	beq.n	8005b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a6e      	ldr	r2, [pc, #440]	@ (8005c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d101      	bne.n	8005ac6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005ac2:	4b6e      	ldr	r3, [pc, #440]	@ (8005c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ac4:	e001      	b.n	8005aca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005ac6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4969      	ldr	r1, [pc, #420]	@ (8005c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ad2:	428b      	cmp	r3, r1
 8005ad4:	d101      	bne.n	8005ada <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005ad6:	4b69      	ldr	r3, [pc, #420]	@ (8005c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ad8:	e001      	b.n	8005ade <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005ada:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ade:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ae2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005af2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b16:	f043 0202 	orr.w	r2, r3, #2
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7ff fe88 	bl	8005834 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	f003 0308 	and.w	r3, r3, #8
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	f040 80c3 	bne.w	8005cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f003 0320 	and.w	r3, r3, #32
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 80bd 	beq.w	8005cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b4a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a49      	ldr	r2, [pc, #292]	@ (8005c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d101      	bne.n	8005b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005b56:	4b49      	ldr	r3, [pc, #292]	@ (8005c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b58:	e001      	b.n	8005b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005b5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4944      	ldr	r1, [pc, #272]	@ (8005c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b66:	428b      	cmp	r3, r1
 8005b68:	d101      	bne.n	8005b6e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005b6a:	4b44      	ldr	r3, [pc, #272]	@ (8005c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b6c:	e001      	b.n	8005b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005b6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b72:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b76:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60bb      	str	r3, [r7, #8]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	60bb      	str	r3, [r7, #8]
 8005b84:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b92:	f043 0204 	orr.w	r2, r3, #4
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff fe4a 	bl	8005834 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ba0:	e089      	b.n	8005cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d107      	bne.n	8005bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f8be 	bl	8005d38 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d107      	bne.n	8005bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f8fd 	bl	8005dd0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bdc:	2b40      	cmp	r3, #64	@ 0x40
 8005bde:	d12f      	bne.n	8005c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d02a      	beq.n	8005c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005bf8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8005c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d101      	bne.n	8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005c04:	4b1d      	ldr	r3, [pc, #116]	@ (8005c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c06:	e001      	b.n	8005c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005c08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4919      	ldr	r1, [pc, #100]	@ (8005c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c14:	428b      	cmp	r3, r1
 8005c16:	d101      	bne.n	8005c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005c18:	4b18      	ldr	r3, [pc, #96]	@ (8005c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c1a:	e001      	b.n	8005c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005c1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c20:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c24:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c32:	f043 0202 	orr.w	r2, r3, #2
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff fdfa 	bl	8005834 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	f003 0308 	and.w	r3, r3, #8
 8005c46:	2b08      	cmp	r3, #8
 8005c48:	d136      	bne.n	8005cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d031      	beq.n	8005cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a07      	ldr	r2, [pc, #28]	@ (8005c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d101      	bne.n	8005c62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005c5e:	4b07      	ldr	r3, [pc, #28]	@ (8005c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c60:	e001      	b.n	8005c66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005c62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4902      	ldr	r1, [pc, #8]	@ (8005c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c6e:	428b      	cmp	r3, r1
 8005c70:	d106      	bne.n	8005c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005c72:	4b02      	ldr	r3, [pc, #8]	@ (8005c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c74:	e006      	b.n	8005c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005c76:	bf00      	nop
 8005c78:	40003800 	.word	0x40003800
 8005c7c:	40003400 	.word	0x40003400
 8005c80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c84:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c88:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c98:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca6:	f043 0204 	orr.w	r2, r3, #4
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7ff fdc0 	bl	8005834 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005cb4:	e000      	b.n	8005cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005cb6:	bf00      	nop
}
 8005cb8:	bf00      	nop
 8005cba:	3720      	adds	r7, #32
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce0:	1c99      	adds	r1, r3, #2
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	6251      	str	r1, [r2, #36]	@ 0x24
 8005ce6:	881a      	ldrh	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d113      	bne.n	8005d2e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d14:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d106      	bne.n	8005d2e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7ff ffc9 	bl	8005cc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d2e:	bf00      	nop
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d44:	1c99      	adds	r1, r3, #2
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	6251      	str	r1, [r2, #36]	@ 0x24
 8005d4a:	8819      	ldrh	r1, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1d      	ldr	r2, [pc, #116]	@ (8005dc8 <I2SEx_TxISR_I2SExt+0x90>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d101      	bne.n	8005d5a <I2SEx_TxISR_I2SExt+0x22>
 8005d56:	4b1d      	ldr	r3, [pc, #116]	@ (8005dcc <I2SEx_TxISR_I2SExt+0x94>)
 8005d58:	e001      	b.n	8005d5e <I2SEx_TxISR_I2SExt+0x26>
 8005d5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d5e:	460a      	mov	r2, r1
 8005d60:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d121      	bne.n	8005dbe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a12      	ldr	r2, [pc, #72]	@ (8005dc8 <I2SEx_TxISR_I2SExt+0x90>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d101      	bne.n	8005d88 <I2SEx_TxISR_I2SExt+0x50>
 8005d84:	4b11      	ldr	r3, [pc, #68]	@ (8005dcc <I2SEx_TxISR_I2SExt+0x94>)
 8005d86:	e001      	b.n	8005d8c <I2SEx_TxISR_I2SExt+0x54>
 8005d88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	490d      	ldr	r1, [pc, #52]	@ (8005dc8 <I2SEx_TxISR_I2SExt+0x90>)
 8005d94:	428b      	cmp	r3, r1
 8005d96:	d101      	bne.n	8005d9c <I2SEx_TxISR_I2SExt+0x64>
 8005d98:	4b0c      	ldr	r3, [pc, #48]	@ (8005dcc <I2SEx_TxISR_I2SExt+0x94>)
 8005d9a:	e001      	b.n	8005da0 <I2SEx_TxISR_I2SExt+0x68>
 8005d9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005da0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005da4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d106      	bne.n	8005dbe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7ff ff81 	bl	8005cc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005dbe:	bf00      	nop
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	40003800 	.word	0x40003800
 8005dcc:	40003400 	.word	0x40003400

08005dd0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68d8      	ldr	r0, [r3, #12]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de2:	1c99      	adds	r1, r3, #2
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005de8:	b282      	uxth	r2, r0
 8005dea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	3b01      	subs	r3, #1
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d113      	bne.n	8005e2c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e12:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7ff ff4a 	bl	8005cc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	3708      	adds	r7, #8
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a20      	ldr	r2, [pc, #128]	@ (8005ec4 <I2SEx_RxISR_I2SExt+0x90>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d101      	bne.n	8005e4a <I2SEx_RxISR_I2SExt+0x16>
 8005e46:	4b20      	ldr	r3, [pc, #128]	@ (8005ec8 <I2SEx_RxISR_I2SExt+0x94>)
 8005e48:	e001      	b.n	8005e4e <I2SEx_RxISR_I2SExt+0x1a>
 8005e4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e4e:	68d8      	ldr	r0, [r3, #12]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e54:	1c99      	adds	r1, r3, #2
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005e5a:	b282      	uxth	r2, r0
 8005e5c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d121      	bne.n	8005eba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a12      	ldr	r2, [pc, #72]	@ (8005ec4 <I2SEx_RxISR_I2SExt+0x90>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d101      	bne.n	8005e84 <I2SEx_RxISR_I2SExt+0x50>
 8005e80:	4b11      	ldr	r3, [pc, #68]	@ (8005ec8 <I2SEx_RxISR_I2SExt+0x94>)
 8005e82:	e001      	b.n	8005e88 <I2SEx_RxISR_I2SExt+0x54>
 8005e84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	490d      	ldr	r1, [pc, #52]	@ (8005ec4 <I2SEx_RxISR_I2SExt+0x90>)
 8005e90:	428b      	cmp	r3, r1
 8005e92:	d101      	bne.n	8005e98 <I2SEx_RxISR_I2SExt+0x64>
 8005e94:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec8 <I2SEx_RxISR_I2SExt+0x94>)
 8005e96:	e001      	b.n	8005e9c <I2SEx_RxISR_I2SExt+0x68>
 8005e98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e9c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ea0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d106      	bne.n	8005eba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7ff ff03 	bl	8005cc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005eba:	bf00      	nop
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	40003800 	.word	0x40003800
 8005ec8:	40003400 	.word	0x40003400

08005ecc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af02      	add	r7, sp, #8
 8005ed2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e101      	b.n	80060e2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d106      	bne.n	8005efe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f006 fdab 	bl	800ca54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2203      	movs	r2, #3
 8005f02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f0c:	d102      	bne.n	8005f14 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f003 f9f8 	bl	800930e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	7c1a      	ldrb	r2, [r3, #16]
 8005f26:	f88d 2000 	strb.w	r2, [sp]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f2e:	f003 f8d7 	bl	80090e0 <USB_CoreInit>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e0ce      	b.n	80060e2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2100      	movs	r1, #0
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f003 f9f0 	bl	8009330 <USB_SetCurrentMode>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d005      	beq.n	8005f62 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e0bf      	b.n	80060e2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]
 8005f66:	e04a      	b.n	8005ffe <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005f68:	7bfa      	ldrb	r2, [r7, #15]
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	440b      	add	r3, r1
 8005f76:	3315      	adds	r3, #21
 8005f78:	2201      	movs	r2, #1
 8005f7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005f7c:	7bfa      	ldrb	r2, [r7, #15]
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	4613      	mov	r3, r2
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	4413      	add	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	440b      	add	r3, r1
 8005f8a:	3314      	adds	r3, #20
 8005f8c:	7bfa      	ldrb	r2, [r7, #15]
 8005f8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005f90:	7bfa      	ldrb	r2, [r7, #15]
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	b298      	uxth	r0, r3
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	332e      	adds	r3, #46	@ 0x2e
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005fa8:	7bfa      	ldrb	r2, [r7, #15]
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	4613      	mov	r3, r2
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	440b      	add	r3, r1
 8005fb6:	3318      	adds	r3, #24
 8005fb8:	2200      	movs	r2, #0
 8005fba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005fbc:	7bfa      	ldrb	r2, [r7, #15]
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	4413      	add	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	331c      	adds	r3, #28
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005fd0:	7bfa      	ldrb	r2, [r7, #15]
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	4413      	add	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	440b      	add	r3, r1
 8005fde:	3320      	adds	r3, #32
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005fe4:	7bfa      	ldrb	r2, [r7, #15]
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	4413      	add	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	440b      	add	r3, r1
 8005ff2:	3324      	adds	r3, #36	@ 0x24
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	73fb      	strb	r3, [r7, #15]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	791b      	ldrb	r3, [r3, #4]
 8006002:	7bfa      	ldrb	r2, [r7, #15]
 8006004:	429a      	cmp	r2, r3
 8006006:	d3af      	bcc.n	8005f68 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006008:	2300      	movs	r3, #0
 800600a:	73fb      	strb	r3, [r7, #15]
 800600c:	e044      	b.n	8006098 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800600e:	7bfa      	ldrb	r2, [r7, #15]
 8006010:	6879      	ldr	r1, [r7, #4]
 8006012:	4613      	mov	r3, r2
 8006014:	00db      	lsls	r3, r3, #3
 8006016:	4413      	add	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	440b      	add	r3, r1
 800601c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006020:	2200      	movs	r2, #0
 8006022:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006024:	7bfa      	ldrb	r2, [r7, #15]
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	4613      	mov	r3, r2
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	4413      	add	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	440b      	add	r3, r1
 8006032:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006036:	7bfa      	ldrb	r2, [r7, #15]
 8006038:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800603a:	7bfa      	ldrb	r2, [r7, #15]
 800603c:	6879      	ldr	r1, [r7, #4]
 800603e:	4613      	mov	r3, r2
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	4413      	add	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	440b      	add	r3, r1
 8006048:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800604c:	2200      	movs	r2, #0
 800604e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006050:	7bfa      	ldrb	r2, [r7, #15]
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	4613      	mov	r3, r2
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006062:	2200      	movs	r2, #0
 8006064:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006066:	7bfa      	ldrb	r2, [r7, #15]
 8006068:	6879      	ldr	r1, [r7, #4]
 800606a:	4613      	mov	r3, r2
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	4413      	add	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	440b      	add	r3, r1
 8006074:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800607c:	7bfa      	ldrb	r2, [r7, #15]
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	4613      	mov	r3, r2
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	4413      	add	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006092:	7bfb      	ldrb	r3, [r7, #15]
 8006094:	3301      	adds	r3, #1
 8006096:	73fb      	strb	r3, [r7, #15]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	791b      	ldrb	r3, [r3, #4]
 800609c:	7bfa      	ldrb	r2, [r7, #15]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d3b5      	bcc.n	800600e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6818      	ldr	r0, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	7c1a      	ldrb	r2, [r3, #16]
 80060aa:	f88d 2000 	strb.w	r2, [sp]
 80060ae:	3304      	adds	r3, #4
 80060b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060b2:	f003 f989 	bl	80093c8 <USB_DevInit>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d005      	beq.n	80060c8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e00c      	b.n	80060e2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4618      	mov	r0, r3
 80060dc:	f004 f9d3 	bl	800a486 <USB_DevDisconnect>

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d101      	bne.n	8006106 <HAL_PCD_Start+0x1c>
 8006102:	2302      	movs	r3, #2
 8006104:	e022      	b.n	800614c <HAL_PCD_Start+0x62>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006116:	2b00      	cmp	r3, #0
 8006118:	d009      	beq.n	800612e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800611e:	2b01      	cmp	r3, #1
 8006120:	d105      	bne.n	800612e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006126:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4618      	mov	r0, r3
 8006134:	f003 f8da 	bl	80092ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4618      	mov	r0, r3
 800613e:	f004 f981 	bl	800a444 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006154:	b590      	push	{r4, r7, lr}
 8006156:	b08d      	sub	sp, #52	@ 0x34
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4618      	mov	r0, r3
 800616c:	f004 fa3f 	bl	800a5ee <USB_GetMode>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	f040 848c 	bne.w	8006a90 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4618      	mov	r0, r3
 800617e:	f004 f9a3 	bl	800a4c8 <USB_ReadInterrupts>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 8482 	beq.w	8006a8e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	0a1b      	lsrs	r3, r3, #8
 8006194:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f004 f990 	bl	800a4c8 <USB_ReadInterrupts>
 80061a8:	4603      	mov	r3, r0
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d107      	bne.n	80061c2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695a      	ldr	r2, [r3, #20]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f002 0202 	and.w	r2, r2, #2
 80061c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f004 f97e 	bl	800a4c8 <USB_ReadInterrupts>
 80061cc:	4603      	mov	r3, r0
 80061ce:	f003 0310 	and.w	r3, r3, #16
 80061d2:	2b10      	cmp	r3, #16
 80061d4:	d161      	bne.n	800629a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	699a      	ldr	r2, [r3, #24]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0210 	bic.w	r2, r2, #16
 80061e4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	f003 020f 	and.w	r2, r3, #15
 80061f2:	4613      	mov	r3, r2
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	4413      	add	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	4413      	add	r3, r2
 8006202:	3304      	adds	r3, #4
 8006204:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	0c5b      	lsrs	r3, r3, #17
 800620a:	f003 030f 	and.w	r3, r3, #15
 800620e:	2b02      	cmp	r3, #2
 8006210:	d124      	bne.n	800625c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006218:	4013      	ands	r3, r2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d035      	beq.n	800628a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	091b      	lsrs	r3, r3, #4
 8006226:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006228:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800622c:	b29b      	uxth	r3, r3
 800622e:	461a      	mov	r2, r3
 8006230:	6a38      	ldr	r0, [r7, #32]
 8006232:	f003 ffb5 	bl	800a1a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	091b      	lsrs	r3, r3, #4
 800623e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006242:	441a      	add	r2, r3
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	695a      	ldr	r2, [r3, #20]
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	091b      	lsrs	r3, r3, #4
 8006250:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006254:	441a      	add	r2, r3
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	615a      	str	r2, [r3, #20]
 800625a:	e016      	b.n	800628a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	0c5b      	lsrs	r3, r3, #17
 8006260:	f003 030f 	and.w	r3, r3, #15
 8006264:	2b06      	cmp	r3, #6
 8006266:	d110      	bne.n	800628a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800626e:	2208      	movs	r2, #8
 8006270:	4619      	mov	r1, r3
 8006272:	6a38      	ldr	r0, [r7, #32]
 8006274:	f003 ff94 	bl	800a1a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	695a      	ldr	r2, [r3, #20]
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	091b      	lsrs	r3, r3, #4
 8006280:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006284:	441a      	add	r2, r3
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	699a      	ldr	r2, [r3, #24]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f042 0210 	orr.w	r2, r2, #16
 8006298:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4618      	mov	r0, r3
 80062a0:	f004 f912 	bl	800a4c8 <USB_ReadInterrupts>
 80062a4:	4603      	mov	r3, r0
 80062a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80062ae:	f040 80a7 	bne.w	8006400 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f004 f917 	bl	800a4ee <USB_ReadDevAllOutEpInterrupt>
 80062c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80062c2:	e099      	b.n	80063f8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80062c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 808e 	beq.w	80063ec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	4611      	mov	r1, r2
 80062da:	4618      	mov	r0, r3
 80062dc:	f004 f93b 	bl	800a556 <USB_ReadDevOutEPInterrupt>
 80062e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00c      	beq.n	8006306 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80062ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062f8:	461a      	mov	r2, r3
 80062fa:	2301      	movs	r3, #1
 80062fc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80062fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fea3 	bl	800704c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f003 0308 	and.w	r3, r3, #8
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00c      	beq.n	800632a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800631c:	461a      	mov	r2, r3
 800631e:	2308      	movs	r3, #8
 8006320:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006322:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 ff79 	bl	800721c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f003 0310 	and.w	r3, r3, #16
 8006330:	2b00      	cmp	r3, #0
 8006332:	d008      	beq.n	8006346 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006340:	461a      	mov	r2, r3
 8006342:	2310      	movs	r3, #16
 8006344:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d030      	beq.n	80063b2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006358:	2b80      	cmp	r3, #128	@ 0x80
 800635a:	d109      	bne.n	8006370 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	69fa      	ldr	r2, [r7, #28]
 8006366:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800636a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800636e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006372:	4613      	mov	r3, r2
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	4413      	add	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	4413      	add	r3, r2
 8006382:	3304      	adds	r3, #4
 8006384:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	78db      	ldrb	r3, [r3, #3]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d108      	bne.n	80063a0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2200      	movs	r2, #0
 8006392:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006396:	b2db      	uxtb	r3, r3
 8006398:	4619      	mov	r1, r3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f006 fc6e 	bl	800cc7c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ac:	461a      	mov	r2, r3
 80063ae:	2302      	movs	r3, #2
 80063b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	f003 0320 	and.w	r3, r3, #32
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d008      	beq.n	80063ce <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c8:	461a      	mov	r2, r3
 80063ca:	2320      	movs	r3, #32
 80063cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d009      	beq.n	80063ec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80063d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e4:	461a      	mov	r2, r3
 80063e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80063ea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80063ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ee:	3301      	adds	r3, #1
 80063f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80063f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f4:	085b      	lsrs	r3, r3, #1
 80063f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80063f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f47f af62 	bne.w	80062c4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4618      	mov	r0, r3
 8006406:	f004 f85f 	bl	800a4c8 <USB_ReadInterrupts>
 800640a:	4603      	mov	r3, r0
 800640c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006410:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006414:	f040 80db 	bne.w	80065ce <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4618      	mov	r0, r3
 800641e:	f004 f880 	bl	800a522 <USB_ReadDevAllInEpInterrupt>
 8006422:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006428:	e0cd      	b.n	80065c6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800642a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 80c2 	beq.w	80065ba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	4611      	mov	r1, r2
 8006440:	4618      	mov	r0, r3
 8006442:	f004 f8a6 	bl	800a592 <USB_ReadDevInEPInterrupt>
 8006446:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	d057      	beq.n	8006502 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006454:	f003 030f 	and.w	r3, r3, #15
 8006458:	2201      	movs	r2, #1
 800645a:	fa02 f303 	lsl.w	r3, r2, r3
 800645e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006466:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	43db      	mvns	r3, r3
 800646c:	69f9      	ldr	r1, [r7, #28]
 800646e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006472:	4013      	ands	r3, r2
 8006474:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006482:	461a      	mov	r2, r3
 8006484:	2301      	movs	r3, #1
 8006486:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	799b      	ldrb	r3, [r3, #6]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d132      	bne.n	80064f6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006490:	6879      	ldr	r1, [r7, #4]
 8006492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006494:	4613      	mov	r3, r2
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	440b      	add	r3, r1
 800649e:	3320      	adds	r3, #32
 80064a0:	6819      	ldr	r1, [r3, #0]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064a6:	4613      	mov	r3, r2
 80064a8:	00db      	lsls	r3, r3, #3
 80064aa:	4413      	add	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4403      	add	r3, r0
 80064b0:	331c      	adds	r3, #28
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4419      	add	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064ba:	4613      	mov	r3, r2
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	4413      	add	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4403      	add	r3, r0
 80064c4:	3320      	adds	r3, #32
 80064c6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80064c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d113      	bne.n	80064f6 <HAL_PCD_IRQHandler+0x3a2>
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064d2:	4613      	mov	r3, r2
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	440b      	add	r3, r1
 80064dc:	3324      	adds	r3, #36	@ 0x24
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d108      	bne.n	80064f6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6818      	ldr	r0, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80064ee:	461a      	mov	r2, r3
 80064f0:	2101      	movs	r1, #1
 80064f2:	f004 f8ad 	bl	800a650 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80064f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f006 fb38 	bl	800cb72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f003 0308 	and.w	r3, r3, #8
 8006508:	2b00      	cmp	r3, #0
 800650a:	d008      	beq.n	800651e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800650c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006518:	461a      	mov	r2, r3
 800651a:	2308      	movs	r3, #8
 800651c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f003 0310 	and.w	r3, r3, #16
 8006524:	2b00      	cmp	r3, #0
 8006526:	d008      	beq.n	800653a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006534:	461a      	mov	r2, r3
 8006536:	2310      	movs	r3, #16
 8006538:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006540:	2b00      	cmp	r3, #0
 8006542:	d008      	beq.n	8006556 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006550:	461a      	mov	r2, r3
 8006552:	2340      	movs	r3, #64	@ 0x40
 8006554:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d023      	beq.n	80065a8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006560:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006562:	6a38      	ldr	r0, [r7, #32]
 8006564:	f003 f894 	bl	8009690 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800656a:	4613      	mov	r3, r2
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	4413      	add	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	3310      	adds	r3, #16
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	4413      	add	r3, r2
 8006578:	3304      	adds	r3, #4
 800657a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	78db      	ldrb	r3, [r3, #3]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d108      	bne.n	8006596 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2200      	movs	r2, #0
 8006588:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	b2db      	uxtb	r3, r3
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f006 fb85 	bl	800cca0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a2:	461a      	mov	r2, r3
 80065a4:	2302      	movs	r3, #2
 80065a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80065b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fcbd 	bl	8006f34 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80065ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065bc:	3301      	adds	r3, #1
 80065be:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80065c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c2:	085b      	lsrs	r3, r3, #1
 80065c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80065c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f47f af2e 	bne.w	800642a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f003 ff78 	bl	800a4c8 <USB_ReadInterrupts>
 80065d8:	4603      	mov	r3, r0
 80065da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065e2:	d122      	bne.n	800662a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	69fa      	ldr	r2, [r7, #28]
 80065ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065f2:	f023 0301 	bic.w	r3, r3, #1
 80065f6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d108      	bne.n	8006614 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800660a:	2100      	movs	r1, #0
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fea3 	bl	8007358 <HAL_PCDEx_LPM_Callback>
 8006612:	e002      	b.n	800661a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f006 fb23 	bl	800cc60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	695a      	ldr	r2, [r3, #20]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006628:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4618      	mov	r0, r3
 8006630:	f003 ff4a 	bl	800a4c8 <USB_ReadInterrupts>
 8006634:	4603      	mov	r3, r0
 8006636:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800663a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800663e:	d112      	bne.n	8006666 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b01      	cmp	r3, #1
 800664e:	d102      	bne.n	8006656 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f006 fadf 	bl	800cc14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	695a      	ldr	r2, [r3, #20]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006664:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4618      	mov	r0, r3
 800666c:	f003 ff2c 	bl	800a4c8 <USB_ReadInterrupts>
 8006670:	4603      	mov	r3, r0
 8006672:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800667a:	f040 80b7 	bne.w	80067ec <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	69fa      	ldr	r2, [r7, #28]
 8006688:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800668c:	f023 0301 	bic.w	r3, r3, #1
 8006690:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2110      	movs	r1, #16
 8006698:	4618      	mov	r0, r3
 800669a:	f002 fff9 	bl	8009690 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800669e:	2300      	movs	r3, #0
 80066a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066a2:	e046      	b.n	8006732 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80066a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066b0:	461a      	mov	r2, r3
 80066b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80066b6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066c8:	0151      	lsls	r1, r2, #5
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	440a      	add	r2, r1
 80066ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80066d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80066d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e4:	461a      	mov	r2, r3
 80066e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80066ea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066fc:	0151      	lsls	r1, r2, #5
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	440a      	add	r2, r1
 8006702:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006706:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800670a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800670c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800671c:	0151      	lsls	r1, r2, #5
 800671e:	69fa      	ldr	r2, [r7, #28]
 8006720:	440a      	add	r2, r1
 8006722:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006726:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800672a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800672c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800672e:	3301      	adds	r3, #1
 8006730:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	791b      	ldrb	r3, [r3, #4]
 8006736:	461a      	mov	r2, r3
 8006738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673a:	4293      	cmp	r3, r2
 800673c:	d3b2      	bcc.n	80066a4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800674c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006750:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	7bdb      	ldrb	r3, [r3, #15]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d016      	beq.n	8006788 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006760:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006764:	69fa      	ldr	r2, [r7, #28]
 8006766:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800676a:	f043 030b 	orr.w	r3, r3, #11
 800676e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800677a:	69fa      	ldr	r2, [r7, #28]
 800677c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006780:	f043 030b 	orr.w	r3, r3, #11
 8006784:	6453      	str	r3, [r2, #68]	@ 0x44
 8006786:	e015      	b.n	80067b4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	69fa      	ldr	r2, [r7, #28]
 8006792:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006796:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800679a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800679e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	69fa      	ldr	r2, [r7, #28]
 80067aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067ae:	f043 030b 	orr.w	r3, r3, #11
 80067b2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	69fa      	ldr	r2, [r7, #28]
 80067be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067c2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80067c6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6818      	ldr	r0, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80067d6:	461a      	mov	r2, r3
 80067d8:	f003 ff3a 	bl	800a650 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	695a      	ldr	r2, [r3, #20]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80067ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f003 fe69 	bl	800a4c8 <USB_ReadInterrupts>
 80067f6:	4603      	mov	r3, r0
 80067f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006800:	d123      	bne.n	800684a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4618      	mov	r0, r3
 8006808:	f003 feff 	bl	800a60a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4618      	mov	r0, r3
 8006812:	f002 ffb6 	bl	8009782 <USB_GetDevSpeed>
 8006816:	4603      	mov	r3, r0
 8006818:	461a      	mov	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681c      	ldr	r4, [r3, #0]
 8006822:	f001 fa09 	bl	8007c38 <HAL_RCC_GetHCLKFreq>
 8006826:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800682c:	461a      	mov	r2, r3
 800682e:	4620      	mov	r0, r4
 8006830:	f002 fcba 	bl	80091a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f006 f9c4 	bl	800cbc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695a      	ldr	r2, [r3, #20]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006848:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4618      	mov	r0, r3
 8006850:	f003 fe3a 	bl	800a4c8 <USB_ReadInterrupts>
 8006854:	4603      	mov	r3, r0
 8006856:	f003 0308 	and.w	r3, r3, #8
 800685a:	2b08      	cmp	r3, #8
 800685c:	d10a      	bne.n	8006874 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f006 f9a1 	bl	800cba6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695a      	ldr	r2, [r3, #20]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f002 0208 	and.w	r2, r2, #8
 8006872:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4618      	mov	r0, r3
 800687a:	f003 fe25 	bl	800a4c8 <USB_ReadInterrupts>
 800687e:	4603      	mov	r3, r0
 8006880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006884:	2b80      	cmp	r3, #128	@ 0x80
 8006886:	d123      	bne.n	80068d0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006894:	2301      	movs	r3, #1
 8006896:	627b      	str	r3, [r7, #36]	@ 0x24
 8006898:	e014      	b.n	80068c4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800689e:	4613      	mov	r3, r2
 80068a0:	00db      	lsls	r3, r3, #3
 80068a2:	4413      	add	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	440b      	add	r3, r1
 80068a8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d105      	bne.n	80068be <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	4619      	mov	r1, r3
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fb0a 	bl	8006ed2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c0:	3301      	adds	r3, #1
 80068c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	791b      	ldrb	r3, [r3, #4]
 80068c8:	461a      	mov	r2, r3
 80068ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d3e4      	bcc.n	800689a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f003 fdf7 	bl	800a4c8 <USB_ReadInterrupts>
 80068da:	4603      	mov	r3, r0
 80068dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068e4:	d13c      	bne.n	8006960 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068e6:	2301      	movs	r3, #1
 80068e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ea:	e02b      	b.n	8006944 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80068ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006900:	4613      	mov	r3, r2
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	3318      	adds	r3, #24
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d115      	bne.n	800693e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006912:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006914:	2b00      	cmp	r3, #0
 8006916:	da12      	bge.n	800693e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006918:	6879      	ldr	r1, [r7, #4]
 800691a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800691c:	4613      	mov	r3, r2
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	4413      	add	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	440b      	add	r3, r1
 8006926:	3317      	adds	r3, #23
 8006928:	2201      	movs	r2, #1
 800692a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800692c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692e:	b2db      	uxtb	r3, r3
 8006930:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006934:	b2db      	uxtb	r3, r3
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 faca 	bl	8006ed2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800693e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006940:	3301      	adds	r3, #1
 8006942:	627b      	str	r3, [r7, #36]	@ 0x24
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	791b      	ldrb	r3, [r3, #4]
 8006948:	461a      	mov	r2, r3
 800694a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694c:	4293      	cmp	r3, r2
 800694e:	d3cd      	bcc.n	80068ec <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	695a      	ldr	r2, [r3, #20]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800695e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4618      	mov	r0, r3
 8006966:	f003 fdaf 	bl	800a4c8 <USB_ReadInterrupts>
 800696a:	4603      	mov	r3, r0
 800696c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006970:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006974:	d156      	bne.n	8006a24 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006976:	2301      	movs	r3, #1
 8006978:	627b      	str	r3, [r7, #36]	@ 0x24
 800697a:	e045      	b.n	8006a08 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800697c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800698c:	6879      	ldr	r1, [r7, #4]
 800698e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006990:	4613      	mov	r3, r2
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	4413      	add	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	440b      	add	r3, r1
 800699a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d12e      	bne.n	8006a02 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80069a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	da2b      	bge.n	8006a02 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80069b6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d121      	bne.n	8006a02 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80069be:	6879      	ldr	r1, [r7, #4]
 80069c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069c2:	4613      	mov	r3, r2
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	440b      	add	r3, r1
 80069cc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80069d0:	2201      	movs	r2, #1
 80069d2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10a      	bne.n	8006a02 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	69fa      	ldr	r2, [r7, #28]
 80069f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80069fe:	6053      	str	r3, [r2, #4]
            break;
 8006a00:	e008      	b.n	8006a14 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a04:	3301      	adds	r3, #1
 8006a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	791b      	ldrb	r3, [r3, #4]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d3b3      	bcc.n	800697c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695a      	ldr	r2, [r3, #20]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006a22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f003 fd4d 	bl	800a4c8 <USB_ReadInterrupts>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a38:	d10a      	bne.n	8006a50 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f006 f942 	bl	800ccc4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	695a      	ldr	r2, [r3, #20]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006a4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f003 fd37 	bl	800a4c8 <USB_ReadInterrupts>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	d115      	bne.n	8006a90 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	f003 0304 	and.w	r3, r3, #4
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d002      	beq.n	8006a7c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f006 f932 	bl	800cce0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6859      	ldr	r1, [r3, #4]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	605a      	str	r2, [r3, #4]
 8006a8c:	e000      	b.n	8006a90 <HAL_PCD_IRQHandler+0x93c>
      return;
 8006a8e:	bf00      	nop
    }
  }
}
 8006a90:	3734      	adds	r7, #52	@ 0x34
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd90      	pop	{r4, r7, pc}

08006a96 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b082      	sub	sp, #8
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d101      	bne.n	8006ab0 <HAL_PCD_SetAddress+0x1a>
 8006aac:	2302      	movs	r3, #2
 8006aae:	e012      	b.n	8006ad6 <HAL_PCD_SetAddress+0x40>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	78fa      	ldrb	r2, [r7, #3]
 8006abc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	78fa      	ldrb	r2, [r7, #3]
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f003 fc96 	bl	800a3f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b084      	sub	sp, #16
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	4608      	mov	r0, r1
 8006ae8:	4611      	mov	r1, r2
 8006aea:	461a      	mov	r2, r3
 8006aec:	4603      	mov	r3, r0
 8006aee:	70fb      	strb	r3, [r7, #3]
 8006af0:	460b      	mov	r3, r1
 8006af2:	803b      	strh	r3, [r7, #0]
 8006af4:	4613      	mov	r3, r2
 8006af6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	da0f      	bge.n	8006b24 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	f003 020f 	and.w	r2, r3, #15
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	4413      	add	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	3310      	adds	r3, #16
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	4413      	add	r3, r2
 8006b18:	3304      	adds	r3, #4
 8006b1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	705a      	strb	r2, [r3, #1]
 8006b22:	e00f      	b.n	8006b44 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b24:	78fb      	ldrb	r3, [r7, #3]
 8006b26:	f003 020f 	and.w	r2, r3, #15
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	4413      	add	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	4413      	add	r3, r2
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006b44:	78fb      	ldrb	r3, [r7, #3]
 8006b46:	f003 030f 	and.w	r3, r3, #15
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006b50:	883b      	ldrh	r3, [r7, #0]
 8006b52:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	78ba      	ldrb	r2, [r7, #2]
 8006b5e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	785b      	ldrb	r3, [r3, #1]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d004      	beq.n	8006b72 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006b72:	78bb      	ldrb	r3, [r7, #2]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d102      	bne.n	8006b7e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d101      	bne.n	8006b8c <HAL_PCD_EP_Open+0xae>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e00e      	b.n	8006baa <HAL_PCD_EP_Open+0xcc>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68f9      	ldr	r1, [r7, #12]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f002 fe16 	bl	80097cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006ba8:	7afb      	ldrb	r3, [r7, #11]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	460b      	mov	r3, r1
 8006bbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006bbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	da0f      	bge.n	8006be6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bc6:	78fb      	ldrb	r3, [r7, #3]
 8006bc8:	f003 020f 	and.w	r2, r3, #15
 8006bcc:	4613      	mov	r3, r2
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	3310      	adds	r3, #16
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	4413      	add	r3, r2
 8006bda:	3304      	adds	r3, #4
 8006bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2201      	movs	r2, #1
 8006be2:	705a      	strb	r2, [r3, #1]
 8006be4:	e00f      	b.n	8006c06 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006be6:	78fb      	ldrb	r3, [r7, #3]
 8006be8:	f003 020f 	and.w	r2, r3, #15
 8006bec:	4613      	mov	r3, r2
 8006bee:	00db      	lsls	r3, r3, #3
 8006bf0:	4413      	add	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c06:	78fb      	ldrb	r3, [r7, #3]
 8006c08:	f003 030f 	and.w	r3, r3, #15
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d101      	bne.n	8006c20 <HAL_PCD_EP_Close+0x6e>
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	e00e      	b.n	8006c3e <HAL_PCD_EP_Close+0x8c>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68f9      	ldr	r1, [r7, #12]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f002 fe54 	bl	80098dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b086      	sub	sp, #24
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	60f8      	str	r0, [r7, #12]
 8006c4e:	607a      	str	r2, [r7, #4]
 8006c50:	603b      	str	r3, [r7, #0]
 8006c52:	460b      	mov	r3, r1
 8006c54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c56:	7afb      	ldrb	r3, [r7, #11]
 8006c58:	f003 020f 	and.w	r2, r3, #15
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	4413      	add	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2200      	movs	r2, #0
 8006c86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c88:	7afb      	ldrb	r3, [r7, #11]
 8006c8a:	f003 030f 	and.w	r3, r3, #15
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	799b      	ldrb	r3, [r3, #6]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d102      	bne.n	8006ca2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6818      	ldr	r0, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	799b      	ldrb	r3, [r3, #6]
 8006caa:	461a      	mov	r2, r3
 8006cac:	6979      	ldr	r1, [r7, #20]
 8006cae:	f002 fef1 	bl	8009a94 <USB_EPStartXfer>

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006cc8:	78fb      	ldrb	r3, [r7, #3]
 8006cca:	f003 020f 	and.w	r2, r3, #15
 8006cce:	6879      	ldr	r1, [r7, #4]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	4413      	add	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	440b      	add	r3, r1
 8006cda:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006cde:	681b      	ldr	r3, [r3, #0]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	607a      	str	r2, [r7, #4]
 8006cf6:	603b      	str	r3, [r7, #0]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cfc:	7afb      	ldrb	r3, [r7, #11]
 8006cfe:	f003 020f 	and.w	r2, r3, #15
 8006d02:	4613      	mov	r3, r2
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	3310      	adds	r3, #16
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4413      	add	r3, r2
 8006d10:	3304      	adds	r3, #4
 8006d12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	2200      	movs	r2, #0
 8006d24:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d2c:	7afb      	ldrb	r3, [r7, #11]
 8006d2e:	f003 030f 	and.w	r3, r3, #15
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	799b      	ldrb	r3, [r3, #6]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d102      	bne.n	8006d46 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6818      	ldr	r0, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	799b      	ldrb	r3, [r3, #6]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	6979      	ldr	r1, [r7, #20]
 8006d52:	f002 fe9f 	bl	8009a94 <USB_EPStartXfer>

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006d6c:	78fb      	ldrb	r3, [r7, #3]
 8006d6e:	f003 030f 	and.w	r3, r3, #15
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	7912      	ldrb	r2, [r2, #4]
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d901      	bls.n	8006d7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e04f      	b.n	8006e1e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	da0f      	bge.n	8006da6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d86:	78fb      	ldrb	r3, [r7, #3]
 8006d88:	f003 020f 	and.w	r2, r3, #15
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	3310      	adds	r3, #16
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	4413      	add	r3, r2
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	705a      	strb	r2, [r3, #1]
 8006da4:	e00d      	b.n	8006dc2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006da6:	78fa      	ldrb	r2, [r7, #3]
 8006da8:	4613      	mov	r3, r2
 8006daa:	00db      	lsls	r3, r3, #3
 8006dac:	4413      	add	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	4413      	add	r3, r2
 8006db8:	3304      	adds	r3, #4
 8006dba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006dc8:	78fb      	ldrb	r3, [r7, #3]
 8006dca:	f003 030f 	and.w	r3, r3, #15
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d101      	bne.n	8006de2 <HAL_PCD_EP_SetStall+0x82>
 8006dde:	2302      	movs	r3, #2
 8006de0:	e01d      	b.n	8006e1e <HAL_PCD_EP_SetStall+0xbe>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68f9      	ldr	r1, [r7, #12]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f003 fa2d 	bl	800a250 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006df6:	78fb      	ldrb	r3, [r7, #3]
 8006df8:	f003 030f 	and.w	r3, r3, #15
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d109      	bne.n	8006e14 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6818      	ldr	r0, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	7999      	ldrb	r1, [r3, #6]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f003 fc1e 	bl	800a650 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	460b      	mov	r3, r1
 8006e30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006e32:	78fb      	ldrb	r3, [r7, #3]
 8006e34:	f003 030f 	and.w	r3, r3, #15
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	7912      	ldrb	r2, [r2, #4]
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d901      	bls.n	8006e44 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e042      	b.n	8006eca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006e44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	da0f      	bge.n	8006e6c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e4c:	78fb      	ldrb	r3, [r7, #3]
 8006e4e:	f003 020f 	and.w	r2, r3, #15
 8006e52:	4613      	mov	r3, r2
 8006e54:	00db      	lsls	r3, r3, #3
 8006e56:	4413      	add	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	3310      	adds	r3, #16
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	4413      	add	r3, r2
 8006e60:	3304      	adds	r3, #4
 8006e62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	705a      	strb	r2, [r3, #1]
 8006e6a:	e00f      	b.n	8006e8c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e6c:	78fb      	ldrb	r3, [r7, #3]
 8006e6e:	f003 020f 	and.w	r2, r3, #15
 8006e72:	4613      	mov	r3, r2
 8006e74:	00db      	lsls	r3, r3, #3
 8006e76:	4413      	add	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	4413      	add	r3, r2
 8006e82:	3304      	adds	r3, #4
 8006e84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e92:	78fb      	ldrb	r3, [r7, #3]
 8006e94:	f003 030f 	and.w	r3, r3, #15
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d101      	bne.n	8006eac <HAL_PCD_EP_ClrStall+0x86>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e00e      	b.n	8006eca <HAL_PCD_EP_ClrStall+0xa4>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68f9      	ldr	r1, [r7, #12]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f003 fa36 	bl	800a32c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	460b      	mov	r3, r1
 8006edc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006ede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	da0c      	bge.n	8006f00 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ee6:	78fb      	ldrb	r3, [r7, #3]
 8006ee8:	f003 020f 	and.w	r2, r3, #15
 8006eec:	4613      	mov	r3, r2
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	3310      	adds	r3, #16
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	4413      	add	r3, r2
 8006efa:	3304      	adds	r3, #4
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	e00c      	b.n	8006f1a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	f003 020f 	and.w	r2, r3, #15
 8006f06:	4613      	mov	r3, r2
 8006f08:	00db      	lsls	r3, r3, #3
 8006f0a:	4413      	add	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	4413      	add	r3, r2
 8006f16:	3304      	adds	r3, #4
 8006f18:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68f9      	ldr	r1, [r7, #12]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f003 f855 	bl	8009fd0 <USB_EPStopXfer>
 8006f26:	4603      	mov	r3, r0
 8006f28:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006f2a:	7afb      	ldrb	r3, [r7, #11]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b08a      	sub	sp, #40	@ 0x28
 8006f38:	af02      	add	r7, sp, #8
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	00db      	lsls	r3, r3, #3
 8006f4e:	4413      	add	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	3310      	adds	r3, #16
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	4413      	add	r3, r2
 8006f58:	3304      	adds	r3, #4
 8006f5a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	695a      	ldr	r2, [r3, #20]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d901      	bls.n	8006f6c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e06b      	b.n	8007044 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	691a      	ldr	r2, [r3, #16]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	695b      	ldr	r3, [r3, #20]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	69fa      	ldr	r2, [r7, #28]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d902      	bls.n	8006f88 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	3303      	adds	r3, #3
 8006f8c:	089b      	lsrs	r3, r3, #2
 8006f8e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f90:	e02a      	b.n	8006fe8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	691a      	ldr	r2, [r3, #16]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	69fa      	ldr	r2, [r7, #28]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d902      	bls.n	8006fae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	3303      	adds	r3, #3
 8006fb2:	089b      	lsrs	r3, r3, #2
 8006fb4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	68d9      	ldr	r1, [r3, #12]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	b2da      	uxtb	r2, r3
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	4603      	mov	r3, r0
 8006fca:	6978      	ldr	r0, [r7, #20]
 8006fcc:	f003 f8aa 	bl	800a124 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	68da      	ldr	r2, [r3, #12]
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	441a      	add	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	695a      	ldr	r2, [r3, #20]
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	441a      	add	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d809      	bhi.n	8007012 <PCD_WriteEmptyTxFifo+0xde>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	695a      	ldr	r2, [r3, #20]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007006:	429a      	cmp	r2, r3
 8007008:	d203      	bcs.n	8007012 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1bf      	bne.n	8006f92 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	691a      	ldr	r2, [r3, #16]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	429a      	cmp	r2, r3
 800701c:	d811      	bhi.n	8007042 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	f003 030f 	and.w	r3, r3, #15
 8007024:	2201      	movs	r2, #1
 8007026:	fa02 f303 	lsl.w	r3, r2, r3
 800702a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007032:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	43db      	mvns	r3, r3
 8007038:	6939      	ldr	r1, [r7, #16]
 800703a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800703e:	4013      	ands	r3, r2
 8007040:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3720      	adds	r7, #32
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b088      	sub	sp, #32
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	333c      	adds	r3, #60	@ 0x3c
 8007064:	3304      	adds	r3, #4
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	799b      	ldrb	r3, [r3, #6]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d17b      	bne.n	800717a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f003 0308 	and.w	r3, r3, #8
 8007088:	2b00      	cmp	r3, #0
 800708a:	d015      	beq.n	80070b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	4a61      	ldr	r2, [pc, #388]	@ (8007214 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007090:	4293      	cmp	r3, r2
 8007092:	f240 80b9 	bls.w	8007208 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 80b3 	beq.w	8007208 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ae:	461a      	mov	r2, r3
 80070b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070b4:	6093      	str	r3, [r2, #8]
 80070b6:	e0a7      	b.n	8007208 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d009      	beq.n	80070d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ce:	461a      	mov	r2, r3
 80070d0:	2320      	movs	r3, #32
 80070d2:	6093      	str	r3, [r2, #8]
 80070d4:	e098      	b.n	8007208 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f040 8093 	bne.w	8007208 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	4a4b      	ldr	r2, [pc, #300]	@ (8007214 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d90f      	bls.n	800710a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00a      	beq.n	800710a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007100:	461a      	mov	r2, r3
 8007102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007106:	6093      	str	r3, [r2, #8]
 8007108:	e07e      	b.n	8007208 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	4613      	mov	r3, r2
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	4413      	add	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	4413      	add	r3, r2
 800711c:	3304      	adds	r3, #4
 800711e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6a1a      	ldr	r2, [r3, #32]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	0159      	lsls	r1, r3, #5
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	440b      	add	r3, r1
 800712c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007136:	1ad2      	subs	r2, r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d114      	bne.n	800716c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d109      	bne.n	800715e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6818      	ldr	r0, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007154:	461a      	mov	r2, r3
 8007156:	2101      	movs	r1, #1
 8007158:	f003 fa7a 	bl	800a650 <USB_EP0_OutStart>
 800715c:	e006      	b.n	800716c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	441a      	add	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	b2db      	uxtb	r3, r3
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f005 fce2 	bl	800cb3c <HAL_PCD_DataOutStageCallback>
 8007178:	e046      	b.n	8007208 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	4a26      	ldr	r2, [pc, #152]	@ (8007218 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d124      	bne.n	80071cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00a      	beq.n	80071a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007198:	461a      	mov	r2, r3
 800719a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800719e:	6093      	str	r3, [r2, #8]
 80071a0:	e032      	b.n	8007208 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f003 0320 	and.w	r3, r3, #32
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d008      	beq.n	80071be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071b8:	461a      	mov	r2, r3
 80071ba:	2320      	movs	r3, #32
 80071bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f005 fcb9 	bl	800cb3c <HAL_PCD_DataOutStageCallback>
 80071ca:	e01d      	b.n	8007208 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d114      	bne.n	80071fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	4613      	mov	r3, r2
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	440b      	add	r3, r1
 80071e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d108      	bne.n	80071fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6818      	ldr	r0, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80071f4:	461a      	mov	r2, r3
 80071f6:	2100      	movs	r1, #0
 80071f8:	f003 fa2a 	bl	800a650 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f005 fc9a 	bl	800cb3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3720      	adds	r7, #32
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	4f54300a 	.word	0x4f54300a
 8007218:	4f54310a 	.word	0x4f54310a

0800721c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	333c      	adds	r3, #60	@ 0x3c
 8007234:	3304      	adds	r3, #4
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	015a      	lsls	r2, r3, #5
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	4413      	add	r3, r2
 8007242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	4a15      	ldr	r2, [pc, #84]	@ (80072a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d90e      	bls.n	8007270 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007258:	2b00      	cmp	r3, #0
 800725a:	d009      	beq.n	8007270 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007268:	461a      	mov	r2, r3
 800726a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800726e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f005 fc51 	bl	800cb18 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4a0a      	ldr	r2, [pc, #40]	@ (80072a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d90c      	bls.n	8007298 <PCD_EP_OutSetupPacket_int+0x7c>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	799b      	ldrb	r3, [r3, #6]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d108      	bne.n	8007298 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6818      	ldr	r0, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007290:	461a      	mov	r2, r3
 8007292:	2101      	movs	r1, #1
 8007294:	f003 f9dc 	bl	800a650 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	4f54300a 	.word	0x4f54300a

080072a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	460b      	mov	r3, r1
 80072b2:	70fb      	strb	r3, [r7, #3]
 80072b4:	4613      	mov	r3, r2
 80072b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80072c0:	78fb      	ldrb	r3, [r7, #3]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d107      	bne.n	80072d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80072c6:	883b      	ldrh	r3, [r7, #0]
 80072c8:	0419      	lsls	r1, r3, #16
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	430a      	orrs	r2, r1
 80072d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80072d4:	e028      	b.n	8007328 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072dc:	0c1b      	lsrs	r3, r3, #16
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	4413      	add	r3, r2
 80072e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80072e4:	2300      	movs	r3, #0
 80072e6:	73fb      	strb	r3, [r7, #15]
 80072e8:	e00d      	b.n	8007306 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
 80072f0:	3340      	adds	r3, #64	@ 0x40
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	0c1b      	lsrs	r3, r3, #16
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	4413      	add	r3, r2
 80072fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007300:	7bfb      	ldrb	r3, [r7, #15]
 8007302:	3301      	adds	r3, #1
 8007304:	73fb      	strb	r3, [r7, #15]
 8007306:	7bfa      	ldrb	r2, [r7, #15]
 8007308:	78fb      	ldrb	r3, [r7, #3]
 800730a:	3b01      	subs	r3, #1
 800730c:	429a      	cmp	r2, r3
 800730e:	d3ec      	bcc.n	80072ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007310:	883b      	ldrh	r3, [r7, #0]
 8007312:	0418      	lsls	r0, r3, #16
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6819      	ldr	r1, [r3, #0]
 8007318:	78fb      	ldrb	r3, [r7, #3]
 800731a:	3b01      	subs	r3, #1
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	4302      	orrs	r2, r0
 8007320:	3340      	adds	r3, #64	@ 0x40
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	440b      	add	r3, r1
 8007326:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	460b      	mov	r3, r1
 8007340:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	887a      	ldrh	r2, [r7, #2]
 8007348:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	460b      	mov	r3, r1
 8007362:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e267      	b.n	8007852 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d075      	beq.n	800747a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800738e:	4b88      	ldr	r3, [pc, #544]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f003 030c 	and.w	r3, r3, #12
 8007396:	2b04      	cmp	r3, #4
 8007398:	d00c      	beq.n	80073b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800739a:	4b85      	ldr	r3, [pc, #532]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80073a2:	2b08      	cmp	r3, #8
 80073a4:	d112      	bne.n	80073cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073a6:	4b82      	ldr	r3, [pc, #520]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073b2:	d10b      	bne.n	80073cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073b4:	4b7e      	ldr	r3, [pc, #504]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d05b      	beq.n	8007478 <HAL_RCC_OscConfig+0x108>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d157      	bne.n	8007478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e242      	b.n	8007852 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073d4:	d106      	bne.n	80073e4 <HAL_RCC_OscConfig+0x74>
 80073d6:	4b76      	ldr	r3, [pc, #472]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a75      	ldr	r2, [pc, #468]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 80073dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073e0:	6013      	str	r3, [r2, #0]
 80073e2:	e01d      	b.n	8007420 <HAL_RCC_OscConfig+0xb0>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073ec:	d10c      	bne.n	8007408 <HAL_RCC_OscConfig+0x98>
 80073ee:	4b70      	ldr	r3, [pc, #448]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a6f      	ldr	r2, [pc, #444]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 80073f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073f8:	6013      	str	r3, [r2, #0]
 80073fa:	4b6d      	ldr	r3, [pc, #436]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a6c      	ldr	r2, [pc, #432]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 8007400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007404:	6013      	str	r3, [r2, #0]
 8007406:	e00b      	b.n	8007420 <HAL_RCC_OscConfig+0xb0>
 8007408:	4b69      	ldr	r3, [pc, #420]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a68      	ldr	r2, [pc, #416]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 800740e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	4b66      	ldr	r3, [pc, #408]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a65      	ldr	r2, [pc, #404]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 800741a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800741e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d013      	beq.n	8007450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007428:	f7fb fc6a 	bl	8002d00 <HAL_GetTick>
 800742c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800742e:	e008      	b.n	8007442 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007430:	f7fb fc66 	bl	8002d00 <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	2b64      	cmp	r3, #100	@ 0x64
 800743c:	d901      	bls.n	8007442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e207      	b.n	8007852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007442:	4b5b      	ldr	r3, [pc, #364]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d0f0      	beq.n	8007430 <HAL_RCC_OscConfig+0xc0>
 800744e:	e014      	b.n	800747a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007450:	f7fb fc56 	bl	8002d00 <HAL_GetTick>
 8007454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007456:	e008      	b.n	800746a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007458:	f7fb fc52 	bl	8002d00 <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	2b64      	cmp	r3, #100	@ 0x64
 8007464:	d901      	bls.n	800746a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e1f3      	b.n	8007852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800746a:	4b51      	ldr	r3, [pc, #324]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1f0      	bne.n	8007458 <HAL_RCC_OscConfig+0xe8>
 8007476:	e000      	b.n	800747a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d063      	beq.n	800754e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007486:	4b4a      	ldr	r3, [pc, #296]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f003 030c 	and.w	r3, r3, #12
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00b      	beq.n	80074aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007492:	4b47      	ldr	r3, [pc, #284]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800749a:	2b08      	cmp	r3, #8
 800749c:	d11c      	bne.n	80074d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800749e:	4b44      	ldr	r3, [pc, #272]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d116      	bne.n	80074d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074aa:	4b41      	ldr	r3, [pc, #260]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0302 	and.w	r3, r3, #2
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d005      	beq.n	80074c2 <HAL_RCC_OscConfig+0x152>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d001      	beq.n	80074c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e1c7      	b.n	8007852 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074c2:	4b3b      	ldr	r3, [pc, #236]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	00db      	lsls	r3, r3, #3
 80074d0:	4937      	ldr	r1, [pc, #220]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074d6:	e03a      	b.n	800754e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d020      	beq.n	8007522 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074e0:	4b34      	ldr	r3, [pc, #208]	@ (80075b4 <HAL_RCC_OscConfig+0x244>)
 80074e2:	2201      	movs	r2, #1
 80074e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e6:	f7fb fc0b 	bl	8002d00 <HAL_GetTick>
 80074ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074ec:	e008      	b.n	8007500 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074ee:	f7fb fc07 	bl	8002d00 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d901      	bls.n	8007500 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e1a8      	b.n	8007852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007500:	4b2b      	ldr	r3, [pc, #172]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d0f0      	beq.n	80074ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800750c:	4b28      	ldr	r3, [pc, #160]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	00db      	lsls	r3, r3, #3
 800751a:	4925      	ldr	r1, [pc, #148]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 800751c:	4313      	orrs	r3, r2
 800751e:	600b      	str	r3, [r1, #0]
 8007520:	e015      	b.n	800754e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007522:	4b24      	ldr	r3, [pc, #144]	@ (80075b4 <HAL_RCC_OscConfig+0x244>)
 8007524:	2200      	movs	r2, #0
 8007526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007528:	f7fb fbea 	bl	8002d00 <HAL_GetTick>
 800752c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800752e:	e008      	b.n	8007542 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007530:	f7fb fbe6 	bl	8002d00 <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	2b02      	cmp	r3, #2
 800753c:	d901      	bls.n	8007542 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e187      	b.n	8007852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007542:	4b1b      	ldr	r3, [pc, #108]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0302 	and.w	r3, r3, #2
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1f0      	bne.n	8007530 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0308 	and.w	r3, r3, #8
 8007556:	2b00      	cmp	r3, #0
 8007558:	d036      	beq.n	80075c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d016      	beq.n	8007590 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007562:	4b15      	ldr	r3, [pc, #84]	@ (80075b8 <HAL_RCC_OscConfig+0x248>)
 8007564:	2201      	movs	r2, #1
 8007566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007568:	f7fb fbca 	bl	8002d00 <HAL_GetTick>
 800756c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800756e:	e008      	b.n	8007582 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007570:	f7fb fbc6 	bl	8002d00 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	2b02      	cmp	r3, #2
 800757c:	d901      	bls.n	8007582 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e167      	b.n	8007852 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007582:	4b0b      	ldr	r3, [pc, #44]	@ (80075b0 <HAL_RCC_OscConfig+0x240>)
 8007584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007586:	f003 0302 	and.w	r3, r3, #2
 800758a:	2b00      	cmp	r3, #0
 800758c:	d0f0      	beq.n	8007570 <HAL_RCC_OscConfig+0x200>
 800758e:	e01b      	b.n	80075c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007590:	4b09      	ldr	r3, [pc, #36]	@ (80075b8 <HAL_RCC_OscConfig+0x248>)
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007596:	f7fb fbb3 	bl	8002d00 <HAL_GetTick>
 800759a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800759c:	e00e      	b.n	80075bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800759e:	f7fb fbaf 	bl	8002d00 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d907      	bls.n	80075bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e150      	b.n	8007852 <HAL_RCC_OscConfig+0x4e2>
 80075b0:	40023800 	.word	0x40023800
 80075b4:	42470000 	.word	0x42470000
 80075b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075bc:	4b88      	ldr	r3, [pc, #544]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 80075be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1ea      	bne.n	800759e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0304 	and.w	r3, r3, #4
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 8097 	beq.w	8007704 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075d6:	2300      	movs	r3, #0
 80075d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075da:	4b81      	ldr	r3, [pc, #516]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 80075dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10f      	bne.n	8007606 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075e6:	2300      	movs	r3, #0
 80075e8:	60bb      	str	r3, [r7, #8]
 80075ea:	4b7d      	ldr	r3, [pc, #500]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 80075ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ee:	4a7c      	ldr	r2, [pc, #496]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 80075f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80075f6:	4b7a      	ldr	r3, [pc, #488]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 80075f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075fe:	60bb      	str	r3, [r7, #8]
 8007600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007602:	2301      	movs	r3, #1
 8007604:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007606:	4b77      	ldr	r3, [pc, #476]	@ (80077e4 <HAL_RCC_OscConfig+0x474>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800760e:	2b00      	cmp	r3, #0
 8007610:	d118      	bne.n	8007644 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007612:	4b74      	ldr	r3, [pc, #464]	@ (80077e4 <HAL_RCC_OscConfig+0x474>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a73      	ldr	r2, [pc, #460]	@ (80077e4 <HAL_RCC_OscConfig+0x474>)
 8007618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800761c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800761e:	f7fb fb6f 	bl	8002d00 <HAL_GetTick>
 8007622:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007624:	e008      	b.n	8007638 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007626:	f7fb fb6b 	bl	8002d00 <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	2b02      	cmp	r3, #2
 8007632:	d901      	bls.n	8007638 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e10c      	b.n	8007852 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007638:	4b6a      	ldr	r3, [pc, #424]	@ (80077e4 <HAL_RCC_OscConfig+0x474>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007640:	2b00      	cmp	r3, #0
 8007642:	d0f0      	beq.n	8007626 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d106      	bne.n	800765a <HAL_RCC_OscConfig+0x2ea>
 800764c:	4b64      	ldr	r3, [pc, #400]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 800764e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007650:	4a63      	ldr	r2, [pc, #396]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 8007652:	f043 0301 	orr.w	r3, r3, #1
 8007656:	6713      	str	r3, [r2, #112]	@ 0x70
 8007658:	e01c      	b.n	8007694 <HAL_RCC_OscConfig+0x324>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	2b05      	cmp	r3, #5
 8007660:	d10c      	bne.n	800767c <HAL_RCC_OscConfig+0x30c>
 8007662:	4b5f      	ldr	r3, [pc, #380]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 8007664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007666:	4a5e      	ldr	r2, [pc, #376]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 8007668:	f043 0304 	orr.w	r3, r3, #4
 800766c:	6713      	str	r3, [r2, #112]	@ 0x70
 800766e:	4b5c      	ldr	r3, [pc, #368]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 8007670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007672:	4a5b      	ldr	r2, [pc, #364]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 8007674:	f043 0301 	orr.w	r3, r3, #1
 8007678:	6713      	str	r3, [r2, #112]	@ 0x70
 800767a:	e00b      	b.n	8007694 <HAL_RCC_OscConfig+0x324>
 800767c:	4b58      	ldr	r3, [pc, #352]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 800767e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007680:	4a57      	ldr	r2, [pc, #348]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 8007682:	f023 0301 	bic.w	r3, r3, #1
 8007686:	6713      	str	r3, [r2, #112]	@ 0x70
 8007688:	4b55      	ldr	r3, [pc, #340]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 800768a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800768c:	4a54      	ldr	r2, [pc, #336]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 800768e:	f023 0304 	bic.w	r3, r3, #4
 8007692:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d015      	beq.n	80076c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800769c:	f7fb fb30 	bl	8002d00 <HAL_GetTick>
 80076a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076a2:	e00a      	b.n	80076ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076a4:	f7fb fb2c 	bl	8002d00 <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d901      	bls.n	80076ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e0cb      	b.n	8007852 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076ba:	4b49      	ldr	r3, [pc, #292]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 80076bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d0ee      	beq.n	80076a4 <HAL_RCC_OscConfig+0x334>
 80076c6:	e014      	b.n	80076f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076c8:	f7fb fb1a 	bl	8002d00 <HAL_GetTick>
 80076cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076ce:	e00a      	b.n	80076e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076d0:	f7fb fb16 	bl	8002d00 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076de:	4293      	cmp	r3, r2
 80076e0:	d901      	bls.n	80076e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e0b5      	b.n	8007852 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076e6:	4b3e      	ldr	r3, [pc, #248]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 80076e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076ea:	f003 0302 	and.w	r3, r3, #2
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1ee      	bne.n	80076d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80076f2:	7dfb      	ldrb	r3, [r7, #23]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d105      	bne.n	8007704 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076f8:	4b39      	ldr	r3, [pc, #228]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 80076fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076fc:	4a38      	ldr	r2, [pc, #224]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 80076fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007702:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 80a1 	beq.w	8007850 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800770e:	4b34      	ldr	r3, [pc, #208]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f003 030c 	and.w	r3, r3, #12
 8007716:	2b08      	cmp	r3, #8
 8007718:	d05c      	beq.n	80077d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	2b02      	cmp	r3, #2
 8007720:	d141      	bne.n	80077a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007722:	4b31      	ldr	r3, [pc, #196]	@ (80077e8 <HAL_RCC_OscConfig+0x478>)
 8007724:	2200      	movs	r2, #0
 8007726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007728:	f7fb faea 	bl	8002d00 <HAL_GetTick>
 800772c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800772e:	e008      	b.n	8007742 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007730:	f7fb fae6 	bl	8002d00 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	2b02      	cmp	r3, #2
 800773c:	d901      	bls.n	8007742 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e087      	b.n	8007852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007742:	4b27      	ldr	r3, [pc, #156]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1f0      	bne.n	8007730 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	69da      	ldr	r2, [r3, #28]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	431a      	orrs	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775c:	019b      	lsls	r3, r3, #6
 800775e:	431a      	orrs	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007764:	085b      	lsrs	r3, r3, #1
 8007766:	3b01      	subs	r3, #1
 8007768:	041b      	lsls	r3, r3, #16
 800776a:	431a      	orrs	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007770:	061b      	lsls	r3, r3, #24
 8007772:	491b      	ldr	r1, [pc, #108]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 8007774:	4313      	orrs	r3, r2
 8007776:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007778:	4b1b      	ldr	r3, [pc, #108]	@ (80077e8 <HAL_RCC_OscConfig+0x478>)
 800777a:	2201      	movs	r2, #1
 800777c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800777e:	f7fb fabf 	bl	8002d00 <HAL_GetTick>
 8007782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007784:	e008      	b.n	8007798 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007786:	f7fb fabb 	bl	8002d00 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b02      	cmp	r3, #2
 8007792:	d901      	bls.n	8007798 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e05c      	b.n	8007852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007798:	4b11      	ldr	r3, [pc, #68]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d0f0      	beq.n	8007786 <HAL_RCC_OscConfig+0x416>
 80077a4:	e054      	b.n	8007850 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077a6:	4b10      	ldr	r3, [pc, #64]	@ (80077e8 <HAL_RCC_OscConfig+0x478>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077ac:	f7fb faa8 	bl	8002d00 <HAL_GetTick>
 80077b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077b2:	e008      	b.n	80077c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077b4:	f7fb faa4 	bl	8002d00 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d901      	bls.n	80077c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e045      	b.n	8007852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077c6:	4b06      	ldr	r3, [pc, #24]	@ (80077e0 <HAL_RCC_OscConfig+0x470>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1f0      	bne.n	80077b4 <HAL_RCC_OscConfig+0x444>
 80077d2:	e03d      	b.n	8007850 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d107      	bne.n	80077ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e038      	b.n	8007852 <HAL_RCC_OscConfig+0x4e2>
 80077e0:	40023800 	.word	0x40023800
 80077e4:	40007000 	.word	0x40007000
 80077e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80077ec:	4b1b      	ldr	r3, [pc, #108]	@ (800785c <HAL_RCC_OscConfig+0x4ec>)
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d028      	beq.n	800784c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007804:	429a      	cmp	r2, r3
 8007806:	d121      	bne.n	800784c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007812:	429a      	cmp	r2, r3
 8007814:	d11a      	bne.n	800784c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800781c:	4013      	ands	r3, r2
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007822:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007824:	4293      	cmp	r3, r2
 8007826:	d111      	bne.n	800784c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007832:	085b      	lsrs	r3, r3, #1
 8007834:	3b01      	subs	r3, #1
 8007836:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007838:	429a      	cmp	r2, r3
 800783a:	d107      	bne.n	800784c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007846:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007848:	429a      	cmp	r2, r3
 800784a:	d001      	beq.n	8007850 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	e000      	b.n	8007852 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	40023800 	.word	0x40023800

08007860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e0cc      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007874:	4b68      	ldr	r3, [pc, #416]	@ (8007a18 <HAL_RCC_ClockConfig+0x1b8>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0307 	and.w	r3, r3, #7
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	429a      	cmp	r2, r3
 8007880:	d90c      	bls.n	800789c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007882:	4b65      	ldr	r3, [pc, #404]	@ (8007a18 <HAL_RCC_ClockConfig+0x1b8>)
 8007884:	683a      	ldr	r2, [r7, #0]
 8007886:	b2d2      	uxtb	r2, r2
 8007888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800788a:	4b63      	ldr	r3, [pc, #396]	@ (8007a18 <HAL_RCC_ClockConfig+0x1b8>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0307 	and.w	r3, r3, #7
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	429a      	cmp	r2, r3
 8007896:	d001      	beq.n	800789c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e0b8      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d020      	beq.n	80078ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 0304 	and.w	r3, r3, #4
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d005      	beq.n	80078c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078b4:	4b59      	ldr	r3, [pc, #356]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	4a58      	ldr	r2, [pc, #352]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80078ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80078be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0308 	and.w	r3, r3, #8
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d005      	beq.n	80078d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078cc:	4b53      	ldr	r3, [pc, #332]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	4a52      	ldr	r2, [pc, #328]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80078d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80078d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078d8:	4b50      	ldr	r3, [pc, #320]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	494d      	ldr	r1, [pc, #308]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d044      	beq.n	8007980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d107      	bne.n	800790e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078fe:	4b47      	ldr	r3, [pc, #284]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d119      	bne.n	800793e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e07f      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	2b02      	cmp	r3, #2
 8007914:	d003      	beq.n	800791e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800791a:	2b03      	cmp	r3, #3
 800791c:	d107      	bne.n	800792e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800791e:	4b3f      	ldr	r3, [pc, #252]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d109      	bne.n	800793e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e06f      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800792e:	4b3b      	ldr	r3, [pc, #236]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0302 	and.w	r3, r3, #2
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e067      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800793e:	4b37      	ldr	r3, [pc, #220]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f023 0203 	bic.w	r2, r3, #3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	4934      	ldr	r1, [pc, #208]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 800794c:	4313      	orrs	r3, r2
 800794e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007950:	f7fb f9d6 	bl	8002d00 <HAL_GetTick>
 8007954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007956:	e00a      	b.n	800796e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007958:	f7fb f9d2 	bl	8002d00 <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007966:	4293      	cmp	r3, r2
 8007968:	d901      	bls.n	800796e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e04f      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800796e:	4b2b      	ldr	r3, [pc, #172]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f003 020c 	and.w	r2, r3, #12
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	429a      	cmp	r2, r3
 800797e:	d1eb      	bne.n	8007958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007980:	4b25      	ldr	r3, [pc, #148]	@ (8007a18 <HAL_RCC_ClockConfig+0x1b8>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0307 	and.w	r3, r3, #7
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	429a      	cmp	r2, r3
 800798c:	d20c      	bcs.n	80079a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800798e:	4b22      	ldr	r3, [pc, #136]	@ (8007a18 <HAL_RCC_ClockConfig+0x1b8>)
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	b2d2      	uxtb	r2, r2
 8007994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007996:	4b20      	ldr	r3, [pc, #128]	@ (8007a18 <HAL_RCC_ClockConfig+0x1b8>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 0307 	and.w	r3, r3, #7
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d001      	beq.n	80079a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e032      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0304 	and.w	r3, r3, #4
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d008      	beq.n	80079c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079b4:	4b19      	ldr	r3, [pc, #100]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	4916      	ldr	r1, [pc, #88]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0308 	and.w	r3, r3, #8
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d009      	beq.n	80079e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079d2:	4b12      	ldr	r3, [pc, #72]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	490e      	ldr	r1, [pc, #56]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80079e6:	f000 f821 	bl	8007a2c <HAL_RCC_GetSysClockFreq>
 80079ea:	4602      	mov	r2, r0
 80079ec:	4b0b      	ldr	r3, [pc, #44]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	091b      	lsrs	r3, r3, #4
 80079f2:	f003 030f 	and.w	r3, r3, #15
 80079f6:	490a      	ldr	r1, [pc, #40]	@ (8007a20 <HAL_RCC_ClockConfig+0x1c0>)
 80079f8:	5ccb      	ldrb	r3, [r1, r3]
 80079fa:	fa22 f303 	lsr.w	r3, r2, r3
 80079fe:	4a09      	ldr	r2, [pc, #36]	@ (8007a24 <HAL_RCC_ClockConfig+0x1c4>)
 8007a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007a02:	4b09      	ldr	r3, [pc, #36]	@ (8007a28 <HAL_RCC_ClockConfig+0x1c8>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fb f936 	bl	8002c78 <HAL_InitTick>

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	40023c00 	.word	0x40023c00
 8007a1c:	40023800 	.word	0x40023800
 8007a20:	080109e4 	.word	0x080109e4
 8007a24:	20000004 	.word	0x20000004
 8007a28:	20000008 	.word	0x20000008

08007a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a30:	b094      	sub	sp, #80	@ 0x50
 8007a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007a40:	2300      	movs	r3, #0
 8007a42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a44:	4b79      	ldr	r3, [pc, #484]	@ (8007c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f003 030c 	and.w	r3, r3, #12
 8007a4c:	2b08      	cmp	r3, #8
 8007a4e:	d00d      	beq.n	8007a6c <HAL_RCC_GetSysClockFreq+0x40>
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	f200 80e1 	bhi.w	8007c18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d002      	beq.n	8007a60 <HAL_RCC_GetSysClockFreq+0x34>
 8007a5a:	2b04      	cmp	r3, #4
 8007a5c:	d003      	beq.n	8007a66 <HAL_RCC_GetSysClockFreq+0x3a>
 8007a5e:	e0db      	b.n	8007c18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a60:	4b73      	ldr	r3, [pc, #460]	@ (8007c30 <HAL_RCC_GetSysClockFreq+0x204>)
 8007a62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007a64:	e0db      	b.n	8007c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a66:	4b73      	ldr	r3, [pc, #460]	@ (8007c34 <HAL_RCC_GetSysClockFreq+0x208>)
 8007a68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007a6a:	e0d8      	b.n	8007c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8007c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a74:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a76:	4b6d      	ldr	r3, [pc, #436]	@ (8007c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d063      	beq.n	8007b4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a82:	4b6a      	ldr	r3, [pc, #424]	@ (8007c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	099b      	lsrs	r3, r3, #6
 8007a88:	2200      	movs	r2, #0
 8007a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a94:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a96:	2300      	movs	r3, #0
 8007a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007a9e:	4622      	mov	r2, r4
 8007aa0:	462b      	mov	r3, r5
 8007aa2:	f04f 0000 	mov.w	r0, #0
 8007aa6:	f04f 0100 	mov.w	r1, #0
 8007aaa:	0159      	lsls	r1, r3, #5
 8007aac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ab0:	0150      	lsls	r0, r2, #5
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	1a51      	subs	r1, r2, r1
 8007aba:	6139      	str	r1, [r7, #16]
 8007abc:	4629      	mov	r1, r5
 8007abe:	eb63 0301 	sbc.w	r3, r3, r1
 8007ac2:	617b      	str	r3, [r7, #20]
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	f04f 0300 	mov.w	r3, #0
 8007acc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ad0:	4659      	mov	r1, fp
 8007ad2:	018b      	lsls	r3, r1, #6
 8007ad4:	4651      	mov	r1, sl
 8007ad6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007ada:	4651      	mov	r1, sl
 8007adc:	018a      	lsls	r2, r1, #6
 8007ade:	4651      	mov	r1, sl
 8007ae0:	ebb2 0801 	subs.w	r8, r2, r1
 8007ae4:	4659      	mov	r1, fp
 8007ae6:	eb63 0901 	sbc.w	r9, r3, r1
 8007aea:	f04f 0200 	mov.w	r2, #0
 8007aee:	f04f 0300 	mov.w	r3, #0
 8007af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007afe:	4690      	mov	r8, r2
 8007b00:	4699      	mov	r9, r3
 8007b02:	4623      	mov	r3, r4
 8007b04:	eb18 0303 	adds.w	r3, r8, r3
 8007b08:	60bb      	str	r3, [r7, #8]
 8007b0a:	462b      	mov	r3, r5
 8007b0c:	eb49 0303 	adc.w	r3, r9, r3
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	f04f 0200 	mov.w	r2, #0
 8007b16:	f04f 0300 	mov.w	r3, #0
 8007b1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007b1e:	4629      	mov	r1, r5
 8007b20:	024b      	lsls	r3, r1, #9
 8007b22:	4621      	mov	r1, r4
 8007b24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007b28:	4621      	mov	r1, r4
 8007b2a:	024a      	lsls	r2, r1, #9
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b32:	2200      	movs	r2, #0
 8007b34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b3c:	f7f9 f8a4 	bl	8000c88 <__aeabi_uldivmod>
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	4613      	mov	r3, r2
 8007b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b48:	e058      	b.n	8007bfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b4a:	4b38      	ldr	r3, [pc, #224]	@ (8007c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	099b      	lsrs	r3, r3, #6
 8007b50:	2200      	movs	r2, #0
 8007b52:	4618      	mov	r0, r3
 8007b54:	4611      	mov	r1, r2
 8007b56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007b5a:	623b      	str	r3, [r7, #32]
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007b64:	4642      	mov	r2, r8
 8007b66:	464b      	mov	r3, r9
 8007b68:	f04f 0000 	mov.w	r0, #0
 8007b6c:	f04f 0100 	mov.w	r1, #0
 8007b70:	0159      	lsls	r1, r3, #5
 8007b72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b76:	0150      	lsls	r0, r2, #5
 8007b78:	4602      	mov	r2, r0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	4641      	mov	r1, r8
 8007b7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007b82:	4649      	mov	r1, r9
 8007b84:	eb63 0b01 	sbc.w	fp, r3, r1
 8007b88:	f04f 0200 	mov.w	r2, #0
 8007b8c:	f04f 0300 	mov.w	r3, #0
 8007b90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007b94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007b98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007b9c:	ebb2 040a 	subs.w	r4, r2, sl
 8007ba0:	eb63 050b 	sbc.w	r5, r3, fp
 8007ba4:	f04f 0200 	mov.w	r2, #0
 8007ba8:	f04f 0300 	mov.w	r3, #0
 8007bac:	00eb      	lsls	r3, r5, #3
 8007bae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bb2:	00e2      	lsls	r2, r4, #3
 8007bb4:	4614      	mov	r4, r2
 8007bb6:	461d      	mov	r5, r3
 8007bb8:	4643      	mov	r3, r8
 8007bba:	18e3      	adds	r3, r4, r3
 8007bbc:	603b      	str	r3, [r7, #0]
 8007bbe:	464b      	mov	r3, r9
 8007bc0:	eb45 0303 	adc.w	r3, r5, r3
 8007bc4:	607b      	str	r3, [r7, #4]
 8007bc6:	f04f 0200 	mov.w	r2, #0
 8007bca:	f04f 0300 	mov.w	r3, #0
 8007bce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007bd2:	4629      	mov	r1, r5
 8007bd4:	028b      	lsls	r3, r1, #10
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007bdc:	4621      	mov	r1, r4
 8007bde:	028a      	lsls	r2, r1, #10
 8007be0:	4610      	mov	r0, r2
 8007be2:	4619      	mov	r1, r3
 8007be4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007be6:	2200      	movs	r2, #0
 8007be8:	61bb      	str	r3, [r7, #24]
 8007bea:	61fa      	str	r2, [r7, #28]
 8007bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bf0:	f7f9 f84a 	bl	8000c88 <__aeabi_uldivmod>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8007c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	0c1b      	lsrs	r3, r3, #16
 8007c02:	f003 0303 	and.w	r3, r3, #3
 8007c06:	3301      	adds	r3, #1
 8007c08:	005b      	lsls	r3, r3, #1
 8007c0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007c0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007c16:	e002      	b.n	8007c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c18:	4b05      	ldr	r3, [pc, #20]	@ (8007c30 <HAL_RCC_GetSysClockFreq+0x204>)
 8007c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3750      	adds	r7, #80	@ 0x50
 8007c24:	46bd      	mov	sp, r7
 8007c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c2a:	bf00      	nop
 8007c2c:	40023800 	.word	0x40023800
 8007c30:	00f42400 	.word	0x00f42400
 8007c34:	007a1200 	.word	0x007a1200

08007c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c3c:	4b03      	ldr	r3, [pc, #12]	@ (8007c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	20000004 	.word	0x20000004

08007c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007c54:	f7ff fff0 	bl	8007c38 <HAL_RCC_GetHCLKFreq>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	4b05      	ldr	r3, [pc, #20]	@ (8007c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	0a9b      	lsrs	r3, r3, #10
 8007c60:	f003 0307 	and.w	r3, r3, #7
 8007c64:	4903      	ldr	r1, [pc, #12]	@ (8007c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c66:	5ccb      	ldrb	r3, [r1, r3]
 8007c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	40023800 	.word	0x40023800
 8007c74:	080109f4 	.word	0x080109f4

08007c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007c7c:	f7ff ffdc 	bl	8007c38 <HAL_RCC_GetHCLKFreq>
 8007c80:	4602      	mov	r2, r0
 8007c82:	4b05      	ldr	r3, [pc, #20]	@ (8007c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	0b5b      	lsrs	r3, r3, #13
 8007c88:	f003 0307 	and.w	r3, r3, #7
 8007c8c:	4903      	ldr	r1, [pc, #12]	@ (8007c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c8e:	5ccb      	ldrb	r3, [r1, r3]
 8007c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	40023800 	.word	0x40023800
 8007c9c:	080109f4 	.word	0x080109f4

08007ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d105      	bne.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d035      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007cc8:	4b62      	ldr	r3, [pc, #392]	@ (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007cce:	f7fb f817 	bl	8002d00 <HAL_GetTick>
 8007cd2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cd4:	e008      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007cd6:	f7fb f813 	bl	8002d00 <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d901      	bls.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e0b0      	b.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ce8:	4b5b      	ldr	r3, [pc, #364]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1f0      	bne.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	019a      	lsls	r2, r3, #6
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	071b      	lsls	r3, r3, #28
 8007d00:	4955      	ldr	r1, [pc, #340]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007d08:	4b52      	ldr	r3, [pc, #328]	@ (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d0e:	f7fa fff7 	bl	8002d00 <HAL_GetTick>
 8007d12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d14:	e008      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d16:	f7fa fff3 	bl	8002d00 <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d901      	bls.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e090      	b.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d28:	4b4b      	ldr	r3, [pc, #300]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d0f0      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0302 	and.w	r3, r3, #2
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 8083 	beq.w	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d42:	2300      	movs	r3, #0
 8007d44:	60fb      	str	r3, [r7, #12]
 8007d46:	4b44      	ldr	r3, [pc, #272]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d4a:	4a43      	ldr	r2, [pc, #268]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8007d52:	4b41      	ldr	r3, [pc, #260]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a3e      	ldr	r2, [pc, #248]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d68:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d6a:	f7fa ffc9 	bl	8002d00 <HAL_GetTick>
 8007d6e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007d70:	e008      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d72:	f7fa ffc5 	bl	8002d00 <HAL_GetTick>
 8007d76:	4602      	mov	r2, r0
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d901      	bls.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e062      	b.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007d84:	4b35      	ldr	r3, [pc, #212]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d0f0      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d90:	4b31      	ldr	r3, [pc, #196]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d98:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d02f      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d028      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007dae:	4b2a      	ldr	r3, [pc, #168]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007db2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007db6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007db8:	4b29      	ldr	r3, [pc, #164]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007dba:	2201      	movs	r2, #1
 8007dbc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007dbe:	4b28      	ldr	r3, [pc, #160]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007dc4:	4a24      	ldr	r2, [pc, #144]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007dca:	4b23      	ldr	r3, [pc, #140]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d114      	bne.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007dd6:	f7fa ff93 	bl	8002d00 <HAL_GetTick>
 8007dda:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ddc:	e00a      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dde:	f7fa ff8f 	bl	8002d00 <HAL_GetTick>
 8007de2:	4602      	mov	r2, r0
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d901      	bls.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e02a      	b.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007df4:	4b18      	ldr	r3, [pc, #96]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d0ee      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e0c:	d10d      	bne.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007e0e:	4b12      	ldr	r3, [pc, #72]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007e1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e22:	490d      	ldr	r1, [pc, #52]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e24:	4313      	orrs	r3, r2
 8007e26:	608b      	str	r3, [r1, #8]
 8007e28:	e005      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e30:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007e34:	6093      	str	r3, [r2, #8]
 8007e36:	4b08      	ldr	r3, [pc, #32]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e38:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e42:	4905      	ldr	r1, [pc, #20]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3718      	adds	r7, #24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	42470068 	.word	0x42470068
 8007e58:	40023800 	.word	0x40023800
 8007e5c:	40007000 	.word	0x40007000
 8007e60:	42470e40 	.word	0x42470e40

08007e64 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007e74:	2300      	movs	r3, #0
 8007e76:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d13f      	bne.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007e82:	4b24      	ldr	r3, [pc, #144]	@ (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d006      	beq.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e98:	d12f      	bne.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007e9c:	617b      	str	r3, [r7, #20]
          break;
 8007e9e:	e02f      	b.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ea8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007eac:	d108      	bne.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007eae:	4b19      	ldr	r3, [pc, #100]	@ (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007eb6:	4a19      	ldr	r2, [pc, #100]	@ (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ebc:	613b      	str	r3, [r7, #16]
 8007ebe:	e007      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007ec0:	4b14      	ldr	r3, [pc, #80]	@ (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ec8:	4a15      	ldr	r2, [pc, #84]	@ (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ece:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007ed0:	4b10      	ldr	r3, [pc, #64]	@ (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ed6:	099b      	lsrs	r3, r3, #6
 8007ed8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	fb02 f303 	mul.w	r3, r2, r3
 8007ee2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007eea:	0f1b      	lsrs	r3, r3, #28
 8007eec:	f003 0307 	and.w	r3, r3, #7
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef6:	617b      	str	r3, [r7, #20]
          break;
 8007ef8:	e002      	b.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	617b      	str	r3, [r7, #20]
          break;
 8007efe:	bf00      	nop
        }
      }
      break;
 8007f00:	e000      	b.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8007f02:	bf00      	nop
    }
  }
  return frequency;
 8007f04:	697b      	ldr	r3, [r7, #20]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	371c      	adds	r7, #28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	40023800 	.word	0x40023800
 8007f18:	00bb8000 	.word	0x00bb8000
 8007f1c:	007a1200 	.word	0x007a1200
 8007f20:	00f42400 	.word	0x00f42400

08007f24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e07b      	b.n	800802e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d108      	bne.n	8007f50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f46:	d009      	beq.n	8007f5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	61da      	str	r2, [r3, #28]
 8007f4e:	e005      	b.n	8007f5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d106      	bne.n	8007f7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7fa fc1c 	bl	80027b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007fa4:	431a      	orrs	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	f003 0302 	and.w	r3, r3, #2
 8007fb8:	431a      	orrs	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	695b      	ldr	r3, [r3, #20]
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007fcc:	431a      	orrs	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	69db      	ldr	r3, [r3, #28]
 8007fd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a1b      	ldr	r3, [r3, #32]
 8007fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fe0:	ea42 0103 	orr.w	r1, r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	0c1b      	lsrs	r3, r3, #16
 8007ffa:	f003 0104 	and.w	r1, r3, #4
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008002:	f003 0210 	and.w	r2, r3, #16
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	69da      	ldr	r2, [r3, #28]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800801c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e041      	b.n	80080cc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b00      	cmp	r3, #0
 8008052:	d106      	bne.n	8008062 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7fa fbf1 	bl	8002844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2202      	movs	r2, #2
 8008066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3304      	adds	r3, #4
 8008072:	4619      	mov	r1, r3
 8008074:	4610      	mov	r0, r2
 8008076:	f000 f9ab 	bl	80083d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2201      	movs	r2, #1
 80080c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e041      	b.n	800816a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d106      	bne.n	8008100 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f839 	bl	8008172 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2202      	movs	r2, #2
 8008104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3304      	adds	r3, #4
 8008110:	4619      	mov	r1, r3
 8008112:	4610      	mov	r0, r2
 8008114:	f000 f95c 	bl	80083d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008172:	b480      	push	{r7}
 8008174:	b083      	sub	sp, #12
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800817a:	bf00      	nop
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
	...

08008188 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008194:	2300      	movs	r3, #0
 8008196:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d101      	bne.n	80081a6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80081a2:	2302      	movs	r3, #2
 80081a4:	e048      	b.n	8008238 <HAL_TIM_OC_ConfigChannel+0xb0>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b0c      	cmp	r3, #12
 80081b2:	d839      	bhi.n	8008228 <HAL_TIM_OC_ConfigChannel+0xa0>
 80081b4:	a201      	add	r2, pc, #4	@ (adr r2, 80081bc <HAL_TIM_OC_ConfigChannel+0x34>)
 80081b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ba:	bf00      	nop
 80081bc:	080081f1 	.word	0x080081f1
 80081c0:	08008229 	.word	0x08008229
 80081c4:	08008229 	.word	0x08008229
 80081c8:	08008229 	.word	0x08008229
 80081cc:	080081ff 	.word	0x080081ff
 80081d0:	08008229 	.word	0x08008229
 80081d4:	08008229 	.word	0x08008229
 80081d8:	08008229 	.word	0x08008229
 80081dc:	0800820d 	.word	0x0800820d
 80081e0:	08008229 	.word	0x08008229
 80081e4:	08008229 	.word	0x08008229
 80081e8:	08008229 	.word	0x08008229
 80081ec:	0800821b 	.word	0x0800821b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68b9      	ldr	r1, [r7, #8]
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 f996 	bl	8008528 <TIM_OC1_SetConfig>
      break;
 80081fc:	e017      	b.n	800822e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68b9      	ldr	r1, [r7, #8]
 8008204:	4618      	mov	r0, r3
 8008206:	f000 f9ff 	bl	8008608 <TIM_OC2_SetConfig>
      break;
 800820a:	e010      	b.n	800822e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68b9      	ldr	r1, [r7, #8]
 8008212:	4618      	mov	r0, r3
 8008214:	f000 fa6e 	bl	80086f4 <TIM_OC3_SetConfig>
      break;
 8008218:	e009      	b.n	800822e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68b9      	ldr	r1, [r7, #8]
 8008220:	4618      	mov	r0, r3
 8008222:	f000 fadb 	bl	80087dc <TIM_OC4_SetConfig>
      break;
 8008226:	e002      	b.n	800822e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	75fb      	strb	r3, [r7, #23]
      break;
 800822c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008236:	7dfb      	ldrb	r3, [r7, #23]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3718      	adds	r7, #24
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008254:	2b01      	cmp	r3, #1
 8008256:	d101      	bne.n	800825c <HAL_TIM_ConfigClockSource+0x1c>
 8008258:	2302      	movs	r3, #2
 800825a:	e0b4      	b.n	80083c6 <HAL_TIM_ConfigClockSource+0x186>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2202      	movs	r2, #2
 8008268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800827a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008282:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008294:	d03e      	beq.n	8008314 <HAL_TIM_ConfigClockSource+0xd4>
 8008296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800829a:	f200 8087 	bhi.w	80083ac <HAL_TIM_ConfigClockSource+0x16c>
 800829e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082a2:	f000 8086 	beq.w	80083b2 <HAL_TIM_ConfigClockSource+0x172>
 80082a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082aa:	d87f      	bhi.n	80083ac <HAL_TIM_ConfigClockSource+0x16c>
 80082ac:	2b70      	cmp	r3, #112	@ 0x70
 80082ae:	d01a      	beq.n	80082e6 <HAL_TIM_ConfigClockSource+0xa6>
 80082b0:	2b70      	cmp	r3, #112	@ 0x70
 80082b2:	d87b      	bhi.n	80083ac <HAL_TIM_ConfigClockSource+0x16c>
 80082b4:	2b60      	cmp	r3, #96	@ 0x60
 80082b6:	d050      	beq.n	800835a <HAL_TIM_ConfigClockSource+0x11a>
 80082b8:	2b60      	cmp	r3, #96	@ 0x60
 80082ba:	d877      	bhi.n	80083ac <HAL_TIM_ConfigClockSource+0x16c>
 80082bc:	2b50      	cmp	r3, #80	@ 0x50
 80082be:	d03c      	beq.n	800833a <HAL_TIM_ConfigClockSource+0xfa>
 80082c0:	2b50      	cmp	r3, #80	@ 0x50
 80082c2:	d873      	bhi.n	80083ac <HAL_TIM_ConfigClockSource+0x16c>
 80082c4:	2b40      	cmp	r3, #64	@ 0x40
 80082c6:	d058      	beq.n	800837a <HAL_TIM_ConfigClockSource+0x13a>
 80082c8:	2b40      	cmp	r3, #64	@ 0x40
 80082ca:	d86f      	bhi.n	80083ac <HAL_TIM_ConfigClockSource+0x16c>
 80082cc:	2b30      	cmp	r3, #48	@ 0x30
 80082ce:	d064      	beq.n	800839a <HAL_TIM_ConfigClockSource+0x15a>
 80082d0:	2b30      	cmp	r3, #48	@ 0x30
 80082d2:	d86b      	bhi.n	80083ac <HAL_TIM_ConfigClockSource+0x16c>
 80082d4:	2b20      	cmp	r3, #32
 80082d6:	d060      	beq.n	800839a <HAL_TIM_ConfigClockSource+0x15a>
 80082d8:	2b20      	cmp	r3, #32
 80082da:	d867      	bhi.n	80083ac <HAL_TIM_ConfigClockSource+0x16c>
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d05c      	beq.n	800839a <HAL_TIM_ConfigClockSource+0x15a>
 80082e0:	2b10      	cmp	r3, #16
 80082e2:	d05a      	beq.n	800839a <HAL_TIM_ConfigClockSource+0x15a>
 80082e4:	e062      	b.n	80083ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80082f6:	f000 fb41 	bl	800897c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008308:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	609a      	str	r2, [r3, #8]
      break;
 8008312:	e04f      	b.n	80083b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008324:	f000 fb2a 	bl	800897c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689a      	ldr	r2, [r3, #8]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008336:	609a      	str	r2, [r3, #8]
      break;
 8008338:	e03c      	b.n	80083b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008346:	461a      	mov	r2, r3
 8008348:	f000 fa9e 	bl	8008888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2150      	movs	r1, #80	@ 0x50
 8008352:	4618      	mov	r0, r3
 8008354:	f000 faf7 	bl	8008946 <TIM_ITRx_SetConfig>
      break;
 8008358:	e02c      	b.n	80083b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008366:	461a      	mov	r2, r3
 8008368:	f000 fabd 	bl	80088e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2160      	movs	r1, #96	@ 0x60
 8008372:	4618      	mov	r0, r3
 8008374:	f000 fae7 	bl	8008946 <TIM_ITRx_SetConfig>
      break;
 8008378:	e01c      	b.n	80083b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008386:	461a      	mov	r2, r3
 8008388:	f000 fa7e 	bl	8008888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2140      	movs	r1, #64	@ 0x40
 8008392:	4618      	mov	r0, r3
 8008394:	f000 fad7 	bl	8008946 <TIM_ITRx_SetConfig>
      break;
 8008398:	e00c      	b.n	80083b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4619      	mov	r1, r3
 80083a4:	4610      	mov	r0, r2
 80083a6:	f000 face 	bl	8008946 <TIM_ITRx_SetConfig>
      break;
 80083aa:	e003      	b.n	80083b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	73fb      	strb	r3, [r7, #15]
      break;
 80083b0:	e000      	b.n	80083b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80083b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
	...

080083d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a46      	ldr	r2, [pc, #280]	@ (80084fc <TIM_Base_SetConfig+0x12c>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d013      	beq.n	8008410 <TIM_Base_SetConfig+0x40>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ee:	d00f      	beq.n	8008410 <TIM_Base_SetConfig+0x40>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a43      	ldr	r2, [pc, #268]	@ (8008500 <TIM_Base_SetConfig+0x130>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d00b      	beq.n	8008410 <TIM_Base_SetConfig+0x40>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a42      	ldr	r2, [pc, #264]	@ (8008504 <TIM_Base_SetConfig+0x134>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d007      	beq.n	8008410 <TIM_Base_SetConfig+0x40>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a41      	ldr	r2, [pc, #260]	@ (8008508 <TIM_Base_SetConfig+0x138>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d003      	beq.n	8008410 <TIM_Base_SetConfig+0x40>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a40      	ldr	r2, [pc, #256]	@ (800850c <TIM_Base_SetConfig+0x13c>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d108      	bne.n	8008422 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	4313      	orrs	r3, r2
 8008420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a35      	ldr	r2, [pc, #212]	@ (80084fc <TIM_Base_SetConfig+0x12c>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d02b      	beq.n	8008482 <TIM_Base_SetConfig+0xb2>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008430:	d027      	beq.n	8008482 <TIM_Base_SetConfig+0xb2>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a32      	ldr	r2, [pc, #200]	@ (8008500 <TIM_Base_SetConfig+0x130>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d023      	beq.n	8008482 <TIM_Base_SetConfig+0xb2>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a31      	ldr	r2, [pc, #196]	@ (8008504 <TIM_Base_SetConfig+0x134>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d01f      	beq.n	8008482 <TIM_Base_SetConfig+0xb2>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a30      	ldr	r2, [pc, #192]	@ (8008508 <TIM_Base_SetConfig+0x138>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d01b      	beq.n	8008482 <TIM_Base_SetConfig+0xb2>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a2f      	ldr	r2, [pc, #188]	@ (800850c <TIM_Base_SetConfig+0x13c>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d017      	beq.n	8008482 <TIM_Base_SetConfig+0xb2>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a2e      	ldr	r2, [pc, #184]	@ (8008510 <TIM_Base_SetConfig+0x140>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d013      	beq.n	8008482 <TIM_Base_SetConfig+0xb2>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a2d      	ldr	r2, [pc, #180]	@ (8008514 <TIM_Base_SetConfig+0x144>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d00f      	beq.n	8008482 <TIM_Base_SetConfig+0xb2>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a2c      	ldr	r2, [pc, #176]	@ (8008518 <TIM_Base_SetConfig+0x148>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d00b      	beq.n	8008482 <TIM_Base_SetConfig+0xb2>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a2b      	ldr	r2, [pc, #172]	@ (800851c <TIM_Base_SetConfig+0x14c>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d007      	beq.n	8008482 <TIM_Base_SetConfig+0xb2>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a2a      	ldr	r2, [pc, #168]	@ (8008520 <TIM_Base_SetConfig+0x150>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d003      	beq.n	8008482 <TIM_Base_SetConfig+0xb2>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a29      	ldr	r2, [pc, #164]	@ (8008524 <TIM_Base_SetConfig+0x154>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d108      	bne.n	8008494 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	4313      	orrs	r3, r2
 8008492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	4313      	orrs	r3, r2
 80084a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a10      	ldr	r2, [pc, #64]	@ (80084fc <TIM_Base_SetConfig+0x12c>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d003      	beq.n	80084c8 <TIM_Base_SetConfig+0xf8>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a12      	ldr	r2, [pc, #72]	@ (800850c <TIM_Base_SetConfig+0x13c>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d103      	bne.n	80084d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	691a      	ldr	r2, [r3, #16]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d105      	bne.n	80084ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	f023 0201 	bic.w	r2, r3, #1
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	611a      	str	r2, [r3, #16]
  }
}
 80084ee:	bf00      	nop
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	40010000 	.word	0x40010000
 8008500:	40000400 	.word	0x40000400
 8008504:	40000800 	.word	0x40000800
 8008508:	40000c00 	.word	0x40000c00
 800850c:	40010400 	.word	0x40010400
 8008510:	40014000 	.word	0x40014000
 8008514:	40014400 	.word	0x40014400
 8008518:	40014800 	.word	0x40014800
 800851c:	40001800 	.word	0x40001800
 8008520:	40001c00 	.word	0x40001c00
 8008524:	40002000 	.word	0x40002000

08008528 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008528:	b480      	push	{r7}
 800852a:	b087      	sub	sp, #28
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	f023 0201 	bic.w	r2, r3, #1
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f023 0303 	bic.w	r3, r3, #3
 800855e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	4313      	orrs	r3, r2
 8008568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f023 0302 	bic.w	r3, r3, #2
 8008570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	4313      	orrs	r3, r2
 800857a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a20      	ldr	r2, [pc, #128]	@ (8008600 <TIM_OC1_SetConfig+0xd8>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d003      	beq.n	800858c <TIM_OC1_SetConfig+0x64>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a1f      	ldr	r2, [pc, #124]	@ (8008604 <TIM_OC1_SetConfig+0xdc>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d10c      	bne.n	80085a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	f023 0308 	bic.w	r3, r3, #8
 8008592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	4313      	orrs	r3, r2
 800859c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f023 0304 	bic.w	r3, r3, #4
 80085a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a15      	ldr	r2, [pc, #84]	@ (8008600 <TIM_OC1_SetConfig+0xd8>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d003      	beq.n	80085b6 <TIM_OC1_SetConfig+0x8e>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a14      	ldr	r2, [pc, #80]	@ (8008604 <TIM_OC1_SetConfig+0xdc>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d111      	bne.n	80085da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80085c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	685a      	ldr	r2, [r3, #4]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	697a      	ldr	r2, [r7, #20]
 80085f2:	621a      	str	r2, [r3, #32]
}
 80085f4:	bf00      	nop
 80085f6:	371c      	adds	r7, #28
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	40010000 	.word	0x40010000
 8008604:	40010400 	.word	0x40010400

08008608 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008608:	b480      	push	{r7}
 800860a:	b087      	sub	sp, #28
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	f023 0210 	bic.w	r2, r3, #16
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800863e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	021b      	lsls	r3, r3, #8
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	4313      	orrs	r3, r2
 800864a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f023 0320 	bic.w	r3, r3, #32
 8008652:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	011b      	lsls	r3, r3, #4
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	4313      	orrs	r3, r2
 800865e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a22      	ldr	r2, [pc, #136]	@ (80086ec <TIM_OC2_SetConfig+0xe4>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d003      	beq.n	8008670 <TIM_OC2_SetConfig+0x68>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a21      	ldr	r2, [pc, #132]	@ (80086f0 <TIM_OC2_SetConfig+0xe8>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d10d      	bne.n	800868c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	011b      	lsls	r3, r3, #4
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	4313      	orrs	r3, r2
 8008682:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800868a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a17      	ldr	r2, [pc, #92]	@ (80086ec <TIM_OC2_SetConfig+0xe4>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d003      	beq.n	800869c <TIM_OC2_SetConfig+0x94>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a16      	ldr	r2, [pc, #88]	@ (80086f0 <TIM_OC2_SetConfig+0xe8>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d113      	bne.n	80086c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685a      	ldr	r2, [r3, #4]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	621a      	str	r2, [r3, #32]
}
 80086de:	bf00      	nop
 80086e0:	371c      	adds	r7, #28
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	40010000 	.word	0x40010000
 80086f0:	40010400 	.word	0x40010400

080086f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b087      	sub	sp, #28
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a1b      	ldr	r3, [r3, #32]
 8008708:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	69db      	ldr	r3, [r3, #28]
 800871a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f023 0303 	bic.w	r3, r3, #3
 800872a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	4313      	orrs	r3, r2
 8008734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800873c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	021b      	lsls	r3, r3, #8
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	4313      	orrs	r3, r2
 8008748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a21      	ldr	r2, [pc, #132]	@ (80087d4 <TIM_OC3_SetConfig+0xe0>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d003      	beq.n	800875a <TIM_OC3_SetConfig+0x66>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a20      	ldr	r2, [pc, #128]	@ (80087d8 <TIM_OC3_SetConfig+0xe4>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d10d      	bne.n	8008776 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008760:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	021b      	lsls	r3, r3, #8
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	4313      	orrs	r3, r2
 800876c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a16      	ldr	r2, [pc, #88]	@ (80087d4 <TIM_OC3_SetConfig+0xe0>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d003      	beq.n	8008786 <TIM_OC3_SetConfig+0x92>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a15      	ldr	r2, [pc, #84]	@ (80087d8 <TIM_OC3_SetConfig+0xe4>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d113      	bne.n	80087ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800878c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	011b      	lsls	r3, r3, #4
 800879c:	693a      	ldr	r2, [r7, #16]
 800879e:	4313      	orrs	r3, r2
 80087a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	011b      	lsls	r3, r3, #4
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	685a      	ldr	r2, [r3, #4]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	621a      	str	r2, [r3, #32]
}
 80087c8:	bf00      	nop
 80087ca:	371c      	adds	r7, #28
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr
 80087d4:	40010000 	.word	0x40010000
 80087d8:	40010400 	.word	0x40010400

080087dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800880a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	021b      	lsls	r3, r3, #8
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	4313      	orrs	r3, r2
 800881e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008826:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	031b      	lsls	r3, r3, #12
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	4313      	orrs	r3, r2
 8008832:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a12      	ldr	r2, [pc, #72]	@ (8008880 <TIM_OC4_SetConfig+0xa4>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d003      	beq.n	8008844 <TIM_OC4_SetConfig+0x68>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a11      	ldr	r2, [pc, #68]	@ (8008884 <TIM_OC4_SetConfig+0xa8>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d109      	bne.n	8008858 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800884a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	019b      	lsls	r3, r3, #6
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	4313      	orrs	r3, r2
 8008856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	685a      	ldr	r2, [r3, #4]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	621a      	str	r2, [r3, #32]
}
 8008872:	bf00      	nop
 8008874:	371c      	adds	r7, #28
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	40010000 	.word	0x40010000
 8008884:	40010400 	.word	0x40010400

08008888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008888:	b480      	push	{r7}
 800888a:	b087      	sub	sp, #28
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6a1b      	ldr	r3, [r3, #32]
 8008898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	f023 0201 	bic.w	r2, r3, #1
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	011b      	lsls	r3, r3, #4
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f023 030a 	bic.w	r3, r3, #10
 80088c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	621a      	str	r2, [r3, #32]
}
 80088da:	bf00      	nop
 80088dc:	371c      	adds	r7, #28
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b087      	sub	sp, #28
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	f023 0210 	bic.w	r2, r3, #16
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008910:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	031b      	lsls	r3, r3, #12
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	4313      	orrs	r3, r2
 800891a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008922:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	011b      	lsls	r3, r3, #4
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	4313      	orrs	r3, r2
 800892c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	621a      	str	r2, [r3, #32]
}
 800893a:	bf00      	nop
 800893c:	371c      	adds	r7, #28
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008946:	b480      	push	{r7}
 8008948:	b085      	sub	sp, #20
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800895c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4313      	orrs	r3, r2
 8008964:	f043 0307 	orr.w	r3, r3, #7
 8008968:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	609a      	str	r2, [r3, #8]
}
 8008970:	bf00      	nop
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800897c:	b480      	push	{r7}
 800897e:	b087      	sub	sp, #28
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
 8008988:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008996:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	021a      	lsls	r2, r3, #8
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	431a      	orrs	r2, r3
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	609a      	str	r2, [r3, #8]
}
 80089b0:	bf00      	nop
 80089b2:	371c      	adds	r7, #28
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d101      	bne.n	80089d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089d0:	2302      	movs	r3, #2
 80089d2:	e05a      	b.n	8008a8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2202      	movs	r2, #2
 80089e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a21      	ldr	r2, [pc, #132]	@ (8008a98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d022      	beq.n	8008a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a20:	d01d      	beq.n	8008a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a1d      	ldr	r2, [pc, #116]	@ (8008a9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d018      	beq.n	8008a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a1b      	ldr	r2, [pc, #108]	@ (8008aa0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d013      	beq.n	8008a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8008aa4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d00e      	beq.n	8008a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a18      	ldr	r2, [pc, #96]	@ (8008aa8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d009      	beq.n	8008a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a17      	ldr	r2, [pc, #92]	@ (8008aac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d004      	beq.n	8008a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a15      	ldr	r2, [pc, #84]	@ (8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d10c      	bne.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3714      	adds	r7, #20
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	40010000 	.word	0x40010000
 8008a9c:	40000400 	.word	0x40000400
 8008aa0:	40000800 	.word	0x40000800
 8008aa4:	40000c00 	.word	0x40000c00
 8008aa8:	40010400 	.word	0x40010400
 8008aac:	40014000 	.word	0x40014000
 8008ab0:	40001800 	.word	0x40001800

08008ab4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d101      	bne.n	8008ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008acc:	2302      	movs	r3, #2
 8008ace:	e03d      	b.n	8008b4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d101      	bne.n	8008b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e042      	b.n	8008bf0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d106      	bne.n	8008b84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f7f9 febc 	bl	80028fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2224      	movs	r2, #36	@ 0x24
 8008b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68da      	ldr	r2, [r3, #12]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 f82b 	bl	8008bf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	691a      	ldr	r2, [r3, #16]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008bb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	695a      	ldr	r2, [r3, #20]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008bc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68da      	ldr	r2, [r3, #12]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008bd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2220      	movs	r2, #32
 8008bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2220      	movs	r2, #32
 8008be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bfc:	b0c0      	sub	sp, #256	@ 0x100
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c14:	68d9      	ldr	r1, [r3, #12]
 8008c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	ea40 0301 	orr.w	r3, r0, r1
 8008c20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c26:	689a      	ldr	r2, [r3, #8]
 8008c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	431a      	orrs	r2, r3
 8008c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c34:	695b      	ldr	r3, [r3, #20]
 8008c36:	431a      	orrs	r2, r3
 8008c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c3c:	69db      	ldr	r3, [r3, #28]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008c50:	f021 010c 	bic.w	r1, r1, #12
 8008c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008c5e:	430b      	orrs	r3, r1
 8008c60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	695b      	ldr	r3, [r3, #20]
 8008c6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c72:	6999      	ldr	r1, [r3, #24]
 8008c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	ea40 0301 	orr.w	r3, r0, r1
 8008c7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	4b8f      	ldr	r3, [pc, #572]	@ (8008ec4 <UART_SetConfig+0x2cc>)
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d005      	beq.n	8008c98 <UART_SetConfig+0xa0>
 8008c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	4b8d      	ldr	r3, [pc, #564]	@ (8008ec8 <UART_SetConfig+0x2d0>)
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d104      	bne.n	8008ca2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c98:	f7fe ffee 	bl	8007c78 <HAL_RCC_GetPCLK2Freq>
 8008c9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008ca0:	e003      	b.n	8008caa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ca2:	f7fe ffd5 	bl	8007c50 <HAL_RCC_GetPCLK1Freq>
 8008ca6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cb4:	f040 810c 	bne.w	8008ed0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008cc2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008cc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008cca:	4622      	mov	r2, r4
 8008ccc:	462b      	mov	r3, r5
 8008cce:	1891      	adds	r1, r2, r2
 8008cd0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008cd2:	415b      	adcs	r3, r3
 8008cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008cda:	4621      	mov	r1, r4
 8008cdc:	eb12 0801 	adds.w	r8, r2, r1
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	eb43 0901 	adc.w	r9, r3, r1
 8008ce6:	f04f 0200 	mov.w	r2, #0
 8008cea:	f04f 0300 	mov.w	r3, #0
 8008cee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cfa:	4690      	mov	r8, r2
 8008cfc:	4699      	mov	r9, r3
 8008cfe:	4623      	mov	r3, r4
 8008d00:	eb18 0303 	adds.w	r3, r8, r3
 8008d04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008d08:	462b      	mov	r3, r5
 8008d0a:	eb49 0303 	adc.w	r3, r9, r3
 8008d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008d1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008d22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008d26:	460b      	mov	r3, r1
 8008d28:	18db      	adds	r3, r3, r3
 8008d2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	eb42 0303 	adc.w	r3, r2, r3
 8008d32:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008d38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008d3c:	f7f7 ffa4 	bl	8000c88 <__aeabi_uldivmod>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	4b61      	ldr	r3, [pc, #388]	@ (8008ecc <UART_SetConfig+0x2d4>)
 8008d46:	fba3 2302 	umull	r2, r3, r3, r2
 8008d4a:	095b      	lsrs	r3, r3, #5
 8008d4c:	011c      	lsls	r4, r3, #4
 8008d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d52:	2200      	movs	r2, #0
 8008d54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008d5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008d60:	4642      	mov	r2, r8
 8008d62:	464b      	mov	r3, r9
 8008d64:	1891      	adds	r1, r2, r2
 8008d66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008d68:	415b      	adcs	r3, r3
 8008d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008d70:	4641      	mov	r1, r8
 8008d72:	eb12 0a01 	adds.w	sl, r2, r1
 8008d76:	4649      	mov	r1, r9
 8008d78:	eb43 0b01 	adc.w	fp, r3, r1
 8008d7c:	f04f 0200 	mov.w	r2, #0
 8008d80:	f04f 0300 	mov.w	r3, #0
 8008d84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d90:	4692      	mov	sl, r2
 8008d92:	469b      	mov	fp, r3
 8008d94:	4643      	mov	r3, r8
 8008d96:	eb1a 0303 	adds.w	r3, sl, r3
 8008d9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008d9e:	464b      	mov	r3, r9
 8008da0:	eb4b 0303 	adc.w	r3, fp, r3
 8008da4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008db4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008db8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	18db      	adds	r3, r3, r3
 8008dc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	eb42 0303 	adc.w	r3, r2, r3
 8008dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008dce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008dd2:	f7f7 ff59 	bl	8000c88 <__aeabi_uldivmod>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	4611      	mov	r1, r2
 8008ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8008ecc <UART_SetConfig+0x2d4>)
 8008dde:	fba3 2301 	umull	r2, r3, r3, r1
 8008de2:	095b      	lsrs	r3, r3, #5
 8008de4:	2264      	movs	r2, #100	@ 0x64
 8008de6:	fb02 f303 	mul.w	r3, r2, r3
 8008dea:	1acb      	subs	r3, r1, r3
 8008dec:	00db      	lsls	r3, r3, #3
 8008dee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008df2:	4b36      	ldr	r3, [pc, #216]	@ (8008ecc <UART_SetConfig+0x2d4>)
 8008df4:	fba3 2302 	umull	r2, r3, r3, r2
 8008df8:	095b      	lsrs	r3, r3, #5
 8008dfa:	005b      	lsls	r3, r3, #1
 8008dfc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008e00:	441c      	add	r4, r3
 8008e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e06:	2200      	movs	r2, #0
 8008e08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008e10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008e14:	4642      	mov	r2, r8
 8008e16:	464b      	mov	r3, r9
 8008e18:	1891      	adds	r1, r2, r2
 8008e1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008e1c:	415b      	adcs	r3, r3
 8008e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008e24:	4641      	mov	r1, r8
 8008e26:	1851      	adds	r1, r2, r1
 8008e28:	6339      	str	r1, [r7, #48]	@ 0x30
 8008e2a:	4649      	mov	r1, r9
 8008e2c:	414b      	adcs	r3, r1
 8008e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e30:	f04f 0200 	mov.w	r2, #0
 8008e34:	f04f 0300 	mov.w	r3, #0
 8008e38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008e3c:	4659      	mov	r1, fp
 8008e3e:	00cb      	lsls	r3, r1, #3
 8008e40:	4651      	mov	r1, sl
 8008e42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e46:	4651      	mov	r1, sl
 8008e48:	00ca      	lsls	r2, r1, #3
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	4603      	mov	r3, r0
 8008e50:	4642      	mov	r2, r8
 8008e52:	189b      	adds	r3, r3, r2
 8008e54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e58:	464b      	mov	r3, r9
 8008e5a:	460a      	mov	r2, r1
 8008e5c:	eb42 0303 	adc.w	r3, r2, r3
 8008e60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008e74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008e78:	460b      	mov	r3, r1
 8008e7a:	18db      	adds	r3, r3, r3
 8008e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e7e:	4613      	mov	r3, r2
 8008e80:	eb42 0303 	adc.w	r3, r2, r3
 8008e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008e8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008e8e:	f7f7 fefb 	bl	8000c88 <__aeabi_uldivmod>
 8008e92:	4602      	mov	r2, r0
 8008e94:	460b      	mov	r3, r1
 8008e96:	4b0d      	ldr	r3, [pc, #52]	@ (8008ecc <UART_SetConfig+0x2d4>)
 8008e98:	fba3 1302 	umull	r1, r3, r3, r2
 8008e9c:	095b      	lsrs	r3, r3, #5
 8008e9e:	2164      	movs	r1, #100	@ 0x64
 8008ea0:	fb01 f303 	mul.w	r3, r1, r3
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	00db      	lsls	r3, r3, #3
 8008ea8:	3332      	adds	r3, #50	@ 0x32
 8008eaa:	4a08      	ldr	r2, [pc, #32]	@ (8008ecc <UART_SetConfig+0x2d4>)
 8008eac:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb0:	095b      	lsrs	r3, r3, #5
 8008eb2:	f003 0207 	and.w	r2, r3, #7
 8008eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4422      	add	r2, r4
 8008ebe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ec0:	e106      	b.n	80090d0 <UART_SetConfig+0x4d8>
 8008ec2:	bf00      	nop
 8008ec4:	40011000 	.word	0x40011000
 8008ec8:	40011400 	.word	0x40011400
 8008ecc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008eda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008ede:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008ee2:	4642      	mov	r2, r8
 8008ee4:	464b      	mov	r3, r9
 8008ee6:	1891      	adds	r1, r2, r2
 8008ee8:	6239      	str	r1, [r7, #32]
 8008eea:	415b      	adcs	r3, r3
 8008eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8008eee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ef2:	4641      	mov	r1, r8
 8008ef4:	1854      	adds	r4, r2, r1
 8008ef6:	4649      	mov	r1, r9
 8008ef8:	eb43 0501 	adc.w	r5, r3, r1
 8008efc:	f04f 0200 	mov.w	r2, #0
 8008f00:	f04f 0300 	mov.w	r3, #0
 8008f04:	00eb      	lsls	r3, r5, #3
 8008f06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f0a:	00e2      	lsls	r2, r4, #3
 8008f0c:	4614      	mov	r4, r2
 8008f0e:	461d      	mov	r5, r3
 8008f10:	4643      	mov	r3, r8
 8008f12:	18e3      	adds	r3, r4, r3
 8008f14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f18:	464b      	mov	r3, r9
 8008f1a:	eb45 0303 	adc.w	r3, r5, r3
 8008f1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008f32:	f04f 0200 	mov.w	r2, #0
 8008f36:	f04f 0300 	mov.w	r3, #0
 8008f3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008f3e:	4629      	mov	r1, r5
 8008f40:	008b      	lsls	r3, r1, #2
 8008f42:	4621      	mov	r1, r4
 8008f44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f48:	4621      	mov	r1, r4
 8008f4a:	008a      	lsls	r2, r1, #2
 8008f4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008f50:	f7f7 fe9a 	bl	8000c88 <__aeabi_uldivmod>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	4b60      	ldr	r3, [pc, #384]	@ (80090dc <UART_SetConfig+0x4e4>)
 8008f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8008f5e:	095b      	lsrs	r3, r3, #5
 8008f60:	011c      	lsls	r4, r3, #4
 8008f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f66:	2200      	movs	r2, #0
 8008f68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008f6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008f70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008f74:	4642      	mov	r2, r8
 8008f76:	464b      	mov	r3, r9
 8008f78:	1891      	adds	r1, r2, r2
 8008f7a:	61b9      	str	r1, [r7, #24]
 8008f7c:	415b      	adcs	r3, r3
 8008f7e:	61fb      	str	r3, [r7, #28]
 8008f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f84:	4641      	mov	r1, r8
 8008f86:	1851      	adds	r1, r2, r1
 8008f88:	6139      	str	r1, [r7, #16]
 8008f8a:	4649      	mov	r1, r9
 8008f8c:	414b      	adcs	r3, r1
 8008f8e:	617b      	str	r3, [r7, #20]
 8008f90:	f04f 0200 	mov.w	r2, #0
 8008f94:	f04f 0300 	mov.w	r3, #0
 8008f98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f9c:	4659      	mov	r1, fp
 8008f9e:	00cb      	lsls	r3, r1, #3
 8008fa0:	4651      	mov	r1, sl
 8008fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fa6:	4651      	mov	r1, sl
 8008fa8:	00ca      	lsls	r2, r1, #3
 8008faa:	4610      	mov	r0, r2
 8008fac:	4619      	mov	r1, r3
 8008fae:	4603      	mov	r3, r0
 8008fb0:	4642      	mov	r2, r8
 8008fb2:	189b      	adds	r3, r3, r2
 8008fb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008fb8:	464b      	mov	r3, r9
 8008fba:	460a      	mov	r2, r1
 8008fbc:	eb42 0303 	adc.w	r3, r2, r3
 8008fc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008fce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008fd0:	f04f 0200 	mov.w	r2, #0
 8008fd4:	f04f 0300 	mov.w	r3, #0
 8008fd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008fdc:	4649      	mov	r1, r9
 8008fde:	008b      	lsls	r3, r1, #2
 8008fe0:	4641      	mov	r1, r8
 8008fe2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fe6:	4641      	mov	r1, r8
 8008fe8:	008a      	lsls	r2, r1, #2
 8008fea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008fee:	f7f7 fe4b 	bl	8000c88 <__aeabi_uldivmod>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	4611      	mov	r1, r2
 8008ff8:	4b38      	ldr	r3, [pc, #224]	@ (80090dc <UART_SetConfig+0x4e4>)
 8008ffa:	fba3 2301 	umull	r2, r3, r3, r1
 8008ffe:	095b      	lsrs	r3, r3, #5
 8009000:	2264      	movs	r2, #100	@ 0x64
 8009002:	fb02 f303 	mul.w	r3, r2, r3
 8009006:	1acb      	subs	r3, r1, r3
 8009008:	011b      	lsls	r3, r3, #4
 800900a:	3332      	adds	r3, #50	@ 0x32
 800900c:	4a33      	ldr	r2, [pc, #204]	@ (80090dc <UART_SetConfig+0x4e4>)
 800900e:	fba2 2303 	umull	r2, r3, r2, r3
 8009012:	095b      	lsrs	r3, r3, #5
 8009014:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009018:	441c      	add	r4, r3
 800901a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800901e:	2200      	movs	r2, #0
 8009020:	673b      	str	r3, [r7, #112]	@ 0x70
 8009022:	677a      	str	r2, [r7, #116]	@ 0x74
 8009024:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009028:	4642      	mov	r2, r8
 800902a:	464b      	mov	r3, r9
 800902c:	1891      	adds	r1, r2, r2
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	415b      	adcs	r3, r3
 8009032:	60fb      	str	r3, [r7, #12]
 8009034:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009038:	4641      	mov	r1, r8
 800903a:	1851      	adds	r1, r2, r1
 800903c:	6039      	str	r1, [r7, #0]
 800903e:	4649      	mov	r1, r9
 8009040:	414b      	adcs	r3, r1
 8009042:	607b      	str	r3, [r7, #4]
 8009044:	f04f 0200 	mov.w	r2, #0
 8009048:	f04f 0300 	mov.w	r3, #0
 800904c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009050:	4659      	mov	r1, fp
 8009052:	00cb      	lsls	r3, r1, #3
 8009054:	4651      	mov	r1, sl
 8009056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800905a:	4651      	mov	r1, sl
 800905c:	00ca      	lsls	r2, r1, #3
 800905e:	4610      	mov	r0, r2
 8009060:	4619      	mov	r1, r3
 8009062:	4603      	mov	r3, r0
 8009064:	4642      	mov	r2, r8
 8009066:	189b      	adds	r3, r3, r2
 8009068:	66bb      	str	r3, [r7, #104]	@ 0x68
 800906a:	464b      	mov	r3, r9
 800906c:	460a      	mov	r2, r1
 800906e:	eb42 0303 	adc.w	r3, r2, r3
 8009072:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	663b      	str	r3, [r7, #96]	@ 0x60
 800907e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009080:	f04f 0200 	mov.w	r2, #0
 8009084:	f04f 0300 	mov.w	r3, #0
 8009088:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800908c:	4649      	mov	r1, r9
 800908e:	008b      	lsls	r3, r1, #2
 8009090:	4641      	mov	r1, r8
 8009092:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009096:	4641      	mov	r1, r8
 8009098:	008a      	lsls	r2, r1, #2
 800909a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800909e:	f7f7 fdf3 	bl	8000c88 <__aeabi_uldivmod>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	4b0d      	ldr	r3, [pc, #52]	@ (80090dc <UART_SetConfig+0x4e4>)
 80090a8:	fba3 1302 	umull	r1, r3, r3, r2
 80090ac:	095b      	lsrs	r3, r3, #5
 80090ae:	2164      	movs	r1, #100	@ 0x64
 80090b0:	fb01 f303 	mul.w	r3, r1, r3
 80090b4:	1ad3      	subs	r3, r2, r3
 80090b6:	011b      	lsls	r3, r3, #4
 80090b8:	3332      	adds	r3, #50	@ 0x32
 80090ba:	4a08      	ldr	r2, [pc, #32]	@ (80090dc <UART_SetConfig+0x4e4>)
 80090bc:	fba2 2303 	umull	r2, r3, r2, r3
 80090c0:	095b      	lsrs	r3, r3, #5
 80090c2:	f003 020f 	and.w	r2, r3, #15
 80090c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4422      	add	r2, r4
 80090ce:	609a      	str	r2, [r3, #8]
}
 80090d0:	bf00      	nop
 80090d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80090d6:	46bd      	mov	sp, r7
 80090d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090dc:	51eb851f 	.word	0x51eb851f

080090e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090e0:	b084      	sub	sp, #16
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b084      	sub	sp, #16
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	f107 001c 	add.w	r0, r7, #28
 80090ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d123      	bne.n	8009142 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800910e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009122:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009126:	2b01      	cmp	r3, #1
 8009128:	d105      	bne.n	8009136 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f001 fae8 	bl	800a70c <USB_CoreReset>
 800913c:	4603      	mov	r3, r0
 800913e:	73fb      	strb	r3, [r7, #15]
 8009140:	e01b      	b.n	800917a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f001 fadc 	bl	800a70c <USB_CoreReset>
 8009154:	4603      	mov	r3, r0
 8009156:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009158:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800915c:	2b00      	cmp	r3, #0
 800915e:	d106      	bne.n	800916e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009164:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	639a      	str	r2, [r3, #56]	@ 0x38
 800916c:	e005      	b.n	800917a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009172:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800917a:	7fbb      	ldrb	r3, [r7, #30]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d10b      	bne.n	8009198 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	f043 0206 	orr.w	r2, r3, #6
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f043 0220 	orr.w	r2, r3, #32
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009198:	7bfb      	ldrb	r3, [r7, #15]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091a4:	b004      	add	sp, #16
 80091a6:	4770      	bx	lr

080091a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b087      	sub	sp, #28
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	4613      	mov	r3, r2
 80091b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80091b6:	79fb      	ldrb	r3, [r7, #7]
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d165      	bne.n	8009288 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	4a41      	ldr	r2, [pc, #260]	@ (80092c4 <USB_SetTurnaroundTime+0x11c>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d906      	bls.n	80091d2 <USB_SetTurnaroundTime+0x2a>
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	4a40      	ldr	r2, [pc, #256]	@ (80092c8 <USB_SetTurnaroundTime+0x120>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d202      	bcs.n	80091d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80091cc:	230f      	movs	r3, #15
 80091ce:	617b      	str	r3, [r7, #20]
 80091d0:	e062      	b.n	8009298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	4a3c      	ldr	r2, [pc, #240]	@ (80092c8 <USB_SetTurnaroundTime+0x120>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d306      	bcc.n	80091e8 <USB_SetTurnaroundTime+0x40>
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	4a3b      	ldr	r2, [pc, #236]	@ (80092cc <USB_SetTurnaroundTime+0x124>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d202      	bcs.n	80091e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80091e2:	230e      	movs	r3, #14
 80091e4:	617b      	str	r3, [r7, #20]
 80091e6:	e057      	b.n	8009298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	4a38      	ldr	r2, [pc, #224]	@ (80092cc <USB_SetTurnaroundTime+0x124>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d306      	bcc.n	80091fe <USB_SetTurnaroundTime+0x56>
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	4a37      	ldr	r2, [pc, #220]	@ (80092d0 <USB_SetTurnaroundTime+0x128>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d202      	bcs.n	80091fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80091f8:	230d      	movs	r3, #13
 80091fa:	617b      	str	r3, [r7, #20]
 80091fc:	e04c      	b.n	8009298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	4a33      	ldr	r2, [pc, #204]	@ (80092d0 <USB_SetTurnaroundTime+0x128>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d306      	bcc.n	8009214 <USB_SetTurnaroundTime+0x6c>
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	4a32      	ldr	r2, [pc, #200]	@ (80092d4 <USB_SetTurnaroundTime+0x12c>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d802      	bhi.n	8009214 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800920e:	230c      	movs	r3, #12
 8009210:	617b      	str	r3, [r7, #20]
 8009212:	e041      	b.n	8009298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	4a2f      	ldr	r2, [pc, #188]	@ (80092d4 <USB_SetTurnaroundTime+0x12c>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d906      	bls.n	800922a <USB_SetTurnaroundTime+0x82>
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	4a2e      	ldr	r2, [pc, #184]	@ (80092d8 <USB_SetTurnaroundTime+0x130>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d802      	bhi.n	800922a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009224:	230b      	movs	r3, #11
 8009226:	617b      	str	r3, [r7, #20]
 8009228:	e036      	b.n	8009298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	4a2a      	ldr	r2, [pc, #168]	@ (80092d8 <USB_SetTurnaroundTime+0x130>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d906      	bls.n	8009240 <USB_SetTurnaroundTime+0x98>
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	4a29      	ldr	r2, [pc, #164]	@ (80092dc <USB_SetTurnaroundTime+0x134>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d802      	bhi.n	8009240 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800923a:	230a      	movs	r3, #10
 800923c:	617b      	str	r3, [r7, #20]
 800923e:	e02b      	b.n	8009298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	4a26      	ldr	r2, [pc, #152]	@ (80092dc <USB_SetTurnaroundTime+0x134>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d906      	bls.n	8009256 <USB_SetTurnaroundTime+0xae>
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	4a25      	ldr	r2, [pc, #148]	@ (80092e0 <USB_SetTurnaroundTime+0x138>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d202      	bcs.n	8009256 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009250:	2309      	movs	r3, #9
 8009252:	617b      	str	r3, [r7, #20]
 8009254:	e020      	b.n	8009298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	4a21      	ldr	r2, [pc, #132]	@ (80092e0 <USB_SetTurnaroundTime+0x138>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d306      	bcc.n	800926c <USB_SetTurnaroundTime+0xc4>
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	4a20      	ldr	r2, [pc, #128]	@ (80092e4 <USB_SetTurnaroundTime+0x13c>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d802      	bhi.n	800926c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009266:	2308      	movs	r3, #8
 8009268:	617b      	str	r3, [r7, #20]
 800926a:	e015      	b.n	8009298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	4a1d      	ldr	r2, [pc, #116]	@ (80092e4 <USB_SetTurnaroundTime+0x13c>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d906      	bls.n	8009282 <USB_SetTurnaroundTime+0xda>
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	4a1c      	ldr	r2, [pc, #112]	@ (80092e8 <USB_SetTurnaroundTime+0x140>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d202      	bcs.n	8009282 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800927c:	2307      	movs	r3, #7
 800927e:	617b      	str	r3, [r7, #20]
 8009280:	e00a      	b.n	8009298 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009282:	2306      	movs	r3, #6
 8009284:	617b      	str	r3, [r7, #20]
 8009286:	e007      	b.n	8009298 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009288:	79fb      	ldrb	r3, [r7, #7]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d102      	bne.n	8009294 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800928e:	2309      	movs	r3, #9
 8009290:	617b      	str	r3, [r7, #20]
 8009292:	e001      	b.n	8009298 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009294:	2309      	movs	r3, #9
 8009296:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	68da      	ldr	r2, [r3, #12]
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	029b      	lsls	r3, r3, #10
 80092ac:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80092b0:	431a      	orrs	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	371c      	adds	r7, #28
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr
 80092c4:	00d8acbf 	.word	0x00d8acbf
 80092c8:	00e4e1c0 	.word	0x00e4e1c0
 80092cc:	00f42400 	.word	0x00f42400
 80092d0:	01067380 	.word	0x01067380
 80092d4:	011a499f 	.word	0x011a499f
 80092d8:	01312cff 	.word	0x01312cff
 80092dc:	014ca43f 	.word	0x014ca43f
 80092e0:	016e3600 	.word	0x016e3600
 80092e4:	01a6ab1f 	.word	0x01a6ab1f
 80092e8:	01e84800 	.word	0x01e84800

080092ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	f043 0201 	orr.w	r2, r3, #1
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	370c      	adds	r7, #12
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800930e:	b480      	push	{r7}
 8009310:	b083      	sub	sp, #12
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	f023 0201 	bic.w	r2, r3, #1
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800933c:	2300      	movs	r3, #0
 800933e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800934c:	78fb      	ldrb	r3, [r7, #3]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d115      	bne.n	800937e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800935e:	200a      	movs	r0, #10
 8009360:	f7f9 fcda 	bl	8002d18 <HAL_Delay>
      ms += 10U;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	330a      	adds	r3, #10
 8009368:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f001 f93f 	bl	800a5ee <USB_GetMode>
 8009370:	4603      	mov	r3, r0
 8009372:	2b01      	cmp	r3, #1
 8009374:	d01e      	beq.n	80093b4 <USB_SetCurrentMode+0x84>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2bc7      	cmp	r3, #199	@ 0xc7
 800937a:	d9f0      	bls.n	800935e <USB_SetCurrentMode+0x2e>
 800937c:	e01a      	b.n	80093b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800937e:	78fb      	ldrb	r3, [r7, #3]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d115      	bne.n	80093b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009390:	200a      	movs	r0, #10
 8009392:	f7f9 fcc1 	bl	8002d18 <HAL_Delay>
      ms += 10U;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	330a      	adds	r3, #10
 800939a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f001 f926 	bl	800a5ee <USB_GetMode>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d005      	beq.n	80093b4 <USB_SetCurrentMode+0x84>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80093ac:	d9f0      	bls.n	8009390 <USB_SetCurrentMode+0x60>
 80093ae:	e001      	b.n	80093b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e005      	b.n	80093c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2bc8      	cmp	r3, #200	@ 0xc8
 80093b8:	d101      	bne.n	80093be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e000      	b.n	80093c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80093c8:	b084      	sub	sp, #16
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b086      	sub	sp, #24
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80093d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80093e2:	2300      	movs	r3, #0
 80093e4:	613b      	str	r3, [r7, #16]
 80093e6:	e009      	b.n	80093fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	3340      	adds	r3, #64	@ 0x40
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	2200      	movs	r2, #0
 80093f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	3301      	adds	r3, #1
 80093fa:	613b      	str	r3, [r7, #16]
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	2b0e      	cmp	r3, #14
 8009400:	d9f2      	bls.n	80093e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009402:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009406:	2b00      	cmp	r3, #0
 8009408:	d11c      	bne.n	8009444 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009418:	f043 0302 	orr.w	r3, r3, #2
 800941c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009422:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800942e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800943a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	639a      	str	r2, [r3, #56]	@ 0x38
 8009442:	e00b      	b.n	800945c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009448:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009454:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009462:	461a      	mov	r2, r3
 8009464:	2300      	movs	r3, #0
 8009466:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009468:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800946c:	2b01      	cmp	r3, #1
 800946e:	d10d      	bne.n	800948c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009470:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009474:	2b00      	cmp	r3, #0
 8009476:	d104      	bne.n	8009482 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009478:	2100      	movs	r1, #0
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f968 	bl	8009750 <USB_SetDevSpeed>
 8009480:	e008      	b.n	8009494 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009482:	2101      	movs	r1, #1
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f963 	bl	8009750 <USB_SetDevSpeed>
 800948a:	e003      	b.n	8009494 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800948c:	2103      	movs	r1, #3
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f95e 	bl	8009750 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009494:	2110      	movs	r1, #16
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f8fa 	bl	8009690 <USB_FlushTxFifo>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d001      	beq.n	80094a6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f924 	bl	80096f4 <USB_FlushRxFifo>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d001      	beq.n	80094b6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094bc:	461a      	mov	r2, r3
 80094be:	2300      	movs	r3, #0
 80094c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094c8:	461a      	mov	r2, r3
 80094ca:	2300      	movs	r3, #0
 80094cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094d4:	461a      	mov	r2, r3
 80094d6:	2300      	movs	r3, #0
 80094d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094da:	2300      	movs	r3, #0
 80094dc:	613b      	str	r3, [r7, #16]
 80094de:	e043      	b.n	8009568 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	015a      	lsls	r2, r3, #5
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4413      	add	r3, r2
 80094e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094f6:	d118      	bne.n	800952a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10a      	bne.n	8009514 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	015a      	lsls	r2, r3, #5
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	4413      	add	r3, r2
 8009506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800950a:	461a      	mov	r2, r3
 800950c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009510:	6013      	str	r3, [r2, #0]
 8009512:	e013      	b.n	800953c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	4413      	add	r3, r2
 800951c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009520:	461a      	mov	r2, r3
 8009522:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009526:	6013      	str	r3, [r2, #0]
 8009528:	e008      	b.n	800953c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	015a      	lsls	r2, r3, #5
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	4413      	add	r3, r2
 8009532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009536:	461a      	mov	r2, r3
 8009538:	2300      	movs	r3, #0
 800953a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	015a      	lsls	r2, r3, #5
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4413      	add	r3, r2
 8009544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009548:	461a      	mov	r2, r3
 800954a:	2300      	movs	r3, #0
 800954c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	015a      	lsls	r2, r3, #5
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	4413      	add	r3, r2
 8009556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800955a:	461a      	mov	r2, r3
 800955c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009560:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	3301      	adds	r3, #1
 8009566:	613b      	str	r3, [r7, #16]
 8009568:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800956c:	461a      	mov	r2, r3
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	4293      	cmp	r3, r2
 8009572:	d3b5      	bcc.n	80094e0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009574:	2300      	movs	r3, #0
 8009576:	613b      	str	r3, [r7, #16]
 8009578:	e043      	b.n	8009602 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	015a      	lsls	r2, r3, #5
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	4413      	add	r3, r2
 8009582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800958c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009590:	d118      	bne.n	80095c4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10a      	bne.n	80095ae <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	015a      	lsls	r2, r3, #5
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	4413      	add	r3, r2
 80095a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095a4:	461a      	mov	r2, r3
 80095a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80095aa:	6013      	str	r3, [r2, #0]
 80095ac:	e013      	b.n	80095d6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	015a      	lsls	r2, r3, #5
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	4413      	add	r3, r2
 80095b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095ba:	461a      	mov	r2, r3
 80095bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80095c0:	6013      	str	r3, [r2, #0]
 80095c2:	e008      	b.n	80095d6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	015a      	lsls	r2, r3, #5
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	4413      	add	r3, r2
 80095cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095d0:	461a      	mov	r2, r3
 80095d2:	2300      	movs	r3, #0
 80095d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	015a      	lsls	r2, r3, #5
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	4413      	add	r3, r2
 80095de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095e2:	461a      	mov	r2, r3
 80095e4:	2300      	movs	r3, #0
 80095e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	015a      	lsls	r2, r3, #5
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	4413      	add	r3, r2
 80095f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095f4:	461a      	mov	r2, r3
 80095f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80095fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	3301      	adds	r3, #1
 8009600:	613b      	str	r3, [r7, #16]
 8009602:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009606:	461a      	mov	r2, r3
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	4293      	cmp	r3, r2
 800960c:	d3b5      	bcc.n	800957a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800961c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009620:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800962e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009630:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009634:	2b00      	cmp	r3, #0
 8009636:	d105      	bne.n	8009644 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	f043 0210 	orr.w	r2, r3, #16
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	699a      	ldr	r2, [r3, #24]
 8009648:	4b10      	ldr	r3, [pc, #64]	@ (800968c <USB_DevInit+0x2c4>)
 800964a:	4313      	orrs	r3, r2
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009650:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009654:	2b00      	cmp	r3, #0
 8009656:	d005      	beq.n	8009664 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	699b      	ldr	r3, [r3, #24]
 800965c:	f043 0208 	orr.w	r2, r3, #8
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009664:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009668:	2b01      	cmp	r3, #1
 800966a:	d107      	bne.n	800967c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	699b      	ldr	r3, [r3, #24]
 8009670:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009674:	f043 0304 	orr.w	r3, r3, #4
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800967c:	7dfb      	ldrb	r3, [r7, #23]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3718      	adds	r7, #24
 8009682:	46bd      	mov	sp, r7
 8009684:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009688:	b004      	add	sp, #16
 800968a:	4770      	bx	lr
 800968c:	803c3800 	.word	0x803c3800

08009690 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800969a:	2300      	movs	r3, #0
 800969c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	3301      	adds	r3, #1
 80096a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80096aa:	d901      	bls.n	80096b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80096ac:	2303      	movs	r3, #3
 80096ae:	e01b      	b.n	80096e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	daf2      	bge.n	800969e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80096b8:	2300      	movs	r3, #0
 80096ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	019b      	lsls	r3, r3, #6
 80096c0:	f043 0220 	orr.w	r2, r3, #32
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	3301      	adds	r3, #1
 80096cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80096d4:	d901      	bls.n	80096da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80096d6:	2303      	movs	r3, #3
 80096d8:	e006      	b.n	80096e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	f003 0320 	and.w	r3, r3, #32
 80096e2:	2b20      	cmp	r3, #32
 80096e4:	d0f0      	beq.n	80096c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3714      	adds	r7, #20
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80096fc:	2300      	movs	r3, #0
 80096fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	3301      	adds	r3, #1
 8009704:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800970c:	d901      	bls.n	8009712 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800970e:	2303      	movs	r3, #3
 8009710:	e018      	b.n	8009744 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	2b00      	cmp	r3, #0
 8009718:	daf2      	bge.n	8009700 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800971a:	2300      	movs	r3, #0
 800971c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2210      	movs	r2, #16
 8009722:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	3301      	adds	r3, #1
 8009728:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009730:	d901      	bls.n	8009736 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009732:	2303      	movs	r3, #3
 8009734:	e006      	b.n	8009744 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	f003 0310 	and.w	r3, r3, #16
 800973e:	2b10      	cmp	r3, #16
 8009740:	d0f0      	beq.n	8009724 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3714      	adds	r7, #20
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009750:	b480      	push	{r7}
 8009752:	b085      	sub	sp, #20
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	460b      	mov	r3, r1
 800975a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	78fb      	ldrb	r3, [r7, #3]
 800976a:	68f9      	ldr	r1, [r7, #12]
 800976c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009770:	4313      	orrs	r3, r2
 8009772:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3714      	adds	r7, #20
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr

08009782 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009782:	b480      	push	{r7}
 8009784:	b087      	sub	sp, #28
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	f003 0306 	and.w	r3, r3, #6
 800979a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d102      	bne.n	80097a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80097a2:	2300      	movs	r3, #0
 80097a4:	75fb      	strb	r3, [r7, #23]
 80097a6:	e00a      	b.n	80097be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d002      	beq.n	80097b4 <USB_GetDevSpeed+0x32>
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2b06      	cmp	r3, #6
 80097b2:	d102      	bne.n	80097ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80097b4:	2302      	movs	r3, #2
 80097b6:	75fb      	strb	r3, [r7, #23]
 80097b8:	e001      	b.n	80097be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80097ba:	230f      	movs	r3, #15
 80097bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80097be:	7dfb      	ldrb	r3, [r7, #23]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	371c      	adds	r7, #28
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	785b      	ldrb	r3, [r3, #1]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d13a      	bne.n	800985e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097ee:	69da      	ldr	r2, [r3, #28]
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	f003 030f 	and.w	r3, r3, #15
 80097f8:	2101      	movs	r1, #1
 80097fa:	fa01 f303 	lsl.w	r3, r1, r3
 80097fe:	b29b      	uxth	r3, r3
 8009800:	68f9      	ldr	r1, [r7, #12]
 8009802:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009806:	4313      	orrs	r3, r2
 8009808:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	015a      	lsls	r2, r3, #5
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	4413      	add	r3, r2
 8009812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d155      	bne.n	80098cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	015a      	lsls	r2, r3, #5
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	4413      	add	r3, r2
 8009828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	791b      	ldrb	r3, [r3, #4]
 800983a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800983c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	059b      	lsls	r3, r3, #22
 8009842:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009844:	4313      	orrs	r3, r2
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	0151      	lsls	r1, r2, #5
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	440a      	add	r2, r1
 800984e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800985a:	6013      	str	r3, [r2, #0]
 800985c:	e036      	b.n	80098cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009864:	69da      	ldr	r2, [r3, #28]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	f003 030f 	and.w	r3, r3, #15
 800986e:	2101      	movs	r1, #1
 8009870:	fa01 f303 	lsl.w	r3, r1, r3
 8009874:	041b      	lsls	r3, r3, #16
 8009876:	68f9      	ldr	r1, [r7, #12]
 8009878:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800987c:	4313      	orrs	r3, r2
 800987e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	4413      	add	r3, r2
 8009888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009892:	2b00      	cmp	r3, #0
 8009894:	d11a      	bne.n	80098cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	015a      	lsls	r2, r3, #5
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	4413      	add	r3, r2
 800989e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	791b      	ldrb	r3, [r3, #4]
 80098b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80098b2:	430b      	orrs	r3, r1
 80098b4:	4313      	orrs	r3, r2
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	0151      	lsls	r1, r2, #5
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	440a      	add	r2, r1
 80098be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3714      	adds	r7, #20
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr
	...

080098dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	785b      	ldrb	r3, [r3, #1]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d161      	bne.n	80099bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	015a      	lsls	r2, r3, #5
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	4413      	add	r3, r2
 8009900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800990a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800990e:	d11f      	bne.n	8009950 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	015a      	lsls	r2, r3, #5
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	4413      	add	r3, r2
 8009918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68ba      	ldr	r2, [r7, #8]
 8009920:	0151      	lsls	r1, r2, #5
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	440a      	add	r2, r1
 8009926:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800992a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800992e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	015a      	lsls	r2, r3, #5
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	4413      	add	r3, r2
 8009938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68ba      	ldr	r2, [r7, #8]
 8009940:	0151      	lsls	r1, r2, #5
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	440a      	add	r2, r1
 8009946:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800994a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800994e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009956:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	f003 030f 	and.w	r3, r3, #15
 8009960:	2101      	movs	r1, #1
 8009962:	fa01 f303 	lsl.w	r3, r1, r3
 8009966:	b29b      	uxth	r3, r3
 8009968:	43db      	mvns	r3, r3
 800996a:	68f9      	ldr	r1, [r7, #12]
 800996c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009970:	4013      	ands	r3, r2
 8009972:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800997a:	69da      	ldr	r2, [r3, #28]
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	f003 030f 	and.w	r3, r3, #15
 8009984:	2101      	movs	r1, #1
 8009986:	fa01 f303 	lsl.w	r3, r1, r3
 800998a:	b29b      	uxth	r3, r3
 800998c:	43db      	mvns	r3, r3
 800998e:	68f9      	ldr	r1, [r7, #12]
 8009990:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009994:	4013      	ands	r3, r2
 8009996:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	015a      	lsls	r2, r3, #5
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	0159      	lsls	r1, r3, #5
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	440b      	add	r3, r1
 80099ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099b2:	4619      	mov	r1, r3
 80099b4:	4b35      	ldr	r3, [pc, #212]	@ (8009a8c <USB_DeactivateEndpoint+0x1b0>)
 80099b6:	4013      	ands	r3, r2
 80099b8:	600b      	str	r3, [r1, #0]
 80099ba:	e060      	b.n	8009a7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	015a      	lsls	r2, r3, #5
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	4413      	add	r3, r2
 80099c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099d2:	d11f      	bne.n	8009a14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	015a      	lsls	r2, r3, #5
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	4413      	add	r3, r2
 80099dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	0151      	lsls	r1, r2, #5
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	440a      	add	r2, r1
 80099ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80099f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	015a      	lsls	r2, r3, #5
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	4413      	add	r3, r2
 80099fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68ba      	ldr	r2, [r7, #8]
 8009a04:	0151      	lsls	r1, r2, #5
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	440a      	add	r2, r1
 8009a0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	f003 030f 	and.w	r3, r3, #15
 8009a24:	2101      	movs	r1, #1
 8009a26:	fa01 f303 	lsl.w	r3, r1, r3
 8009a2a:	041b      	lsls	r3, r3, #16
 8009a2c:	43db      	mvns	r3, r3
 8009a2e:	68f9      	ldr	r1, [r7, #12]
 8009a30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a34:	4013      	ands	r3, r2
 8009a36:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a3e:	69da      	ldr	r2, [r3, #28]
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	f003 030f 	and.w	r3, r3, #15
 8009a48:	2101      	movs	r1, #1
 8009a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8009a4e:	041b      	lsls	r3, r3, #16
 8009a50:	43db      	mvns	r3, r3
 8009a52:	68f9      	ldr	r1, [r7, #12]
 8009a54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a58:	4013      	ands	r3, r2
 8009a5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	015a      	lsls	r2, r3, #5
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4413      	add	r3, r2
 8009a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	0159      	lsls	r1, r3, #5
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	440b      	add	r3, r1
 8009a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a76:	4619      	mov	r1, r3
 8009a78:	4b05      	ldr	r3, [pc, #20]	@ (8009a90 <USB_DeactivateEndpoint+0x1b4>)
 8009a7a:	4013      	ands	r3, r2
 8009a7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	ec337800 	.word	0xec337800
 8009a90:	eff37800 	.word	0xeff37800

08009a94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b08a      	sub	sp, #40	@ 0x28
 8009a98:	af02      	add	r7, sp, #8
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	785b      	ldrb	r3, [r3, #1]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	f040 817f 	bne.w	8009db4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d132      	bne.n	8009b24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	015a      	lsls	r2, r3, #5
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	69ba      	ldr	r2, [r7, #24]
 8009ace:	0151      	lsls	r1, r2, #5
 8009ad0:	69fa      	ldr	r2, [r7, #28]
 8009ad2:	440a      	add	r2, r1
 8009ad4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ad8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009adc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009ae0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	015a      	lsls	r2, r3, #5
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	4413      	add	r3, r2
 8009aea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	69ba      	ldr	r2, [r7, #24]
 8009af2:	0151      	lsls	r1, r2, #5
 8009af4:	69fa      	ldr	r2, [r7, #28]
 8009af6:	440a      	add	r2, r1
 8009af8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009afc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	015a      	lsls	r2, r3, #5
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	4413      	add	r3, r2
 8009b0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	69ba      	ldr	r2, [r7, #24]
 8009b12:	0151      	lsls	r1, r2, #5
 8009b14:	69fa      	ldr	r2, [r7, #28]
 8009b16:	440a      	add	r2, r1
 8009b18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b1c:	0cdb      	lsrs	r3, r3, #19
 8009b1e:	04db      	lsls	r3, r3, #19
 8009b20:	6113      	str	r3, [r2, #16]
 8009b22:	e097      	b.n	8009c54 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	015a      	lsls	r2, r3, #5
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	69ba      	ldr	r2, [r7, #24]
 8009b34:	0151      	lsls	r1, r2, #5
 8009b36:	69fa      	ldr	r2, [r7, #28]
 8009b38:	440a      	add	r2, r1
 8009b3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b3e:	0cdb      	lsrs	r3, r3, #19
 8009b40:	04db      	lsls	r3, r3, #19
 8009b42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	015a      	lsls	r2, r3, #5
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	69ba      	ldr	r2, [r7, #24]
 8009b54:	0151      	lsls	r1, r2, #5
 8009b56:	69fa      	ldr	r2, [r7, #28]
 8009b58:	440a      	add	r2, r1
 8009b5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b5e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009b62:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009b66:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d11a      	bne.n	8009ba4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	691a      	ldr	r2, [r3, #16]
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d903      	bls.n	8009b82 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	689a      	ldr	r2, [r3, #8]
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	015a      	lsls	r2, r3, #5
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	4413      	add	r3, r2
 8009b8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b8e:	691b      	ldr	r3, [r3, #16]
 8009b90:	69ba      	ldr	r2, [r7, #24]
 8009b92:	0151      	lsls	r1, r2, #5
 8009b94:	69fa      	ldr	r2, [r7, #28]
 8009b96:	440a      	add	r2, r1
 8009b98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ba0:	6113      	str	r3, [r2, #16]
 8009ba2:	e044      	b.n	8009c2e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	691a      	ldr	r2, [r3, #16]
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	4413      	add	r3, r2
 8009bae:	1e5a      	subs	r2, r3, #1
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bb8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	015a      	lsls	r2, r3, #5
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bc6:	691a      	ldr	r2, [r3, #16]
 8009bc8:	8afb      	ldrh	r3, [r7, #22]
 8009bca:	04d9      	lsls	r1, r3, #19
 8009bcc:	4ba4      	ldr	r3, [pc, #656]	@ (8009e60 <USB_EPStartXfer+0x3cc>)
 8009bce:	400b      	ands	r3, r1
 8009bd0:	69b9      	ldr	r1, [r7, #24]
 8009bd2:	0148      	lsls	r0, r1, #5
 8009bd4:	69f9      	ldr	r1, [r7, #28]
 8009bd6:	4401      	add	r1, r0
 8009bd8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	791b      	ldrb	r3, [r3, #4]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d122      	bne.n	8009c2e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	015a      	lsls	r2, r3, #5
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	69ba      	ldr	r2, [r7, #24]
 8009bf8:	0151      	lsls	r1, r2, #5
 8009bfa:	69fa      	ldr	r2, [r7, #28]
 8009bfc:	440a      	add	r2, r1
 8009bfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c02:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009c06:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	015a      	lsls	r2, r3, #5
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	4413      	add	r3, r2
 8009c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c14:	691a      	ldr	r2, [r3, #16]
 8009c16:	8afb      	ldrh	r3, [r7, #22]
 8009c18:	075b      	lsls	r3, r3, #29
 8009c1a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009c1e:	69b9      	ldr	r1, [r7, #24]
 8009c20:	0148      	lsls	r0, r1, #5
 8009c22:	69f9      	ldr	r1, [r7, #28]
 8009c24:	4401      	add	r1, r0
 8009c26:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	015a      	lsls	r2, r3, #5
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	4413      	add	r3, r2
 8009c36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c3a:	691a      	ldr	r2, [r3, #16]
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c44:	69b9      	ldr	r1, [r7, #24]
 8009c46:	0148      	lsls	r0, r1, #5
 8009c48:	69f9      	ldr	r1, [r7, #28]
 8009c4a:	4401      	add	r1, r0
 8009c4c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009c50:	4313      	orrs	r3, r2
 8009c52:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009c54:	79fb      	ldrb	r3, [r7, #7]
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d14b      	bne.n	8009cf2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	69db      	ldr	r3, [r3, #28]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d009      	beq.n	8009c76 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	015a      	lsls	r2, r3, #5
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	4413      	add	r3, r2
 8009c6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c6e:	461a      	mov	r2, r3
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	69db      	ldr	r3, [r3, #28]
 8009c74:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	791b      	ldrb	r3, [r3, #4]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d128      	bne.n	8009cd0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d110      	bne.n	8009cb0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	015a      	lsls	r2, r3, #5
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	4413      	add	r3, r2
 8009c96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	69ba      	ldr	r2, [r7, #24]
 8009c9e:	0151      	lsls	r1, r2, #5
 8009ca0:	69fa      	ldr	r2, [r7, #28]
 8009ca2:	440a      	add	r2, r1
 8009ca4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ca8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009cac:	6013      	str	r3, [r2, #0]
 8009cae:	e00f      	b.n	8009cd0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	015a      	lsls	r2, r3, #5
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	69ba      	ldr	r2, [r7, #24]
 8009cc0:	0151      	lsls	r1, r2, #5
 8009cc2:	69fa      	ldr	r2, [r7, #28]
 8009cc4:	440a      	add	r2, r1
 8009cc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009cce:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	015a      	lsls	r2, r3, #5
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	69ba      	ldr	r2, [r7, #24]
 8009ce0:	0151      	lsls	r1, r2, #5
 8009ce2:	69fa      	ldr	r2, [r7, #28]
 8009ce4:	440a      	add	r2, r1
 8009ce6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009cee:	6013      	str	r3, [r2, #0]
 8009cf0:	e166      	b.n	8009fc0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	015a      	lsls	r2, r3, #5
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	69ba      	ldr	r2, [r7, #24]
 8009d02:	0151      	lsls	r1, r2, #5
 8009d04:	69fa      	ldr	r2, [r7, #28]
 8009d06:	440a      	add	r2, r1
 8009d08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d0c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009d10:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	791b      	ldrb	r3, [r3, #4]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d015      	beq.n	8009d46 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f000 814e 	beq.w	8009fc0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	f003 030f 	and.w	r3, r3, #15
 8009d34:	2101      	movs	r1, #1
 8009d36:	fa01 f303 	lsl.w	r3, r1, r3
 8009d3a:	69f9      	ldr	r1, [r7, #28]
 8009d3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d40:	4313      	orrs	r3, r2
 8009d42:	634b      	str	r3, [r1, #52]	@ 0x34
 8009d44:	e13c      	b.n	8009fc0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d110      	bne.n	8009d78 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	015a      	lsls	r2, r3, #5
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	69ba      	ldr	r2, [r7, #24]
 8009d66:	0151      	lsls	r1, r2, #5
 8009d68:	69fa      	ldr	r2, [r7, #28]
 8009d6a:	440a      	add	r2, r1
 8009d6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d70:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009d74:	6013      	str	r3, [r2, #0]
 8009d76:	e00f      	b.n	8009d98 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	015a      	lsls	r2, r3, #5
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	4413      	add	r3, r2
 8009d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	69ba      	ldr	r2, [r7, #24]
 8009d88:	0151      	lsls	r1, r2, #5
 8009d8a:	69fa      	ldr	r2, [r7, #28]
 8009d8c:	440a      	add	r2, r1
 8009d8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d96:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	68d9      	ldr	r1, [r3, #12]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	781a      	ldrb	r2, [r3, #0]
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	b298      	uxth	r0, r3
 8009da6:	79fb      	ldrb	r3, [r7, #7]
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	4603      	mov	r3, r0
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f000 f9b9 	bl	800a124 <USB_WritePacket>
 8009db2:	e105      	b.n	8009fc0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	015a      	lsls	r2, r3, #5
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	4413      	add	r3, r2
 8009dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	69ba      	ldr	r2, [r7, #24]
 8009dc4:	0151      	lsls	r1, r2, #5
 8009dc6:	69fa      	ldr	r2, [r7, #28]
 8009dc8:	440a      	add	r2, r1
 8009dca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dce:	0cdb      	lsrs	r3, r3, #19
 8009dd0:	04db      	lsls	r3, r3, #19
 8009dd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	015a      	lsls	r2, r3, #5
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	4413      	add	r3, r2
 8009ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009de0:	691b      	ldr	r3, [r3, #16]
 8009de2:	69ba      	ldr	r2, [r7, #24]
 8009de4:	0151      	lsls	r1, r2, #5
 8009de6:	69fa      	ldr	r2, [r7, #28]
 8009de8:	440a      	add	r2, r1
 8009dea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009df2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009df6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d132      	bne.n	8009e64 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d003      	beq.n	8009e0e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	689a      	ldr	r2, [r3, #8]
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	689a      	ldr	r2, [r3, #8]
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	015a      	lsls	r2, r3, #5
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e22:	691a      	ldr	r2, [r3, #16]
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	6a1b      	ldr	r3, [r3, #32]
 8009e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e2c:	69b9      	ldr	r1, [r7, #24]
 8009e2e:	0148      	lsls	r0, r1, #5
 8009e30:	69f9      	ldr	r1, [r7, #28]
 8009e32:	4401      	add	r1, r0
 8009e34:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	015a      	lsls	r2, r3, #5
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	4413      	add	r3, r2
 8009e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	69ba      	ldr	r2, [r7, #24]
 8009e4c:	0151      	lsls	r1, r2, #5
 8009e4e:	69fa      	ldr	r2, [r7, #28]
 8009e50:	440a      	add	r2, r1
 8009e52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e5a:	6113      	str	r3, [r2, #16]
 8009e5c:	e062      	b.n	8009f24 <USB_EPStartXfer+0x490>
 8009e5e:	bf00      	nop
 8009e60:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d123      	bne.n	8009eb4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	015a      	lsls	r2, r3, #5
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	4413      	add	r3, r2
 8009e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e78:	691a      	ldr	r2, [r3, #16]
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e82:	69b9      	ldr	r1, [r7, #24]
 8009e84:	0148      	lsls	r0, r1, #5
 8009e86:	69f9      	ldr	r1, [r7, #28]
 8009e88:	4401      	add	r1, r0
 8009e8a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	015a      	lsls	r2, r3, #5
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	4413      	add	r3, r2
 8009e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	69ba      	ldr	r2, [r7, #24]
 8009ea2:	0151      	lsls	r1, r2, #5
 8009ea4:	69fa      	ldr	r2, [r7, #28]
 8009ea6:	440a      	add	r2, r1
 8009ea8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009eac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009eb0:	6113      	str	r3, [r2, #16]
 8009eb2:	e037      	b.n	8009f24 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	691a      	ldr	r2, [r3, #16]
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	1e5a      	subs	r2, r3, #1
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ec8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	8afa      	ldrh	r2, [r7, #22]
 8009ed0:	fb03 f202 	mul.w	r2, r3, r2
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	015a      	lsls	r2, r3, #5
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	4413      	add	r3, r2
 8009ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ee4:	691a      	ldr	r2, [r3, #16]
 8009ee6:	8afb      	ldrh	r3, [r7, #22]
 8009ee8:	04d9      	lsls	r1, r3, #19
 8009eea:	4b38      	ldr	r3, [pc, #224]	@ (8009fcc <USB_EPStartXfer+0x538>)
 8009eec:	400b      	ands	r3, r1
 8009eee:	69b9      	ldr	r1, [r7, #24]
 8009ef0:	0148      	lsls	r0, r1, #5
 8009ef2:	69f9      	ldr	r1, [r7, #28]
 8009ef4:	4401      	add	r1, r0
 8009ef6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009efa:	4313      	orrs	r3, r2
 8009efc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009efe:	69bb      	ldr	r3, [r7, #24]
 8009f00:	015a      	lsls	r2, r3, #5
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	4413      	add	r3, r2
 8009f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f0a:	691a      	ldr	r2, [r3, #16]
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	6a1b      	ldr	r3, [r3, #32]
 8009f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f14:	69b9      	ldr	r1, [r7, #24]
 8009f16:	0148      	lsls	r0, r1, #5
 8009f18:	69f9      	ldr	r1, [r7, #28]
 8009f1a:	4401      	add	r1, r0
 8009f1c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009f20:	4313      	orrs	r3, r2
 8009f22:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009f24:	79fb      	ldrb	r3, [r7, #7]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d10d      	bne.n	8009f46 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d009      	beq.n	8009f46 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	68d9      	ldr	r1, [r3, #12]
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	015a      	lsls	r2, r3, #5
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f42:	460a      	mov	r2, r1
 8009f44:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	791b      	ldrb	r3, [r3, #4]
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d128      	bne.n	8009fa0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d110      	bne.n	8009f80 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	015a      	lsls	r2, r3, #5
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	4413      	add	r3, r2
 8009f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	69ba      	ldr	r2, [r7, #24]
 8009f6e:	0151      	lsls	r1, r2, #5
 8009f70:	69fa      	ldr	r2, [r7, #28]
 8009f72:	440a      	add	r2, r1
 8009f74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009f7c:	6013      	str	r3, [r2, #0]
 8009f7e:	e00f      	b.n	8009fa0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	015a      	lsls	r2, r3, #5
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	4413      	add	r3, r2
 8009f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	69ba      	ldr	r2, [r7, #24]
 8009f90:	0151      	lsls	r1, r2, #5
 8009f92:	69fa      	ldr	r2, [r7, #28]
 8009f94:	440a      	add	r2, r1
 8009f96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f9e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	015a      	lsls	r2, r3, #5
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	69ba      	ldr	r2, [r7, #24]
 8009fb0:	0151      	lsls	r1, r2, #5
 8009fb2:	69fa      	ldr	r2, [r7, #28]
 8009fb4:	440a      	add	r2, r1
 8009fb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009fbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3720      	adds	r7, #32
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	1ff80000 	.word	0x1ff80000

08009fd0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b087      	sub	sp, #28
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	785b      	ldrb	r3, [r3, #1]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d14a      	bne.n	800a084 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	015a      	lsls	r2, r3, #5
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a002:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a006:	f040 8086 	bne.w	800a116 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	015a      	lsls	r2, r3, #5
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	4413      	add	r3, r2
 800a014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	683a      	ldr	r2, [r7, #0]
 800a01c:	7812      	ldrb	r2, [r2, #0]
 800a01e:	0151      	lsls	r1, r2, #5
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	440a      	add	r2, r1
 800a024:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a028:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a02c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	015a      	lsls	r2, r3, #5
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	4413      	add	r3, r2
 800a038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	7812      	ldrb	r2, [r2, #0]
 800a042:	0151      	lsls	r1, r2, #5
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	440a      	add	r2, r1
 800a048:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a04c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a050:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	3301      	adds	r3, #1
 800a056:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a05e:	4293      	cmp	r3, r2
 800a060:	d902      	bls.n	800a068 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	75fb      	strb	r3, [r7, #23]
          break;
 800a066:	e056      	b.n	800a116 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	015a      	lsls	r2, r3, #5
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	4413      	add	r3, r2
 800a072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a07c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a080:	d0e7      	beq.n	800a052 <USB_EPStopXfer+0x82>
 800a082:	e048      	b.n	800a116 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	015a      	lsls	r2, r3, #5
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	4413      	add	r3, r2
 800a08e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a098:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a09c:	d13b      	bne.n	800a116 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	015a      	lsls	r2, r3, #5
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	683a      	ldr	r2, [r7, #0]
 800a0b0:	7812      	ldrb	r2, [r2, #0]
 800a0b2:	0151      	lsls	r1, r2, #5
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	440a      	add	r2, r1
 800a0b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a0c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	015a      	lsls	r2, r3, #5
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	683a      	ldr	r2, [r7, #0]
 800a0d4:	7812      	ldrb	r2, [r2, #0]
 800a0d6:	0151      	lsls	r1, r2, #5
 800a0d8:	693a      	ldr	r2, [r7, #16]
 800a0da:	440a      	add	r2, r1
 800a0dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a0e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d902      	bls.n	800a0fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	75fb      	strb	r3, [r7, #23]
          break;
 800a0fa:	e00c      	b.n	800a116 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	015a      	lsls	r2, r3, #5
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	4413      	add	r3, r2
 800a106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a110:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a114:	d0e7      	beq.n	800a0e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a116:	7dfb      	ldrb	r3, [r7, #23]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	371c      	adds	r7, #28
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a124:	b480      	push	{r7}
 800a126:	b089      	sub	sp, #36	@ 0x24
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	4611      	mov	r1, r2
 800a130:	461a      	mov	r2, r3
 800a132:	460b      	mov	r3, r1
 800a134:	71fb      	strb	r3, [r7, #7]
 800a136:	4613      	mov	r3, r2
 800a138:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a142:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a146:	2b00      	cmp	r3, #0
 800a148:	d123      	bne.n	800a192 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a14a:	88bb      	ldrh	r3, [r7, #4]
 800a14c:	3303      	adds	r3, #3
 800a14e:	089b      	lsrs	r3, r3, #2
 800a150:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a152:	2300      	movs	r3, #0
 800a154:	61bb      	str	r3, [r7, #24]
 800a156:	e018      	b.n	800a18a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a158:	79fb      	ldrb	r3, [r7, #7]
 800a15a:	031a      	lsls	r2, r3, #12
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	4413      	add	r3, r2
 800a160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a164:	461a      	mov	r2, r3
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	3301      	adds	r3, #1
 800a170:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	3301      	adds	r3, #1
 800a176:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	3301      	adds	r3, #1
 800a17c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	3301      	adds	r3, #1
 800a182:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	3301      	adds	r3, #1
 800a188:	61bb      	str	r3, [r7, #24]
 800a18a:	69ba      	ldr	r2, [r7, #24]
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d3e2      	bcc.n	800a158 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3724      	adds	r7, #36	@ 0x24
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b08b      	sub	sp, #44	@ 0x2c
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a1b6:	88fb      	ldrh	r3, [r7, #6]
 800a1b8:	089b      	lsrs	r3, r3, #2
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a1be:	88fb      	ldrh	r3, [r7, #6]
 800a1c0:	f003 0303 	and.w	r3, r3, #3
 800a1c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	623b      	str	r3, [r7, #32]
 800a1ca:	e014      	b.n	800a1f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d6:	601a      	str	r2, [r3, #0]
    pDest++;
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1da:	3301      	adds	r3, #1
 800a1dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a1f0:	6a3b      	ldr	r3, [r7, #32]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	623b      	str	r3, [r7, #32]
 800a1f6:	6a3a      	ldr	r2, [r7, #32]
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d3e6      	bcc.n	800a1cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a1fe:	8bfb      	ldrh	r3, [r7, #30]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d01e      	beq.n	800a242 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a204:	2300      	movs	r3, #0
 800a206:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a20e:	461a      	mov	r2, r3
 800a210:	f107 0310 	add.w	r3, r7, #16
 800a214:	6812      	ldr	r2, [r2, #0]
 800a216:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	6a3b      	ldr	r3, [r7, #32]
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	00db      	lsls	r3, r3, #3
 800a220:	fa22 f303 	lsr.w	r3, r2, r3
 800a224:	b2da      	uxtb	r2, r3
 800a226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a228:	701a      	strb	r2, [r3, #0]
      i++;
 800a22a:	6a3b      	ldr	r3, [r7, #32]
 800a22c:	3301      	adds	r3, #1
 800a22e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a232:	3301      	adds	r3, #1
 800a234:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a236:	8bfb      	ldrh	r3, [r7, #30]
 800a238:	3b01      	subs	r3, #1
 800a23a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a23c:	8bfb      	ldrh	r3, [r7, #30]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1ea      	bne.n	800a218 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a244:	4618      	mov	r0, r3
 800a246:	372c      	adds	r7, #44	@ 0x2c
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	785b      	ldrb	r3, [r3, #1]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d12c      	bne.n	800a2c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	015a      	lsls	r2, r3, #5
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	4413      	add	r3, r2
 800a274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	db12      	blt.n	800a2a4 <USB_EPSetStall+0x54>
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00f      	beq.n	800a2a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	015a      	lsls	r2, r3, #5
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	4413      	add	r3, r2
 800a28c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	0151      	lsls	r1, r2, #5
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	440a      	add	r2, r1
 800a29a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a29e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a2a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	015a      	lsls	r2, r3, #5
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	68ba      	ldr	r2, [r7, #8]
 800a2b4:	0151      	lsls	r1, r2, #5
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	440a      	add	r2, r1
 800a2ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a2c2:	6013      	str	r3, [r2, #0]
 800a2c4:	e02b      	b.n	800a31e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	015a      	lsls	r2, r3, #5
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	db12      	blt.n	800a2fe <USB_EPSetStall+0xae>
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00f      	beq.n	800a2fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	015a      	lsls	r2, r3, #5
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	0151      	lsls	r1, r2, #5
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	440a      	add	r2, r1
 800a2f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a2fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	015a      	lsls	r2, r3, #5
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	4413      	add	r3, r2
 800a306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	0151      	lsls	r1, r2, #5
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	440a      	add	r2, r1
 800a314:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a318:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a31c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3714      	adds	r7, #20
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	785b      	ldrb	r3, [r3, #1]
 800a344:	2b01      	cmp	r3, #1
 800a346:	d128      	bne.n	800a39a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	015a      	lsls	r2, r3, #5
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	4413      	add	r3, r2
 800a350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	68ba      	ldr	r2, [r7, #8]
 800a358:	0151      	lsls	r1, r2, #5
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	440a      	add	r2, r1
 800a35e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a362:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a366:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	791b      	ldrb	r3, [r3, #4]
 800a36c:	2b03      	cmp	r3, #3
 800a36e:	d003      	beq.n	800a378 <USB_EPClearStall+0x4c>
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	791b      	ldrb	r3, [r3, #4]
 800a374:	2b02      	cmp	r3, #2
 800a376:	d138      	bne.n	800a3ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	015a      	lsls	r2, r3, #5
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	4413      	add	r3, r2
 800a380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	0151      	lsls	r1, r2, #5
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	440a      	add	r2, r1
 800a38e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a392:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a396:	6013      	str	r3, [r2, #0]
 800a398:	e027      	b.n	800a3ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	015a      	lsls	r2, r3, #5
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	0151      	lsls	r1, r2, #5
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	440a      	add	r2, r1
 800a3b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a3b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	791b      	ldrb	r3, [r3, #4]
 800a3be:	2b03      	cmp	r3, #3
 800a3c0:	d003      	beq.n	800a3ca <USB_EPClearStall+0x9e>
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	791b      	ldrb	r3, [r3, #4]
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	d10f      	bne.n	800a3ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	015a      	lsls	r2, r3, #5
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	68ba      	ldr	r2, [r7, #8]
 800a3da:	0151      	lsls	r1, r2, #5
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	440a      	add	r2, r1
 800a3e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3714      	adds	r7, #20
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b085      	sub	sp, #20
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	460b      	mov	r3, r1
 800a402:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a416:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a41a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	78fb      	ldrb	r3, [r7, #3]
 800a426:	011b      	lsls	r3, r3, #4
 800a428:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a42c:	68f9      	ldr	r1, [r7, #12]
 800a42e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a432:	4313      	orrs	r3, r2
 800a434:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a45e:	f023 0303 	bic.w	r3, r3, #3
 800a462:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a472:	f023 0302 	bic.w	r3, r3, #2
 800a476:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3714      	adds	r7, #20
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr

0800a486 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a486:	b480      	push	{r7}
 800a488:	b085      	sub	sp, #20
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a4a0:	f023 0303 	bic.w	r3, r3, #3
 800a4a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4b4:	f043 0302 	orr.w	r3, r3, #2
 800a4b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	695b      	ldr	r3, [r3, #20]
 800a4d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	699b      	ldr	r3, [r3, #24]
 800a4da:	68fa      	ldr	r2, [r7, #12]
 800a4dc:	4013      	ands	r3, r2
 800a4de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3714      	adds	r7, #20
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr

0800a4ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a4ee:	b480      	push	{r7}
 800a4f0:	b085      	sub	sp, #20
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a500:	699b      	ldr	r3, [r3, #24]
 800a502:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a50a:	69db      	ldr	r3, [r3, #28]
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	4013      	ands	r3, r2
 800a510:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	0c1b      	lsrs	r3, r3, #16
}
 800a516:	4618      	mov	r0, r3
 800a518:	3714      	adds	r7, #20
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a522:	b480      	push	{r7}
 800a524:	b085      	sub	sp, #20
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a534:	699b      	ldr	r3, [r3, #24]
 800a536:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a53e:	69db      	ldr	r3, [r3, #28]
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	4013      	ands	r3, r2
 800a544:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	b29b      	uxth	r3, r3
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3714      	adds	r7, #20
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr

0800a556 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a556:	b480      	push	{r7}
 800a558:	b085      	sub	sp, #20
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	460b      	mov	r3, r1
 800a560:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a566:	78fb      	ldrb	r3, [r7, #3]
 800a568:	015a      	lsls	r2, r3, #5
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	4413      	add	r3, r2
 800a56e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	68ba      	ldr	r2, [r7, #8]
 800a580:	4013      	ands	r3, r2
 800a582:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a584:	68bb      	ldr	r3, [r7, #8]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3714      	adds	r7, #20
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr

0800a592 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a592:	b480      	push	{r7}
 800a594:	b087      	sub	sp, #28
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	460b      	mov	r3, r1
 800a59c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a5b6:	78fb      	ldrb	r3, [r7, #3]
 800a5b8:	f003 030f 	and.w	r3, r3, #15
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	fa22 f303 	lsr.w	r3, r2, r3
 800a5c2:	01db      	lsls	r3, r3, #7
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	693a      	ldr	r2, [r7, #16]
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a5cc:	78fb      	ldrb	r3, [r7, #3]
 800a5ce:	015a      	lsls	r2, r3, #5
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	693a      	ldr	r2, [r7, #16]
 800a5dc:	4013      	ands	r3, r2
 800a5de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a5e0:	68bb      	ldr	r3, [r7, #8]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	371c      	adds	r7, #28
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr

0800a5ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a5ee:	b480      	push	{r7}
 800a5f0:	b083      	sub	sp, #12
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	695b      	ldr	r3, [r3, #20]
 800a5fa:	f003 0301 	and.w	r3, r3, #1
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	370c      	adds	r7, #12
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr

0800a60a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b085      	sub	sp, #20
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	68fa      	ldr	r2, [r7, #12]
 800a620:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a624:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a628:	f023 0307 	bic.w	r3, r3, #7
 800a62c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a63c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a640:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a650:	b480      	push	{r7}
 800a652:	b087      	sub	sp, #28
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	460b      	mov	r3, r1
 800a65a:	607a      	str	r2, [r7, #4]
 800a65c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	333c      	adds	r3, #60	@ 0x3c
 800a666:	3304      	adds	r3, #4
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	4a26      	ldr	r2, [pc, #152]	@ (800a708 <USB_EP0_OutStart+0xb8>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d90a      	bls.n	800a68a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a680:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a684:	d101      	bne.n	800a68a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a686:	2300      	movs	r3, #0
 800a688:	e037      	b.n	800a6fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a690:	461a      	mov	r2, r3
 800a692:	2300      	movs	r3, #0
 800a694:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	697a      	ldr	r2, [r7, #20]
 800a6a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a6a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6b8:	f043 0318 	orr.w	r3, r3, #24
 800a6bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	697a      	ldr	r2, [r7, #20]
 800a6c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6cc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a6d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a6d2:	7afb      	ldrb	r3, [r7, #11]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d10f      	bne.n	800a6f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6de:	461a      	mov	r2, r3
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	697a      	ldr	r2, [r7, #20]
 800a6ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6f2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a6f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	371c      	adds	r7, #28
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr
 800a706:	bf00      	nop
 800a708:	4f54300a 	.word	0x4f54300a

0800a70c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a714:	2300      	movs	r3, #0
 800a716:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	3301      	adds	r3, #1
 800a71c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a724:	d901      	bls.n	800a72a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a726:	2303      	movs	r3, #3
 800a728:	e01b      	b.n	800a762 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	daf2      	bge.n	800a718 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a732:	2300      	movs	r3, #0
 800a734:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	f043 0201 	orr.w	r2, r3, #1
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	3301      	adds	r3, #1
 800a746:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a74e:	d901      	bls.n	800a754 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a750:	2303      	movs	r3, #3
 800a752:	e006      	b.n	800a762 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	f003 0301 	and.w	r3, r3, #1
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d0f0      	beq.n	800a742 <USB_CoreReset+0x36>

  return HAL_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3714      	adds	r7, #20
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr
	...

0800a770 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	460b      	mov	r3, r1
 800a77a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a77c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a780:	f002 fc46 	bl	800d010 <USBD_static_malloc>
 800a784:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d109      	bne.n	800a7a0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	32b0      	adds	r2, #176	@ 0xb0
 800a796:	2100      	movs	r1, #0
 800a798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a79c:	2302      	movs	r3, #2
 800a79e:	e0d4      	b.n	800a94a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a7a0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f003 fb73 	bl	800de92 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	32b0      	adds	r2, #176	@ 0xb0
 800a7b6:	68f9      	ldr	r1, [r7, #12]
 800a7b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	32b0      	adds	r2, #176	@ 0xb0
 800a7c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	7c1b      	ldrb	r3, [r3, #16]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d138      	bne.n	800a84a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a7d8:	4b5e      	ldr	r3, [pc, #376]	@ (800a954 <USBD_CDC_Init+0x1e4>)
 800a7da:	7819      	ldrb	r1, [r3, #0]
 800a7dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7e0:	2202      	movs	r2, #2
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f002 faf1 	bl	800cdca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a7e8:	4b5a      	ldr	r3, [pc, #360]	@ (800a954 <USBD_CDC_Init+0x1e4>)
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	f003 020f 	and.w	r2, r3, #15
 800a7f0:	6879      	ldr	r1, [r7, #4]
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	4413      	add	r3, r2
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	440b      	add	r3, r1
 800a7fc:	3324      	adds	r3, #36	@ 0x24
 800a7fe:	2201      	movs	r2, #1
 800a800:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a802:	4b55      	ldr	r3, [pc, #340]	@ (800a958 <USBD_CDC_Init+0x1e8>)
 800a804:	7819      	ldrb	r1, [r3, #0]
 800a806:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a80a:	2202      	movs	r2, #2
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f002 fadc 	bl	800cdca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a812:	4b51      	ldr	r3, [pc, #324]	@ (800a958 <USBD_CDC_Init+0x1e8>)
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	f003 020f 	and.w	r2, r3, #15
 800a81a:	6879      	ldr	r1, [r7, #4]
 800a81c:	4613      	mov	r3, r2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	4413      	add	r3, r2
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	440b      	add	r3, r1
 800a826:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a82a:	2201      	movs	r2, #1
 800a82c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a82e:	4b4b      	ldr	r3, [pc, #300]	@ (800a95c <USBD_CDC_Init+0x1ec>)
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	f003 020f 	and.w	r2, r3, #15
 800a836:	6879      	ldr	r1, [r7, #4]
 800a838:	4613      	mov	r3, r2
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	4413      	add	r3, r2
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	440b      	add	r3, r1
 800a842:	3326      	adds	r3, #38	@ 0x26
 800a844:	2210      	movs	r2, #16
 800a846:	801a      	strh	r2, [r3, #0]
 800a848:	e035      	b.n	800a8b6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a84a:	4b42      	ldr	r3, [pc, #264]	@ (800a954 <USBD_CDC_Init+0x1e4>)
 800a84c:	7819      	ldrb	r1, [r3, #0]
 800a84e:	2340      	movs	r3, #64	@ 0x40
 800a850:	2202      	movs	r2, #2
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f002 fab9 	bl	800cdca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a858:	4b3e      	ldr	r3, [pc, #248]	@ (800a954 <USBD_CDC_Init+0x1e4>)
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	f003 020f 	and.w	r2, r3, #15
 800a860:	6879      	ldr	r1, [r7, #4]
 800a862:	4613      	mov	r3, r2
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	4413      	add	r3, r2
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	440b      	add	r3, r1
 800a86c:	3324      	adds	r3, #36	@ 0x24
 800a86e:	2201      	movs	r2, #1
 800a870:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a872:	4b39      	ldr	r3, [pc, #228]	@ (800a958 <USBD_CDC_Init+0x1e8>)
 800a874:	7819      	ldrb	r1, [r3, #0]
 800a876:	2340      	movs	r3, #64	@ 0x40
 800a878:	2202      	movs	r2, #2
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f002 faa5 	bl	800cdca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a880:	4b35      	ldr	r3, [pc, #212]	@ (800a958 <USBD_CDC_Init+0x1e8>)
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	f003 020f 	and.w	r2, r3, #15
 800a888:	6879      	ldr	r1, [r7, #4]
 800a88a:	4613      	mov	r3, r2
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	4413      	add	r3, r2
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	440b      	add	r3, r1
 800a894:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a898:	2201      	movs	r2, #1
 800a89a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a89c:	4b2f      	ldr	r3, [pc, #188]	@ (800a95c <USBD_CDC_Init+0x1ec>)
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	f003 020f 	and.w	r2, r3, #15
 800a8a4:	6879      	ldr	r1, [r7, #4]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4413      	add	r3, r2
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	440b      	add	r3, r1
 800a8b0:	3326      	adds	r3, #38	@ 0x26
 800a8b2:	2210      	movs	r2, #16
 800a8b4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a8b6:	4b29      	ldr	r3, [pc, #164]	@ (800a95c <USBD_CDC_Init+0x1ec>)
 800a8b8:	7819      	ldrb	r1, [r3, #0]
 800a8ba:	2308      	movs	r3, #8
 800a8bc:	2203      	movs	r2, #3
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f002 fa83 	bl	800cdca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a8c4:	4b25      	ldr	r3, [pc, #148]	@ (800a95c <USBD_CDC_Init+0x1ec>)
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	f003 020f 	and.w	r2, r3, #15
 800a8cc:	6879      	ldr	r1, [r7, #4]
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	4413      	add	r3, r2
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	440b      	add	r3, r1
 800a8d8:	3324      	adds	r3, #36	@ 0x24
 800a8da:	2201      	movs	r2, #1
 800a8dc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	33b0      	adds	r3, #176	@ 0xb0
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	4413      	add	r3, r2
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2200      	movs	r2, #0
 800a906:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a910:	2b00      	cmp	r3, #0
 800a912:	d101      	bne.n	800a918 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a914:	2302      	movs	r3, #2
 800a916:	e018      	b.n	800a94a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	7c1b      	ldrb	r3, [r3, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10a      	bne.n	800a936 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a920:	4b0d      	ldr	r3, [pc, #52]	@ (800a958 <USBD_CDC_Init+0x1e8>)
 800a922:	7819      	ldrb	r1, [r3, #0]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a92a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f002 fb3a 	bl	800cfa8 <USBD_LL_PrepareReceive>
 800a934:	e008      	b.n	800a948 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a936:	4b08      	ldr	r3, [pc, #32]	@ (800a958 <USBD_CDC_Init+0x1e8>)
 800a938:	7819      	ldrb	r1, [r3, #0]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a940:	2340      	movs	r3, #64	@ 0x40
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f002 fb30 	bl	800cfa8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3710      	adds	r7, #16
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	20000097 	.word	0x20000097
 800a958:	20000098 	.word	0x20000098
 800a95c:	20000099 	.word	0x20000099

0800a960 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	460b      	mov	r3, r1
 800a96a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a96c:	4b3a      	ldr	r3, [pc, #232]	@ (800aa58 <USBD_CDC_DeInit+0xf8>)
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	4619      	mov	r1, r3
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f002 fa4f 	bl	800ce16 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a978:	4b37      	ldr	r3, [pc, #220]	@ (800aa58 <USBD_CDC_DeInit+0xf8>)
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	f003 020f 	and.w	r2, r3, #15
 800a980:	6879      	ldr	r1, [r7, #4]
 800a982:	4613      	mov	r3, r2
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	4413      	add	r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	440b      	add	r3, r1
 800a98c:	3324      	adds	r3, #36	@ 0x24
 800a98e:	2200      	movs	r2, #0
 800a990:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a992:	4b32      	ldr	r3, [pc, #200]	@ (800aa5c <USBD_CDC_DeInit+0xfc>)
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	4619      	mov	r1, r3
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f002 fa3c 	bl	800ce16 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a99e:	4b2f      	ldr	r3, [pc, #188]	@ (800aa5c <USBD_CDC_DeInit+0xfc>)
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	f003 020f 	and.w	r2, r3, #15
 800a9a6:	6879      	ldr	r1, [r7, #4]
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	4413      	add	r3, r2
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	440b      	add	r3, r1
 800a9b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a9ba:	4b29      	ldr	r3, [pc, #164]	@ (800aa60 <USBD_CDC_DeInit+0x100>)
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f002 fa28 	bl	800ce16 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a9c6:	4b26      	ldr	r3, [pc, #152]	@ (800aa60 <USBD_CDC_DeInit+0x100>)
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	f003 020f 	and.w	r2, r3, #15
 800a9ce:	6879      	ldr	r1, [r7, #4]
 800a9d0:	4613      	mov	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	4413      	add	r3, r2
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	440b      	add	r3, r1
 800a9da:	3324      	adds	r3, #36	@ 0x24
 800a9dc:	2200      	movs	r2, #0
 800a9de:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a9e0:	4b1f      	ldr	r3, [pc, #124]	@ (800aa60 <USBD_CDC_DeInit+0x100>)
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	f003 020f 	and.w	r2, r3, #15
 800a9e8:	6879      	ldr	r1, [r7, #4]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4413      	add	r3, r2
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	440b      	add	r3, r1
 800a9f4:	3326      	adds	r3, #38	@ 0x26
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	32b0      	adds	r2, #176	@ 0xb0
 800aa04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d01f      	beq.n	800aa4c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	33b0      	adds	r3, #176	@ 0xb0
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4413      	add	r3, r2
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	32b0      	adds	r2, #176	@ 0xb0
 800aa2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f002 fafc 	bl	800d02c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	32b0      	adds	r2, #176	@ 0xb0
 800aa3e:	2100      	movs	r1, #0
 800aa40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	20000097 	.word	0x20000097
 800aa5c:	20000098 	.word	0x20000098
 800aa60:	20000099 	.word	0x20000099

0800aa64 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	32b0      	adds	r2, #176	@ 0xb0
 800aa78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa7c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aa82:	2300      	movs	r3, #0
 800aa84:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa86:	2300      	movs	r3, #0
 800aa88:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d101      	bne.n	800aa94 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800aa90:	2303      	movs	r3, #3
 800aa92:	e0bf      	b.n	800ac14 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d050      	beq.n	800ab42 <USBD_CDC_Setup+0xde>
 800aaa0:	2b20      	cmp	r3, #32
 800aaa2:	f040 80af 	bne.w	800ac04 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	88db      	ldrh	r3, [r3, #6]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d03a      	beq.n	800ab24 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	b25b      	sxtb	r3, r3
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	da1b      	bge.n	800aaf0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	33b0      	adds	r3, #176	@ 0xb0
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4413      	add	r3, r2
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aace:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aad0:	683a      	ldr	r2, [r7, #0]
 800aad2:	88d2      	ldrh	r2, [r2, #6]
 800aad4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	88db      	ldrh	r3, [r3, #6]
 800aada:	2b07      	cmp	r3, #7
 800aadc:	bf28      	it	cs
 800aade:	2307      	movcs	r3, #7
 800aae0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	89fa      	ldrh	r2, [r7, #14]
 800aae6:	4619      	mov	r1, r3
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f001 fd53 	bl	800c594 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aaee:	e090      	b.n	800ac12 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	785a      	ldrb	r2, [r3, #1]
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	88db      	ldrh	r3, [r3, #6]
 800aafe:	2b3f      	cmp	r3, #63	@ 0x3f
 800ab00:	d803      	bhi.n	800ab0a <USBD_CDC_Setup+0xa6>
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	88db      	ldrh	r3, [r3, #6]
 800ab06:	b2da      	uxtb	r2, r3
 800ab08:	e000      	b.n	800ab0c <USBD_CDC_Setup+0xa8>
 800ab0a:	2240      	movs	r2, #64	@ 0x40
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ab12:	6939      	ldr	r1, [r7, #16]
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f001 fd65 	bl	800c5ec <USBD_CtlPrepareRx>
      break;
 800ab22:	e076      	b.n	800ac12 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	33b0      	adds	r3, #176	@ 0xb0
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	4413      	add	r3, r2
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	683a      	ldr	r2, [r7, #0]
 800ab38:	7850      	ldrb	r0, [r2, #1]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	6839      	ldr	r1, [r7, #0]
 800ab3e:	4798      	blx	r3
      break;
 800ab40:	e067      	b.n	800ac12 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	785b      	ldrb	r3, [r3, #1]
 800ab46:	2b0b      	cmp	r3, #11
 800ab48:	d851      	bhi.n	800abee <USBD_CDC_Setup+0x18a>
 800ab4a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab50 <USBD_CDC_Setup+0xec>)
 800ab4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab50:	0800ab81 	.word	0x0800ab81
 800ab54:	0800abfd 	.word	0x0800abfd
 800ab58:	0800abef 	.word	0x0800abef
 800ab5c:	0800abef 	.word	0x0800abef
 800ab60:	0800abef 	.word	0x0800abef
 800ab64:	0800abef 	.word	0x0800abef
 800ab68:	0800abef 	.word	0x0800abef
 800ab6c:	0800abef 	.word	0x0800abef
 800ab70:	0800abef 	.word	0x0800abef
 800ab74:	0800abef 	.word	0x0800abef
 800ab78:	0800abab 	.word	0x0800abab
 800ab7c:	0800abd5 	.word	0x0800abd5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	2b03      	cmp	r3, #3
 800ab8a:	d107      	bne.n	800ab9c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ab8c:	f107 030a 	add.w	r3, r7, #10
 800ab90:	2202      	movs	r2, #2
 800ab92:	4619      	mov	r1, r3
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f001 fcfd 	bl	800c594 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab9a:	e032      	b.n	800ac02 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ab9c:	6839      	ldr	r1, [r7, #0]
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f001 fc7b 	bl	800c49a <USBD_CtlError>
            ret = USBD_FAIL;
 800aba4:	2303      	movs	r3, #3
 800aba6:	75fb      	strb	r3, [r7, #23]
          break;
 800aba8:	e02b      	b.n	800ac02 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	2b03      	cmp	r3, #3
 800abb4:	d107      	bne.n	800abc6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800abb6:	f107 030d 	add.w	r3, r7, #13
 800abba:	2201      	movs	r2, #1
 800abbc:	4619      	mov	r1, r3
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f001 fce8 	bl	800c594 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800abc4:	e01d      	b.n	800ac02 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800abc6:	6839      	ldr	r1, [r7, #0]
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f001 fc66 	bl	800c49a <USBD_CtlError>
            ret = USBD_FAIL;
 800abce:	2303      	movs	r3, #3
 800abd0:	75fb      	strb	r3, [r7, #23]
          break;
 800abd2:	e016      	b.n	800ac02 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	2b03      	cmp	r3, #3
 800abde:	d00f      	beq.n	800ac00 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800abe0:	6839      	ldr	r1, [r7, #0]
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f001 fc59 	bl	800c49a <USBD_CtlError>
            ret = USBD_FAIL;
 800abe8:	2303      	movs	r3, #3
 800abea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800abec:	e008      	b.n	800ac00 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800abee:	6839      	ldr	r1, [r7, #0]
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f001 fc52 	bl	800c49a <USBD_CtlError>
          ret = USBD_FAIL;
 800abf6:	2303      	movs	r3, #3
 800abf8:	75fb      	strb	r3, [r7, #23]
          break;
 800abfa:	e002      	b.n	800ac02 <USBD_CDC_Setup+0x19e>
          break;
 800abfc:	bf00      	nop
 800abfe:	e008      	b.n	800ac12 <USBD_CDC_Setup+0x1ae>
          break;
 800ac00:	bf00      	nop
      }
      break;
 800ac02:	e006      	b.n	800ac12 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ac04:	6839      	ldr	r1, [r7, #0]
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f001 fc47 	bl	800c49a <USBD_CtlError>
      ret = USBD_FAIL;
 800ac0c:	2303      	movs	r3, #3
 800ac0e:	75fb      	strb	r3, [r7, #23]
      break;
 800ac10:	bf00      	nop
  }

  return (uint8_t)ret;
 800ac12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3718      	adds	r7, #24
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	460b      	mov	r3, r1
 800ac26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	32b0      	adds	r2, #176	@ 0xb0
 800ac3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d101      	bne.n	800ac46 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ac42:	2303      	movs	r3, #3
 800ac44:	e065      	b.n	800ad12 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	32b0      	adds	r2, #176	@ 0xb0
 800ac50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac54:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ac56:	78fb      	ldrb	r3, [r7, #3]
 800ac58:	f003 020f 	and.w	r2, r3, #15
 800ac5c:	6879      	ldr	r1, [r7, #4]
 800ac5e:	4613      	mov	r3, r2
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	4413      	add	r3, r2
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	440b      	add	r3, r1
 800ac68:	3318      	adds	r3, #24
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d02f      	beq.n	800acd0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ac70:	78fb      	ldrb	r3, [r7, #3]
 800ac72:	f003 020f 	and.w	r2, r3, #15
 800ac76:	6879      	ldr	r1, [r7, #4]
 800ac78:	4613      	mov	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	4413      	add	r3, r2
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	440b      	add	r3, r1
 800ac82:	3318      	adds	r3, #24
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	78fb      	ldrb	r3, [r7, #3]
 800ac88:	f003 010f 	and.w	r1, r3, #15
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	460b      	mov	r3, r1
 800ac90:	00db      	lsls	r3, r3, #3
 800ac92:	440b      	add	r3, r1
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4403      	add	r3, r0
 800ac98:	331c      	adds	r3, #28
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	fbb2 f1f3 	udiv	r1, r2, r3
 800aca0:	fb01 f303 	mul.w	r3, r1, r3
 800aca4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d112      	bne.n	800acd0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800acaa:	78fb      	ldrb	r3, [r7, #3]
 800acac:	f003 020f 	and.w	r2, r3, #15
 800acb0:	6879      	ldr	r1, [r7, #4]
 800acb2:	4613      	mov	r3, r2
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	4413      	add	r3, r2
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	440b      	add	r3, r1
 800acbc:	3318      	adds	r3, #24
 800acbe:	2200      	movs	r2, #0
 800acc0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800acc2:	78f9      	ldrb	r1, [r7, #3]
 800acc4:	2300      	movs	r3, #0
 800acc6:	2200      	movs	r2, #0
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f002 f94c 	bl	800cf66 <USBD_LL_Transmit>
 800acce:	e01f      	b.n	800ad10 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	33b0      	adds	r3, #176	@ 0xb0
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4413      	add	r3, r2
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d010      	beq.n	800ad10 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	33b0      	adds	r3, #176	@ 0xb0
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	4413      	add	r3, r2
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	691b      	ldr	r3, [r3, #16]
 800ad00:	68ba      	ldr	r2, [r7, #8]
 800ad02:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ad06:	68ba      	ldr	r2, [r7, #8]
 800ad08:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ad0c:	78fa      	ldrb	r2, [r7, #3]
 800ad0e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3710      	adds	r7, #16
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b084      	sub	sp, #16
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
 800ad22:	460b      	mov	r3, r1
 800ad24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	32b0      	adds	r2, #176	@ 0xb0
 800ad30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad34:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	32b0      	adds	r2, #176	@ 0xb0
 800ad40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d101      	bne.n	800ad4c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ad48:	2303      	movs	r3, #3
 800ad4a:	e01a      	b.n	800ad82 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ad4c:	78fb      	ldrb	r3, [r7, #3]
 800ad4e:	4619      	mov	r1, r3
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f002 f94a 	bl	800cfea <USBD_LL_GetRxDataSize>
 800ad56:	4602      	mov	r2, r0
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	33b0      	adds	r3, #176	@ 0xb0
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	4413      	add	r3, r2
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ad7c:	4611      	mov	r1, r2
 800ad7e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3710      	adds	r7, #16
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b084      	sub	sp, #16
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	32b0      	adds	r2, #176	@ 0xb0
 800ad9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d101      	bne.n	800adac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ada8:	2303      	movs	r3, #3
 800adaa:	e024      	b.n	800adf6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	33b0      	adds	r3, #176	@ 0xb0
 800adb6:	009b      	lsls	r3, r3, #2
 800adb8:	4413      	add	r3, r2
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d019      	beq.n	800adf4 <USBD_CDC_EP0_RxReady+0x6a>
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800adc6:	2bff      	cmp	r3, #255	@ 0xff
 800adc8:	d014      	beq.n	800adf4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	33b0      	adds	r3, #176	@ 0xb0
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	4413      	add	r3, r2
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ade2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800adea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	22ff      	movs	r2, #255	@ 0xff
 800adf0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800adf4:	2300      	movs	r3, #0
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
	...

0800ae00 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ae08:	2182      	movs	r1, #130	@ 0x82
 800ae0a:	4818      	ldr	r0, [pc, #96]	@ (800ae6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ae0c:	f000 fd0f 	bl	800b82e <USBD_GetEpDesc>
 800ae10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ae12:	2101      	movs	r1, #1
 800ae14:	4815      	ldr	r0, [pc, #84]	@ (800ae6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ae16:	f000 fd0a 	bl	800b82e <USBD_GetEpDesc>
 800ae1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ae1c:	2181      	movs	r1, #129	@ 0x81
 800ae1e:	4813      	ldr	r0, [pc, #76]	@ (800ae6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ae20:	f000 fd05 	bl	800b82e <USBD_GetEpDesc>
 800ae24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d002      	beq.n	800ae32 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	2210      	movs	r2, #16
 800ae30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d006      	beq.n	800ae46 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae40:	711a      	strb	r2, [r3, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d006      	beq.n	800ae5a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae54:	711a      	strb	r2, [r3, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2243      	movs	r2, #67	@ 0x43
 800ae5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ae60:	4b02      	ldr	r3, [pc, #8]	@ (800ae6c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3718      	adds	r7, #24
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	20000054 	.word	0x20000054

0800ae70 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b086      	sub	sp, #24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ae78:	2182      	movs	r1, #130	@ 0x82
 800ae7a:	4818      	ldr	r0, [pc, #96]	@ (800aedc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ae7c:	f000 fcd7 	bl	800b82e <USBD_GetEpDesc>
 800ae80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ae82:	2101      	movs	r1, #1
 800ae84:	4815      	ldr	r0, [pc, #84]	@ (800aedc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ae86:	f000 fcd2 	bl	800b82e <USBD_GetEpDesc>
 800ae8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ae8c:	2181      	movs	r1, #129	@ 0x81
 800ae8e:	4813      	ldr	r0, [pc, #76]	@ (800aedc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ae90:	f000 fccd 	bl	800b82e <USBD_GetEpDesc>
 800ae94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d002      	beq.n	800aea2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	2210      	movs	r2, #16
 800aea0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d006      	beq.n	800aeb6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	711a      	strb	r2, [r3, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f042 0202 	orr.w	r2, r2, #2
 800aeb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d006      	beq.n	800aeca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2200      	movs	r2, #0
 800aec0:	711a      	strb	r2, [r3, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f042 0202 	orr.w	r2, r2, #2
 800aec8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2243      	movs	r2, #67	@ 0x43
 800aece:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aed0:	4b02      	ldr	r3, [pc, #8]	@ (800aedc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3718      	adds	r7, #24
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	20000054 	.word	0x20000054

0800aee0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aee8:	2182      	movs	r1, #130	@ 0x82
 800aeea:	4818      	ldr	r0, [pc, #96]	@ (800af4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aeec:	f000 fc9f 	bl	800b82e <USBD_GetEpDesc>
 800aef0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aef2:	2101      	movs	r1, #1
 800aef4:	4815      	ldr	r0, [pc, #84]	@ (800af4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aef6:	f000 fc9a 	bl	800b82e <USBD_GetEpDesc>
 800aefa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aefc:	2181      	movs	r1, #129	@ 0x81
 800aefe:	4813      	ldr	r0, [pc, #76]	@ (800af4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800af00:	f000 fc95 	bl	800b82e <USBD_GetEpDesc>
 800af04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d002      	beq.n	800af12 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	2210      	movs	r2, #16
 800af10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d006      	beq.n	800af26 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af20:	711a      	strb	r2, [r3, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d006      	beq.n	800af3a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2200      	movs	r2, #0
 800af30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af34:	711a      	strb	r2, [r3, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2243      	movs	r2, #67	@ 0x43
 800af3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800af40:	4b02      	ldr	r3, [pc, #8]	@ (800af4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800af42:	4618      	mov	r0, r3
 800af44:	3718      	adds	r7, #24
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	20000054 	.word	0x20000054

0800af50 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	220a      	movs	r2, #10
 800af5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800af5e:	4b03      	ldr	r3, [pc, #12]	@ (800af6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800af60:	4618      	mov	r0, r3
 800af62:	370c      	adds	r7, #12
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr
 800af6c:	20000010 	.word	0x20000010

0800af70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800af70:	b480      	push	{r7}
 800af72:	b083      	sub	sp, #12
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d101      	bne.n	800af84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800af80:	2303      	movs	r3, #3
 800af82:	e009      	b.n	800af98 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	33b0      	adds	r3, #176	@ 0xb0
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	4413      	add	r3, r2
 800af92:	683a      	ldr	r2, [r7, #0]
 800af94:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr

0800afa4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b087      	sub	sp, #28
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	32b0      	adds	r2, #176	@ 0xb0
 800afba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afbe:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d101      	bne.n	800afca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800afc6:	2303      	movs	r3, #3
 800afc8:	e008      	b.n	800afdc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	68ba      	ldr	r2, [r7, #8]
 800afce:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800afda:	2300      	movs	r3, #0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	371c      	adds	r7, #28
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800afe8:	b480      	push	{r7}
 800afea:	b085      	sub	sp, #20
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	32b0      	adds	r2, #176	@ 0xb0
 800affc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b000:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d101      	bne.n	800b00c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b008:	2303      	movs	r3, #3
 800b00a:	e004      	b.n	800b016 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	683a      	ldr	r2, [r7, #0]
 800b010:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b014:	2300      	movs	r3, #0
}
 800b016:	4618      	mov	r0, r3
 800b018:	3714      	adds	r7, #20
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
	...

0800b024 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	32b0      	adds	r2, #176	@ 0xb0
 800b036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b03a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	32b0      	adds	r2, #176	@ 0xb0
 800b046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d101      	bne.n	800b052 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b04e:	2303      	movs	r3, #3
 800b050:	e018      	b.n	800b084 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	7c1b      	ldrb	r3, [r3, #16]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d10a      	bne.n	800b070 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b05a:	4b0c      	ldr	r3, [pc, #48]	@ (800b08c <USBD_CDC_ReceivePacket+0x68>)
 800b05c:	7819      	ldrb	r1, [r3, #0]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b064:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f001 ff9d 	bl	800cfa8 <USBD_LL_PrepareReceive>
 800b06e:	e008      	b.n	800b082 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b070:	4b06      	ldr	r3, [pc, #24]	@ (800b08c <USBD_CDC_ReceivePacket+0x68>)
 800b072:	7819      	ldrb	r1, [r3, #0]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b07a:	2340      	movs	r3, #64	@ 0x40
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f001 ff93 	bl	800cfa8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	3710      	adds	r7, #16
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	20000098 	.word	0x20000098

0800b090 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	4613      	mov	r3, r2
 800b09c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d101      	bne.n	800b0a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	e01f      	b.n	800b0e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d003      	beq.n	800b0ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	68ba      	ldr	r2, [r7, #8]
 800b0ca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	79fa      	ldrb	r2, [r7, #7]
 800b0da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f001 fe0d 	bl	800ccfc <USBD_LL_Init>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b0e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3718      	adds	r7, #24
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d101      	bne.n	800b108 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b104:	2303      	movs	r3, #3
 800b106:	e025      	b.n	800b154 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	683a      	ldr	r2, [r7, #0]
 800b10c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	32ae      	adds	r2, #174	@ 0xae
 800b11a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b11e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00f      	beq.n	800b144 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	32ae      	adds	r2, #174	@ 0xae
 800b12e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b134:	f107 020e 	add.w	r2, r7, #14
 800b138:	4610      	mov	r0, r2
 800b13a:	4798      	blx	r3
 800b13c:	4602      	mov	r2, r0
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b14a:	1c5a      	adds	r2, r3, #1
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	3710      	adds	r7, #16
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f001 fe15 	bl	800cd94 <USBD_LL_Start>
 800b16a:	4603      	mov	r3, r0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b17c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b17e:	4618      	mov	r0, r3
 800b180:	370c      	adds	r7, #12
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr

0800b18a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b18a:	b580      	push	{r7, lr}
 800b18c:	b084      	sub	sp, #16
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
 800b192:	460b      	mov	r3, r1
 800b194:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b196:	2300      	movs	r3, #0
 800b198:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d009      	beq.n	800b1b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	78fa      	ldrb	r2, [r7, #3]
 800b1ae:	4611      	mov	r1, r2
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	4798      	blx	r3
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b084      	sub	sp, #16
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	78fa      	ldrb	r2, [r7, #3]
 800b1dc:	4611      	mov	r1, r2
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	4798      	blx	r3
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d001      	beq.n	800b1ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b1e8:	2303      	movs	r3, #3
 800b1ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b1ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3710      	adds	r7, #16
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}

0800b1f6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b084      	sub	sp, #16
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
 800b1fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b206:	6839      	ldr	r1, [r7, #0]
 800b208:	4618      	mov	r0, r3
 800b20a:	f001 f90c 	bl	800c426 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2201      	movs	r2, #1
 800b212:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b21c:	461a      	mov	r2, r3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b22a:	f003 031f 	and.w	r3, r3, #31
 800b22e:	2b02      	cmp	r3, #2
 800b230:	d01a      	beq.n	800b268 <USBD_LL_SetupStage+0x72>
 800b232:	2b02      	cmp	r3, #2
 800b234:	d822      	bhi.n	800b27c <USBD_LL_SetupStage+0x86>
 800b236:	2b00      	cmp	r3, #0
 800b238:	d002      	beq.n	800b240 <USBD_LL_SetupStage+0x4a>
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d00a      	beq.n	800b254 <USBD_LL_SetupStage+0x5e>
 800b23e:	e01d      	b.n	800b27c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b246:	4619      	mov	r1, r3
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 fb63 	bl	800b914 <USBD_StdDevReq>
 800b24e:	4603      	mov	r3, r0
 800b250:	73fb      	strb	r3, [r7, #15]
      break;
 800b252:	e020      	b.n	800b296 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b25a:	4619      	mov	r1, r3
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 fbcb 	bl	800b9f8 <USBD_StdItfReq>
 800b262:	4603      	mov	r3, r0
 800b264:	73fb      	strb	r3, [r7, #15]
      break;
 800b266:	e016      	b.n	800b296 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b26e:	4619      	mov	r1, r3
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 fc2d 	bl	800bad0 <USBD_StdEPReq>
 800b276:	4603      	mov	r3, r0
 800b278:	73fb      	strb	r3, [r7, #15]
      break;
 800b27a:	e00c      	b.n	800b296 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b282:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b286:	b2db      	uxtb	r3, r3
 800b288:	4619      	mov	r1, r3
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f001 fde2 	bl	800ce54 <USBD_LL_StallEP>
 800b290:	4603      	mov	r3, r0
 800b292:	73fb      	strb	r3, [r7, #15]
      break;
 800b294:	bf00      	nop
  }

  return ret;
 800b296:	7bfb      	ldrb	r3, [r7, #15]
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3710      	adds	r7, #16
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b086      	sub	sp, #24
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	607a      	str	r2, [r7, #4]
 800b2ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b2b2:	7afb      	ldrb	r3, [r7, #11]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d16e      	bne.n	800b396 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b2be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b2c6:	2b03      	cmp	r3, #3
 800b2c8:	f040 8098 	bne.w	800b3fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	689a      	ldr	r2, [r3, #8]
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d913      	bls.n	800b300 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	689a      	ldr	r2, [r3, #8]
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	1ad2      	subs	r2, r2, r3
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	68da      	ldr	r2, [r3, #12]
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	689b      	ldr	r3, [r3, #8]
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	bf28      	it	cs
 800b2f2:	4613      	movcs	r3, r2
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	6879      	ldr	r1, [r7, #4]
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f001 f994 	bl	800c626 <USBD_CtlContinueRx>
 800b2fe:	e07d      	b.n	800b3fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b306:	f003 031f 	and.w	r3, r3, #31
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	d014      	beq.n	800b338 <USBD_LL_DataOutStage+0x98>
 800b30e:	2b02      	cmp	r3, #2
 800b310:	d81d      	bhi.n	800b34e <USBD_LL_DataOutStage+0xae>
 800b312:	2b00      	cmp	r3, #0
 800b314:	d002      	beq.n	800b31c <USBD_LL_DataOutStage+0x7c>
 800b316:	2b01      	cmp	r3, #1
 800b318:	d003      	beq.n	800b322 <USBD_LL_DataOutStage+0x82>
 800b31a:	e018      	b.n	800b34e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b31c:	2300      	movs	r3, #0
 800b31e:	75bb      	strb	r3, [r7, #22]
            break;
 800b320:	e018      	b.n	800b354 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	4619      	mov	r1, r3
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	f000 fa64 	bl	800b7fa <USBD_CoreFindIF>
 800b332:	4603      	mov	r3, r0
 800b334:	75bb      	strb	r3, [r7, #22]
            break;
 800b336:	e00d      	b.n	800b354 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	4619      	mov	r1, r3
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f000 fa66 	bl	800b814 <USBD_CoreFindEP>
 800b348:	4603      	mov	r3, r0
 800b34a:	75bb      	strb	r3, [r7, #22]
            break;
 800b34c:	e002      	b.n	800b354 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b34e:	2300      	movs	r3, #0
 800b350:	75bb      	strb	r3, [r7, #22]
            break;
 800b352:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b354:	7dbb      	ldrb	r3, [r7, #22]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d119      	bne.n	800b38e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b360:	b2db      	uxtb	r3, r3
 800b362:	2b03      	cmp	r3, #3
 800b364:	d113      	bne.n	800b38e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b366:	7dba      	ldrb	r2, [r7, #22]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	32ae      	adds	r2, #174	@ 0xae
 800b36c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d00b      	beq.n	800b38e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b376:	7dba      	ldrb	r2, [r7, #22]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b37e:	7dba      	ldrb	r2, [r7, #22]
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	32ae      	adds	r2, #174	@ 0xae
 800b384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f001 f95a 	bl	800c648 <USBD_CtlSendStatus>
 800b394:	e032      	b.n	800b3fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b396:	7afb      	ldrb	r3, [r7, #11]
 800b398:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	4619      	mov	r1, r3
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f000 fa37 	bl	800b814 <USBD_CoreFindEP>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3aa:	7dbb      	ldrb	r3, [r7, #22]
 800b3ac:	2bff      	cmp	r3, #255	@ 0xff
 800b3ae:	d025      	beq.n	800b3fc <USBD_LL_DataOutStage+0x15c>
 800b3b0:	7dbb      	ldrb	r3, [r7, #22]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d122      	bne.n	800b3fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	2b03      	cmp	r3, #3
 800b3c0:	d117      	bne.n	800b3f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b3c2:	7dba      	ldrb	r2, [r7, #22]
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	32ae      	adds	r2, #174	@ 0xae
 800b3c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3cc:	699b      	ldr	r3, [r3, #24]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d00f      	beq.n	800b3f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b3d2:	7dba      	ldrb	r2, [r7, #22]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b3da:	7dba      	ldrb	r2, [r7, #22]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	32ae      	adds	r2, #174	@ 0xae
 800b3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e4:	699b      	ldr	r3, [r3, #24]
 800b3e6:	7afa      	ldrb	r2, [r7, #11]
 800b3e8:	4611      	mov	r1, r2
 800b3ea:	68f8      	ldr	r0, [r7, #12]
 800b3ec:	4798      	blx	r3
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b3f2:	7dfb      	ldrb	r3, [r7, #23]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d001      	beq.n	800b3fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b3f8:	7dfb      	ldrb	r3, [r7, #23]
 800b3fa:	e000      	b.n	800b3fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b3fc:	2300      	movs	r3, #0
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3718      	adds	r7, #24
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}

0800b406 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b406:	b580      	push	{r7, lr}
 800b408:	b086      	sub	sp, #24
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	60f8      	str	r0, [r7, #12]
 800b40e:	460b      	mov	r3, r1
 800b410:	607a      	str	r2, [r7, #4]
 800b412:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b414:	7afb      	ldrb	r3, [r7, #11]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d16f      	bne.n	800b4fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	3314      	adds	r3, #20
 800b41e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b426:	2b02      	cmp	r3, #2
 800b428:	d15a      	bne.n	800b4e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	689a      	ldr	r2, [r3, #8]
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	429a      	cmp	r2, r3
 800b434:	d914      	bls.n	800b460 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	689a      	ldr	r2, [r3, #8]
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	1ad2      	subs	r2, r2, r3
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	461a      	mov	r2, r3
 800b44a:	6879      	ldr	r1, [r7, #4]
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f001 f8bc 	bl	800c5ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b452:	2300      	movs	r3, #0
 800b454:	2200      	movs	r2, #0
 800b456:	2100      	movs	r1, #0
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f001 fda5 	bl	800cfa8 <USBD_LL_PrepareReceive>
 800b45e:	e03f      	b.n	800b4e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	68da      	ldr	r2, [r3, #12]
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d11c      	bne.n	800b4a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	685a      	ldr	r2, [r3, #4]
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b474:	429a      	cmp	r2, r3
 800b476:	d316      	bcc.n	800b4a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	685a      	ldr	r2, [r3, #4]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b482:	429a      	cmp	r2, r3
 800b484:	d20f      	bcs.n	800b4a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b486:	2200      	movs	r2, #0
 800b488:	2100      	movs	r1, #0
 800b48a:	68f8      	ldr	r0, [r7, #12]
 800b48c:	f001 f89d 	bl	800c5ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2200      	movs	r2, #0
 800b494:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b498:	2300      	movs	r3, #0
 800b49a:	2200      	movs	r2, #0
 800b49c:	2100      	movs	r1, #0
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	f001 fd82 	bl	800cfa8 <USBD_LL_PrepareReceive>
 800b4a4:	e01c      	b.n	800b4e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	2b03      	cmp	r3, #3
 800b4b0:	d10f      	bne.n	800b4d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d009      	beq.n	800b4d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4d2:	2180      	movs	r1, #128	@ 0x80
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	f001 fcbd 	bl	800ce54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f001 f8c7 	bl	800c66e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d03a      	beq.n	800b560 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f7ff fe42 	bl	800b174 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b4f8:	e032      	b.n	800b560 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b4fa:	7afb      	ldrb	r3, [r7, #11]
 800b4fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b500:	b2db      	uxtb	r3, r3
 800b502:	4619      	mov	r1, r3
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f000 f985 	bl	800b814 <USBD_CoreFindEP>
 800b50a:	4603      	mov	r3, r0
 800b50c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b50e:	7dfb      	ldrb	r3, [r7, #23]
 800b510:	2bff      	cmp	r3, #255	@ 0xff
 800b512:	d025      	beq.n	800b560 <USBD_LL_DataInStage+0x15a>
 800b514:	7dfb      	ldrb	r3, [r7, #23]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d122      	bne.n	800b560 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b520:	b2db      	uxtb	r3, r3
 800b522:	2b03      	cmp	r3, #3
 800b524:	d11c      	bne.n	800b560 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b526:	7dfa      	ldrb	r2, [r7, #23]
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	32ae      	adds	r2, #174	@ 0xae
 800b52c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b530:	695b      	ldr	r3, [r3, #20]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d014      	beq.n	800b560 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b536:	7dfa      	ldrb	r2, [r7, #23]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b53e:	7dfa      	ldrb	r2, [r7, #23]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	32ae      	adds	r2, #174	@ 0xae
 800b544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b548:	695b      	ldr	r3, [r3, #20]
 800b54a:	7afa      	ldrb	r2, [r7, #11]
 800b54c:	4611      	mov	r1, r2
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	4798      	blx	r3
 800b552:	4603      	mov	r3, r0
 800b554:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b556:	7dbb      	ldrb	r3, [r7, #22]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d001      	beq.n	800b560 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b55c:	7dbb      	ldrb	r3, [r7, #22]
 800b55e:	e000      	b.n	800b562 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b560:	2300      	movs	r3, #0
}
 800b562:	4618      	mov	r0, r3
 800b564:	3718      	adds	r7, #24
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b084      	sub	sp, #16
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b572:	2300      	movs	r3, #0
 800b574:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2201      	movs	r2, #1
 800b57a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2200      	movs	r2, #0
 800b58a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2200      	movs	r2, #0
 800b590:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2200      	movs	r2, #0
 800b598:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d014      	beq.n	800b5d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00e      	beq.n	800b5d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	6852      	ldr	r2, [r2, #4]
 800b5be:	b2d2      	uxtb	r2, r2
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	4798      	blx	r3
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d001      	beq.n	800b5d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b5cc:	2303      	movs	r3, #3
 800b5ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5d0:	2340      	movs	r3, #64	@ 0x40
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f001 fbf7 	bl	800cdca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2240      	movs	r2, #64	@ 0x40
 800b5e8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5ec:	2340      	movs	r3, #64	@ 0x40
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	2180      	movs	r1, #128	@ 0x80
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f001 fbe9 	bl	800cdca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2240      	movs	r2, #64	@ 0x40
 800b602:	621a      	str	r2, [r3, #32]

  return ret;
 800b604:	7bfb      	ldrb	r3, [r7, #15]
}
 800b606:	4618      	mov	r0, r3
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b60e:	b480      	push	{r7}
 800b610:	b083      	sub	sp, #12
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
 800b616:	460b      	mov	r3, r1
 800b618:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	78fa      	ldrb	r2, [r7, #3]
 800b61e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b620:	2300      	movs	r3, #0
}
 800b622:	4618      	mov	r0, r3
 800b624:	370c      	adds	r7, #12
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr

0800b62e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b62e:	b480      	push	{r7}
 800b630:	b083      	sub	sp, #12
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	2b04      	cmp	r3, #4
 800b640:	d006      	beq.n	800b650 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b648:	b2da      	uxtb	r2, r3
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2204      	movs	r2, #4
 800b654:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	370c      	adds	r7, #12
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b666:	b480      	push	{r7}
 800b668:	b083      	sub	sp, #12
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b674:	b2db      	uxtb	r3, r3
 800b676:	2b04      	cmp	r3, #4
 800b678:	d106      	bne.n	800b688 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b680:	b2da      	uxtb	r2, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b688:	2300      	movs	r3, #0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	370c      	adds	r7, #12
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr

0800b696 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b082      	sub	sp, #8
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	2b03      	cmp	r3, #3
 800b6a8:	d110      	bne.n	800b6cc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d00b      	beq.n	800b6cc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6ba:	69db      	ldr	r3, [r3, #28]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d005      	beq.n	800b6cc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6c6:	69db      	ldr	r3, [r3, #28]
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3708      	adds	r7, #8
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b082      	sub	sp, #8
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	460b      	mov	r3, r1
 800b6e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	32ae      	adds	r2, #174	@ 0xae
 800b6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d101      	bne.n	800b6f8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b6f4:	2303      	movs	r3, #3
 800b6f6:	e01c      	b.n	800b732 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	2b03      	cmp	r3, #3
 800b702:	d115      	bne.n	800b730 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	32ae      	adds	r2, #174	@ 0xae
 800b70e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b712:	6a1b      	ldr	r3, [r3, #32]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d00b      	beq.n	800b730 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	32ae      	adds	r2, #174	@ 0xae
 800b722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b726:	6a1b      	ldr	r3, [r3, #32]
 800b728:	78fa      	ldrb	r2, [r7, #3]
 800b72a:	4611      	mov	r1, r2
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b730:	2300      	movs	r3, #0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3708      	adds	r7, #8
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b082      	sub	sp, #8
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
 800b742:	460b      	mov	r3, r1
 800b744:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	32ae      	adds	r2, #174	@ 0xae
 800b750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d101      	bne.n	800b75c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b758:	2303      	movs	r3, #3
 800b75a:	e01c      	b.n	800b796 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b762:	b2db      	uxtb	r3, r3
 800b764:	2b03      	cmp	r3, #3
 800b766:	d115      	bne.n	800b794 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	32ae      	adds	r2, #174	@ 0xae
 800b772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d00b      	beq.n	800b794 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	32ae      	adds	r2, #174	@ 0xae
 800b786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b78a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b78c:	78fa      	ldrb	r2, [r7, #3]
 800b78e:	4611      	mov	r1, r2
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b794:	2300      	movs	r3, #0
}
 800b796:	4618      	mov	r0, r3
 800b798:	3708      	adds	r7, #8
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}

0800b79e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b79e:	b480      	push	{r7}
 800b7a0:	b083      	sub	sp, #12
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b7a6:	2300      	movs	r3, #0
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	370c      	adds	r7, #12
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr

0800b7b4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00e      	beq.n	800b7f0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	6852      	ldr	r2, [r2, #4]
 800b7de:	b2d2      	uxtb	r2, r2
 800b7e0:	4611      	mov	r1, r2
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	4798      	blx	r3
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d001      	beq.n	800b7f0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b7ec:	2303      	movs	r3, #3
 800b7ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3710      	adds	r7, #16
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b083      	sub	sp, #12
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
 800b802:	460b      	mov	r3, r1
 800b804:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b806:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b808:	4618      	mov	r0, r3
 800b80a:	370c      	adds	r7, #12
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr

0800b814 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	460b      	mov	r3, r1
 800b81e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b820:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b822:	4618      	mov	r0, r3
 800b824:	370c      	adds	r7, #12
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b086      	sub	sp, #24
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	460b      	mov	r3, r1
 800b838:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b842:	2300      	movs	r3, #0
 800b844:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	885b      	ldrh	r3, [r3, #2]
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	68fa      	ldr	r2, [r7, #12]
 800b84e:	7812      	ldrb	r2, [r2, #0]
 800b850:	4293      	cmp	r3, r2
 800b852:	d91f      	bls.n	800b894 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b85a:	e013      	b.n	800b884 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b85c:	f107 030a 	add.w	r3, r7, #10
 800b860:	4619      	mov	r1, r3
 800b862:	6978      	ldr	r0, [r7, #20]
 800b864:	f000 f81b 	bl	800b89e <USBD_GetNextDesc>
 800b868:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	785b      	ldrb	r3, [r3, #1]
 800b86e:	2b05      	cmp	r3, #5
 800b870:	d108      	bne.n	800b884 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	789b      	ldrb	r3, [r3, #2]
 800b87a:	78fa      	ldrb	r2, [r7, #3]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d008      	beq.n	800b892 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b880:	2300      	movs	r3, #0
 800b882:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	885b      	ldrh	r3, [r3, #2]
 800b888:	b29a      	uxth	r2, r3
 800b88a:	897b      	ldrh	r3, [r7, #10]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d8e5      	bhi.n	800b85c <USBD_GetEpDesc+0x2e>
 800b890:	e000      	b.n	800b894 <USBD_GetEpDesc+0x66>
          break;
 800b892:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b894:	693b      	ldr	r3, [r7, #16]
}
 800b896:	4618      	mov	r0, r3
 800b898:	3718      	adds	r7, #24
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b89e:	b480      	push	{r7}
 800b8a0:	b085      	sub	sp, #20
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	881b      	ldrh	r3, [r3, #0]
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	7812      	ldrb	r2, [r2, #0]
 800b8b4:	4413      	add	r3, r2
 800b8b6:	b29a      	uxth	r2, r3
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3714      	adds	r7, #20
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr

0800b8d6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b8d6:	b480      	push	{r7}
 800b8d8:	b087      	sub	sp, #28
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b8f4:	8a3b      	ldrh	r3, [r7, #16]
 800b8f6:	021b      	lsls	r3, r3, #8
 800b8f8:	b21a      	sxth	r2, r3
 800b8fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b8fe:	4313      	orrs	r3, r2
 800b900:	b21b      	sxth	r3, r3
 800b902:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b904:	89fb      	ldrh	r3, [r7, #14]
}
 800b906:	4618      	mov	r0, r3
 800b908:	371c      	adds	r7, #28
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr
	...

0800b914 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b91e:	2300      	movs	r3, #0
 800b920:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b92a:	2b40      	cmp	r3, #64	@ 0x40
 800b92c:	d005      	beq.n	800b93a <USBD_StdDevReq+0x26>
 800b92e:	2b40      	cmp	r3, #64	@ 0x40
 800b930:	d857      	bhi.n	800b9e2 <USBD_StdDevReq+0xce>
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00f      	beq.n	800b956 <USBD_StdDevReq+0x42>
 800b936:	2b20      	cmp	r3, #32
 800b938:	d153      	bne.n	800b9e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	32ae      	adds	r2, #174	@ 0xae
 800b944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	6839      	ldr	r1, [r7, #0]
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	4798      	blx	r3
 800b950:	4603      	mov	r3, r0
 800b952:	73fb      	strb	r3, [r7, #15]
      break;
 800b954:	e04a      	b.n	800b9ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	785b      	ldrb	r3, [r3, #1]
 800b95a:	2b09      	cmp	r3, #9
 800b95c:	d83b      	bhi.n	800b9d6 <USBD_StdDevReq+0xc2>
 800b95e:	a201      	add	r2, pc, #4	@ (adr r2, 800b964 <USBD_StdDevReq+0x50>)
 800b960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b964:	0800b9b9 	.word	0x0800b9b9
 800b968:	0800b9cd 	.word	0x0800b9cd
 800b96c:	0800b9d7 	.word	0x0800b9d7
 800b970:	0800b9c3 	.word	0x0800b9c3
 800b974:	0800b9d7 	.word	0x0800b9d7
 800b978:	0800b997 	.word	0x0800b997
 800b97c:	0800b98d 	.word	0x0800b98d
 800b980:	0800b9d7 	.word	0x0800b9d7
 800b984:	0800b9af 	.word	0x0800b9af
 800b988:	0800b9a1 	.word	0x0800b9a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b98c:	6839      	ldr	r1, [r7, #0]
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 fa3c 	bl	800be0c <USBD_GetDescriptor>
          break;
 800b994:	e024      	b.n	800b9e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b996:	6839      	ldr	r1, [r7, #0]
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 fba1 	bl	800c0e0 <USBD_SetAddress>
          break;
 800b99e:	e01f      	b.n	800b9e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b9a0:	6839      	ldr	r1, [r7, #0]
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 fbe0 	bl	800c168 <USBD_SetConfig>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	73fb      	strb	r3, [r7, #15]
          break;
 800b9ac:	e018      	b.n	800b9e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b9ae:	6839      	ldr	r1, [r7, #0]
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 fc83 	bl	800c2bc <USBD_GetConfig>
          break;
 800b9b6:	e013      	b.n	800b9e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b9b8:	6839      	ldr	r1, [r7, #0]
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fcb4 	bl	800c328 <USBD_GetStatus>
          break;
 800b9c0:	e00e      	b.n	800b9e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b9c2:	6839      	ldr	r1, [r7, #0]
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 fce3 	bl	800c390 <USBD_SetFeature>
          break;
 800b9ca:	e009      	b.n	800b9e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b9cc:	6839      	ldr	r1, [r7, #0]
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 fd07 	bl	800c3e2 <USBD_ClrFeature>
          break;
 800b9d4:	e004      	b.n	800b9e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b9d6:	6839      	ldr	r1, [r7, #0]
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 fd5e 	bl	800c49a <USBD_CtlError>
          break;
 800b9de:	bf00      	nop
      }
      break;
 800b9e0:	e004      	b.n	800b9ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b9e2:	6839      	ldr	r1, [r7, #0]
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 fd58 	bl	800c49a <USBD_CtlError>
      break;
 800b9ea:	bf00      	nop
  }

  return ret;
 800b9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop

0800b9f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba02:	2300      	movs	r3, #0
 800ba04:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba0e:	2b40      	cmp	r3, #64	@ 0x40
 800ba10:	d005      	beq.n	800ba1e <USBD_StdItfReq+0x26>
 800ba12:	2b40      	cmp	r3, #64	@ 0x40
 800ba14:	d852      	bhi.n	800babc <USBD_StdItfReq+0xc4>
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d001      	beq.n	800ba1e <USBD_StdItfReq+0x26>
 800ba1a:	2b20      	cmp	r3, #32
 800ba1c:	d14e      	bne.n	800babc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	3b01      	subs	r3, #1
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	d840      	bhi.n	800baae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	889b      	ldrh	r3, [r3, #4]
 800ba30:	b2db      	uxtb	r3, r3
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d836      	bhi.n	800baa4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	889b      	ldrh	r3, [r3, #4]
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f7ff fedb 	bl	800b7fa <USBD_CoreFindIF>
 800ba44:	4603      	mov	r3, r0
 800ba46:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba48:	7bbb      	ldrb	r3, [r7, #14]
 800ba4a:	2bff      	cmp	r3, #255	@ 0xff
 800ba4c:	d01d      	beq.n	800ba8a <USBD_StdItfReq+0x92>
 800ba4e:	7bbb      	ldrb	r3, [r7, #14]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d11a      	bne.n	800ba8a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ba54:	7bba      	ldrb	r2, [r7, #14]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	32ae      	adds	r2, #174	@ 0xae
 800ba5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d00f      	beq.n	800ba84 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ba64:	7bba      	ldrb	r2, [r7, #14]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ba6c:	7bba      	ldrb	r2, [r7, #14]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	32ae      	adds	r2, #174	@ 0xae
 800ba72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba76:	689b      	ldr	r3, [r3, #8]
 800ba78:	6839      	ldr	r1, [r7, #0]
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	4798      	blx	r3
 800ba7e:	4603      	mov	r3, r0
 800ba80:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ba82:	e004      	b.n	800ba8e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ba84:	2303      	movs	r3, #3
 800ba86:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ba88:	e001      	b.n	800ba8e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ba8a:	2303      	movs	r3, #3
 800ba8c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	88db      	ldrh	r3, [r3, #6]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d110      	bne.n	800bab8 <USBD_StdItfReq+0xc0>
 800ba96:	7bfb      	ldrb	r3, [r7, #15]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d10d      	bne.n	800bab8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 fdd3 	bl	800c648 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800baa2:	e009      	b.n	800bab8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800baa4:	6839      	ldr	r1, [r7, #0]
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 fcf7 	bl	800c49a <USBD_CtlError>
          break;
 800baac:	e004      	b.n	800bab8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800baae:	6839      	ldr	r1, [r7, #0]
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 fcf2 	bl	800c49a <USBD_CtlError>
          break;
 800bab6:	e000      	b.n	800baba <USBD_StdItfReq+0xc2>
          break;
 800bab8:	bf00      	nop
      }
      break;
 800baba:	e004      	b.n	800bac6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800babc:	6839      	ldr	r1, [r7, #0]
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fceb 	bl	800c49a <USBD_CtlError>
      break;
 800bac4:	bf00      	nop
  }

  return ret;
 800bac6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3710      	adds	r7, #16
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bada:	2300      	movs	r3, #0
 800badc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	889b      	ldrh	r3, [r3, #4]
 800bae2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800baec:	2b40      	cmp	r3, #64	@ 0x40
 800baee:	d007      	beq.n	800bb00 <USBD_StdEPReq+0x30>
 800baf0:	2b40      	cmp	r3, #64	@ 0x40
 800baf2:	f200 817f 	bhi.w	800bdf4 <USBD_StdEPReq+0x324>
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d02a      	beq.n	800bb50 <USBD_StdEPReq+0x80>
 800bafa:	2b20      	cmp	r3, #32
 800bafc:	f040 817a 	bne.w	800bdf4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bb00:	7bbb      	ldrb	r3, [r7, #14]
 800bb02:	4619      	mov	r1, r3
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f7ff fe85 	bl	800b814 <USBD_CoreFindEP>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb0e:	7b7b      	ldrb	r3, [r7, #13]
 800bb10:	2bff      	cmp	r3, #255	@ 0xff
 800bb12:	f000 8174 	beq.w	800bdfe <USBD_StdEPReq+0x32e>
 800bb16:	7b7b      	ldrb	r3, [r7, #13]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	f040 8170 	bne.w	800bdfe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bb1e:	7b7a      	ldrb	r2, [r7, #13]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bb26:	7b7a      	ldrb	r2, [r7, #13]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	32ae      	adds	r2, #174	@ 0xae
 800bb2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f000 8163 	beq.w	800bdfe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bb38:	7b7a      	ldrb	r2, [r7, #13]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	32ae      	adds	r2, #174	@ 0xae
 800bb3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb42:	689b      	ldr	r3, [r3, #8]
 800bb44:	6839      	ldr	r1, [r7, #0]
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	4798      	blx	r3
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bb4e:	e156      	b.n	800bdfe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	785b      	ldrb	r3, [r3, #1]
 800bb54:	2b03      	cmp	r3, #3
 800bb56:	d008      	beq.n	800bb6a <USBD_StdEPReq+0x9a>
 800bb58:	2b03      	cmp	r3, #3
 800bb5a:	f300 8145 	bgt.w	800bde8 <USBD_StdEPReq+0x318>
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	f000 809b 	beq.w	800bc9a <USBD_StdEPReq+0x1ca>
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d03c      	beq.n	800bbe2 <USBD_StdEPReq+0x112>
 800bb68:	e13e      	b.n	800bde8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	d002      	beq.n	800bb7c <USBD_StdEPReq+0xac>
 800bb76:	2b03      	cmp	r3, #3
 800bb78:	d016      	beq.n	800bba8 <USBD_StdEPReq+0xd8>
 800bb7a:	e02c      	b.n	800bbd6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb7c:	7bbb      	ldrb	r3, [r7, #14]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00d      	beq.n	800bb9e <USBD_StdEPReq+0xce>
 800bb82:	7bbb      	ldrb	r3, [r7, #14]
 800bb84:	2b80      	cmp	r3, #128	@ 0x80
 800bb86:	d00a      	beq.n	800bb9e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb88:	7bbb      	ldrb	r3, [r7, #14]
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f001 f961 	bl	800ce54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb92:	2180      	movs	r1, #128	@ 0x80
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f001 f95d 	bl	800ce54 <USBD_LL_StallEP>
 800bb9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb9c:	e020      	b.n	800bbe0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bb9e:	6839      	ldr	r1, [r7, #0]
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 fc7a 	bl	800c49a <USBD_CtlError>
              break;
 800bba6:	e01b      	b.n	800bbe0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	885b      	ldrh	r3, [r3, #2]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d10e      	bne.n	800bbce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bbb0:	7bbb      	ldrb	r3, [r7, #14]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00b      	beq.n	800bbce <USBD_StdEPReq+0xfe>
 800bbb6:	7bbb      	ldrb	r3, [r7, #14]
 800bbb8:	2b80      	cmp	r3, #128	@ 0x80
 800bbba:	d008      	beq.n	800bbce <USBD_StdEPReq+0xfe>
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	88db      	ldrh	r3, [r3, #6]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d104      	bne.n	800bbce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bbc4:	7bbb      	ldrb	r3, [r7, #14]
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f001 f943 	bl	800ce54 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 fd3a 	bl	800c648 <USBD_CtlSendStatus>

              break;
 800bbd4:	e004      	b.n	800bbe0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bbd6:	6839      	ldr	r1, [r7, #0]
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 fc5e 	bl	800c49a <USBD_CtlError>
              break;
 800bbde:	bf00      	nop
          }
          break;
 800bbe0:	e107      	b.n	800bdf2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbe8:	b2db      	uxtb	r3, r3
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d002      	beq.n	800bbf4 <USBD_StdEPReq+0x124>
 800bbee:	2b03      	cmp	r3, #3
 800bbf0:	d016      	beq.n	800bc20 <USBD_StdEPReq+0x150>
 800bbf2:	e04b      	b.n	800bc8c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbf4:	7bbb      	ldrb	r3, [r7, #14]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d00d      	beq.n	800bc16 <USBD_StdEPReq+0x146>
 800bbfa:	7bbb      	ldrb	r3, [r7, #14]
 800bbfc:	2b80      	cmp	r3, #128	@ 0x80
 800bbfe:	d00a      	beq.n	800bc16 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc00:	7bbb      	ldrb	r3, [r7, #14]
 800bc02:	4619      	mov	r1, r3
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f001 f925 	bl	800ce54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc0a:	2180      	movs	r1, #128	@ 0x80
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f001 f921 	bl	800ce54 <USBD_LL_StallEP>
 800bc12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc14:	e040      	b.n	800bc98 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bc16:	6839      	ldr	r1, [r7, #0]
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 fc3e 	bl	800c49a <USBD_CtlError>
              break;
 800bc1e:	e03b      	b.n	800bc98 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	885b      	ldrh	r3, [r3, #2]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d136      	bne.n	800bc96 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bc28:	7bbb      	ldrb	r3, [r7, #14]
 800bc2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d004      	beq.n	800bc3c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bc32:	7bbb      	ldrb	r3, [r7, #14]
 800bc34:	4619      	mov	r1, r3
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f001 f92b 	bl	800ce92 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 fd03 	bl	800c648 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bc42:	7bbb      	ldrb	r3, [r7, #14]
 800bc44:	4619      	mov	r1, r3
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f7ff fde4 	bl	800b814 <USBD_CoreFindEP>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc50:	7b7b      	ldrb	r3, [r7, #13]
 800bc52:	2bff      	cmp	r3, #255	@ 0xff
 800bc54:	d01f      	beq.n	800bc96 <USBD_StdEPReq+0x1c6>
 800bc56:	7b7b      	ldrb	r3, [r7, #13]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d11c      	bne.n	800bc96 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bc5c:	7b7a      	ldrb	r2, [r7, #13]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bc64:	7b7a      	ldrb	r2, [r7, #13]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	32ae      	adds	r2, #174	@ 0xae
 800bc6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d010      	beq.n	800bc96 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bc74:	7b7a      	ldrb	r2, [r7, #13]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	32ae      	adds	r2, #174	@ 0xae
 800bc7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	6839      	ldr	r1, [r7, #0]
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	4798      	blx	r3
 800bc86:	4603      	mov	r3, r0
 800bc88:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bc8a:	e004      	b.n	800bc96 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bc8c:	6839      	ldr	r1, [r7, #0]
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 fc03 	bl	800c49a <USBD_CtlError>
              break;
 800bc94:	e000      	b.n	800bc98 <USBD_StdEPReq+0x1c8>
              break;
 800bc96:	bf00      	nop
          }
          break;
 800bc98:	e0ab      	b.n	800bdf2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d002      	beq.n	800bcac <USBD_StdEPReq+0x1dc>
 800bca6:	2b03      	cmp	r3, #3
 800bca8:	d032      	beq.n	800bd10 <USBD_StdEPReq+0x240>
 800bcaa:	e097      	b.n	800bddc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcac:	7bbb      	ldrb	r3, [r7, #14]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d007      	beq.n	800bcc2 <USBD_StdEPReq+0x1f2>
 800bcb2:	7bbb      	ldrb	r3, [r7, #14]
 800bcb4:	2b80      	cmp	r3, #128	@ 0x80
 800bcb6:	d004      	beq.n	800bcc2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bcb8:	6839      	ldr	r1, [r7, #0]
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f000 fbed 	bl	800c49a <USBD_CtlError>
                break;
 800bcc0:	e091      	b.n	800bde6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	da0b      	bge.n	800bce2 <USBD_StdEPReq+0x212>
 800bcca:	7bbb      	ldrb	r3, [r7, #14]
 800bccc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bcd0:	4613      	mov	r3, r2
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	4413      	add	r3, r2
 800bcd6:	009b      	lsls	r3, r3, #2
 800bcd8:	3310      	adds	r3, #16
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	4413      	add	r3, r2
 800bcde:	3304      	adds	r3, #4
 800bce0:	e00b      	b.n	800bcfa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bce2:	7bbb      	ldrb	r3, [r7, #14]
 800bce4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bce8:	4613      	mov	r3, r2
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	4413      	add	r3, r2
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	3304      	adds	r3, #4
 800bcfa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	2202      	movs	r2, #2
 800bd06:	4619      	mov	r1, r3
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 fc43 	bl	800c594 <USBD_CtlSendData>
              break;
 800bd0e:	e06a      	b.n	800bde6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bd10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	da11      	bge.n	800bd3c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bd18:	7bbb      	ldrb	r3, [r7, #14]
 800bd1a:	f003 020f 	and.w	r2, r3, #15
 800bd1e:	6879      	ldr	r1, [r7, #4]
 800bd20:	4613      	mov	r3, r2
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	4413      	add	r3, r2
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	440b      	add	r3, r1
 800bd2a:	3324      	adds	r3, #36	@ 0x24
 800bd2c:	881b      	ldrh	r3, [r3, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d117      	bne.n	800bd62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bd32:	6839      	ldr	r1, [r7, #0]
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 fbb0 	bl	800c49a <USBD_CtlError>
                  break;
 800bd3a:	e054      	b.n	800bde6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bd3c:	7bbb      	ldrb	r3, [r7, #14]
 800bd3e:	f003 020f 	and.w	r2, r3, #15
 800bd42:	6879      	ldr	r1, [r7, #4]
 800bd44:	4613      	mov	r3, r2
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	4413      	add	r3, r2
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	440b      	add	r3, r1
 800bd4e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bd52:	881b      	ldrh	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d104      	bne.n	800bd62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bd58:	6839      	ldr	r1, [r7, #0]
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 fb9d 	bl	800c49a <USBD_CtlError>
                  break;
 800bd60:	e041      	b.n	800bde6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	da0b      	bge.n	800bd82 <USBD_StdEPReq+0x2b2>
 800bd6a:	7bbb      	ldrb	r3, [r7, #14]
 800bd6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd70:	4613      	mov	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4413      	add	r3, r2
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	3310      	adds	r3, #16
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	3304      	adds	r3, #4
 800bd80:	e00b      	b.n	800bd9a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd82:	7bbb      	ldrb	r3, [r7, #14]
 800bd84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd88:	4613      	mov	r3, r2
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	4413      	add	r3, r2
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	4413      	add	r3, r2
 800bd98:	3304      	adds	r3, #4
 800bd9a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bd9c:	7bbb      	ldrb	r3, [r7, #14]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d002      	beq.n	800bda8 <USBD_StdEPReq+0x2d8>
 800bda2:	7bbb      	ldrb	r3, [r7, #14]
 800bda4:	2b80      	cmp	r3, #128	@ 0x80
 800bda6:	d103      	bne.n	800bdb0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	601a      	str	r2, [r3, #0]
 800bdae:	e00e      	b.n	800bdce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bdb0:	7bbb      	ldrb	r3, [r7, #14]
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f001 f88b 	bl	800ced0 <USBD_LL_IsStallEP>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d003      	beq.n	800bdc8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	601a      	str	r2, [r3, #0]
 800bdc6:	e002      	b.n	800bdce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	2202      	movs	r2, #2
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 fbdd 	bl	800c594 <USBD_CtlSendData>
              break;
 800bdda:	e004      	b.n	800bde6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 fb5b 	bl	800c49a <USBD_CtlError>
              break;
 800bde4:	bf00      	nop
          }
          break;
 800bde6:	e004      	b.n	800bdf2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bde8:	6839      	ldr	r1, [r7, #0]
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 fb55 	bl	800c49a <USBD_CtlError>
          break;
 800bdf0:	bf00      	nop
      }
      break;
 800bdf2:	e005      	b.n	800be00 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bdf4:	6839      	ldr	r1, [r7, #0]
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 fb4f 	bl	800c49a <USBD_CtlError>
      break;
 800bdfc:	e000      	b.n	800be00 <USBD_StdEPReq+0x330>
      break;
 800bdfe:	bf00      	nop
  }

  return ret;
 800be00:	7bfb      	ldrb	r3, [r7, #15]
}
 800be02:	4618      	mov	r0, r3
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
	...

0800be0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800be16:	2300      	movs	r3, #0
 800be18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800be1a:	2300      	movs	r3, #0
 800be1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800be1e:	2300      	movs	r3, #0
 800be20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	885b      	ldrh	r3, [r3, #2]
 800be26:	0a1b      	lsrs	r3, r3, #8
 800be28:	b29b      	uxth	r3, r3
 800be2a:	3b01      	subs	r3, #1
 800be2c:	2b06      	cmp	r3, #6
 800be2e:	f200 8128 	bhi.w	800c082 <USBD_GetDescriptor+0x276>
 800be32:	a201      	add	r2, pc, #4	@ (adr r2, 800be38 <USBD_GetDescriptor+0x2c>)
 800be34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be38:	0800be55 	.word	0x0800be55
 800be3c:	0800be6d 	.word	0x0800be6d
 800be40:	0800bead 	.word	0x0800bead
 800be44:	0800c083 	.word	0x0800c083
 800be48:	0800c083 	.word	0x0800c083
 800be4c:	0800c023 	.word	0x0800c023
 800be50:	0800c04f 	.word	0x0800c04f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	7c12      	ldrb	r2, [r2, #16]
 800be60:	f107 0108 	add.w	r1, r7, #8
 800be64:	4610      	mov	r0, r2
 800be66:	4798      	blx	r3
 800be68:	60f8      	str	r0, [r7, #12]
      break;
 800be6a:	e112      	b.n	800c092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	7c1b      	ldrb	r3, [r3, #16]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d10d      	bne.n	800be90 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be7c:	f107 0208 	add.w	r2, r7, #8
 800be80:	4610      	mov	r0, r2
 800be82:	4798      	blx	r3
 800be84:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	3301      	adds	r3, #1
 800be8a:	2202      	movs	r2, #2
 800be8c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800be8e:	e100      	b.n	800c092 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be98:	f107 0208 	add.w	r2, r7, #8
 800be9c:	4610      	mov	r0, r2
 800be9e:	4798      	blx	r3
 800bea0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	3301      	adds	r3, #1
 800bea6:	2202      	movs	r2, #2
 800bea8:	701a      	strb	r2, [r3, #0]
      break;
 800beaa:	e0f2      	b.n	800c092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	885b      	ldrh	r3, [r3, #2]
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	2b05      	cmp	r3, #5
 800beb4:	f200 80ac 	bhi.w	800c010 <USBD_GetDescriptor+0x204>
 800beb8:	a201      	add	r2, pc, #4	@ (adr r2, 800bec0 <USBD_GetDescriptor+0xb4>)
 800beba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bebe:	bf00      	nop
 800bec0:	0800bed9 	.word	0x0800bed9
 800bec4:	0800bf0d 	.word	0x0800bf0d
 800bec8:	0800bf41 	.word	0x0800bf41
 800becc:	0800bf75 	.word	0x0800bf75
 800bed0:	0800bfa9 	.word	0x0800bfa9
 800bed4:	0800bfdd 	.word	0x0800bfdd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00b      	beq.n	800befc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beea:	685b      	ldr	r3, [r3, #4]
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	7c12      	ldrb	r2, [r2, #16]
 800bef0:	f107 0108 	add.w	r1, r7, #8
 800bef4:	4610      	mov	r0, r2
 800bef6:	4798      	blx	r3
 800bef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800befa:	e091      	b.n	800c020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800befc:	6839      	ldr	r1, [r7, #0]
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 facb 	bl	800c49a <USBD_CtlError>
            err++;
 800bf04:	7afb      	ldrb	r3, [r7, #11]
 800bf06:	3301      	adds	r3, #1
 800bf08:	72fb      	strb	r3, [r7, #11]
          break;
 800bf0a:	e089      	b.n	800c020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d00b      	beq.n	800bf30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	687a      	ldr	r2, [r7, #4]
 800bf22:	7c12      	ldrb	r2, [r2, #16]
 800bf24:	f107 0108 	add.w	r1, r7, #8
 800bf28:	4610      	mov	r0, r2
 800bf2a:	4798      	blx	r3
 800bf2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf2e:	e077      	b.n	800c020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf30:	6839      	ldr	r1, [r7, #0]
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 fab1 	bl	800c49a <USBD_CtlError>
            err++;
 800bf38:	7afb      	ldrb	r3, [r7, #11]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf3e:	e06f      	b.n	800c020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf46:	68db      	ldr	r3, [r3, #12]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00b      	beq.n	800bf64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	7c12      	ldrb	r2, [r2, #16]
 800bf58:	f107 0108 	add.w	r1, r7, #8
 800bf5c:	4610      	mov	r0, r2
 800bf5e:	4798      	blx	r3
 800bf60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf62:	e05d      	b.n	800c020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf64:	6839      	ldr	r1, [r7, #0]
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 fa97 	bl	800c49a <USBD_CtlError>
            err++;
 800bf6c:	7afb      	ldrb	r3, [r7, #11]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	72fb      	strb	r3, [r7, #11]
          break;
 800bf72:	e055      	b.n	800c020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf7a:	691b      	ldr	r3, [r3, #16]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d00b      	beq.n	800bf98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf86:	691b      	ldr	r3, [r3, #16]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	7c12      	ldrb	r2, [r2, #16]
 800bf8c:	f107 0108 	add.w	r1, r7, #8
 800bf90:	4610      	mov	r0, r2
 800bf92:	4798      	blx	r3
 800bf94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf96:	e043      	b.n	800c020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf98:	6839      	ldr	r1, [r7, #0]
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fa7d 	bl	800c49a <USBD_CtlError>
            err++;
 800bfa0:	7afb      	ldrb	r3, [r7, #11]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	72fb      	strb	r3, [r7, #11]
          break;
 800bfa6:	e03b      	b.n	800c020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfae:	695b      	ldr	r3, [r3, #20]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00b      	beq.n	800bfcc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfba:	695b      	ldr	r3, [r3, #20]
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	7c12      	ldrb	r2, [r2, #16]
 800bfc0:	f107 0108 	add.w	r1, r7, #8
 800bfc4:	4610      	mov	r0, r2
 800bfc6:	4798      	blx	r3
 800bfc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfca:	e029      	b.n	800c020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfcc:	6839      	ldr	r1, [r7, #0]
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 fa63 	bl	800c49a <USBD_CtlError>
            err++;
 800bfd4:	7afb      	ldrb	r3, [r7, #11]
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	72fb      	strb	r3, [r7, #11]
          break;
 800bfda:	e021      	b.n	800c020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfe2:	699b      	ldr	r3, [r3, #24]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00b      	beq.n	800c000 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfee:	699b      	ldr	r3, [r3, #24]
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	7c12      	ldrb	r2, [r2, #16]
 800bff4:	f107 0108 	add.w	r1, r7, #8
 800bff8:	4610      	mov	r0, r2
 800bffa:	4798      	blx	r3
 800bffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bffe:	e00f      	b.n	800c020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c000:	6839      	ldr	r1, [r7, #0]
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 fa49 	bl	800c49a <USBD_CtlError>
            err++;
 800c008:	7afb      	ldrb	r3, [r7, #11]
 800c00a:	3301      	adds	r3, #1
 800c00c:	72fb      	strb	r3, [r7, #11]
          break;
 800c00e:	e007      	b.n	800c020 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c010:	6839      	ldr	r1, [r7, #0]
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f000 fa41 	bl	800c49a <USBD_CtlError>
          err++;
 800c018:	7afb      	ldrb	r3, [r7, #11]
 800c01a:	3301      	adds	r3, #1
 800c01c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c01e:	bf00      	nop
      }
      break;
 800c020:	e037      	b.n	800c092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	7c1b      	ldrb	r3, [r3, #16]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d109      	bne.n	800c03e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c032:	f107 0208 	add.w	r2, r7, #8
 800c036:	4610      	mov	r0, r2
 800c038:	4798      	blx	r3
 800c03a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c03c:	e029      	b.n	800c092 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c03e:	6839      	ldr	r1, [r7, #0]
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 fa2a 	bl	800c49a <USBD_CtlError>
        err++;
 800c046:	7afb      	ldrb	r3, [r7, #11]
 800c048:	3301      	adds	r3, #1
 800c04a:	72fb      	strb	r3, [r7, #11]
      break;
 800c04c:	e021      	b.n	800c092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	7c1b      	ldrb	r3, [r3, #16]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d10d      	bne.n	800c072 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c05c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c05e:	f107 0208 	add.w	r2, r7, #8
 800c062:	4610      	mov	r0, r2
 800c064:	4798      	blx	r3
 800c066:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	3301      	adds	r3, #1
 800c06c:	2207      	movs	r2, #7
 800c06e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c070:	e00f      	b.n	800c092 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c072:	6839      	ldr	r1, [r7, #0]
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 fa10 	bl	800c49a <USBD_CtlError>
        err++;
 800c07a:	7afb      	ldrb	r3, [r7, #11]
 800c07c:	3301      	adds	r3, #1
 800c07e:	72fb      	strb	r3, [r7, #11]
      break;
 800c080:	e007      	b.n	800c092 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c082:	6839      	ldr	r1, [r7, #0]
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 fa08 	bl	800c49a <USBD_CtlError>
      err++;
 800c08a:	7afb      	ldrb	r3, [r7, #11]
 800c08c:	3301      	adds	r3, #1
 800c08e:	72fb      	strb	r3, [r7, #11]
      break;
 800c090:	bf00      	nop
  }

  if (err != 0U)
 800c092:	7afb      	ldrb	r3, [r7, #11]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d11e      	bne.n	800c0d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	88db      	ldrh	r3, [r3, #6]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d016      	beq.n	800c0ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c0a0:	893b      	ldrh	r3, [r7, #8]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00e      	beq.n	800c0c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	88da      	ldrh	r2, [r3, #6]
 800c0aa:	893b      	ldrh	r3, [r7, #8]
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	bf28      	it	cs
 800c0b0:	4613      	movcs	r3, r2
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c0b6:	893b      	ldrh	r3, [r7, #8]
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	68f9      	ldr	r1, [r7, #12]
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 fa69 	bl	800c594 <USBD_CtlSendData>
 800c0c2:	e009      	b.n	800c0d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 f9e7 	bl	800c49a <USBD_CtlError>
 800c0cc:	e004      	b.n	800c0d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 faba 	bl	800c648 <USBD_CtlSendStatus>
 800c0d4:	e000      	b.n	800c0d8 <USBD_GetDescriptor+0x2cc>
    return;
 800c0d6:	bf00      	nop
  }
}
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop

0800c0e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	889b      	ldrh	r3, [r3, #4]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d131      	bne.n	800c156 <USBD_SetAddress+0x76>
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	88db      	ldrh	r3, [r3, #6]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d12d      	bne.n	800c156 <USBD_SetAddress+0x76>
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	885b      	ldrh	r3, [r3, #2]
 800c0fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800c100:	d829      	bhi.n	800c156 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	885b      	ldrh	r3, [r3, #2]
 800c106:	b2db      	uxtb	r3, r3
 800c108:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c10c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c114:	b2db      	uxtb	r3, r3
 800c116:	2b03      	cmp	r3, #3
 800c118:	d104      	bne.n	800c124 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c11a:	6839      	ldr	r1, [r7, #0]
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 f9bc 	bl	800c49a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c122:	e01d      	b.n	800c160 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	7bfa      	ldrb	r2, [r7, #15]
 800c128:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c12c:	7bfb      	ldrb	r3, [r7, #15]
 800c12e:	4619      	mov	r1, r3
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 fef9 	bl	800cf28 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 fa86 	bl	800c648 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c13c:	7bfb      	ldrb	r3, [r7, #15]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d004      	beq.n	800c14c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2202      	movs	r2, #2
 800c146:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c14a:	e009      	b.n	800c160 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2201      	movs	r2, #1
 800c150:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c154:	e004      	b.n	800c160 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c156:	6839      	ldr	r1, [r7, #0]
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 f99e 	bl	800c49a <USBD_CtlError>
  }
}
 800c15e:	bf00      	nop
 800c160:	bf00      	nop
 800c162:	3710      	adds	r7, #16
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c172:	2300      	movs	r3, #0
 800c174:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	885b      	ldrh	r3, [r3, #2]
 800c17a:	b2da      	uxtb	r2, r3
 800c17c:	4b4e      	ldr	r3, [pc, #312]	@ (800c2b8 <USBD_SetConfig+0x150>)
 800c17e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c180:	4b4d      	ldr	r3, [pc, #308]	@ (800c2b8 <USBD_SetConfig+0x150>)
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	2b01      	cmp	r3, #1
 800c186:	d905      	bls.n	800c194 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c188:	6839      	ldr	r1, [r7, #0]
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 f985 	bl	800c49a <USBD_CtlError>
    return USBD_FAIL;
 800c190:	2303      	movs	r3, #3
 800c192:	e08c      	b.n	800c2ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	2b02      	cmp	r3, #2
 800c19e:	d002      	beq.n	800c1a6 <USBD_SetConfig+0x3e>
 800c1a0:	2b03      	cmp	r3, #3
 800c1a2:	d029      	beq.n	800c1f8 <USBD_SetConfig+0x90>
 800c1a4:	e075      	b.n	800c292 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c1a6:	4b44      	ldr	r3, [pc, #272]	@ (800c2b8 <USBD_SetConfig+0x150>)
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d020      	beq.n	800c1f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c1ae:	4b42      	ldr	r3, [pc, #264]	@ (800c2b8 <USBD_SetConfig+0x150>)
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c1b8:	4b3f      	ldr	r3, [pc, #252]	@ (800c2b8 <USBD_SetConfig+0x150>)
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	4619      	mov	r1, r3
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f7fe ffe3 	bl	800b18a <USBD_SetClassConfig>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c1c8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d008      	beq.n	800c1e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c1ce:	6839      	ldr	r1, [r7, #0]
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f000 f962 	bl	800c49a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2202      	movs	r2, #2
 800c1da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c1de:	e065      	b.n	800c2ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f000 fa31 	bl	800c648 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2203      	movs	r2, #3
 800c1ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c1ee:	e05d      	b.n	800c2ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 fa29 	bl	800c648 <USBD_CtlSendStatus>
      break;
 800c1f6:	e059      	b.n	800c2ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c1f8:	4b2f      	ldr	r3, [pc, #188]	@ (800c2b8 <USBD_SetConfig+0x150>)
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d112      	bne.n	800c226 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2202      	movs	r2, #2
 800c204:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c208:	4b2b      	ldr	r3, [pc, #172]	@ (800c2b8 <USBD_SetConfig+0x150>)
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	461a      	mov	r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c212:	4b29      	ldr	r3, [pc, #164]	@ (800c2b8 <USBD_SetConfig+0x150>)
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	4619      	mov	r1, r3
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7fe ffd2 	bl	800b1c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 fa12 	bl	800c648 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c224:	e042      	b.n	800c2ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c226:	4b24      	ldr	r3, [pc, #144]	@ (800c2b8 <USBD_SetConfig+0x150>)
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	461a      	mov	r2, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	429a      	cmp	r2, r3
 800c232:	d02a      	beq.n	800c28a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	4619      	mov	r1, r3
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f7fe ffc0 	bl	800b1c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c242:	4b1d      	ldr	r3, [pc, #116]	@ (800c2b8 <USBD_SetConfig+0x150>)
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	461a      	mov	r2, r3
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c24c:	4b1a      	ldr	r3, [pc, #104]	@ (800c2b8 <USBD_SetConfig+0x150>)
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	4619      	mov	r1, r3
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f7fe ff99 	bl	800b18a <USBD_SetClassConfig>
 800c258:	4603      	mov	r3, r0
 800c25a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c25c:	7bfb      	ldrb	r3, [r7, #15]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00f      	beq.n	800c282 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c262:	6839      	ldr	r1, [r7, #0]
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 f918 	bl	800c49a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	4619      	mov	r1, r3
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f7fe ffa5 	bl	800b1c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2202      	movs	r2, #2
 800c27c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c280:	e014      	b.n	800c2ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 f9e0 	bl	800c648 <USBD_CtlSendStatus>
      break;
 800c288:	e010      	b.n	800c2ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 f9dc 	bl	800c648 <USBD_CtlSendStatus>
      break;
 800c290:	e00c      	b.n	800c2ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c292:	6839      	ldr	r1, [r7, #0]
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 f900 	bl	800c49a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c29a:	4b07      	ldr	r3, [pc, #28]	@ (800c2b8 <USBD_SetConfig+0x150>)
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	4619      	mov	r1, r3
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f7fe ff8e 	bl	800b1c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c2a6:	2303      	movs	r3, #3
 800c2a8:	73fb      	strb	r3, [r7, #15]
      break;
 800c2aa:	bf00      	nop
  }

  return ret;
 800c2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	20000728 	.word	0x20000728

0800c2bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b082      	sub	sp, #8
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	88db      	ldrh	r3, [r3, #6]
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d004      	beq.n	800c2d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 f8e2 	bl	800c49a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c2d6:	e023      	b.n	800c320 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	2b02      	cmp	r3, #2
 800c2e2:	dc02      	bgt.n	800c2ea <USBD_GetConfig+0x2e>
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	dc03      	bgt.n	800c2f0 <USBD_GetConfig+0x34>
 800c2e8:	e015      	b.n	800c316 <USBD_GetConfig+0x5a>
 800c2ea:	2b03      	cmp	r3, #3
 800c2ec:	d00b      	beq.n	800c306 <USBD_GetConfig+0x4a>
 800c2ee:	e012      	b.n	800c316 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	3308      	adds	r3, #8
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 f948 	bl	800c594 <USBD_CtlSendData>
        break;
 800c304:	e00c      	b.n	800c320 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	3304      	adds	r3, #4
 800c30a:	2201      	movs	r2, #1
 800c30c:	4619      	mov	r1, r3
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 f940 	bl	800c594 <USBD_CtlSendData>
        break;
 800c314:	e004      	b.n	800c320 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c316:	6839      	ldr	r1, [r7, #0]
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 f8be 	bl	800c49a <USBD_CtlError>
        break;
 800c31e:	bf00      	nop
}
 800c320:	bf00      	nop
 800c322:	3708      	adds	r7, #8
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c338:	b2db      	uxtb	r3, r3
 800c33a:	3b01      	subs	r3, #1
 800c33c:	2b02      	cmp	r3, #2
 800c33e:	d81e      	bhi.n	800c37e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	88db      	ldrh	r3, [r3, #6]
 800c344:	2b02      	cmp	r3, #2
 800c346:	d004      	beq.n	800c352 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c348:	6839      	ldr	r1, [r7, #0]
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 f8a5 	bl	800c49a <USBD_CtlError>
        break;
 800c350:	e01a      	b.n	800c388 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2201      	movs	r2, #1
 800c356:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d005      	beq.n	800c36e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	f043 0202 	orr.w	r2, r3, #2
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	330c      	adds	r3, #12
 800c372:	2202      	movs	r2, #2
 800c374:	4619      	mov	r1, r3
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 f90c 	bl	800c594 <USBD_CtlSendData>
      break;
 800c37c:	e004      	b.n	800c388 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c37e:	6839      	ldr	r1, [r7, #0]
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 f88a 	bl	800c49a <USBD_CtlError>
      break;
 800c386:	bf00      	nop
  }
}
 800c388:	bf00      	nop
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	885b      	ldrh	r3, [r3, #2]
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d107      	bne.n	800c3b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 f94c 	bl	800c648 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c3b0:	e013      	b.n	800c3da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	885b      	ldrh	r3, [r3, #2]
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	d10b      	bne.n	800c3d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	889b      	ldrh	r3, [r3, #4]
 800c3be:	0a1b      	lsrs	r3, r3, #8
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	b2da      	uxtb	r2, r3
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 f93c 	bl	800c648 <USBD_CtlSendStatus>
}
 800c3d0:	e003      	b.n	800c3da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c3d2:	6839      	ldr	r1, [r7, #0]
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f000 f860 	bl	800c49a <USBD_CtlError>
}
 800c3da:	bf00      	nop
 800c3dc:	3708      	adds	r7, #8
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b082      	sub	sp, #8
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
 800c3ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	2b02      	cmp	r3, #2
 800c3f8:	d80b      	bhi.n	800c412 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	885b      	ldrh	r3, [r3, #2]
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d10c      	bne.n	800c41c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2200      	movs	r2, #0
 800c406:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 f91c 	bl	800c648 <USBD_CtlSendStatus>
      }
      break;
 800c410:	e004      	b.n	800c41c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c412:	6839      	ldr	r1, [r7, #0]
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 f840 	bl	800c49a <USBD_CtlError>
      break;
 800c41a:	e000      	b.n	800c41e <USBD_ClrFeature+0x3c>
      break;
 800c41c:	bf00      	nop
  }
}
 800c41e:	bf00      	nop
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c426:	b580      	push	{r7, lr}
 800c428:	b084      	sub	sp, #16
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
 800c42e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	781a      	ldrb	r2, [r3, #0]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	3301      	adds	r3, #1
 800c440:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	781a      	ldrb	r2, [r3, #0]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	3301      	adds	r3, #1
 800c44e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f7ff fa40 	bl	800b8d6 <SWAPBYTE>
 800c456:	4603      	mov	r3, r0
 800c458:	461a      	mov	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	3301      	adds	r3, #1
 800c462:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	3301      	adds	r3, #1
 800c468:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c46a:	68f8      	ldr	r0, [r7, #12]
 800c46c:	f7ff fa33 	bl	800b8d6 <SWAPBYTE>
 800c470:	4603      	mov	r3, r0
 800c472:	461a      	mov	r2, r3
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	3301      	adds	r3, #1
 800c47c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	3301      	adds	r3, #1
 800c482:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f7ff fa26 	bl	800b8d6 <SWAPBYTE>
 800c48a:	4603      	mov	r3, r0
 800c48c:	461a      	mov	r2, r3
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	80da      	strh	r2, [r3, #6]
}
 800c492:	bf00      	nop
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b082      	sub	sp, #8
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
 800c4a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4a4:	2180      	movs	r1, #128	@ 0x80
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 fcd4 	bl	800ce54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 fcd0 	bl	800ce54 <USBD_LL_StallEP>
}
 800c4b4:	bf00      	nop
 800c4b6:	3708      	adds	r7, #8
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b086      	sub	sp, #24
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d042      	beq.n	800c558 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c4d6:	6938      	ldr	r0, [r7, #16]
 800c4d8:	f000 f842 	bl	800c560 <USBD_GetLen>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	3301      	adds	r3, #1
 800c4e0:	005b      	lsls	r3, r3, #1
 800c4e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4e6:	d808      	bhi.n	800c4fa <USBD_GetString+0x3e>
 800c4e8:	6938      	ldr	r0, [r7, #16]
 800c4ea:	f000 f839 	bl	800c560 <USBD_GetLen>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	005b      	lsls	r3, r3, #1
 800c4f6:	b29a      	uxth	r2, r3
 800c4f8:	e001      	b.n	800c4fe <USBD_GetString+0x42>
 800c4fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c502:	7dfb      	ldrb	r3, [r7, #23]
 800c504:	68ba      	ldr	r2, [r7, #8]
 800c506:	4413      	add	r3, r2
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	7812      	ldrb	r2, [r2, #0]
 800c50c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c50e:	7dfb      	ldrb	r3, [r7, #23]
 800c510:	3301      	adds	r3, #1
 800c512:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c514:	7dfb      	ldrb	r3, [r7, #23]
 800c516:	68ba      	ldr	r2, [r7, #8]
 800c518:	4413      	add	r3, r2
 800c51a:	2203      	movs	r2, #3
 800c51c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c51e:	7dfb      	ldrb	r3, [r7, #23]
 800c520:	3301      	adds	r3, #1
 800c522:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c524:	e013      	b.n	800c54e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c526:	7dfb      	ldrb	r3, [r7, #23]
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	4413      	add	r3, r2
 800c52c:	693a      	ldr	r2, [r7, #16]
 800c52e:	7812      	ldrb	r2, [r2, #0]
 800c530:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	3301      	adds	r3, #1
 800c536:	613b      	str	r3, [r7, #16]
    idx++;
 800c538:	7dfb      	ldrb	r3, [r7, #23]
 800c53a:	3301      	adds	r3, #1
 800c53c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c53e:	7dfb      	ldrb	r3, [r7, #23]
 800c540:	68ba      	ldr	r2, [r7, #8]
 800c542:	4413      	add	r3, r2
 800c544:	2200      	movs	r2, #0
 800c546:	701a      	strb	r2, [r3, #0]
    idx++;
 800c548:	7dfb      	ldrb	r3, [r7, #23]
 800c54a:	3301      	adds	r3, #1
 800c54c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d1e7      	bne.n	800c526 <USBD_GetString+0x6a>
 800c556:	e000      	b.n	800c55a <USBD_GetString+0x9e>
    return;
 800c558:	bf00      	nop
  }
}
 800c55a:	3718      	adds	r7, #24
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c560:	b480      	push	{r7}
 800c562:	b085      	sub	sp, #20
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c568:	2300      	movs	r3, #0
 800c56a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c570:	e005      	b.n	800c57e <USBD_GetLen+0x1e>
  {
    len++;
 800c572:	7bfb      	ldrb	r3, [r7, #15]
 800c574:	3301      	adds	r3, #1
 800c576:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	3301      	adds	r3, #1
 800c57c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d1f5      	bne.n	800c572 <USBD_GetLen+0x12>
  }

  return len;
 800c586:	7bfb      	ldrb	r3, [r7, #15]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3714      	adds	r7, #20
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2202      	movs	r2, #2
 800c5a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	68ba      	ldr	r2, [r7, #8]
 800c5b8:	2100      	movs	r1, #0
 800c5ba:	68f8      	ldr	r0, [r7, #12]
 800c5bc:	f000 fcd3 	bl	800cf66 <USBD_LL_Transmit>

  return USBD_OK;
 800c5c0:	2300      	movs	r3, #0
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b084      	sub	sp, #16
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	60f8      	str	r0, [r7, #12]
 800c5d2:	60b9      	str	r1, [r7, #8]
 800c5d4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	68ba      	ldr	r2, [r7, #8]
 800c5da:	2100      	movs	r1, #0
 800c5dc:	68f8      	ldr	r0, [r7, #12]
 800c5de:	f000 fcc2 	bl	800cf66 <USBD_LL_Transmit>

  return USBD_OK;
 800c5e2:	2300      	movs	r3, #0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3710      	adds	r7, #16
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	60f8      	str	r0, [r7, #12]
 800c5f4:	60b9      	str	r1, [r7, #8]
 800c5f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2203      	movs	r2, #3
 800c5fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	68ba      	ldr	r2, [r7, #8]
 800c614:	2100      	movs	r1, #0
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	f000 fcc6 	bl	800cfa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c61c:	2300      	movs	r3, #0
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}

0800c626 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c626:	b580      	push	{r7, lr}
 800c628:	b084      	sub	sp, #16
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	60f8      	str	r0, [r7, #12]
 800c62e:	60b9      	str	r1, [r7, #8]
 800c630:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	68ba      	ldr	r2, [r7, #8]
 800c636:	2100      	movs	r1, #0
 800c638:	68f8      	ldr	r0, [r7, #12]
 800c63a:	f000 fcb5 	bl	800cfa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c63e:	2300      	movs	r3, #0
}
 800c640:	4618      	mov	r0, r3
 800c642:	3710      	adds	r7, #16
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2204      	movs	r2, #4
 800c654:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c658:	2300      	movs	r3, #0
 800c65a:	2200      	movs	r2, #0
 800c65c:	2100      	movs	r1, #0
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 fc81 	bl	800cf66 <USBD_LL_Transmit>

  return USBD_OK;
 800c664:	2300      	movs	r3, #0
}
 800c666:	4618      	mov	r0, r3
 800c668:	3708      	adds	r7, #8
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}

0800c66e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c66e:	b580      	push	{r7, lr}
 800c670:	b082      	sub	sp, #8
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2205      	movs	r2, #5
 800c67a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c67e:	2300      	movs	r3, #0
 800c680:	2200      	movs	r2, #0
 800c682:	2100      	movs	r1, #0
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 fc8f 	bl	800cfa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c68a:	2300      	movs	r3, #0
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3708      	adds	r7, #8
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c698:	2200      	movs	r2, #0
 800c69a:	4912      	ldr	r1, [pc, #72]	@ (800c6e4 <MX_USB_DEVICE_Init+0x50>)
 800c69c:	4812      	ldr	r0, [pc, #72]	@ (800c6e8 <MX_USB_DEVICE_Init+0x54>)
 800c69e:	f7fe fcf7 	bl	800b090 <USBD_Init>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d001      	beq.n	800c6ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c6a8:	f7f5 f9e2 	bl	8001a70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c6ac:	490f      	ldr	r1, [pc, #60]	@ (800c6ec <MX_USB_DEVICE_Init+0x58>)
 800c6ae:	480e      	ldr	r0, [pc, #56]	@ (800c6e8 <MX_USB_DEVICE_Init+0x54>)
 800c6b0:	f7fe fd1e 	bl	800b0f0 <USBD_RegisterClass>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d001      	beq.n	800c6be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c6ba:	f7f5 f9d9 	bl	8001a70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c6be:	490c      	ldr	r1, [pc, #48]	@ (800c6f0 <MX_USB_DEVICE_Init+0x5c>)
 800c6c0:	4809      	ldr	r0, [pc, #36]	@ (800c6e8 <MX_USB_DEVICE_Init+0x54>)
 800c6c2:	f7fe fc55 	bl	800af70 <USBD_CDC_RegisterInterface>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d001      	beq.n	800c6d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c6cc:	f7f5 f9d0 	bl	8001a70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c6d0:	4805      	ldr	r0, [pc, #20]	@ (800c6e8 <MX_USB_DEVICE_Init+0x54>)
 800c6d2:	f7fe fd43 	bl	800b15c <USBD_Start>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d001      	beq.n	800c6e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c6dc:	f7f5 f9c8 	bl	8001a70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c6e0:	bf00      	nop
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	200000b0 	.word	0x200000b0
 800c6e8:	2000072c 	.word	0x2000072c
 800c6ec:	2000001c 	.word	0x2000001c
 800c6f0:	2000009c 	.word	0x2000009c

0800c6f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	4905      	ldr	r1, [pc, #20]	@ (800c710 <CDC_Init_FS+0x1c>)
 800c6fc:	4805      	ldr	r0, [pc, #20]	@ (800c714 <CDC_Init_FS+0x20>)
 800c6fe:	f7fe fc51 	bl	800afa4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c702:	4905      	ldr	r1, [pc, #20]	@ (800c718 <CDC_Init_FS+0x24>)
 800c704:	4803      	ldr	r0, [pc, #12]	@ (800c714 <CDC_Init_FS+0x20>)
 800c706:	f7fe fc6f 	bl	800afe8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c70a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	20001208 	.word	0x20001208
 800c714:	2000072c 	.word	0x2000072c
 800c718:	20000a08 	.word	0x20000a08

0800c71c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c71c:	b480      	push	{r7}
 800c71e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c720:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c722:	4618      	mov	r0, r3
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr

0800c72c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b083      	sub	sp, #12
 800c730:	af00      	add	r7, sp, #0
 800c732:	4603      	mov	r3, r0
 800c734:	6039      	str	r1, [r7, #0]
 800c736:	71fb      	strb	r3, [r7, #7]
 800c738:	4613      	mov	r3, r2
 800c73a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c73c:	79fb      	ldrb	r3, [r7, #7]
 800c73e:	2b23      	cmp	r3, #35	@ 0x23
 800c740:	d84a      	bhi.n	800c7d8 <CDC_Control_FS+0xac>
 800c742:	a201      	add	r2, pc, #4	@ (adr r2, 800c748 <CDC_Control_FS+0x1c>)
 800c744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c748:	0800c7d9 	.word	0x0800c7d9
 800c74c:	0800c7d9 	.word	0x0800c7d9
 800c750:	0800c7d9 	.word	0x0800c7d9
 800c754:	0800c7d9 	.word	0x0800c7d9
 800c758:	0800c7d9 	.word	0x0800c7d9
 800c75c:	0800c7d9 	.word	0x0800c7d9
 800c760:	0800c7d9 	.word	0x0800c7d9
 800c764:	0800c7d9 	.word	0x0800c7d9
 800c768:	0800c7d9 	.word	0x0800c7d9
 800c76c:	0800c7d9 	.word	0x0800c7d9
 800c770:	0800c7d9 	.word	0x0800c7d9
 800c774:	0800c7d9 	.word	0x0800c7d9
 800c778:	0800c7d9 	.word	0x0800c7d9
 800c77c:	0800c7d9 	.word	0x0800c7d9
 800c780:	0800c7d9 	.word	0x0800c7d9
 800c784:	0800c7d9 	.word	0x0800c7d9
 800c788:	0800c7d9 	.word	0x0800c7d9
 800c78c:	0800c7d9 	.word	0x0800c7d9
 800c790:	0800c7d9 	.word	0x0800c7d9
 800c794:	0800c7d9 	.word	0x0800c7d9
 800c798:	0800c7d9 	.word	0x0800c7d9
 800c79c:	0800c7d9 	.word	0x0800c7d9
 800c7a0:	0800c7d9 	.word	0x0800c7d9
 800c7a4:	0800c7d9 	.word	0x0800c7d9
 800c7a8:	0800c7d9 	.word	0x0800c7d9
 800c7ac:	0800c7d9 	.word	0x0800c7d9
 800c7b0:	0800c7d9 	.word	0x0800c7d9
 800c7b4:	0800c7d9 	.word	0x0800c7d9
 800c7b8:	0800c7d9 	.word	0x0800c7d9
 800c7bc:	0800c7d9 	.word	0x0800c7d9
 800c7c0:	0800c7d9 	.word	0x0800c7d9
 800c7c4:	0800c7d9 	.word	0x0800c7d9
 800c7c8:	0800c7d9 	.word	0x0800c7d9
 800c7cc:	0800c7d9 	.word	0x0800c7d9
 800c7d0:	0800c7d9 	.word	0x0800c7d9
 800c7d4:	0800c7d9 	.word	0x0800c7d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c7d8:	bf00      	nop
  }

  return (USBD_OK);
 800c7da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	370c      	adds	r7, #12
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr

0800c7e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c7f2:	6879      	ldr	r1, [r7, #4]
 800c7f4:	4805      	ldr	r0, [pc, #20]	@ (800c80c <CDC_Receive_FS+0x24>)
 800c7f6:	f7fe fbf7 	bl	800afe8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c7fa:	4804      	ldr	r0, [pc, #16]	@ (800c80c <CDC_Receive_FS+0x24>)
 800c7fc:	f7fe fc12 	bl	800b024 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c800:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c802:	4618      	mov	r0, r3
 800c804:	3708      	adds	r7, #8
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop
 800c80c:	2000072c 	.word	0x2000072c

0800c810 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c810:	b480      	push	{r7}
 800c812:	b087      	sub	sp, #28
 800c814:	af00      	add	r7, sp, #0
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	4613      	mov	r3, r2
 800c81c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c81e:	2300      	movs	r3, #0
 800c820:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c822:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c826:	4618      	mov	r0, r3
 800c828:	371c      	adds	r7, #28
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr
	...

0800c834 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c834:	b480      	push	{r7}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
 800c83a:	4603      	mov	r3, r0
 800c83c:	6039      	str	r1, [r7, #0]
 800c83e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	2212      	movs	r2, #18
 800c844:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c846:	4b03      	ldr	r3, [pc, #12]	@ (800c854 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c848:	4618      	mov	r0, r3
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr
 800c854:	200000cc 	.word	0x200000cc

0800c858 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	4603      	mov	r3, r0
 800c860:	6039      	str	r1, [r7, #0]
 800c862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	2204      	movs	r2, #4
 800c868:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c86a:	4b03      	ldr	r3, [pc, #12]	@ (800c878 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	370c      	adds	r7, #12
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr
 800c878:	200000e0 	.word	0x200000e0

0800c87c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	4603      	mov	r3, r0
 800c884:	6039      	str	r1, [r7, #0]
 800c886:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c888:	79fb      	ldrb	r3, [r7, #7]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d105      	bne.n	800c89a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c88e:	683a      	ldr	r2, [r7, #0]
 800c890:	4907      	ldr	r1, [pc, #28]	@ (800c8b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c892:	4808      	ldr	r0, [pc, #32]	@ (800c8b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c894:	f7ff fe12 	bl	800c4bc <USBD_GetString>
 800c898:	e004      	b.n	800c8a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c89a:	683a      	ldr	r2, [r7, #0]
 800c89c:	4904      	ldr	r1, [pc, #16]	@ (800c8b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c89e:	4805      	ldr	r0, [pc, #20]	@ (800c8b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c8a0:	f7ff fe0c 	bl	800c4bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c8a4:	4b02      	ldr	r3, [pc, #8]	@ (800c8b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3708      	adds	r7, #8
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	20001a08 	.word	0x20001a08
 800c8b4:	0801069c 	.word	0x0801069c

0800c8b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	4603      	mov	r3, r0
 800c8c0:	6039      	str	r1, [r7, #0]
 800c8c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c8c4:	683a      	ldr	r2, [r7, #0]
 800c8c6:	4904      	ldr	r1, [pc, #16]	@ (800c8d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c8c8:	4804      	ldr	r0, [pc, #16]	@ (800c8dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c8ca:	f7ff fdf7 	bl	800c4bc <USBD_GetString>
  return USBD_StrDesc;
 800c8ce:	4b02      	ldr	r3, [pc, #8]	@ (800c8d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3708      	adds	r7, #8
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	20001a08 	.word	0x20001a08
 800c8dc:	080106b4 	.word	0x080106b4

0800c8e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	6039      	str	r1, [r7, #0]
 800c8ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	221a      	movs	r2, #26
 800c8f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c8f2:	f000 f843 	bl	800c97c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c8f6:	4b02      	ldr	r3, [pc, #8]	@ (800c900 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3708      	adds	r7, #8
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}
 800c900:	200000e4 	.word	0x200000e4

0800c904 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	4603      	mov	r3, r0
 800c90c:	6039      	str	r1, [r7, #0]
 800c90e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c910:	79fb      	ldrb	r3, [r7, #7]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d105      	bne.n	800c922 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c916:	683a      	ldr	r2, [r7, #0]
 800c918:	4907      	ldr	r1, [pc, #28]	@ (800c938 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c91a:	4808      	ldr	r0, [pc, #32]	@ (800c93c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c91c:	f7ff fdce 	bl	800c4bc <USBD_GetString>
 800c920:	e004      	b.n	800c92c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c922:	683a      	ldr	r2, [r7, #0]
 800c924:	4904      	ldr	r1, [pc, #16]	@ (800c938 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c926:	4805      	ldr	r0, [pc, #20]	@ (800c93c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c928:	f7ff fdc8 	bl	800c4bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c92c:	4b02      	ldr	r3, [pc, #8]	@ (800c938 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3708      	adds	r7, #8
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
 800c936:	bf00      	nop
 800c938:	20001a08 	.word	0x20001a08
 800c93c:	080106c8 	.word	0x080106c8

0800c940 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
 800c946:	4603      	mov	r3, r0
 800c948:	6039      	str	r1, [r7, #0]
 800c94a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c94c:	79fb      	ldrb	r3, [r7, #7]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d105      	bne.n	800c95e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c952:	683a      	ldr	r2, [r7, #0]
 800c954:	4907      	ldr	r1, [pc, #28]	@ (800c974 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c956:	4808      	ldr	r0, [pc, #32]	@ (800c978 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c958:	f7ff fdb0 	bl	800c4bc <USBD_GetString>
 800c95c:	e004      	b.n	800c968 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c95e:	683a      	ldr	r2, [r7, #0]
 800c960:	4904      	ldr	r1, [pc, #16]	@ (800c974 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c962:	4805      	ldr	r0, [pc, #20]	@ (800c978 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c964:	f7ff fdaa 	bl	800c4bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c968:	4b02      	ldr	r3, [pc, #8]	@ (800c974 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3708      	adds	r7, #8
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	20001a08 	.word	0x20001a08
 800c978:	080106d4 	.word	0x080106d4

0800c97c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c982:	4b0f      	ldr	r3, [pc, #60]	@ (800c9c0 <Get_SerialNum+0x44>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c988:	4b0e      	ldr	r3, [pc, #56]	@ (800c9c4 <Get_SerialNum+0x48>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c98e:	4b0e      	ldr	r3, [pc, #56]	@ (800c9c8 <Get_SerialNum+0x4c>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c994:	68fa      	ldr	r2, [r7, #12]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	4413      	add	r3, r2
 800c99a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d009      	beq.n	800c9b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c9a2:	2208      	movs	r2, #8
 800c9a4:	4909      	ldr	r1, [pc, #36]	@ (800c9cc <Get_SerialNum+0x50>)
 800c9a6:	68f8      	ldr	r0, [r7, #12]
 800c9a8:	f000 f814 	bl	800c9d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c9ac:	2204      	movs	r2, #4
 800c9ae:	4908      	ldr	r1, [pc, #32]	@ (800c9d0 <Get_SerialNum+0x54>)
 800c9b0:	68b8      	ldr	r0, [r7, #8]
 800c9b2:	f000 f80f 	bl	800c9d4 <IntToUnicode>
  }
}
 800c9b6:	bf00      	nop
 800c9b8:	3710      	adds	r7, #16
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	1fff7a10 	.word	0x1fff7a10
 800c9c4:	1fff7a14 	.word	0x1fff7a14
 800c9c8:	1fff7a18 	.word	0x1fff7a18
 800c9cc:	200000e6 	.word	0x200000e6
 800c9d0:	200000f6 	.word	0x200000f6

0800c9d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b087      	sub	sp, #28
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	60b9      	str	r1, [r7, #8]
 800c9de:	4613      	mov	r3, r2
 800c9e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	75fb      	strb	r3, [r7, #23]
 800c9ea:	e027      	b.n	800ca3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	0f1b      	lsrs	r3, r3, #28
 800c9f0:	2b09      	cmp	r3, #9
 800c9f2:	d80b      	bhi.n	800ca0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	0f1b      	lsrs	r3, r3, #28
 800c9f8:	b2da      	uxtb	r2, r3
 800c9fa:	7dfb      	ldrb	r3, [r7, #23]
 800c9fc:	005b      	lsls	r3, r3, #1
 800c9fe:	4619      	mov	r1, r3
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	440b      	add	r3, r1
 800ca04:	3230      	adds	r2, #48	@ 0x30
 800ca06:	b2d2      	uxtb	r2, r2
 800ca08:	701a      	strb	r2, [r3, #0]
 800ca0a:	e00a      	b.n	800ca22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	0f1b      	lsrs	r3, r3, #28
 800ca10:	b2da      	uxtb	r2, r3
 800ca12:	7dfb      	ldrb	r3, [r7, #23]
 800ca14:	005b      	lsls	r3, r3, #1
 800ca16:	4619      	mov	r1, r3
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	440b      	add	r3, r1
 800ca1c:	3237      	adds	r2, #55	@ 0x37
 800ca1e:	b2d2      	uxtb	r2, r2
 800ca20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	011b      	lsls	r3, r3, #4
 800ca26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ca28:	7dfb      	ldrb	r3, [r7, #23]
 800ca2a:	005b      	lsls	r3, r3, #1
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	68ba      	ldr	r2, [r7, #8]
 800ca30:	4413      	add	r3, r2
 800ca32:	2200      	movs	r2, #0
 800ca34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ca36:	7dfb      	ldrb	r3, [r7, #23]
 800ca38:	3301      	adds	r3, #1
 800ca3a:	75fb      	strb	r3, [r7, #23]
 800ca3c:	7dfa      	ldrb	r2, [r7, #23]
 800ca3e:	79fb      	ldrb	r3, [r7, #7]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d3d3      	bcc.n	800c9ec <IntToUnicode+0x18>
  }
}
 800ca44:	bf00      	nop
 800ca46:	bf00      	nop
 800ca48:	371c      	adds	r7, #28
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
	...

0800ca54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b08a      	sub	sp, #40	@ 0x28
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca5c:	f107 0314 	add.w	r3, r7, #20
 800ca60:	2200      	movs	r2, #0
 800ca62:	601a      	str	r2, [r3, #0]
 800ca64:	605a      	str	r2, [r3, #4]
 800ca66:	609a      	str	r2, [r3, #8]
 800ca68:	60da      	str	r2, [r3, #12]
 800ca6a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ca74:	d147      	bne.n	800cb06 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca76:	2300      	movs	r3, #0
 800ca78:	613b      	str	r3, [r7, #16]
 800ca7a:	4b25      	ldr	r3, [pc, #148]	@ (800cb10 <HAL_PCD_MspInit+0xbc>)
 800ca7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca7e:	4a24      	ldr	r2, [pc, #144]	@ (800cb10 <HAL_PCD_MspInit+0xbc>)
 800ca80:	f043 0301 	orr.w	r3, r3, #1
 800ca84:	6313      	str	r3, [r2, #48]	@ 0x30
 800ca86:	4b22      	ldr	r3, [pc, #136]	@ (800cb10 <HAL_PCD_MspInit+0xbc>)
 800ca88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca8a:	f003 0301 	and.w	r3, r3, #1
 800ca8e:	613b      	str	r3, [r7, #16]
 800ca90:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ca92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ca96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800caa0:	f107 0314 	add.w	r3, r7, #20
 800caa4:	4619      	mov	r1, r3
 800caa6:	481b      	ldr	r0, [pc, #108]	@ (800cb14 <HAL_PCD_MspInit+0xc0>)
 800caa8:	f7f7 f9e4 	bl	8003e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800caac:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800cab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cab2:	2302      	movs	r3, #2
 800cab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cab6:	2300      	movs	r3, #0
 800cab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800caba:	2300      	movs	r3, #0
 800cabc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cabe:	230a      	movs	r3, #10
 800cac0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cac2:	f107 0314 	add.w	r3, r7, #20
 800cac6:	4619      	mov	r1, r3
 800cac8:	4812      	ldr	r0, [pc, #72]	@ (800cb14 <HAL_PCD_MspInit+0xc0>)
 800caca:	f7f7 f9d3 	bl	8003e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cace:	4b10      	ldr	r3, [pc, #64]	@ (800cb10 <HAL_PCD_MspInit+0xbc>)
 800cad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cad2:	4a0f      	ldr	r2, [pc, #60]	@ (800cb10 <HAL_PCD_MspInit+0xbc>)
 800cad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cad8:	6353      	str	r3, [r2, #52]	@ 0x34
 800cada:	2300      	movs	r3, #0
 800cadc:	60fb      	str	r3, [r7, #12]
 800cade:	4b0c      	ldr	r3, [pc, #48]	@ (800cb10 <HAL_PCD_MspInit+0xbc>)
 800cae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cae2:	4a0b      	ldr	r2, [pc, #44]	@ (800cb10 <HAL_PCD_MspInit+0xbc>)
 800cae4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cae8:	6453      	str	r3, [r2, #68]	@ 0x44
 800caea:	4b09      	ldr	r3, [pc, #36]	@ (800cb10 <HAL_PCD_MspInit+0xbc>)
 800caec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800caee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800caf2:	60fb      	str	r3, [r7, #12]
 800caf4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800caf6:	2200      	movs	r2, #0
 800caf8:	2100      	movs	r1, #0
 800cafa:	2043      	movs	r0, #67	@ 0x43
 800cafc:	f7f6 fe13 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cb00:	2043      	movs	r0, #67	@ 0x43
 800cb02:	f7f6 fe2c 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cb06:	bf00      	nop
 800cb08:	3728      	adds	r7, #40	@ 0x28
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	40023800 	.word	0x40023800
 800cb14:	40020000 	.word	0x40020000

0800cb18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	4610      	mov	r0, r2
 800cb30:	f7fe fb61 	bl	800b1f6 <USBD_LL_SetupStage>
}
 800cb34:	bf00      	nop
 800cb36:	3708      	adds	r7, #8
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	460b      	mov	r3, r1
 800cb46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cb4e:	78fa      	ldrb	r2, [r7, #3]
 800cb50:	6879      	ldr	r1, [r7, #4]
 800cb52:	4613      	mov	r3, r2
 800cb54:	00db      	lsls	r3, r3, #3
 800cb56:	4413      	add	r3, r2
 800cb58:	009b      	lsls	r3, r3, #2
 800cb5a:	440b      	add	r3, r1
 800cb5c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	78fb      	ldrb	r3, [r7, #3]
 800cb64:	4619      	mov	r1, r3
 800cb66:	f7fe fb9b 	bl	800b2a0 <USBD_LL_DataOutStage>
}
 800cb6a:	bf00      	nop
 800cb6c:	3708      	adds	r7, #8
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}

0800cb72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb72:	b580      	push	{r7, lr}
 800cb74:	b082      	sub	sp, #8
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cb84:	78fa      	ldrb	r2, [r7, #3]
 800cb86:	6879      	ldr	r1, [r7, #4]
 800cb88:	4613      	mov	r3, r2
 800cb8a:	00db      	lsls	r3, r3, #3
 800cb8c:	4413      	add	r3, r2
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	440b      	add	r3, r1
 800cb92:	3320      	adds	r3, #32
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	78fb      	ldrb	r3, [r7, #3]
 800cb98:	4619      	mov	r1, r3
 800cb9a:	f7fe fc34 	bl	800b406 <USBD_LL_DataInStage>
}
 800cb9e:	bf00      	nop
 800cba0:	3708      	adds	r7, #8
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}

0800cba6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b082      	sub	sp, #8
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7fe fd6e 	bl	800b696 <USBD_LL_SOF>
}
 800cbba:	bf00      	nop
 800cbbc:	3708      	adds	r7, #8
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}

0800cbc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b084      	sub	sp, #16
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	79db      	ldrb	r3, [r3, #7]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d102      	bne.n	800cbdc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	73fb      	strb	r3, [r7, #15]
 800cbda:	e008      	b.n	800cbee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	79db      	ldrb	r3, [r3, #7]
 800cbe0:	2b02      	cmp	r3, #2
 800cbe2:	d102      	bne.n	800cbea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	73fb      	strb	r3, [r7, #15]
 800cbe8:	e001      	b.n	800cbee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cbea:	f7f4 ff41 	bl	8001a70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cbf4:	7bfa      	ldrb	r2, [r7, #15]
 800cbf6:	4611      	mov	r1, r2
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7fe fd08 	bl	800b60e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7fe fcb0 	bl	800b56a <USBD_LL_Reset>
}
 800cc0a:	bf00      	nop
 800cc0c:	3710      	adds	r7, #16
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
	...

0800cc14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7fe fd03 	bl	800b62e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	6812      	ldr	r2, [r2, #0]
 800cc36:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cc3a:	f043 0301 	orr.w	r3, r3, #1
 800cc3e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	7adb      	ldrb	r3, [r3, #11]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d005      	beq.n	800cc54 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc48:	4b04      	ldr	r3, [pc, #16]	@ (800cc5c <HAL_PCD_SuspendCallback+0x48>)
 800cc4a:	691b      	ldr	r3, [r3, #16]
 800cc4c:	4a03      	ldr	r2, [pc, #12]	@ (800cc5c <HAL_PCD_SuspendCallback+0x48>)
 800cc4e:	f043 0306 	orr.w	r3, r3, #6
 800cc52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cc54:	bf00      	nop
 800cc56:	3708      	adds	r7, #8
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	e000ed00 	.word	0xe000ed00

0800cc60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7fe fcf9 	bl	800b666 <USBD_LL_Resume>
}
 800cc74:	bf00      	nop
 800cc76:	3708      	adds	r7, #8
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	460b      	mov	r3, r1
 800cc86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc8e:	78fa      	ldrb	r2, [r7, #3]
 800cc90:	4611      	mov	r1, r2
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7fe fd51 	bl	800b73a <USBD_LL_IsoOUTIncomplete>
}
 800cc98:	bf00      	nop
 800cc9a:	3708      	adds	r7, #8
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b082      	sub	sp, #8
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	460b      	mov	r3, r1
 800ccaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ccb2:	78fa      	ldrb	r2, [r7, #3]
 800ccb4:	4611      	mov	r1, r2
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7fe fd0d 	bl	800b6d6 <USBD_LL_IsoINIncomplete>
}
 800ccbc:	bf00      	nop
 800ccbe:	3708      	adds	r7, #8
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7fe fd63 	bl	800b79e <USBD_LL_DevConnected>
}
 800ccd8:	bf00      	nop
 800ccda:	3708      	adds	r7, #8
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f7fe fd60 	bl	800b7b4 <USBD_LL_DevDisconnected>
}
 800ccf4:	bf00      	nop
 800ccf6:	3708      	adds	r7, #8
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d13c      	bne.n	800cd86 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cd0c:	4a20      	ldr	r2, [pc, #128]	@ (800cd90 <USBD_LL_Init+0x94>)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	4a1e      	ldr	r2, [pc, #120]	@ (800cd90 <USBD_LL_Init+0x94>)
 800cd18:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cd1c:	4b1c      	ldr	r3, [pc, #112]	@ (800cd90 <USBD_LL_Init+0x94>)
 800cd1e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cd22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cd24:	4b1a      	ldr	r3, [pc, #104]	@ (800cd90 <USBD_LL_Init+0x94>)
 800cd26:	2204      	movs	r2, #4
 800cd28:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cd2a:	4b19      	ldr	r3, [pc, #100]	@ (800cd90 <USBD_LL_Init+0x94>)
 800cd2c:	2202      	movs	r2, #2
 800cd2e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cd30:	4b17      	ldr	r3, [pc, #92]	@ (800cd90 <USBD_LL_Init+0x94>)
 800cd32:	2200      	movs	r2, #0
 800cd34:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cd36:	4b16      	ldr	r3, [pc, #88]	@ (800cd90 <USBD_LL_Init+0x94>)
 800cd38:	2202      	movs	r2, #2
 800cd3a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cd3c:	4b14      	ldr	r3, [pc, #80]	@ (800cd90 <USBD_LL_Init+0x94>)
 800cd3e:	2200      	movs	r2, #0
 800cd40:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cd42:	4b13      	ldr	r3, [pc, #76]	@ (800cd90 <USBD_LL_Init+0x94>)
 800cd44:	2200      	movs	r2, #0
 800cd46:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cd48:	4b11      	ldr	r3, [pc, #68]	@ (800cd90 <USBD_LL_Init+0x94>)
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800cd4e:	4b10      	ldr	r3, [pc, #64]	@ (800cd90 <USBD_LL_Init+0x94>)
 800cd50:	2201      	movs	r2, #1
 800cd52:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cd54:	4b0e      	ldr	r3, [pc, #56]	@ (800cd90 <USBD_LL_Init+0x94>)
 800cd56:	2200      	movs	r2, #0
 800cd58:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cd5a:	480d      	ldr	r0, [pc, #52]	@ (800cd90 <USBD_LL_Init+0x94>)
 800cd5c:	f7f9 f8b6 	bl	8005ecc <HAL_PCD_Init>
 800cd60:	4603      	mov	r3, r0
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d001      	beq.n	800cd6a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cd66:	f7f4 fe83 	bl	8001a70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cd6a:	2180      	movs	r1, #128	@ 0x80
 800cd6c:	4808      	ldr	r0, [pc, #32]	@ (800cd90 <USBD_LL_Init+0x94>)
 800cd6e:	f7fa fae2 	bl	8007336 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cd72:	2240      	movs	r2, #64	@ 0x40
 800cd74:	2100      	movs	r1, #0
 800cd76:	4806      	ldr	r0, [pc, #24]	@ (800cd90 <USBD_LL_Init+0x94>)
 800cd78:	f7fa fa96 	bl	80072a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cd7c:	2280      	movs	r2, #128	@ 0x80
 800cd7e:	2101      	movs	r1, #1
 800cd80:	4803      	ldr	r0, [pc, #12]	@ (800cd90 <USBD_LL_Init+0x94>)
 800cd82:	f7fa fa91 	bl	80072a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cd86:	2300      	movs	r3, #0
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	20001c08 	.word	0x20001c08

0800cd94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cda0:	2300      	movs	r3, #0
 800cda2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7f9 f99d 	bl	80060ea <HAL_PCD_Start>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdb4:	7bfb      	ldrb	r3, [r7, #15]
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f000 f942 	bl	800d040 <USBD_Get_USB_Status>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3710      	adds	r7, #16
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}

0800cdca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cdca:	b580      	push	{r7, lr}
 800cdcc:	b084      	sub	sp, #16
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
 800cdd2:	4608      	mov	r0, r1
 800cdd4:	4611      	mov	r1, r2
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	4603      	mov	r3, r0
 800cdda:	70fb      	strb	r3, [r7, #3]
 800cddc:	460b      	mov	r3, r1
 800cdde:	70bb      	strb	r3, [r7, #2]
 800cde0:	4613      	mov	r3, r2
 800cde2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cde4:	2300      	movs	r3, #0
 800cde6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cde8:	2300      	movs	r3, #0
 800cdea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cdf2:	78bb      	ldrb	r3, [r7, #2]
 800cdf4:	883a      	ldrh	r2, [r7, #0]
 800cdf6:	78f9      	ldrb	r1, [r7, #3]
 800cdf8:	f7f9 fe71 	bl	8006ade <HAL_PCD_EP_Open>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce00:	7bfb      	ldrb	r3, [r7, #15]
 800ce02:	4618      	mov	r0, r3
 800ce04:	f000 f91c 	bl	800d040 <USBD_Get_USB_Status>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3710      	adds	r7, #16
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b084      	sub	sp, #16
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
 800ce1e:	460b      	mov	r3, r1
 800ce20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce22:	2300      	movs	r3, #0
 800ce24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce26:	2300      	movs	r3, #0
 800ce28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce30:	78fa      	ldrb	r2, [r7, #3]
 800ce32:	4611      	mov	r1, r2
 800ce34:	4618      	mov	r0, r3
 800ce36:	f7f9 febc 	bl	8006bb2 <HAL_PCD_EP_Close>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce3e:	7bfb      	ldrb	r3, [r7, #15]
 800ce40:	4618      	mov	r0, r3
 800ce42:	f000 f8fd 	bl	800d040 <USBD_Get_USB_Status>
 800ce46:	4603      	mov	r3, r0
 800ce48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3710      	adds	r7, #16
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce60:	2300      	movs	r3, #0
 800ce62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce64:	2300      	movs	r3, #0
 800ce66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce6e:	78fa      	ldrb	r2, [r7, #3]
 800ce70:	4611      	mov	r1, r2
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7f9 ff74 	bl	8006d60 <HAL_PCD_EP_SetStall>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce7c:	7bfb      	ldrb	r3, [r7, #15]
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f000 f8de 	bl	800d040 <USBD_Get_USB_Status>
 800ce84:	4603      	mov	r3, r0
 800ce86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce88:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3710      	adds	r7, #16
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}

0800ce92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce92:	b580      	push	{r7, lr}
 800ce94:	b084      	sub	sp, #16
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
 800ce9a:	460b      	mov	r3, r1
 800ce9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cea2:	2300      	movs	r3, #0
 800cea4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ceac:	78fa      	ldrb	r2, [r7, #3]
 800ceae:	4611      	mov	r1, r2
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7f9 ffb8 	bl	8006e26 <HAL_PCD_EP_ClrStall>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ceba:	7bfb      	ldrb	r3, [r7, #15]
 800cebc:	4618      	mov	r0, r3
 800cebe:	f000 f8bf 	bl	800d040 <USBD_Get_USB_Status>
 800cec2:	4603      	mov	r3, r0
 800cec4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cec6:	7bbb      	ldrb	r3, [r7, #14]
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3710      	adds	r7, #16
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b085      	sub	sp, #20
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	460b      	mov	r3, r1
 800ceda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cee2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cee4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	da0b      	bge.n	800cf04 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ceec:	78fb      	ldrb	r3, [r7, #3]
 800ceee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cef2:	68f9      	ldr	r1, [r7, #12]
 800cef4:	4613      	mov	r3, r2
 800cef6:	00db      	lsls	r3, r3, #3
 800cef8:	4413      	add	r3, r2
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	440b      	add	r3, r1
 800cefe:	3316      	adds	r3, #22
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	e00b      	b.n	800cf1c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cf04:	78fb      	ldrb	r3, [r7, #3]
 800cf06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf0a:	68f9      	ldr	r1, [r7, #12]
 800cf0c:	4613      	mov	r3, r2
 800cf0e:	00db      	lsls	r3, r3, #3
 800cf10:	4413      	add	r3, r2
 800cf12:	009b      	lsls	r3, r3, #2
 800cf14:	440b      	add	r3, r1
 800cf16:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800cf1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3714      	adds	r7, #20
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr

0800cf28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	460b      	mov	r3, r1
 800cf32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf34:	2300      	movs	r3, #0
 800cf36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf42:	78fa      	ldrb	r2, [r7, #3]
 800cf44:	4611      	mov	r1, r2
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7f9 fda5 	bl	8006a96 <HAL_PCD_SetAddress>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf50:	7bfb      	ldrb	r3, [r7, #15]
 800cf52:	4618      	mov	r0, r3
 800cf54:	f000 f874 	bl	800d040 <USBD_Get_USB_Status>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3710      	adds	r7, #16
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}

0800cf66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cf66:	b580      	push	{r7, lr}
 800cf68:	b086      	sub	sp, #24
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	60f8      	str	r0, [r7, #12]
 800cf6e:	607a      	str	r2, [r7, #4]
 800cf70:	603b      	str	r3, [r7, #0]
 800cf72:	460b      	mov	r3, r1
 800cf74:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf76:	2300      	movs	r3, #0
 800cf78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cf84:	7af9      	ldrb	r1, [r7, #11]
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	f7f9 feaf 	bl	8006cec <HAL_PCD_EP_Transmit>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf92:	7dfb      	ldrb	r3, [r7, #23]
 800cf94:	4618      	mov	r0, r3
 800cf96:	f000 f853 	bl	800d040 <USBD_Get_USB_Status>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf9e:	7dbb      	ldrb	r3, [r7, #22]
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3718      	adds	r7, #24
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b086      	sub	sp, #24
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	607a      	str	r2, [r7, #4]
 800cfb2:	603b      	str	r3, [r7, #0]
 800cfb4:	460b      	mov	r3, r1
 800cfb6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cfc6:	7af9      	ldrb	r1, [r7, #11]
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	f7f9 fe3b 	bl	8006c46 <HAL_PCD_EP_Receive>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfd4:	7dfb      	ldrb	r3, [r7, #23]
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f000 f832 	bl	800d040 <USBD_Get_USB_Status>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cfe0:	7dbb      	ldrb	r3, [r7, #22]
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3718      	adds	r7, #24
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}

0800cfea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfea:	b580      	push	{r7, lr}
 800cfec:	b082      	sub	sp, #8
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	6078      	str	r0, [r7, #4]
 800cff2:	460b      	mov	r3, r1
 800cff4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cffc:	78fa      	ldrb	r2, [r7, #3]
 800cffe:	4611      	mov	r1, r2
 800d000:	4618      	mov	r0, r3
 800d002:	f7f9 fe5b 	bl	8006cbc <HAL_PCD_EP_GetRxCount>
 800d006:	4603      	mov	r3, r0
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3708      	adds	r7, #8
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d018:	4b03      	ldr	r3, [pc, #12]	@ (800d028 <USBD_static_malloc+0x18>)
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	370c      	adds	r7, #12
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr
 800d026:	bf00      	nop
 800d028:	200020ec 	.word	0x200020ec

0800d02c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]

}
 800d034:	bf00      	nop
 800d036:	370c      	adds	r7, #12
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d040:	b480      	push	{r7}
 800d042:	b085      	sub	sp, #20
 800d044:	af00      	add	r7, sp, #0
 800d046:	4603      	mov	r3, r0
 800d048:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d04a:	2300      	movs	r3, #0
 800d04c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d04e:	79fb      	ldrb	r3, [r7, #7]
 800d050:	2b03      	cmp	r3, #3
 800d052:	d817      	bhi.n	800d084 <USBD_Get_USB_Status+0x44>
 800d054:	a201      	add	r2, pc, #4	@ (adr r2, 800d05c <USBD_Get_USB_Status+0x1c>)
 800d056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d05a:	bf00      	nop
 800d05c:	0800d06d 	.word	0x0800d06d
 800d060:	0800d073 	.word	0x0800d073
 800d064:	0800d079 	.word	0x0800d079
 800d068:	0800d07f 	.word	0x0800d07f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d06c:	2300      	movs	r3, #0
 800d06e:	73fb      	strb	r3, [r7, #15]
    break;
 800d070:	e00b      	b.n	800d08a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d072:	2303      	movs	r3, #3
 800d074:	73fb      	strb	r3, [r7, #15]
    break;
 800d076:	e008      	b.n	800d08a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d078:	2301      	movs	r3, #1
 800d07a:	73fb      	strb	r3, [r7, #15]
    break;
 800d07c:	e005      	b.n	800d08a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d07e:	2303      	movs	r3, #3
 800d080:	73fb      	strb	r3, [r7, #15]
    break;
 800d082:	e002      	b.n	800d08a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d084:	2303      	movs	r3, #3
 800d086:	73fb      	strb	r3, [r7, #15]
    break;
 800d088:	bf00      	nop
  }
  return usb_status;
 800d08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3714      	adds	r7, #20
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr

0800d098 <swapfunc>:
 800d098:	2b02      	cmp	r3, #2
 800d09a:	b510      	push	{r4, lr}
 800d09c:	d00a      	beq.n	800d0b4 <swapfunc+0x1c>
 800d09e:	0892      	lsrs	r2, r2, #2
 800d0a0:	3a01      	subs	r2, #1
 800d0a2:	6803      	ldr	r3, [r0, #0]
 800d0a4:	680c      	ldr	r4, [r1, #0]
 800d0a6:	f840 4b04 	str.w	r4, [r0], #4
 800d0aa:	2a00      	cmp	r2, #0
 800d0ac:	f841 3b04 	str.w	r3, [r1], #4
 800d0b0:	dcf6      	bgt.n	800d0a0 <swapfunc+0x8>
 800d0b2:	bd10      	pop	{r4, pc}
 800d0b4:	4402      	add	r2, r0
 800d0b6:	780c      	ldrb	r4, [r1, #0]
 800d0b8:	7803      	ldrb	r3, [r0, #0]
 800d0ba:	f800 4b01 	strb.w	r4, [r0], #1
 800d0be:	f801 3b01 	strb.w	r3, [r1], #1
 800d0c2:	1a13      	subs	r3, r2, r0
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	dcf6      	bgt.n	800d0b6 <swapfunc+0x1e>
 800d0c8:	e7f3      	b.n	800d0b2 <swapfunc+0x1a>

0800d0ca <med3.constprop.0>:
 800d0ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0cc:	460f      	mov	r7, r1
 800d0ce:	4616      	mov	r6, r2
 800d0d0:	4604      	mov	r4, r0
 800d0d2:	461d      	mov	r5, r3
 800d0d4:	4798      	blx	r3
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	4631      	mov	r1, r6
 800d0da:	4638      	mov	r0, r7
 800d0dc:	da0c      	bge.n	800d0f8 <med3.constprop.0+0x2e>
 800d0de:	47a8      	blx	r5
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	da02      	bge.n	800d0ea <med3.constprop.0+0x20>
 800d0e4:	463c      	mov	r4, r7
 800d0e6:	4620      	mov	r0, r4
 800d0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0ea:	4631      	mov	r1, r6
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	47a8      	blx	r5
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	daf8      	bge.n	800d0e6 <med3.constprop.0+0x1c>
 800d0f4:	4634      	mov	r4, r6
 800d0f6:	e7f6      	b.n	800d0e6 <med3.constprop.0+0x1c>
 800d0f8:	47a8      	blx	r5
 800d0fa:	2800      	cmp	r0, #0
 800d0fc:	dcf2      	bgt.n	800d0e4 <med3.constprop.0+0x1a>
 800d0fe:	4631      	mov	r1, r6
 800d100:	4620      	mov	r0, r4
 800d102:	47a8      	blx	r5
 800d104:	2800      	cmp	r0, #0
 800d106:	daf5      	bge.n	800d0f4 <med3.constprop.0+0x2a>
 800d108:	e7ed      	b.n	800d0e6 <med3.constprop.0+0x1c>

0800d10a <qsort>:
 800d10a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d10e:	b095      	sub	sp, #84	@ 0x54
 800d110:	4606      	mov	r6, r0
 800d112:	9300      	str	r3, [sp, #0]
 800d114:	ea40 0302 	orr.w	r3, r0, r2
 800d118:	079b      	lsls	r3, r3, #30
 800d11a:	4614      	mov	r4, r2
 800d11c:	d118      	bne.n	800d150 <qsort+0x46>
 800d11e:	f1b2 0804 	subs.w	r8, r2, #4
 800d122:	bf18      	it	ne
 800d124:	f04f 0801 	movne.w	r8, #1
 800d128:	2300      	movs	r3, #0
 800d12a:	9301      	str	r3, [sp, #4]
 800d12c:	fb04 f701 	mul.w	r7, r4, r1
 800d130:	19f3      	adds	r3, r6, r7
 800d132:	2906      	cmp	r1, #6
 800d134:	eb06 0b04 	add.w	fp, r6, r4
 800d138:	9302      	str	r3, [sp, #8]
 800d13a:	d828      	bhi.n	800d18e <qsort+0x84>
 800d13c:	9b02      	ldr	r3, [sp, #8]
 800d13e:	459b      	cmp	fp, r3
 800d140:	d310      	bcc.n	800d164 <qsort+0x5a>
 800d142:	9b01      	ldr	r3, [sp, #4]
 800d144:	2b00      	cmp	r3, #0
 800d146:	f040 8117 	bne.w	800d378 <qsort+0x26e>
 800d14a:	b015      	add	sp, #84	@ 0x54
 800d14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d150:	f04f 0802 	mov.w	r8, #2
 800d154:	e7e8      	b.n	800d128 <qsort+0x1e>
 800d156:	4643      	mov	r3, r8
 800d158:	4622      	mov	r2, r4
 800d15a:	4639      	mov	r1, r7
 800d15c:	4628      	mov	r0, r5
 800d15e:	f7ff ff9b 	bl	800d098 <swapfunc>
 800d162:	e00f      	b.n	800d184 <qsort+0x7a>
 800d164:	465d      	mov	r5, fp
 800d166:	e00e      	b.n	800d186 <qsort+0x7c>
 800d168:	1b2f      	subs	r7, r5, r4
 800d16a:	9b00      	ldr	r3, [sp, #0]
 800d16c:	4629      	mov	r1, r5
 800d16e:	4638      	mov	r0, r7
 800d170:	4798      	blx	r3
 800d172:	2800      	cmp	r0, #0
 800d174:	dd09      	ble.n	800d18a <qsort+0x80>
 800d176:	f1b8 0f00 	cmp.w	r8, #0
 800d17a:	d1ec      	bne.n	800d156 <qsort+0x4c>
 800d17c:	682b      	ldr	r3, [r5, #0]
 800d17e:	683a      	ldr	r2, [r7, #0]
 800d180:	602a      	str	r2, [r5, #0]
 800d182:	603b      	str	r3, [r7, #0]
 800d184:	463d      	mov	r5, r7
 800d186:	42ae      	cmp	r6, r5
 800d188:	d3ee      	bcc.n	800d168 <qsort+0x5e>
 800d18a:	44a3      	add	fp, r4
 800d18c:	e7d6      	b.n	800d13c <qsort+0x32>
 800d18e:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800d192:	1b3f      	subs	r7, r7, r4
 800d194:	2907      	cmp	r1, #7
 800d196:	fb04 6909 	mla	r9, r4, r9, r6
 800d19a:	4437      	add	r7, r6
 800d19c:	d021      	beq.n	800d1e2 <qsort+0xd8>
 800d19e:	2928      	cmp	r1, #40	@ 0x28
 800d1a0:	d944      	bls.n	800d22c <qsort+0x122>
 800d1a2:	08cd      	lsrs	r5, r1, #3
 800d1a4:	4365      	muls	r5, r4
 800d1a6:	9b00      	ldr	r3, [sp, #0]
 800d1a8:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 800d1ac:	1971      	adds	r1, r6, r5
 800d1ae:	4630      	mov	r0, r6
 800d1b0:	f7ff ff8b 	bl	800d0ca <med3.constprop.0>
 800d1b4:	4649      	mov	r1, r9
 800d1b6:	eb09 0205 	add.w	r2, r9, r5
 800d1ba:	9b00      	ldr	r3, [sp, #0]
 800d1bc:	4682      	mov	sl, r0
 800d1be:	1b48      	subs	r0, r1, r5
 800d1c0:	f7ff ff83 	bl	800d0ca <med3.constprop.0>
 800d1c4:	463a      	mov	r2, r7
 800d1c6:	9b00      	ldr	r3, [sp, #0]
 800d1c8:	4681      	mov	r9, r0
 800d1ca:	1b79      	subs	r1, r7, r5
 800d1cc:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800d1d0:	f7ff ff7b 	bl	800d0ca <med3.constprop.0>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	4649      	mov	r1, r9
 800d1d8:	9b00      	ldr	r3, [sp, #0]
 800d1da:	4650      	mov	r0, sl
 800d1dc:	f7ff ff75 	bl	800d0ca <med3.constprop.0>
 800d1e0:	4681      	mov	r9, r0
 800d1e2:	f1b8 0f00 	cmp.w	r8, #0
 800d1e6:	d124      	bne.n	800d232 <qsort+0x128>
 800d1e8:	6833      	ldr	r3, [r6, #0]
 800d1ea:	f8d9 2000 	ldr.w	r2, [r9]
 800d1ee:	6032      	str	r2, [r6, #0]
 800d1f0:	f8c9 3000 	str.w	r3, [r9]
 800d1f4:	46d9      	mov	r9, fp
 800d1f6:	46ba      	mov	sl, r7
 800d1f8:	465d      	mov	r5, fp
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	45b9      	cmp	r9, r7
 800d1fe:	d857      	bhi.n	800d2b0 <qsort+0x1a6>
 800d200:	9303      	str	r3, [sp, #12]
 800d202:	4631      	mov	r1, r6
 800d204:	9b00      	ldr	r3, [sp, #0]
 800d206:	4648      	mov	r0, r9
 800d208:	4798      	blx	r3
 800d20a:	2800      	cmp	r0, #0
 800d20c:	9b03      	ldr	r3, [sp, #12]
 800d20e:	dc2c      	bgt.n	800d26a <qsort+0x160>
 800d210:	d10a      	bne.n	800d228 <qsort+0x11e>
 800d212:	f1b8 0f00 	cmp.w	r8, #0
 800d216:	d113      	bne.n	800d240 <qsort+0x136>
 800d218:	682b      	ldr	r3, [r5, #0]
 800d21a:	f8d9 2000 	ldr.w	r2, [r9]
 800d21e:	602a      	str	r2, [r5, #0]
 800d220:	f8c9 3000 	str.w	r3, [r9]
 800d224:	4425      	add	r5, r4
 800d226:	2301      	movs	r3, #1
 800d228:	44a1      	add	r9, r4
 800d22a:	e7e7      	b.n	800d1fc <qsort+0xf2>
 800d22c:	463a      	mov	r2, r7
 800d22e:	46b2      	mov	sl, r6
 800d230:	e7d1      	b.n	800d1d6 <qsort+0xcc>
 800d232:	4643      	mov	r3, r8
 800d234:	4622      	mov	r2, r4
 800d236:	4649      	mov	r1, r9
 800d238:	4630      	mov	r0, r6
 800d23a:	f7ff ff2d 	bl	800d098 <swapfunc>
 800d23e:	e7d9      	b.n	800d1f4 <qsort+0xea>
 800d240:	4643      	mov	r3, r8
 800d242:	4622      	mov	r2, r4
 800d244:	4649      	mov	r1, r9
 800d246:	4628      	mov	r0, r5
 800d248:	f7ff ff26 	bl	800d098 <swapfunc>
 800d24c:	e7ea      	b.n	800d224 <qsort+0x11a>
 800d24e:	d10b      	bne.n	800d268 <qsort+0x15e>
 800d250:	f1b8 0f00 	cmp.w	r8, #0
 800d254:	d11e      	bne.n	800d294 <qsort+0x18a>
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	f8da 2000 	ldr.w	r2, [sl]
 800d25c:	603a      	str	r2, [r7, #0]
 800d25e:	f8ca 3000 	str.w	r3, [sl]
 800d262:	ebaa 0a04 	sub.w	sl, sl, r4
 800d266:	2301      	movs	r3, #1
 800d268:	1b3f      	subs	r7, r7, r4
 800d26a:	45b9      	cmp	r9, r7
 800d26c:	d820      	bhi.n	800d2b0 <qsort+0x1a6>
 800d26e:	9303      	str	r3, [sp, #12]
 800d270:	4631      	mov	r1, r6
 800d272:	9b00      	ldr	r3, [sp, #0]
 800d274:	4638      	mov	r0, r7
 800d276:	4798      	blx	r3
 800d278:	2800      	cmp	r0, #0
 800d27a:	9b03      	ldr	r3, [sp, #12]
 800d27c:	dae7      	bge.n	800d24e <qsort+0x144>
 800d27e:	f1b8 0f00 	cmp.w	r8, #0
 800d282:	d10e      	bne.n	800d2a2 <qsort+0x198>
 800d284:	f8d9 3000 	ldr.w	r3, [r9]
 800d288:	683a      	ldr	r2, [r7, #0]
 800d28a:	f8c9 2000 	str.w	r2, [r9]
 800d28e:	603b      	str	r3, [r7, #0]
 800d290:	1b3f      	subs	r7, r7, r4
 800d292:	e7c8      	b.n	800d226 <qsort+0x11c>
 800d294:	4643      	mov	r3, r8
 800d296:	4622      	mov	r2, r4
 800d298:	4651      	mov	r1, sl
 800d29a:	4638      	mov	r0, r7
 800d29c:	f7ff fefc 	bl	800d098 <swapfunc>
 800d2a0:	e7df      	b.n	800d262 <qsort+0x158>
 800d2a2:	4643      	mov	r3, r8
 800d2a4:	4622      	mov	r2, r4
 800d2a6:	4639      	mov	r1, r7
 800d2a8:	4648      	mov	r0, r9
 800d2aa:	f7ff fef5 	bl	800d098 <swapfunc>
 800d2ae:	e7ef      	b.n	800d290 <qsort+0x186>
 800d2b0:	b9fb      	cbnz	r3, 800d2f2 <qsort+0x1e8>
 800d2b2:	9b02      	ldr	r3, [sp, #8]
 800d2b4:	459b      	cmp	fp, r3
 800d2b6:	f4bf af44 	bcs.w	800d142 <qsort+0x38>
 800d2ba:	465d      	mov	r5, fp
 800d2bc:	e015      	b.n	800d2ea <qsort+0x1e0>
 800d2be:	4643      	mov	r3, r8
 800d2c0:	4622      	mov	r2, r4
 800d2c2:	4639      	mov	r1, r7
 800d2c4:	4628      	mov	r0, r5
 800d2c6:	f7ff fee7 	bl	800d098 <swapfunc>
 800d2ca:	e00d      	b.n	800d2e8 <qsort+0x1de>
 800d2cc:	1b2f      	subs	r7, r5, r4
 800d2ce:	9b00      	ldr	r3, [sp, #0]
 800d2d0:	4629      	mov	r1, r5
 800d2d2:	4638      	mov	r0, r7
 800d2d4:	4798      	blx	r3
 800d2d6:	2800      	cmp	r0, #0
 800d2d8:	dd09      	ble.n	800d2ee <qsort+0x1e4>
 800d2da:	f1b8 0f00 	cmp.w	r8, #0
 800d2de:	d1ee      	bne.n	800d2be <qsort+0x1b4>
 800d2e0:	682b      	ldr	r3, [r5, #0]
 800d2e2:	683a      	ldr	r2, [r7, #0]
 800d2e4:	602a      	str	r2, [r5, #0]
 800d2e6:	603b      	str	r3, [r7, #0]
 800d2e8:	463d      	mov	r5, r7
 800d2ea:	42ae      	cmp	r6, r5
 800d2ec:	d3ee      	bcc.n	800d2cc <qsort+0x1c2>
 800d2ee:	44a3      	add	fp, r4
 800d2f0:	e7df      	b.n	800d2b2 <qsort+0x1a8>
 800d2f2:	eba9 0b05 	sub.w	fp, r9, r5
 800d2f6:	1baa      	subs	r2, r5, r6
 800d2f8:	455a      	cmp	r2, fp
 800d2fa:	bfa8      	it	ge
 800d2fc:	465a      	movge	r2, fp
 800d2fe:	b12a      	cbz	r2, 800d30c <qsort+0x202>
 800d300:	4643      	mov	r3, r8
 800d302:	eba9 0102 	sub.w	r1, r9, r2
 800d306:	4630      	mov	r0, r6
 800d308:	f7ff fec6 	bl	800d098 <swapfunc>
 800d30c:	9b02      	ldr	r3, [sp, #8]
 800d30e:	eba3 020a 	sub.w	r2, r3, sl
 800d312:	ebaa 0507 	sub.w	r5, sl, r7
 800d316:	1b12      	subs	r2, r2, r4
 800d318:	42aa      	cmp	r2, r5
 800d31a:	bf28      	it	cs
 800d31c:	462a      	movcs	r2, r5
 800d31e:	b12a      	cbz	r2, 800d32c <qsort+0x222>
 800d320:	9902      	ldr	r1, [sp, #8]
 800d322:	4643      	mov	r3, r8
 800d324:	1a89      	subs	r1, r1, r2
 800d326:	4648      	mov	r0, r9
 800d328:	f7ff feb6 	bl	800d098 <swapfunc>
 800d32c:	9b02      	ldr	r3, [sp, #8]
 800d32e:	455d      	cmp	r5, fp
 800d330:	465f      	mov	r7, fp
 800d332:	eba3 0005 	sub.w	r0, r3, r5
 800d336:	d904      	bls.n	800d342 <qsort+0x238>
 800d338:	4633      	mov	r3, r6
 800d33a:	462f      	mov	r7, r5
 800d33c:	4606      	mov	r6, r0
 800d33e:	465d      	mov	r5, fp
 800d340:	4618      	mov	r0, r3
 800d342:	42a5      	cmp	r5, r4
 800d344:	d921      	bls.n	800d38a <qsort+0x280>
 800d346:	fbb5 f1f4 	udiv	r1, r5, r4
 800d34a:	9b01      	ldr	r3, [sp, #4]
 800d34c:	2b07      	cmp	r3, #7
 800d34e:	d80d      	bhi.n	800d36c <qsort+0x262>
 800d350:	fbb7 f7f4 	udiv	r7, r7, r4
 800d354:	aa14      	add	r2, sp, #80	@ 0x50
 800d356:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d35a:	f843 6c40 	str.w	r6, [r3, #-64]
 800d35e:	f843 7c3c 	str.w	r7, [r3, #-60]
 800d362:	9b01      	ldr	r3, [sp, #4]
 800d364:	3301      	adds	r3, #1
 800d366:	9301      	str	r3, [sp, #4]
 800d368:	4606      	mov	r6, r0
 800d36a:	e6df      	b.n	800d12c <qsort+0x22>
 800d36c:	9b00      	ldr	r3, [sp, #0]
 800d36e:	4622      	mov	r2, r4
 800d370:	f7ff fecb 	bl	800d10a <qsort>
 800d374:	42a7      	cmp	r7, r4
 800d376:	d80b      	bhi.n	800d390 <qsort+0x286>
 800d378:	9b01      	ldr	r3, [sp, #4]
 800d37a:	aa14      	add	r2, sp, #80	@ 0x50
 800d37c:	3b01      	subs	r3, #1
 800d37e:	9301      	str	r3, [sp, #4]
 800d380:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d384:	e953 0110 	ldrd	r0, r1, [r3, #-64]	@ 0x40
 800d388:	e7ee      	b.n	800d368 <qsort+0x25e>
 800d38a:	42a7      	cmp	r7, r4
 800d38c:	f67f aed9 	bls.w	800d142 <qsort+0x38>
 800d390:	fbb7 f1f4 	udiv	r1, r7, r4
 800d394:	4630      	mov	r0, r6
 800d396:	e7e7      	b.n	800d368 <qsort+0x25e>

0800d398 <__cvt>:
 800d398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d39c:	ec57 6b10 	vmov	r6, r7, d0
 800d3a0:	2f00      	cmp	r7, #0
 800d3a2:	460c      	mov	r4, r1
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	463b      	mov	r3, r7
 800d3a8:	bfbb      	ittet	lt
 800d3aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d3ae:	461f      	movlt	r7, r3
 800d3b0:	2300      	movge	r3, #0
 800d3b2:	232d      	movlt	r3, #45	@ 0x2d
 800d3b4:	700b      	strb	r3, [r1, #0]
 800d3b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d3b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d3bc:	4691      	mov	r9, r2
 800d3be:	f023 0820 	bic.w	r8, r3, #32
 800d3c2:	bfbc      	itt	lt
 800d3c4:	4632      	movlt	r2, r6
 800d3c6:	4616      	movlt	r6, r2
 800d3c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d3cc:	d005      	beq.n	800d3da <__cvt+0x42>
 800d3ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d3d2:	d100      	bne.n	800d3d6 <__cvt+0x3e>
 800d3d4:	3401      	adds	r4, #1
 800d3d6:	2102      	movs	r1, #2
 800d3d8:	e000      	b.n	800d3dc <__cvt+0x44>
 800d3da:	2103      	movs	r1, #3
 800d3dc:	ab03      	add	r3, sp, #12
 800d3de:	9301      	str	r3, [sp, #4]
 800d3e0:	ab02      	add	r3, sp, #8
 800d3e2:	9300      	str	r3, [sp, #0]
 800d3e4:	ec47 6b10 	vmov	d0, r6, r7
 800d3e8:	4653      	mov	r3, sl
 800d3ea:	4622      	mov	r2, r4
 800d3ec:	f000 fe5c 	bl	800e0a8 <_dtoa_r>
 800d3f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d3f4:	4605      	mov	r5, r0
 800d3f6:	d119      	bne.n	800d42c <__cvt+0x94>
 800d3f8:	f019 0f01 	tst.w	r9, #1
 800d3fc:	d00e      	beq.n	800d41c <__cvt+0x84>
 800d3fe:	eb00 0904 	add.w	r9, r0, r4
 800d402:	2200      	movs	r2, #0
 800d404:	2300      	movs	r3, #0
 800d406:	4630      	mov	r0, r6
 800d408:	4639      	mov	r1, r7
 800d40a:	f7f3 fb5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d40e:	b108      	cbz	r0, 800d414 <__cvt+0x7c>
 800d410:	f8cd 900c 	str.w	r9, [sp, #12]
 800d414:	2230      	movs	r2, #48	@ 0x30
 800d416:	9b03      	ldr	r3, [sp, #12]
 800d418:	454b      	cmp	r3, r9
 800d41a:	d31e      	bcc.n	800d45a <__cvt+0xc2>
 800d41c:	9b03      	ldr	r3, [sp, #12]
 800d41e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d420:	1b5b      	subs	r3, r3, r5
 800d422:	4628      	mov	r0, r5
 800d424:	6013      	str	r3, [r2, #0]
 800d426:	b004      	add	sp, #16
 800d428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d42c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d430:	eb00 0904 	add.w	r9, r0, r4
 800d434:	d1e5      	bne.n	800d402 <__cvt+0x6a>
 800d436:	7803      	ldrb	r3, [r0, #0]
 800d438:	2b30      	cmp	r3, #48	@ 0x30
 800d43a:	d10a      	bne.n	800d452 <__cvt+0xba>
 800d43c:	2200      	movs	r2, #0
 800d43e:	2300      	movs	r3, #0
 800d440:	4630      	mov	r0, r6
 800d442:	4639      	mov	r1, r7
 800d444:	f7f3 fb40 	bl	8000ac8 <__aeabi_dcmpeq>
 800d448:	b918      	cbnz	r0, 800d452 <__cvt+0xba>
 800d44a:	f1c4 0401 	rsb	r4, r4, #1
 800d44e:	f8ca 4000 	str.w	r4, [sl]
 800d452:	f8da 3000 	ldr.w	r3, [sl]
 800d456:	4499      	add	r9, r3
 800d458:	e7d3      	b.n	800d402 <__cvt+0x6a>
 800d45a:	1c59      	adds	r1, r3, #1
 800d45c:	9103      	str	r1, [sp, #12]
 800d45e:	701a      	strb	r2, [r3, #0]
 800d460:	e7d9      	b.n	800d416 <__cvt+0x7e>

0800d462 <__exponent>:
 800d462:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d464:	2900      	cmp	r1, #0
 800d466:	bfba      	itte	lt
 800d468:	4249      	neglt	r1, r1
 800d46a:	232d      	movlt	r3, #45	@ 0x2d
 800d46c:	232b      	movge	r3, #43	@ 0x2b
 800d46e:	2909      	cmp	r1, #9
 800d470:	7002      	strb	r2, [r0, #0]
 800d472:	7043      	strb	r3, [r0, #1]
 800d474:	dd29      	ble.n	800d4ca <__exponent+0x68>
 800d476:	f10d 0307 	add.w	r3, sp, #7
 800d47a:	461d      	mov	r5, r3
 800d47c:	270a      	movs	r7, #10
 800d47e:	461a      	mov	r2, r3
 800d480:	fbb1 f6f7 	udiv	r6, r1, r7
 800d484:	fb07 1416 	mls	r4, r7, r6, r1
 800d488:	3430      	adds	r4, #48	@ 0x30
 800d48a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d48e:	460c      	mov	r4, r1
 800d490:	2c63      	cmp	r4, #99	@ 0x63
 800d492:	f103 33ff 	add.w	r3, r3, #4294967295
 800d496:	4631      	mov	r1, r6
 800d498:	dcf1      	bgt.n	800d47e <__exponent+0x1c>
 800d49a:	3130      	adds	r1, #48	@ 0x30
 800d49c:	1e94      	subs	r4, r2, #2
 800d49e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d4a2:	1c41      	adds	r1, r0, #1
 800d4a4:	4623      	mov	r3, r4
 800d4a6:	42ab      	cmp	r3, r5
 800d4a8:	d30a      	bcc.n	800d4c0 <__exponent+0x5e>
 800d4aa:	f10d 0309 	add.w	r3, sp, #9
 800d4ae:	1a9b      	subs	r3, r3, r2
 800d4b0:	42ac      	cmp	r4, r5
 800d4b2:	bf88      	it	hi
 800d4b4:	2300      	movhi	r3, #0
 800d4b6:	3302      	adds	r3, #2
 800d4b8:	4403      	add	r3, r0
 800d4ba:	1a18      	subs	r0, r3, r0
 800d4bc:	b003      	add	sp, #12
 800d4be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d4c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d4c8:	e7ed      	b.n	800d4a6 <__exponent+0x44>
 800d4ca:	2330      	movs	r3, #48	@ 0x30
 800d4cc:	3130      	adds	r1, #48	@ 0x30
 800d4ce:	7083      	strb	r3, [r0, #2]
 800d4d0:	70c1      	strb	r1, [r0, #3]
 800d4d2:	1d03      	adds	r3, r0, #4
 800d4d4:	e7f1      	b.n	800d4ba <__exponent+0x58>
	...

0800d4d8 <_printf_float>:
 800d4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4dc:	b08d      	sub	sp, #52	@ 0x34
 800d4de:	460c      	mov	r4, r1
 800d4e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d4e4:	4616      	mov	r6, r2
 800d4e6:	461f      	mov	r7, r3
 800d4e8:	4605      	mov	r5, r0
 800d4ea:	f000 fcdb 	bl	800dea4 <_localeconv_r>
 800d4ee:	6803      	ldr	r3, [r0, #0]
 800d4f0:	9304      	str	r3, [sp, #16]
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7f2 febc 	bl	8000270 <strlen>
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4fc:	f8d8 3000 	ldr.w	r3, [r8]
 800d500:	9005      	str	r0, [sp, #20]
 800d502:	3307      	adds	r3, #7
 800d504:	f023 0307 	bic.w	r3, r3, #7
 800d508:	f103 0208 	add.w	r2, r3, #8
 800d50c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d510:	f8d4 b000 	ldr.w	fp, [r4]
 800d514:	f8c8 2000 	str.w	r2, [r8]
 800d518:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d51c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d520:	9307      	str	r3, [sp, #28]
 800d522:	f8cd 8018 	str.w	r8, [sp, #24]
 800d526:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d52a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d52e:	4b9c      	ldr	r3, [pc, #624]	@ (800d7a0 <_printf_float+0x2c8>)
 800d530:	f04f 32ff 	mov.w	r2, #4294967295
 800d534:	f7f3 fafa 	bl	8000b2c <__aeabi_dcmpun>
 800d538:	bb70      	cbnz	r0, 800d598 <_printf_float+0xc0>
 800d53a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d53e:	4b98      	ldr	r3, [pc, #608]	@ (800d7a0 <_printf_float+0x2c8>)
 800d540:	f04f 32ff 	mov.w	r2, #4294967295
 800d544:	f7f3 fad4 	bl	8000af0 <__aeabi_dcmple>
 800d548:	bb30      	cbnz	r0, 800d598 <_printf_float+0xc0>
 800d54a:	2200      	movs	r2, #0
 800d54c:	2300      	movs	r3, #0
 800d54e:	4640      	mov	r0, r8
 800d550:	4649      	mov	r1, r9
 800d552:	f7f3 fac3 	bl	8000adc <__aeabi_dcmplt>
 800d556:	b110      	cbz	r0, 800d55e <_printf_float+0x86>
 800d558:	232d      	movs	r3, #45	@ 0x2d
 800d55a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d55e:	4a91      	ldr	r2, [pc, #580]	@ (800d7a4 <_printf_float+0x2cc>)
 800d560:	4b91      	ldr	r3, [pc, #580]	@ (800d7a8 <_printf_float+0x2d0>)
 800d562:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d566:	bf94      	ite	ls
 800d568:	4690      	movls	r8, r2
 800d56a:	4698      	movhi	r8, r3
 800d56c:	2303      	movs	r3, #3
 800d56e:	6123      	str	r3, [r4, #16]
 800d570:	f02b 0304 	bic.w	r3, fp, #4
 800d574:	6023      	str	r3, [r4, #0]
 800d576:	f04f 0900 	mov.w	r9, #0
 800d57a:	9700      	str	r7, [sp, #0]
 800d57c:	4633      	mov	r3, r6
 800d57e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d580:	4621      	mov	r1, r4
 800d582:	4628      	mov	r0, r5
 800d584:	f000 f9d2 	bl	800d92c <_printf_common>
 800d588:	3001      	adds	r0, #1
 800d58a:	f040 808d 	bne.w	800d6a8 <_printf_float+0x1d0>
 800d58e:	f04f 30ff 	mov.w	r0, #4294967295
 800d592:	b00d      	add	sp, #52	@ 0x34
 800d594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d598:	4642      	mov	r2, r8
 800d59a:	464b      	mov	r3, r9
 800d59c:	4640      	mov	r0, r8
 800d59e:	4649      	mov	r1, r9
 800d5a0:	f7f3 fac4 	bl	8000b2c <__aeabi_dcmpun>
 800d5a4:	b140      	cbz	r0, 800d5b8 <_printf_float+0xe0>
 800d5a6:	464b      	mov	r3, r9
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	bfbc      	itt	lt
 800d5ac:	232d      	movlt	r3, #45	@ 0x2d
 800d5ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d5b2:	4a7e      	ldr	r2, [pc, #504]	@ (800d7ac <_printf_float+0x2d4>)
 800d5b4:	4b7e      	ldr	r3, [pc, #504]	@ (800d7b0 <_printf_float+0x2d8>)
 800d5b6:	e7d4      	b.n	800d562 <_printf_float+0x8a>
 800d5b8:	6863      	ldr	r3, [r4, #4]
 800d5ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d5be:	9206      	str	r2, [sp, #24]
 800d5c0:	1c5a      	adds	r2, r3, #1
 800d5c2:	d13b      	bne.n	800d63c <_printf_float+0x164>
 800d5c4:	2306      	movs	r3, #6
 800d5c6:	6063      	str	r3, [r4, #4]
 800d5c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	6022      	str	r2, [r4, #0]
 800d5d0:	9303      	str	r3, [sp, #12]
 800d5d2:	ab0a      	add	r3, sp, #40	@ 0x28
 800d5d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d5d8:	ab09      	add	r3, sp, #36	@ 0x24
 800d5da:	9300      	str	r3, [sp, #0]
 800d5dc:	6861      	ldr	r1, [r4, #4]
 800d5de:	ec49 8b10 	vmov	d0, r8, r9
 800d5e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d5e6:	4628      	mov	r0, r5
 800d5e8:	f7ff fed6 	bl	800d398 <__cvt>
 800d5ec:	9b06      	ldr	r3, [sp, #24]
 800d5ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d5f0:	2b47      	cmp	r3, #71	@ 0x47
 800d5f2:	4680      	mov	r8, r0
 800d5f4:	d129      	bne.n	800d64a <_printf_float+0x172>
 800d5f6:	1cc8      	adds	r0, r1, #3
 800d5f8:	db02      	blt.n	800d600 <_printf_float+0x128>
 800d5fa:	6863      	ldr	r3, [r4, #4]
 800d5fc:	4299      	cmp	r1, r3
 800d5fe:	dd41      	ble.n	800d684 <_printf_float+0x1ac>
 800d600:	f1aa 0a02 	sub.w	sl, sl, #2
 800d604:	fa5f fa8a 	uxtb.w	sl, sl
 800d608:	3901      	subs	r1, #1
 800d60a:	4652      	mov	r2, sl
 800d60c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d610:	9109      	str	r1, [sp, #36]	@ 0x24
 800d612:	f7ff ff26 	bl	800d462 <__exponent>
 800d616:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d618:	1813      	adds	r3, r2, r0
 800d61a:	2a01      	cmp	r2, #1
 800d61c:	4681      	mov	r9, r0
 800d61e:	6123      	str	r3, [r4, #16]
 800d620:	dc02      	bgt.n	800d628 <_printf_float+0x150>
 800d622:	6822      	ldr	r2, [r4, #0]
 800d624:	07d2      	lsls	r2, r2, #31
 800d626:	d501      	bpl.n	800d62c <_printf_float+0x154>
 800d628:	3301      	adds	r3, #1
 800d62a:	6123      	str	r3, [r4, #16]
 800d62c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d630:	2b00      	cmp	r3, #0
 800d632:	d0a2      	beq.n	800d57a <_printf_float+0xa2>
 800d634:	232d      	movs	r3, #45	@ 0x2d
 800d636:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d63a:	e79e      	b.n	800d57a <_printf_float+0xa2>
 800d63c:	9a06      	ldr	r2, [sp, #24]
 800d63e:	2a47      	cmp	r2, #71	@ 0x47
 800d640:	d1c2      	bne.n	800d5c8 <_printf_float+0xf0>
 800d642:	2b00      	cmp	r3, #0
 800d644:	d1c0      	bne.n	800d5c8 <_printf_float+0xf0>
 800d646:	2301      	movs	r3, #1
 800d648:	e7bd      	b.n	800d5c6 <_printf_float+0xee>
 800d64a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d64e:	d9db      	bls.n	800d608 <_printf_float+0x130>
 800d650:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d654:	d118      	bne.n	800d688 <_printf_float+0x1b0>
 800d656:	2900      	cmp	r1, #0
 800d658:	6863      	ldr	r3, [r4, #4]
 800d65a:	dd0b      	ble.n	800d674 <_printf_float+0x19c>
 800d65c:	6121      	str	r1, [r4, #16]
 800d65e:	b913      	cbnz	r3, 800d666 <_printf_float+0x18e>
 800d660:	6822      	ldr	r2, [r4, #0]
 800d662:	07d0      	lsls	r0, r2, #31
 800d664:	d502      	bpl.n	800d66c <_printf_float+0x194>
 800d666:	3301      	adds	r3, #1
 800d668:	440b      	add	r3, r1
 800d66a:	6123      	str	r3, [r4, #16]
 800d66c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d66e:	f04f 0900 	mov.w	r9, #0
 800d672:	e7db      	b.n	800d62c <_printf_float+0x154>
 800d674:	b913      	cbnz	r3, 800d67c <_printf_float+0x1a4>
 800d676:	6822      	ldr	r2, [r4, #0]
 800d678:	07d2      	lsls	r2, r2, #31
 800d67a:	d501      	bpl.n	800d680 <_printf_float+0x1a8>
 800d67c:	3302      	adds	r3, #2
 800d67e:	e7f4      	b.n	800d66a <_printf_float+0x192>
 800d680:	2301      	movs	r3, #1
 800d682:	e7f2      	b.n	800d66a <_printf_float+0x192>
 800d684:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d68a:	4299      	cmp	r1, r3
 800d68c:	db05      	blt.n	800d69a <_printf_float+0x1c2>
 800d68e:	6823      	ldr	r3, [r4, #0]
 800d690:	6121      	str	r1, [r4, #16]
 800d692:	07d8      	lsls	r0, r3, #31
 800d694:	d5ea      	bpl.n	800d66c <_printf_float+0x194>
 800d696:	1c4b      	adds	r3, r1, #1
 800d698:	e7e7      	b.n	800d66a <_printf_float+0x192>
 800d69a:	2900      	cmp	r1, #0
 800d69c:	bfd4      	ite	le
 800d69e:	f1c1 0202 	rsble	r2, r1, #2
 800d6a2:	2201      	movgt	r2, #1
 800d6a4:	4413      	add	r3, r2
 800d6a6:	e7e0      	b.n	800d66a <_printf_float+0x192>
 800d6a8:	6823      	ldr	r3, [r4, #0]
 800d6aa:	055a      	lsls	r2, r3, #21
 800d6ac:	d407      	bmi.n	800d6be <_printf_float+0x1e6>
 800d6ae:	6923      	ldr	r3, [r4, #16]
 800d6b0:	4642      	mov	r2, r8
 800d6b2:	4631      	mov	r1, r6
 800d6b4:	4628      	mov	r0, r5
 800d6b6:	47b8      	blx	r7
 800d6b8:	3001      	adds	r0, #1
 800d6ba:	d12b      	bne.n	800d714 <_printf_float+0x23c>
 800d6bc:	e767      	b.n	800d58e <_printf_float+0xb6>
 800d6be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d6c2:	f240 80dd 	bls.w	800d880 <_printf_float+0x3a8>
 800d6c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	f7f3 f9fb 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6d2:	2800      	cmp	r0, #0
 800d6d4:	d033      	beq.n	800d73e <_printf_float+0x266>
 800d6d6:	4a37      	ldr	r2, [pc, #220]	@ (800d7b4 <_printf_float+0x2dc>)
 800d6d8:	2301      	movs	r3, #1
 800d6da:	4631      	mov	r1, r6
 800d6dc:	4628      	mov	r0, r5
 800d6de:	47b8      	blx	r7
 800d6e0:	3001      	adds	r0, #1
 800d6e2:	f43f af54 	beq.w	800d58e <_printf_float+0xb6>
 800d6e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d6ea:	4543      	cmp	r3, r8
 800d6ec:	db02      	blt.n	800d6f4 <_printf_float+0x21c>
 800d6ee:	6823      	ldr	r3, [r4, #0]
 800d6f0:	07d8      	lsls	r0, r3, #31
 800d6f2:	d50f      	bpl.n	800d714 <_printf_float+0x23c>
 800d6f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d6f8:	4631      	mov	r1, r6
 800d6fa:	4628      	mov	r0, r5
 800d6fc:	47b8      	blx	r7
 800d6fe:	3001      	adds	r0, #1
 800d700:	f43f af45 	beq.w	800d58e <_printf_float+0xb6>
 800d704:	f04f 0900 	mov.w	r9, #0
 800d708:	f108 38ff 	add.w	r8, r8, #4294967295
 800d70c:	f104 0a1a 	add.w	sl, r4, #26
 800d710:	45c8      	cmp	r8, r9
 800d712:	dc09      	bgt.n	800d728 <_printf_float+0x250>
 800d714:	6823      	ldr	r3, [r4, #0]
 800d716:	079b      	lsls	r3, r3, #30
 800d718:	f100 8103 	bmi.w	800d922 <_printf_float+0x44a>
 800d71c:	68e0      	ldr	r0, [r4, #12]
 800d71e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d720:	4298      	cmp	r0, r3
 800d722:	bfb8      	it	lt
 800d724:	4618      	movlt	r0, r3
 800d726:	e734      	b.n	800d592 <_printf_float+0xba>
 800d728:	2301      	movs	r3, #1
 800d72a:	4652      	mov	r2, sl
 800d72c:	4631      	mov	r1, r6
 800d72e:	4628      	mov	r0, r5
 800d730:	47b8      	blx	r7
 800d732:	3001      	adds	r0, #1
 800d734:	f43f af2b 	beq.w	800d58e <_printf_float+0xb6>
 800d738:	f109 0901 	add.w	r9, r9, #1
 800d73c:	e7e8      	b.n	800d710 <_printf_float+0x238>
 800d73e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d740:	2b00      	cmp	r3, #0
 800d742:	dc39      	bgt.n	800d7b8 <_printf_float+0x2e0>
 800d744:	4a1b      	ldr	r2, [pc, #108]	@ (800d7b4 <_printf_float+0x2dc>)
 800d746:	2301      	movs	r3, #1
 800d748:	4631      	mov	r1, r6
 800d74a:	4628      	mov	r0, r5
 800d74c:	47b8      	blx	r7
 800d74e:	3001      	adds	r0, #1
 800d750:	f43f af1d 	beq.w	800d58e <_printf_float+0xb6>
 800d754:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d758:	ea59 0303 	orrs.w	r3, r9, r3
 800d75c:	d102      	bne.n	800d764 <_printf_float+0x28c>
 800d75e:	6823      	ldr	r3, [r4, #0]
 800d760:	07d9      	lsls	r1, r3, #31
 800d762:	d5d7      	bpl.n	800d714 <_printf_float+0x23c>
 800d764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d768:	4631      	mov	r1, r6
 800d76a:	4628      	mov	r0, r5
 800d76c:	47b8      	blx	r7
 800d76e:	3001      	adds	r0, #1
 800d770:	f43f af0d 	beq.w	800d58e <_printf_float+0xb6>
 800d774:	f04f 0a00 	mov.w	sl, #0
 800d778:	f104 0b1a 	add.w	fp, r4, #26
 800d77c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d77e:	425b      	negs	r3, r3
 800d780:	4553      	cmp	r3, sl
 800d782:	dc01      	bgt.n	800d788 <_printf_float+0x2b0>
 800d784:	464b      	mov	r3, r9
 800d786:	e793      	b.n	800d6b0 <_printf_float+0x1d8>
 800d788:	2301      	movs	r3, #1
 800d78a:	465a      	mov	r2, fp
 800d78c:	4631      	mov	r1, r6
 800d78e:	4628      	mov	r0, r5
 800d790:	47b8      	blx	r7
 800d792:	3001      	adds	r0, #1
 800d794:	f43f aefb 	beq.w	800d58e <_printf_float+0xb6>
 800d798:	f10a 0a01 	add.w	sl, sl, #1
 800d79c:	e7ee      	b.n	800d77c <_printf_float+0x2a4>
 800d79e:	bf00      	nop
 800d7a0:	7fefffff 	.word	0x7fefffff
 800d7a4:	08010a04 	.word	0x08010a04
 800d7a8:	08010a08 	.word	0x08010a08
 800d7ac:	08010a0c 	.word	0x08010a0c
 800d7b0:	08010a10 	.word	0x08010a10
 800d7b4:	08010a14 	.word	0x08010a14
 800d7b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d7ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d7be:	4553      	cmp	r3, sl
 800d7c0:	bfa8      	it	ge
 800d7c2:	4653      	movge	r3, sl
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	4699      	mov	r9, r3
 800d7c8:	dc36      	bgt.n	800d838 <_printf_float+0x360>
 800d7ca:	f04f 0b00 	mov.w	fp, #0
 800d7ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d7d2:	f104 021a 	add.w	r2, r4, #26
 800d7d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d7d8:	9306      	str	r3, [sp, #24]
 800d7da:	eba3 0309 	sub.w	r3, r3, r9
 800d7de:	455b      	cmp	r3, fp
 800d7e0:	dc31      	bgt.n	800d846 <_printf_float+0x36e>
 800d7e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7e4:	459a      	cmp	sl, r3
 800d7e6:	dc3a      	bgt.n	800d85e <_printf_float+0x386>
 800d7e8:	6823      	ldr	r3, [r4, #0]
 800d7ea:	07da      	lsls	r2, r3, #31
 800d7ec:	d437      	bmi.n	800d85e <_printf_float+0x386>
 800d7ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7f0:	ebaa 0903 	sub.w	r9, sl, r3
 800d7f4:	9b06      	ldr	r3, [sp, #24]
 800d7f6:	ebaa 0303 	sub.w	r3, sl, r3
 800d7fa:	4599      	cmp	r9, r3
 800d7fc:	bfa8      	it	ge
 800d7fe:	4699      	movge	r9, r3
 800d800:	f1b9 0f00 	cmp.w	r9, #0
 800d804:	dc33      	bgt.n	800d86e <_printf_float+0x396>
 800d806:	f04f 0800 	mov.w	r8, #0
 800d80a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d80e:	f104 0b1a 	add.w	fp, r4, #26
 800d812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d814:	ebaa 0303 	sub.w	r3, sl, r3
 800d818:	eba3 0309 	sub.w	r3, r3, r9
 800d81c:	4543      	cmp	r3, r8
 800d81e:	f77f af79 	ble.w	800d714 <_printf_float+0x23c>
 800d822:	2301      	movs	r3, #1
 800d824:	465a      	mov	r2, fp
 800d826:	4631      	mov	r1, r6
 800d828:	4628      	mov	r0, r5
 800d82a:	47b8      	blx	r7
 800d82c:	3001      	adds	r0, #1
 800d82e:	f43f aeae 	beq.w	800d58e <_printf_float+0xb6>
 800d832:	f108 0801 	add.w	r8, r8, #1
 800d836:	e7ec      	b.n	800d812 <_printf_float+0x33a>
 800d838:	4642      	mov	r2, r8
 800d83a:	4631      	mov	r1, r6
 800d83c:	4628      	mov	r0, r5
 800d83e:	47b8      	blx	r7
 800d840:	3001      	adds	r0, #1
 800d842:	d1c2      	bne.n	800d7ca <_printf_float+0x2f2>
 800d844:	e6a3      	b.n	800d58e <_printf_float+0xb6>
 800d846:	2301      	movs	r3, #1
 800d848:	4631      	mov	r1, r6
 800d84a:	4628      	mov	r0, r5
 800d84c:	9206      	str	r2, [sp, #24]
 800d84e:	47b8      	blx	r7
 800d850:	3001      	adds	r0, #1
 800d852:	f43f ae9c 	beq.w	800d58e <_printf_float+0xb6>
 800d856:	9a06      	ldr	r2, [sp, #24]
 800d858:	f10b 0b01 	add.w	fp, fp, #1
 800d85c:	e7bb      	b.n	800d7d6 <_printf_float+0x2fe>
 800d85e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d862:	4631      	mov	r1, r6
 800d864:	4628      	mov	r0, r5
 800d866:	47b8      	blx	r7
 800d868:	3001      	adds	r0, #1
 800d86a:	d1c0      	bne.n	800d7ee <_printf_float+0x316>
 800d86c:	e68f      	b.n	800d58e <_printf_float+0xb6>
 800d86e:	9a06      	ldr	r2, [sp, #24]
 800d870:	464b      	mov	r3, r9
 800d872:	4442      	add	r2, r8
 800d874:	4631      	mov	r1, r6
 800d876:	4628      	mov	r0, r5
 800d878:	47b8      	blx	r7
 800d87a:	3001      	adds	r0, #1
 800d87c:	d1c3      	bne.n	800d806 <_printf_float+0x32e>
 800d87e:	e686      	b.n	800d58e <_printf_float+0xb6>
 800d880:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d884:	f1ba 0f01 	cmp.w	sl, #1
 800d888:	dc01      	bgt.n	800d88e <_printf_float+0x3b6>
 800d88a:	07db      	lsls	r3, r3, #31
 800d88c:	d536      	bpl.n	800d8fc <_printf_float+0x424>
 800d88e:	2301      	movs	r3, #1
 800d890:	4642      	mov	r2, r8
 800d892:	4631      	mov	r1, r6
 800d894:	4628      	mov	r0, r5
 800d896:	47b8      	blx	r7
 800d898:	3001      	adds	r0, #1
 800d89a:	f43f ae78 	beq.w	800d58e <_printf_float+0xb6>
 800d89e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8a2:	4631      	mov	r1, r6
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	47b8      	blx	r7
 800d8a8:	3001      	adds	r0, #1
 800d8aa:	f43f ae70 	beq.w	800d58e <_printf_float+0xb6>
 800d8ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d8ba:	f7f3 f905 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8be:	b9c0      	cbnz	r0, 800d8f2 <_printf_float+0x41a>
 800d8c0:	4653      	mov	r3, sl
 800d8c2:	f108 0201 	add.w	r2, r8, #1
 800d8c6:	4631      	mov	r1, r6
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	47b8      	blx	r7
 800d8cc:	3001      	adds	r0, #1
 800d8ce:	d10c      	bne.n	800d8ea <_printf_float+0x412>
 800d8d0:	e65d      	b.n	800d58e <_printf_float+0xb6>
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	465a      	mov	r2, fp
 800d8d6:	4631      	mov	r1, r6
 800d8d8:	4628      	mov	r0, r5
 800d8da:	47b8      	blx	r7
 800d8dc:	3001      	adds	r0, #1
 800d8de:	f43f ae56 	beq.w	800d58e <_printf_float+0xb6>
 800d8e2:	f108 0801 	add.w	r8, r8, #1
 800d8e6:	45d0      	cmp	r8, sl
 800d8e8:	dbf3      	blt.n	800d8d2 <_printf_float+0x3fa>
 800d8ea:	464b      	mov	r3, r9
 800d8ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d8f0:	e6df      	b.n	800d6b2 <_printf_float+0x1da>
 800d8f2:	f04f 0800 	mov.w	r8, #0
 800d8f6:	f104 0b1a 	add.w	fp, r4, #26
 800d8fa:	e7f4      	b.n	800d8e6 <_printf_float+0x40e>
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	4642      	mov	r2, r8
 800d900:	e7e1      	b.n	800d8c6 <_printf_float+0x3ee>
 800d902:	2301      	movs	r3, #1
 800d904:	464a      	mov	r2, r9
 800d906:	4631      	mov	r1, r6
 800d908:	4628      	mov	r0, r5
 800d90a:	47b8      	blx	r7
 800d90c:	3001      	adds	r0, #1
 800d90e:	f43f ae3e 	beq.w	800d58e <_printf_float+0xb6>
 800d912:	f108 0801 	add.w	r8, r8, #1
 800d916:	68e3      	ldr	r3, [r4, #12]
 800d918:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d91a:	1a5b      	subs	r3, r3, r1
 800d91c:	4543      	cmp	r3, r8
 800d91e:	dcf0      	bgt.n	800d902 <_printf_float+0x42a>
 800d920:	e6fc      	b.n	800d71c <_printf_float+0x244>
 800d922:	f04f 0800 	mov.w	r8, #0
 800d926:	f104 0919 	add.w	r9, r4, #25
 800d92a:	e7f4      	b.n	800d916 <_printf_float+0x43e>

0800d92c <_printf_common>:
 800d92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d930:	4616      	mov	r6, r2
 800d932:	4698      	mov	r8, r3
 800d934:	688a      	ldr	r2, [r1, #8]
 800d936:	690b      	ldr	r3, [r1, #16]
 800d938:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d93c:	4293      	cmp	r3, r2
 800d93e:	bfb8      	it	lt
 800d940:	4613      	movlt	r3, r2
 800d942:	6033      	str	r3, [r6, #0]
 800d944:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d948:	4607      	mov	r7, r0
 800d94a:	460c      	mov	r4, r1
 800d94c:	b10a      	cbz	r2, 800d952 <_printf_common+0x26>
 800d94e:	3301      	adds	r3, #1
 800d950:	6033      	str	r3, [r6, #0]
 800d952:	6823      	ldr	r3, [r4, #0]
 800d954:	0699      	lsls	r1, r3, #26
 800d956:	bf42      	ittt	mi
 800d958:	6833      	ldrmi	r3, [r6, #0]
 800d95a:	3302      	addmi	r3, #2
 800d95c:	6033      	strmi	r3, [r6, #0]
 800d95e:	6825      	ldr	r5, [r4, #0]
 800d960:	f015 0506 	ands.w	r5, r5, #6
 800d964:	d106      	bne.n	800d974 <_printf_common+0x48>
 800d966:	f104 0a19 	add.w	sl, r4, #25
 800d96a:	68e3      	ldr	r3, [r4, #12]
 800d96c:	6832      	ldr	r2, [r6, #0]
 800d96e:	1a9b      	subs	r3, r3, r2
 800d970:	42ab      	cmp	r3, r5
 800d972:	dc26      	bgt.n	800d9c2 <_printf_common+0x96>
 800d974:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d978:	6822      	ldr	r2, [r4, #0]
 800d97a:	3b00      	subs	r3, #0
 800d97c:	bf18      	it	ne
 800d97e:	2301      	movne	r3, #1
 800d980:	0692      	lsls	r2, r2, #26
 800d982:	d42b      	bmi.n	800d9dc <_printf_common+0xb0>
 800d984:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d988:	4641      	mov	r1, r8
 800d98a:	4638      	mov	r0, r7
 800d98c:	47c8      	blx	r9
 800d98e:	3001      	adds	r0, #1
 800d990:	d01e      	beq.n	800d9d0 <_printf_common+0xa4>
 800d992:	6823      	ldr	r3, [r4, #0]
 800d994:	6922      	ldr	r2, [r4, #16]
 800d996:	f003 0306 	and.w	r3, r3, #6
 800d99a:	2b04      	cmp	r3, #4
 800d99c:	bf02      	ittt	eq
 800d99e:	68e5      	ldreq	r5, [r4, #12]
 800d9a0:	6833      	ldreq	r3, [r6, #0]
 800d9a2:	1aed      	subeq	r5, r5, r3
 800d9a4:	68a3      	ldr	r3, [r4, #8]
 800d9a6:	bf0c      	ite	eq
 800d9a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d9ac:	2500      	movne	r5, #0
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	bfc4      	itt	gt
 800d9b2:	1a9b      	subgt	r3, r3, r2
 800d9b4:	18ed      	addgt	r5, r5, r3
 800d9b6:	2600      	movs	r6, #0
 800d9b8:	341a      	adds	r4, #26
 800d9ba:	42b5      	cmp	r5, r6
 800d9bc:	d11a      	bne.n	800d9f4 <_printf_common+0xc8>
 800d9be:	2000      	movs	r0, #0
 800d9c0:	e008      	b.n	800d9d4 <_printf_common+0xa8>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	4652      	mov	r2, sl
 800d9c6:	4641      	mov	r1, r8
 800d9c8:	4638      	mov	r0, r7
 800d9ca:	47c8      	blx	r9
 800d9cc:	3001      	adds	r0, #1
 800d9ce:	d103      	bne.n	800d9d8 <_printf_common+0xac>
 800d9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9d8:	3501      	adds	r5, #1
 800d9da:	e7c6      	b.n	800d96a <_printf_common+0x3e>
 800d9dc:	18e1      	adds	r1, r4, r3
 800d9de:	1c5a      	adds	r2, r3, #1
 800d9e0:	2030      	movs	r0, #48	@ 0x30
 800d9e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d9e6:	4422      	add	r2, r4
 800d9e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d9ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d9f0:	3302      	adds	r3, #2
 800d9f2:	e7c7      	b.n	800d984 <_printf_common+0x58>
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	4622      	mov	r2, r4
 800d9f8:	4641      	mov	r1, r8
 800d9fa:	4638      	mov	r0, r7
 800d9fc:	47c8      	blx	r9
 800d9fe:	3001      	adds	r0, #1
 800da00:	d0e6      	beq.n	800d9d0 <_printf_common+0xa4>
 800da02:	3601      	adds	r6, #1
 800da04:	e7d9      	b.n	800d9ba <_printf_common+0x8e>
	...

0800da08 <_printf_i>:
 800da08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da0c:	7e0f      	ldrb	r7, [r1, #24]
 800da0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800da10:	2f78      	cmp	r7, #120	@ 0x78
 800da12:	4691      	mov	r9, r2
 800da14:	4680      	mov	r8, r0
 800da16:	460c      	mov	r4, r1
 800da18:	469a      	mov	sl, r3
 800da1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800da1e:	d807      	bhi.n	800da30 <_printf_i+0x28>
 800da20:	2f62      	cmp	r7, #98	@ 0x62
 800da22:	d80a      	bhi.n	800da3a <_printf_i+0x32>
 800da24:	2f00      	cmp	r7, #0
 800da26:	f000 80d2 	beq.w	800dbce <_printf_i+0x1c6>
 800da2a:	2f58      	cmp	r7, #88	@ 0x58
 800da2c:	f000 80b9 	beq.w	800dba2 <_printf_i+0x19a>
 800da30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800da38:	e03a      	b.n	800dab0 <_printf_i+0xa8>
 800da3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800da3e:	2b15      	cmp	r3, #21
 800da40:	d8f6      	bhi.n	800da30 <_printf_i+0x28>
 800da42:	a101      	add	r1, pc, #4	@ (adr r1, 800da48 <_printf_i+0x40>)
 800da44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da48:	0800daa1 	.word	0x0800daa1
 800da4c:	0800dab5 	.word	0x0800dab5
 800da50:	0800da31 	.word	0x0800da31
 800da54:	0800da31 	.word	0x0800da31
 800da58:	0800da31 	.word	0x0800da31
 800da5c:	0800da31 	.word	0x0800da31
 800da60:	0800dab5 	.word	0x0800dab5
 800da64:	0800da31 	.word	0x0800da31
 800da68:	0800da31 	.word	0x0800da31
 800da6c:	0800da31 	.word	0x0800da31
 800da70:	0800da31 	.word	0x0800da31
 800da74:	0800dbb5 	.word	0x0800dbb5
 800da78:	0800dadf 	.word	0x0800dadf
 800da7c:	0800db6f 	.word	0x0800db6f
 800da80:	0800da31 	.word	0x0800da31
 800da84:	0800da31 	.word	0x0800da31
 800da88:	0800dbd7 	.word	0x0800dbd7
 800da8c:	0800da31 	.word	0x0800da31
 800da90:	0800dadf 	.word	0x0800dadf
 800da94:	0800da31 	.word	0x0800da31
 800da98:	0800da31 	.word	0x0800da31
 800da9c:	0800db77 	.word	0x0800db77
 800daa0:	6833      	ldr	r3, [r6, #0]
 800daa2:	1d1a      	adds	r2, r3, #4
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	6032      	str	r2, [r6, #0]
 800daa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800daac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dab0:	2301      	movs	r3, #1
 800dab2:	e09d      	b.n	800dbf0 <_printf_i+0x1e8>
 800dab4:	6833      	ldr	r3, [r6, #0]
 800dab6:	6820      	ldr	r0, [r4, #0]
 800dab8:	1d19      	adds	r1, r3, #4
 800daba:	6031      	str	r1, [r6, #0]
 800dabc:	0606      	lsls	r6, r0, #24
 800dabe:	d501      	bpl.n	800dac4 <_printf_i+0xbc>
 800dac0:	681d      	ldr	r5, [r3, #0]
 800dac2:	e003      	b.n	800dacc <_printf_i+0xc4>
 800dac4:	0645      	lsls	r5, r0, #25
 800dac6:	d5fb      	bpl.n	800dac0 <_printf_i+0xb8>
 800dac8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dacc:	2d00      	cmp	r5, #0
 800dace:	da03      	bge.n	800dad8 <_printf_i+0xd0>
 800dad0:	232d      	movs	r3, #45	@ 0x2d
 800dad2:	426d      	negs	r5, r5
 800dad4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dad8:	4859      	ldr	r0, [pc, #356]	@ (800dc40 <_printf_i+0x238>)
 800dada:	230a      	movs	r3, #10
 800dadc:	e011      	b.n	800db02 <_printf_i+0xfa>
 800dade:	6821      	ldr	r1, [r4, #0]
 800dae0:	6833      	ldr	r3, [r6, #0]
 800dae2:	0608      	lsls	r0, r1, #24
 800dae4:	f853 5b04 	ldr.w	r5, [r3], #4
 800dae8:	d402      	bmi.n	800daf0 <_printf_i+0xe8>
 800daea:	0649      	lsls	r1, r1, #25
 800daec:	bf48      	it	mi
 800daee:	b2ad      	uxthmi	r5, r5
 800daf0:	2f6f      	cmp	r7, #111	@ 0x6f
 800daf2:	4853      	ldr	r0, [pc, #332]	@ (800dc40 <_printf_i+0x238>)
 800daf4:	6033      	str	r3, [r6, #0]
 800daf6:	bf14      	ite	ne
 800daf8:	230a      	movne	r3, #10
 800dafa:	2308      	moveq	r3, #8
 800dafc:	2100      	movs	r1, #0
 800dafe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800db02:	6866      	ldr	r6, [r4, #4]
 800db04:	60a6      	str	r6, [r4, #8]
 800db06:	2e00      	cmp	r6, #0
 800db08:	bfa2      	ittt	ge
 800db0a:	6821      	ldrge	r1, [r4, #0]
 800db0c:	f021 0104 	bicge.w	r1, r1, #4
 800db10:	6021      	strge	r1, [r4, #0]
 800db12:	b90d      	cbnz	r5, 800db18 <_printf_i+0x110>
 800db14:	2e00      	cmp	r6, #0
 800db16:	d04b      	beq.n	800dbb0 <_printf_i+0x1a8>
 800db18:	4616      	mov	r6, r2
 800db1a:	fbb5 f1f3 	udiv	r1, r5, r3
 800db1e:	fb03 5711 	mls	r7, r3, r1, r5
 800db22:	5dc7      	ldrb	r7, [r0, r7]
 800db24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db28:	462f      	mov	r7, r5
 800db2a:	42bb      	cmp	r3, r7
 800db2c:	460d      	mov	r5, r1
 800db2e:	d9f4      	bls.n	800db1a <_printf_i+0x112>
 800db30:	2b08      	cmp	r3, #8
 800db32:	d10b      	bne.n	800db4c <_printf_i+0x144>
 800db34:	6823      	ldr	r3, [r4, #0]
 800db36:	07df      	lsls	r7, r3, #31
 800db38:	d508      	bpl.n	800db4c <_printf_i+0x144>
 800db3a:	6923      	ldr	r3, [r4, #16]
 800db3c:	6861      	ldr	r1, [r4, #4]
 800db3e:	4299      	cmp	r1, r3
 800db40:	bfde      	ittt	le
 800db42:	2330      	movle	r3, #48	@ 0x30
 800db44:	f806 3c01 	strble.w	r3, [r6, #-1]
 800db48:	f106 36ff 	addle.w	r6, r6, #4294967295
 800db4c:	1b92      	subs	r2, r2, r6
 800db4e:	6122      	str	r2, [r4, #16]
 800db50:	f8cd a000 	str.w	sl, [sp]
 800db54:	464b      	mov	r3, r9
 800db56:	aa03      	add	r2, sp, #12
 800db58:	4621      	mov	r1, r4
 800db5a:	4640      	mov	r0, r8
 800db5c:	f7ff fee6 	bl	800d92c <_printf_common>
 800db60:	3001      	adds	r0, #1
 800db62:	d14a      	bne.n	800dbfa <_printf_i+0x1f2>
 800db64:	f04f 30ff 	mov.w	r0, #4294967295
 800db68:	b004      	add	sp, #16
 800db6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db6e:	6823      	ldr	r3, [r4, #0]
 800db70:	f043 0320 	orr.w	r3, r3, #32
 800db74:	6023      	str	r3, [r4, #0]
 800db76:	4833      	ldr	r0, [pc, #204]	@ (800dc44 <_printf_i+0x23c>)
 800db78:	2778      	movs	r7, #120	@ 0x78
 800db7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800db7e:	6823      	ldr	r3, [r4, #0]
 800db80:	6831      	ldr	r1, [r6, #0]
 800db82:	061f      	lsls	r7, r3, #24
 800db84:	f851 5b04 	ldr.w	r5, [r1], #4
 800db88:	d402      	bmi.n	800db90 <_printf_i+0x188>
 800db8a:	065f      	lsls	r7, r3, #25
 800db8c:	bf48      	it	mi
 800db8e:	b2ad      	uxthmi	r5, r5
 800db90:	6031      	str	r1, [r6, #0]
 800db92:	07d9      	lsls	r1, r3, #31
 800db94:	bf44      	itt	mi
 800db96:	f043 0320 	orrmi.w	r3, r3, #32
 800db9a:	6023      	strmi	r3, [r4, #0]
 800db9c:	b11d      	cbz	r5, 800dba6 <_printf_i+0x19e>
 800db9e:	2310      	movs	r3, #16
 800dba0:	e7ac      	b.n	800dafc <_printf_i+0xf4>
 800dba2:	4827      	ldr	r0, [pc, #156]	@ (800dc40 <_printf_i+0x238>)
 800dba4:	e7e9      	b.n	800db7a <_printf_i+0x172>
 800dba6:	6823      	ldr	r3, [r4, #0]
 800dba8:	f023 0320 	bic.w	r3, r3, #32
 800dbac:	6023      	str	r3, [r4, #0]
 800dbae:	e7f6      	b.n	800db9e <_printf_i+0x196>
 800dbb0:	4616      	mov	r6, r2
 800dbb2:	e7bd      	b.n	800db30 <_printf_i+0x128>
 800dbb4:	6833      	ldr	r3, [r6, #0]
 800dbb6:	6825      	ldr	r5, [r4, #0]
 800dbb8:	6961      	ldr	r1, [r4, #20]
 800dbba:	1d18      	adds	r0, r3, #4
 800dbbc:	6030      	str	r0, [r6, #0]
 800dbbe:	062e      	lsls	r6, r5, #24
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	d501      	bpl.n	800dbc8 <_printf_i+0x1c0>
 800dbc4:	6019      	str	r1, [r3, #0]
 800dbc6:	e002      	b.n	800dbce <_printf_i+0x1c6>
 800dbc8:	0668      	lsls	r0, r5, #25
 800dbca:	d5fb      	bpl.n	800dbc4 <_printf_i+0x1bc>
 800dbcc:	8019      	strh	r1, [r3, #0]
 800dbce:	2300      	movs	r3, #0
 800dbd0:	6123      	str	r3, [r4, #16]
 800dbd2:	4616      	mov	r6, r2
 800dbd4:	e7bc      	b.n	800db50 <_printf_i+0x148>
 800dbd6:	6833      	ldr	r3, [r6, #0]
 800dbd8:	1d1a      	adds	r2, r3, #4
 800dbda:	6032      	str	r2, [r6, #0]
 800dbdc:	681e      	ldr	r6, [r3, #0]
 800dbde:	6862      	ldr	r2, [r4, #4]
 800dbe0:	2100      	movs	r1, #0
 800dbe2:	4630      	mov	r0, r6
 800dbe4:	f7f2 faf4 	bl	80001d0 <memchr>
 800dbe8:	b108      	cbz	r0, 800dbee <_printf_i+0x1e6>
 800dbea:	1b80      	subs	r0, r0, r6
 800dbec:	6060      	str	r0, [r4, #4]
 800dbee:	6863      	ldr	r3, [r4, #4]
 800dbf0:	6123      	str	r3, [r4, #16]
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbf8:	e7aa      	b.n	800db50 <_printf_i+0x148>
 800dbfa:	6923      	ldr	r3, [r4, #16]
 800dbfc:	4632      	mov	r2, r6
 800dbfe:	4649      	mov	r1, r9
 800dc00:	4640      	mov	r0, r8
 800dc02:	47d0      	blx	sl
 800dc04:	3001      	adds	r0, #1
 800dc06:	d0ad      	beq.n	800db64 <_printf_i+0x15c>
 800dc08:	6823      	ldr	r3, [r4, #0]
 800dc0a:	079b      	lsls	r3, r3, #30
 800dc0c:	d413      	bmi.n	800dc36 <_printf_i+0x22e>
 800dc0e:	68e0      	ldr	r0, [r4, #12]
 800dc10:	9b03      	ldr	r3, [sp, #12]
 800dc12:	4298      	cmp	r0, r3
 800dc14:	bfb8      	it	lt
 800dc16:	4618      	movlt	r0, r3
 800dc18:	e7a6      	b.n	800db68 <_printf_i+0x160>
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	4632      	mov	r2, r6
 800dc1e:	4649      	mov	r1, r9
 800dc20:	4640      	mov	r0, r8
 800dc22:	47d0      	blx	sl
 800dc24:	3001      	adds	r0, #1
 800dc26:	d09d      	beq.n	800db64 <_printf_i+0x15c>
 800dc28:	3501      	adds	r5, #1
 800dc2a:	68e3      	ldr	r3, [r4, #12]
 800dc2c:	9903      	ldr	r1, [sp, #12]
 800dc2e:	1a5b      	subs	r3, r3, r1
 800dc30:	42ab      	cmp	r3, r5
 800dc32:	dcf2      	bgt.n	800dc1a <_printf_i+0x212>
 800dc34:	e7eb      	b.n	800dc0e <_printf_i+0x206>
 800dc36:	2500      	movs	r5, #0
 800dc38:	f104 0619 	add.w	r6, r4, #25
 800dc3c:	e7f5      	b.n	800dc2a <_printf_i+0x222>
 800dc3e:	bf00      	nop
 800dc40:	08010a16 	.word	0x08010a16
 800dc44:	08010a27 	.word	0x08010a27

0800dc48 <std>:
 800dc48:	2300      	movs	r3, #0
 800dc4a:	b510      	push	{r4, lr}
 800dc4c:	4604      	mov	r4, r0
 800dc4e:	e9c0 3300 	strd	r3, r3, [r0]
 800dc52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dc56:	6083      	str	r3, [r0, #8]
 800dc58:	8181      	strh	r1, [r0, #12]
 800dc5a:	6643      	str	r3, [r0, #100]	@ 0x64
 800dc5c:	81c2      	strh	r2, [r0, #14]
 800dc5e:	6183      	str	r3, [r0, #24]
 800dc60:	4619      	mov	r1, r3
 800dc62:	2208      	movs	r2, #8
 800dc64:	305c      	adds	r0, #92	@ 0x5c
 800dc66:	f000 f914 	bl	800de92 <memset>
 800dc6a:	4b0d      	ldr	r3, [pc, #52]	@ (800dca0 <std+0x58>)
 800dc6c:	6263      	str	r3, [r4, #36]	@ 0x24
 800dc6e:	4b0d      	ldr	r3, [pc, #52]	@ (800dca4 <std+0x5c>)
 800dc70:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dc72:	4b0d      	ldr	r3, [pc, #52]	@ (800dca8 <std+0x60>)
 800dc74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dc76:	4b0d      	ldr	r3, [pc, #52]	@ (800dcac <std+0x64>)
 800dc78:	6323      	str	r3, [r4, #48]	@ 0x30
 800dc7a:	4b0d      	ldr	r3, [pc, #52]	@ (800dcb0 <std+0x68>)
 800dc7c:	6224      	str	r4, [r4, #32]
 800dc7e:	429c      	cmp	r4, r3
 800dc80:	d006      	beq.n	800dc90 <std+0x48>
 800dc82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dc86:	4294      	cmp	r4, r2
 800dc88:	d002      	beq.n	800dc90 <std+0x48>
 800dc8a:	33d0      	adds	r3, #208	@ 0xd0
 800dc8c:	429c      	cmp	r4, r3
 800dc8e:	d105      	bne.n	800dc9c <std+0x54>
 800dc90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dc94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc98:	f000 b978 	b.w	800df8c <__retarget_lock_init_recursive>
 800dc9c:	bd10      	pop	{r4, pc}
 800dc9e:	bf00      	nop
 800dca0:	0800de0d 	.word	0x0800de0d
 800dca4:	0800de2f 	.word	0x0800de2f
 800dca8:	0800de67 	.word	0x0800de67
 800dcac:	0800de8b 	.word	0x0800de8b
 800dcb0:	2000230c 	.word	0x2000230c

0800dcb4 <stdio_exit_handler>:
 800dcb4:	4a02      	ldr	r2, [pc, #8]	@ (800dcc0 <stdio_exit_handler+0xc>)
 800dcb6:	4903      	ldr	r1, [pc, #12]	@ (800dcc4 <stdio_exit_handler+0x10>)
 800dcb8:	4803      	ldr	r0, [pc, #12]	@ (800dcc8 <stdio_exit_handler+0x14>)
 800dcba:	f000 b869 	b.w	800dd90 <_fwalk_sglue>
 800dcbe:	bf00      	nop
 800dcc0:	20000100 	.word	0x20000100
 800dcc4:	0800f8ed 	.word	0x0800f8ed
 800dcc8:	20000110 	.word	0x20000110

0800dccc <cleanup_stdio>:
 800dccc:	6841      	ldr	r1, [r0, #4]
 800dcce:	4b0c      	ldr	r3, [pc, #48]	@ (800dd00 <cleanup_stdio+0x34>)
 800dcd0:	4299      	cmp	r1, r3
 800dcd2:	b510      	push	{r4, lr}
 800dcd4:	4604      	mov	r4, r0
 800dcd6:	d001      	beq.n	800dcdc <cleanup_stdio+0x10>
 800dcd8:	f001 fe08 	bl	800f8ec <_fflush_r>
 800dcdc:	68a1      	ldr	r1, [r4, #8]
 800dcde:	4b09      	ldr	r3, [pc, #36]	@ (800dd04 <cleanup_stdio+0x38>)
 800dce0:	4299      	cmp	r1, r3
 800dce2:	d002      	beq.n	800dcea <cleanup_stdio+0x1e>
 800dce4:	4620      	mov	r0, r4
 800dce6:	f001 fe01 	bl	800f8ec <_fflush_r>
 800dcea:	68e1      	ldr	r1, [r4, #12]
 800dcec:	4b06      	ldr	r3, [pc, #24]	@ (800dd08 <cleanup_stdio+0x3c>)
 800dcee:	4299      	cmp	r1, r3
 800dcf0:	d004      	beq.n	800dcfc <cleanup_stdio+0x30>
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcf8:	f001 bdf8 	b.w	800f8ec <_fflush_r>
 800dcfc:	bd10      	pop	{r4, pc}
 800dcfe:	bf00      	nop
 800dd00:	2000230c 	.word	0x2000230c
 800dd04:	20002374 	.word	0x20002374
 800dd08:	200023dc 	.word	0x200023dc

0800dd0c <global_stdio_init.part.0>:
 800dd0c:	b510      	push	{r4, lr}
 800dd0e:	4b0b      	ldr	r3, [pc, #44]	@ (800dd3c <global_stdio_init.part.0+0x30>)
 800dd10:	4c0b      	ldr	r4, [pc, #44]	@ (800dd40 <global_stdio_init.part.0+0x34>)
 800dd12:	4a0c      	ldr	r2, [pc, #48]	@ (800dd44 <global_stdio_init.part.0+0x38>)
 800dd14:	601a      	str	r2, [r3, #0]
 800dd16:	4620      	mov	r0, r4
 800dd18:	2200      	movs	r2, #0
 800dd1a:	2104      	movs	r1, #4
 800dd1c:	f7ff ff94 	bl	800dc48 <std>
 800dd20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dd24:	2201      	movs	r2, #1
 800dd26:	2109      	movs	r1, #9
 800dd28:	f7ff ff8e 	bl	800dc48 <std>
 800dd2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dd30:	2202      	movs	r2, #2
 800dd32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd36:	2112      	movs	r1, #18
 800dd38:	f7ff bf86 	b.w	800dc48 <std>
 800dd3c:	20002444 	.word	0x20002444
 800dd40:	2000230c 	.word	0x2000230c
 800dd44:	0800dcb5 	.word	0x0800dcb5

0800dd48 <__sfp_lock_acquire>:
 800dd48:	4801      	ldr	r0, [pc, #4]	@ (800dd50 <__sfp_lock_acquire+0x8>)
 800dd4a:	f000 b920 	b.w	800df8e <__retarget_lock_acquire_recursive>
 800dd4e:	bf00      	nop
 800dd50:	2000244d 	.word	0x2000244d

0800dd54 <__sfp_lock_release>:
 800dd54:	4801      	ldr	r0, [pc, #4]	@ (800dd5c <__sfp_lock_release+0x8>)
 800dd56:	f000 b91b 	b.w	800df90 <__retarget_lock_release_recursive>
 800dd5a:	bf00      	nop
 800dd5c:	2000244d 	.word	0x2000244d

0800dd60 <__sinit>:
 800dd60:	b510      	push	{r4, lr}
 800dd62:	4604      	mov	r4, r0
 800dd64:	f7ff fff0 	bl	800dd48 <__sfp_lock_acquire>
 800dd68:	6a23      	ldr	r3, [r4, #32]
 800dd6a:	b11b      	cbz	r3, 800dd74 <__sinit+0x14>
 800dd6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd70:	f7ff bff0 	b.w	800dd54 <__sfp_lock_release>
 800dd74:	4b04      	ldr	r3, [pc, #16]	@ (800dd88 <__sinit+0x28>)
 800dd76:	6223      	str	r3, [r4, #32]
 800dd78:	4b04      	ldr	r3, [pc, #16]	@ (800dd8c <__sinit+0x2c>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d1f5      	bne.n	800dd6c <__sinit+0xc>
 800dd80:	f7ff ffc4 	bl	800dd0c <global_stdio_init.part.0>
 800dd84:	e7f2      	b.n	800dd6c <__sinit+0xc>
 800dd86:	bf00      	nop
 800dd88:	0800dccd 	.word	0x0800dccd
 800dd8c:	20002444 	.word	0x20002444

0800dd90 <_fwalk_sglue>:
 800dd90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd94:	4607      	mov	r7, r0
 800dd96:	4688      	mov	r8, r1
 800dd98:	4614      	mov	r4, r2
 800dd9a:	2600      	movs	r6, #0
 800dd9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dda0:	f1b9 0901 	subs.w	r9, r9, #1
 800dda4:	d505      	bpl.n	800ddb2 <_fwalk_sglue+0x22>
 800dda6:	6824      	ldr	r4, [r4, #0]
 800dda8:	2c00      	cmp	r4, #0
 800ddaa:	d1f7      	bne.n	800dd9c <_fwalk_sglue+0xc>
 800ddac:	4630      	mov	r0, r6
 800ddae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddb2:	89ab      	ldrh	r3, [r5, #12]
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d907      	bls.n	800ddc8 <_fwalk_sglue+0x38>
 800ddb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	d003      	beq.n	800ddc8 <_fwalk_sglue+0x38>
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	4638      	mov	r0, r7
 800ddc4:	47c0      	blx	r8
 800ddc6:	4306      	orrs	r6, r0
 800ddc8:	3568      	adds	r5, #104	@ 0x68
 800ddca:	e7e9      	b.n	800dda0 <_fwalk_sglue+0x10>

0800ddcc <siprintf>:
 800ddcc:	b40e      	push	{r1, r2, r3}
 800ddce:	b500      	push	{lr}
 800ddd0:	b09c      	sub	sp, #112	@ 0x70
 800ddd2:	ab1d      	add	r3, sp, #116	@ 0x74
 800ddd4:	9002      	str	r0, [sp, #8]
 800ddd6:	9006      	str	r0, [sp, #24]
 800ddd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dddc:	4809      	ldr	r0, [pc, #36]	@ (800de04 <siprintf+0x38>)
 800ddde:	9107      	str	r1, [sp, #28]
 800dde0:	9104      	str	r1, [sp, #16]
 800dde2:	4909      	ldr	r1, [pc, #36]	@ (800de08 <siprintf+0x3c>)
 800dde4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dde8:	9105      	str	r1, [sp, #20]
 800ddea:	6800      	ldr	r0, [r0, #0]
 800ddec:	9301      	str	r3, [sp, #4]
 800ddee:	a902      	add	r1, sp, #8
 800ddf0:	f001 fbfc 	bl	800f5ec <_svfiprintf_r>
 800ddf4:	9b02      	ldr	r3, [sp, #8]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	701a      	strb	r2, [r3, #0]
 800ddfa:	b01c      	add	sp, #112	@ 0x70
 800ddfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800de00:	b003      	add	sp, #12
 800de02:	4770      	bx	lr
 800de04:	2000010c 	.word	0x2000010c
 800de08:	ffff0208 	.word	0xffff0208

0800de0c <__sread>:
 800de0c:	b510      	push	{r4, lr}
 800de0e:	460c      	mov	r4, r1
 800de10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de14:	f000 f86c 	bl	800def0 <_read_r>
 800de18:	2800      	cmp	r0, #0
 800de1a:	bfab      	itete	ge
 800de1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800de1e:	89a3      	ldrhlt	r3, [r4, #12]
 800de20:	181b      	addge	r3, r3, r0
 800de22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800de26:	bfac      	ite	ge
 800de28:	6563      	strge	r3, [r4, #84]	@ 0x54
 800de2a:	81a3      	strhlt	r3, [r4, #12]
 800de2c:	bd10      	pop	{r4, pc}

0800de2e <__swrite>:
 800de2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de32:	461f      	mov	r7, r3
 800de34:	898b      	ldrh	r3, [r1, #12]
 800de36:	05db      	lsls	r3, r3, #23
 800de38:	4605      	mov	r5, r0
 800de3a:	460c      	mov	r4, r1
 800de3c:	4616      	mov	r6, r2
 800de3e:	d505      	bpl.n	800de4c <__swrite+0x1e>
 800de40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de44:	2302      	movs	r3, #2
 800de46:	2200      	movs	r2, #0
 800de48:	f000 f840 	bl	800decc <_lseek_r>
 800de4c:	89a3      	ldrh	r3, [r4, #12]
 800de4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800de56:	81a3      	strh	r3, [r4, #12]
 800de58:	4632      	mov	r2, r6
 800de5a:	463b      	mov	r3, r7
 800de5c:	4628      	mov	r0, r5
 800de5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de62:	f000 b857 	b.w	800df14 <_write_r>

0800de66 <__sseek>:
 800de66:	b510      	push	{r4, lr}
 800de68:	460c      	mov	r4, r1
 800de6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de6e:	f000 f82d 	bl	800decc <_lseek_r>
 800de72:	1c43      	adds	r3, r0, #1
 800de74:	89a3      	ldrh	r3, [r4, #12]
 800de76:	bf15      	itete	ne
 800de78:	6560      	strne	r0, [r4, #84]	@ 0x54
 800de7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800de7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800de82:	81a3      	strheq	r3, [r4, #12]
 800de84:	bf18      	it	ne
 800de86:	81a3      	strhne	r3, [r4, #12]
 800de88:	bd10      	pop	{r4, pc}

0800de8a <__sclose>:
 800de8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de8e:	f000 b80d 	b.w	800deac <_close_r>

0800de92 <memset>:
 800de92:	4402      	add	r2, r0
 800de94:	4603      	mov	r3, r0
 800de96:	4293      	cmp	r3, r2
 800de98:	d100      	bne.n	800de9c <memset+0xa>
 800de9a:	4770      	bx	lr
 800de9c:	f803 1b01 	strb.w	r1, [r3], #1
 800dea0:	e7f9      	b.n	800de96 <memset+0x4>
	...

0800dea4 <_localeconv_r>:
 800dea4:	4800      	ldr	r0, [pc, #0]	@ (800dea8 <_localeconv_r+0x4>)
 800dea6:	4770      	bx	lr
 800dea8:	2000024c 	.word	0x2000024c

0800deac <_close_r>:
 800deac:	b538      	push	{r3, r4, r5, lr}
 800deae:	4d06      	ldr	r5, [pc, #24]	@ (800dec8 <_close_r+0x1c>)
 800deb0:	2300      	movs	r3, #0
 800deb2:	4604      	mov	r4, r0
 800deb4:	4608      	mov	r0, r1
 800deb6:	602b      	str	r3, [r5, #0]
 800deb8:	f7f4 fe0e 	bl	8002ad8 <_close>
 800debc:	1c43      	adds	r3, r0, #1
 800debe:	d102      	bne.n	800dec6 <_close_r+0x1a>
 800dec0:	682b      	ldr	r3, [r5, #0]
 800dec2:	b103      	cbz	r3, 800dec6 <_close_r+0x1a>
 800dec4:	6023      	str	r3, [r4, #0]
 800dec6:	bd38      	pop	{r3, r4, r5, pc}
 800dec8:	20002448 	.word	0x20002448

0800decc <_lseek_r>:
 800decc:	b538      	push	{r3, r4, r5, lr}
 800dece:	4d07      	ldr	r5, [pc, #28]	@ (800deec <_lseek_r+0x20>)
 800ded0:	4604      	mov	r4, r0
 800ded2:	4608      	mov	r0, r1
 800ded4:	4611      	mov	r1, r2
 800ded6:	2200      	movs	r2, #0
 800ded8:	602a      	str	r2, [r5, #0]
 800deda:	461a      	mov	r2, r3
 800dedc:	f7f4 fe23 	bl	8002b26 <_lseek>
 800dee0:	1c43      	adds	r3, r0, #1
 800dee2:	d102      	bne.n	800deea <_lseek_r+0x1e>
 800dee4:	682b      	ldr	r3, [r5, #0]
 800dee6:	b103      	cbz	r3, 800deea <_lseek_r+0x1e>
 800dee8:	6023      	str	r3, [r4, #0]
 800deea:	bd38      	pop	{r3, r4, r5, pc}
 800deec:	20002448 	.word	0x20002448

0800def0 <_read_r>:
 800def0:	b538      	push	{r3, r4, r5, lr}
 800def2:	4d07      	ldr	r5, [pc, #28]	@ (800df10 <_read_r+0x20>)
 800def4:	4604      	mov	r4, r0
 800def6:	4608      	mov	r0, r1
 800def8:	4611      	mov	r1, r2
 800defa:	2200      	movs	r2, #0
 800defc:	602a      	str	r2, [r5, #0]
 800defe:	461a      	mov	r2, r3
 800df00:	f7f4 fdb1 	bl	8002a66 <_read>
 800df04:	1c43      	adds	r3, r0, #1
 800df06:	d102      	bne.n	800df0e <_read_r+0x1e>
 800df08:	682b      	ldr	r3, [r5, #0]
 800df0a:	b103      	cbz	r3, 800df0e <_read_r+0x1e>
 800df0c:	6023      	str	r3, [r4, #0]
 800df0e:	bd38      	pop	{r3, r4, r5, pc}
 800df10:	20002448 	.word	0x20002448

0800df14 <_write_r>:
 800df14:	b538      	push	{r3, r4, r5, lr}
 800df16:	4d07      	ldr	r5, [pc, #28]	@ (800df34 <_write_r+0x20>)
 800df18:	4604      	mov	r4, r0
 800df1a:	4608      	mov	r0, r1
 800df1c:	4611      	mov	r1, r2
 800df1e:	2200      	movs	r2, #0
 800df20:	602a      	str	r2, [r5, #0]
 800df22:	461a      	mov	r2, r3
 800df24:	f7f4 fdbc 	bl	8002aa0 <_write>
 800df28:	1c43      	adds	r3, r0, #1
 800df2a:	d102      	bne.n	800df32 <_write_r+0x1e>
 800df2c:	682b      	ldr	r3, [r5, #0]
 800df2e:	b103      	cbz	r3, 800df32 <_write_r+0x1e>
 800df30:	6023      	str	r3, [r4, #0]
 800df32:	bd38      	pop	{r3, r4, r5, pc}
 800df34:	20002448 	.word	0x20002448

0800df38 <__errno>:
 800df38:	4b01      	ldr	r3, [pc, #4]	@ (800df40 <__errno+0x8>)
 800df3a:	6818      	ldr	r0, [r3, #0]
 800df3c:	4770      	bx	lr
 800df3e:	bf00      	nop
 800df40:	2000010c 	.word	0x2000010c

0800df44 <__libc_init_array>:
 800df44:	b570      	push	{r4, r5, r6, lr}
 800df46:	4d0d      	ldr	r5, [pc, #52]	@ (800df7c <__libc_init_array+0x38>)
 800df48:	4c0d      	ldr	r4, [pc, #52]	@ (800df80 <__libc_init_array+0x3c>)
 800df4a:	1b64      	subs	r4, r4, r5
 800df4c:	10a4      	asrs	r4, r4, #2
 800df4e:	2600      	movs	r6, #0
 800df50:	42a6      	cmp	r6, r4
 800df52:	d109      	bne.n	800df68 <__libc_init_array+0x24>
 800df54:	4d0b      	ldr	r5, [pc, #44]	@ (800df84 <__libc_init_array+0x40>)
 800df56:	4c0c      	ldr	r4, [pc, #48]	@ (800df88 <__libc_init_array+0x44>)
 800df58:	f002 fb6c 	bl	8010634 <_init>
 800df5c:	1b64      	subs	r4, r4, r5
 800df5e:	10a4      	asrs	r4, r4, #2
 800df60:	2600      	movs	r6, #0
 800df62:	42a6      	cmp	r6, r4
 800df64:	d105      	bne.n	800df72 <__libc_init_array+0x2e>
 800df66:	bd70      	pop	{r4, r5, r6, pc}
 800df68:	f855 3b04 	ldr.w	r3, [r5], #4
 800df6c:	4798      	blx	r3
 800df6e:	3601      	adds	r6, #1
 800df70:	e7ee      	b.n	800df50 <__libc_init_array+0xc>
 800df72:	f855 3b04 	ldr.w	r3, [r5], #4
 800df76:	4798      	blx	r3
 800df78:	3601      	adds	r6, #1
 800df7a:	e7f2      	b.n	800df62 <__libc_init_array+0x1e>
 800df7c:	08010d80 	.word	0x08010d80
 800df80:	08010d80 	.word	0x08010d80
 800df84:	08010d80 	.word	0x08010d80
 800df88:	08010d84 	.word	0x08010d84

0800df8c <__retarget_lock_init_recursive>:
 800df8c:	4770      	bx	lr

0800df8e <__retarget_lock_acquire_recursive>:
 800df8e:	4770      	bx	lr

0800df90 <__retarget_lock_release_recursive>:
 800df90:	4770      	bx	lr

0800df92 <quorem>:
 800df92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df96:	6903      	ldr	r3, [r0, #16]
 800df98:	690c      	ldr	r4, [r1, #16]
 800df9a:	42a3      	cmp	r3, r4
 800df9c:	4607      	mov	r7, r0
 800df9e:	db7e      	blt.n	800e09e <quorem+0x10c>
 800dfa0:	3c01      	subs	r4, #1
 800dfa2:	f101 0814 	add.w	r8, r1, #20
 800dfa6:	00a3      	lsls	r3, r4, #2
 800dfa8:	f100 0514 	add.w	r5, r0, #20
 800dfac:	9300      	str	r3, [sp, #0]
 800dfae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dfb2:	9301      	str	r3, [sp, #4]
 800dfb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dfb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dfc4:	fbb2 f6f3 	udiv	r6, r2, r3
 800dfc8:	d32e      	bcc.n	800e028 <quorem+0x96>
 800dfca:	f04f 0a00 	mov.w	sl, #0
 800dfce:	46c4      	mov	ip, r8
 800dfd0:	46ae      	mov	lr, r5
 800dfd2:	46d3      	mov	fp, sl
 800dfd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dfd8:	b298      	uxth	r0, r3
 800dfda:	fb06 a000 	mla	r0, r6, r0, sl
 800dfde:	0c02      	lsrs	r2, r0, #16
 800dfe0:	0c1b      	lsrs	r3, r3, #16
 800dfe2:	fb06 2303 	mla	r3, r6, r3, r2
 800dfe6:	f8de 2000 	ldr.w	r2, [lr]
 800dfea:	b280      	uxth	r0, r0
 800dfec:	b292      	uxth	r2, r2
 800dfee:	1a12      	subs	r2, r2, r0
 800dff0:	445a      	add	r2, fp
 800dff2:	f8de 0000 	ldr.w	r0, [lr]
 800dff6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e000:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e004:	b292      	uxth	r2, r2
 800e006:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e00a:	45e1      	cmp	r9, ip
 800e00c:	f84e 2b04 	str.w	r2, [lr], #4
 800e010:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e014:	d2de      	bcs.n	800dfd4 <quorem+0x42>
 800e016:	9b00      	ldr	r3, [sp, #0]
 800e018:	58eb      	ldr	r3, [r5, r3]
 800e01a:	b92b      	cbnz	r3, 800e028 <quorem+0x96>
 800e01c:	9b01      	ldr	r3, [sp, #4]
 800e01e:	3b04      	subs	r3, #4
 800e020:	429d      	cmp	r5, r3
 800e022:	461a      	mov	r2, r3
 800e024:	d32f      	bcc.n	800e086 <quorem+0xf4>
 800e026:	613c      	str	r4, [r7, #16]
 800e028:	4638      	mov	r0, r7
 800e02a:	f001 f97b 	bl	800f324 <__mcmp>
 800e02e:	2800      	cmp	r0, #0
 800e030:	db25      	blt.n	800e07e <quorem+0xec>
 800e032:	4629      	mov	r1, r5
 800e034:	2000      	movs	r0, #0
 800e036:	f858 2b04 	ldr.w	r2, [r8], #4
 800e03a:	f8d1 c000 	ldr.w	ip, [r1]
 800e03e:	fa1f fe82 	uxth.w	lr, r2
 800e042:	fa1f f38c 	uxth.w	r3, ip
 800e046:	eba3 030e 	sub.w	r3, r3, lr
 800e04a:	4403      	add	r3, r0
 800e04c:	0c12      	lsrs	r2, r2, #16
 800e04e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e052:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e056:	b29b      	uxth	r3, r3
 800e058:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e05c:	45c1      	cmp	r9, r8
 800e05e:	f841 3b04 	str.w	r3, [r1], #4
 800e062:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e066:	d2e6      	bcs.n	800e036 <quorem+0xa4>
 800e068:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e06c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e070:	b922      	cbnz	r2, 800e07c <quorem+0xea>
 800e072:	3b04      	subs	r3, #4
 800e074:	429d      	cmp	r5, r3
 800e076:	461a      	mov	r2, r3
 800e078:	d30b      	bcc.n	800e092 <quorem+0x100>
 800e07a:	613c      	str	r4, [r7, #16]
 800e07c:	3601      	adds	r6, #1
 800e07e:	4630      	mov	r0, r6
 800e080:	b003      	add	sp, #12
 800e082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e086:	6812      	ldr	r2, [r2, #0]
 800e088:	3b04      	subs	r3, #4
 800e08a:	2a00      	cmp	r2, #0
 800e08c:	d1cb      	bne.n	800e026 <quorem+0x94>
 800e08e:	3c01      	subs	r4, #1
 800e090:	e7c6      	b.n	800e020 <quorem+0x8e>
 800e092:	6812      	ldr	r2, [r2, #0]
 800e094:	3b04      	subs	r3, #4
 800e096:	2a00      	cmp	r2, #0
 800e098:	d1ef      	bne.n	800e07a <quorem+0xe8>
 800e09a:	3c01      	subs	r4, #1
 800e09c:	e7ea      	b.n	800e074 <quorem+0xe2>
 800e09e:	2000      	movs	r0, #0
 800e0a0:	e7ee      	b.n	800e080 <quorem+0xee>
 800e0a2:	0000      	movs	r0, r0
 800e0a4:	0000      	movs	r0, r0
	...

0800e0a8 <_dtoa_r>:
 800e0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ac:	69c7      	ldr	r7, [r0, #28]
 800e0ae:	b099      	sub	sp, #100	@ 0x64
 800e0b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e0b4:	ec55 4b10 	vmov	r4, r5, d0
 800e0b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e0ba:	9109      	str	r1, [sp, #36]	@ 0x24
 800e0bc:	4683      	mov	fp, r0
 800e0be:	920e      	str	r2, [sp, #56]	@ 0x38
 800e0c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e0c2:	b97f      	cbnz	r7, 800e0e4 <_dtoa_r+0x3c>
 800e0c4:	2010      	movs	r0, #16
 800e0c6:	f000 fdfd 	bl	800ecc4 <malloc>
 800e0ca:	4602      	mov	r2, r0
 800e0cc:	f8cb 001c 	str.w	r0, [fp, #28]
 800e0d0:	b920      	cbnz	r0, 800e0dc <_dtoa_r+0x34>
 800e0d2:	4ba7      	ldr	r3, [pc, #668]	@ (800e370 <_dtoa_r+0x2c8>)
 800e0d4:	21ef      	movs	r1, #239	@ 0xef
 800e0d6:	48a7      	ldr	r0, [pc, #668]	@ (800e374 <_dtoa_r+0x2cc>)
 800e0d8:	f001 fc68 	bl	800f9ac <__assert_func>
 800e0dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e0e0:	6007      	str	r7, [r0, #0]
 800e0e2:	60c7      	str	r7, [r0, #12]
 800e0e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e0e8:	6819      	ldr	r1, [r3, #0]
 800e0ea:	b159      	cbz	r1, 800e104 <_dtoa_r+0x5c>
 800e0ec:	685a      	ldr	r2, [r3, #4]
 800e0ee:	604a      	str	r2, [r1, #4]
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	4093      	lsls	r3, r2
 800e0f4:	608b      	str	r3, [r1, #8]
 800e0f6:	4658      	mov	r0, fp
 800e0f8:	f000 feda 	bl	800eeb0 <_Bfree>
 800e0fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e100:	2200      	movs	r2, #0
 800e102:	601a      	str	r2, [r3, #0]
 800e104:	1e2b      	subs	r3, r5, #0
 800e106:	bfb9      	ittee	lt
 800e108:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e10c:	9303      	strlt	r3, [sp, #12]
 800e10e:	2300      	movge	r3, #0
 800e110:	6033      	strge	r3, [r6, #0]
 800e112:	9f03      	ldr	r7, [sp, #12]
 800e114:	4b98      	ldr	r3, [pc, #608]	@ (800e378 <_dtoa_r+0x2d0>)
 800e116:	bfbc      	itt	lt
 800e118:	2201      	movlt	r2, #1
 800e11a:	6032      	strlt	r2, [r6, #0]
 800e11c:	43bb      	bics	r3, r7
 800e11e:	d112      	bne.n	800e146 <_dtoa_r+0x9e>
 800e120:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e122:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e126:	6013      	str	r3, [r2, #0]
 800e128:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e12c:	4323      	orrs	r3, r4
 800e12e:	f000 854d 	beq.w	800ebcc <_dtoa_r+0xb24>
 800e132:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e134:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e38c <_dtoa_r+0x2e4>
 800e138:	2b00      	cmp	r3, #0
 800e13a:	f000 854f 	beq.w	800ebdc <_dtoa_r+0xb34>
 800e13e:	f10a 0303 	add.w	r3, sl, #3
 800e142:	f000 bd49 	b.w	800ebd8 <_dtoa_r+0xb30>
 800e146:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e14a:	2200      	movs	r2, #0
 800e14c:	ec51 0b17 	vmov	r0, r1, d7
 800e150:	2300      	movs	r3, #0
 800e152:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e156:	f7f2 fcb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800e15a:	4680      	mov	r8, r0
 800e15c:	b158      	cbz	r0, 800e176 <_dtoa_r+0xce>
 800e15e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e160:	2301      	movs	r3, #1
 800e162:	6013      	str	r3, [r2, #0]
 800e164:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e166:	b113      	cbz	r3, 800e16e <_dtoa_r+0xc6>
 800e168:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e16a:	4b84      	ldr	r3, [pc, #528]	@ (800e37c <_dtoa_r+0x2d4>)
 800e16c:	6013      	str	r3, [r2, #0]
 800e16e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e390 <_dtoa_r+0x2e8>
 800e172:	f000 bd33 	b.w	800ebdc <_dtoa_r+0xb34>
 800e176:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e17a:	aa16      	add	r2, sp, #88	@ 0x58
 800e17c:	a917      	add	r1, sp, #92	@ 0x5c
 800e17e:	4658      	mov	r0, fp
 800e180:	f001 f980 	bl	800f484 <__d2b>
 800e184:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e188:	4681      	mov	r9, r0
 800e18a:	2e00      	cmp	r6, #0
 800e18c:	d077      	beq.n	800e27e <_dtoa_r+0x1d6>
 800e18e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e190:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e198:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e19c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e1a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e1a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	4b74      	ldr	r3, [pc, #464]	@ (800e380 <_dtoa_r+0x2d8>)
 800e1ae:	f7f2 f86b 	bl	8000288 <__aeabi_dsub>
 800e1b2:	a369      	add	r3, pc, #420	@ (adr r3, 800e358 <_dtoa_r+0x2b0>)
 800e1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b8:	f7f2 fa1e 	bl	80005f8 <__aeabi_dmul>
 800e1bc:	a368      	add	r3, pc, #416	@ (adr r3, 800e360 <_dtoa_r+0x2b8>)
 800e1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c2:	f7f2 f863 	bl	800028c <__adddf3>
 800e1c6:	4604      	mov	r4, r0
 800e1c8:	4630      	mov	r0, r6
 800e1ca:	460d      	mov	r5, r1
 800e1cc:	f7f2 f9aa 	bl	8000524 <__aeabi_i2d>
 800e1d0:	a365      	add	r3, pc, #404	@ (adr r3, 800e368 <_dtoa_r+0x2c0>)
 800e1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d6:	f7f2 fa0f 	bl	80005f8 <__aeabi_dmul>
 800e1da:	4602      	mov	r2, r0
 800e1dc:	460b      	mov	r3, r1
 800e1de:	4620      	mov	r0, r4
 800e1e0:	4629      	mov	r1, r5
 800e1e2:	f7f2 f853 	bl	800028c <__adddf3>
 800e1e6:	4604      	mov	r4, r0
 800e1e8:	460d      	mov	r5, r1
 800e1ea:	f7f2 fcb5 	bl	8000b58 <__aeabi_d2iz>
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	4607      	mov	r7, r0
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	4629      	mov	r1, r5
 800e1f8:	f7f2 fc70 	bl	8000adc <__aeabi_dcmplt>
 800e1fc:	b140      	cbz	r0, 800e210 <_dtoa_r+0x168>
 800e1fe:	4638      	mov	r0, r7
 800e200:	f7f2 f990 	bl	8000524 <__aeabi_i2d>
 800e204:	4622      	mov	r2, r4
 800e206:	462b      	mov	r3, r5
 800e208:	f7f2 fc5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e20c:	b900      	cbnz	r0, 800e210 <_dtoa_r+0x168>
 800e20e:	3f01      	subs	r7, #1
 800e210:	2f16      	cmp	r7, #22
 800e212:	d851      	bhi.n	800e2b8 <_dtoa_r+0x210>
 800e214:	4b5b      	ldr	r3, [pc, #364]	@ (800e384 <_dtoa_r+0x2dc>)
 800e216:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e222:	f7f2 fc5b 	bl	8000adc <__aeabi_dcmplt>
 800e226:	2800      	cmp	r0, #0
 800e228:	d048      	beq.n	800e2bc <_dtoa_r+0x214>
 800e22a:	3f01      	subs	r7, #1
 800e22c:	2300      	movs	r3, #0
 800e22e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e230:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e232:	1b9b      	subs	r3, r3, r6
 800e234:	1e5a      	subs	r2, r3, #1
 800e236:	bf44      	itt	mi
 800e238:	f1c3 0801 	rsbmi	r8, r3, #1
 800e23c:	2300      	movmi	r3, #0
 800e23e:	9208      	str	r2, [sp, #32]
 800e240:	bf54      	ite	pl
 800e242:	f04f 0800 	movpl.w	r8, #0
 800e246:	9308      	strmi	r3, [sp, #32]
 800e248:	2f00      	cmp	r7, #0
 800e24a:	db39      	blt.n	800e2c0 <_dtoa_r+0x218>
 800e24c:	9b08      	ldr	r3, [sp, #32]
 800e24e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e250:	443b      	add	r3, r7
 800e252:	9308      	str	r3, [sp, #32]
 800e254:	2300      	movs	r3, #0
 800e256:	930a      	str	r3, [sp, #40]	@ 0x28
 800e258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e25a:	2b09      	cmp	r3, #9
 800e25c:	d864      	bhi.n	800e328 <_dtoa_r+0x280>
 800e25e:	2b05      	cmp	r3, #5
 800e260:	bfc4      	itt	gt
 800e262:	3b04      	subgt	r3, #4
 800e264:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e268:	f1a3 0302 	sub.w	r3, r3, #2
 800e26c:	bfcc      	ite	gt
 800e26e:	2400      	movgt	r4, #0
 800e270:	2401      	movle	r4, #1
 800e272:	2b03      	cmp	r3, #3
 800e274:	d863      	bhi.n	800e33e <_dtoa_r+0x296>
 800e276:	e8df f003 	tbb	[pc, r3]
 800e27a:	372a      	.short	0x372a
 800e27c:	5535      	.short	0x5535
 800e27e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e282:	441e      	add	r6, r3
 800e284:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e288:	2b20      	cmp	r3, #32
 800e28a:	bfc1      	itttt	gt
 800e28c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e290:	409f      	lslgt	r7, r3
 800e292:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e296:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e29a:	bfd6      	itet	le
 800e29c:	f1c3 0320 	rsble	r3, r3, #32
 800e2a0:	ea47 0003 	orrgt.w	r0, r7, r3
 800e2a4:	fa04 f003 	lslle.w	r0, r4, r3
 800e2a8:	f7f2 f92c 	bl	8000504 <__aeabi_ui2d>
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e2b2:	3e01      	subs	r6, #1
 800e2b4:	9214      	str	r2, [sp, #80]	@ 0x50
 800e2b6:	e777      	b.n	800e1a8 <_dtoa_r+0x100>
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	e7b8      	b.n	800e22e <_dtoa_r+0x186>
 800e2bc:	9012      	str	r0, [sp, #72]	@ 0x48
 800e2be:	e7b7      	b.n	800e230 <_dtoa_r+0x188>
 800e2c0:	427b      	negs	r3, r7
 800e2c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	eba8 0807 	sub.w	r8, r8, r7
 800e2ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e2cc:	e7c4      	b.n	800e258 <_dtoa_r+0x1b0>
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e2d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	dc35      	bgt.n	800e344 <_dtoa_r+0x29c>
 800e2d8:	2301      	movs	r3, #1
 800e2da:	9300      	str	r3, [sp, #0]
 800e2dc:	9307      	str	r3, [sp, #28]
 800e2de:	461a      	mov	r2, r3
 800e2e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e2e2:	e00b      	b.n	800e2fc <_dtoa_r+0x254>
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	e7f3      	b.n	800e2d0 <_dtoa_r+0x228>
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e2ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2ee:	18fb      	adds	r3, r7, r3
 800e2f0:	9300      	str	r3, [sp, #0]
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	9307      	str	r3, [sp, #28]
 800e2f8:	bfb8      	it	lt
 800e2fa:	2301      	movlt	r3, #1
 800e2fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e300:	2100      	movs	r1, #0
 800e302:	2204      	movs	r2, #4
 800e304:	f102 0514 	add.w	r5, r2, #20
 800e308:	429d      	cmp	r5, r3
 800e30a:	d91f      	bls.n	800e34c <_dtoa_r+0x2a4>
 800e30c:	6041      	str	r1, [r0, #4]
 800e30e:	4658      	mov	r0, fp
 800e310:	f000 fd8e 	bl	800ee30 <_Balloc>
 800e314:	4682      	mov	sl, r0
 800e316:	2800      	cmp	r0, #0
 800e318:	d13c      	bne.n	800e394 <_dtoa_r+0x2ec>
 800e31a:	4b1b      	ldr	r3, [pc, #108]	@ (800e388 <_dtoa_r+0x2e0>)
 800e31c:	4602      	mov	r2, r0
 800e31e:	f240 11af 	movw	r1, #431	@ 0x1af
 800e322:	e6d8      	b.n	800e0d6 <_dtoa_r+0x2e>
 800e324:	2301      	movs	r3, #1
 800e326:	e7e0      	b.n	800e2ea <_dtoa_r+0x242>
 800e328:	2401      	movs	r4, #1
 800e32a:	2300      	movs	r3, #0
 800e32c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e32e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e330:	f04f 33ff 	mov.w	r3, #4294967295
 800e334:	9300      	str	r3, [sp, #0]
 800e336:	9307      	str	r3, [sp, #28]
 800e338:	2200      	movs	r2, #0
 800e33a:	2312      	movs	r3, #18
 800e33c:	e7d0      	b.n	800e2e0 <_dtoa_r+0x238>
 800e33e:	2301      	movs	r3, #1
 800e340:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e342:	e7f5      	b.n	800e330 <_dtoa_r+0x288>
 800e344:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	9307      	str	r3, [sp, #28]
 800e34a:	e7d7      	b.n	800e2fc <_dtoa_r+0x254>
 800e34c:	3101      	adds	r1, #1
 800e34e:	0052      	lsls	r2, r2, #1
 800e350:	e7d8      	b.n	800e304 <_dtoa_r+0x25c>
 800e352:	bf00      	nop
 800e354:	f3af 8000 	nop.w
 800e358:	636f4361 	.word	0x636f4361
 800e35c:	3fd287a7 	.word	0x3fd287a7
 800e360:	8b60c8b3 	.word	0x8b60c8b3
 800e364:	3fc68a28 	.word	0x3fc68a28
 800e368:	509f79fb 	.word	0x509f79fb
 800e36c:	3fd34413 	.word	0x3fd34413
 800e370:	08010a45 	.word	0x08010a45
 800e374:	08010a5c 	.word	0x08010a5c
 800e378:	7ff00000 	.word	0x7ff00000
 800e37c:	08010a15 	.word	0x08010a15
 800e380:	3ff80000 	.word	0x3ff80000
 800e384:	08010b58 	.word	0x08010b58
 800e388:	08010ab4 	.word	0x08010ab4
 800e38c:	08010a41 	.word	0x08010a41
 800e390:	08010a14 	.word	0x08010a14
 800e394:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e398:	6018      	str	r0, [r3, #0]
 800e39a:	9b07      	ldr	r3, [sp, #28]
 800e39c:	2b0e      	cmp	r3, #14
 800e39e:	f200 80a4 	bhi.w	800e4ea <_dtoa_r+0x442>
 800e3a2:	2c00      	cmp	r4, #0
 800e3a4:	f000 80a1 	beq.w	800e4ea <_dtoa_r+0x442>
 800e3a8:	2f00      	cmp	r7, #0
 800e3aa:	dd33      	ble.n	800e414 <_dtoa_r+0x36c>
 800e3ac:	4bad      	ldr	r3, [pc, #692]	@ (800e664 <_dtoa_r+0x5bc>)
 800e3ae:	f007 020f 	and.w	r2, r7, #15
 800e3b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3b6:	ed93 7b00 	vldr	d7, [r3]
 800e3ba:	05f8      	lsls	r0, r7, #23
 800e3bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e3c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e3c4:	d516      	bpl.n	800e3f4 <_dtoa_r+0x34c>
 800e3c6:	4ba8      	ldr	r3, [pc, #672]	@ (800e668 <_dtoa_r+0x5c0>)
 800e3c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e3cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e3d0:	f7f2 fa3c 	bl	800084c <__aeabi_ddiv>
 800e3d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3d8:	f004 040f 	and.w	r4, r4, #15
 800e3dc:	2603      	movs	r6, #3
 800e3de:	4da2      	ldr	r5, [pc, #648]	@ (800e668 <_dtoa_r+0x5c0>)
 800e3e0:	b954      	cbnz	r4, 800e3f8 <_dtoa_r+0x350>
 800e3e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3ea:	f7f2 fa2f 	bl	800084c <__aeabi_ddiv>
 800e3ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3f2:	e028      	b.n	800e446 <_dtoa_r+0x39e>
 800e3f4:	2602      	movs	r6, #2
 800e3f6:	e7f2      	b.n	800e3de <_dtoa_r+0x336>
 800e3f8:	07e1      	lsls	r1, r4, #31
 800e3fa:	d508      	bpl.n	800e40e <_dtoa_r+0x366>
 800e3fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e400:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e404:	f7f2 f8f8 	bl	80005f8 <__aeabi_dmul>
 800e408:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e40c:	3601      	adds	r6, #1
 800e40e:	1064      	asrs	r4, r4, #1
 800e410:	3508      	adds	r5, #8
 800e412:	e7e5      	b.n	800e3e0 <_dtoa_r+0x338>
 800e414:	f000 80d2 	beq.w	800e5bc <_dtoa_r+0x514>
 800e418:	427c      	negs	r4, r7
 800e41a:	4b92      	ldr	r3, [pc, #584]	@ (800e664 <_dtoa_r+0x5bc>)
 800e41c:	4d92      	ldr	r5, [pc, #584]	@ (800e668 <_dtoa_r+0x5c0>)
 800e41e:	f004 020f 	and.w	r2, r4, #15
 800e422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e42e:	f7f2 f8e3 	bl	80005f8 <__aeabi_dmul>
 800e432:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e436:	1124      	asrs	r4, r4, #4
 800e438:	2300      	movs	r3, #0
 800e43a:	2602      	movs	r6, #2
 800e43c:	2c00      	cmp	r4, #0
 800e43e:	f040 80b2 	bne.w	800e5a6 <_dtoa_r+0x4fe>
 800e442:	2b00      	cmp	r3, #0
 800e444:	d1d3      	bne.n	800e3ee <_dtoa_r+0x346>
 800e446:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e448:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	f000 80b7 	beq.w	800e5c0 <_dtoa_r+0x518>
 800e452:	4b86      	ldr	r3, [pc, #536]	@ (800e66c <_dtoa_r+0x5c4>)
 800e454:	2200      	movs	r2, #0
 800e456:	4620      	mov	r0, r4
 800e458:	4629      	mov	r1, r5
 800e45a:	f7f2 fb3f 	bl	8000adc <__aeabi_dcmplt>
 800e45e:	2800      	cmp	r0, #0
 800e460:	f000 80ae 	beq.w	800e5c0 <_dtoa_r+0x518>
 800e464:	9b07      	ldr	r3, [sp, #28]
 800e466:	2b00      	cmp	r3, #0
 800e468:	f000 80aa 	beq.w	800e5c0 <_dtoa_r+0x518>
 800e46c:	9b00      	ldr	r3, [sp, #0]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	dd37      	ble.n	800e4e2 <_dtoa_r+0x43a>
 800e472:	1e7b      	subs	r3, r7, #1
 800e474:	9304      	str	r3, [sp, #16]
 800e476:	4620      	mov	r0, r4
 800e478:	4b7d      	ldr	r3, [pc, #500]	@ (800e670 <_dtoa_r+0x5c8>)
 800e47a:	2200      	movs	r2, #0
 800e47c:	4629      	mov	r1, r5
 800e47e:	f7f2 f8bb 	bl	80005f8 <__aeabi_dmul>
 800e482:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e486:	9c00      	ldr	r4, [sp, #0]
 800e488:	3601      	adds	r6, #1
 800e48a:	4630      	mov	r0, r6
 800e48c:	f7f2 f84a 	bl	8000524 <__aeabi_i2d>
 800e490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e494:	f7f2 f8b0 	bl	80005f8 <__aeabi_dmul>
 800e498:	4b76      	ldr	r3, [pc, #472]	@ (800e674 <_dtoa_r+0x5cc>)
 800e49a:	2200      	movs	r2, #0
 800e49c:	f7f1 fef6 	bl	800028c <__adddf3>
 800e4a0:	4605      	mov	r5, r0
 800e4a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e4a6:	2c00      	cmp	r4, #0
 800e4a8:	f040 808d 	bne.w	800e5c6 <_dtoa_r+0x51e>
 800e4ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4b0:	4b71      	ldr	r3, [pc, #452]	@ (800e678 <_dtoa_r+0x5d0>)
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	f7f1 fee8 	bl	8000288 <__aeabi_dsub>
 800e4b8:	4602      	mov	r2, r0
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e4c0:	462a      	mov	r2, r5
 800e4c2:	4633      	mov	r3, r6
 800e4c4:	f7f2 fb28 	bl	8000b18 <__aeabi_dcmpgt>
 800e4c8:	2800      	cmp	r0, #0
 800e4ca:	f040 828b 	bne.w	800e9e4 <_dtoa_r+0x93c>
 800e4ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4d2:	462a      	mov	r2, r5
 800e4d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e4d8:	f7f2 fb00 	bl	8000adc <__aeabi_dcmplt>
 800e4dc:	2800      	cmp	r0, #0
 800e4de:	f040 8128 	bne.w	800e732 <_dtoa_r+0x68a>
 800e4e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e4e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e4ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	f2c0 815a 	blt.w	800e7a6 <_dtoa_r+0x6fe>
 800e4f2:	2f0e      	cmp	r7, #14
 800e4f4:	f300 8157 	bgt.w	800e7a6 <_dtoa_r+0x6fe>
 800e4f8:	4b5a      	ldr	r3, [pc, #360]	@ (800e664 <_dtoa_r+0x5bc>)
 800e4fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e4fe:	ed93 7b00 	vldr	d7, [r3]
 800e502:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e504:	2b00      	cmp	r3, #0
 800e506:	ed8d 7b00 	vstr	d7, [sp]
 800e50a:	da03      	bge.n	800e514 <_dtoa_r+0x46c>
 800e50c:	9b07      	ldr	r3, [sp, #28]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	f340 8101 	ble.w	800e716 <_dtoa_r+0x66e>
 800e514:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e518:	4656      	mov	r6, sl
 800e51a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e51e:	4620      	mov	r0, r4
 800e520:	4629      	mov	r1, r5
 800e522:	f7f2 f993 	bl	800084c <__aeabi_ddiv>
 800e526:	f7f2 fb17 	bl	8000b58 <__aeabi_d2iz>
 800e52a:	4680      	mov	r8, r0
 800e52c:	f7f1 fffa 	bl	8000524 <__aeabi_i2d>
 800e530:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e534:	f7f2 f860 	bl	80005f8 <__aeabi_dmul>
 800e538:	4602      	mov	r2, r0
 800e53a:	460b      	mov	r3, r1
 800e53c:	4620      	mov	r0, r4
 800e53e:	4629      	mov	r1, r5
 800e540:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e544:	f7f1 fea0 	bl	8000288 <__aeabi_dsub>
 800e548:	f806 4b01 	strb.w	r4, [r6], #1
 800e54c:	9d07      	ldr	r5, [sp, #28]
 800e54e:	eba6 040a 	sub.w	r4, r6, sl
 800e552:	42a5      	cmp	r5, r4
 800e554:	4602      	mov	r2, r0
 800e556:	460b      	mov	r3, r1
 800e558:	f040 8117 	bne.w	800e78a <_dtoa_r+0x6e2>
 800e55c:	f7f1 fe96 	bl	800028c <__adddf3>
 800e560:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e564:	4604      	mov	r4, r0
 800e566:	460d      	mov	r5, r1
 800e568:	f7f2 fad6 	bl	8000b18 <__aeabi_dcmpgt>
 800e56c:	2800      	cmp	r0, #0
 800e56e:	f040 80f9 	bne.w	800e764 <_dtoa_r+0x6bc>
 800e572:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e576:	4620      	mov	r0, r4
 800e578:	4629      	mov	r1, r5
 800e57a:	f7f2 faa5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e57e:	b118      	cbz	r0, 800e588 <_dtoa_r+0x4e0>
 800e580:	f018 0f01 	tst.w	r8, #1
 800e584:	f040 80ee 	bne.w	800e764 <_dtoa_r+0x6bc>
 800e588:	4649      	mov	r1, r9
 800e58a:	4658      	mov	r0, fp
 800e58c:	f000 fc90 	bl	800eeb0 <_Bfree>
 800e590:	2300      	movs	r3, #0
 800e592:	7033      	strb	r3, [r6, #0]
 800e594:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e596:	3701      	adds	r7, #1
 800e598:	601f      	str	r7, [r3, #0]
 800e59a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	f000 831d 	beq.w	800ebdc <_dtoa_r+0xb34>
 800e5a2:	601e      	str	r6, [r3, #0]
 800e5a4:	e31a      	b.n	800ebdc <_dtoa_r+0xb34>
 800e5a6:	07e2      	lsls	r2, r4, #31
 800e5a8:	d505      	bpl.n	800e5b6 <_dtoa_r+0x50e>
 800e5aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e5ae:	f7f2 f823 	bl	80005f8 <__aeabi_dmul>
 800e5b2:	3601      	adds	r6, #1
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	1064      	asrs	r4, r4, #1
 800e5b8:	3508      	adds	r5, #8
 800e5ba:	e73f      	b.n	800e43c <_dtoa_r+0x394>
 800e5bc:	2602      	movs	r6, #2
 800e5be:	e742      	b.n	800e446 <_dtoa_r+0x39e>
 800e5c0:	9c07      	ldr	r4, [sp, #28]
 800e5c2:	9704      	str	r7, [sp, #16]
 800e5c4:	e761      	b.n	800e48a <_dtoa_r+0x3e2>
 800e5c6:	4b27      	ldr	r3, [pc, #156]	@ (800e664 <_dtoa_r+0x5bc>)
 800e5c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e5ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e5ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e5d2:	4454      	add	r4, sl
 800e5d4:	2900      	cmp	r1, #0
 800e5d6:	d053      	beq.n	800e680 <_dtoa_r+0x5d8>
 800e5d8:	4928      	ldr	r1, [pc, #160]	@ (800e67c <_dtoa_r+0x5d4>)
 800e5da:	2000      	movs	r0, #0
 800e5dc:	f7f2 f936 	bl	800084c <__aeabi_ddiv>
 800e5e0:	4633      	mov	r3, r6
 800e5e2:	462a      	mov	r2, r5
 800e5e4:	f7f1 fe50 	bl	8000288 <__aeabi_dsub>
 800e5e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e5ec:	4656      	mov	r6, sl
 800e5ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5f2:	f7f2 fab1 	bl	8000b58 <__aeabi_d2iz>
 800e5f6:	4605      	mov	r5, r0
 800e5f8:	f7f1 ff94 	bl	8000524 <__aeabi_i2d>
 800e5fc:	4602      	mov	r2, r0
 800e5fe:	460b      	mov	r3, r1
 800e600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e604:	f7f1 fe40 	bl	8000288 <__aeabi_dsub>
 800e608:	3530      	adds	r5, #48	@ 0x30
 800e60a:	4602      	mov	r2, r0
 800e60c:	460b      	mov	r3, r1
 800e60e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e612:	f806 5b01 	strb.w	r5, [r6], #1
 800e616:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e61a:	f7f2 fa5f 	bl	8000adc <__aeabi_dcmplt>
 800e61e:	2800      	cmp	r0, #0
 800e620:	d171      	bne.n	800e706 <_dtoa_r+0x65e>
 800e622:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e626:	4911      	ldr	r1, [pc, #68]	@ (800e66c <_dtoa_r+0x5c4>)
 800e628:	2000      	movs	r0, #0
 800e62a:	f7f1 fe2d 	bl	8000288 <__aeabi_dsub>
 800e62e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e632:	f7f2 fa53 	bl	8000adc <__aeabi_dcmplt>
 800e636:	2800      	cmp	r0, #0
 800e638:	f040 8095 	bne.w	800e766 <_dtoa_r+0x6be>
 800e63c:	42a6      	cmp	r6, r4
 800e63e:	f43f af50 	beq.w	800e4e2 <_dtoa_r+0x43a>
 800e642:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e646:	4b0a      	ldr	r3, [pc, #40]	@ (800e670 <_dtoa_r+0x5c8>)
 800e648:	2200      	movs	r2, #0
 800e64a:	f7f1 ffd5 	bl	80005f8 <__aeabi_dmul>
 800e64e:	4b08      	ldr	r3, [pc, #32]	@ (800e670 <_dtoa_r+0x5c8>)
 800e650:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e654:	2200      	movs	r2, #0
 800e656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e65a:	f7f1 ffcd 	bl	80005f8 <__aeabi_dmul>
 800e65e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e662:	e7c4      	b.n	800e5ee <_dtoa_r+0x546>
 800e664:	08010b58 	.word	0x08010b58
 800e668:	08010b30 	.word	0x08010b30
 800e66c:	3ff00000 	.word	0x3ff00000
 800e670:	40240000 	.word	0x40240000
 800e674:	401c0000 	.word	0x401c0000
 800e678:	40140000 	.word	0x40140000
 800e67c:	3fe00000 	.word	0x3fe00000
 800e680:	4631      	mov	r1, r6
 800e682:	4628      	mov	r0, r5
 800e684:	f7f1 ffb8 	bl	80005f8 <__aeabi_dmul>
 800e688:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e68c:	9415      	str	r4, [sp, #84]	@ 0x54
 800e68e:	4656      	mov	r6, sl
 800e690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e694:	f7f2 fa60 	bl	8000b58 <__aeabi_d2iz>
 800e698:	4605      	mov	r5, r0
 800e69a:	f7f1 ff43 	bl	8000524 <__aeabi_i2d>
 800e69e:	4602      	mov	r2, r0
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6a6:	f7f1 fdef 	bl	8000288 <__aeabi_dsub>
 800e6aa:	3530      	adds	r5, #48	@ 0x30
 800e6ac:	f806 5b01 	strb.w	r5, [r6], #1
 800e6b0:	4602      	mov	r2, r0
 800e6b2:	460b      	mov	r3, r1
 800e6b4:	42a6      	cmp	r6, r4
 800e6b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e6ba:	f04f 0200 	mov.w	r2, #0
 800e6be:	d124      	bne.n	800e70a <_dtoa_r+0x662>
 800e6c0:	4bac      	ldr	r3, [pc, #688]	@ (800e974 <_dtoa_r+0x8cc>)
 800e6c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e6c6:	f7f1 fde1 	bl	800028c <__adddf3>
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	460b      	mov	r3, r1
 800e6ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6d2:	f7f2 fa21 	bl	8000b18 <__aeabi_dcmpgt>
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	d145      	bne.n	800e766 <_dtoa_r+0x6be>
 800e6da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e6de:	49a5      	ldr	r1, [pc, #660]	@ (800e974 <_dtoa_r+0x8cc>)
 800e6e0:	2000      	movs	r0, #0
 800e6e2:	f7f1 fdd1 	bl	8000288 <__aeabi_dsub>
 800e6e6:	4602      	mov	r2, r0
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6ee:	f7f2 f9f5 	bl	8000adc <__aeabi_dcmplt>
 800e6f2:	2800      	cmp	r0, #0
 800e6f4:	f43f aef5 	beq.w	800e4e2 <_dtoa_r+0x43a>
 800e6f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e6fa:	1e73      	subs	r3, r6, #1
 800e6fc:	9315      	str	r3, [sp, #84]	@ 0x54
 800e6fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e702:	2b30      	cmp	r3, #48	@ 0x30
 800e704:	d0f8      	beq.n	800e6f8 <_dtoa_r+0x650>
 800e706:	9f04      	ldr	r7, [sp, #16]
 800e708:	e73e      	b.n	800e588 <_dtoa_r+0x4e0>
 800e70a:	4b9b      	ldr	r3, [pc, #620]	@ (800e978 <_dtoa_r+0x8d0>)
 800e70c:	f7f1 ff74 	bl	80005f8 <__aeabi_dmul>
 800e710:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e714:	e7bc      	b.n	800e690 <_dtoa_r+0x5e8>
 800e716:	d10c      	bne.n	800e732 <_dtoa_r+0x68a>
 800e718:	4b98      	ldr	r3, [pc, #608]	@ (800e97c <_dtoa_r+0x8d4>)
 800e71a:	2200      	movs	r2, #0
 800e71c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e720:	f7f1 ff6a 	bl	80005f8 <__aeabi_dmul>
 800e724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e728:	f7f2 f9ec 	bl	8000b04 <__aeabi_dcmpge>
 800e72c:	2800      	cmp	r0, #0
 800e72e:	f000 8157 	beq.w	800e9e0 <_dtoa_r+0x938>
 800e732:	2400      	movs	r4, #0
 800e734:	4625      	mov	r5, r4
 800e736:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e738:	43db      	mvns	r3, r3
 800e73a:	9304      	str	r3, [sp, #16]
 800e73c:	4656      	mov	r6, sl
 800e73e:	2700      	movs	r7, #0
 800e740:	4621      	mov	r1, r4
 800e742:	4658      	mov	r0, fp
 800e744:	f000 fbb4 	bl	800eeb0 <_Bfree>
 800e748:	2d00      	cmp	r5, #0
 800e74a:	d0dc      	beq.n	800e706 <_dtoa_r+0x65e>
 800e74c:	b12f      	cbz	r7, 800e75a <_dtoa_r+0x6b2>
 800e74e:	42af      	cmp	r7, r5
 800e750:	d003      	beq.n	800e75a <_dtoa_r+0x6b2>
 800e752:	4639      	mov	r1, r7
 800e754:	4658      	mov	r0, fp
 800e756:	f000 fbab 	bl	800eeb0 <_Bfree>
 800e75a:	4629      	mov	r1, r5
 800e75c:	4658      	mov	r0, fp
 800e75e:	f000 fba7 	bl	800eeb0 <_Bfree>
 800e762:	e7d0      	b.n	800e706 <_dtoa_r+0x65e>
 800e764:	9704      	str	r7, [sp, #16]
 800e766:	4633      	mov	r3, r6
 800e768:	461e      	mov	r6, r3
 800e76a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e76e:	2a39      	cmp	r2, #57	@ 0x39
 800e770:	d107      	bne.n	800e782 <_dtoa_r+0x6da>
 800e772:	459a      	cmp	sl, r3
 800e774:	d1f8      	bne.n	800e768 <_dtoa_r+0x6c0>
 800e776:	9a04      	ldr	r2, [sp, #16]
 800e778:	3201      	adds	r2, #1
 800e77a:	9204      	str	r2, [sp, #16]
 800e77c:	2230      	movs	r2, #48	@ 0x30
 800e77e:	f88a 2000 	strb.w	r2, [sl]
 800e782:	781a      	ldrb	r2, [r3, #0]
 800e784:	3201      	adds	r2, #1
 800e786:	701a      	strb	r2, [r3, #0]
 800e788:	e7bd      	b.n	800e706 <_dtoa_r+0x65e>
 800e78a:	4b7b      	ldr	r3, [pc, #492]	@ (800e978 <_dtoa_r+0x8d0>)
 800e78c:	2200      	movs	r2, #0
 800e78e:	f7f1 ff33 	bl	80005f8 <__aeabi_dmul>
 800e792:	2200      	movs	r2, #0
 800e794:	2300      	movs	r3, #0
 800e796:	4604      	mov	r4, r0
 800e798:	460d      	mov	r5, r1
 800e79a:	f7f2 f995 	bl	8000ac8 <__aeabi_dcmpeq>
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	f43f aebb 	beq.w	800e51a <_dtoa_r+0x472>
 800e7a4:	e6f0      	b.n	800e588 <_dtoa_r+0x4e0>
 800e7a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e7a8:	2a00      	cmp	r2, #0
 800e7aa:	f000 80db 	beq.w	800e964 <_dtoa_r+0x8bc>
 800e7ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7b0:	2a01      	cmp	r2, #1
 800e7b2:	f300 80bf 	bgt.w	800e934 <_dtoa_r+0x88c>
 800e7b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e7b8:	2a00      	cmp	r2, #0
 800e7ba:	f000 80b7 	beq.w	800e92c <_dtoa_r+0x884>
 800e7be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e7c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e7c4:	4646      	mov	r6, r8
 800e7c6:	9a08      	ldr	r2, [sp, #32]
 800e7c8:	2101      	movs	r1, #1
 800e7ca:	441a      	add	r2, r3
 800e7cc:	4658      	mov	r0, fp
 800e7ce:	4498      	add	r8, r3
 800e7d0:	9208      	str	r2, [sp, #32]
 800e7d2:	f000 fc21 	bl	800f018 <__i2b>
 800e7d6:	4605      	mov	r5, r0
 800e7d8:	b15e      	cbz	r6, 800e7f2 <_dtoa_r+0x74a>
 800e7da:	9b08      	ldr	r3, [sp, #32]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	dd08      	ble.n	800e7f2 <_dtoa_r+0x74a>
 800e7e0:	42b3      	cmp	r3, r6
 800e7e2:	9a08      	ldr	r2, [sp, #32]
 800e7e4:	bfa8      	it	ge
 800e7e6:	4633      	movge	r3, r6
 800e7e8:	eba8 0803 	sub.w	r8, r8, r3
 800e7ec:	1af6      	subs	r6, r6, r3
 800e7ee:	1ad3      	subs	r3, r2, r3
 800e7f0:	9308      	str	r3, [sp, #32]
 800e7f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7f4:	b1f3      	cbz	r3, 800e834 <_dtoa_r+0x78c>
 800e7f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	f000 80b7 	beq.w	800e96c <_dtoa_r+0x8c4>
 800e7fe:	b18c      	cbz	r4, 800e824 <_dtoa_r+0x77c>
 800e800:	4629      	mov	r1, r5
 800e802:	4622      	mov	r2, r4
 800e804:	4658      	mov	r0, fp
 800e806:	f000 fcc7 	bl	800f198 <__pow5mult>
 800e80a:	464a      	mov	r2, r9
 800e80c:	4601      	mov	r1, r0
 800e80e:	4605      	mov	r5, r0
 800e810:	4658      	mov	r0, fp
 800e812:	f000 fc17 	bl	800f044 <__multiply>
 800e816:	4649      	mov	r1, r9
 800e818:	9004      	str	r0, [sp, #16]
 800e81a:	4658      	mov	r0, fp
 800e81c:	f000 fb48 	bl	800eeb0 <_Bfree>
 800e820:	9b04      	ldr	r3, [sp, #16]
 800e822:	4699      	mov	r9, r3
 800e824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e826:	1b1a      	subs	r2, r3, r4
 800e828:	d004      	beq.n	800e834 <_dtoa_r+0x78c>
 800e82a:	4649      	mov	r1, r9
 800e82c:	4658      	mov	r0, fp
 800e82e:	f000 fcb3 	bl	800f198 <__pow5mult>
 800e832:	4681      	mov	r9, r0
 800e834:	2101      	movs	r1, #1
 800e836:	4658      	mov	r0, fp
 800e838:	f000 fbee 	bl	800f018 <__i2b>
 800e83c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e83e:	4604      	mov	r4, r0
 800e840:	2b00      	cmp	r3, #0
 800e842:	f000 81cf 	beq.w	800ebe4 <_dtoa_r+0xb3c>
 800e846:	461a      	mov	r2, r3
 800e848:	4601      	mov	r1, r0
 800e84a:	4658      	mov	r0, fp
 800e84c:	f000 fca4 	bl	800f198 <__pow5mult>
 800e850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e852:	2b01      	cmp	r3, #1
 800e854:	4604      	mov	r4, r0
 800e856:	f300 8095 	bgt.w	800e984 <_dtoa_r+0x8dc>
 800e85a:	9b02      	ldr	r3, [sp, #8]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	f040 8087 	bne.w	800e970 <_dtoa_r+0x8c8>
 800e862:	9b03      	ldr	r3, [sp, #12]
 800e864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e868:	2b00      	cmp	r3, #0
 800e86a:	f040 8089 	bne.w	800e980 <_dtoa_r+0x8d8>
 800e86e:	9b03      	ldr	r3, [sp, #12]
 800e870:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e874:	0d1b      	lsrs	r3, r3, #20
 800e876:	051b      	lsls	r3, r3, #20
 800e878:	b12b      	cbz	r3, 800e886 <_dtoa_r+0x7de>
 800e87a:	9b08      	ldr	r3, [sp, #32]
 800e87c:	3301      	adds	r3, #1
 800e87e:	9308      	str	r3, [sp, #32]
 800e880:	f108 0801 	add.w	r8, r8, #1
 800e884:	2301      	movs	r3, #1
 800e886:	930a      	str	r3, [sp, #40]	@ 0x28
 800e888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	f000 81b0 	beq.w	800ebf0 <_dtoa_r+0xb48>
 800e890:	6923      	ldr	r3, [r4, #16]
 800e892:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e896:	6918      	ldr	r0, [r3, #16]
 800e898:	f000 fb72 	bl	800ef80 <__hi0bits>
 800e89c:	f1c0 0020 	rsb	r0, r0, #32
 800e8a0:	9b08      	ldr	r3, [sp, #32]
 800e8a2:	4418      	add	r0, r3
 800e8a4:	f010 001f 	ands.w	r0, r0, #31
 800e8a8:	d077      	beq.n	800e99a <_dtoa_r+0x8f2>
 800e8aa:	f1c0 0320 	rsb	r3, r0, #32
 800e8ae:	2b04      	cmp	r3, #4
 800e8b0:	dd6b      	ble.n	800e98a <_dtoa_r+0x8e2>
 800e8b2:	9b08      	ldr	r3, [sp, #32]
 800e8b4:	f1c0 001c 	rsb	r0, r0, #28
 800e8b8:	4403      	add	r3, r0
 800e8ba:	4480      	add	r8, r0
 800e8bc:	4406      	add	r6, r0
 800e8be:	9308      	str	r3, [sp, #32]
 800e8c0:	f1b8 0f00 	cmp.w	r8, #0
 800e8c4:	dd05      	ble.n	800e8d2 <_dtoa_r+0x82a>
 800e8c6:	4649      	mov	r1, r9
 800e8c8:	4642      	mov	r2, r8
 800e8ca:	4658      	mov	r0, fp
 800e8cc:	f000 fcbe 	bl	800f24c <__lshift>
 800e8d0:	4681      	mov	r9, r0
 800e8d2:	9b08      	ldr	r3, [sp, #32]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	dd05      	ble.n	800e8e4 <_dtoa_r+0x83c>
 800e8d8:	4621      	mov	r1, r4
 800e8da:	461a      	mov	r2, r3
 800e8dc:	4658      	mov	r0, fp
 800e8de:	f000 fcb5 	bl	800f24c <__lshift>
 800e8e2:	4604      	mov	r4, r0
 800e8e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d059      	beq.n	800e99e <_dtoa_r+0x8f6>
 800e8ea:	4621      	mov	r1, r4
 800e8ec:	4648      	mov	r0, r9
 800e8ee:	f000 fd19 	bl	800f324 <__mcmp>
 800e8f2:	2800      	cmp	r0, #0
 800e8f4:	da53      	bge.n	800e99e <_dtoa_r+0x8f6>
 800e8f6:	1e7b      	subs	r3, r7, #1
 800e8f8:	9304      	str	r3, [sp, #16]
 800e8fa:	4649      	mov	r1, r9
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	220a      	movs	r2, #10
 800e900:	4658      	mov	r0, fp
 800e902:	f000 faf7 	bl	800eef4 <__multadd>
 800e906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e908:	4681      	mov	r9, r0
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	f000 8172 	beq.w	800ebf4 <_dtoa_r+0xb4c>
 800e910:	2300      	movs	r3, #0
 800e912:	4629      	mov	r1, r5
 800e914:	220a      	movs	r2, #10
 800e916:	4658      	mov	r0, fp
 800e918:	f000 faec 	bl	800eef4 <__multadd>
 800e91c:	9b00      	ldr	r3, [sp, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	4605      	mov	r5, r0
 800e922:	dc67      	bgt.n	800e9f4 <_dtoa_r+0x94c>
 800e924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e926:	2b02      	cmp	r3, #2
 800e928:	dc41      	bgt.n	800e9ae <_dtoa_r+0x906>
 800e92a:	e063      	b.n	800e9f4 <_dtoa_r+0x94c>
 800e92c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e92e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e932:	e746      	b.n	800e7c2 <_dtoa_r+0x71a>
 800e934:	9b07      	ldr	r3, [sp, #28]
 800e936:	1e5c      	subs	r4, r3, #1
 800e938:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e93a:	42a3      	cmp	r3, r4
 800e93c:	bfbf      	itttt	lt
 800e93e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e940:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e942:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e944:	1ae3      	sublt	r3, r4, r3
 800e946:	bfb4      	ite	lt
 800e948:	18d2      	addlt	r2, r2, r3
 800e94a:	1b1c      	subge	r4, r3, r4
 800e94c:	9b07      	ldr	r3, [sp, #28]
 800e94e:	bfbc      	itt	lt
 800e950:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e952:	2400      	movlt	r4, #0
 800e954:	2b00      	cmp	r3, #0
 800e956:	bfb5      	itete	lt
 800e958:	eba8 0603 	sublt.w	r6, r8, r3
 800e95c:	9b07      	ldrge	r3, [sp, #28]
 800e95e:	2300      	movlt	r3, #0
 800e960:	4646      	movge	r6, r8
 800e962:	e730      	b.n	800e7c6 <_dtoa_r+0x71e>
 800e964:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e966:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e968:	4646      	mov	r6, r8
 800e96a:	e735      	b.n	800e7d8 <_dtoa_r+0x730>
 800e96c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e96e:	e75c      	b.n	800e82a <_dtoa_r+0x782>
 800e970:	2300      	movs	r3, #0
 800e972:	e788      	b.n	800e886 <_dtoa_r+0x7de>
 800e974:	3fe00000 	.word	0x3fe00000
 800e978:	40240000 	.word	0x40240000
 800e97c:	40140000 	.word	0x40140000
 800e980:	9b02      	ldr	r3, [sp, #8]
 800e982:	e780      	b.n	800e886 <_dtoa_r+0x7de>
 800e984:	2300      	movs	r3, #0
 800e986:	930a      	str	r3, [sp, #40]	@ 0x28
 800e988:	e782      	b.n	800e890 <_dtoa_r+0x7e8>
 800e98a:	d099      	beq.n	800e8c0 <_dtoa_r+0x818>
 800e98c:	9a08      	ldr	r2, [sp, #32]
 800e98e:	331c      	adds	r3, #28
 800e990:	441a      	add	r2, r3
 800e992:	4498      	add	r8, r3
 800e994:	441e      	add	r6, r3
 800e996:	9208      	str	r2, [sp, #32]
 800e998:	e792      	b.n	800e8c0 <_dtoa_r+0x818>
 800e99a:	4603      	mov	r3, r0
 800e99c:	e7f6      	b.n	800e98c <_dtoa_r+0x8e4>
 800e99e:	9b07      	ldr	r3, [sp, #28]
 800e9a0:	9704      	str	r7, [sp, #16]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	dc20      	bgt.n	800e9e8 <_dtoa_r+0x940>
 800e9a6:	9300      	str	r3, [sp, #0]
 800e9a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9aa:	2b02      	cmp	r3, #2
 800e9ac:	dd1e      	ble.n	800e9ec <_dtoa_r+0x944>
 800e9ae:	9b00      	ldr	r3, [sp, #0]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	f47f aec0 	bne.w	800e736 <_dtoa_r+0x68e>
 800e9b6:	4621      	mov	r1, r4
 800e9b8:	2205      	movs	r2, #5
 800e9ba:	4658      	mov	r0, fp
 800e9bc:	f000 fa9a 	bl	800eef4 <__multadd>
 800e9c0:	4601      	mov	r1, r0
 800e9c2:	4604      	mov	r4, r0
 800e9c4:	4648      	mov	r0, r9
 800e9c6:	f000 fcad 	bl	800f324 <__mcmp>
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	f77f aeb3 	ble.w	800e736 <_dtoa_r+0x68e>
 800e9d0:	4656      	mov	r6, sl
 800e9d2:	2331      	movs	r3, #49	@ 0x31
 800e9d4:	f806 3b01 	strb.w	r3, [r6], #1
 800e9d8:	9b04      	ldr	r3, [sp, #16]
 800e9da:	3301      	adds	r3, #1
 800e9dc:	9304      	str	r3, [sp, #16]
 800e9de:	e6ae      	b.n	800e73e <_dtoa_r+0x696>
 800e9e0:	9c07      	ldr	r4, [sp, #28]
 800e9e2:	9704      	str	r7, [sp, #16]
 800e9e4:	4625      	mov	r5, r4
 800e9e6:	e7f3      	b.n	800e9d0 <_dtoa_r+0x928>
 800e9e8:	9b07      	ldr	r3, [sp, #28]
 800e9ea:	9300      	str	r3, [sp, #0]
 800e9ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	f000 8104 	beq.w	800ebfc <_dtoa_r+0xb54>
 800e9f4:	2e00      	cmp	r6, #0
 800e9f6:	dd05      	ble.n	800ea04 <_dtoa_r+0x95c>
 800e9f8:	4629      	mov	r1, r5
 800e9fa:	4632      	mov	r2, r6
 800e9fc:	4658      	mov	r0, fp
 800e9fe:	f000 fc25 	bl	800f24c <__lshift>
 800ea02:	4605      	mov	r5, r0
 800ea04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d05a      	beq.n	800eac0 <_dtoa_r+0xa18>
 800ea0a:	6869      	ldr	r1, [r5, #4]
 800ea0c:	4658      	mov	r0, fp
 800ea0e:	f000 fa0f 	bl	800ee30 <_Balloc>
 800ea12:	4606      	mov	r6, r0
 800ea14:	b928      	cbnz	r0, 800ea22 <_dtoa_r+0x97a>
 800ea16:	4b84      	ldr	r3, [pc, #528]	@ (800ec28 <_dtoa_r+0xb80>)
 800ea18:	4602      	mov	r2, r0
 800ea1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ea1e:	f7ff bb5a 	b.w	800e0d6 <_dtoa_r+0x2e>
 800ea22:	692a      	ldr	r2, [r5, #16]
 800ea24:	3202      	adds	r2, #2
 800ea26:	0092      	lsls	r2, r2, #2
 800ea28:	f105 010c 	add.w	r1, r5, #12
 800ea2c:	300c      	adds	r0, #12
 800ea2e:	f000 ffaf 	bl	800f990 <memcpy>
 800ea32:	2201      	movs	r2, #1
 800ea34:	4631      	mov	r1, r6
 800ea36:	4658      	mov	r0, fp
 800ea38:	f000 fc08 	bl	800f24c <__lshift>
 800ea3c:	f10a 0301 	add.w	r3, sl, #1
 800ea40:	9307      	str	r3, [sp, #28]
 800ea42:	9b00      	ldr	r3, [sp, #0]
 800ea44:	4453      	add	r3, sl
 800ea46:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ea48:	9b02      	ldr	r3, [sp, #8]
 800ea4a:	f003 0301 	and.w	r3, r3, #1
 800ea4e:	462f      	mov	r7, r5
 800ea50:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea52:	4605      	mov	r5, r0
 800ea54:	9b07      	ldr	r3, [sp, #28]
 800ea56:	4621      	mov	r1, r4
 800ea58:	3b01      	subs	r3, #1
 800ea5a:	4648      	mov	r0, r9
 800ea5c:	9300      	str	r3, [sp, #0]
 800ea5e:	f7ff fa98 	bl	800df92 <quorem>
 800ea62:	4639      	mov	r1, r7
 800ea64:	9002      	str	r0, [sp, #8]
 800ea66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ea6a:	4648      	mov	r0, r9
 800ea6c:	f000 fc5a 	bl	800f324 <__mcmp>
 800ea70:	462a      	mov	r2, r5
 800ea72:	9008      	str	r0, [sp, #32]
 800ea74:	4621      	mov	r1, r4
 800ea76:	4658      	mov	r0, fp
 800ea78:	f000 fc70 	bl	800f35c <__mdiff>
 800ea7c:	68c2      	ldr	r2, [r0, #12]
 800ea7e:	4606      	mov	r6, r0
 800ea80:	bb02      	cbnz	r2, 800eac4 <_dtoa_r+0xa1c>
 800ea82:	4601      	mov	r1, r0
 800ea84:	4648      	mov	r0, r9
 800ea86:	f000 fc4d 	bl	800f324 <__mcmp>
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	4631      	mov	r1, r6
 800ea8e:	4658      	mov	r0, fp
 800ea90:	920e      	str	r2, [sp, #56]	@ 0x38
 800ea92:	f000 fa0d 	bl	800eeb0 <_Bfree>
 800ea96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea9a:	9e07      	ldr	r6, [sp, #28]
 800ea9c:	ea43 0102 	orr.w	r1, r3, r2
 800eaa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eaa2:	4319      	orrs	r1, r3
 800eaa4:	d110      	bne.n	800eac8 <_dtoa_r+0xa20>
 800eaa6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eaaa:	d029      	beq.n	800eb00 <_dtoa_r+0xa58>
 800eaac:	9b08      	ldr	r3, [sp, #32]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	dd02      	ble.n	800eab8 <_dtoa_r+0xa10>
 800eab2:	9b02      	ldr	r3, [sp, #8]
 800eab4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800eab8:	9b00      	ldr	r3, [sp, #0]
 800eaba:	f883 8000 	strb.w	r8, [r3]
 800eabe:	e63f      	b.n	800e740 <_dtoa_r+0x698>
 800eac0:	4628      	mov	r0, r5
 800eac2:	e7bb      	b.n	800ea3c <_dtoa_r+0x994>
 800eac4:	2201      	movs	r2, #1
 800eac6:	e7e1      	b.n	800ea8c <_dtoa_r+0x9e4>
 800eac8:	9b08      	ldr	r3, [sp, #32]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	db04      	blt.n	800ead8 <_dtoa_r+0xa30>
 800eace:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ead0:	430b      	orrs	r3, r1
 800ead2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ead4:	430b      	orrs	r3, r1
 800ead6:	d120      	bne.n	800eb1a <_dtoa_r+0xa72>
 800ead8:	2a00      	cmp	r2, #0
 800eada:	dded      	ble.n	800eab8 <_dtoa_r+0xa10>
 800eadc:	4649      	mov	r1, r9
 800eade:	2201      	movs	r2, #1
 800eae0:	4658      	mov	r0, fp
 800eae2:	f000 fbb3 	bl	800f24c <__lshift>
 800eae6:	4621      	mov	r1, r4
 800eae8:	4681      	mov	r9, r0
 800eaea:	f000 fc1b 	bl	800f324 <__mcmp>
 800eaee:	2800      	cmp	r0, #0
 800eaf0:	dc03      	bgt.n	800eafa <_dtoa_r+0xa52>
 800eaf2:	d1e1      	bne.n	800eab8 <_dtoa_r+0xa10>
 800eaf4:	f018 0f01 	tst.w	r8, #1
 800eaf8:	d0de      	beq.n	800eab8 <_dtoa_r+0xa10>
 800eafa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eafe:	d1d8      	bne.n	800eab2 <_dtoa_r+0xa0a>
 800eb00:	9a00      	ldr	r2, [sp, #0]
 800eb02:	2339      	movs	r3, #57	@ 0x39
 800eb04:	7013      	strb	r3, [r2, #0]
 800eb06:	4633      	mov	r3, r6
 800eb08:	461e      	mov	r6, r3
 800eb0a:	3b01      	subs	r3, #1
 800eb0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800eb10:	2a39      	cmp	r2, #57	@ 0x39
 800eb12:	d052      	beq.n	800ebba <_dtoa_r+0xb12>
 800eb14:	3201      	adds	r2, #1
 800eb16:	701a      	strb	r2, [r3, #0]
 800eb18:	e612      	b.n	800e740 <_dtoa_r+0x698>
 800eb1a:	2a00      	cmp	r2, #0
 800eb1c:	dd07      	ble.n	800eb2e <_dtoa_r+0xa86>
 800eb1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eb22:	d0ed      	beq.n	800eb00 <_dtoa_r+0xa58>
 800eb24:	9a00      	ldr	r2, [sp, #0]
 800eb26:	f108 0301 	add.w	r3, r8, #1
 800eb2a:	7013      	strb	r3, [r2, #0]
 800eb2c:	e608      	b.n	800e740 <_dtoa_r+0x698>
 800eb2e:	9b07      	ldr	r3, [sp, #28]
 800eb30:	9a07      	ldr	r2, [sp, #28]
 800eb32:	f803 8c01 	strb.w	r8, [r3, #-1]
 800eb36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d028      	beq.n	800eb8e <_dtoa_r+0xae6>
 800eb3c:	4649      	mov	r1, r9
 800eb3e:	2300      	movs	r3, #0
 800eb40:	220a      	movs	r2, #10
 800eb42:	4658      	mov	r0, fp
 800eb44:	f000 f9d6 	bl	800eef4 <__multadd>
 800eb48:	42af      	cmp	r7, r5
 800eb4a:	4681      	mov	r9, r0
 800eb4c:	f04f 0300 	mov.w	r3, #0
 800eb50:	f04f 020a 	mov.w	r2, #10
 800eb54:	4639      	mov	r1, r7
 800eb56:	4658      	mov	r0, fp
 800eb58:	d107      	bne.n	800eb6a <_dtoa_r+0xac2>
 800eb5a:	f000 f9cb 	bl	800eef4 <__multadd>
 800eb5e:	4607      	mov	r7, r0
 800eb60:	4605      	mov	r5, r0
 800eb62:	9b07      	ldr	r3, [sp, #28]
 800eb64:	3301      	adds	r3, #1
 800eb66:	9307      	str	r3, [sp, #28]
 800eb68:	e774      	b.n	800ea54 <_dtoa_r+0x9ac>
 800eb6a:	f000 f9c3 	bl	800eef4 <__multadd>
 800eb6e:	4629      	mov	r1, r5
 800eb70:	4607      	mov	r7, r0
 800eb72:	2300      	movs	r3, #0
 800eb74:	220a      	movs	r2, #10
 800eb76:	4658      	mov	r0, fp
 800eb78:	f000 f9bc 	bl	800eef4 <__multadd>
 800eb7c:	4605      	mov	r5, r0
 800eb7e:	e7f0      	b.n	800eb62 <_dtoa_r+0xaba>
 800eb80:	9b00      	ldr	r3, [sp, #0]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	bfcc      	ite	gt
 800eb86:	461e      	movgt	r6, r3
 800eb88:	2601      	movle	r6, #1
 800eb8a:	4456      	add	r6, sl
 800eb8c:	2700      	movs	r7, #0
 800eb8e:	4649      	mov	r1, r9
 800eb90:	2201      	movs	r2, #1
 800eb92:	4658      	mov	r0, fp
 800eb94:	f000 fb5a 	bl	800f24c <__lshift>
 800eb98:	4621      	mov	r1, r4
 800eb9a:	4681      	mov	r9, r0
 800eb9c:	f000 fbc2 	bl	800f324 <__mcmp>
 800eba0:	2800      	cmp	r0, #0
 800eba2:	dcb0      	bgt.n	800eb06 <_dtoa_r+0xa5e>
 800eba4:	d102      	bne.n	800ebac <_dtoa_r+0xb04>
 800eba6:	f018 0f01 	tst.w	r8, #1
 800ebaa:	d1ac      	bne.n	800eb06 <_dtoa_r+0xa5e>
 800ebac:	4633      	mov	r3, r6
 800ebae:	461e      	mov	r6, r3
 800ebb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ebb4:	2a30      	cmp	r2, #48	@ 0x30
 800ebb6:	d0fa      	beq.n	800ebae <_dtoa_r+0xb06>
 800ebb8:	e5c2      	b.n	800e740 <_dtoa_r+0x698>
 800ebba:	459a      	cmp	sl, r3
 800ebbc:	d1a4      	bne.n	800eb08 <_dtoa_r+0xa60>
 800ebbe:	9b04      	ldr	r3, [sp, #16]
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	9304      	str	r3, [sp, #16]
 800ebc4:	2331      	movs	r3, #49	@ 0x31
 800ebc6:	f88a 3000 	strb.w	r3, [sl]
 800ebca:	e5b9      	b.n	800e740 <_dtoa_r+0x698>
 800ebcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ebce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ec2c <_dtoa_r+0xb84>
 800ebd2:	b11b      	cbz	r3, 800ebdc <_dtoa_r+0xb34>
 800ebd4:	f10a 0308 	add.w	r3, sl, #8
 800ebd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ebda:	6013      	str	r3, [r2, #0]
 800ebdc:	4650      	mov	r0, sl
 800ebde:	b019      	add	sp, #100	@ 0x64
 800ebe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebe6:	2b01      	cmp	r3, #1
 800ebe8:	f77f ae37 	ble.w	800e85a <_dtoa_r+0x7b2>
 800ebec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebee:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebf0:	2001      	movs	r0, #1
 800ebf2:	e655      	b.n	800e8a0 <_dtoa_r+0x7f8>
 800ebf4:	9b00      	ldr	r3, [sp, #0]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	f77f aed6 	ble.w	800e9a8 <_dtoa_r+0x900>
 800ebfc:	4656      	mov	r6, sl
 800ebfe:	4621      	mov	r1, r4
 800ec00:	4648      	mov	r0, r9
 800ec02:	f7ff f9c6 	bl	800df92 <quorem>
 800ec06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ec0a:	f806 8b01 	strb.w	r8, [r6], #1
 800ec0e:	9b00      	ldr	r3, [sp, #0]
 800ec10:	eba6 020a 	sub.w	r2, r6, sl
 800ec14:	4293      	cmp	r3, r2
 800ec16:	ddb3      	ble.n	800eb80 <_dtoa_r+0xad8>
 800ec18:	4649      	mov	r1, r9
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	220a      	movs	r2, #10
 800ec1e:	4658      	mov	r0, fp
 800ec20:	f000 f968 	bl	800eef4 <__multadd>
 800ec24:	4681      	mov	r9, r0
 800ec26:	e7ea      	b.n	800ebfe <_dtoa_r+0xb56>
 800ec28:	08010ab4 	.word	0x08010ab4
 800ec2c:	08010a38 	.word	0x08010a38

0800ec30 <_free_r>:
 800ec30:	b538      	push	{r3, r4, r5, lr}
 800ec32:	4605      	mov	r5, r0
 800ec34:	2900      	cmp	r1, #0
 800ec36:	d041      	beq.n	800ecbc <_free_r+0x8c>
 800ec38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec3c:	1f0c      	subs	r4, r1, #4
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	bfb8      	it	lt
 800ec42:	18e4      	addlt	r4, r4, r3
 800ec44:	f000 f8e8 	bl	800ee18 <__malloc_lock>
 800ec48:	4a1d      	ldr	r2, [pc, #116]	@ (800ecc0 <_free_r+0x90>)
 800ec4a:	6813      	ldr	r3, [r2, #0]
 800ec4c:	b933      	cbnz	r3, 800ec5c <_free_r+0x2c>
 800ec4e:	6063      	str	r3, [r4, #4]
 800ec50:	6014      	str	r4, [r2, #0]
 800ec52:	4628      	mov	r0, r5
 800ec54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec58:	f000 b8e4 	b.w	800ee24 <__malloc_unlock>
 800ec5c:	42a3      	cmp	r3, r4
 800ec5e:	d908      	bls.n	800ec72 <_free_r+0x42>
 800ec60:	6820      	ldr	r0, [r4, #0]
 800ec62:	1821      	adds	r1, r4, r0
 800ec64:	428b      	cmp	r3, r1
 800ec66:	bf01      	itttt	eq
 800ec68:	6819      	ldreq	r1, [r3, #0]
 800ec6a:	685b      	ldreq	r3, [r3, #4]
 800ec6c:	1809      	addeq	r1, r1, r0
 800ec6e:	6021      	streq	r1, [r4, #0]
 800ec70:	e7ed      	b.n	800ec4e <_free_r+0x1e>
 800ec72:	461a      	mov	r2, r3
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	b10b      	cbz	r3, 800ec7c <_free_r+0x4c>
 800ec78:	42a3      	cmp	r3, r4
 800ec7a:	d9fa      	bls.n	800ec72 <_free_r+0x42>
 800ec7c:	6811      	ldr	r1, [r2, #0]
 800ec7e:	1850      	adds	r0, r2, r1
 800ec80:	42a0      	cmp	r0, r4
 800ec82:	d10b      	bne.n	800ec9c <_free_r+0x6c>
 800ec84:	6820      	ldr	r0, [r4, #0]
 800ec86:	4401      	add	r1, r0
 800ec88:	1850      	adds	r0, r2, r1
 800ec8a:	4283      	cmp	r3, r0
 800ec8c:	6011      	str	r1, [r2, #0]
 800ec8e:	d1e0      	bne.n	800ec52 <_free_r+0x22>
 800ec90:	6818      	ldr	r0, [r3, #0]
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	6053      	str	r3, [r2, #4]
 800ec96:	4408      	add	r0, r1
 800ec98:	6010      	str	r0, [r2, #0]
 800ec9a:	e7da      	b.n	800ec52 <_free_r+0x22>
 800ec9c:	d902      	bls.n	800eca4 <_free_r+0x74>
 800ec9e:	230c      	movs	r3, #12
 800eca0:	602b      	str	r3, [r5, #0]
 800eca2:	e7d6      	b.n	800ec52 <_free_r+0x22>
 800eca4:	6820      	ldr	r0, [r4, #0]
 800eca6:	1821      	adds	r1, r4, r0
 800eca8:	428b      	cmp	r3, r1
 800ecaa:	bf04      	itt	eq
 800ecac:	6819      	ldreq	r1, [r3, #0]
 800ecae:	685b      	ldreq	r3, [r3, #4]
 800ecb0:	6063      	str	r3, [r4, #4]
 800ecb2:	bf04      	itt	eq
 800ecb4:	1809      	addeq	r1, r1, r0
 800ecb6:	6021      	streq	r1, [r4, #0]
 800ecb8:	6054      	str	r4, [r2, #4]
 800ecba:	e7ca      	b.n	800ec52 <_free_r+0x22>
 800ecbc:	bd38      	pop	{r3, r4, r5, pc}
 800ecbe:	bf00      	nop
 800ecc0:	20002454 	.word	0x20002454

0800ecc4 <malloc>:
 800ecc4:	4b02      	ldr	r3, [pc, #8]	@ (800ecd0 <malloc+0xc>)
 800ecc6:	4601      	mov	r1, r0
 800ecc8:	6818      	ldr	r0, [r3, #0]
 800ecca:	f000 b825 	b.w	800ed18 <_malloc_r>
 800ecce:	bf00      	nop
 800ecd0:	2000010c 	.word	0x2000010c

0800ecd4 <sbrk_aligned>:
 800ecd4:	b570      	push	{r4, r5, r6, lr}
 800ecd6:	4e0f      	ldr	r6, [pc, #60]	@ (800ed14 <sbrk_aligned+0x40>)
 800ecd8:	460c      	mov	r4, r1
 800ecda:	6831      	ldr	r1, [r6, #0]
 800ecdc:	4605      	mov	r5, r0
 800ecde:	b911      	cbnz	r1, 800ece6 <sbrk_aligned+0x12>
 800ece0:	f000 fe46 	bl	800f970 <_sbrk_r>
 800ece4:	6030      	str	r0, [r6, #0]
 800ece6:	4621      	mov	r1, r4
 800ece8:	4628      	mov	r0, r5
 800ecea:	f000 fe41 	bl	800f970 <_sbrk_r>
 800ecee:	1c43      	adds	r3, r0, #1
 800ecf0:	d103      	bne.n	800ecfa <sbrk_aligned+0x26>
 800ecf2:	f04f 34ff 	mov.w	r4, #4294967295
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	bd70      	pop	{r4, r5, r6, pc}
 800ecfa:	1cc4      	adds	r4, r0, #3
 800ecfc:	f024 0403 	bic.w	r4, r4, #3
 800ed00:	42a0      	cmp	r0, r4
 800ed02:	d0f8      	beq.n	800ecf6 <sbrk_aligned+0x22>
 800ed04:	1a21      	subs	r1, r4, r0
 800ed06:	4628      	mov	r0, r5
 800ed08:	f000 fe32 	bl	800f970 <_sbrk_r>
 800ed0c:	3001      	adds	r0, #1
 800ed0e:	d1f2      	bne.n	800ecf6 <sbrk_aligned+0x22>
 800ed10:	e7ef      	b.n	800ecf2 <sbrk_aligned+0x1e>
 800ed12:	bf00      	nop
 800ed14:	20002450 	.word	0x20002450

0800ed18 <_malloc_r>:
 800ed18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed1c:	1ccd      	adds	r5, r1, #3
 800ed1e:	f025 0503 	bic.w	r5, r5, #3
 800ed22:	3508      	adds	r5, #8
 800ed24:	2d0c      	cmp	r5, #12
 800ed26:	bf38      	it	cc
 800ed28:	250c      	movcc	r5, #12
 800ed2a:	2d00      	cmp	r5, #0
 800ed2c:	4606      	mov	r6, r0
 800ed2e:	db01      	blt.n	800ed34 <_malloc_r+0x1c>
 800ed30:	42a9      	cmp	r1, r5
 800ed32:	d904      	bls.n	800ed3e <_malloc_r+0x26>
 800ed34:	230c      	movs	r3, #12
 800ed36:	6033      	str	r3, [r6, #0]
 800ed38:	2000      	movs	r0, #0
 800ed3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ee14 <_malloc_r+0xfc>
 800ed42:	f000 f869 	bl	800ee18 <__malloc_lock>
 800ed46:	f8d8 3000 	ldr.w	r3, [r8]
 800ed4a:	461c      	mov	r4, r3
 800ed4c:	bb44      	cbnz	r4, 800eda0 <_malloc_r+0x88>
 800ed4e:	4629      	mov	r1, r5
 800ed50:	4630      	mov	r0, r6
 800ed52:	f7ff ffbf 	bl	800ecd4 <sbrk_aligned>
 800ed56:	1c43      	adds	r3, r0, #1
 800ed58:	4604      	mov	r4, r0
 800ed5a:	d158      	bne.n	800ee0e <_malloc_r+0xf6>
 800ed5c:	f8d8 4000 	ldr.w	r4, [r8]
 800ed60:	4627      	mov	r7, r4
 800ed62:	2f00      	cmp	r7, #0
 800ed64:	d143      	bne.n	800edee <_malloc_r+0xd6>
 800ed66:	2c00      	cmp	r4, #0
 800ed68:	d04b      	beq.n	800ee02 <_malloc_r+0xea>
 800ed6a:	6823      	ldr	r3, [r4, #0]
 800ed6c:	4639      	mov	r1, r7
 800ed6e:	4630      	mov	r0, r6
 800ed70:	eb04 0903 	add.w	r9, r4, r3
 800ed74:	f000 fdfc 	bl	800f970 <_sbrk_r>
 800ed78:	4581      	cmp	r9, r0
 800ed7a:	d142      	bne.n	800ee02 <_malloc_r+0xea>
 800ed7c:	6821      	ldr	r1, [r4, #0]
 800ed7e:	1a6d      	subs	r5, r5, r1
 800ed80:	4629      	mov	r1, r5
 800ed82:	4630      	mov	r0, r6
 800ed84:	f7ff ffa6 	bl	800ecd4 <sbrk_aligned>
 800ed88:	3001      	adds	r0, #1
 800ed8a:	d03a      	beq.n	800ee02 <_malloc_r+0xea>
 800ed8c:	6823      	ldr	r3, [r4, #0]
 800ed8e:	442b      	add	r3, r5
 800ed90:	6023      	str	r3, [r4, #0]
 800ed92:	f8d8 3000 	ldr.w	r3, [r8]
 800ed96:	685a      	ldr	r2, [r3, #4]
 800ed98:	bb62      	cbnz	r2, 800edf4 <_malloc_r+0xdc>
 800ed9a:	f8c8 7000 	str.w	r7, [r8]
 800ed9e:	e00f      	b.n	800edc0 <_malloc_r+0xa8>
 800eda0:	6822      	ldr	r2, [r4, #0]
 800eda2:	1b52      	subs	r2, r2, r5
 800eda4:	d420      	bmi.n	800ede8 <_malloc_r+0xd0>
 800eda6:	2a0b      	cmp	r2, #11
 800eda8:	d917      	bls.n	800edda <_malloc_r+0xc2>
 800edaa:	1961      	adds	r1, r4, r5
 800edac:	42a3      	cmp	r3, r4
 800edae:	6025      	str	r5, [r4, #0]
 800edb0:	bf18      	it	ne
 800edb2:	6059      	strne	r1, [r3, #4]
 800edb4:	6863      	ldr	r3, [r4, #4]
 800edb6:	bf08      	it	eq
 800edb8:	f8c8 1000 	streq.w	r1, [r8]
 800edbc:	5162      	str	r2, [r4, r5]
 800edbe:	604b      	str	r3, [r1, #4]
 800edc0:	4630      	mov	r0, r6
 800edc2:	f000 f82f 	bl	800ee24 <__malloc_unlock>
 800edc6:	f104 000b 	add.w	r0, r4, #11
 800edca:	1d23      	adds	r3, r4, #4
 800edcc:	f020 0007 	bic.w	r0, r0, #7
 800edd0:	1ac2      	subs	r2, r0, r3
 800edd2:	bf1c      	itt	ne
 800edd4:	1a1b      	subne	r3, r3, r0
 800edd6:	50a3      	strne	r3, [r4, r2]
 800edd8:	e7af      	b.n	800ed3a <_malloc_r+0x22>
 800edda:	6862      	ldr	r2, [r4, #4]
 800eddc:	42a3      	cmp	r3, r4
 800edde:	bf0c      	ite	eq
 800ede0:	f8c8 2000 	streq.w	r2, [r8]
 800ede4:	605a      	strne	r2, [r3, #4]
 800ede6:	e7eb      	b.n	800edc0 <_malloc_r+0xa8>
 800ede8:	4623      	mov	r3, r4
 800edea:	6864      	ldr	r4, [r4, #4]
 800edec:	e7ae      	b.n	800ed4c <_malloc_r+0x34>
 800edee:	463c      	mov	r4, r7
 800edf0:	687f      	ldr	r7, [r7, #4]
 800edf2:	e7b6      	b.n	800ed62 <_malloc_r+0x4a>
 800edf4:	461a      	mov	r2, r3
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	42a3      	cmp	r3, r4
 800edfa:	d1fb      	bne.n	800edf4 <_malloc_r+0xdc>
 800edfc:	2300      	movs	r3, #0
 800edfe:	6053      	str	r3, [r2, #4]
 800ee00:	e7de      	b.n	800edc0 <_malloc_r+0xa8>
 800ee02:	230c      	movs	r3, #12
 800ee04:	6033      	str	r3, [r6, #0]
 800ee06:	4630      	mov	r0, r6
 800ee08:	f000 f80c 	bl	800ee24 <__malloc_unlock>
 800ee0c:	e794      	b.n	800ed38 <_malloc_r+0x20>
 800ee0e:	6005      	str	r5, [r0, #0]
 800ee10:	e7d6      	b.n	800edc0 <_malloc_r+0xa8>
 800ee12:	bf00      	nop
 800ee14:	20002454 	.word	0x20002454

0800ee18 <__malloc_lock>:
 800ee18:	4801      	ldr	r0, [pc, #4]	@ (800ee20 <__malloc_lock+0x8>)
 800ee1a:	f7ff b8b8 	b.w	800df8e <__retarget_lock_acquire_recursive>
 800ee1e:	bf00      	nop
 800ee20:	2000244c 	.word	0x2000244c

0800ee24 <__malloc_unlock>:
 800ee24:	4801      	ldr	r0, [pc, #4]	@ (800ee2c <__malloc_unlock+0x8>)
 800ee26:	f7ff b8b3 	b.w	800df90 <__retarget_lock_release_recursive>
 800ee2a:	bf00      	nop
 800ee2c:	2000244c 	.word	0x2000244c

0800ee30 <_Balloc>:
 800ee30:	b570      	push	{r4, r5, r6, lr}
 800ee32:	69c6      	ldr	r6, [r0, #28]
 800ee34:	4604      	mov	r4, r0
 800ee36:	460d      	mov	r5, r1
 800ee38:	b976      	cbnz	r6, 800ee58 <_Balloc+0x28>
 800ee3a:	2010      	movs	r0, #16
 800ee3c:	f7ff ff42 	bl	800ecc4 <malloc>
 800ee40:	4602      	mov	r2, r0
 800ee42:	61e0      	str	r0, [r4, #28]
 800ee44:	b920      	cbnz	r0, 800ee50 <_Balloc+0x20>
 800ee46:	4b18      	ldr	r3, [pc, #96]	@ (800eea8 <_Balloc+0x78>)
 800ee48:	4818      	ldr	r0, [pc, #96]	@ (800eeac <_Balloc+0x7c>)
 800ee4a:	216b      	movs	r1, #107	@ 0x6b
 800ee4c:	f000 fdae 	bl	800f9ac <__assert_func>
 800ee50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee54:	6006      	str	r6, [r0, #0]
 800ee56:	60c6      	str	r6, [r0, #12]
 800ee58:	69e6      	ldr	r6, [r4, #28]
 800ee5a:	68f3      	ldr	r3, [r6, #12]
 800ee5c:	b183      	cbz	r3, 800ee80 <_Balloc+0x50>
 800ee5e:	69e3      	ldr	r3, [r4, #28]
 800ee60:	68db      	ldr	r3, [r3, #12]
 800ee62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ee66:	b9b8      	cbnz	r0, 800ee98 <_Balloc+0x68>
 800ee68:	2101      	movs	r1, #1
 800ee6a:	fa01 f605 	lsl.w	r6, r1, r5
 800ee6e:	1d72      	adds	r2, r6, #5
 800ee70:	0092      	lsls	r2, r2, #2
 800ee72:	4620      	mov	r0, r4
 800ee74:	f000 fdb8 	bl	800f9e8 <_calloc_r>
 800ee78:	b160      	cbz	r0, 800ee94 <_Balloc+0x64>
 800ee7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ee7e:	e00e      	b.n	800ee9e <_Balloc+0x6e>
 800ee80:	2221      	movs	r2, #33	@ 0x21
 800ee82:	2104      	movs	r1, #4
 800ee84:	4620      	mov	r0, r4
 800ee86:	f000 fdaf 	bl	800f9e8 <_calloc_r>
 800ee8a:	69e3      	ldr	r3, [r4, #28]
 800ee8c:	60f0      	str	r0, [r6, #12]
 800ee8e:	68db      	ldr	r3, [r3, #12]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d1e4      	bne.n	800ee5e <_Balloc+0x2e>
 800ee94:	2000      	movs	r0, #0
 800ee96:	bd70      	pop	{r4, r5, r6, pc}
 800ee98:	6802      	ldr	r2, [r0, #0]
 800ee9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ee9e:	2300      	movs	r3, #0
 800eea0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eea4:	e7f7      	b.n	800ee96 <_Balloc+0x66>
 800eea6:	bf00      	nop
 800eea8:	08010a45 	.word	0x08010a45
 800eeac:	08010ac5 	.word	0x08010ac5

0800eeb0 <_Bfree>:
 800eeb0:	b570      	push	{r4, r5, r6, lr}
 800eeb2:	69c6      	ldr	r6, [r0, #28]
 800eeb4:	4605      	mov	r5, r0
 800eeb6:	460c      	mov	r4, r1
 800eeb8:	b976      	cbnz	r6, 800eed8 <_Bfree+0x28>
 800eeba:	2010      	movs	r0, #16
 800eebc:	f7ff ff02 	bl	800ecc4 <malloc>
 800eec0:	4602      	mov	r2, r0
 800eec2:	61e8      	str	r0, [r5, #28]
 800eec4:	b920      	cbnz	r0, 800eed0 <_Bfree+0x20>
 800eec6:	4b09      	ldr	r3, [pc, #36]	@ (800eeec <_Bfree+0x3c>)
 800eec8:	4809      	ldr	r0, [pc, #36]	@ (800eef0 <_Bfree+0x40>)
 800eeca:	218f      	movs	r1, #143	@ 0x8f
 800eecc:	f000 fd6e 	bl	800f9ac <__assert_func>
 800eed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eed4:	6006      	str	r6, [r0, #0]
 800eed6:	60c6      	str	r6, [r0, #12]
 800eed8:	b13c      	cbz	r4, 800eeea <_Bfree+0x3a>
 800eeda:	69eb      	ldr	r3, [r5, #28]
 800eedc:	6862      	ldr	r2, [r4, #4]
 800eede:	68db      	ldr	r3, [r3, #12]
 800eee0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eee4:	6021      	str	r1, [r4, #0]
 800eee6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eeea:	bd70      	pop	{r4, r5, r6, pc}
 800eeec:	08010a45 	.word	0x08010a45
 800eef0:	08010ac5 	.word	0x08010ac5

0800eef4 <__multadd>:
 800eef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eef8:	690d      	ldr	r5, [r1, #16]
 800eefa:	4607      	mov	r7, r0
 800eefc:	460c      	mov	r4, r1
 800eefe:	461e      	mov	r6, r3
 800ef00:	f101 0c14 	add.w	ip, r1, #20
 800ef04:	2000      	movs	r0, #0
 800ef06:	f8dc 3000 	ldr.w	r3, [ip]
 800ef0a:	b299      	uxth	r1, r3
 800ef0c:	fb02 6101 	mla	r1, r2, r1, r6
 800ef10:	0c1e      	lsrs	r6, r3, #16
 800ef12:	0c0b      	lsrs	r3, r1, #16
 800ef14:	fb02 3306 	mla	r3, r2, r6, r3
 800ef18:	b289      	uxth	r1, r1
 800ef1a:	3001      	adds	r0, #1
 800ef1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ef20:	4285      	cmp	r5, r0
 800ef22:	f84c 1b04 	str.w	r1, [ip], #4
 800ef26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ef2a:	dcec      	bgt.n	800ef06 <__multadd+0x12>
 800ef2c:	b30e      	cbz	r6, 800ef72 <__multadd+0x7e>
 800ef2e:	68a3      	ldr	r3, [r4, #8]
 800ef30:	42ab      	cmp	r3, r5
 800ef32:	dc19      	bgt.n	800ef68 <__multadd+0x74>
 800ef34:	6861      	ldr	r1, [r4, #4]
 800ef36:	4638      	mov	r0, r7
 800ef38:	3101      	adds	r1, #1
 800ef3a:	f7ff ff79 	bl	800ee30 <_Balloc>
 800ef3e:	4680      	mov	r8, r0
 800ef40:	b928      	cbnz	r0, 800ef4e <__multadd+0x5a>
 800ef42:	4602      	mov	r2, r0
 800ef44:	4b0c      	ldr	r3, [pc, #48]	@ (800ef78 <__multadd+0x84>)
 800ef46:	480d      	ldr	r0, [pc, #52]	@ (800ef7c <__multadd+0x88>)
 800ef48:	21ba      	movs	r1, #186	@ 0xba
 800ef4a:	f000 fd2f 	bl	800f9ac <__assert_func>
 800ef4e:	6922      	ldr	r2, [r4, #16]
 800ef50:	3202      	adds	r2, #2
 800ef52:	f104 010c 	add.w	r1, r4, #12
 800ef56:	0092      	lsls	r2, r2, #2
 800ef58:	300c      	adds	r0, #12
 800ef5a:	f000 fd19 	bl	800f990 <memcpy>
 800ef5e:	4621      	mov	r1, r4
 800ef60:	4638      	mov	r0, r7
 800ef62:	f7ff ffa5 	bl	800eeb0 <_Bfree>
 800ef66:	4644      	mov	r4, r8
 800ef68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ef6c:	3501      	adds	r5, #1
 800ef6e:	615e      	str	r6, [r3, #20]
 800ef70:	6125      	str	r5, [r4, #16]
 800ef72:	4620      	mov	r0, r4
 800ef74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef78:	08010ab4 	.word	0x08010ab4
 800ef7c:	08010ac5 	.word	0x08010ac5

0800ef80 <__hi0bits>:
 800ef80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ef84:	4603      	mov	r3, r0
 800ef86:	bf36      	itet	cc
 800ef88:	0403      	lslcc	r3, r0, #16
 800ef8a:	2000      	movcs	r0, #0
 800ef8c:	2010      	movcc	r0, #16
 800ef8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ef92:	bf3c      	itt	cc
 800ef94:	021b      	lslcc	r3, r3, #8
 800ef96:	3008      	addcc	r0, #8
 800ef98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ef9c:	bf3c      	itt	cc
 800ef9e:	011b      	lslcc	r3, r3, #4
 800efa0:	3004      	addcc	r0, #4
 800efa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800efa6:	bf3c      	itt	cc
 800efa8:	009b      	lslcc	r3, r3, #2
 800efaa:	3002      	addcc	r0, #2
 800efac:	2b00      	cmp	r3, #0
 800efae:	db05      	blt.n	800efbc <__hi0bits+0x3c>
 800efb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800efb4:	f100 0001 	add.w	r0, r0, #1
 800efb8:	bf08      	it	eq
 800efba:	2020      	moveq	r0, #32
 800efbc:	4770      	bx	lr

0800efbe <__lo0bits>:
 800efbe:	6803      	ldr	r3, [r0, #0]
 800efc0:	4602      	mov	r2, r0
 800efc2:	f013 0007 	ands.w	r0, r3, #7
 800efc6:	d00b      	beq.n	800efe0 <__lo0bits+0x22>
 800efc8:	07d9      	lsls	r1, r3, #31
 800efca:	d421      	bmi.n	800f010 <__lo0bits+0x52>
 800efcc:	0798      	lsls	r0, r3, #30
 800efce:	bf49      	itett	mi
 800efd0:	085b      	lsrmi	r3, r3, #1
 800efd2:	089b      	lsrpl	r3, r3, #2
 800efd4:	2001      	movmi	r0, #1
 800efd6:	6013      	strmi	r3, [r2, #0]
 800efd8:	bf5c      	itt	pl
 800efda:	6013      	strpl	r3, [r2, #0]
 800efdc:	2002      	movpl	r0, #2
 800efde:	4770      	bx	lr
 800efe0:	b299      	uxth	r1, r3
 800efe2:	b909      	cbnz	r1, 800efe8 <__lo0bits+0x2a>
 800efe4:	0c1b      	lsrs	r3, r3, #16
 800efe6:	2010      	movs	r0, #16
 800efe8:	b2d9      	uxtb	r1, r3
 800efea:	b909      	cbnz	r1, 800eff0 <__lo0bits+0x32>
 800efec:	3008      	adds	r0, #8
 800efee:	0a1b      	lsrs	r3, r3, #8
 800eff0:	0719      	lsls	r1, r3, #28
 800eff2:	bf04      	itt	eq
 800eff4:	091b      	lsreq	r3, r3, #4
 800eff6:	3004      	addeq	r0, #4
 800eff8:	0799      	lsls	r1, r3, #30
 800effa:	bf04      	itt	eq
 800effc:	089b      	lsreq	r3, r3, #2
 800effe:	3002      	addeq	r0, #2
 800f000:	07d9      	lsls	r1, r3, #31
 800f002:	d403      	bmi.n	800f00c <__lo0bits+0x4e>
 800f004:	085b      	lsrs	r3, r3, #1
 800f006:	f100 0001 	add.w	r0, r0, #1
 800f00a:	d003      	beq.n	800f014 <__lo0bits+0x56>
 800f00c:	6013      	str	r3, [r2, #0]
 800f00e:	4770      	bx	lr
 800f010:	2000      	movs	r0, #0
 800f012:	4770      	bx	lr
 800f014:	2020      	movs	r0, #32
 800f016:	4770      	bx	lr

0800f018 <__i2b>:
 800f018:	b510      	push	{r4, lr}
 800f01a:	460c      	mov	r4, r1
 800f01c:	2101      	movs	r1, #1
 800f01e:	f7ff ff07 	bl	800ee30 <_Balloc>
 800f022:	4602      	mov	r2, r0
 800f024:	b928      	cbnz	r0, 800f032 <__i2b+0x1a>
 800f026:	4b05      	ldr	r3, [pc, #20]	@ (800f03c <__i2b+0x24>)
 800f028:	4805      	ldr	r0, [pc, #20]	@ (800f040 <__i2b+0x28>)
 800f02a:	f240 1145 	movw	r1, #325	@ 0x145
 800f02e:	f000 fcbd 	bl	800f9ac <__assert_func>
 800f032:	2301      	movs	r3, #1
 800f034:	6144      	str	r4, [r0, #20]
 800f036:	6103      	str	r3, [r0, #16]
 800f038:	bd10      	pop	{r4, pc}
 800f03a:	bf00      	nop
 800f03c:	08010ab4 	.word	0x08010ab4
 800f040:	08010ac5 	.word	0x08010ac5

0800f044 <__multiply>:
 800f044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f048:	4614      	mov	r4, r2
 800f04a:	690a      	ldr	r2, [r1, #16]
 800f04c:	6923      	ldr	r3, [r4, #16]
 800f04e:	429a      	cmp	r2, r3
 800f050:	bfa8      	it	ge
 800f052:	4623      	movge	r3, r4
 800f054:	460f      	mov	r7, r1
 800f056:	bfa4      	itt	ge
 800f058:	460c      	movge	r4, r1
 800f05a:	461f      	movge	r7, r3
 800f05c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f060:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f064:	68a3      	ldr	r3, [r4, #8]
 800f066:	6861      	ldr	r1, [r4, #4]
 800f068:	eb0a 0609 	add.w	r6, sl, r9
 800f06c:	42b3      	cmp	r3, r6
 800f06e:	b085      	sub	sp, #20
 800f070:	bfb8      	it	lt
 800f072:	3101      	addlt	r1, #1
 800f074:	f7ff fedc 	bl	800ee30 <_Balloc>
 800f078:	b930      	cbnz	r0, 800f088 <__multiply+0x44>
 800f07a:	4602      	mov	r2, r0
 800f07c:	4b44      	ldr	r3, [pc, #272]	@ (800f190 <__multiply+0x14c>)
 800f07e:	4845      	ldr	r0, [pc, #276]	@ (800f194 <__multiply+0x150>)
 800f080:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f084:	f000 fc92 	bl	800f9ac <__assert_func>
 800f088:	f100 0514 	add.w	r5, r0, #20
 800f08c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f090:	462b      	mov	r3, r5
 800f092:	2200      	movs	r2, #0
 800f094:	4543      	cmp	r3, r8
 800f096:	d321      	bcc.n	800f0dc <__multiply+0x98>
 800f098:	f107 0114 	add.w	r1, r7, #20
 800f09c:	f104 0214 	add.w	r2, r4, #20
 800f0a0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f0a4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f0a8:	9302      	str	r3, [sp, #8]
 800f0aa:	1b13      	subs	r3, r2, r4
 800f0ac:	3b15      	subs	r3, #21
 800f0ae:	f023 0303 	bic.w	r3, r3, #3
 800f0b2:	3304      	adds	r3, #4
 800f0b4:	f104 0715 	add.w	r7, r4, #21
 800f0b8:	42ba      	cmp	r2, r7
 800f0ba:	bf38      	it	cc
 800f0bc:	2304      	movcc	r3, #4
 800f0be:	9301      	str	r3, [sp, #4]
 800f0c0:	9b02      	ldr	r3, [sp, #8]
 800f0c2:	9103      	str	r1, [sp, #12]
 800f0c4:	428b      	cmp	r3, r1
 800f0c6:	d80c      	bhi.n	800f0e2 <__multiply+0x9e>
 800f0c8:	2e00      	cmp	r6, #0
 800f0ca:	dd03      	ble.n	800f0d4 <__multiply+0x90>
 800f0cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d05b      	beq.n	800f18c <__multiply+0x148>
 800f0d4:	6106      	str	r6, [r0, #16]
 800f0d6:	b005      	add	sp, #20
 800f0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0dc:	f843 2b04 	str.w	r2, [r3], #4
 800f0e0:	e7d8      	b.n	800f094 <__multiply+0x50>
 800f0e2:	f8b1 a000 	ldrh.w	sl, [r1]
 800f0e6:	f1ba 0f00 	cmp.w	sl, #0
 800f0ea:	d024      	beq.n	800f136 <__multiply+0xf2>
 800f0ec:	f104 0e14 	add.w	lr, r4, #20
 800f0f0:	46a9      	mov	r9, r5
 800f0f2:	f04f 0c00 	mov.w	ip, #0
 800f0f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f0fa:	f8d9 3000 	ldr.w	r3, [r9]
 800f0fe:	fa1f fb87 	uxth.w	fp, r7
 800f102:	b29b      	uxth	r3, r3
 800f104:	fb0a 330b 	mla	r3, sl, fp, r3
 800f108:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f10c:	f8d9 7000 	ldr.w	r7, [r9]
 800f110:	4463      	add	r3, ip
 800f112:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f116:	fb0a c70b 	mla	r7, sl, fp, ip
 800f11a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f11e:	b29b      	uxth	r3, r3
 800f120:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f124:	4572      	cmp	r2, lr
 800f126:	f849 3b04 	str.w	r3, [r9], #4
 800f12a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f12e:	d8e2      	bhi.n	800f0f6 <__multiply+0xb2>
 800f130:	9b01      	ldr	r3, [sp, #4]
 800f132:	f845 c003 	str.w	ip, [r5, r3]
 800f136:	9b03      	ldr	r3, [sp, #12]
 800f138:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f13c:	3104      	adds	r1, #4
 800f13e:	f1b9 0f00 	cmp.w	r9, #0
 800f142:	d021      	beq.n	800f188 <__multiply+0x144>
 800f144:	682b      	ldr	r3, [r5, #0]
 800f146:	f104 0c14 	add.w	ip, r4, #20
 800f14a:	46ae      	mov	lr, r5
 800f14c:	f04f 0a00 	mov.w	sl, #0
 800f150:	f8bc b000 	ldrh.w	fp, [ip]
 800f154:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f158:	fb09 770b 	mla	r7, r9, fp, r7
 800f15c:	4457      	add	r7, sl
 800f15e:	b29b      	uxth	r3, r3
 800f160:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f164:	f84e 3b04 	str.w	r3, [lr], #4
 800f168:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f16c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f170:	f8be 3000 	ldrh.w	r3, [lr]
 800f174:	fb09 330a 	mla	r3, r9, sl, r3
 800f178:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f17c:	4562      	cmp	r2, ip
 800f17e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f182:	d8e5      	bhi.n	800f150 <__multiply+0x10c>
 800f184:	9f01      	ldr	r7, [sp, #4]
 800f186:	51eb      	str	r3, [r5, r7]
 800f188:	3504      	adds	r5, #4
 800f18a:	e799      	b.n	800f0c0 <__multiply+0x7c>
 800f18c:	3e01      	subs	r6, #1
 800f18e:	e79b      	b.n	800f0c8 <__multiply+0x84>
 800f190:	08010ab4 	.word	0x08010ab4
 800f194:	08010ac5 	.word	0x08010ac5

0800f198 <__pow5mult>:
 800f198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f19c:	4615      	mov	r5, r2
 800f19e:	f012 0203 	ands.w	r2, r2, #3
 800f1a2:	4607      	mov	r7, r0
 800f1a4:	460e      	mov	r6, r1
 800f1a6:	d007      	beq.n	800f1b8 <__pow5mult+0x20>
 800f1a8:	4c25      	ldr	r4, [pc, #148]	@ (800f240 <__pow5mult+0xa8>)
 800f1aa:	3a01      	subs	r2, #1
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f1b2:	f7ff fe9f 	bl	800eef4 <__multadd>
 800f1b6:	4606      	mov	r6, r0
 800f1b8:	10ad      	asrs	r5, r5, #2
 800f1ba:	d03d      	beq.n	800f238 <__pow5mult+0xa0>
 800f1bc:	69fc      	ldr	r4, [r7, #28]
 800f1be:	b97c      	cbnz	r4, 800f1e0 <__pow5mult+0x48>
 800f1c0:	2010      	movs	r0, #16
 800f1c2:	f7ff fd7f 	bl	800ecc4 <malloc>
 800f1c6:	4602      	mov	r2, r0
 800f1c8:	61f8      	str	r0, [r7, #28]
 800f1ca:	b928      	cbnz	r0, 800f1d8 <__pow5mult+0x40>
 800f1cc:	4b1d      	ldr	r3, [pc, #116]	@ (800f244 <__pow5mult+0xac>)
 800f1ce:	481e      	ldr	r0, [pc, #120]	@ (800f248 <__pow5mult+0xb0>)
 800f1d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f1d4:	f000 fbea 	bl	800f9ac <__assert_func>
 800f1d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f1dc:	6004      	str	r4, [r0, #0]
 800f1de:	60c4      	str	r4, [r0, #12]
 800f1e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f1e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f1e8:	b94c      	cbnz	r4, 800f1fe <__pow5mult+0x66>
 800f1ea:	f240 2171 	movw	r1, #625	@ 0x271
 800f1ee:	4638      	mov	r0, r7
 800f1f0:	f7ff ff12 	bl	800f018 <__i2b>
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800f1fa:	4604      	mov	r4, r0
 800f1fc:	6003      	str	r3, [r0, #0]
 800f1fe:	f04f 0900 	mov.w	r9, #0
 800f202:	07eb      	lsls	r3, r5, #31
 800f204:	d50a      	bpl.n	800f21c <__pow5mult+0x84>
 800f206:	4631      	mov	r1, r6
 800f208:	4622      	mov	r2, r4
 800f20a:	4638      	mov	r0, r7
 800f20c:	f7ff ff1a 	bl	800f044 <__multiply>
 800f210:	4631      	mov	r1, r6
 800f212:	4680      	mov	r8, r0
 800f214:	4638      	mov	r0, r7
 800f216:	f7ff fe4b 	bl	800eeb0 <_Bfree>
 800f21a:	4646      	mov	r6, r8
 800f21c:	106d      	asrs	r5, r5, #1
 800f21e:	d00b      	beq.n	800f238 <__pow5mult+0xa0>
 800f220:	6820      	ldr	r0, [r4, #0]
 800f222:	b938      	cbnz	r0, 800f234 <__pow5mult+0x9c>
 800f224:	4622      	mov	r2, r4
 800f226:	4621      	mov	r1, r4
 800f228:	4638      	mov	r0, r7
 800f22a:	f7ff ff0b 	bl	800f044 <__multiply>
 800f22e:	6020      	str	r0, [r4, #0]
 800f230:	f8c0 9000 	str.w	r9, [r0]
 800f234:	4604      	mov	r4, r0
 800f236:	e7e4      	b.n	800f202 <__pow5mult+0x6a>
 800f238:	4630      	mov	r0, r6
 800f23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f23e:	bf00      	nop
 800f240:	08010b20 	.word	0x08010b20
 800f244:	08010a45 	.word	0x08010a45
 800f248:	08010ac5 	.word	0x08010ac5

0800f24c <__lshift>:
 800f24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f250:	460c      	mov	r4, r1
 800f252:	6849      	ldr	r1, [r1, #4]
 800f254:	6923      	ldr	r3, [r4, #16]
 800f256:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f25a:	68a3      	ldr	r3, [r4, #8]
 800f25c:	4607      	mov	r7, r0
 800f25e:	4691      	mov	r9, r2
 800f260:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f264:	f108 0601 	add.w	r6, r8, #1
 800f268:	42b3      	cmp	r3, r6
 800f26a:	db0b      	blt.n	800f284 <__lshift+0x38>
 800f26c:	4638      	mov	r0, r7
 800f26e:	f7ff fddf 	bl	800ee30 <_Balloc>
 800f272:	4605      	mov	r5, r0
 800f274:	b948      	cbnz	r0, 800f28a <__lshift+0x3e>
 800f276:	4602      	mov	r2, r0
 800f278:	4b28      	ldr	r3, [pc, #160]	@ (800f31c <__lshift+0xd0>)
 800f27a:	4829      	ldr	r0, [pc, #164]	@ (800f320 <__lshift+0xd4>)
 800f27c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f280:	f000 fb94 	bl	800f9ac <__assert_func>
 800f284:	3101      	adds	r1, #1
 800f286:	005b      	lsls	r3, r3, #1
 800f288:	e7ee      	b.n	800f268 <__lshift+0x1c>
 800f28a:	2300      	movs	r3, #0
 800f28c:	f100 0114 	add.w	r1, r0, #20
 800f290:	f100 0210 	add.w	r2, r0, #16
 800f294:	4618      	mov	r0, r3
 800f296:	4553      	cmp	r3, sl
 800f298:	db33      	blt.n	800f302 <__lshift+0xb6>
 800f29a:	6920      	ldr	r0, [r4, #16]
 800f29c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f2a0:	f104 0314 	add.w	r3, r4, #20
 800f2a4:	f019 091f 	ands.w	r9, r9, #31
 800f2a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f2ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f2b0:	d02b      	beq.n	800f30a <__lshift+0xbe>
 800f2b2:	f1c9 0e20 	rsb	lr, r9, #32
 800f2b6:	468a      	mov	sl, r1
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	6818      	ldr	r0, [r3, #0]
 800f2bc:	fa00 f009 	lsl.w	r0, r0, r9
 800f2c0:	4310      	orrs	r0, r2
 800f2c2:	f84a 0b04 	str.w	r0, [sl], #4
 800f2c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2ca:	459c      	cmp	ip, r3
 800f2cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800f2d0:	d8f3      	bhi.n	800f2ba <__lshift+0x6e>
 800f2d2:	ebac 0304 	sub.w	r3, ip, r4
 800f2d6:	3b15      	subs	r3, #21
 800f2d8:	f023 0303 	bic.w	r3, r3, #3
 800f2dc:	3304      	adds	r3, #4
 800f2de:	f104 0015 	add.w	r0, r4, #21
 800f2e2:	4584      	cmp	ip, r0
 800f2e4:	bf38      	it	cc
 800f2e6:	2304      	movcc	r3, #4
 800f2e8:	50ca      	str	r2, [r1, r3]
 800f2ea:	b10a      	cbz	r2, 800f2f0 <__lshift+0xa4>
 800f2ec:	f108 0602 	add.w	r6, r8, #2
 800f2f0:	3e01      	subs	r6, #1
 800f2f2:	4638      	mov	r0, r7
 800f2f4:	612e      	str	r6, [r5, #16]
 800f2f6:	4621      	mov	r1, r4
 800f2f8:	f7ff fdda 	bl	800eeb0 <_Bfree>
 800f2fc:	4628      	mov	r0, r5
 800f2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f302:	f842 0f04 	str.w	r0, [r2, #4]!
 800f306:	3301      	adds	r3, #1
 800f308:	e7c5      	b.n	800f296 <__lshift+0x4a>
 800f30a:	3904      	subs	r1, #4
 800f30c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f310:	f841 2f04 	str.w	r2, [r1, #4]!
 800f314:	459c      	cmp	ip, r3
 800f316:	d8f9      	bhi.n	800f30c <__lshift+0xc0>
 800f318:	e7ea      	b.n	800f2f0 <__lshift+0xa4>
 800f31a:	bf00      	nop
 800f31c:	08010ab4 	.word	0x08010ab4
 800f320:	08010ac5 	.word	0x08010ac5

0800f324 <__mcmp>:
 800f324:	690a      	ldr	r2, [r1, #16]
 800f326:	4603      	mov	r3, r0
 800f328:	6900      	ldr	r0, [r0, #16]
 800f32a:	1a80      	subs	r0, r0, r2
 800f32c:	b530      	push	{r4, r5, lr}
 800f32e:	d10e      	bne.n	800f34e <__mcmp+0x2a>
 800f330:	3314      	adds	r3, #20
 800f332:	3114      	adds	r1, #20
 800f334:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f338:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f33c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f340:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f344:	4295      	cmp	r5, r2
 800f346:	d003      	beq.n	800f350 <__mcmp+0x2c>
 800f348:	d205      	bcs.n	800f356 <__mcmp+0x32>
 800f34a:	f04f 30ff 	mov.w	r0, #4294967295
 800f34e:	bd30      	pop	{r4, r5, pc}
 800f350:	42a3      	cmp	r3, r4
 800f352:	d3f3      	bcc.n	800f33c <__mcmp+0x18>
 800f354:	e7fb      	b.n	800f34e <__mcmp+0x2a>
 800f356:	2001      	movs	r0, #1
 800f358:	e7f9      	b.n	800f34e <__mcmp+0x2a>
	...

0800f35c <__mdiff>:
 800f35c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f360:	4689      	mov	r9, r1
 800f362:	4606      	mov	r6, r0
 800f364:	4611      	mov	r1, r2
 800f366:	4648      	mov	r0, r9
 800f368:	4614      	mov	r4, r2
 800f36a:	f7ff ffdb 	bl	800f324 <__mcmp>
 800f36e:	1e05      	subs	r5, r0, #0
 800f370:	d112      	bne.n	800f398 <__mdiff+0x3c>
 800f372:	4629      	mov	r1, r5
 800f374:	4630      	mov	r0, r6
 800f376:	f7ff fd5b 	bl	800ee30 <_Balloc>
 800f37a:	4602      	mov	r2, r0
 800f37c:	b928      	cbnz	r0, 800f38a <__mdiff+0x2e>
 800f37e:	4b3f      	ldr	r3, [pc, #252]	@ (800f47c <__mdiff+0x120>)
 800f380:	f240 2137 	movw	r1, #567	@ 0x237
 800f384:	483e      	ldr	r0, [pc, #248]	@ (800f480 <__mdiff+0x124>)
 800f386:	f000 fb11 	bl	800f9ac <__assert_func>
 800f38a:	2301      	movs	r3, #1
 800f38c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f390:	4610      	mov	r0, r2
 800f392:	b003      	add	sp, #12
 800f394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f398:	bfbc      	itt	lt
 800f39a:	464b      	movlt	r3, r9
 800f39c:	46a1      	movlt	r9, r4
 800f39e:	4630      	mov	r0, r6
 800f3a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f3a4:	bfba      	itte	lt
 800f3a6:	461c      	movlt	r4, r3
 800f3a8:	2501      	movlt	r5, #1
 800f3aa:	2500      	movge	r5, #0
 800f3ac:	f7ff fd40 	bl	800ee30 <_Balloc>
 800f3b0:	4602      	mov	r2, r0
 800f3b2:	b918      	cbnz	r0, 800f3bc <__mdiff+0x60>
 800f3b4:	4b31      	ldr	r3, [pc, #196]	@ (800f47c <__mdiff+0x120>)
 800f3b6:	f240 2145 	movw	r1, #581	@ 0x245
 800f3ba:	e7e3      	b.n	800f384 <__mdiff+0x28>
 800f3bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f3c0:	6926      	ldr	r6, [r4, #16]
 800f3c2:	60c5      	str	r5, [r0, #12]
 800f3c4:	f109 0310 	add.w	r3, r9, #16
 800f3c8:	f109 0514 	add.w	r5, r9, #20
 800f3cc:	f104 0e14 	add.w	lr, r4, #20
 800f3d0:	f100 0b14 	add.w	fp, r0, #20
 800f3d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f3d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f3dc:	9301      	str	r3, [sp, #4]
 800f3de:	46d9      	mov	r9, fp
 800f3e0:	f04f 0c00 	mov.w	ip, #0
 800f3e4:	9b01      	ldr	r3, [sp, #4]
 800f3e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f3ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f3ee:	9301      	str	r3, [sp, #4]
 800f3f0:	fa1f f38a 	uxth.w	r3, sl
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	b283      	uxth	r3, r0
 800f3f8:	1acb      	subs	r3, r1, r3
 800f3fa:	0c00      	lsrs	r0, r0, #16
 800f3fc:	4463      	add	r3, ip
 800f3fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f402:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f406:	b29b      	uxth	r3, r3
 800f408:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f40c:	4576      	cmp	r6, lr
 800f40e:	f849 3b04 	str.w	r3, [r9], #4
 800f412:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f416:	d8e5      	bhi.n	800f3e4 <__mdiff+0x88>
 800f418:	1b33      	subs	r3, r6, r4
 800f41a:	3b15      	subs	r3, #21
 800f41c:	f023 0303 	bic.w	r3, r3, #3
 800f420:	3415      	adds	r4, #21
 800f422:	3304      	adds	r3, #4
 800f424:	42a6      	cmp	r6, r4
 800f426:	bf38      	it	cc
 800f428:	2304      	movcc	r3, #4
 800f42a:	441d      	add	r5, r3
 800f42c:	445b      	add	r3, fp
 800f42e:	461e      	mov	r6, r3
 800f430:	462c      	mov	r4, r5
 800f432:	4544      	cmp	r4, r8
 800f434:	d30e      	bcc.n	800f454 <__mdiff+0xf8>
 800f436:	f108 0103 	add.w	r1, r8, #3
 800f43a:	1b49      	subs	r1, r1, r5
 800f43c:	f021 0103 	bic.w	r1, r1, #3
 800f440:	3d03      	subs	r5, #3
 800f442:	45a8      	cmp	r8, r5
 800f444:	bf38      	it	cc
 800f446:	2100      	movcc	r1, #0
 800f448:	440b      	add	r3, r1
 800f44a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f44e:	b191      	cbz	r1, 800f476 <__mdiff+0x11a>
 800f450:	6117      	str	r7, [r2, #16]
 800f452:	e79d      	b.n	800f390 <__mdiff+0x34>
 800f454:	f854 1b04 	ldr.w	r1, [r4], #4
 800f458:	46e6      	mov	lr, ip
 800f45a:	0c08      	lsrs	r0, r1, #16
 800f45c:	fa1c fc81 	uxtah	ip, ip, r1
 800f460:	4471      	add	r1, lr
 800f462:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f466:	b289      	uxth	r1, r1
 800f468:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f46c:	f846 1b04 	str.w	r1, [r6], #4
 800f470:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f474:	e7dd      	b.n	800f432 <__mdiff+0xd6>
 800f476:	3f01      	subs	r7, #1
 800f478:	e7e7      	b.n	800f44a <__mdiff+0xee>
 800f47a:	bf00      	nop
 800f47c:	08010ab4 	.word	0x08010ab4
 800f480:	08010ac5 	.word	0x08010ac5

0800f484 <__d2b>:
 800f484:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f488:	460f      	mov	r7, r1
 800f48a:	2101      	movs	r1, #1
 800f48c:	ec59 8b10 	vmov	r8, r9, d0
 800f490:	4616      	mov	r6, r2
 800f492:	f7ff fccd 	bl	800ee30 <_Balloc>
 800f496:	4604      	mov	r4, r0
 800f498:	b930      	cbnz	r0, 800f4a8 <__d2b+0x24>
 800f49a:	4602      	mov	r2, r0
 800f49c:	4b23      	ldr	r3, [pc, #140]	@ (800f52c <__d2b+0xa8>)
 800f49e:	4824      	ldr	r0, [pc, #144]	@ (800f530 <__d2b+0xac>)
 800f4a0:	f240 310f 	movw	r1, #783	@ 0x30f
 800f4a4:	f000 fa82 	bl	800f9ac <__assert_func>
 800f4a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f4ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f4b0:	b10d      	cbz	r5, 800f4b6 <__d2b+0x32>
 800f4b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f4b6:	9301      	str	r3, [sp, #4]
 800f4b8:	f1b8 0300 	subs.w	r3, r8, #0
 800f4bc:	d023      	beq.n	800f506 <__d2b+0x82>
 800f4be:	4668      	mov	r0, sp
 800f4c0:	9300      	str	r3, [sp, #0]
 800f4c2:	f7ff fd7c 	bl	800efbe <__lo0bits>
 800f4c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f4ca:	b1d0      	cbz	r0, 800f502 <__d2b+0x7e>
 800f4cc:	f1c0 0320 	rsb	r3, r0, #32
 800f4d0:	fa02 f303 	lsl.w	r3, r2, r3
 800f4d4:	430b      	orrs	r3, r1
 800f4d6:	40c2      	lsrs	r2, r0
 800f4d8:	6163      	str	r3, [r4, #20]
 800f4da:	9201      	str	r2, [sp, #4]
 800f4dc:	9b01      	ldr	r3, [sp, #4]
 800f4de:	61a3      	str	r3, [r4, #24]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	bf0c      	ite	eq
 800f4e4:	2201      	moveq	r2, #1
 800f4e6:	2202      	movne	r2, #2
 800f4e8:	6122      	str	r2, [r4, #16]
 800f4ea:	b1a5      	cbz	r5, 800f516 <__d2b+0x92>
 800f4ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f4f0:	4405      	add	r5, r0
 800f4f2:	603d      	str	r5, [r7, #0]
 800f4f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f4f8:	6030      	str	r0, [r6, #0]
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	b003      	add	sp, #12
 800f4fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f502:	6161      	str	r1, [r4, #20]
 800f504:	e7ea      	b.n	800f4dc <__d2b+0x58>
 800f506:	a801      	add	r0, sp, #4
 800f508:	f7ff fd59 	bl	800efbe <__lo0bits>
 800f50c:	9b01      	ldr	r3, [sp, #4]
 800f50e:	6163      	str	r3, [r4, #20]
 800f510:	3020      	adds	r0, #32
 800f512:	2201      	movs	r2, #1
 800f514:	e7e8      	b.n	800f4e8 <__d2b+0x64>
 800f516:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f51a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f51e:	6038      	str	r0, [r7, #0]
 800f520:	6918      	ldr	r0, [r3, #16]
 800f522:	f7ff fd2d 	bl	800ef80 <__hi0bits>
 800f526:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f52a:	e7e5      	b.n	800f4f8 <__d2b+0x74>
 800f52c:	08010ab4 	.word	0x08010ab4
 800f530:	08010ac5 	.word	0x08010ac5

0800f534 <__ssputs_r>:
 800f534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f538:	688e      	ldr	r6, [r1, #8]
 800f53a:	461f      	mov	r7, r3
 800f53c:	42be      	cmp	r6, r7
 800f53e:	680b      	ldr	r3, [r1, #0]
 800f540:	4682      	mov	sl, r0
 800f542:	460c      	mov	r4, r1
 800f544:	4690      	mov	r8, r2
 800f546:	d82d      	bhi.n	800f5a4 <__ssputs_r+0x70>
 800f548:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f54c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f550:	d026      	beq.n	800f5a0 <__ssputs_r+0x6c>
 800f552:	6965      	ldr	r5, [r4, #20]
 800f554:	6909      	ldr	r1, [r1, #16]
 800f556:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f55a:	eba3 0901 	sub.w	r9, r3, r1
 800f55e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f562:	1c7b      	adds	r3, r7, #1
 800f564:	444b      	add	r3, r9
 800f566:	106d      	asrs	r5, r5, #1
 800f568:	429d      	cmp	r5, r3
 800f56a:	bf38      	it	cc
 800f56c:	461d      	movcc	r5, r3
 800f56e:	0553      	lsls	r3, r2, #21
 800f570:	d527      	bpl.n	800f5c2 <__ssputs_r+0x8e>
 800f572:	4629      	mov	r1, r5
 800f574:	f7ff fbd0 	bl	800ed18 <_malloc_r>
 800f578:	4606      	mov	r6, r0
 800f57a:	b360      	cbz	r0, 800f5d6 <__ssputs_r+0xa2>
 800f57c:	6921      	ldr	r1, [r4, #16]
 800f57e:	464a      	mov	r2, r9
 800f580:	f000 fa06 	bl	800f990 <memcpy>
 800f584:	89a3      	ldrh	r3, [r4, #12]
 800f586:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f58a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f58e:	81a3      	strh	r3, [r4, #12]
 800f590:	6126      	str	r6, [r4, #16]
 800f592:	6165      	str	r5, [r4, #20]
 800f594:	444e      	add	r6, r9
 800f596:	eba5 0509 	sub.w	r5, r5, r9
 800f59a:	6026      	str	r6, [r4, #0]
 800f59c:	60a5      	str	r5, [r4, #8]
 800f59e:	463e      	mov	r6, r7
 800f5a0:	42be      	cmp	r6, r7
 800f5a2:	d900      	bls.n	800f5a6 <__ssputs_r+0x72>
 800f5a4:	463e      	mov	r6, r7
 800f5a6:	6820      	ldr	r0, [r4, #0]
 800f5a8:	4632      	mov	r2, r6
 800f5aa:	4641      	mov	r1, r8
 800f5ac:	f000 f9c6 	bl	800f93c <memmove>
 800f5b0:	68a3      	ldr	r3, [r4, #8]
 800f5b2:	1b9b      	subs	r3, r3, r6
 800f5b4:	60a3      	str	r3, [r4, #8]
 800f5b6:	6823      	ldr	r3, [r4, #0]
 800f5b8:	4433      	add	r3, r6
 800f5ba:	6023      	str	r3, [r4, #0]
 800f5bc:	2000      	movs	r0, #0
 800f5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5c2:	462a      	mov	r2, r5
 800f5c4:	f000 fa36 	bl	800fa34 <_realloc_r>
 800f5c8:	4606      	mov	r6, r0
 800f5ca:	2800      	cmp	r0, #0
 800f5cc:	d1e0      	bne.n	800f590 <__ssputs_r+0x5c>
 800f5ce:	6921      	ldr	r1, [r4, #16]
 800f5d0:	4650      	mov	r0, sl
 800f5d2:	f7ff fb2d 	bl	800ec30 <_free_r>
 800f5d6:	230c      	movs	r3, #12
 800f5d8:	f8ca 3000 	str.w	r3, [sl]
 800f5dc:	89a3      	ldrh	r3, [r4, #12]
 800f5de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5e2:	81a3      	strh	r3, [r4, #12]
 800f5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f5e8:	e7e9      	b.n	800f5be <__ssputs_r+0x8a>
	...

0800f5ec <_svfiprintf_r>:
 800f5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5f0:	4698      	mov	r8, r3
 800f5f2:	898b      	ldrh	r3, [r1, #12]
 800f5f4:	061b      	lsls	r3, r3, #24
 800f5f6:	b09d      	sub	sp, #116	@ 0x74
 800f5f8:	4607      	mov	r7, r0
 800f5fa:	460d      	mov	r5, r1
 800f5fc:	4614      	mov	r4, r2
 800f5fe:	d510      	bpl.n	800f622 <_svfiprintf_r+0x36>
 800f600:	690b      	ldr	r3, [r1, #16]
 800f602:	b973      	cbnz	r3, 800f622 <_svfiprintf_r+0x36>
 800f604:	2140      	movs	r1, #64	@ 0x40
 800f606:	f7ff fb87 	bl	800ed18 <_malloc_r>
 800f60a:	6028      	str	r0, [r5, #0]
 800f60c:	6128      	str	r0, [r5, #16]
 800f60e:	b930      	cbnz	r0, 800f61e <_svfiprintf_r+0x32>
 800f610:	230c      	movs	r3, #12
 800f612:	603b      	str	r3, [r7, #0]
 800f614:	f04f 30ff 	mov.w	r0, #4294967295
 800f618:	b01d      	add	sp, #116	@ 0x74
 800f61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f61e:	2340      	movs	r3, #64	@ 0x40
 800f620:	616b      	str	r3, [r5, #20]
 800f622:	2300      	movs	r3, #0
 800f624:	9309      	str	r3, [sp, #36]	@ 0x24
 800f626:	2320      	movs	r3, #32
 800f628:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f62c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f630:	2330      	movs	r3, #48	@ 0x30
 800f632:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f7d0 <_svfiprintf_r+0x1e4>
 800f636:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f63a:	f04f 0901 	mov.w	r9, #1
 800f63e:	4623      	mov	r3, r4
 800f640:	469a      	mov	sl, r3
 800f642:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f646:	b10a      	cbz	r2, 800f64c <_svfiprintf_r+0x60>
 800f648:	2a25      	cmp	r2, #37	@ 0x25
 800f64a:	d1f9      	bne.n	800f640 <_svfiprintf_r+0x54>
 800f64c:	ebba 0b04 	subs.w	fp, sl, r4
 800f650:	d00b      	beq.n	800f66a <_svfiprintf_r+0x7e>
 800f652:	465b      	mov	r3, fp
 800f654:	4622      	mov	r2, r4
 800f656:	4629      	mov	r1, r5
 800f658:	4638      	mov	r0, r7
 800f65a:	f7ff ff6b 	bl	800f534 <__ssputs_r>
 800f65e:	3001      	adds	r0, #1
 800f660:	f000 80a7 	beq.w	800f7b2 <_svfiprintf_r+0x1c6>
 800f664:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f666:	445a      	add	r2, fp
 800f668:	9209      	str	r2, [sp, #36]	@ 0x24
 800f66a:	f89a 3000 	ldrb.w	r3, [sl]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	f000 809f 	beq.w	800f7b2 <_svfiprintf_r+0x1c6>
 800f674:	2300      	movs	r3, #0
 800f676:	f04f 32ff 	mov.w	r2, #4294967295
 800f67a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f67e:	f10a 0a01 	add.w	sl, sl, #1
 800f682:	9304      	str	r3, [sp, #16]
 800f684:	9307      	str	r3, [sp, #28]
 800f686:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f68a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f68c:	4654      	mov	r4, sl
 800f68e:	2205      	movs	r2, #5
 800f690:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f694:	484e      	ldr	r0, [pc, #312]	@ (800f7d0 <_svfiprintf_r+0x1e4>)
 800f696:	f7f0 fd9b 	bl	80001d0 <memchr>
 800f69a:	9a04      	ldr	r2, [sp, #16]
 800f69c:	b9d8      	cbnz	r0, 800f6d6 <_svfiprintf_r+0xea>
 800f69e:	06d0      	lsls	r0, r2, #27
 800f6a0:	bf44      	itt	mi
 800f6a2:	2320      	movmi	r3, #32
 800f6a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f6a8:	0711      	lsls	r1, r2, #28
 800f6aa:	bf44      	itt	mi
 800f6ac:	232b      	movmi	r3, #43	@ 0x2b
 800f6ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f6b2:	f89a 3000 	ldrb.w	r3, [sl]
 800f6b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6b8:	d015      	beq.n	800f6e6 <_svfiprintf_r+0xfa>
 800f6ba:	9a07      	ldr	r2, [sp, #28]
 800f6bc:	4654      	mov	r4, sl
 800f6be:	2000      	movs	r0, #0
 800f6c0:	f04f 0c0a 	mov.w	ip, #10
 800f6c4:	4621      	mov	r1, r4
 800f6c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6ca:	3b30      	subs	r3, #48	@ 0x30
 800f6cc:	2b09      	cmp	r3, #9
 800f6ce:	d94b      	bls.n	800f768 <_svfiprintf_r+0x17c>
 800f6d0:	b1b0      	cbz	r0, 800f700 <_svfiprintf_r+0x114>
 800f6d2:	9207      	str	r2, [sp, #28]
 800f6d4:	e014      	b.n	800f700 <_svfiprintf_r+0x114>
 800f6d6:	eba0 0308 	sub.w	r3, r0, r8
 800f6da:	fa09 f303 	lsl.w	r3, r9, r3
 800f6de:	4313      	orrs	r3, r2
 800f6e0:	9304      	str	r3, [sp, #16]
 800f6e2:	46a2      	mov	sl, r4
 800f6e4:	e7d2      	b.n	800f68c <_svfiprintf_r+0xa0>
 800f6e6:	9b03      	ldr	r3, [sp, #12]
 800f6e8:	1d19      	adds	r1, r3, #4
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	9103      	str	r1, [sp, #12]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	bfbb      	ittet	lt
 800f6f2:	425b      	neglt	r3, r3
 800f6f4:	f042 0202 	orrlt.w	r2, r2, #2
 800f6f8:	9307      	strge	r3, [sp, #28]
 800f6fa:	9307      	strlt	r3, [sp, #28]
 800f6fc:	bfb8      	it	lt
 800f6fe:	9204      	strlt	r2, [sp, #16]
 800f700:	7823      	ldrb	r3, [r4, #0]
 800f702:	2b2e      	cmp	r3, #46	@ 0x2e
 800f704:	d10a      	bne.n	800f71c <_svfiprintf_r+0x130>
 800f706:	7863      	ldrb	r3, [r4, #1]
 800f708:	2b2a      	cmp	r3, #42	@ 0x2a
 800f70a:	d132      	bne.n	800f772 <_svfiprintf_r+0x186>
 800f70c:	9b03      	ldr	r3, [sp, #12]
 800f70e:	1d1a      	adds	r2, r3, #4
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	9203      	str	r2, [sp, #12]
 800f714:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f718:	3402      	adds	r4, #2
 800f71a:	9305      	str	r3, [sp, #20]
 800f71c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f7e0 <_svfiprintf_r+0x1f4>
 800f720:	7821      	ldrb	r1, [r4, #0]
 800f722:	2203      	movs	r2, #3
 800f724:	4650      	mov	r0, sl
 800f726:	f7f0 fd53 	bl	80001d0 <memchr>
 800f72a:	b138      	cbz	r0, 800f73c <_svfiprintf_r+0x150>
 800f72c:	9b04      	ldr	r3, [sp, #16]
 800f72e:	eba0 000a 	sub.w	r0, r0, sl
 800f732:	2240      	movs	r2, #64	@ 0x40
 800f734:	4082      	lsls	r2, r0
 800f736:	4313      	orrs	r3, r2
 800f738:	3401      	adds	r4, #1
 800f73a:	9304      	str	r3, [sp, #16]
 800f73c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f740:	4824      	ldr	r0, [pc, #144]	@ (800f7d4 <_svfiprintf_r+0x1e8>)
 800f742:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f746:	2206      	movs	r2, #6
 800f748:	f7f0 fd42 	bl	80001d0 <memchr>
 800f74c:	2800      	cmp	r0, #0
 800f74e:	d036      	beq.n	800f7be <_svfiprintf_r+0x1d2>
 800f750:	4b21      	ldr	r3, [pc, #132]	@ (800f7d8 <_svfiprintf_r+0x1ec>)
 800f752:	bb1b      	cbnz	r3, 800f79c <_svfiprintf_r+0x1b0>
 800f754:	9b03      	ldr	r3, [sp, #12]
 800f756:	3307      	adds	r3, #7
 800f758:	f023 0307 	bic.w	r3, r3, #7
 800f75c:	3308      	adds	r3, #8
 800f75e:	9303      	str	r3, [sp, #12]
 800f760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f762:	4433      	add	r3, r6
 800f764:	9309      	str	r3, [sp, #36]	@ 0x24
 800f766:	e76a      	b.n	800f63e <_svfiprintf_r+0x52>
 800f768:	fb0c 3202 	mla	r2, ip, r2, r3
 800f76c:	460c      	mov	r4, r1
 800f76e:	2001      	movs	r0, #1
 800f770:	e7a8      	b.n	800f6c4 <_svfiprintf_r+0xd8>
 800f772:	2300      	movs	r3, #0
 800f774:	3401      	adds	r4, #1
 800f776:	9305      	str	r3, [sp, #20]
 800f778:	4619      	mov	r1, r3
 800f77a:	f04f 0c0a 	mov.w	ip, #10
 800f77e:	4620      	mov	r0, r4
 800f780:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f784:	3a30      	subs	r2, #48	@ 0x30
 800f786:	2a09      	cmp	r2, #9
 800f788:	d903      	bls.n	800f792 <_svfiprintf_r+0x1a6>
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d0c6      	beq.n	800f71c <_svfiprintf_r+0x130>
 800f78e:	9105      	str	r1, [sp, #20]
 800f790:	e7c4      	b.n	800f71c <_svfiprintf_r+0x130>
 800f792:	fb0c 2101 	mla	r1, ip, r1, r2
 800f796:	4604      	mov	r4, r0
 800f798:	2301      	movs	r3, #1
 800f79a:	e7f0      	b.n	800f77e <_svfiprintf_r+0x192>
 800f79c:	ab03      	add	r3, sp, #12
 800f79e:	9300      	str	r3, [sp, #0]
 800f7a0:	462a      	mov	r2, r5
 800f7a2:	4b0e      	ldr	r3, [pc, #56]	@ (800f7dc <_svfiprintf_r+0x1f0>)
 800f7a4:	a904      	add	r1, sp, #16
 800f7a6:	4638      	mov	r0, r7
 800f7a8:	f7fd fe96 	bl	800d4d8 <_printf_float>
 800f7ac:	1c42      	adds	r2, r0, #1
 800f7ae:	4606      	mov	r6, r0
 800f7b0:	d1d6      	bne.n	800f760 <_svfiprintf_r+0x174>
 800f7b2:	89ab      	ldrh	r3, [r5, #12]
 800f7b4:	065b      	lsls	r3, r3, #25
 800f7b6:	f53f af2d 	bmi.w	800f614 <_svfiprintf_r+0x28>
 800f7ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7bc:	e72c      	b.n	800f618 <_svfiprintf_r+0x2c>
 800f7be:	ab03      	add	r3, sp, #12
 800f7c0:	9300      	str	r3, [sp, #0]
 800f7c2:	462a      	mov	r2, r5
 800f7c4:	4b05      	ldr	r3, [pc, #20]	@ (800f7dc <_svfiprintf_r+0x1f0>)
 800f7c6:	a904      	add	r1, sp, #16
 800f7c8:	4638      	mov	r0, r7
 800f7ca:	f7fe f91d 	bl	800da08 <_printf_i>
 800f7ce:	e7ed      	b.n	800f7ac <_svfiprintf_r+0x1c0>
 800f7d0:	08010c20 	.word	0x08010c20
 800f7d4:	08010c2a 	.word	0x08010c2a
 800f7d8:	0800d4d9 	.word	0x0800d4d9
 800f7dc:	0800f535 	.word	0x0800f535
 800f7e0:	08010c26 	.word	0x08010c26

0800f7e4 <__sflush_r>:
 800f7e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7ec:	0716      	lsls	r6, r2, #28
 800f7ee:	4605      	mov	r5, r0
 800f7f0:	460c      	mov	r4, r1
 800f7f2:	d454      	bmi.n	800f89e <__sflush_r+0xba>
 800f7f4:	684b      	ldr	r3, [r1, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	dc02      	bgt.n	800f800 <__sflush_r+0x1c>
 800f7fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	dd48      	ble.n	800f892 <__sflush_r+0xae>
 800f800:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f802:	2e00      	cmp	r6, #0
 800f804:	d045      	beq.n	800f892 <__sflush_r+0xae>
 800f806:	2300      	movs	r3, #0
 800f808:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f80c:	682f      	ldr	r7, [r5, #0]
 800f80e:	6a21      	ldr	r1, [r4, #32]
 800f810:	602b      	str	r3, [r5, #0]
 800f812:	d030      	beq.n	800f876 <__sflush_r+0x92>
 800f814:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f816:	89a3      	ldrh	r3, [r4, #12]
 800f818:	0759      	lsls	r1, r3, #29
 800f81a:	d505      	bpl.n	800f828 <__sflush_r+0x44>
 800f81c:	6863      	ldr	r3, [r4, #4]
 800f81e:	1ad2      	subs	r2, r2, r3
 800f820:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f822:	b10b      	cbz	r3, 800f828 <__sflush_r+0x44>
 800f824:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f826:	1ad2      	subs	r2, r2, r3
 800f828:	2300      	movs	r3, #0
 800f82a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f82c:	6a21      	ldr	r1, [r4, #32]
 800f82e:	4628      	mov	r0, r5
 800f830:	47b0      	blx	r6
 800f832:	1c43      	adds	r3, r0, #1
 800f834:	89a3      	ldrh	r3, [r4, #12]
 800f836:	d106      	bne.n	800f846 <__sflush_r+0x62>
 800f838:	6829      	ldr	r1, [r5, #0]
 800f83a:	291d      	cmp	r1, #29
 800f83c:	d82b      	bhi.n	800f896 <__sflush_r+0xb2>
 800f83e:	4a2a      	ldr	r2, [pc, #168]	@ (800f8e8 <__sflush_r+0x104>)
 800f840:	410a      	asrs	r2, r1
 800f842:	07d6      	lsls	r6, r2, #31
 800f844:	d427      	bmi.n	800f896 <__sflush_r+0xb2>
 800f846:	2200      	movs	r2, #0
 800f848:	6062      	str	r2, [r4, #4]
 800f84a:	04d9      	lsls	r1, r3, #19
 800f84c:	6922      	ldr	r2, [r4, #16]
 800f84e:	6022      	str	r2, [r4, #0]
 800f850:	d504      	bpl.n	800f85c <__sflush_r+0x78>
 800f852:	1c42      	adds	r2, r0, #1
 800f854:	d101      	bne.n	800f85a <__sflush_r+0x76>
 800f856:	682b      	ldr	r3, [r5, #0]
 800f858:	b903      	cbnz	r3, 800f85c <__sflush_r+0x78>
 800f85a:	6560      	str	r0, [r4, #84]	@ 0x54
 800f85c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f85e:	602f      	str	r7, [r5, #0]
 800f860:	b1b9      	cbz	r1, 800f892 <__sflush_r+0xae>
 800f862:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f866:	4299      	cmp	r1, r3
 800f868:	d002      	beq.n	800f870 <__sflush_r+0x8c>
 800f86a:	4628      	mov	r0, r5
 800f86c:	f7ff f9e0 	bl	800ec30 <_free_r>
 800f870:	2300      	movs	r3, #0
 800f872:	6363      	str	r3, [r4, #52]	@ 0x34
 800f874:	e00d      	b.n	800f892 <__sflush_r+0xae>
 800f876:	2301      	movs	r3, #1
 800f878:	4628      	mov	r0, r5
 800f87a:	47b0      	blx	r6
 800f87c:	4602      	mov	r2, r0
 800f87e:	1c50      	adds	r0, r2, #1
 800f880:	d1c9      	bne.n	800f816 <__sflush_r+0x32>
 800f882:	682b      	ldr	r3, [r5, #0]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d0c6      	beq.n	800f816 <__sflush_r+0x32>
 800f888:	2b1d      	cmp	r3, #29
 800f88a:	d001      	beq.n	800f890 <__sflush_r+0xac>
 800f88c:	2b16      	cmp	r3, #22
 800f88e:	d11e      	bne.n	800f8ce <__sflush_r+0xea>
 800f890:	602f      	str	r7, [r5, #0]
 800f892:	2000      	movs	r0, #0
 800f894:	e022      	b.n	800f8dc <__sflush_r+0xf8>
 800f896:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f89a:	b21b      	sxth	r3, r3
 800f89c:	e01b      	b.n	800f8d6 <__sflush_r+0xf2>
 800f89e:	690f      	ldr	r7, [r1, #16]
 800f8a0:	2f00      	cmp	r7, #0
 800f8a2:	d0f6      	beq.n	800f892 <__sflush_r+0xae>
 800f8a4:	0793      	lsls	r3, r2, #30
 800f8a6:	680e      	ldr	r6, [r1, #0]
 800f8a8:	bf08      	it	eq
 800f8aa:	694b      	ldreq	r3, [r1, #20]
 800f8ac:	600f      	str	r7, [r1, #0]
 800f8ae:	bf18      	it	ne
 800f8b0:	2300      	movne	r3, #0
 800f8b2:	eba6 0807 	sub.w	r8, r6, r7
 800f8b6:	608b      	str	r3, [r1, #8]
 800f8b8:	f1b8 0f00 	cmp.w	r8, #0
 800f8bc:	dde9      	ble.n	800f892 <__sflush_r+0xae>
 800f8be:	6a21      	ldr	r1, [r4, #32]
 800f8c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f8c2:	4643      	mov	r3, r8
 800f8c4:	463a      	mov	r2, r7
 800f8c6:	4628      	mov	r0, r5
 800f8c8:	47b0      	blx	r6
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	dc08      	bgt.n	800f8e0 <__sflush_r+0xfc>
 800f8ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8d6:	81a3      	strh	r3, [r4, #12]
 800f8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8e0:	4407      	add	r7, r0
 800f8e2:	eba8 0800 	sub.w	r8, r8, r0
 800f8e6:	e7e7      	b.n	800f8b8 <__sflush_r+0xd4>
 800f8e8:	dfbffffe 	.word	0xdfbffffe

0800f8ec <_fflush_r>:
 800f8ec:	b538      	push	{r3, r4, r5, lr}
 800f8ee:	690b      	ldr	r3, [r1, #16]
 800f8f0:	4605      	mov	r5, r0
 800f8f2:	460c      	mov	r4, r1
 800f8f4:	b913      	cbnz	r3, 800f8fc <_fflush_r+0x10>
 800f8f6:	2500      	movs	r5, #0
 800f8f8:	4628      	mov	r0, r5
 800f8fa:	bd38      	pop	{r3, r4, r5, pc}
 800f8fc:	b118      	cbz	r0, 800f906 <_fflush_r+0x1a>
 800f8fe:	6a03      	ldr	r3, [r0, #32]
 800f900:	b90b      	cbnz	r3, 800f906 <_fflush_r+0x1a>
 800f902:	f7fe fa2d 	bl	800dd60 <__sinit>
 800f906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d0f3      	beq.n	800f8f6 <_fflush_r+0xa>
 800f90e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f910:	07d0      	lsls	r0, r2, #31
 800f912:	d404      	bmi.n	800f91e <_fflush_r+0x32>
 800f914:	0599      	lsls	r1, r3, #22
 800f916:	d402      	bmi.n	800f91e <_fflush_r+0x32>
 800f918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f91a:	f7fe fb38 	bl	800df8e <__retarget_lock_acquire_recursive>
 800f91e:	4628      	mov	r0, r5
 800f920:	4621      	mov	r1, r4
 800f922:	f7ff ff5f 	bl	800f7e4 <__sflush_r>
 800f926:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f928:	07da      	lsls	r2, r3, #31
 800f92a:	4605      	mov	r5, r0
 800f92c:	d4e4      	bmi.n	800f8f8 <_fflush_r+0xc>
 800f92e:	89a3      	ldrh	r3, [r4, #12]
 800f930:	059b      	lsls	r3, r3, #22
 800f932:	d4e1      	bmi.n	800f8f8 <_fflush_r+0xc>
 800f934:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f936:	f7fe fb2b 	bl	800df90 <__retarget_lock_release_recursive>
 800f93a:	e7dd      	b.n	800f8f8 <_fflush_r+0xc>

0800f93c <memmove>:
 800f93c:	4288      	cmp	r0, r1
 800f93e:	b510      	push	{r4, lr}
 800f940:	eb01 0402 	add.w	r4, r1, r2
 800f944:	d902      	bls.n	800f94c <memmove+0x10>
 800f946:	4284      	cmp	r4, r0
 800f948:	4623      	mov	r3, r4
 800f94a:	d807      	bhi.n	800f95c <memmove+0x20>
 800f94c:	1e43      	subs	r3, r0, #1
 800f94e:	42a1      	cmp	r1, r4
 800f950:	d008      	beq.n	800f964 <memmove+0x28>
 800f952:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f956:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f95a:	e7f8      	b.n	800f94e <memmove+0x12>
 800f95c:	4402      	add	r2, r0
 800f95e:	4601      	mov	r1, r0
 800f960:	428a      	cmp	r2, r1
 800f962:	d100      	bne.n	800f966 <memmove+0x2a>
 800f964:	bd10      	pop	{r4, pc}
 800f966:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f96a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f96e:	e7f7      	b.n	800f960 <memmove+0x24>

0800f970 <_sbrk_r>:
 800f970:	b538      	push	{r3, r4, r5, lr}
 800f972:	4d06      	ldr	r5, [pc, #24]	@ (800f98c <_sbrk_r+0x1c>)
 800f974:	2300      	movs	r3, #0
 800f976:	4604      	mov	r4, r0
 800f978:	4608      	mov	r0, r1
 800f97a:	602b      	str	r3, [r5, #0]
 800f97c:	f7f3 f8e0 	bl	8002b40 <_sbrk>
 800f980:	1c43      	adds	r3, r0, #1
 800f982:	d102      	bne.n	800f98a <_sbrk_r+0x1a>
 800f984:	682b      	ldr	r3, [r5, #0]
 800f986:	b103      	cbz	r3, 800f98a <_sbrk_r+0x1a>
 800f988:	6023      	str	r3, [r4, #0]
 800f98a:	bd38      	pop	{r3, r4, r5, pc}
 800f98c:	20002448 	.word	0x20002448

0800f990 <memcpy>:
 800f990:	440a      	add	r2, r1
 800f992:	4291      	cmp	r1, r2
 800f994:	f100 33ff 	add.w	r3, r0, #4294967295
 800f998:	d100      	bne.n	800f99c <memcpy+0xc>
 800f99a:	4770      	bx	lr
 800f99c:	b510      	push	{r4, lr}
 800f99e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9a6:	4291      	cmp	r1, r2
 800f9a8:	d1f9      	bne.n	800f99e <memcpy+0xe>
 800f9aa:	bd10      	pop	{r4, pc}

0800f9ac <__assert_func>:
 800f9ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f9ae:	4614      	mov	r4, r2
 800f9b0:	461a      	mov	r2, r3
 800f9b2:	4b09      	ldr	r3, [pc, #36]	@ (800f9d8 <__assert_func+0x2c>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	4605      	mov	r5, r0
 800f9b8:	68d8      	ldr	r0, [r3, #12]
 800f9ba:	b954      	cbnz	r4, 800f9d2 <__assert_func+0x26>
 800f9bc:	4b07      	ldr	r3, [pc, #28]	@ (800f9dc <__assert_func+0x30>)
 800f9be:	461c      	mov	r4, r3
 800f9c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f9c4:	9100      	str	r1, [sp, #0]
 800f9c6:	462b      	mov	r3, r5
 800f9c8:	4905      	ldr	r1, [pc, #20]	@ (800f9e0 <__assert_func+0x34>)
 800f9ca:	f000 f86f 	bl	800faac <fiprintf>
 800f9ce:	f000 f87f 	bl	800fad0 <abort>
 800f9d2:	4b04      	ldr	r3, [pc, #16]	@ (800f9e4 <__assert_func+0x38>)
 800f9d4:	e7f4      	b.n	800f9c0 <__assert_func+0x14>
 800f9d6:	bf00      	nop
 800f9d8:	2000010c 	.word	0x2000010c
 800f9dc:	08010c76 	.word	0x08010c76
 800f9e0:	08010c48 	.word	0x08010c48
 800f9e4:	08010c3b 	.word	0x08010c3b

0800f9e8 <_calloc_r>:
 800f9e8:	b570      	push	{r4, r5, r6, lr}
 800f9ea:	fba1 5402 	umull	r5, r4, r1, r2
 800f9ee:	b93c      	cbnz	r4, 800fa00 <_calloc_r+0x18>
 800f9f0:	4629      	mov	r1, r5
 800f9f2:	f7ff f991 	bl	800ed18 <_malloc_r>
 800f9f6:	4606      	mov	r6, r0
 800f9f8:	b928      	cbnz	r0, 800fa06 <_calloc_r+0x1e>
 800f9fa:	2600      	movs	r6, #0
 800f9fc:	4630      	mov	r0, r6
 800f9fe:	bd70      	pop	{r4, r5, r6, pc}
 800fa00:	220c      	movs	r2, #12
 800fa02:	6002      	str	r2, [r0, #0]
 800fa04:	e7f9      	b.n	800f9fa <_calloc_r+0x12>
 800fa06:	462a      	mov	r2, r5
 800fa08:	4621      	mov	r1, r4
 800fa0a:	f7fe fa42 	bl	800de92 <memset>
 800fa0e:	e7f5      	b.n	800f9fc <_calloc_r+0x14>

0800fa10 <__ascii_mbtowc>:
 800fa10:	b082      	sub	sp, #8
 800fa12:	b901      	cbnz	r1, 800fa16 <__ascii_mbtowc+0x6>
 800fa14:	a901      	add	r1, sp, #4
 800fa16:	b142      	cbz	r2, 800fa2a <__ascii_mbtowc+0x1a>
 800fa18:	b14b      	cbz	r3, 800fa2e <__ascii_mbtowc+0x1e>
 800fa1a:	7813      	ldrb	r3, [r2, #0]
 800fa1c:	600b      	str	r3, [r1, #0]
 800fa1e:	7812      	ldrb	r2, [r2, #0]
 800fa20:	1e10      	subs	r0, r2, #0
 800fa22:	bf18      	it	ne
 800fa24:	2001      	movne	r0, #1
 800fa26:	b002      	add	sp, #8
 800fa28:	4770      	bx	lr
 800fa2a:	4610      	mov	r0, r2
 800fa2c:	e7fb      	b.n	800fa26 <__ascii_mbtowc+0x16>
 800fa2e:	f06f 0001 	mvn.w	r0, #1
 800fa32:	e7f8      	b.n	800fa26 <__ascii_mbtowc+0x16>

0800fa34 <_realloc_r>:
 800fa34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa38:	4680      	mov	r8, r0
 800fa3a:	4615      	mov	r5, r2
 800fa3c:	460c      	mov	r4, r1
 800fa3e:	b921      	cbnz	r1, 800fa4a <_realloc_r+0x16>
 800fa40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa44:	4611      	mov	r1, r2
 800fa46:	f7ff b967 	b.w	800ed18 <_malloc_r>
 800fa4a:	b92a      	cbnz	r2, 800fa58 <_realloc_r+0x24>
 800fa4c:	f7ff f8f0 	bl	800ec30 <_free_r>
 800fa50:	2400      	movs	r4, #0
 800fa52:	4620      	mov	r0, r4
 800fa54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa58:	f000 f841 	bl	800fade <_malloc_usable_size_r>
 800fa5c:	4285      	cmp	r5, r0
 800fa5e:	4606      	mov	r6, r0
 800fa60:	d802      	bhi.n	800fa68 <_realloc_r+0x34>
 800fa62:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fa66:	d8f4      	bhi.n	800fa52 <_realloc_r+0x1e>
 800fa68:	4629      	mov	r1, r5
 800fa6a:	4640      	mov	r0, r8
 800fa6c:	f7ff f954 	bl	800ed18 <_malloc_r>
 800fa70:	4607      	mov	r7, r0
 800fa72:	2800      	cmp	r0, #0
 800fa74:	d0ec      	beq.n	800fa50 <_realloc_r+0x1c>
 800fa76:	42b5      	cmp	r5, r6
 800fa78:	462a      	mov	r2, r5
 800fa7a:	4621      	mov	r1, r4
 800fa7c:	bf28      	it	cs
 800fa7e:	4632      	movcs	r2, r6
 800fa80:	f7ff ff86 	bl	800f990 <memcpy>
 800fa84:	4621      	mov	r1, r4
 800fa86:	4640      	mov	r0, r8
 800fa88:	f7ff f8d2 	bl	800ec30 <_free_r>
 800fa8c:	463c      	mov	r4, r7
 800fa8e:	e7e0      	b.n	800fa52 <_realloc_r+0x1e>

0800fa90 <__ascii_wctomb>:
 800fa90:	4603      	mov	r3, r0
 800fa92:	4608      	mov	r0, r1
 800fa94:	b141      	cbz	r1, 800faa8 <__ascii_wctomb+0x18>
 800fa96:	2aff      	cmp	r2, #255	@ 0xff
 800fa98:	d904      	bls.n	800faa4 <__ascii_wctomb+0x14>
 800fa9a:	228a      	movs	r2, #138	@ 0x8a
 800fa9c:	601a      	str	r2, [r3, #0]
 800fa9e:	f04f 30ff 	mov.w	r0, #4294967295
 800faa2:	4770      	bx	lr
 800faa4:	700a      	strb	r2, [r1, #0]
 800faa6:	2001      	movs	r0, #1
 800faa8:	4770      	bx	lr
	...

0800faac <fiprintf>:
 800faac:	b40e      	push	{r1, r2, r3}
 800faae:	b503      	push	{r0, r1, lr}
 800fab0:	4601      	mov	r1, r0
 800fab2:	ab03      	add	r3, sp, #12
 800fab4:	4805      	ldr	r0, [pc, #20]	@ (800facc <fiprintf+0x20>)
 800fab6:	f853 2b04 	ldr.w	r2, [r3], #4
 800faba:	6800      	ldr	r0, [r0, #0]
 800fabc:	9301      	str	r3, [sp, #4]
 800fabe:	f000 f83f 	bl	800fb40 <_vfiprintf_r>
 800fac2:	b002      	add	sp, #8
 800fac4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fac8:	b003      	add	sp, #12
 800faca:	4770      	bx	lr
 800facc:	2000010c 	.word	0x2000010c

0800fad0 <abort>:
 800fad0:	b508      	push	{r3, lr}
 800fad2:	2006      	movs	r0, #6
 800fad4:	f000 fa08 	bl	800fee8 <raise>
 800fad8:	2001      	movs	r0, #1
 800fada:	f7f2 ffb9 	bl	8002a50 <_exit>

0800fade <_malloc_usable_size_r>:
 800fade:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fae2:	1f18      	subs	r0, r3, #4
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	bfbc      	itt	lt
 800fae8:	580b      	ldrlt	r3, [r1, r0]
 800faea:	18c0      	addlt	r0, r0, r3
 800faec:	4770      	bx	lr

0800faee <__sfputc_r>:
 800faee:	6893      	ldr	r3, [r2, #8]
 800faf0:	3b01      	subs	r3, #1
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	b410      	push	{r4}
 800faf6:	6093      	str	r3, [r2, #8]
 800faf8:	da08      	bge.n	800fb0c <__sfputc_r+0x1e>
 800fafa:	6994      	ldr	r4, [r2, #24]
 800fafc:	42a3      	cmp	r3, r4
 800fafe:	db01      	blt.n	800fb04 <__sfputc_r+0x16>
 800fb00:	290a      	cmp	r1, #10
 800fb02:	d103      	bne.n	800fb0c <__sfputc_r+0x1e>
 800fb04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb08:	f000 b932 	b.w	800fd70 <__swbuf_r>
 800fb0c:	6813      	ldr	r3, [r2, #0]
 800fb0e:	1c58      	adds	r0, r3, #1
 800fb10:	6010      	str	r0, [r2, #0]
 800fb12:	7019      	strb	r1, [r3, #0]
 800fb14:	4608      	mov	r0, r1
 800fb16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb1a:	4770      	bx	lr

0800fb1c <__sfputs_r>:
 800fb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb1e:	4606      	mov	r6, r0
 800fb20:	460f      	mov	r7, r1
 800fb22:	4614      	mov	r4, r2
 800fb24:	18d5      	adds	r5, r2, r3
 800fb26:	42ac      	cmp	r4, r5
 800fb28:	d101      	bne.n	800fb2e <__sfputs_r+0x12>
 800fb2a:	2000      	movs	r0, #0
 800fb2c:	e007      	b.n	800fb3e <__sfputs_r+0x22>
 800fb2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb32:	463a      	mov	r2, r7
 800fb34:	4630      	mov	r0, r6
 800fb36:	f7ff ffda 	bl	800faee <__sfputc_r>
 800fb3a:	1c43      	adds	r3, r0, #1
 800fb3c:	d1f3      	bne.n	800fb26 <__sfputs_r+0xa>
 800fb3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fb40 <_vfiprintf_r>:
 800fb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb44:	460d      	mov	r5, r1
 800fb46:	b09d      	sub	sp, #116	@ 0x74
 800fb48:	4614      	mov	r4, r2
 800fb4a:	4698      	mov	r8, r3
 800fb4c:	4606      	mov	r6, r0
 800fb4e:	b118      	cbz	r0, 800fb58 <_vfiprintf_r+0x18>
 800fb50:	6a03      	ldr	r3, [r0, #32]
 800fb52:	b90b      	cbnz	r3, 800fb58 <_vfiprintf_r+0x18>
 800fb54:	f7fe f904 	bl	800dd60 <__sinit>
 800fb58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb5a:	07d9      	lsls	r1, r3, #31
 800fb5c:	d405      	bmi.n	800fb6a <_vfiprintf_r+0x2a>
 800fb5e:	89ab      	ldrh	r3, [r5, #12]
 800fb60:	059a      	lsls	r2, r3, #22
 800fb62:	d402      	bmi.n	800fb6a <_vfiprintf_r+0x2a>
 800fb64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fb66:	f7fe fa12 	bl	800df8e <__retarget_lock_acquire_recursive>
 800fb6a:	89ab      	ldrh	r3, [r5, #12]
 800fb6c:	071b      	lsls	r3, r3, #28
 800fb6e:	d501      	bpl.n	800fb74 <_vfiprintf_r+0x34>
 800fb70:	692b      	ldr	r3, [r5, #16]
 800fb72:	b99b      	cbnz	r3, 800fb9c <_vfiprintf_r+0x5c>
 800fb74:	4629      	mov	r1, r5
 800fb76:	4630      	mov	r0, r6
 800fb78:	f000 f938 	bl	800fdec <__swsetup_r>
 800fb7c:	b170      	cbz	r0, 800fb9c <_vfiprintf_r+0x5c>
 800fb7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb80:	07dc      	lsls	r4, r3, #31
 800fb82:	d504      	bpl.n	800fb8e <_vfiprintf_r+0x4e>
 800fb84:	f04f 30ff 	mov.w	r0, #4294967295
 800fb88:	b01d      	add	sp, #116	@ 0x74
 800fb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb8e:	89ab      	ldrh	r3, [r5, #12]
 800fb90:	0598      	lsls	r0, r3, #22
 800fb92:	d4f7      	bmi.n	800fb84 <_vfiprintf_r+0x44>
 800fb94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fb96:	f7fe f9fb 	bl	800df90 <__retarget_lock_release_recursive>
 800fb9a:	e7f3      	b.n	800fb84 <_vfiprintf_r+0x44>
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fba0:	2320      	movs	r3, #32
 800fba2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fba6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbaa:	2330      	movs	r3, #48	@ 0x30
 800fbac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fd5c <_vfiprintf_r+0x21c>
 800fbb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fbb4:	f04f 0901 	mov.w	r9, #1
 800fbb8:	4623      	mov	r3, r4
 800fbba:	469a      	mov	sl, r3
 800fbbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbc0:	b10a      	cbz	r2, 800fbc6 <_vfiprintf_r+0x86>
 800fbc2:	2a25      	cmp	r2, #37	@ 0x25
 800fbc4:	d1f9      	bne.n	800fbba <_vfiprintf_r+0x7a>
 800fbc6:	ebba 0b04 	subs.w	fp, sl, r4
 800fbca:	d00b      	beq.n	800fbe4 <_vfiprintf_r+0xa4>
 800fbcc:	465b      	mov	r3, fp
 800fbce:	4622      	mov	r2, r4
 800fbd0:	4629      	mov	r1, r5
 800fbd2:	4630      	mov	r0, r6
 800fbd4:	f7ff ffa2 	bl	800fb1c <__sfputs_r>
 800fbd8:	3001      	adds	r0, #1
 800fbda:	f000 80a7 	beq.w	800fd2c <_vfiprintf_r+0x1ec>
 800fbde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fbe0:	445a      	add	r2, fp
 800fbe2:	9209      	str	r2, [sp, #36]	@ 0x24
 800fbe4:	f89a 3000 	ldrb.w	r3, [sl]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	f000 809f 	beq.w	800fd2c <_vfiprintf_r+0x1ec>
 800fbee:	2300      	movs	r3, #0
 800fbf0:	f04f 32ff 	mov.w	r2, #4294967295
 800fbf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fbf8:	f10a 0a01 	add.w	sl, sl, #1
 800fbfc:	9304      	str	r3, [sp, #16]
 800fbfe:	9307      	str	r3, [sp, #28]
 800fc00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fc04:	931a      	str	r3, [sp, #104]	@ 0x68
 800fc06:	4654      	mov	r4, sl
 800fc08:	2205      	movs	r2, #5
 800fc0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc0e:	4853      	ldr	r0, [pc, #332]	@ (800fd5c <_vfiprintf_r+0x21c>)
 800fc10:	f7f0 fade 	bl	80001d0 <memchr>
 800fc14:	9a04      	ldr	r2, [sp, #16]
 800fc16:	b9d8      	cbnz	r0, 800fc50 <_vfiprintf_r+0x110>
 800fc18:	06d1      	lsls	r1, r2, #27
 800fc1a:	bf44      	itt	mi
 800fc1c:	2320      	movmi	r3, #32
 800fc1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fc22:	0713      	lsls	r3, r2, #28
 800fc24:	bf44      	itt	mi
 800fc26:	232b      	movmi	r3, #43	@ 0x2b
 800fc28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fc2c:	f89a 3000 	ldrb.w	r3, [sl]
 800fc30:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc32:	d015      	beq.n	800fc60 <_vfiprintf_r+0x120>
 800fc34:	9a07      	ldr	r2, [sp, #28]
 800fc36:	4654      	mov	r4, sl
 800fc38:	2000      	movs	r0, #0
 800fc3a:	f04f 0c0a 	mov.w	ip, #10
 800fc3e:	4621      	mov	r1, r4
 800fc40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc44:	3b30      	subs	r3, #48	@ 0x30
 800fc46:	2b09      	cmp	r3, #9
 800fc48:	d94b      	bls.n	800fce2 <_vfiprintf_r+0x1a2>
 800fc4a:	b1b0      	cbz	r0, 800fc7a <_vfiprintf_r+0x13a>
 800fc4c:	9207      	str	r2, [sp, #28]
 800fc4e:	e014      	b.n	800fc7a <_vfiprintf_r+0x13a>
 800fc50:	eba0 0308 	sub.w	r3, r0, r8
 800fc54:	fa09 f303 	lsl.w	r3, r9, r3
 800fc58:	4313      	orrs	r3, r2
 800fc5a:	9304      	str	r3, [sp, #16]
 800fc5c:	46a2      	mov	sl, r4
 800fc5e:	e7d2      	b.n	800fc06 <_vfiprintf_r+0xc6>
 800fc60:	9b03      	ldr	r3, [sp, #12]
 800fc62:	1d19      	adds	r1, r3, #4
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	9103      	str	r1, [sp, #12]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	bfbb      	ittet	lt
 800fc6c:	425b      	neglt	r3, r3
 800fc6e:	f042 0202 	orrlt.w	r2, r2, #2
 800fc72:	9307      	strge	r3, [sp, #28]
 800fc74:	9307      	strlt	r3, [sp, #28]
 800fc76:	bfb8      	it	lt
 800fc78:	9204      	strlt	r2, [sp, #16]
 800fc7a:	7823      	ldrb	r3, [r4, #0]
 800fc7c:	2b2e      	cmp	r3, #46	@ 0x2e
 800fc7e:	d10a      	bne.n	800fc96 <_vfiprintf_r+0x156>
 800fc80:	7863      	ldrb	r3, [r4, #1]
 800fc82:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc84:	d132      	bne.n	800fcec <_vfiprintf_r+0x1ac>
 800fc86:	9b03      	ldr	r3, [sp, #12]
 800fc88:	1d1a      	adds	r2, r3, #4
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	9203      	str	r2, [sp, #12]
 800fc8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fc92:	3402      	adds	r4, #2
 800fc94:	9305      	str	r3, [sp, #20]
 800fc96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fd6c <_vfiprintf_r+0x22c>
 800fc9a:	7821      	ldrb	r1, [r4, #0]
 800fc9c:	2203      	movs	r2, #3
 800fc9e:	4650      	mov	r0, sl
 800fca0:	f7f0 fa96 	bl	80001d0 <memchr>
 800fca4:	b138      	cbz	r0, 800fcb6 <_vfiprintf_r+0x176>
 800fca6:	9b04      	ldr	r3, [sp, #16]
 800fca8:	eba0 000a 	sub.w	r0, r0, sl
 800fcac:	2240      	movs	r2, #64	@ 0x40
 800fcae:	4082      	lsls	r2, r0
 800fcb0:	4313      	orrs	r3, r2
 800fcb2:	3401      	adds	r4, #1
 800fcb4:	9304      	str	r3, [sp, #16]
 800fcb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcba:	4829      	ldr	r0, [pc, #164]	@ (800fd60 <_vfiprintf_r+0x220>)
 800fcbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fcc0:	2206      	movs	r2, #6
 800fcc2:	f7f0 fa85 	bl	80001d0 <memchr>
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	d03f      	beq.n	800fd4a <_vfiprintf_r+0x20a>
 800fcca:	4b26      	ldr	r3, [pc, #152]	@ (800fd64 <_vfiprintf_r+0x224>)
 800fccc:	bb1b      	cbnz	r3, 800fd16 <_vfiprintf_r+0x1d6>
 800fcce:	9b03      	ldr	r3, [sp, #12]
 800fcd0:	3307      	adds	r3, #7
 800fcd2:	f023 0307 	bic.w	r3, r3, #7
 800fcd6:	3308      	adds	r3, #8
 800fcd8:	9303      	str	r3, [sp, #12]
 800fcda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcdc:	443b      	add	r3, r7
 800fcde:	9309      	str	r3, [sp, #36]	@ 0x24
 800fce0:	e76a      	b.n	800fbb8 <_vfiprintf_r+0x78>
 800fce2:	fb0c 3202 	mla	r2, ip, r2, r3
 800fce6:	460c      	mov	r4, r1
 800fce8:	2001      	movs	r0, #1
 800fcea:	e7a8      	b.n	800fc3e <_vfiprintf_r+0xfe>
 800fcec:	2300      	movs	r3, #0
 800fcee:	3401      	adds	r4, #1
 800fcf0:	9305      	str	r3, [sp, #20]
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	f04f 0c0a 	mov.w	ip, #10
 800fcf8:	4620      	mov	r0, r4
 800fcfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fcfe:	3a30      	subs	r2, #48	@ 0x30
 800fd00:	2a09      	cmp	r2, #9
 800fd02:	d903      	bls.n	800fd0c <_vfiprintf_r+0x1cc>
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d0c6      	beq.n	800fc96 <_vfiprintf_r+0x156>
 800fd08:	9105      	str	r1, [sp, #20]
 800fd0a:	e7c4      	b.n	800fc96 <_vfiprintf_r+0x156>
 800fd0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd10:	4604      	mov	r4, r0
 800fd12:	2301      	movs	r3, #1
 800fd14:	e7f0      	b.n	800fcf8 <_vfiprintf_r+0x1b8>
 800fd16:	ab03      	add	r3, sp, #12
 800fd18:	9300      	str	r3, [sp, #0]
 800fd1a:	462a      	mov	r2, r5
 800fd1c:	4b12      	ldr	r3, [pc, #72]	@ (800fd68 <_vfiprintf_r+0x228>)
 800fd1e:	a904      	add	r1, sp, #16
 800fd20:	4630      	mov	r0, r6
 800fd22:	f7fd fbd9 	bl	800d4d8 <_printf_float>
 800fd26:	4607      	mov	r7, r0
 800fd28:	1c78      	adds	r0, r7, #1
 800fd2a:	d1d6      	bne.n	800fcda <_vfiprintf_r+0x19a>
 800fd2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fd2e:	07d9      	lsls	r1, r3, #31
 800fd30:	d405      	bmi.n	800fd3e <_vfiprintf_r+0x1fe>
 800fd32:	89ab      	ldrh	r3, [r5, #12]
 800fd34:	059a      	lsls	r2, r3, #22
 800fd36:	d402      	bmi.n	800fd3e <_vfiprintf_r+0x1fe>
 800fd38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fd3a:	f7fe f929 	bl	800df90 <__retarget_lock_release_recursive>
 800fd3e:	89ab      	ldrh	r3, [r5, #12]
 800fd40:	065b      	lsls	r3, r3, #25
 800fd42:	f53f af1f 	bmi.w	800fb84 <_vfiprintf_r+0x44>
 800fd46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd48:	e71e      	b.n	800fb88 <_vfiprintf_r+0x48>
 800fd4a:	ab03      	add	r3, sp, #12
 800fd4c:	9300      	str	r3, [sp, #0]
 800fd4e:	462a      	mov	r2, r5
 800fd50:	4b05      	ldr	r3, [pc, #20]	@ (800fd68 <_vfiprintf_r+0x228>)
 800fd52:	a904      	add	r1, sp, #16
 800fd54:	4630      	mov	r0, r6
 800fd56:	f7fd fe57 	bl	800da08 <_printf_i>
 800fd5a:	e7e4      	b.n	800fd26 <_vfiprintf_r+0x1e6>
 800fd5c:	08010c20 	.word	0x08010c20
 800fd60:	08010c2a 	.word	0x08010c2a
 800fd64:	0800d4d9 	.word	0x0800d4d9
 800fd68:	0800fb1d 	.word	0x0800fb1d
 800fd6c:	08010c26 	.word	0x08010c26

0800fd70 <__swbuf_r>:
 800fd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd72:	460e      	mov	r6, r1
 800fd74:	4614      	mov	r4, r2
 800fd76:	4605      	mov	r5, r0
 800fd78:	b118      	cbz	r0, 800fd82 <__swbuf_r+0x12>
 800fd7a:	6a03      	ldr	r3, [r0, #32]
 800fd7c:	b90b      	cbnz	r3, 800fd82 <__swbuf_r+0x12>
 800fd7e:	f7fd ffef 	bl	800dd60 <__sinit>
 800fd82:	69a3      	ldr	r3, [r4, #24]
 800fd84:	60a3      	str	r3, [r4, #8]
 800fd86:	89a3      	ldrh	r3, [r4, #12]
 800fd88:	071a      	lsls	r2, r3, #28
 800fd8a:	d501      	bpl.n	800fd90 <__swbuf_r+0x20>
 800fd8c:	6923      	ldr	r3, [r4, #16]
 800fd8e:	b943      	cbnz	r3, 800fda2 <__swbuf_r+0x32>
 800fd90:	4621      	mov	r1, r4
 800fd92:	4628      	mov	r0, r5
 800fd94:	f000 f82a 	bl	800fdec <__swsetup_r>
 800fd98:	b118      	cbz	r0, 800fda2 <__swbuf_r+0x32>
 800fd9a:	f04f 37ff 	mov.w	r7, #4294967295
 800fd9e:	4638      	mov	r0, r7
 800fda0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fda2:	6823      	ldr	r3, [r4, #0]
 800fda4:	6922      	ldr	r2, [r4, #16]
 800fda6:	1a98      	subs	r0, r3, r2
 800fda8:	6963      	ldr	r3, [r4, #20]
 800fdaa:	b2f6      	uxtb	r6, r6
 800fdac:	4283      	cmp	r3, r0
 800fdae:	4637      	mov	r7, r6
 800fdb0:	dc05      	bgt.n	800fdbe <__swbuf_r+0x4e>
 800fdb2:	4621      	mov	r1, r4
 800fdb4:	4628      	mov	r0, r5
 800fdb6:	f7ff fd99 	bl	800f8ec <_fflush_r>
 800fdba:	2800      	cmp	r0, #0
 800fdbc:	d1ed      	bne.n	800fd9a <__swbuf_r+0x2a>
 800fdbe:	68a3      	ldr	r3, [r4, #8]
 800fdc0:	3b01      	subs	r3, #1
 800fdc2:	60a3      	str	r3, [r4, #8]
 800fdc4:	6823      	ldr	r3, [r4, #0]
 800fdc6:	1c5a      	adds	r2, r3, #1
 800fdc8:	6022      	str	r2, [r4, #0]
 800fdca:	701e      	strb	r6, [r3, #0]
 800fdcc:	6962      	ldr	r2, [r4, #20]
 800fdce:	1c43      	adds	r3, r0, #1
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	d004      	beq.n	800fdde <__swbuf_r+0x6e>
 800fdd4:	89a3      	ldrh	r3, [r4, #12]
 800fdd6:	07db      	lsls	r3, r3, #31
 800fdd8:	d5e1      	bpl.n	800fd9e <__swbuf_r+0x2e>
 800fdda:	2e0a      	cmp	r6, #10
 800fddc:	d1df      	bne.n	800fd9e <__swbuf_r+0x2e>
 800fdde:	4621      	mov	r1, r4
 800fde0:	4628      	mov	r0, r5
 800fde2:	f7ff fd83 	bl	800f8ec <_fflush_r>
 800fde6:	2800      	cmp	r0, #0
 800fde8:	d0d9      	beq.n	800fd9e <__swbuf_r+0x2e>
 800fdea:	e7d6      	b.n	800fd9a <__swbuf_r+0x2a>

0800fdec <__swsetup_r>:
 800fdec:	b538      	push	{r3, r4, r5, lr}
 800fdee:	4b29      	ldr	r3, [pc, #164]	@ (800fe94 <__swsetup_r+0xa8>)
 800fdf0:	4605      	mov	r5, r0
 800fdf2:	6818      	ldr	r0, [r3, #0]
 800fdf4:	460c      	mov	r4, r1
 800fdf6:	b118      	cbz	r0, 800fe00 <__swsetup_r+0x14>
 800fdf8:	6a03      	ldr	r3, [r0, #32]
 800fdfa:	b90b      	cbnz	r3, 800fe00 <__swsetup_r+0x14>
 800fdfc:	f7fd ffb0 	bl	800dd60 <__sinit>
 800fe00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe04:	0719      	lsls	r1, r3, #28
 800fe06:	d422      	bmi.n	800fe4e <__swsetup_r+0x62>
 800fe08:	06da      	lsls	r2, r3, #27
 800fe0a:	d407      	bmi.n	800fe1c <__swsetup_r+0x30>
 800fe0c:	2209      	movs	r2, #9
 800fe0e:	602a      	str	r2, [r5, #0]
 800fe10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe14:	81a3      	strh	r3, [r4, #12]
 800fe16:	f04f 30ff 	mov.w	r0, #4294967295
 800fe1a:	e033      	b.n	800fe84 <__swsetup_r+0x98>
 800fe1c:	0758      	lsls	r0, r3, #29
 800fe1e:	d512      	bpl.n	800fe46 <__swsetup_r+0x5a>
 800fe20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fe22:	b141      	cbz	r1, 800fe36 <__swsetup_r+0x4a>
 800fe24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fe28:	4299      	cmp	r1, r3
 800fe2a:	d002      	beq.n	800fe32 <__swsetup_r+0x46>
 800fe2c:	4628      	mov	r0, r5
 800fe2e:	f7fe feff 	bl	800ec30 <_free_r>
 800fe32:	2300      	movs	r3, #0
 800fe34:	6363      	str	r3, [r4, #52]	@ 0x34
 800fe36:	89a3      	ldrh	r3, [r4, #12]
 800fe38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fe3c:	81a3      	strh	r3, [r4, #12]
 800fe3e:	2300      	movs	r3, #0
 800fe40:	6063      	str	r3, [r4, #4]
 800fe42:	6923      	ldr	r3, [r4, #16]
 800fe44:	6023      	str	r3, [r4, #0]
 800fe46:	89a3      	ldrh	r3, [r4, #12]
 800fe48:	f043 0308 	orr.w	r3, r3, #8
 800fe4c:	81a3      	strh	r3, [r4, #12]
 800fe4e:	6923      	ldr	r3, [r4, #16]
 800fe50:	b94b      	cbnz	r3, 800fe66 <__swsetup_r+0x7a>
 800fe52:	89a3      	ldrh	r3, [r4, #12]
 800fe54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fe58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fe5c:	d003      	beq.n	800fe66 <__swsetup_r+0x7a>
 800fe5e:	4621      	mov	r1, r4
 800fe60:	4628      	mov	r0, r5
 800fe62:	f000 f883 	bl	800ff6c <__smakebuf_r>
 800fe66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe6a:	f013 0201 	ands.w	r2, r3, #1
 800fe6e:	d00a      	beq.n	800fe86 <__swsetup_r+0x9a>
 800fe70:	2200      	movs	r2, #0
 800fe72:	60a2      	str	r2, [r4, #8]
 800fe74:	6962      	ldr	r2, [r4, #20]
 800fe76:	4252      	negs	r2, r2
 800fe78:	61a2      	str	r2, [r4, #24]
 800fe7a:	6922      	ldr	r2, [r4, #16]
 800fe7c:	b942      	cbnz	r2, 800fe90 <__swsetup_r+0xa4>
 800fe7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fe82:	d1c5      	bne.n	800fe10 <__swsetup_r+0x24>
 800fe84:	bd38      	pop	{r3, r4, r5, pc}
 800fe86:	0799      	lsls	r1, r3, #30
 800fe88:	bf58      	it	pl
 800fe8a:	6962      	ldrpl	r2, [r4, #20]
 800fe8c:	60a2      	str	r2, [r4, #8]
 800fe8e:	e7f4      	b.n	800fe7a <__swsetup_r+0x8e>
 800fe90:	2000      	movs	r0, #0
 800fe92:	e7f7      	b.n	800fe84 <__swsetup_r+0x98>
 800fe94:	2000010c 	.word	0x2000010c

0800fe98 <_raise_r>:
 800fe98:	291f      	cmp	r1, #31
 800fe9a:	b538      	push	{r3, r4, r5, lr}
 800fe9c:	4605      	mov	r5, r0
 800fe9e:	460c      	mov	r4, r1
 800fea0:	d904      	bls.n	800feac <_raise_r+0x14>
 800fea2:	2316      	movs	r3, #22
 800fea4:	6003      	str	r3, [r0, #0]
 800fea6:	f04f 30ff 	mov.w	r0, #4294967295
 800feaa:	bd38      	pop	{r3, r4, r5, pc}
 800feac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800feae:	b112      	cbz	r2, 800feb6 <_raise_r+0x1e>
 800feb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800feb4:	b94b      	cbnz	r3, 800feca <_raise_r+0x32>
 800feb6:	4628      	mov	r0, r5
 800feb8:	f000 f830 	bl	800ff1c <_getpid_r>
 800febc:	4622      	mov	r2, r4
 800febe:	4601      	mov	r1, r0
 800fec0:	4628      	mov	r0, r5
 800fec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fec6:	f000 b817 	b.w	800fef8 <_kill_r>
 800feca:	2b01      	cmp	r3, #1
 800fecc:	d00a      	beq.n	800fee4 <_raise_r+0x4c>
 800fece:	1c59      	adds	r1, r3, #1
 800fed0:	d103      	bne.n	800feda <_raise_r+0x42>
 800fed2:	2316      	movs	r3, #22
 800fed4:	6003      	str	r3, [r0, #0]
 800fed6:	2001      	movs	r0, #1
 800fed8:	e7e7      	b.n	800feaa <_raise_r+0x12>
 800feda:	2100      	movs	r1, #0
 800fedc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fee0:	4620      	mov	r0, r4
 800fee2:	4798      	blx	r3
 800fee4:	2000      	movs	r0, #0
 800fee6:	e7e0      	b.n	800feaa <_raise_r+0x12>

0800fee8 <raise>:
 800fee8:	4b02      	ldr	r3, [pc, #8]	@ (800fef4 <raise+0xc>)
 800feea:	4601      	mov	r1, r0
 800feec:	6818      	ldr	r0, [r3, #0]
 800feee:	f7ff bfd3 	b.w	800fe98 <_raise_r>
 800fef2:	bf00      	nop
 800fef4:	2000010c 	.word	0x2000010c

0800fef8 <_kill_r>:
 800fef8:	b538      	push	{r3, r4, r5, lr}
 800fefa:	4d07      	ldr	r5, [pc, #28]	@ (800ff18 <_kill_r+0x20>)
 800fefc:	2300      	movs	r3, #0
 800fefe:	4604      	mov	r4, r0
 800ff00:	4608      	mov	r0, r1
 800ff02:	4611      	mov	r1, r2
 800ff04:	602b      	str	r3, [r5, #0]
 800ff06:	f7f2 fd93 	bl	8002a30 <_kill>
 800ff0a:	1c43      	adds	r3, r0, #1
 800ff0c:	d102      	bne.n	800ff14 <_kill_r+0x1c>
 800ff0e:	682b      	ldr	r3, [r5, #0]
 800ff10:	b103      	cbz	r3, 800ff14 <_kill_r+0x1c>
 800ff12:	6023      	str	r3, [r4, #0]
 800ff14:	bd38      	pop	{r3, r4, r5, pc}
 800ff16:	bf00      	nop
 800ff18:	20002448 	.word	0x20002448

0800ff1c <_getpid_r>:
 800ff1c:	f7f2 bd80 	b.w	8002a20 <_getpid>

0800ff20 <__swhatbuf_r>:
 800ff20:	b570      	push	{r4, r5, r6, lr}
 800ff22:	460c      	mov	r4, r1
 800ff24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff28:	2900      	cmp	r1, #0
 800ff2a:	b096      	sub	sp, #88	@ 0x58
 800ff2c:	4615      	mov	r5, r2
 800ff2e:	461e      	mov	r6, r3
 800ff30:	da0d      	bge.n	800ff4e <__swhatbuf_r+0x2e>
 800ff32:	89a3      	ldrh	r3, [r4, #12]
 800ff34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ff38:	f04f 0100 	mov.w	r1, #0
 800ff3c:	bf14      	ite	ne
 800ff3e:	2340      	movne	r3, #64	@ 0x40
 800ff40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ff44:	2000      	movs	r0, #0
 800ff46:	6031      	str	r1, [r6, #0]
 800ff48:	602b      	str	r3, [r5, #0]
 800ff4a:	b016      	add	sp, #88	@ 0x58
 800ff4c:	bd70      	pop	{r4, r5, r6, pc}
 800ff4e:	466a      	mov	r2, sp
 800ff50:	f000 f848 	bl	800ffe4 <_fstat_r>
 800ff54:	2800      	cmp	r0, #0
 800ff56:	dbec      	blt.n	800ff32 <__swhatbuf_r+0x12>
 800ff58:	9901      	ldr	r1, [sp, #4]
 800ff5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ff5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ff62:	4259      	negs	r1, r3
 800ff64:	4159      	adcs	r1, r3
 800ff66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff6a:	e7eb      	b.n	800ff44 <__swhatbuf_r+0x24>

0800ff6c <__smakebuf_r>:
 800ff6c:	898b      	ldrh	r3, [r1, #12]
 800ff6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff70:	079d      	lsls	r5, r3, #30
 800ff72:	4606      	mov	r6, r0
 800ff74:	460c      	mov	r4, r1
 800ff76:	d507      	bpl.n	800ff88 <__smakebuf_r+0x1c>
 800ff78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ff7c:	6023      	str	r3, [r4, #0]
 800ff7e:	6123      	str	r3, [r4, #16]
 800ff80:	2301      	movs	r3, #1
 800ff82:	6163      	str	r3, [r4, #20]
 800ff84:	b003      	add	sp, #12
 800ff86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff88:	ab01      	add	r3, sp, #4
 800ff8a:	466a      	mov	r2, sp
 800ff8c:	f7ff ffc8 	bl	800ff20 <__swhatbuf_r>
 800ff90:	9f00      	ldr	r7, [sp, #0]
 800ff92:	4605      	mov	r5, r0
 800ff94:	4639      	mov	r1, r7
 800ff96:	4630      	mov	r0, r6
 800ff98:	f7fe febe 	bl	800ed18 <_malloc_r>
 800ff9c:	b948      	cbnz	r0, 800ffb2 <__smakebuf_r+0x46>
 800ff9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffa2:	059a      	lsls	r2, r3, #22
 800ffa4:	d4ee      	bmi.n	800ff84 <__smakebuf_r+0x18>
 800ffa6:	f023 0303 	bic.w	r3, r3, #3
 800ffaa:	f043 0302 	orr.w	r3, r3, #2
 800ffae:	81a3      	strh	r3, [r4, #12]
 800ffb0:	e7e2      	b.n	800ff78 <__smakebuf_r+0xc>
 800ffb2:	89a3      	ldrh	r3, [r4, #12]
 800ffb4:	6020      	str	r0, [r4, #0]
 800ffb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ffba:	81a3      	strh	r3, [r4, #12]
 800ffbc:	9b01      	ldr	r3, [sp, #4]
 800ffbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ffc2:	b15b      	cbz	r3, 800ffdc <__smakebuf_r+0x70>
 800ffc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffc8:	4630      	mov	r0, r6
 800ffca:	f000 f81d 	bl	8010008 <_isatty_r>
 800ffce:	b128      	cbz	r0, 800ffdc <__smakebuf_r+0x70>
 800ffd0:	89a3      	ldrh	r3, [r4, #12]
 800ffd2:	f023 0303 	bic.w	r3, r3, #3
 800ffd6:	f043 0301 	orr.w	r3, r3, #1
 800ffda:	81a3      	strh	r3, [r4, #12]
 800ffdc:	89a3      	ldrh	r3, [r4, #12]
 800ffde:	431d      	orrs	r5, r3
 800ffe0:	81a5      	strh	r5, [r4, #12]
 800ffe2:	e7cf      	b.n	800ff84 <__smakebuf_r+0x18>

0800ffe4 <_fstat_r>:
 800ffe4:	b538      	push	{r3, r4, r5, lr}
 800ffe6:	4d07      	ldr	r5, [pc, #28]	@ (8010004 <_fstat_r+0x20>)
 800ffe8:	2300      	movs	r3, #0
 800ffea:	4604      	mov	r4, r0
 800ffec:	4608      	mov	r0, r1
 800ffee:	4611      	mov	r1, r2
 800fff0:	602b      	str	r3, [r5, #0]
 800fff2:	f7f2 fd7d 	bl	8002af0 <_fstat>
 800fff6:	1c43      	adds	r3, r0, #1
 800fff8:	d102      	bne.n	8010000 <_fstat_r+0x1c>
 800fffa:	682b      	ldr	r3, [r5, #0]
 800fffc:	b103      	cbz	r3, 8010000 <_fstat_r+0x1c>
 800fffe:	6023      	str	r3, [r4, #0]
 8010000:	bd38      	pop	{r3, r4, r5, pc}
 8010002:	bf00      	nop
 8010004:	20002448 	.word	0x20002448

08010008 <_isatty_r>:
 8010008:	b538      	push	{r3, r4, r5, lr}
 801000a:	4d06      	ldr	r5, [pc, #24]	@ (8010024 <_isatty_r+0x1c>)
 801000c:	2300      	movs	r3, #0
 801000e:	4604      	mov	r4, r0
 8010010:	4608      	mov	r0, r1
 8010012:	602b      	str	r3, [r5, #0]
 8010014:	f7f2 fd7c 	bl	8002b10 <_isatty>
 8010018:	1c43      	adds	r3, r0, #1
 801001a:	d102      	bne.n	8010022 <_isatty_r+0x1a>
 801001c:	682b      	ldr	r3, [r5, #0]
 801001e:	b103      	cbz	r3, 8010022 <_isatty_r+0x1a>
 8010020:	6023      	str	r3, [r4, #0]
 8010022:	bd38      	pop	{r3, r4, r5, pc}
 8010024:	20002448 	.word	0x20002448

08010028 <log>:
 8010028:	b538      	push	{r3, r4, r5, lr}
 801002a:	ed2d 8b02 	vpush	{d8}
 801002e:	ec55 4b10 	vmov	r4, r5, d0
 8010032:	f000 f949 	bl	80102c8 <__ieee754_log>
 8010036:	4622      	mov	r2, r4
 8010038:	462b      	mov	r3, r5
 801003a:	4620      	mov	r0, r4
 801003c:	4629      	mov	r1, r5
 801003e:	eeb0 8a40 	vmov.f32	s16, s0
 8010042:	eef0 8a60 	vmov.f32	s17, s1
 8010046:	f7f0 fd71 	bl	8000b2c <__aeabi_dcmpun>
 801004a:	b998      	cbnz	r0, 8010074 <log+0x4c>
 801004c:	2200      	movs	r2, #0
 801004e:	2300      	movs	r3, #0
 8010050:	4620      	mov	r0, r4
 8010052:	4629      	mov	r1, r5
 8010054:	f7f0 fd60 	bl	8000b18 <__aeabi_dcmpgt>
 8010058:	b960      	cbnz	r0, 8010074 <log+0x4c>
 801005a:	2200      	movs	r2, #0
 801005c:	2300      	movs	r3, #0
 801005e:	4620      	mov	r0, r4
 8010060:	4629      	mov	r1, r5
 8010062:	f7f0 fd31 	bl	8000ac8 <__aeabi_dcmpeq>
 8010066:	b160      	cbz	r0, 8010082 <log+0x5a>
 8010068:	f7fd ff66 	bl	800df38 <__errno>
 801006c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8010098 <log+0x70>
 8010070:	2322      	movs	r3, #34	@ 0x22
 8010072:	6003      	str	r3, [r0, #0]
 8010074:	eeb0 0a48 	vmov.f32	s0, s16
 8010078:	eef0 0a68 	vmov.f32	s1, s17
 801007c:	ecbd 8b02 	vpop	{d8}
 8010080:	bd38      	pop	{r3, r4, r5, pc}
 8010082:	f7fd ff59 	bl	800df38 <__errno>
 8010086:	ecbd 8b02 	vpop	{d8}
 801008a:	2321      	movs	r3, #33	@ 0x21
 801008c:	6003      	str	r3, [r0, #0]
 801008e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010092:	4803      	ldr	r0, [pc, #12]	@ (80100a0 <log+0x78>)
 8010094:	f000 b834 	b.w	8010100 <nan>
 8010098:	00000000 	.word	0x00000000
 801009c:	fff00000 	.word	0xfff00000
 80100a0:	08010c76 	.word	0x08010c76

080100a4 <sqrt>:
 80100a4:	b538      	push	{r3, r4, r5, lr}
 80100a6:	ed2d 8b02 	vpush	{d8}
 80100aa:	ec55 4b10 	vmov	r4, r5, d0
 80100ae:	f000 f82f 	bl	8010110 <__ieee754_sqrt>
 80100b2:	4622      	mov	r2, r4
 80100b4:	462b      	mov	r3, r5
 80100b6:	4620      	mov	r0, r4
 80100b8:	4629      	mov	r1, r5
 80100ba:	eeb0 8a40 	vmov.f32	s16, s0
 80100be:	eef0 8a60 	vmov.f32	s17, s1
 80100c2:	f7f0 fd33 	bl	8000b2c <__aeabi_dcmpun>
 80100c6:	b990      	cbnz	r0, 80100ee <sqrt+0x4a>
 80100c8:	2200      	movs	r2, #0
 80100ca:	2300      	movs	r3, #0
 80100cc:	4620      	mov	r0, r4
 80100ce:	4629      	mov	r1, r5
 80100d0:	f7f0 fd04 	bl	8000adc <__aeabi_dcmplt>
 80100d4:	b158      	cbz	r0, 80100ee <sqrt+0x4a>
 80100d6:	f7fd ff2f 	bl	800df38 <__errno>
 80100da:	2321      	movs	r3, #33	@ 0x21
 80100dc:	6003      	str	r3, [r0, #0]
 80100de:	2200      	movs	r2, #0
 80100e0:	2300      	movs	r3, #0
 80100e2:	4610      	mov	r0, r2
 80100e4:	4619      	mov	r1, r3
 80100e6:	f7f0 fbb1 	bl	800084c <__aeabi_ddiv>
 80100ea:	ec41 0b18 	vmov	d8, r0, r1
 80100ee:	eeb0 0a48 	vmov.f32	s0, s16
 80100f2:	eef0 0a68 	vmov.f32	s1, s17
 80100f6:	ecbd 8b02 	vpop	{d8}
 80100fa:	bd38      	pop	{r3, r4, r5, pc}
 80100fc:	0000      	movs	r0, r0
	...

08010100 <nan>:
 8010100:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010108 <nan+0x8>
 8010104:	4770      	bx	lr
 8010106:	bf00      	nop
 8010108:	00000000 	.word	0x00000000
 801010c:	7ff80000 	.word	0x7ff80000

08010110 <__ieee754_sqrt>:
 8010110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010114:	4a68      	ldr	r2, [pc, #416]	@ (80102b8 <__ieee754_sqrt+0x1a8>)
 8010116:	ec55 4b10 	vmov	r4, r5, d0
 801011a:	43aa      	bics	r2, r5
 801011c:	462b      	mov	r3, r5
 801011e:	4621      	mov	r1, r4
 8010120:	d110      	bne.n	8010144 <__ieee754_sqrt+0x34>
 8010122:	4622      	mov	r2, r4
 8010124:	4620      	mov	r0, r4
 8010126:	4629      	mov	r1, r5
 8010128:	f7f0 fa66 	bl	80005f8 <__aeabi_dmul>
 801012c:	4602      	mov	r2, r0
 801012e:	460b      	mov	r3, r1
 8010130:	4620      	mov	r0, r4
 8010132:	4629      	mov	r1, r5
 8010134:	f7f0 f8aa 	bl	800028c <__adddf3>
 8010138:	4604      	mov	r4, r0
 801013a:	460d      	mov	r5, r1
 801013c:	ec45 4b10 	vmov	d0, r4, r5
 8010140:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010144:	2d00      	cmp	r5, #0
 8010146:	dc0e      	bgt.n	8010166 <__ieee754_sqrt+0x56>
 8010148:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801014c:	4322      	orrs	r2, r4
 801014e:	d0f5      	beq.n	801013c <__ieee754_sqrt+0x2c>
 8010150:	b19d      	cbz	r5, 801017a <__ieee754_sqrt+0x6a>
 8010152:	4622      	mov	r2, r4
 8010154:	4620      	mov	r0, r4
 8010156:	4629      	mov	r1, r5
 8010158:	f7f0 f896 	bl	8000288 <__aeabi_dsub>
 801015c:	4602      	mov	r2, r0
 801015e:	460b      	mov	r3, r1
 8010160:	f7f0 fb74 	bl	800084c <__aeabi_ddiv>
 8010164:	e7e8      	b.n	8010138 <__ieee754_sqrt+0x28>
 8010166:	152a      	asrs	r2, r5, #20
 8010168:	d115      	bne.n	8010196 <__ieee754_sqrt+0x86>
 801016a:	2000      	movs	r0, #0
 801016c:	e009      	b.n	8010182 <__ieee754_sqrt+0x72>
 801016e:	0acb      	lsrs	r3, r1, #11
 8010170:	3a15      	subs	r2, #21
 8010172:	0549      	lsls	r1, r1, #21
 8010174:	2b00      	cmp	r3, #0
 8010176:	d0fa      	beq.n	801016e <__ieee754_sqrt+0x5e>
 8010178:	e7f7      	b.n	801016a <__ieee754_sqrt+0x5a>
 801017a:	462a      	mov	r2, r5
 801017c:	e7fa      	b.n	8010174 <__ieee754_sqrt+0x64>
 801017e:	005b      	lsls	r3, r3, #1
 8010180:	3001      	adds	r0, #1
 8010182:	02dc      	lsls	r4, r3, #11
 8010184:	d5fb      	bpl.n	801017e <__ieee754_sqrt+0x6e>
 8010186:	1e44      	subs	r4, r0, #1
 8010188:	1b12      	subs	r2, r2, r4
 801018a:	f1c0 0420 	rsb	r4, r0, #32
 801018e:	fa21 f404 	lsr.w	r4, r1, r4
 8010192:	4323      	orrs	r3, r4
 8010194:	4081      	lsls	r1, r0
 8010196:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801019a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801019e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80101a2:	07d2      	lsls	r2, r2, #31
 80101a4:	bf5c      	itt	pl
 80101a6:	005b      	lslpl	r3, r3, #1
 80101a8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80101ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80101b0:	bf58      	it	pl
 80101b2:	0049      	lslpl	r1, r1, #1
 80101b4:	2600      	movs	r6, #0
 80101b6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80101ba:	106d      	asrs	r5, r5, #1
 80101bc:	0049      	lsls	r1, r1, #1
 80101be:	2016      	movs	r0, #22
 80101c0:	4632      	mov	r2, r6
 80101c2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80101c6:	1917      	adds	r7, r2, r4
 80101c8:	429f      	cmp	r7, r3
 80101ca:	bfde      	ittt	le
 80101cc:	193a      	addle	r2, r7, r4
 80101ce:	1bdb      	suble	r3, r3, r7
 80101d0:	1936      	addle	r6, r6, r4
 80101d2:	0fcf      	lsrs	r7, r1, #31
 80101d4:	3801      	subs	r0, #1
 80101d6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80101da:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80101de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80101e2:	d1f0      	bne.n	80101c6 <__ieee754_sqrt+0xb6>
 80101e4:	4604      	mov	r4, r0
 80101e6:	2720      	movs	r7, #32
 80101e8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80101ec:	429a      	cmp	r2, r3
 80101ee:	eb00 0e0c 	add.w	lr, r0, ip
 80101f2:	db02      	blt.n	80101fa <__ieee754_sqrt+0xea>
 80101f4:	d113      	bne.n	801021e <__ieee754_sqrt+0x10e>
 80101f6:	458e      	cmp	lr, r1
 80101f8:	d811      	bhi.n	801021e <__ieee754_sqrt+0x10e>
 80101fa:	f1be 0f00 	cmp.w	lr, #0
 80101fe:	eb0e 000c 	add.w	r0, lr, ip
 8010202:	da42      	bge.n	801028a <__ieee754_sqrt+0x17a>
 8010204:	2800      	cmp	r0, #0
 8010206:	db40      	blt.n	801028a <__ieee754_sqrt+0x17a>
 8010208:	f102 0801 	add.w	r8, r2, #1
 801020c:	1a9b      	subs	r3, r3, r2
 801020e:	458e      	cmp	lr, r1
 8010210:	bf88      	it	hi
 8010212:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010216:	eba1 010e 	sub.w	r1, r1, lr
 801021a:	4464      	add	r4, ip
 801021c:	4642      	mov	r2, r8
 801021e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8010222:	3f01      	subs	r7, #1
 8010224:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8010228:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801022c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8010230:	d1dc      	bne.n	80101ec <__ieee754_sqrt+0xdc>
 8010232:	4319      	orrs	r1, r3
 8010234:	d01b      	beq.n	801026e <__ieee754_sqrt+0x15e>
 8010236:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80102bc <__ieee754_sqrt+0x1ac>
 801023a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80102c0 <__ieee754_sqrt+0x1b0>
 801023e:	e9da 0100 	ldrd	r0, r1, [sl]
 8010242:	e9db 2300 	ldrd	r2, r3, [fp]
 8010246:	f7f0 f81f 	bl	8000288 <__aeabi_dsub>
 801024a:	e9da 8900 	ldrd	r8, r9, [sl]
 801024e:	4602      	mov	r2, r0
 8010250:	460b      	mov	r3, r1
 8010252:	4640      	mov	r0, r8
 8010254:	4649      	mov	r1, r9
 8010256:	f7f0 fc4b 	bl	8000af0 <__aeabi_dcmple>
 801025a:	b140      	cbz	r0, 801026e <__ieee754_sqrt+0x15e>
 801025c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010260:	e9da 0100 	ldrd	r0, r1, [sl]
 8010264:	e9db 2300 	ldrd	r2, r3, [fp]
 8010268:	d111      	bne.n	801028e <__ieee754_sqrt+0x17e>
 801026a:	3601      	adds	r6, #1
 801026c:	463c      	mov	r4, r7
 801026e:	1072      	asrs	r2, r6, #1
 8010270:	0863      	lsrs	r3, r4, #1
 8010272:	07f1      	lsls	r1, r6, #31
 8010274:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8010278:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801027c:	bf48      	it	mi
 801027e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8010282:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8010286:	4618      	mov	r0, r3
 8010288:	e756      	b.n	8010138 <__ieee754_sqrt+0x28>
 801028a:	4690      	mov	r8, r2
 801028c:	e7be      	b.n	801020c <__ieee754_sqrt+0xfc>
 801028e:	f7ef fffd 	bl	800028c <__adddf3>
 8010292:	e9da 8900 	ldrd	r8, r9, [sl]
 8010296:	4602      	mov	r2, r0
 8010298:	460b      	mov	r3, r1
 801029a:	4640      	mov	r0, r8
 801029c:	4649      	mov	r1, r9
 801029e:	f7f0 fc1d 	bl	8000adc <__aeabi_dcmplt>
 80102a2:	b120      	cbz	r0, 80102ae <__ieee754_sqrt+0x19e>
 80102a4:	1ca0      	adds	r0, r4, #2
 80102a6:	bf08      	it	eq
 80102a8:	3601      	addeq	r6, #1
 80102aa:	3402      	adds	r4, #2
 80102ac:	e7df      	b.n	801026e <__ieee754_sqrt+0x15e>
 80102ae:	1c63      	adds	r3, r4, #1
 80102b0:	f023 0401 	bic.w	r4, r3, #1
 80102b4:	e7db      	b.n	801026e <__ieee754_sqrt+0x15e>
 80102b6:	bf00      	nop
 80102b8:	7ff00000 	.word	0x7ff00000
 80102bc:	200002d0 	.word	0x200002d0
 80102c0:	200002c8 	.word	0x200002c8
 80102c4:	00000000 	.word	0x00000000

080102c8 <__ieee754_log>:
 80102c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102cc:	ec51 0b10 	vmov	r0, r1, d0
 80102d0:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80102d4:	b087      	sub	sp, #28
 80102d6:	460d      	mov	r5, r1
 80102d8:	da26      	bge.n	8010328 <__ieee754_log+0x60>
 80102da:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80102de:	4303      	orrs	r3, r0
 80102e0:	4602      	mov	r2, r0
 80102e2:	d10a      	bne.n	80102fa <__ieee754_log+0x32>
 80102e4:	49ce      	ldr	r1, [pc, #824]	@ (8010620 <__ieee754_log+0x358>)
 80102e6:	2200      	movs	r2, #0
 80102e8:	2300      	movs	r3, #0
 80102ea:	2000      	movs	r0, #0
 80102ec:	f7f0 faae 	bl	800084c <__aeabi_ddiv>
 80102f0:	ec41 0b10 	vmov	d0, r0, r1
 80102f4:	b007      	add	sp, #28
 80102f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102fa:	2900      	cmp	r1, #0
 80102fc:	da05      	bge.n	801030a <__ieee754_log+0x42>
 80102fe:	460b      	mov	r3, r1
 8010300:	f7ef ffc2 	bl	8000288 <__aeabi_dsub>
 8010304:	2200      	movs	r2, #0
 8010306:	2300      	movs	r3, #0
 8010308:	e7f0      	b.n	80102ec <__ieee754_log+0x24>
 801030a:	4bc6      	ldr	r3, [pc, #792]	@ (8010624 <__ieee754_log+0x35c>)
 801030c:	2200      	movs	r2, #0
 801030e:	f7f0 f973 	bl	80005f8 <__aeabi_dmul>
 8010312:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8010316:	460d      	mov	r5, r1
 8010318:	4ac3      	ldr	r2, [pc, #780]	@ (8010628 <__ieee754_log+0x360>)
 801031a:	4295      	cmp	r5, r2
 801031c:	dd06      	ble.n	801032c <__ieee754_log+0x64>
 801031e:	4602      	mov	r2, r0
 8010320:	460b      	mov	r3, r1
 8010322:	f7ef ffb3 	bl	800028c <__adddf3>
 8010326:	e7e3      	b.n	80102f0 <__ieee754_log+0x28>
 8010328:	2300      	movs	r3, #0
 801032a:	e7f5      	b.n	8010318 <__ieee754_log+0x50>
 801032c:	152c      	asrs	r4, r5, #20
 801032e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8010332:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8010336:	441c      	add	r4, r3
 8010338:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 801033c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8010340:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010344:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8010348:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 801034c:	ea42 0105 	orr.w	r1, r2, r5
 8010350:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8010354:	2200      	movs	r2, #0
 8010356:	4bb5      	ldr	r3, [pc, #724]	@ (801062c <__ieee754_log+0x364>)
 8010358:	f7ef ff96 	bl	8000288 <__aeabi_dsub>
 801035c:	1cab      	adds	r3, r5, #2
 801035e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010362:	2b02      	cmp	r3, #2
 8010364:	4682      	mov	sl, r0
 8010366:	468b      	mov	fp, r1
 8010368:	f04f 0200 	mov.w	r2, #0
 801036c:	dc53      	bgt.n	8010416 <__ieee754_log+0x14e>
 801036e:	2300      	movs	r3, #0
 8010370:	f7f0 fbaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8010374:	b1d0      	cbz	r0, 80103ac <__ieee754_log+0xe4>
 8010376:	2c00      	cmp	r4, #0
 8010378:	f000 8120 	beq.w	80105bc <__ieee754_log+0x2f4>
 801037c:	4620      	mov	r0, r4
 801037e:	f7f0 f8d1 	bl	8000524 <__aeabi_i2d>
 8010382:	a391      	add	r3, pc, #580	@ (adr r3, 80105c8 <__ieee754_log+0x300>)
 8010384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010388:	4606      	mov	r6, r0
 801038a:	460f      	mov	r7, r1
 801038c:	f7f0 f934 	bl	80005f8 <__aeabi_dmul>
 8010390:	a38f      	add	r3, pc, #572	@ (adr r3, 80105d0 <__ieee754_log+0x308>)
 8010392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010396:	4604      	mov	r4, r0
 8010398:	460d      	mov	r5, r1
 801039a:	4630      	mov	r0, r6
 801039c:	4639      	mov	r1, r7
 801039e:	f7f0 f92b 	bl	80005f8 <__aeabi_dmul>
 80103a2:	4602      	mov	r2, r0
 80103a4:	460b      	mov	r3, r1
 80103a6:	4620      	mov	r0, r4
 80103a8:	4629      	mov	r1, r5
 80103aa:	e7ba      	b.n	8010322 <__ieee754_log+0x5a>
 80103ac:	a38a      	add	r3, pc, #552	@ (adr r3, 80105d8 <__ieee754_log+0x310>)
 80103ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b2:	4650      	mov	r0, sl
 80103b4:	4659      	mov	r1, fp
 80103b6:	f7f0 f91f 	bl	80005f8 <__aeabi_dmul>
 80103ba:	4602      	mov	r2, r0
 80103bc:	460b      	mov	r3, r1
 80103be:	2000      	movs	r0, #0
 80103c0:	499b      	ldr	r1, [pc, #620]	@ (8010630 <__ieee754_log+0x368>)
 80103c2:	f7ef ff61 	bl	8000288 <__aeabi_dsub>
 80103c6:	4652      	mov	r2, sl
 80103c8:	4606      	mov	r6, r0
 80103ca:	460f      	mov	r7, r1
 80103cc:	465b      	mov	r3, fp
 80103ce:	4650      	mov	r0, sl
 80103d0:	4659      	mov	r1, fp
 80103d2:	f7f0 f911 	bl	80005f8 <__aeabi_dmul>
 80103d6:	4602      	mov	r2, r0
 80103d8:	460b      	mov	r3, r1
 80103da:	4630      	mov	r0, r6
 80103dc:	4639      	mov	r1, r7
 80103de:	f7f0 f90b 	bl	80005f8 <__aeabi_dmul>
 80103e2:	4606      	mov	r6, r0
 80103e4:	460f      	mov	r7, r1
 80103e6:	b914      	cbnz	r4, 80103ee <__ieee754_log+0x126>
 80103e8:	4632      	mov	r2, r6
 80103ea:	463b      	mov	r3, r7
 80103ec:	e0a0      	b.n	8010530 <__ieee754_log+0x268>
 80103ee:	4620      	mov	r0, r4
 80103f0:	f7f0 f898 	bl	8000524 <__aeabi_i2d>
 80103f4:	a374      	add	r3, pc, #464	@ (adr r3, 80105c8 <__ieee754_log+0x300>)
 80103f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103fa:	4680      	mov	r8, r0
 80103fc:	4689      	mov	r9, r1
 80103fe:	f7f0 f8fb 	bl	80005f8 <__aeabi_dmul>
 8010402:	a373      	add	r3, pc, #460	@ (adr r3, 80105d0 <__ieee754_log+0x308>)
 8010404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010408:	4604      	mov	r4, r0
 801040a:	460d      	mov	r5, r1
 801040c:	4640      	mov	r0, r8
 801040e:	4649      	mov	r1, r9
 8010410:	f7f0 f8f2 	bl	80005f8 <__aeabi_dmul>
 8010414:	e0a5      	b.n	8010562 <__ieee754_log+0x29a>
 8010416:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801041a:	f7ef ff37 	bl	800028c <__adddf3>
 801041e:	4602      	mov	r2, r0
 8010420:	460b      	mov	r3, r1
 8010422:	4650      	mov	r0, sl
 8010424:	4659      	mov	r1, fp
 8010426:	f7f0 fa11 	bl	800084c <__aeabi_ddiv>
 801042a:	e9cd 0100 	strd	r0, r1, [sp]
 801042e:	4620      	mov	r0, r4
 8010430:	f7f0 f878 	bl	8000524 <__aeabi_i2d>
 8010434:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010438:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801043c:	4610      	mov	r0, r2
 801043e:	4619      	mov	r1, r3
 8010440:	f7f0 f8da 	bl	80005f8 <__aeabi_dmul>
 8010444:	4602      	mov	r2, r0
 8010446:	460b      	mov	r3, r1
 8010448:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801044c:	f7f0 f8d4 	bl	80005f8 <__aeabi_dmul>
 8010450:	a363      	add	r3, pc, #396	@ (adr r3, 80105e0 <__ieee754_log+0x318>)
 8010452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010456:	4680      	mov	r8, r0
 8010458:	4689      	mov	r9, r1
 801045a:	f7f0 f8cd 	bl	80005f8 <__aeabi_dmul>
 801045e:	a362      	add	r3, pc, #392	@ (adr r3, 80105e8 <__ieee754_log+0x320>)
 8010460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010464:	f7ef ff12 	bl	800028c <__adddf3>
 8010468:	4642      	mov	r2, r8
 801046a:	464b      	mov	r3, r9
 801046c:	f7f0 f8c4 	bl	80005f8 <__aeabi_dmul>
 8010470:	a35f      	add	r3, pc, #380	@ (adr r3, 80105f0 <__ieee754_log+0x328>)
 8010472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010476:	f7ef ff09 	bl	800028c <__adddf3>
 801047a:	4642      	mov	r2, r8
 801047c:	464b      	mov	r3, r9
 801047e:	f7f0 f8bb 	bl	80005f8 <__aeabi_dmul>
 8010482:	a35d      	add	r3, pc, #372	@ (adr r3, 80105f8 <__ieee754_log+0x330>)
 8010484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010488:	f7ef ff00 	bl	800028c <__adddf3>
 801048c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010490:	f7f0 f8b2 	bl	80005f8 <__aeabi_dmul>
 8010494:	a35a      	add	r3, pc, #360	@ (adr r3, 8010600 <__ieee754_log+0x338>)
 8010496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801049a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801049e:	4640      	mov	r0, r8
 80104a0:	4649      	mov	r1, r9
 80104a2:	f7f0 f8a9 	bl	80005f8 <__aeabi_dmul>
 80104a6:	a358      	add	r3, pc, #352	@ (adr r3, 8010608 <__ieee754_log+0x340>)
 80104a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ac:	f7ef feee 	bl	800028c <__adddf3>
 80104b0:	4642      	mov	r2, r8
 80104b2:	464b      	mov	r3, r9
 80104b4:	f7f0 f8a0 	bl	80005f8 <__aeabi_dmul>
 80104b8:	a355      	add	r3, pc, #340	@ (adr r3, 8010610 <__ieee754_log+0x348>)
 80104ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104be:	f7ef fee5 	bl	800028c <__adddf3>
 80104c2:	4642      	mov	r2, r8
 80104c4:	464b      	mov	r3, r9
 80104c6:	f7f0 f897 	bl	80005f8 <__aeabi_dmul>
 80104ca:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80104ce:	4602      	mov	r2, r0
 80104d0:	460b      	mov	r3, r1
 80104d2:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80104d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80104da:	f7ef fed7 	bl	800028c <__adddf3>
 80104de:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80104e2:	3551      	adds	r5, #81	@ 0x51
 80104e4:	4335      	orrs	r5, r6
 80104e6:	2d00      	cmp	r5, #0
 80104e8:	4680      	mov	r8, r0
 80104ea:	4689      	mov	r9, r1
 80104ec:	dd48      	ble.n	8010580 <__ieee754_log+0x2b8>
 80104ee:	4b50      	ldr	r3, [pc, #320]	@ (8010630 <__ieee754_log+0x368>)
 80104f0:	2200      	movs	r2, #0
 80104f2:	4650      	mov	r0, sl
 80104f4:	4659      	mov	r1, fp
 80104f6:	f7f0 f87f 	bl	80005f8 <__aeabi_dmul>
 80104fa:	4652      	mov	r2, sl
 80104fc:	465b      	mov	r3, fp
 80104fe:	f7f0 f87b 	bl	80005f8 <__aeabi_dmul>
 8010502:	4602      	mov	r2, r0
 8010504:	460b      	mov	r3, r1
 8010506:	4606      	mov	r6, r0
 8010508:	460f      	mov	r7, r1
 801050a:	4640      	mov	r0, r8
 801050c:	4649      	mov	r1, r9
 801050e:	f7ef febd 	bl	800028c <__adddf3>
 8010512:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010516:	f7f0 f86f 	bl	80005f8 <__aeabi_dmul>
 801051a:	4680      	mov	r8, r0
 801051c:	4689      	mov	r9, r1
 801051e:	b964      	cbnz	r4, 801053a <__ieee754_log+0x272>
 8010520:	4602      	mov	r2, r0
 8010522:	460b      	mov	r3, r1
 8010524:	4630      	mov	r0, r6
 8010526:	4639      	mov	r1, r7
 8010528:	f7ef feae 	bl	8000288 <__aeabi_dsub>
 801052c:	4602      	mov	r2, r0
 801052e:	460b      	mov	r3, r1
 8010530:	4650      	mov	r0, sl
 8010532:	4659      	mov	r1, fp
 8010534:	f7ef fea8 	bl	8000288 <__aeabi_dsub>
 8010538:	e6da      	b.n	80102f0 <__ieee754_log+0x28>
 801053a:	a323      	add	r3, pc, #140	@ (adr r3, 80105c8 <__ieee754_log+0x300>)
 801053c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010544:	f7f0 f858 	bl	80005f8 <__aeabi_dmul>
 8010548:	a321      	add	r3, pc, #132	@ (adr r3, 80105d0 <__ieee754_log+0x308>)
 801054a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054e:	4604      	mov	r4, r0
 8010550:	460d      	mov	r5, r1
 8010552:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010556:	f7f0 f84f 	bl	80005f8 <__aeabi_dmul>
 801055a:	4642      	mov	r2, r8
 801055c:	464b      	mov	r3, r9
 801055e:	f7ef fe95 	bl	800028c <__adddf3>
 8010562:	4602      	mov	r2, r0
 8010564:	460b      	mov	r3, r1
 8010566:	4630      	mov	r0, r6
 8010568:	4639      	mov	r1, r7
 801056a:	f7ef fe8d 	bl	8000288 <__aeabi_dsub>
 801056e:	4652      	mov	r2, sl
 8010570:	465b      	mov	r3, fp
 8010572:	f7ef fe89 	bl	8000288 <__aeabi_dsub>
 8010576:	4602      	mov	r2, r0
 8010578:	460b      	mov	r3, r1
 801057a:	4620      	mov	r0, r4
 801057c:	4629      	mov	r1, r5
 801057e:	e7d9      	b.n	8010534 <__ieee754_log+0x26c>
 8010580:	4602      	mov	r2, r0
 8010582:	460b      	mov	r3, r1
 8010584:	4650      	mov	r0, sl
 8010586:	4659      	mov	r1, fp
 8010588:	f7ef fe7e 	bl	8000288 <__aeabi_dsub>
 801058c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010590:	f7f0 f832 	bl	80005f8 <__aeabi_dmul>
 8010594:	4606      	mov	r6, r0
 8010596:	460f      	mov	r7, r1
 8010598:	2c00      	cmp	r4, #0
 801059a:	f43f af25 	beq.w	80103e8 <__ieee754_log+0x120>
 801059e:	a30a      	add	r3, pc, #40	@ (adr r3, 80105c8 <__ieee754_log+0x300>)
 80105a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105a8:	f7f0 f826 	bl	80005f8 <__aeabi_dmul>
 80105ac:	a308      	add	r3, pc, #32	@ (adr r3, 80105d0 <__ieee754_log+0x308>)
 80105ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b2:	4604      	mov	r4, r0
 80105b4:	460d      	mov	r5, r1
 80105b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105ba:	e729      	b.n	8010410 <__ieee754_log+0x148>
 80105bc:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8010618 <__ieee754_log+0x350>
 80105c0:	e698      	b.n	80102f4 <__ieee754_log+0x2c>
 80105c2:	bf00      	nop
 80105c4:	f3af 8000 	nop.w
 80105c8:	fee00000 	.word	0xfee00000
 80105cc:	3fe62e42 	.word	0x3fe62e42
 80105d0:	35793c76 	.word	0x35793c76
 80105d4:	3dea39ef 	.word	0x3dea39ef
 80105d8:	55555555 	.word	0x55555555
 80105dc:	3fd55555 	.word	0x3fd55555
 80105e0:	df3e5244 	.word	0xdf3e5244
 80105e4:	3fc2f112 	.word	0x3fc2f112
 80105e8:	96cb03de 	.word	0x96cb03de
 80105ec:	3fc74664 	.word	0x3fc74664
 80105f0:	94229359 	.word	0x94229359
 80105f4:	3fd24924 	.word	0x3fd24924
 80105f8:	55555593 	.word	0x55555593
 80105fc:	3fe55555 	.word	0x3fe55555
 8010600:	d078c69f 	.word	0xd078c69f
 8010604:	3fc39a09 	.word	0x3fc39a09
 8010608:	1d8e78af 	.word	0x1d8e78af
 801060c:	3fcc71c5 	.word	0x3fcc71c5
 8010610:	9997fa04 	.word	0x9997fa04
 8010614:	3fd99999 	.word	0x3fd99999
	...
 8010620:	c3500000 	.word	0xc3500000
 8010624:	43500000 	.word	0x43500000
 8010628:	7fefffff 	.word	0x7fefffff
 801062c:	3ff00000 	.word	0x3ff00000
 8010630:	3fe00000 	.word	0x3fe00000

08010634 <_init>:
 8010634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010636:	bf00      	nop
 8010638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801063a:	bc08      	pop	{r3}
 801063c:	469e      	mov	lr, r3
 801063e:	4770      	bx	lr

08010640 <_fini>:
 8010640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010642:	bf00      	nop
 8010644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010646:	bc08      	pop	{r3}
 8010648:	469e      	mov	lr, r3
 801064a:	4770      	bx	lr
